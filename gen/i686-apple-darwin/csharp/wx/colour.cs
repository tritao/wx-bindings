// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    [Flags]
    public enum C2S : uint
    {
        C2S_NAME = 1,
        C2S_CSS_SYNTAX = 2,
        C2S_HTML_SYNTAX = 4
    }

    public unsafe partial class RGBColor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.RGBColor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.RGBColor>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.RGBColor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.RGBColor(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.RGBColor __CreateInstance(global::wxSharp.RGBColor.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.RGBColor(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.RGBColor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.RGBColor.__Internal));
            *(global::wxSharp.RGBColor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RGBColor(global::wxSharp.RGBColor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RGBColor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Color : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxColourC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxColourC2Ehhhh")]
            internal static extern void ctor(global::System.IntPtr __instance, byte red, byte green, byte blue, byte alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxColourC2Em")]
            internal static extern void ctor(global::System.IntPtr __instance, uint colRGB);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxColourC2EPKw")]
            internal static extern void ctor_1(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string colourName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxColourC2EP7CGColor")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxColourC2EP7NSColor")]
            internal static extern void ctor_1(global::System.IntPtr __instance, global::System.IntPtr color);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxColourC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxColoureqERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr colour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxColourneERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr colour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxColour10GetCGColorEv")]
            internal static extern global::System.IntPtr GetCGColor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxColour13CreateCGColorEv")]
            internal static extern global::System.IntPtr CreateCGColor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxColour11GetRGBColorEP8RGBColor")]
            internal static extern void GetRGBColor(global::System.IntPtr __instance, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxColour14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase3SetEhhhh")]
            internal static extern void Set(global::System.IntPtr __instance, byte red, byte green, byte blue, byte alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase3SetEm")]
            internal static extern void Set(global::System.IntPtr __instance, uint colRGB);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase6SetRGBEj")]
            internal static extern void SetRGB(global::System.IntPtr __instance, uint colRGB);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase7SetRGBAEj")]
            internal static extern void SetRGBA(global::System.IntPtr __instance, uint colRGBA);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxColourBase6GetRGBEv")]
            internal static extern uint GetRGB(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxColourBase7GetRGBAEv")]
            internal static extern uint GetRGBA(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxColourBase12GetLuminanceEv")]
            internal static extern double GetLuminance(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase8MakeMonoEPhS0_S0_b")]
            internal static extern void MakeMono(byte* r, byte* g, byte* b, bool on);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase12MakeDisabledEPhS0_S0_h")]
            internal static extern void MakeDisabled(byte* r, byte* g, byte* b, byte brightness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase8MakeGreyEPhS0_S0_")]
            internal static extern void MakeGrey(byte* r, byte* g, byte* b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase8MakeGreyEPhS0_S0_ddd")]
            internal static extern void MakeGrey(byte* r, byte* g, byte* b, double weight_r, double weight_g, double weight_b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase10AlphaBlendEhhd")]
            internal static extern byte AlphaBlend(byte fg, byte bg, double alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase15ChangeLightnessEPhS0_S0_i")]
            internal static extern void ChangeLightness(byte* r, byte* g, byte* b, int ialpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxColourBase15ChangeLightnessEi")]
            internal static extern void ChangeLightness(global::System.IntPtr @return, global::System.IntPtr __instance, int ialpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxColourBase4InitEv")]
            internal static extern void Init(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Color> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Color>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.Color __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Color(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Color __CreateInstance(global::wxSharp.Color.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Color(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Color.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Color.__Internal));
            global::wxSharp.Color.__Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Color(global::wxSharp.Color.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Color(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public Color()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Color.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.Color");
        }

        public Color(byte red, byte green, byte blue, byte alpha)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Color.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, red, green, blue, alpha);
            SetupVTables(GetType().FullName == "wxSharp.Color");
        }

        public Color(uint colRGB)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Color.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, colRGB);
            SetupVTables(GetType().FullName == "wxSharp.Color");
        }

        public Color(string colourName)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Color.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_1(__Instance, colourName);
            SetupVTables(GetType().FullName == "wxSharp.Color");
        }

        public Color(global::wxSharp.CGColor col)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Color.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(col, null) ? global::System.IntPtr.Zero : col.__Instance;
            __Internal.ctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.Color");
        }

        public Color(global::wxSharp.NSColor color)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Color.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(color, null) ? global::System.IntPtr.Zero : color.__Instance;
            __Internal.ctor_1(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.Color");
        }

        public Color(global::wxSharp.Color _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Color.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_2(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.Color");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.Color __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.Color.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public virtual byte Red()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___RedDelegate = (global::wxSharp.Delegates.Func_byte_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_byte_IntPtr));
            var __ret = ___RedDelegate(__Instance);
            return __ret;
        }

        public virtual byte Green()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___GreenDelegate = (global::wxSharp.Delegates.Func_byte_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_byte_IntPtr));
            var __ret = ___GreenDelegate(__Instance);
            return __ret;
        }

        public virtual byte Blue()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___BlueDelegate = (global::wxSharp.Delegates.Func_byte_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_byte_IntPtr));
            var __ret = ___BlueDelegate(__Instance);
            return __ret;
        }

        public virtual byte Alpha()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___AlphaDelegate = (global::wxSharp.Delegates.Func_byte_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_byte_IntPtr));
            var __ret = ___AlphaDelegate(__Instance);
            return __ret;
        }

        public virtual bool IsSolid()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___IsSolidDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsSolidDelegate(__Instance);
            return __ret;
        }

        public static bool operator ==(global::wxSharp.Color __op, global::wxSharp.Color colour)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool colourNull = ReferenceEquals(colour, null);
            if (__opNull || colourNull)
                return __opNull && colourNull;
            var __arg0 = __op.__Instance;
            var __arg1 = colour.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::wxSharp.Color;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::wxSharp.Color.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::wxSharp.Color __op, global::wxSharp.Color colour)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool colourNull = ReferenceEquals(colour, null);
            if (__opNull || colourNull)
                return !(__opNull && colourNull);
            var __arg0 = __op.__Instance;
            var __arg1 = colour.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public global::wxSharp.CGColor GetCGColor()
        {
            var __ret = __Internal.GetCGColor(__Instance);
            global::wxSharp.CGColor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.CGColor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.CGColor) global::wxSharp.CGColor.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.CGColor.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.CGColor CreateCGColor()
        {
            var __ret = __Internal.CreateCGColor(__Instance);
            global::wxSharp.CGColor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.CGColor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.CGColor) global::wxSharp.CGColor.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.CGColor.__CreateInstance(__ret);
            return __result0;
        }

        public void GetRGBColor(global::wxSharp.RGBColor col)
        {
            var __arg0 = ReferenceEquals(col, null) ? global::System.IntPtr.Zero : col.__Instance;
            __Internal.GetRGBColor(__Instance, __arg0);
        }

        protected virtual void InitRGBA(byte r, byte g, byte b, byte a)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___InitRGBADelegate = (global::wxSharp.Delegates.Action_IntPtr_byte_byte_byte_byte) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_byte_byte_byte_byte));
            ___InitRGBADelegate(__Instance, r, g, b, a);
        }

        public void Set(byte red, byte green, byte blue, byte alpha)
        {
            __Internal.Set(__Instance, red, green, blue, alpha);
        }

        public void Set(uint colRGB)
        {
            __Internal.Set(__Instance, colRGB);
        }

        public void SetRGB(uint colRGB)
        {
            __Internal.SetRGB(__Instance, colRGB);
        }

        public void SetRGBA(uint colRGBA)
        {
            __Internal.SetRGBA(__Instance, colRGBA);
        }

        public uint GetRGB()
        {
            var __ret = __Internal.GetRGB(__Instance);
            return __ret;
        }

        public uint GetRGBA()
        {
            var __ret = __Internal.GetRGBA(__Instance);
            return __ret;
        }

        public double GetLuminance()
        {
            var __ret = __Internal.GetLuminance(__Instance);
            return __ret;
        }

        public global::wxSharp.Color ChangeLightness(int ialpha)
        {
            var __ret = new global::wxSharp.Color.__Internal();
            __Internal.ChangeLightness(new IntPtr(&__ret), __Instance, ialpha);
            return global::wxSharp.Color.__CreateInstance(__ret);
        }

        protected void Init()
        {
            __Internal.Init(__Instance);
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public static void MakeMono(byte* r, byte* g, byte* b, bool on)
        {
            __Internal.MakeMono(r, g, b, on);
        }

        public static void MakeDisabled(byte* r, byte* g, byte* b, byte brightness)
        {
            __Internal.MakeDisabled(r, g, b, brightness);
        }

        public static void MakeGrey(byte* r, byte* g, byte* b)
        {
            __Internal.MakeGrey(r, g, b);
        }

        public static void MakeGrey(byte* r, byte* g, byte* b, double weight_r, double weight_g, double weight_b)
        {
            __Internal.MakeGrey(r, g, b, weight_r, weight_g, weight_b);
        }

        public static byte AlphaBlend(byte fg, byte bg, double alpha)
        {
            var __ret = __Internal.AlphaBlend(fg, bg, alpha);
            return __ret;
        }

        public static void ChangeLightness(byte* r, byte* g, byte* b, int ialpha)
        {
            __Internal.ChangeLightness(r, g, b, ialpha);
        }

        #region Virtual table interop

        // wxColour
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Color) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // ChannelType Red() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_byte_IntPtr _RedDelegateInstance;

        private static byte _RedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Color) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Red();
        }

        // ChannelType Green() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_byte_IntPtr _GreenDelegateInstance;

        private static byte _GreenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Color) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Green();
        }

        // ChannelType Blue() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_byte_IntPtr _BlueDelegateInstance;

        private static byte _BlueDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Color) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Blue();
        }

        // ChannelType Alpha() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_byte_IntPtr _AlphaDelegateInstance;

        private static byte _AlphaDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Color) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Alpha();
        }

        // bool IsSolid() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsSolidDelegateInstance;

        private static bool _IsSolidDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Color) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsSolid();
        }

        // void InitRGBA(ChannelType r, ChannelType g, ChannelType b, ChannelType a) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_byte_byte_byte_byte _InitRGBADelegateInstance;

        private static void _InitRGBADelegateHook(global::System.IntPtr __instance, byte r, byte g, byte b, byte a)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Color) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.InitRGBA(r, g, b, a);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _RedDelegateInstance += _RedDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_RedDelegateInstance).ToPointer();
                _GreenDelegateInstance += _GreenDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GreenDelegateInstance).ToPointer();
                _BlueDelegateInstance += _BlueDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_BlueDelegateInstance).ToPointer();
                _AlphaDelegateInstance += _AlphaDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_AlphaDelegateInstance).ToPointer();
                _IsSolidDelegateInstance += _IsSolidDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_IsSolidDelegateInstance).ToPointer();
                _InitRGBADelegateInstance += _InitRGBADelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_InitRGBADelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(18 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(18 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = _Thunks[1];
                    *(void**) (vfptr0 + 36) = _Thunks[2];
                    *(void**) (vfptr0 + 40) = _Thunks[3];
                    *(void**) (vfptr0 + 44) = _Thunks[4];
                    *(void**) (vfptr0 + 48) = _Thunks[5];
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = _Thunks[6];
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe abstract partial class ColourRefData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxRefCounter;

            [FieldOffset(4)]
            internal int m_count;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxColourRefDataC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ColourRefData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ColourRefData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.ColourRefData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ColourRefDataInternal(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ColourRefData __CreateInstance(global::wxSharp.ColourRefData.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ColourRefDataInternal(native, skipVTables);
        }

        protected ColourRefData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        protected ColourRefData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ColourRefData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.ColourRefData");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.ColourRefData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.ColourRefData.__Internal*) __Instance)->vptr_wxRefCounter = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract float Red();

        public abstract float Green();

        public abstract float Blue();

        public abstract float Alpha();

        public virtual bool IsSolid()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___IsSolidDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsSolidDelegate(__Instance);
            return __ret;
        }

        public abstract global::wxSharp.CGColor GetCGColor();

        public abstract global::wxSharp.ColourRefData Clone();

        public virtual global::wxSharp.NSColor GetNSColor()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___GetNSColorDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetNSColorDelegate(__Instance);
            global::wxSharp.NSColor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.NSColor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.NSColor) global::wxSharp.NSColor.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.NSColor.__CreateInstance(__ret);
            return __result0;
        }

        public virtual global::wxSharp.NSImage GetNSPatternImage()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___GetNSPatternImageDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetNSPatternImageDelegate(__Instance);
            global::wxSharp.NSImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.NSImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.NSImage) global::wxSharp.NSImage.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.NSImage.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxColourRefData() {}
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // CGFloat Red() const = 0
        private static global::wxSharp.Delegates.Func_float_IntPtr _RedDelegateInstance;

        private static float _RedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Red();
        }

        // CGFloat Green() const = 0
        private static global::wxSharp.Delegates.Func_float_IntPtr _GreenDelegateInstance;

        private static float _GreenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Green();
        }

        // CGFloat Blue() const = 0
        private static global::wxSharp.Delegates.Func_float_IntPtr _BlueDelegateInstance;

        private static float _BlueDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Blue();
        }

        // CGFloat Alpha() const = 0
        private static global::wxSharp.Delegates.Func_float_IntPtr _AlphaDelegateInstance;

        private static float _AlphaDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Alpha();
        }

        // bool IsSolid() const { return true; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsSolidDelegateInstance;

        private static bool _IsSolidDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsSolid();
        }

        // CGColorRef GetCGColor() const = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetCGColorDelegateInstance;

        private static global::System.IntPtr _GetCGColorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetCGColor();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxColourRefData* Clone() const = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // WX_NSColor GetNSColor() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetNSColorDelegateInstance;

        private static global::System.IntPtr _GetNSColorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetNSColor();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // WX_NSImage GetNSPatternImage() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetNSPatternImageDelegateInstance;

        private static global::System.IntPtr _GetNSPatternImageDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ColourRefData) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetNSPatternImage();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[10];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _RedDelegateInstance += _RedDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_RedDelegateInstance).ToPointer();
                _GreenDelegateInstance += _GreenDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GreenDelegateInstance).ToPointer();
                _BlueDelegateInstance += _BlueDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_BlueDelegateInstance).ToPointer();
                _AlphaDelegateInstance += _AlphaDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_AlphaDelegateInstance).ToPointer();
                _IsSolidDelegateInstance += _IsSolidDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_IsSolidDelegateInstance).ToPointer();
                _GetCGColorDelegateInstance += _GetCGColorDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetCGColorDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetNSColorDelegateInstance += _GetNSColorDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_GetNSColorDelegateInstance).ToPointer();
                _GetNSPatternImageDelegateInstance += _GetNSPatternImageDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_GetNSPatternImageDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(14 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(14 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = _Thunks[8];
                    *(void**) (vfptr0 + 44) = _Thunks[9];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ColourRefDataInternal : global::wxSharp.ColourRefData, IDisposable
    {
        private static void* __CopyValue(global::wxSharp.ColourRefData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ColourRefData.__Internal));
            *(global::wxSharp.ColourRefData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal ColourRefDataInternal(global::wxSharp.ColourRefData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal ColourRefDataInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override float Red()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___RedDelegate = (global::wxSharp.Delegates.Func_float_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_float_IntPtr));
            var __ret = ___RedDelegate(__Instance);
            return __ret;
        }

        public override float Green()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___GreenDelegate = (global::wxSharp.Delegates.Func_float_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_float_IntPtr));
            var __ret = ___GreenDelegate(__Instance);
            return __ret;
        }

        public override float Blue()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___BlueDelegate = (global::wxSharp.Delegates.Func_float_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_float_IntPtr));
            var __ret = ___BlueDelegate(__Instance);
            return __ret;
        }

        public override float Alpha()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___AlphaDelegate = (global::wxSharp.Delegates.Func_float_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_float_IntPtr));
            var __ret = ___AlphaDelegate(__Instance);
            return __ret;
        }

        public override global::wxSharp.CGColor GetCGColor()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___GetCGColorDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetCGColorDelegate(__Instance);
            global::wxSharp.CGColor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.CGColor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.CGColor) global::wxSharp.CGColor.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.CGColor.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.ColourRefData Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.ColourRefData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.ColourRefData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.ColourRefData) global::wxSharp.ColourRefData.NativeToManagedMap[__ret];
            else global::wxSharp.ColourRefData.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.ColourRefData) global::wxSharp.ColourRefData.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class colour
    {
        public partial struct __Internal
        {
        }

        public static byte ALPHA_OPAQUE
        {
            get
            {
                var __ptr = (byte*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZL14wxALPHA_OPAQUE");
                return *__ptr;
            }
        }

        public static byte ALPHA_TRANSPARENT
        {
            get
            {
                var __ptr = (byte*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZL19wxALPHA_TRANSPARENT");
                return *__ptr;
            }
        }
    }
}
