// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum RasterOperationMode : uint
    {
        CLEAR = 0,
        XOR = 1,
        INVERT = 2,
        OR_REVERSE = 3,
        AND_REVERSE = 4,
        COPY = 5,
        AND = 6,
        AND_INVERT = 7,
        NO_OP = 8,
        NOR = 9,
        EQUIV = 10,
        SRC_INVERT = 11,
        OR_INVERT = 12,
        NAND = 13,
        OR = 14,
        SET = 15
    }

    public enum MappingMode : uint
    {
        MM_TEXT = 1,
        MM_METRIC = 2,
        MM_LOMETRIC = 3,
        MM_TWIPS = 4,
        MM_POINTS = 5
    }

    public enum FloodFillStyle : uint
    {
        FLOOD_SURFACE = 1,
        FLOOD_BORDER = 2
    }

    public unsafe partial class MemoryDC
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.MemoryDC> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.MemoryDC>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.MemoryDC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.MemoryDC(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.MemoryDC __CreateInstance(global::wxSharp.MemoryDC.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.MemoryDC(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.MemoryDC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.MemoryDC.__Internal));
            *(global::wxSharp.MemoryDC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MemoryDC(global::wxSharp.MemoryDC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MemoryDC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PrinterDC
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PrinterDC> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PrinterDC>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.PrinterDC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PrinterDC(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PrinterDC __CreateInstance(global::wxSharp.PrinterDC.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PrinterDC(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PrinterDC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PrinterDC.__Internal));
            *(global::wxSharp.PrinterDC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PrinterDC(global::wxSharp.PrinterDC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PrinterDC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ScreenDC
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ScreenDC> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ScreenDC>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.ScreenDC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ScreenDC(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ScreenDC __CreateInstance(global::wxSharp.ScreenDC.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ScreenDC(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ScreenDC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ScreenDC.__Internal));
            *(global::wxSharp.ScreenDC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ScreenDC(global::wxSharp.ScreenDC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScreenDC(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class PrintData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PrintData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PrintData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.PrintData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PrintData(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PrintData __CreateInstance(global::wxSharp.PrintData.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PrintData(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PrintData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PrintData.__Internal));
            *(global::wxSharp.PrintData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PrintData(global::wxSharp.PrintData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PrintData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FontMetrics : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int height;

            [FieldOffset(4)]
            internal int ascent;

            [FieldOffset(8)]
            internal int descent;

            [FieldOffset(12)]
            internal int internalLeading;

            [FieldOffset(16)]
            internal int externalLeading;

            [FieldOffset(20)]
            internal int averageWidth;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxFontMetricsC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxFontMetricsC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.FontMetrics> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.FontMetrics>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.FontMetrics __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.FontMetrics(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.FontMetrics __CreateInstance(global::wxSharp.FontMetrics.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.FontMetrics(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.FontMetrics.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.FontMetrics.__Internal));
            *(global::wxSharp.FontMetrics.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FontMetrics(global::wxSharp.FontMetrics.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FontMetrics(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public FontMetrics()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.FontMetrics.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public FontMetrics(global::wxSharp.FontMetrics _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.FontMetrics.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::wxSharp.FontMetrics.__Internal*) __Instance) = *((global::wxSharp.FontMetrics.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.FontMetrics __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int height
        {
            get
            {
                return ((global::wxSharp.FontMetrics.__Internal*) __Instance)->height;
            }

            set
            {
                ((global::wxSharp.FontMetrics.__Internal*)__Instance)->height = value;
            }
        }

        public int ascent
        {
            get
            {
                return ((global::wxSharp.FontMetrics.__Internal*) __Instance)->ascent;
            }

            set
            {
                ((global::wxSharp.FontMetrics.__Internal*)__Instance)->ascent = value;
            }
        }

        public int descent
        {
            get
            {
                return ((global::wxSharp.FontMetrics.__Internal*) __Instance)->descent;
            }

            set
            {
                ((global::wxSharp.FontMetrics.__Internal*)__Instance)->descent = value;
            }
        }

        public int internalLeading
        {
            get
            {
                return ((global::wxSharp.FontMetrics.__Internal*) __Instance)->internalLeading;
            }

            set
            {
                ((global::wxSharp.FontMetrics.__Internal*)__Instance)->internalLeading = value;
            }
        }

        public int externalLeading
        {
            get
            {
                return ((global::wxSharp.FontMetrics.__Internal*) __Instance)->externalLeading;
            }

            set
            {
                ((global::wxSharp.FontMetrics.__Internal*)__Instance)->externalLeading = value;
            }
        }

        public int averageWidth
        {
            get
            {
                return ((global::wxSharp.FontMetrics.__Internal*) __Instance)->averageWidth;
            }

            set
            {
                ((global::wxSharp.FontMetrics.__Internal*)__Instance)->averageWidth = value;
            }
        }
    }

    public unsafe partial class DC : global::wxSharp.Object, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_pimpl;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC14CopyAttributesERKS_")]
            internal static extern void CopyAttributes(global::System.IntPtr __instance, global::System.IntPtr dc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC9GetWindowEv")]
            internal static extern global::System.IntPtr GetWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC9GetHandleEv")]
            internal static extern global::System.IntPtr GetHandle(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC4IsOkEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsOk(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC13CanDrawBitmapEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CanDrawBitmap(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC16CanGetTextExtentEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CanGetTextExtent(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC7GetSizeEPiS0_")]
            internal static extern void GetSize(global::System.IntPtr __instance, int* width, int* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC7GetSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC9GetSizeMMEPiS0_")]
            internal static extern void GetSizeMM(global::System.IntPtr __instance, int* width, int* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC9GetSizeMMEv")]
            internal static extern global::wxSharp.Size.__Internal GetSizeMM(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC8GetDepthEv")]
            internal static extern int GetDepth(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC6GetPPIEv")]
            internal static extern global::wxSharp.Size.__Internal GetPPI(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC21GetContentScaleFactorEv")]
            internal static extern double GetContentScaleFactor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC6EndDocEv")]
            internal static extern void EndDoc(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9StartPageEv")]
            internal static extern void StartPage(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC7EndPageEv")]
            internal static extern void EndPage(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC15CalcBoundingBoxEii")]
            internal static extern void CalcBoundingBox(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC16ResetBoundingBoxEv")]
            internal static extern void ResetBoundingBox(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC4MinXEv")]
            internal static extern int MinX(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC4MaxXEv")]
            internal static extern int MaxX(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC4MinYEv")]
            internal static extern int MinY(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC4MaxYEv")]
            internal static extern int MaxY(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC6SetPenERK5wxPen")]
            internal static extern void SetPen(global::System.IntPtr __instance, global::System.IntPtr pen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC8SetBrushERK7wxBrush")]
            internal static extern void SetBrush(global::System.IntPtr __instance, global::System.IntPtr brush);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC13SetBackgroundERK7wxBrush")]
            internal static extern void SetBackground(global::System.IntPtr __instance, global::System.IntPtr brush);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC17SetBackgroundModeEi")]
            internal static extern void SetBackgroundMode(global::System.IntPtr __instance, int mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC17GetBackgroundModeEv")]
            internal static extern int GetBackgroundMode(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC17SetTextForegroundERK8wxColour")]
            internal static extern void SetTextForeground(global::System.IntPtr __instance, global::System.IntPtr colour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC17SetTextBackgroundERK8wxColour")]
            internal static extern void SetTextBackground(global::System.IntPtr __instance, global::System.IntPtr colour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC18SetLogicalFunctionE21wxRasterOperationMode")]
            internal static extern void SetLogicalFunction(global::System.IntPtr __instance, global::wxSharp.RasterOperationMode function);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC18GetLogicalFunctionEv")]
            internal static extern global::wxSharp.RasterOperationMode GetLogicalFunction(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC13GetCharHeightEv")]
            internal static extern int GetCharHeight(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC12GetCharWidthEv")]
            internal static extern int GetCharWidth(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC14GetFontMetricsEv")]
            internal static extern void GetFontMetrics(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC5ClearEv")]
            internal static extern void Clear(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC17SetClippingRegionEiiii")]
            internal static extern void SetClippingRegion(global::System.IntPtr __instance, int x, int y, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC17SetClippingRegionERK7wxPointRK6wxSize")]
            internal static extern void SetClippingRegion(global::System.IntPtr __instance, global::System.IntPtr pt, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC17SetClippingRegionERK6wxRect")]
            internal static extern void SetClippingRegion(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC21DestroyClippingRegionEv")]
            internal static extern void DestroyClippingRegion(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC14GetClippingBoxEPiS0_S0_S0_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetClippingBox(global::System.IntPtr __instance, int* x, int* y, int* w, int* h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC14GetClippingBoxER6wxRect")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetClippingBox(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC16DeviceToLogicalXEi")]
            internal static extern int DeviceToLogicalX(global::System.IntPtr __instance, int x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC16DeviceToLogicalYEi")]
            internal static extern int DeviceToLogicalY(global::System.IntPtr __instance, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC19DeviceToLogicalXRelEi")]
            internal static extern int DeviceToLogicalXRel(global::System.IntPtr __instance, int x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC19DeviceToLogicalYRelEi")]
            internal static extern int DeviceToLogicalYRel(global::System.IntPtr __instance, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC16LogicalToDeviceXEi")]
            internal static extern int LogicalToDeviceX(global::System.IntPtr __instance, int x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC16LogicalToDeviceYEi")]
            internal static extern int LogicalToDeviceY(global::System.IntPtr __instance, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC19LogicalToDeviceXRelEi")]
            internal static extern int LogicalToDeviceXRel(global::System.IntPtr __instance, int x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC19LogicalToDeviceYRelEi")]
            internal static extern int LogicalToDeviceYRel(global::System.IntPtr __instance, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC10SetMapModeE13wxMappingMode")]
            internal static extern void SetMapMode(global::System.IntPtr __instance, global::wxSharp.MappingMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC10GetMapModeEv")]
            internal static extern global::wxSharp.MappingMode GetMapMode(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC12SetUserScaleEdd")]
            internal static extern void SetUserScale(global::System.IntPtr __instance, double x, double y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC12GetUserScaleEPdS0_")]
            internal static extern void GetUserScale(global::System.IntPtr __instance, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC15SetLogicalScaleEdd")]
            internal static extern void SetLogicalScale(global::System.IntPtr __instance, double x, double y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC15GetLogicalScaleEPdS0_")]
            internal static extern void GetLogicalScale(global::System.IntPtr __instance, double* x, double* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC16SetLogicalOriginEii")]
            internal static extern void SetLogicalOrigin(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC16GetLogicalOriginEPiS0_")]
            internal static extern void GetLogicalOrigin(global::System.IntPtr __instance, int* x, int* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC16GetLogicalOriginEv")]
            internal static extern global::wxSharp.Point.__Internal GetLogicalOrigin(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC15SetDeviceOriginEii")]
            internal static extern void SetDeviceOrigin(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC15GetDeviceOriginEPiS0_")]
            internal static extern void GetDeviceOrigin(global::System.IntPtr __instance, int* x, int* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC15GetDeviceOriginEv")]
            internal static extern global::wxSharp.Point.__Internal GetDeviceOrigin(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC18SetAxisOrientationEbb")]
            internal static extern void SetAxisOrientation(global::System.IntPtr __instance, bool xLeftRight, bool yBottomUp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC21CanUseTransformMatrixEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CanUseTransformMatrix(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC20ResetTransformMatrixEv")]
            internal static extern void ResetTransformMatrix(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC20SetDeviceLocalOriginEii")]
            internal static extern void SetDeviceLocalOrigin(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9FloodFillEiiRK8wxColour16wxFloodFillStyle")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FloodFill(global::System.IntPtr __instance, int x, int y, global::System.IntPtr col, global::wxSharp.FloodFillStyle style);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9FloodFillERK7wxPointRK8wxColour16wxFloodFillStyle")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FloodFill(global::System.IntPtr __instance, global::System.IntPtr pt, global::System.IntPtr col, global::wxSharp.FloodFillStyle style);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC22GradientFillConcentricERK6wxRectRK8wxColourS5_")]
            internal static extern void GradientFillConcentric(global::System.IntPtr __instance, global::System.IntPtr rect, global::System.IntPtr initialColour, global::System.IntPtr destColour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC22GradientFillConcentricERK6wxRectRK8wxColourS5_RK7wxPoint")]
            internal static extern void GradientFillConcentric(global::System.IntPtr __instance, global::System.IntPtr rect, global::System.IntPtr initialColour, global::System.IntPtr destColour, global::System.IntPtr circleCenter);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC18GradientFillLinearERK6wxRectRK8wxColourS5_11wxDirection")]
            internal static extern void GradientFillLinear(global::System.IntPtr __instance, global::System.IntPtr rect, global::System.IntPtr initialColour, global::System.IntPtr destColour, global::wxSharp.Direction nDirection);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC8GetPixelEiiP8wxColour")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPixel(global::System.IntPtr __instance, int x, int y, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK4wxDC8GetPixelERK7wxPointP8wxColour")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPixel(global::System.IntPtr __instance, global::System.IntPtr pt, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC8DrawLineEiiii")]
            internal static extern void DrawLine(global::System.IntPtr __instance, int x1, int y1, int x2, int y2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC8DrawLineERK7wxPointS2_")]
            internal static extern void DrawLine(global::System.IntPtr __instance, global::System.IntPtr pt1, global::System.IntPtr pt2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9CrossHairEii")]
            internal static extern void CrossHair(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9CrossHairERK7wxPoint")]
            internal static extern void CrossHair(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC7DrawArcEiiiiii")]
            internal static extern void DrawArc(global::System.IntPtr __instance, int x1, int y1, int x2, int y2, int xc, int yc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC7DrawArcERK7wxPointS2_S2_")]
            internal static extern void DrawArc(global::System.IntPtr __instance, global::System.IntPtr pt1, global::System.IntPtr pt2, global::System.IntPtr centre);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC13DrawCheckMarkEiiii")]
            internal static extern void DrawCheckMark(global::System.IntPtr __instance, int x, int y, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC13DrawCheckMarkERK6wxRect")]
            internal static extern void DrawCheckMark(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC15DrawEllipticArcEiiiidd")]
            internal static extern void DrawEllipticArc(global::System.IntPtr __instance, int x, int y, int w, int h, double sa, double ea);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC15DrawEllipticArcERK7wxPointRK6wxSizedd")]
            internal static extern void DrawEllipticArc(global::System.IntPtr __instance, global::System.IntPtr pt, global::System.IntPtr sz, double sa, double ea);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9DrawPointEii")]
            internal static extern void DrawPoint(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9DrawPointERK7wxPoint")]
            internal static extern void DrawPoint(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9DrawLinesEiPK7wxPointii")]
            internal static extern void DrawLines(global::System.IntPtr __instance, int n, global::wxSharp.Point.__Internal[] points, int xoffset, int yoffset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9DrawLinesEPK11wxPointListii")]
            internal static extern void DrawLines(global::System.IntPtr __instance, global::System.IntPtr list, int xoffset, int yoffset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC11DrawPolygonEiPK7wxPointii17wxPolygonFillMode")]
            internal static extern void DrawPolygon(global::System.IntPtr __instance, int n, global::wxSharp.Point.__Internal[] points, int xoffset, int yoffset, global::wxSharp.PolygonFillMode fillStyle);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC11DrawPolygonEPK11wxPointListii17wxPolygonFillMode")]
            internal static extern void DrawPolygon(global::System.IntPtr __instance, global::System.IntPtr list, int xoffset, int yoffset, global::wxSharp.PolygonFillMode fillStyle);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC15DrawPolyPolygonEiPKiPK7wxPointii17wxPolygonFillMode")]
            internal static extern void DrawPolyPolygon(global::System.IntPtr __instance, int n, int[] count, global::wxSharp.Point.__Internal[] points, int xoffset, int yoffset, global::wxSharp.PolygonFillMode fillStyle);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC13DrawRectangleEiiii")]
            internal static extern void DrawRectangle(global::System.IntPtr __instance, int x, int y, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC13DrawRectangleERK7wxPointRK6wxSize")]
            internal static extern void DrawRectangle(global::System.IntPtr __instance, global::System.IntPtr pt, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC13DrawRectangleERK6wxRect")]
            internal static extern void DrawRectangle(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC20DrawRoundedRectangleEiiiid")]
            internal static extern void DrawRoundedRectangle(global::System.IntPtr __instance, int x, int y, int width, int height, double radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC20DrawRoundedRectangleERK7wxPointRK6wxSized")]
            internal static extern void DrawRoundedRectangle(global::System.IntPtr __instance, global::System.IntPtr pt, global::System.IntPtr sz, double radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC20DrawRoundedRectangleERK6wxRectd")]
            internal static extern void DrawRoundedRectangle(global::System.IntPtr __instance, global::System.IntPtr r, double radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC10DrawCircleEiii")]
            internal static extern void DrawCircle(global::System.IntPtr __instance, int x, int y, int radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC10DrawCircleERK7wxPointi")]
            internal static extern void DrawCircle(global::System.IntPtr __instance, global::System.IntPtr pt, int radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC11DrawEllipseEiiii")]
            internal static extern void DrawEllipse(global::System.IntPtr __instance, int x, int y, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC11DrawEllipseERK7wxPointRK6wxSize")]
            internal static extern void DrawEllipse(global::System.IntPtr __instance, global::System.IntPtr pt, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC11DrawEllipseERK6wxRect")]
            internal static extern void DrawEllipse(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC4BlitEiiiiPS_ii21wxRasterOperationModebii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Blit(global::System.IntPtr __instance, int xdest, int ydest, int width, int height, global::System.IntPtr source, int xsrc, int ysrc, global::wxSharp.RasterOperationMode rop, bool useMask, int xsrcMask, int ysrcMask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC4BlitERK7wxPointRK6wxSizePS_S2_21wxRasterOperationModebS2_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Blit(global::System.IntPtr __instance, global::System.IntPtr destPt, global::System.IntPtr sz, global::System.IntPtr source, global::System.IntPtr srcPt, global::wxSharp.RasterOperationMode rop, bool useMask, global::System.IntPtr srcPtMask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC11StretchBlitEiiiiPS_iiii21wxRasterOperationModebii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool StretchBlit(global::System.IntPtr __instance, int dstX, int dstY, int dstWidth, int dstHeight, global::System.IntPtr source, int srcX, int srcY, int srcWidth, int srcHeight, global::wxSharp.RasterOperationMode rop, bool useMask, int srcMaskX, int srcMaskY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC11StretchBlitERK7wxPointRK6wxSizePS_S2_S5_21wxRasterOperationModebS2_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool StretchBlit(global::System.IntPtr __instance, global::System.IntPtr dstPt, global::System.IntPtr dstSize, global::System.IntPtr source, global::System.IntPtr srcPt, global::System.IntPtr srcSize, global::wxSharp.RasterOperationMode rop, bool useMask, global::System.IntPtr srcMaskPt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC10DrawSplineEiiiiii")]
            internal static extern void DrawSpline(global::System.IntPtr __instance, int x1, int y1, int x2, int y2, int x3, int y3);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC10DrawSplineEiPK7wxPoint")]
            internal static extern void DrawSpline(global::System.IntPtr __instance, int n, global::wxSharp.Point.__Internal[] points);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC10DrawSplineEPK11wxPointList")]
            internal static extern void DrawSpline(global::System.IntPtr __instance, global::System.IntPtr points);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN4wxDC9SetWindowEP8wxWindow")]
            internal static extern void SetWindow(global::System.IntPtr __instance, global::System.IntPtr w);
        }

        internal static new global::wxSharp.DC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DC(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DC __CreateInstance(global::wxSharp.DC.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DC(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DC.__Internal));
            *(global::wxSharp.DC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DC(global::wxSharp.DC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DC(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public virtual int GetResolution()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___GetResolutionDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___GetResolutionDelegate(__Instance);
            return __ret;
        }

        public virtual global::wxSharp.GraphicsContext GetGraphicsContext()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___GetGraphicsContextDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetGraphicsContextDelegate(__Instance);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void SetGraphicsContext(global::wxSharp.GraphicsContext ctx)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___SetGraphicsContextDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(ctx, null) ? global::System.IntPtr.Zero : ctx.__Instance;
            ___SetGraphicsContextDelegate(__Instance, __arg0);
        }

        public void CopyAttributes(global::wxSharp.DC dc)
        {
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            __Internal.CopyAttributes(__Instance, __arg0);
        }

        public global::wxSharp.Window GetWindow()
        {
            var __ret = __Internal.GetWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public global::System.IntPtr GetHandle()
        {
            var __ret = __Internal.GetHandle(__Instance);
            return __ret;
        }

        public bool IsOk()
        {
            var __ret = __Internal.IsOk(__Instance);
            return __ret;
        }

        public bool CanDrawBitmap()
        {
            var __ret = __Internal.CanDrawBitmap(__Instance);
            return __ret;
        }

        public bool CanGetTextExtent()
        {
            var __ret = __Internal.CanGetTextExtent(__Instance);
            return __ret;
        }

        public void GetSize(ref int width, ref int height)
        {
            fixed (int* __width0 = &width)
            {
                var __arg0 = __width0;
                fixed (int* __height1 = &height)
                {
                    var __arg1 = __height1;
                    __Internal.GetSize(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Size GetSize()
        {
            var __ret = __Internal.GetSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void GetSizeMM(ref int width, ref int height)
        {
            fixed (int* __width0 = &width)
            {
                var __arg0 = __width0;
                fixed (int* __height1 = &height)
                {
                    var __arg1 = __height1;
                    __Internal.GetSizeMM(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Size GetSizeMM()
        {
            var __ret = __Internal.GetSizeMM(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public int GetDepth()
        {
            var __ret = __Internal.GetDepth(__Instance);
            return __ret;
        }

        public global::wxSharp.Size GetPPI()
        {
            var __ret = __Internal.GetPPI(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public double GetContentScaleFactor()
        {
            var __ret = __Internal.GetContentScaleFactor(__Instance);
            return __ret;
        }

        public void EndDoc()
        {
            __Internal.EndDoc(__Instance);
        }

        public void StartPage()
        {
            __Internal.StartPage(__Instance);
        }

        public void EndPage()
        {
            __Internal.EndPage(__Instance);
        }

        public void CalcBoundingBox(int x, int y)
        {
            __Internal.CalcBoundingBox(__Instance, x, y);
        }

        public void ResetBoundingBox()
        {
            __Internal.ResetBoundingBox(__Instance);
        }

        public int MinX()
        {
            var __ret = __Internal.MinX(__Instance);
            return __ret;
        }

        public int MaxX()
        {
            var __ret = __Internal.MaxX(__Instance);
            return __ret;
        }

        public int MinY()
        {
            var __ret = __Internal.MinY(__Instance);
            return __ret;
        }

        public int MaxY()
        {
            var __ret = __Internal.MaxY(__Instance);
            return __ret;
        }

        public void SetPen(global::wxSharp.Pen pen)
        {
            if (ReferenceEquals(pen, null))
                throw new global::System.ArgumentNullException("pen", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pen.__Instance;
            __Internal.SetPen(__Instance, __arg0);
        }

        public void SetBrush(global::wxSharp.Brush brush)
        {
            if (ReferenceEquals(brush, null))
                throw new global::System.ArgumentNullException("brush", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = brush.__Instance;
            __Internal.SetBrush(__Instance, __arg0);
        }

        public void SetBackground(global::wxSharp.Brush brush)
        {
            if (ReferenceEquals(brush, null))
                throw new global::System.ArgumentNullException("brush", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = brush.__Instance;
            __Internal.SetBackground(__Instance, __arg0);
        }

        public void SetBackgroundMode(int mode)
        {
            __Internal.SetBackgroundMode(__Instance, mode);
        }

        public int GetBackgroundMode()
        {
            var __ret = __Internal.GetBackgroundMode(__Instance);
            return __ret;
        }

        public void SetTextForeground(global::wxSharp.Color colour)
        {
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = colour.__Instance;
            __Internal.SetTextForeground(__Instance, __arg0);
        }

        public void SetTextBackground(global::wxSharp.Color colour)
        {
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = colour.__Instance;
            __Internal.SetTextBackground(__Instance, __arg0);
        }

        public void SetLogicalFunction(global::wxSharp.RasterOperationMode function)
        {
            __Internal.SetLogicalFunction(__Instance, function);
        }

        public global::wxSharp.RasterOperationMode GetLogicalFunction()
        {
            var __ret = __Internal.GetLogicalFunction(__Instance);
            return __ret;
        }

        public int GetCharHeight()
        {
            var __ret = __Internal.GetCharHeight(__Instance);
            return __ret;
        }

        public int GetCharWidth()
        {
            var __ret = __Internal.GetCharWidth(__Instance);
            return __ret;
        }

        public global::wxSharp.FontMetrics GetFontMetrics()
        {
            var __ret = new global::wxSharp.FontMetrics.__Internal();
            __Internal.GetFontMetrics(new IntPtr(&__ret), __Instance);
            return global::wxSharp.FontMetrics.__CreateInstance(__ret);
        }

        public void Clear()
        {
            __Internal.Clear(__Instance);
        }

        public void SetClippingRegion(int x, int y, int width, int height)
        {
            __Internal.SetClippingRegion(__Instance, x, y, width, height);
        }

        public void SetClippingRegion(global::wxSharp.Point pt, global::wxSharp.Size sz)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sz.__Instance;
            __Internal.SetClippingRegion(__Instance, __arg0, __arg1);
        }

        public void SetClippingRegion(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.SetClippingRegion(__Instance, __arg0);
        }

        public void DestroyClippingRegion()
        {
            __Internal.DestroyClippingRegion(__Instance);
        }

        public bool GetClippingBox(ref int x, ref int y, ref int w, ref int h)
        {
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    fixed (int* __w2 = &w)
                    {
                        var __arg2 = __w2;
                        fixed (int* __h3 = &h)
                        {
                            var __arg3 = __h3;
                            var __ret = __Internal.GetClippingBox(__Instance, __arg0, __arg1, __arg2, __arg3);
                            return __ret;
                        }
                    }
                }
            }
        }

        public bool GetClippingBox(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            var __ret = __Internal.GetClippingBox(__Instance, __arg0);
            return __ret;
        }

        public int DeviceToLogicalX(int x)
        {
            var __ret = __Internal.DeviceToLogicalX(__Instance, x);
            return __ret;
        }

        public int DeviceToLogicalY(int y)
        {
            var __ret = __Internal.DeviceToLogicalY(__Instance, y);
            return __ret;
        }

        public int DeviceToLogicalXRel(int x)
        {
            var __ret = __Internal.DeviceToLogicalXRel(__Instance, x);
            return __ret;
        }

        public int DeviceToLogicalYRel(int y)
        {
            var __ret = __Internal.DeviceToLogicalYRel(__Instance, y);
            return __ret;
        }

        public int LogicalToDeviceX(int x)
        {
            var __ret = __Internal.LogicalToDeviceX(__Instance, x);
            return __ret;
        }

        public int LogicalToDeviceY(int y)
        {
            var __ret = __Internal.LogicalToDeviceY(__Instance, y);
            return __ret;
        }

        public int LogicalToDeviceXRel(int x)
        {
            var __ret = __Internal.LogicalToDeviceXRel(__Instance, x);
            return __ret;
        }

        public int LogicalToDeviceYRel(int y)
        {
            var __ret = __Internal.LogicalToDeviceYRel(__Instance, y);
            return __ret;
        }

        public void SetMapMode(global::wxSharp.MappingMode mode)
        {
            __Internal.SetMapMode(__Instance, mode);
        }

        public global::wxSharp.MappingMode GetMapMode()
        {
            var __ret = __Internal.GetMapMode(__Instance);
            return __ret;
        }

        public void SetUserScale(double x, double y)
        {
            __Internal.SetUserScale(__Instance, x, y);
        }

        public void GetUserScale(ref double x, ref double y)
        {
            fixed (double* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (double* __y1 = &y)
                {
                    var __arg1 = __y1;
                    __Internal.GetUserScale(__Instance, __arg0, __arg1);
                }
            }
        }

        public void SetLogicalScale(double x, double y)
        {
            __Internal.SetLogicalScale(__Instance, x, y);
        }

        public void GetLogicalScale(ref double x, ref double y)
        {
            fixed (double* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (double* __y1 = &y)
                {
                    var __arg1 = __y1;
                    __Internal.GetLogicalScale(__Instance, __arg0, __arg1);
                }
            }
        }

        public void SetLogicalOrigin(int x, int y)
        {
            __Internal.SetLogicalOrigin(__Instance, x, y);
        }

        public void GetLogicalOrigin(ref int x, ref int y)
        {
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    __Internal.GetLogicalOrigin(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Point GetLogicalOrigin()
        {
            var __ret = __Internal.GetLogicalOrigin(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void SetDeviceOrigin(int x, int y)
        {
            __Internal.SetDeviceOrigin(__Instance, x, y);
        }

        public void GetDeviceOrigin(ref int x, ref int y)
        {
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    __Internal.GetDeviceOrigin(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Point GetDeviceOrigin()
        {
            var __ret = __Internal.GetDeviceOrigin(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void SetAxisOrientation(bool xLeftRight, bool yBottomUp)
        {
            __Internal.SetAxisOrientation(__Instance, xLeftRight, yBottomUp);
        }

        public bool CanUseTransformMatrix()
        {
            var __ret = __Internal.CanUseTransformMatrix(__Instance);
            return __ret;
        }

        public void ResetTransformMatrix()
        {
            __Internal.ResetTransformMatrix(__Instance);
        }

        public void SetDeviceLocalOrigin(int x, int y)
        {
            __Internal.SetDeviceLocalOrigin(__Instance, x, y);
        }

        public bool FloodFill(int x, int y, global::wxSharp.Color col, global::wxSharp.FloodFillStyle style)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = col.__Instance;
            var __ret = __Internal.FloodFill(__Instance, x, y, __arg2, style);
            return __ret;
        }

        public bool FloodFill(global::wxSharp.Point pt, global::wxSharp.Color col, global::wxSharp.FloodFillStyle style)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = col.__Instance;
            var __ret = __Internal.FloodFill(__Instance, __arg0, __arg1, style);
            return __ret;
        }

        public void GradientFillConcentric(global::wxSharp.Rect rect, global::wxSharp.Color initialColour, global::wxSharp.Color destColour)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            if (ReferenceEquals(initialColour, null))
                throw new global::System.ArgumentNullException("initialColour", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = initialColour.__Instance;
            if (ReferenceEquals(destColour, null))
                throw new global::System.ArgumentNullException("destColour", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = destColour.__Instance;
            __Internal.GradientFillConcentric(__Instance, __arg0, __arg1, __arg2);
        }

        public void GradientFillConcentric(global::wxSharp.Rect rect, global::wxSharp.Color initialColour, global::wxSharp.Color destColour, global::wxSharp.Point circleCenter)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            if (ReferenceEquals(initialColour, null))
                throw new global::System.ArgumentNullException("initialColour", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = initialColour.__Instance;
            if (ReferenceEquals(destColour, null))
                throw new global::System.ArgumentNullException("destColour", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = destColour.__Instance;
            if (ReferenceEquals(circleCenter, null))
                throw new global::System.ArgumentNullException("circleCenter", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = circleCenter.__Instance;
            __Internal.GradientFillConcentric(__Instance, __arg0, __arg1, __arg2, __arg3);
        }

        public void GradientFillLinear(global::wxSharp.Rect rect, global::wxSharp.Color initialColour, global::wxSharp.Color destColour, global::wxSharp.Direction nDirection)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            if (ReferenceEquals(initialColour, null))
                throw new global::System.ArgumentNullException("initialColour", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = initialColour.__Instance;
            if (ReferenceEquals(destColour, null))
                throw new global::System.ArgumentNullException("destColour", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = destColour.__Instance;
            __Internal.GradientFillLinear(__Instance, __arg0, __arg1, __arg2, nDirection);
        }

        public bool GetPixel(int x, int y, global::wxSharp.Color col)
        {
            var __arg2 = ReferenceEquals(col, null) ? global::System.IntPtr.Zero : col.__Instance;
            var __ret = __Internal.GetPixel(__Instance, x, y, __arg2);
            return __ret;
        }

        public bool GetPixel(global::wxSharp.Point pt, global::wxSharp.Color col)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __arg1 = ReferenceEquals(col, null) ? global::System.IntPtr.Zero : col.__Instance;
            var __ret = __Internal.GetPixel(__Instance, __arg0, __arg1);
            return __ret;
        }

        public void DrawLine(int x1, int y1, int x2, int y2)
        {
            __Internal.DrawLine(__Instance, x1, y1, x2, y2);
        }

        public void DrawLine(global::wxSharp.Point pt1, global::wxSharp.Point pt2)
        {
            if (ReferenceEquals(pt1, null))
                throw new global::System.ArgumentNullException("pt1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt1.__Instance;
            if (ReferenceEquals(pt2, null))
                throw new global::System.ArgumentNullException("pt2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = pt2.__Instance;
            __Internal.DrawLine(__Instance, __arg0, __arg1);
        }

        public void CrossHair(int x, int y)
        {
            __Internal.CrossHair(__Instance, x, y);
        }

        public void CrossHair(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.CrossHair(__Instance, __arg0);
        }

        public void DrawArc(int x1, int y1, int x2, int y2, int xc, int yc)
        {
            __Internal.DrawArc(__Instance, x1, y1, x2, y2, xc, yc);
        }

        public void DrawArc(global::wxSharp.Point pt1, global::wxSharp.Point pt2, global::wxSharp.Point centre)
        {
            if (ReferenceEquals(pt1, null))
                throw new global::System.ArgumentNullException("pt1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt1.__Instance;
            if (ReferenceEquals(pt2, null))
                throw new global::System.ArgumentNullException("pt2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = pt2.__Instance;
            if (ReferenceEquals(centre, null))
                throw new global::System.ArgumentNullException("centre", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = centre.__Instance;
            __Internal.DrawArc(__Instance, __arg0, __arg1, __arg2);
        }

        public void DrawCheckMark(int x, int y, int width, int height)
        {
            __Internal.DrawCheckMark(__Instance, x, y, width, height);
        }

        public void DrawCheckMark(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.DrawCheckMark(__Instance, __arg0);
        }

        public void DrawEllipticArc(int x, int y, int w, int h, double sa, double ea)
        {
            __Internal.DrawEllipticArc(__Instance, x, y, w, h, sa, ea);
        }

        public void DrawEllipticArc(global::wxSharp.Point pt, global::wxSharp.Size sz, double sa, double ea)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sz.__Instance;
            __Internal.DrawEllipticArc(__Instance, __arg0, __arg1, sa, ea);
        }

        public void DrawPoint(int x, int y)
        {
            __Internal.DrawPoint(__Instance, x, y);
        }

        public void DrawPoint(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.DrawPoint(__Instance, __arg0);
        }

        public void DrawLines(int n, global::wxSharp.Point[] points, int xoffset, int yoffset)
        {
            global::wxSharp.Point.__Internal[] __points;
            if (ReferenceEquals(points, null))
                __points = null;
            else
            {
                __points = new global::wxSharp.Point.__Internal[points.Length];
                for (int i = 0; i < __points.Length; i++)
                {
                    var __element = points[i];
                    __points[i] = ReferenceEquals(__element, null) ? new global::wxSharp.Point.__Internal() : *(global::wxSharp.Point.__Internal*) __element.__Instance;
                }
            }
            var __arg1 = __points;
            __Internal.DrawLines(__Instance, n, __arg1, xoffset, yoffset);
        }

        public void DrawLines(global::wxSharp.PointList list, int xoffset, int yoffset)
        {
            var __arg0 = ReferenceEquals(list, null) ? global::System.IntPtr.Zero : list.__Instance;
            __Internal.DrawLines(__Instance, __arg0, xoffset, yoffset);
        }

        public void DrawPolygon(int n, global::wxSharp.Point[] points, int xoffset, int yoffset, global::wxSharp.PolygonFillMode fillStyle)
        {
            global::wxSharp.Point.__Internal[] __points;
            if (ReferenceEquals(points, null))
                __points = null;
            else
            {
                __points = new global::wxSharp.Point.__Internal[points.Length];
                for (int i = 0; i < __points.Length; i++)
                {
                    var __element = points[i];
                    __points[i] = ReferenceEquals(__element, null) ? new global::wxSharp.Point.__Internal() : *(global::wxSharp.Point.__Internal*) __element.__Instance;
                }
            }
            var __arg1 = __points;
            __Internal.DrawPolygon(__Instance, n, __arg1, xoffset, yoffset, fillStyle);
        }

        public void DrawPolygon(global::wxSharp.PointList list, int xoffset, int yoffset, global::wxSharp.PolygonFillMode fillStyle)
        {
            var __arg0 = ReferenceEquals(list, null) ? global::System.IntPtr.Zero : list.__Instance;
            __Internal.DrawPolygon(__Instance, __arg0, xoffset, yoffset, fillStyle);
        }

        public void DrawPolyPolygon(int n, int[] count, global::wxSharp.Point[] points, int xoffset, int yoffset, global::wxSharp.PolygonFillMode fillStyle)
        {
            global::wxSharp.Point.__Internal[] __points;
            if (ReferenceEquals(points, null))
                __points = null;
            else
            {
                __points = new global::wxSharp.Point.__Internal[points.Length];
                for (int i = 0; i < __points.Length; i++)
                {
                    var __element = points[i];
                    __points[i] = ReferenceEquals(__element, null) ? new global::wxSharp.Point.__Internal() : *(global::wxSharp.Point.__Internal*) __element.__Instance;
                }
            }
            var __arg2 = __points;
            __Internal.DrawPolyPolygon(__Instance, n, count, __arg2, xoffset, yoffset, fillStyle);
        }

        public void DrawRectangle(int x, int y, int width, int height)
        {
            __Internal.DrawRectangle(__Instance, x, y, width, height);
        }

        public void DrawRectangle(global::wxSharp.Point pt, global::wxSharp.Size sz)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sz.__Instance;
            __Internal.DrawRectangle(__Instance, __arg0, __arg1);
        }

        public void DrawRectangle(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.DrawRectangle(__Instance, __arg0);
        }

        public void DrawRoundedRectangle(int x, int y, int width, int height, double radius)
        {
            __Internal.DrawRoundedRectangle(__Instance, x, y, width, height, radius);
        }

        public void DrawRoundedRectangle(global::wxSharp.Point pt, global::wxSharp.Size sz, double radius)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sz.__Instance;
            __Internal.DrawRoundedRectangle(__Instance, __arg0, __arg1, radius);
        }

        public void DrawRoundedRectangle(global::wxSharp.Rect r, double radius)
        {
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = r.__Instance;
            __Internal.DrawRoundedRectangle(__Instance, __arg0, radius);
        }

        public void DrawCircle(int x, int y, int radius)
        {
            __Internal.DrawCircle(__Instance, x, y, radius);
        }

        public void DrawCircle(global::wxSharp.Point pt, int radius)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.DrawCircle(__Instance, __arg0, radius);
        }

        public void DrawEllipse(int x, int y, int width, int height)
        {
            __Internal.DrawEllipse(__Instance, x, y, width, height);
        }

        public void DrawEllipse(global::wxSharp.Point pt, global::wxSharp.Size sz)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sz.__Instance;
            __Internal.DrawEllipse(__Instance, __arg0, __arg1);
        }

        public void DrawEllipse(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.DrawEllipse(__Instance, __arg0);
        }

        public bool Blit(int xdest, int ydest, int width, int height, global::wxSharp.DC source, int xsrc, int ysrc, global::wxSharp.RasterOperationMode rop, bool useMask, int xsrcMask, int ysrcMask)
        {
            var __arg4 = ReferenceEquals(source, null) ? global::System.IntPtr.Zero : source.__Instance;
            var __ret = __Internal.Blit(__Instance, xdest, ydest, width, height, __arg4, xsrc, ysrc, rop, useMask, xsrcMask, ysrcMask);
            return __ret;
        }

        public bool Blit(global::wxSharp.Point destPt, global::wxSharp.Size sz, global::wxSharp.DC source, global::wxSharp.Point srcPt, global::wxSharp.RasterOperationMode rop, bool useMask, global::wxSharp.Point srcPtMask)
        {
            if (ReferenceEquals(destPt, null))
                throw new global::System.ArgumentNullException("destPt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = destPt.__Instance;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sz.__Instance;
            var __arg2 = ReferenceEquals(source, null) ? global::System.IntPtr.Zero : source.__Instance;
            if (ReferenceEquals(srcPt, null))
                throw new global::System.ArgumentNullException("srcPt", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = srcPt.__Instance;
            if (ReferenceEquals(srcPtMask, null))
                throw new global::System.ArgumentNullException("srcPtMask", "Cannot be null because it is a C++ reference (&).");
            var __arg6 = srcPtMask.__Instance;
            var __ret = __Internal.Blit(__Instance, __arg0, __arg1, __arg2, __arg3, rop, useMask, __arg6);
            return __ret;
        }

        public bool StretchBlit(int dstX, int dstY, int dstWidth, int dstHeight, global::wxSharp.DC source, int srcX, int srcY, int srcWidth, int srcHeight, global::wxSharp.RasterOperationMode rop, bool useMask, int srcMaskX, int srcMaskY)
        {
            var __arg4 = ReferenceEquals(source, null) ? global::System.IntPtr.Zero : source.__Instance;
            var __ret = __Internal.StretchBlit(__Instance, dstX, dstY, dstWidth, dstHeight, __arg4, srcX, srcY, srcWidth, srcHeight, rop, useMask, srcMaskX, srcMaskY);
            return __ret;
        }

        public bool StretchBlit(global::wxSharp.Point dstPt, global::wxSharp.Size dstSize, global::wxSharp.DC source, global::wxSharp.Point srcPt, global::wxSharp.Size srcSize, global::wxSharp.RasterOperationMode rop, bool useMask, global::wxSharp.Point srcMaskPt)
        {
            if (ReferenceEquals(dstPt, null))
                throw new global::System.ArgumentNullException("dstPt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dstPt.__Instance;
            if (ReferenceEquals(dstSize, null))
                throw new global::System.ArgumentNullException("dstSize", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = dstSize.__Instance;
            var __arg2 = ReferenceEquals(source, null) ? global::System.IntPtr.Zero : source.__Instance;
            if (ReferenceEquals(srcPt, null))
                throw new global::System.ArgumentNullException("srcPt", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = srcPt.__Instance;
            if (ReferenceEquals(srcSize, null))
                throw new global::System.ArgumentNullException("srcSize", "Cannot be null because it is a C++ reference (&).");
            var __arg4 = srcSize.__Instance;
            if (ReferenceEquals(srcMaskPt, null))
                throw new global::System.ArgumentNullException("srcMaskPt", "Cannot be null because it is a C++ reference (&).");
            var __arg7 = srcMaskPt.__Instance;
            var __ret = __Internal.StretchBlit(__Instance, __arg0, __arg1, __arg2, __arg3, __arg4, rop, useMask, __arg7);
            return __ret;
        }

        public void DrawSpline(int x1, int y1, int x2, int y2, int x3, int y3)
        {
            __Internal.DrawSpline(__Instance, x1, y1, x2, y2, x3, y3);
        }

        public void DrawSpline(int n, global::wxSharp.Point[] points)
        {
            global::wxSharp.Point.__Internal[] __points;
            if (ReferenceEquals(points, null))
                __points = null;
            else
            {
                __points = new global::wxSharp.Point.__Internal[points.Length];
                for (int i = 0; i < __points.Length; i++)
                {
                    var __element = points[i];
                    __points[i] = ReferenceEquals(__element, null) ? new global::wxSharp.Point.__Internal() : *(global::wxSharp.Point.__Internal*) __element.__Instance;
                }
            }
            var __arg1 = __points;
            __Internal.DrawSpline(__Instance, n, __arg1);
        }

        public void DrawSpline(global::wxSharp.PointList points)
        {
            var __arg0 = ReferenceEquals(points, null) ? global::System.IntPtr.Zero : points.__Instance;
            __Internal.DrawSpline(__Instance, __arg0);
        }

        protected void SetWindow(global::wxSharp.Window w)
        {
            var __arg0 = ReferenceEquals(w, null) ? global::System.IntPtr.Zero : w.__Instance;
            __Internal.SetWindow(__Instance, __arg0);
        }

        #region Virtual table interop

        // virtual ~wxDC() { delete m_pimpl; }
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // int GetResolution() const { return m_pimpl->GetResolution(); }
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetResolutionDelegateInstance;

        private static int _GetResolutionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetResolution();
        }

        // wxGraphicsContext* GetGraphicsContext() const { return m_pimpl->GetGraphicsContext(); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetGraphicsContextDelegateInstance;

        private static global::System.IntPtr _GetGraphicsContextDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetGraphicsContext();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetGraphicsContext( wxGraphicsContext* ctx ) { m_pimpl->SetGraphicsContext(ctx); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetGraphicsContextDelegateInstance;

        private static void _SetGraphicsContextDelegateHook(global::System.IntPtr __instance, global::System.IntPtr ctx)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsContext __result0;
            if (ctx == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(ctx))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[ctx];
            else __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(ctx, skipVTables: true);
            __target.SetGraphicsContext(__result0);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _GetResolutionDelegateInstance += _GetResolutionDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetResolutionDelegateInstance).ToPointer();
                _GetGraphicsContextDelegateInstance += _GetGraphicsContextDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetGraphicsContextDelegateInstance).ToPointer();
                _SetGraphicsContextDelegateInstance += _SetGraphicsContextDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetGraphicsContextDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class DCTextColourChanger : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_dc;

            [FieldOffset(4)]
            internal global::wxSharp.Color.__Internal m_colFgOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDCTextColourChangerC2ER4wxDC")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDCTextColourChangerC2ER4wxDCRK8wxColour")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDCTextColourChangerD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDCTextColourChanger3SetERK8wxColour")]
            internal static extern void Set(global::System.IntPtr __instance, global::System.IntPtr col);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCTextColourChanger> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCTextColourChanger>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.DCTextColourChanger __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DCTextColourChanger(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DCTextColourChanger __CreateInstance(global::wxSharp.DCTextColourChanger.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DCTextColourChanger(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DCTextColourChanger.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCTextColourChanger.__Internal));
            *(global::wxSharp.DCTextColourChanger.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DCTextColourChanger(global::wxSharp.DCTextColourChanger.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DCTextColourChanger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DCTextColourChanger(global::wxSharp.DC dc)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCTextColourChanger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public DCTextColourChanger(global::wxSharp.DC dc, global::wxSharp.Color col)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCTextColourChanger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = col.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.DCTextColourChanger __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Set(global::wxSharp.Color col)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = col.__Instance;
            __Internal.Set(__Instance, __arg0);
        }
    }

    public unsafe partial class DCTextBgColourChanger : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_dc;

            [FieldOffset(4)]
            internal global::wxSharp.Color.__Internal m_colBgOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxDCTextBgColourChangerC2ER4wxDC")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxDCTextBgColourChangerC2ER4wxDCRK8wxColour")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxDCTextBgColourChangerD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxDCTextBgColourChanger3SetERK8wxColour")]
            internal static extern void Set(global::System.IntPtr __instance, global::System.IntPtr col);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCTextBgColourChanger> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCTextBgColourChanger>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.DCTextBgColourChanger __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DCTextBgColourChanger(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DCTextBgColourChanger __CreateInstance(global::wxSharp.DCTextBgColourChanger.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DCTextBgColourChanger(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DCTextBgColourChanger.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCTextBgColourChanger.__Internal));
            *(global::wxSharp.DCTextBgColourChanger.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DCTextBgColourChanger(global::wxSharp.DCTextBgColourChanger.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DCTextBgColourChanger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DCTextBgColourChanger(global::wxSharp.DC dc)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCTextBgColourChanger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public DCTextBgColourChanger(global::wxSharp.DC dc, global::wxSharp.Color col)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCTextBgColourChanger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = col.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.DCTextBgColourChanger __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Set(global::wxSharp.Color col)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = col.__Instance;
            __Internal.Set(__Instance, __arg0);
        }
    }

    public unsafe partial class DCTextBgModeChanger : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_dc;

            [FieldOffset(4)]
            internal int m_modeOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDCTextBgModeChangerC2ER4wxDC")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDCTextBgModeChangerC2ER4wxDCi")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc, int mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDCTextBgModeChangerD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDCTextBgModeChanger3SetEi")]
            internal static extern void Set(global::System.IntPtr __instance, int mode);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCTextBgModeChanger> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCTextBgModeChanger>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.DCTextBgModeChanger __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DCTextBgModeChanger(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DCTextBgModeChanger __CreateInstance(global::wxSharp.DCTextBgModeChanger.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DCTextBgModeChanger(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DCTextBgModeChanger.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCTextBgModeChanger.__Internal));
            *(global::wxSharp.DCTextBgModeChanger.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DCTextBgModeChanger(global::wxSharp.DCTextBgModeChanger.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DCTextBgModeChanger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DCTextBgModeChanger(global::wxSharp.DC dc)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCTextBgModeChanger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public DCTextBgModeChanger(global::wxSharp.DC dc, int mode)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCTextBgModeChanger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            __Internal.ctor(__Instance, __arg0, mode);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.DCTextBgModeChanger __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Set(int mode)
        {
            __Internal.Set(__Instance, mode);
        }
    }

    public unsafe partial class DCPenChanger : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_dc;

            [FieldOffset(4)]
            internal global::wxSharp.Pen.__Internal m_penOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxDCPenChangerC2ER4wxDCRK5wxPen")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc, global::System.IntPtr pen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxDCPenChangerD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCPenChanger> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCPenChanger>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.DCPenChanger __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DCPenChanger(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DCPenChanger __CreateInstance(global::wxSharp.DCPenChanger.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DCPenChanger(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DCPenChanger.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCPenChanger.__Internal));
            *(global::wxSharp.DCPenChanger.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DCPenChanger(global::wxSharp.DCPenChanger.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DCPenChanger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DCPenChanger(global::wxSharp.DC dc, global::wxSharp.Pen pen)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCPenChanger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            if (ReferenceEquals(pen, null))
                throw new global::System.ArgumentNullException("pen", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = pen.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.DCPenChanger __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class DCBrushChanger : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_dc;

            [FieldOffset(4)]
            internal global::wxSharp.Brush.__Internal m_brushOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxDCBrushChangerC2ER4wxDCRK7wxBrush")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc, global::System.IntPtr brush);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxDCBrushChangerD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCBrushChanger> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCBrushChanger>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.DCBrushChanger __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DCBrushChanger(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DCBrushChanger __CreateInstance(global::wxSharp.DCBrushChanger.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DCBrushChanger(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DCBrushChanger.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCBrushChanger.__Internal));
            *(global::wxSharp.DCBrushChanger.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DCBrushChanger(global::wxSharp.DCBrushChanger.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DCBrushChanger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DCBrushChanger(global::wxSharp.DC dc, global::wxSharp.Brush brush)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCBrushChanger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            if (ReferenceEquals(brush, null))
                throw new global::System.ArgumentNullException("brush", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = brush.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.DCBrushChanger __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class DCClipper : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_dc;

            [FieldOffset(4)]
            internal global::wxSharp.Rect.__Internal m_oldClipRect;

            [FieldOffset(20)]
            internal byte m_restoreOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxDCClipperC2ER4wxDCRK6wxRect")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxDCClipperC2ER4wxDCiiii")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc, int x, int y, int w, int h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxDCClipperD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCClipper> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCClipper>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.DCClipper __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DCClipper(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DCClipper __CreateInstance(global::wxSharp.DCClipper.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DCClipper(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DCClipper.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCClipper.__Internal));
            *(global::wxSharp.DCClipper.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DCClipper(global::wxSharp.DCClipper.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DCClipper(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DCClipper(global::wxSharp.DC dc, global::wxSharp.Rect r)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCClipper.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = r.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
        }

        public DCClipper(global::wxSharp.DC dc, int x, int y, int w, int h)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCClipper.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            __Internal.ctor(__Instance, __arg0, x, y, w, h);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.DCClipper __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class DCFontChanger : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_dc;

            [FieldOffset(4)]
            internal global::wxSharp.Font.__Internal m_fontOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDCFontChangerC2ER4wxDC")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr dc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDCFontChangerD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCFontChanger> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DCFontChanger>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.DCFontChanger __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DCFontChanger(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DCFontChanger __CreateInstance(global::wxSharp.DCFontChanger.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DCFontChanger(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DCFontChanger.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCFontChanger.__Internal));
            *(global::wxSharp.DCFontChanger.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DCFontChanger(global::wxSharp.DCFontChanger.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DCFontChanger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public DCFontChanger(global::wxSharp.DC dc)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DCFontChanger.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.DCFontChanger __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }
}
