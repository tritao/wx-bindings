// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "SkCanvas.h"
#include "include/core/SkCanvas.h"

SkiaSharp::SkCanvas::SaveLayerRec::SaveLayerRec(::SkCanvas::SaveLayerRec* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

SkiaSharp::SkCanvas::SaveLayerRec::~SaveLayerRec()
{
}

SkiaSharp::SkCanvas::SaveLayerRec::SaveLayerRec()
{
    __ownsNativeInstance = true;
    __Instance = new ::SkCanvas::SaveLayerRec();
}

SkiaSharp::SkCanvas::SaveLayerRec::SaveLayerRec(const ::SkiaSharp::SkCanvas::SaveLayerRec& _0)
{
    __ownsNativeInstance = true;
    auto &__arg0 = *(::SkCanvas::SaveLayerRec*)_0.__Instance;
    __Instance = new ::SkCanvas::SaveLayerRec(__arg0);
}

unsigned int SkiaSharp::SkCanvas::SaveLayerRec::get_fSaveLayerFlags()
{
    ::SkCanvas::SaveLayerFlags __ret = ((::SkCanvas::SaveLayerRec*)__Instance)->fSaveLayerFlags;
    return __ret;
}


void SkiaSharp::SkCanvas::SaveLayerRec::set_fSaveLayerFlags(unsigned int value)
{
    auto __arg0 = (::SkCanvas::SaveLayerFlags)(::uint32_t)(::__uint32_t)value;
    ((::SkCanvas::SaveLayerRec*)__Instance)->fSaveLayerFlags = __arg0;
}

SkiaSharp::SkCanvas::Lattice::Lattice(::SkCanvas::Lattice* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

SkiaSharp::SkCanvas::Lattice::~Lattice()
{
}

SkiaSharp::SkCanvas::Lattice::Lattice()
{
    __ownsNativeInstance = true;
    __Instance = new ::SkCanvas::Lattice();
}

SkiaSharp::SkCanvas::Lattice::Lattice(const ::SkiaSharp::SkCanvas::Lattice& _0)
{
    __ownsNativeInstance = true;
    auto &__arg0 = *(::SkCanvas::Lattice*)_0.__Instance;
    __Instance = new ::SkCanvas::Lattice(__arg0);
}

const int* SkiaSharp::SkCanvas::Lattice::get_fXDivs()
{
    const int* __ret = ((::SkCanvas::Lattice*)__Instance)->fXDivs;
    return const_cast<int*>(__ret);
}


void SkiaSharp::SkCanvas::Lattice::set_fXDivs(const int* value)
{
    auto __arg0 = (const int*)value;
    ((::SkCanvas::Lattice*)__Instance)->fXDivs = __arg0;
}

const int* SkiaSharp::SkCanvas::Lattice::get_fYDivs()
{
    const int* __ret = ((::SkCanvas::Lattice*)__Instance)->fYDivs;
    return const_cast<int*>(__ret);
}


void SkiaSharp::SkCanvas::Lattice::set_fYDivs(const int* value)
{
    auto __arg0 = (const int*)value;
    ((::SkCanvas::Lattice*)__Instance)->fYDivs = __arg0;
}

const ::SkiaSharp::SkCanvas::Lattice::RectType* SkiaSharp::SkCanvas::Lattice::get_fRectTypes()
{
    const ::SkCanvas::Lattice::RectType* __ret = ((::SkCanvas::Lattice*)__Instance)->fRectTypes;
    return (::SkiaSharp::SkCanvas::Lattice::RectType)__ret;
}


void SkiaSharp::SkCanvas::Lattice::set_fRectTypes(const ::SkiaSharp::SkCanvas::Lattice::RectType* value)
{
    auto __arg0 = (::SkCanvas::Lattice::RectType)0value;
    ((::SkCanvas::Lattice*)__Instance)->fRectTypes = __arg0;
}

int SkiaSharp::SkCanvas::Lattice::get_fXCount()
{
    int __ret = ((::SkCanvas::Lattice*)__Instance)->fXCount;
    return __ret;
}


void SkiaSharp::SkCanvas::Lattice::set_fXCount(int value)
{
    ((::SkCanvas::Lattice*)__Instance)->fXCount = value;
}

int SkiaSharp::SkCanvas::Lattice::get_fYCount()
{
    int __ret = ((::SkCanvas::Lattice*)__Instance)->fYCount;
    return __ret;
}


void SkiaSharp::SkCanvas::Lattice::set_fYCount(int value)
{
    ((::SkCanvas::Lattice*)__Instance)->fYCount = value;
}

unsigned int* SkiaSharp::SkCanvas::Lattice::get_fColors()
{
    ::SkColor* __ret = ((::SkCanvas::Lattice*)__Instance)->fColors;
    return reinterpret_cast<unsigned int*>(const_cast<::SkColor*>(__ret));
}


void SkiaSharp::SkCanvas::Lattice::set_fColors(unsigned int* value)
{
    auto __arg0 = (::SkColor*)value;
    ((::SkCanvas::Lattice*)__Instance)->fColors = __arg0;
}

SkiaSharp::SkCanvas::ImageSetEntry::ImageSetEntry(::SkCanvas::ImageSetEntry* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

SkiaSharp::SkCanvas::ImageSetEntry::~ImageSetEntry()
{
}

SkiaSharp::SkCanvas::ImageSetEntry::ImageSetEntry()
{
    __ownsNativeInstance = true;
    __Instance = new ::SkCanvas::ImageSetEntry();
}

SkiaSharp::SkCanvas::ImageSetEntry::ImageSetEntry(const ::SkiaSharp::SkCanvas::ImageSetEntry& _0)
{
    __ownsNativeInstance = true;
    auto &__arg0 = *(::SkCanvas::ImageSetEntry*)_0.__Instance;
    __Instance = new ::SkCanvas::ImageSetEntry(__arg0);
}

int SkiaSharp::SkCanvas::ImageSetEntry::get_fMatrixIndex()
{
    int __ret = ((::SkCanvas::ImageSetEntry*)__Instance)->fMatrixIndex;
    return __ret;
}


void SkiaSharp::SkCanvas::ImageSetEntry::set_fMatrixIndex(int value)
{
    ((::SkCanvas::ImageSetEntry*)__Instance)->fMatrixIndex = value;
}

float SkiaSharp::SkCanvas::ImageSetEntry::get_fAlpha()
{
    float __ret = ((::SkCanvas::ImageSetEntry*)__Instance)->fAlpha;
    return __ret;
}


void SkiaSharp::SkCanvas::ImageSetEntry::set_fAlpha(float value)
{
    ((::SkCanvas::ImageSetEntry*)__Instance)->fAlpha = value;
}

unsigned int SkiaSharp::SkCanvas::ImageSetEntry::get_fAAFlags()
{
    unsigned int __ret = ((::SkCanvas::ImageSetEntry*)__Instance)->fAAFlags;
    return __ret;
}


void SkiaSharp::SkCanvas::ImageSetEntry::set_fAAFlags(unsigned int value)
{
    ((::SkCanvas::ImageSetEntry*)__Instance)->fAAFlags = value;
}

bool SkiaSharp::SkCanvas::ImageSetEntry::get_fHasClip()
{
    bool __ret = ((::SkCanvas::ImageSetEntry*)__Instance)->fHasClip;
    return __ret;
}


void SkiaSharp::SkCanvas::ImageSetEntry::set_fHasClip(bool value)
{
    ((::SkCanvas::ImageSetEntry*)__Instance)->fHasClip = value;
}

SkiaSharp::SkCanvas::SkCanvas(::SkCanvas* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

SkiaSharp::SkCanvas::~SkCanvas()
{
}

SkiaSharp::SkCanvas::SkCanvas()
{
    __ownsNativeInstance = true;
    __Instance = new ::SkCanvas();
}

void SkiaSharp::SkCanvas::flush()
{
    ((::SkCanvas*)__Instance)->flush();
}

int SkiaSharp::SkCanvas::save()
{
    int __ret = ((::SkCanvas*)__Instance)->save();
    return __ret;
}

int SkiaSharp::SkCanvas::saveLayer(const ::SkiaSharp::SkCanvas::SaveLayerRec& layerRec)
{
    auto &__arg0 = *(::SkCanvas::SaveLayerRec*)layerRec.__Instance;
    int __ret = ((::SkCanvas*)__Instance)->saveLayer(__arg0);
    return __ret;
}

void SkiaSharp::SkCanvas::restore()
{
    ((::SkCanvas*)__Instance)->restore();
}

void SkiaSharp::SkCanvas::restoreToCount(int saveCount)
{
    ((::SkCanvas*)__Instance)->restoreToCount(saveCount);
}

void SkiaSharp::SkCanvas::translate(float dx, float dy)
{
    auto __arg0 = (::SkScalar)dx;
    auto __arg1 = (::SkScalar)dy;
    ((::SkCanvas*)__Instance)->translate(__arg0, __arg1);
}

void SkiaSharp::SkCanvas::scale(float sx, float sy)
{
    auto __arg0 = (::SkScalar)sx;
    auto __arg1 = (::SkScalar)sy;
    ((::SkCanvas*)__Instance)->scale(__arg0, __arg1);
}

void SkiaSharp::SkCanvas::rotate(float degrees)
{
    auto __arg0 = (::SkScalar)degrees;
    ((::SkCanvas*)__Instance)->rotate(__arg0);
}

void SkiaSharp::SkCanvas::rotate(float degrees, float px, float py)
{
    auto __arg0 = (::SkScalar)degrees;
    auto __arg1 = (::SkScalar)px;
    auto __arg2 = (::SkScalar)py;
    ((::SkCanvas*)__Instance)->rotate(__arg0, __arg1, __arg2);
}

void SkiaSharp::SkCanvas::skew(float sx, float sy)
{
    auto __arg0 = (::SkScalar)sx;
    auto __arg1 = (::SkScalar)sy;
    ((::SkCanvas*)__Instance)->skew(__arg0, __arg1);
}

void SkiaSharp::SkCanvas::markCTM(const char* name)
{
    auto __arg0 = (const char*)name;
    ((::SkCanvas*)__Instance)->markCTM(__arg0);
}

void SkiaSharp::SkCanvas::resetMatrix()
{
    ((::SkCanvas*)__Instance)->resetMatrix();
}

void SkiaSharp::SkCanvas::clear(unsigned int color)
{
    auto __arg0 = (::SkColor)(::uint32_t)(::__uint32_t)color;
    ((::SkCanvas*)__Instance)->clear(__arg0);
}

void SkiaSharp::SkCanvas::discard()
{
    ((::SkCanvas*)__Instance)->discard();
}

void* SkiaSharp::SkCanvas::accessTopRasterHandle() const
{
    ::SkRasterHandleAllocator::Handle __ret = ((::SkCanvas*)__Instance)->accessTopRasterHandle();
    return __ret;
}

int SkiaSharp::SkCanvas::getSaveCount() const
{
    int __ret = ((::SkCanvas*)__Instance)->getSaveCount();
    return __ret;
}

bool SkiaSharp::SkCanvas::isClipEmpty() const
{
    bool __ret = ((::SkCanvas*)__Instance)->isClipEmpty();
    return __ret;
}

bool SkiaSharp::SkCanvas::isClipRect() const
{
    bool __ret = ((::SkCanvas*)__Instance)->isClipRect();
    return __ret;
}

SkiaSharp::SkAutoCanvasRestore::SkAutoCanvasRestore(::SkAutoCanvasRestore* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

SkiaSharp::SkAutoCanvasRestore::~SkAutoCanvasRestore()
{
}

SkiaSharp::SkAutoCanvasRestore::SkAutoCanvasRestore(::SkiaSharp::SkCanvas* canvas, bool doSave)
{
    __ownsNativeInstance = true;
    auto __arg0 = canvas ? (::SkCanvas*)canvas->__Instance : nullptr;
    __Instance = new ::SkAutoCanvasRestore(__arg0, doSave);
}

void SkiaSharp::SkAutoCanvasRestore::restore()
{
    ((::SkAutoCanvasRestore*)__Instance)->restore();
}

