// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum BrushStyle
    {
        BRUSHSTYLE_INVALID = -1,
        BRUSHSTYLE_SOLID = 100,
        BRUSHSTYLE_TRANSPARENT = 106,
        BRUSHSTYLE_STIPPLE_MASK_OPAQUE = 107,
        BRUSHSTYLE_STIPPLE_MASK = 108,
        BRUSHSTYLE_STIPPLE = 110,
        BRUSHSTYLE_BDIAGONAL_HATCH = 111,
        BRUSHSTYLE_CROSSDIAG_HATCH = 112,
        BRUSHSTYLE_FDIAGONAL_HATCH = 113,
        BRUSHSTYLE_CROSS_HATCH = 114,
        BRUSHSTYLE_HORIZONTAL_HATCH = 115,
        BRUSHSTYLE_VERTICAL_HATCH = 116,
        BRUSHSTYLE_FIRST_HATCH = 111,
        BRUSHSTYLE_LAST_HATCH = 116
    }

    public unsafe partial class Brush : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxBrushC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxBrushC2ERK8wxColour12wxBrushStyle")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr col, global::wxSharp.BrushStyle style);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxBrushC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxBrusheqERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr brush);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxBrushneERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr brush);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxBrush14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxBrushBase13IsTransparentEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsTransparent(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxBrushBase16IsNonTransparentEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsNonTransparent(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Brush> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Brush>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.Brush __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Brush(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Brush __CreateInstance(global::wxSharp.Brush.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Brush(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Brush.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Brush.__Internal));
            global::wxSharp.Brush.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private Brush(global::wxSharp.Brush.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Brush(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public Brush()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Brush.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.Brush");
        }

        public Brush(global::wxSharp.Color col, global::wxSharp.BrushStyle style)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Brush.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = col.__Instance;
            __Internal.ctor(__Instance, __arg0, style);
            SetupVTables(GetType().FullName == "wxSharp.Brush");
        }

        public Brush(global::wxSharp.Brush _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Brush.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.Brush");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.Brush __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.Brush.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public virtual void SetColour(global::wxSharp.Color col)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___SetColourDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = col.__Instance;
            ___SetColourDelegate(__Instance, __arg0);
        }

        public virtual void SetColour(byte r, byte g, byte b)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___SetColour_1Delegate = (global::wxSharp.Delegates.Action_IntPtr_byte_byte_byte) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_byte_byte_byte));
            ___SetColour_1Delegate(__Instance, r, g, b);
        }

        public virtual void SetStyle(global::wxSharp.BrushStyle style)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___SetStyleDelegate = (global::wxSharp.Delegates.Action_IntPtr_wxSharp_wxBrushStyle) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_wxSharp_wxBrushStyle));
            ___SetStyleDelegate(__Instance, style);
        }

        public static bool operator ==(global::wxSharp.Brush __op, global::wxSharp.Brush brush)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool brushNull = ReferenceEquals(brush, null);
            if (__opNull || brushNull)
                return __opNull && brushNull;
            var __arg0 = __op.__Instance;
            var __arg1 = brush.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::wxSharp.Brush;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::wxSharp.Brush.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::wxSharp.Brush __op, global::wxSharp.Brush brush)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool brushNull = ReferenceEquals(brush, null);
            if (__opNull || brushNull)
                return !(__opNull && brushNull);
            var __arg0 = __op.__Instance;
            var __arg1 = brush.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public virtual global::wxSharp.Color GetColour()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___GetColourDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __ret = new global::wxSharp.Color.__Internal();
            ___GetColourDelegate(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Color.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.BrushStyle GetStyle()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___GetStyleDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxBrushStyle_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxBrushStyle_IntPtr));
            var __ret = ___GetStyleDelegate(__Instance);
            return __ret;
        }

        public virtual bool IsHatch()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___IsHatchDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsHatchDelegate(__Instance);
            return __ret;
        }

        public bool IsTransparent()
        {
            var __ret = __Internal.IsTransparent(__Instance);
            return __ret;
        }

        public bool IsNonTransparent()
        {
            var __ret = __Internal.IsNonTransparent(__Instance);
            return __ret;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxBrush()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Brush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // void SetColour(const wxColour& col) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetColourDelegateInstance;

        private static void _SetColourDelegateHook(global::System.IntPtr __instance, global::System.IntPtr col)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Brush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Color __result0;
            if (col == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Color.NativeToManagedMap.ContainsKey(col))
                __result0 = (global::wxSharp.Color) global::wxSharp.Color.NativeToManagedMap[col];
            else __result0 = (global::wxSharp.Color) global::wxSharp.Color.__CreateInstance(col, skipVTables: true);
            __target.SetColour(__result0);
        }

        // void SetColour(unsigned char r, unsigned char g, unsigned char b) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_byte_byte_byte _SetColour_1DelegateInstance;

        private static void _SetColour_1DelegateHook(global::System.IntPtr __instance, byte r, byte g, byte b)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Brush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetColour(r, g, b);
        }

        // void SetStyle(wxBrushStyle style) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_wxSharp_wxBrushStyle _SetStyleDelegateInstance;

        private static void _SetStyleDelegateHook(global::System.IntPtr __instance, global::wxSharp.BrushStyle style)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Brush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetStyle(style);
        }

        // wxColour GetColour() const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _GetColourDelegateInstance;

        private static void _GetColourDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Brush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetColour();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.Color.__Internal*) @return = *(global::wxSharp.Color.__Internal*) __ret.__Instance;
        }

        // wxBrushStyle GetStyle() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxBrushStyle_IntPtr _GetStyleDelegateInstance;

        private static global::wxSharp.BrushStyle _GetStyleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Brush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetStyle();
            return __ret;
        }

        // bool IsHatch() const { return (GetStyle()>=wxBRUSHSTYLE_FIRST_HATCH) && (GetStyle()<=wxBRUSHSTYLE_LAST_HATCH); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsHatchDelegateInstance;

        private static bool _IsHatchDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Brush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsHatch();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _SetColourDelegateInstance += _SetColourDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SetColourDelegateInstance).ToPointer();
                _SetColour_1DelegateInstance += _SetColour_1DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_SetColour_1DelegateInstance).ToPointer();
                _SetStyleDelegateInstance += _SetStyleDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetStyleDelegateInstance).ToPointer();
                _GetColourDelegateInstance += _GetColourDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetColourDelegateInstance).ToPointer();
                _GetStyleDelegateInstance += _GetStyleDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetStyleDelegateInstance).ToPointer();
                _IsHatchDelegateInstance += _IsHatchDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_IsHatchDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(18 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(18 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = _Thunks[1];
                    *(void**) (vfptr0 + 36) = _Thunks[2];
                    *(void**) (vfptr0 + 40) = _Thunks[3];
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = _Thunks[4];
                    *(void**) (vfptr0 + 52) = _Thunks[5];
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = _Thunks[6];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class BrushList : global::wxSharp.GDIObjListBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::wxSharp.List.__Internal list;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxBrushListC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxBrushListC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxBrushListD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxBrushList17FindOrCreateBrushERK8wxColour12wxBrushStyle")]
            internal static extern global::System.IntPtr FindOrCreateBrush(global::System.IntPtr __instance, global::System.IntPtr colour, global::wxSharp.BrushStyle style);
        }

        internal static new global::wxSharp.BrushList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.BrushList(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.BrushList __CreateInstance(global::wxSharp.BrushList.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.BrushList(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.BrushList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.BrushList.__Internal));
            global::wxSharp.BrushList.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private BrushList(global::wxSharp.BrushList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BrushList(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public BrushList(global::wxSharp.BrushList _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.BrushList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public BrushList()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.BrushList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.GDIObjListBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.Brush FindOrCreateBrush(global::wxSharp.Color colour, global::wxSharp.BrushStyle style)
        {
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = colour.__Instance;
            var __ret = __Internal.FindOrCreateBrush(__Instance, __arg0, style);
            global::wxSharp.Brush __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Brush.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Brush) global::wxSharp.Brush.NativeToManagedMap[__ret];
            else global::wxSharp.Brush.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Brush) global::wxSharp.Brush.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class brush
    {
        public partial struct __Internal
        {
        }

        public static global::wxSharp.BrushList TheBrushList
        {
            get
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxTheBrushList");
                global::wxSharp.BrushList __result0;
                if (*__ptr == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.BrushList.NativeToManagedMap.ContainsKey(*__ptr))
                    __result0 = (global::wxSharp.BrushList) global::wxSharp.BrushList.NativeToManagedMap[*__ptr];
                else __result0 = global::wxSharp.BrushList.__CreateInstance(*__ptr);
                return __result0;
            }

            set
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxTheBrushList");
                *__ptr = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }
}
