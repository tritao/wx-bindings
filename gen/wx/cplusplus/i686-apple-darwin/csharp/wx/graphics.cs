// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum AntialiasMode : uint
    {
        ANTIALIAS_NONE = 0,
        ANTIALIAS_DEFAULT = 1
    }

    public enum CompositionMode
    {
        COMPOSITION_INVALID = -1,
        COMPOSITION_CLEAR = 0,
        COMPOSITION_SOURCE = 1,
        COMPOSITION_OVER = 2,
        COMPOSITION_IN = 3,
        COMPOSITION_OUT = 4,
        COMPOSITION_ATOP = 5,
        COMPOSITION_DEST = 6,
        COMPOSITION_DEST_OVER = 7,
        COMPOSITION_DEST_IN = 8,
        COMPOSITION_DEST_OUT = 9,
        COMPOSITION_DEST_ATOP = 10,
        COMPOSITION_XOR = 11,
        COMPOSITION_ADD = 12
    }

    public enum InterpolationQuality : uint
    {
        INTERPOLATION_DEFAULT = 0,
        INTERPOLATION_NONE = 1,
        INTERPOLATION_FAST = 2,
        INTERPOLATION_GOOD = 3,
        INTERPOLATION_BEST = 4
    }

    public enum GradientType : uint
    {
        GRADIENT_NONE = 0,
        GRADIENT_LINEAR = 1,
        GRADIENT_RADIAL = 2
    }

    public unsafe partial class GraphicsMatrixData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsMatrixData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsMatrixData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.GraphicsMatrixData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsMatrixData(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsMatrixData __CreateInstance(global::wxSharp.GraphicsMatrixData.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsMatrixData(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsMatrixData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsMatrixData.__Internal));
            *(global::wxSharp.GraphicsMatrixData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GraphicsMatrixData(global::wxSharp.GraphicsMatrixData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsMatrixData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GraphicsBitmapData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsBitmapData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsBitmapData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.GraphicsBitmapData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsBitmapData(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsBitmapData __CreateInstance(global::wxSharp.GraphicsBitmapData.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsBitmapData(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsBitmapData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsBitmapData.__Internal));
            *(global::wxSharp.GraphicsBitmapData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GraphicsBitmapData(global::wxSharp.GraphicsBitmapData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsBitmapData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GraphicsObjectRefData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsObjectRefData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsObjectRefData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.GraphicsObjectRefData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsObjectRefData(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsObjectRefData __CreateInstance(global::wxSharp.GraphicsObjectRefData.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsObjectRefData(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsObjectRefData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsObjectRefData.__Internal));
            *(global::wxSharp.GraphicsObjectRefData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GraphicsObjectRefData(global::wxSharp.GraphicsObjectRefData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsObjectRefData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GraphicsPathData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsPathData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsPathData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.GraphicsPathData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsPathData(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsPathData __CreateInstance(global::wxSharp.GraphicsPathData.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsPathData(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsPathData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPathData.__Internal));
            *(global::wxSharp.GraphicsPathData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GraphicsPathData(global::wxSharp.GraphicsPathData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsPathData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GraphicsFigure
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsFigure> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsFigure>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.GraphicsFigure __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsFigure(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsFigure __CreateInstance(global::wxSharp.GraphicsFigure.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsFigure(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsFigure.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsFigure.__Internal));
            *(global::wxSharp.GraphicsFigure.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private GraphicsFigure(global::wxSharp.GraphicsFigure.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsFigure(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class GraphicsObject : global::wxSharp.Object, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsObjectC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsObjectC2EP18wxGraphicsRenderer")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr renderer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsObjectC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxGraphicsObject6IsNullEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsNull(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxGraphicsObject11GetRendererEv")]
            internal static extern global::System.IntPtr GetRenderer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxGraphicsObject15GetGraphicsDataEv")]
            internal static extern global::System.IntPtr GetGraphicsData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsObject14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.GraphicsObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsObject(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsObject __CreateInstance(global::wxSharp.GraphicsObject.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsObject(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsObject.__Internal));
            global::wxSharp.GraphicsObject.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsObject(global::wxSharp.GraphicsObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsObject(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public GraphicsObject()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsObject");
        }

        public GraphicsObject(global::wxSharp.GraphicsRenderer renderer)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(renderer, null) ? global::System.IntPtr.Zero : renderer.__Instance;
            __Internal.ctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsObject");
        }

        public GraphicsObject(global::wxSharp.GraphicsObject _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsObject");
        }

        protected override global::wxSharp.RefCounter CreateRefData()
        {
            return base.CreateRefData();
        }

        protected override global::wxSharp.RefCounter CloneRefData(global::wxSharp.RefCounter data)
        {
            return base.CloneRefData(data);
        }

        public bool IsNull()
        {
            var __ret = __Internal.IsNull(__Instance);
            return __ret;
        }

        public global::wxSharp.GraphicsRenderer GetRenderer()
        {
            var __ret = __Internal.GetRenderer(__Instance);
            global::wxSharp.GraphicsRenderer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsRenderer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsRenderer) global::wxSharp.GraphicsRenderer.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsRenderer.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsRenderer) global::wxSharp.GraphicsRenderer.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.GraphicsObjectRefData GetGraphicsData()
        {
            var __ret = __Internal.GetGraphicsData(__Instance);
            global::wxSharp.GraphicsObjectRefData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsObjectRefData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsObjectRefData) global::wxSharp.GraphicsObjectRefData.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.GraphicsObjectRefData.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxGraphicsObject()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsObject) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData* CreateRefData() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsObject) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData* CloneRefData(const wxObjectRefData* data) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsObject) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class GraphicsPen : global::wxSharp.GraphicsObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxGraphicsPenC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxGraphicsPenC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxGraphicsPen14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.GraphicsPen __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsPen(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsPen __CreateInstance(global::wxSharp.GraphicsPen.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsPen(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsPen.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPen.__Internal));
            global::wxSharp.GraphicsPen.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsPen(global::wxSharp.GraphicsPen.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsPen(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public GraphicsPen()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPen.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsPen");
        }

        public GraphicsPen(global::wxSharp.GraphicsPen _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPen.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsPen");
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxGraphicsPen() {}
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPen) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData* CreateRefData() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPen) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData* CloneRefData(const wxObjectRefData* data) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPen) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class GraphicsBrush : global::wxSharp.GraphicsObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxGraphicsBrushC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxGraphicsBrushC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxGraphicsBrush14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.GraphicsBrush __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsBrush(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsBrush __CreateInstance(global::wxSharp.GraphicsBrush.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsBrush(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsBrush.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsBrush.__Internal));
            global::wxSharp.GraphicsBrush.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsBrush(global::wxSharp.GraphicsBrush.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsBrush(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public GraphicsBrush()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsBrush.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsBrush");
        }

        public GraphicsBrush(global::wxSharp.GraphicsBrush _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsBrush.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsBrush");
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxGraphicsBrush() {}
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsBrush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData* CreateRefData() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsBrush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData* CloneRefData(const wxObjectRefData* data) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsBrush) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class GraphicsFont : global::wxSharp.GraphicsObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGraphicsFontC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGraphicsFontC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGraphicsFont14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.GraphicsFont __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsFont(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsFont __CreateInstance(global::wxSharp.GraphicsFont.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsFont(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsFont.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsFont.__Internal));
            global::wxSharp.GraphicsFont.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsFont(global::wxSharp.GraphicsFont.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsFont(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public GraphicsFont()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsFont.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsFont");
        }

        public GraphicsFont(global::wxSharp.GraphicsFont _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsFont.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsFont");
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxGraphicsFont() {}
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsFont) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData* CreateRefData() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsFont) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData* CloneRefData(const wxObjectRefData* data) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsFont) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class GraphicsBitmap : global::wxSharp.GraphicsObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsBitmapC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsBitmapC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxGraphicsBitmap15GetNativeBitmapEv")]
            internal static extern global::System.IntPtr GetNativeBitmap(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsBitmap13GetBitmapDataEv")]
            internal static extern global::System.IntPtr GetBitmapData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsBitmap14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.GraphicsBitmap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsBitmap(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsBitmap __CreateInstance(global::wxSharp.GraphicsBitmap.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsBitmap(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsBitmap.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsBitmap.__Internal));
            global::wxSharp.GraphicsBitmap.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsBitmap(global::wxSharp.GraphicsBitmap.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsBitmap(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public GraphicsBitmap()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsBitmap.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsBitmap");
        }

        public GraphicsBitmap(global::wxSharp.GraphicsBitmap _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsBitmap.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsBitmap");
        }

        public global::System.IntPtr GetNativeBitmap()
        {
            var __ret = __Internal.GetNativeBitmap(__Instance);
            return __ret;
        }

        public global::wxSharp.GraphicsBitmapData GetBitmapData()
        {
            var __ret = __Internal.GetBitmapData(__Instance);
            global::wxSharp.GraphicsBitmapData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsBitmapData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsBitmapData) global::wxSharp.GraphicsBitmapData.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.GraphicsBitmapData.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxGraphicsBitmap() {}
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsBitmap) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData* CreateRefData() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsBitmap) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData* CloneRefData(const wxObjectRefData* data) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsBitmap) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class GraphicsMatrix : global::wxSharp.GraphicsObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsMatrixC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsMatrixC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsMatrix6ConcatERKS_")]
            internal static extern void Concat(global::System.IntPtr __instance, global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxGraphicsMatrix7IsEqualERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsEqual(global::System.IntPtr __instance, global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsMatrix13GetMatrixDataEv")]
            internal static extern global::System.IntPtr GetMatrixData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGraphicsMatrix14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.GraphicsMatrix __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsMatrix(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsMatrix __CreateInstance(global::wxSharp.GraphicsMatrix.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsMatrix(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsMatrix.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsMatrix.__Internal));
            global::wxSharp.GraphicsMatrix.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsMatrix(global::wxSharp.GraphicsMatrix.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsMatrix(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public GraphicsMatrix()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsMatrix.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsMatrix");
        }

        public GraphicsMatrix(global::wxSharp.GraphicsMatrix _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsMatrix.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsMatrix");
        }

        public void Concat(global::wxSharp.GraphicsMatrix t)
        {
            if (ReferenceEquals(t, null))
                throw new global::System.ArgumentNullException("t", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = t.__Instance;
            __Internal.Concat(__Instance, __arg0);
        }

        public virtual void Set(double a, double b, double c, double d, double tx, double ty)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___SetDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double_double));
            ___SetDelegate(__Instance, a, b, c, d, tx, ty);
        }

        public virtual void Get(ref double a, ref double b, ref double c, ref double d, ref double tx, ref double ty)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___GetDelegate = (global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr_doublePtr_doublePtr_doublePtr_doublePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr_doublePtr_doublePtr_doublePtr_doublePtr));
            fixed (double* __a0 = &a)
            {
                var __arg0 = __a0;
                fixed (double* __b1 = &b)
                {
                    var __arg1 = __b1;
                    fixed (double* __c2 = &c)
                    {
                        var __arg2 = __c2;
                        fixed (double* __d3 = &d)
                        {
                            var __arg3 = __d3;
                            fixed (double* __tx4 = &tx)
                            {
                                var __arg4 = __tx4;
                                fixed (double* __ty5 = &ty)
                                {
                                    var __arg5 = __ty5;
                                    ___GetDelegate(__Instance, __arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
                                }
                            }
                        }
                    }
                }
            }
        }

        public virtual void Invert()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___InvertDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___InvertDelegate(__Instance);
        }

        public bool IsEqual(global::wxSharp.GraphicsMatrix t)
        {
            if (ReferenceEquals(t, null))
                throw new global::System.ArgumentNullException("t", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = t.__Instance;
            var __ret = __Internal.IsEqual(__Instance, __arg0);
            return __ret;
        }

        public virtual bool IsIdentity()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___IsIdentityDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsIdentityDelegate(__Instance);
            return __ret;
        }

        public virtual void Translate(double dx, double dy)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___TranslateDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double));
            ___TranslateDelegate(__Instance, dx, dy);
        }

        public virtual void Scale(double xScale, double yScale)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___ScaleDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double));
            ___ScaleDelegate(__Instance, xScale, yScale);
        }

        public virtual void Rotate(double angle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___RotateDelegate = (global::wxSharp.Delegates.Action_IntPtr_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double));
            ___RotateDelegate(__Instance, angle);
        }

        public virtual void TransformPoint(ref double x, ref double y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___TransformPointDelegate = (global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr));
            fixed (double* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (double* __y1 = &y)
                {
                    var __arg1 = __y1;
                    ___TransformPointDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        public virtual void TransformDistance(ref double dx, ref double dy)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___TransformDistanceDelegate = (global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr));
            fixed (double* __dx0 = &dx)
            {
                var __arg0 = __dx0;
                fixed (double* __dy1 = &dy)
                {
                    var __arg1 = __dy1;
                    ___TransformDistanceDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        public virtual global::System.IntPtr GetNativeMatrix()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___GetNativeMatrixDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetNativeMatrixDelegate(__Instance);
            return __ret;
        }

        public global::wxSharp.GraphicsMatrixData GetMatrixData()
        {
            var __ret = __Internal.GetMatrixData(__Instance);
            global::wxSharp.GraphicsMatrixData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsMatrixData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsMatrixData) global::wxSharp.GraphicsMatrixData.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.GraphicsMatrixData.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxGraphicsMatrix() {}
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData* CreateRefData() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData* CloneRefData(const wxObjectRefData* data) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void Set(wxDouble a=1.0, wxDouble b=0.0, wxDouble c=0.0, wxDouble d=1.0, wxDouble tx=0.0, wxDouble ty=0.0)
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double_double _SetDelegateInstance;

        private static void _SetDelegateHook(global::System.IntPtr __instance, double a, double b, double c, double d, double tx, double ty)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Set(a, b, c, d, tx, ty);
        }

        // void Get(wxDouble* a=NULL, wxDouble* b=NULL, wxDouble* c=NULL, wxDouble* d=NULL, wxDouble* tx=NULL, wxDouble* ty=NULL) const
        private static global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr_doublePtr_doublePtr_doublePtr_doublePtr _GetDelegateInstance;

        private static void _GetDelegateHook(global::System.IntPtr __instance, double* a, double* b, double* c, double* d, double* tx, double* ty)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Get(ref *a, ref *b, ref *c, ref *d, ref *tx, ref *ty);
        }

        // void Invert()
        private static global::wxSharp.Delegates.Action_IntPtr _InvertDelegateInstance;

        private static void _InvertDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Invert();
        }

        // bool IsIdentity() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsIdentityDelegateInstance;

        private static bool _IsIdentityDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsIdentity();
        }

        // void Translate( wxDouble dx , wxDouble dy )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double _TranslateDelegateInstance;

        private static void _TranslateDelegateHook(global::System.IntPtr __instance, double dx, double dy)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Translate(dx, dy);
        }

        // void Scale( wxDouble xScale , wxDouble yScale )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double _ScaleDelegateInstance;

        private static void _ScaleDelegateHook(global::System.IntPtr __instance, double xScale, double yScale)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Scale(xScale, yScale);
        }

        // void Rotate( wxDouble angle )
        private static global::wxSharp.Delegates.Action_IntPtr_double _RotateDelegateInstance;

        private static void _RotateDelegateHook(global::System.IntPtr __instance, double angle)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Rotate(angle);
        }

        // void TransformPoint( wxDouble *x, wxDouble *y ) const
        private static global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr _TransformPointDelegateInstance;

        private static void _TransformPointDelegateHook(global::System.IntPtr __instance, double* x, double* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.TransformPoint(ref *x, ref *y);
        }

        // void TransformDistance( wxDouble *dx, wxDouble *dy ) const
        private static global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr _TransformDistanceDelegateInstance;

        private static void _TransformDistanceDelegateHook(global::System.IntPtr __instance, double* dx, double* dy)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.TransformDistance(ref *dx, ref *dy);
        }

        // void * GetNativeMatrix() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetNativeMatrixDelegateInstance;

        private static global::System.IntPtr _GetNativeMatrixDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsMatrix) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetNativeMatrix();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[13];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _SetDelegateInstance += _SetDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetDelegateInstance).ToPointer();
                _GetDelegateInstance += _GetDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetDelegateInstance).ToPointer();
                _InvertDelegateInstance += _InvertDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_InvertDelegateInstance).ToPointer();
                _IsIdentityDelegateInstance += _IsIdentityDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_IsIdentityDelegateInstance).ToPointer();
                _TranslateDelegateInstance += _TranslateDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_TranslateDelegateInstance).ToPointer();
                _ScaleDelegateInstance += _ScaleDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_ScaleDelegateInstance).ToPointer();
                _RotateDelegateInstance += _RotateDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_RotateDelegateInstance).ToPointer();
                _TransformPointDelegateInstance += _TransformPointDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_TransformPointDelegateInstance).ToPointer();
                _TransformDistanceDelegateInstance += _TransformDistanceDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_TransformDistanceDelegateInstance).ToPointer();
                _GetNativeMatrixDelegateInstance += _GetNativeMatrixDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_GetNativeMatrixDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(19 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(19 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = _Thunks[3];
                    *(void**) (vfptr0 + 28) = _Thunks[4];
                    *(void**) (vfptr0 + 32) = _Thunks[5];
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = _Thunks[6];
                    *(void**) (vfptr0 + 44) = _Thunks[7];
                    *(void**) (vfptr0 + 48) = _Thunks[8];
                    *(void**) (vfptr0 + 52) = _Thunks[9];
                    *(void**) (vfptr0 + 56) = _Thunks[10];
                    *(void**) (vfptr0 + 60) = _Thunks[11];
                    *(void**) (vfptr0 + 64) = _Thunks[12];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class GraphicsGradientStop : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::wxSharp.Color.__Internal m_col;

            [FieldOffset(8)]
            internal float m_pos;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxGraphicsGradientStopC2E8wxColourf")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr col, float pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxGraphicsGradientStopC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxGraphicsGradientStopD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxGraphicsGradientStop9SetColourERK8wxColour")]
            internal static extern void SetColour(global::System.IntPtr __instance, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxGraphicsGradientStop11GetPositionEv")]
            internal static extern float GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxGraphicsGradientStop11SetPositionEf")]
            internal static extern void SetPosition(global::System.IntPtr __instance, float pos);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsGradientStop> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsGradientStop>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.GraphicsGradientStop __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsGradientStop(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsGradientStop __CreateInstance(global::wxSharp.GraphicsGradientStop.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsGradientStop(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsGradientStop.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsGradientStop.__Internal));
            global::wxSharp.GraphicsGradientStop.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsGradientStop(global::wxSharp.GraphicsGradientStop.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsGradientStop(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public GraphicsGradientStop(global::wxSharp.Color col, float pos)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsGradientStop.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is passed by value.");
            var __arg0 = col.__Instance;
            __Internal.ctor(__Instance, __arg0, pos);
        }

        public GraphicsGradientStop(global::wxSharp.GraphicsGradientStop _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsGradientStop.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.GraphicsGradientStop __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetColour(global::wxSharp.Color col)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = col.__Instance;
            __Internal.SetColour(__Instance, __arg0);
        }

        public float GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return __ret;
        }

        public void SetPosition(float pos)
        {
            __Internal.SetPosition(__Instance, pos);
        }
    }

    public unsafe partial class GraphicsGradientStops : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::wxSharp.Vector.__Internal m_stops;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxGraphicsGradientStopsC2E8wxColourS0_")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr startCol, global::System.IntPtr endCol);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxGraphicsGradientStopsC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxGraphicsGradientStopsD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxGraphicsGradientStops3AddERK22wxGraphicsGradientStop")]
            internal static extern void Add(global::System.IntPtr __instance, global::System.IntPtr stop);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxGraphicsGradientStops3AddE8wxColourf")]
            internal static extern void Add(global::System.IntPtr __instance, global::System.IntPtr col, float pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK23wxGraphicsGradientStops8GetCountEv")]
            internal static extern uint GetCount(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK23wxGraphicsGradientStops4ItemEj")]
            internal static extern void Item(global::System.IntPtr @return, global::System.IntPtr __instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxGraphicsGradientStops14SetStartColourE8wxColour")]
            internal static extern void SetStartColour(global::System.IntPtr __instance, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK23wxGraphicsGradientStops14GetStartColourEv")]
            internal static extern void GetStartColour(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxGraphicsGradientStops12SetEndColourE8wxColour")]
            internal static extern void SetEndColour(global::System.IntPtr __instance, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK23wxGraphicsGradientStops12GetEndColourEv")]
            internal static extern void GetEndColour(global::System.IntPtr @return, global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsGradientStops> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsGradientStops>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.GraphicsGradientStops __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsGradientStops(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsGradientStops __CreateInstance(global::wxSharp.GraphicsGradientStops.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsGradientStops(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsGradientStops.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsGradientStops.__Internal));
            global::wxSharp.GraphicsGradientStops.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsGradientStops(global::wxSharp.GraphicsGradientStops.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsGradientStops(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public GraphicsGradientStops(global::wxSharp.Color startCol, global::wxSharp.Color endCol)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsGradientStops.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(startCol, null))
                throw new global::System.ArgumentNullException("startCol", "Cannot be null because it is passed by value.");
            var __arg0 = startCol.__Instance;
            if (ReferenceEquals(endCol, null))
                throw new global::System.ArgumentNullException("endCol", "Cannot be null because it is passed by value.");
            var __arg1 = endCol.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
        }

        public GraphicsGradientStops(global::wxSharp.GraphicsGradientStops _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsGradientStops.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.GraphicsGradientStops __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Add(global::wxSharp.GraphicsGradientStop stop)
        {
            if (ReferenceEquals(stop, null))
                throw new global::System.ArgumentNullException("stop", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = stop.__Instance;
            __Internal.Add(__Instance, __arg0);
        }

        public void Add(global::wxSharp.Color col, float pos)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is passed by value.");
            var __arg0 = col.__Instance;
            __Internal.Add(__Instance, __arg0, pos);
        }

        public uint GetCount()
        {
            var __ret = __Internal.GetCount(__Instance);
            return __ret;
        }

        public global::wxSharp.GraphicsGradientStop Item(uint n)
        {
            var __ret = new global::wxSharp.GraphicsGradientStop.__Internal();
            __Internal.Item(new IntPtr(&__ret), __Instance, n);
            return global::wxSharp.GraphicsGradientStop.__CreateInstance(__ret);
        }

        public void SetStartColour(global::wxSharp.Color col)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is passed by value.");
            var __arg0 = col.__Instance;
            __Internal.SetStartColour(__Instance, __arg0);
        }

        public global::wxSharp.Color GetStartColour()
        {
            var __ret = new global::wxSharp.Color.__Internal();
            __Internal.GetStartColour(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Color.__CreateInstance(__ret);
        }

        public void SetEndColour(global::wxSharp.Color col)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is passed by value.");
            var __arg0 = col.__Instance;
            __Internal.SetEndColour(__Instance, __arg0);
        }

        public global::wxSharp.Color GetEndColour()
        {
            var __ret = new global::wxSharp.Color.__Internal();
            __Internal.GetEndColour(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Color.__CreateInstance(__ret);
        }
    }

    public unsafe partial class GraphicsPenInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 108)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::wxSharp.Color.__Internal m_colour;

            [FieldOffset(8)]
            internal global::wxSharp.Bitmap.__Internal m_stipple;

            [FieldOffset(16)]
            internal global::wxSharp.PenStyle m_style;

            [FieldOffset(20)]
            internal global::wxSharp.PenJoin m_join;

            [FieldOffset(24)]
            internal global::wxSharp.PenCap m_cap;

            [FieldOffset(28)]
            internal int m_nb_dashes;

            [FieldOffset(32)]
            internal global::System.IntPtr m_dash;

            [FieldOffset(36)]
            internal double m_width;

            [FieldOffset(44)]
            internal global::wxSharp.GradientType m_gradientType;

            [FieldOffset(48)]
            internal double m_x1;

            [FieldOffset(56)]
            internal double m_y1;

            [FieldOffset(64)]
            internal double m_x2;

            [FieldOffset(72)]
            internal double m_y2;

            [FieldOffset(80)]
            internal double m_radius;

            [FieldOffset(88)]
            internal global::wxSharp.GraphicsGradientStops.__Internal m_stops;

            [FieldOffset(100)]
            internal global::wxSharp.GraphicsMatrix.__Internal m_matrix;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsPenInfoC2ERK8wxColourd10wxPenStyle")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr colour, double width, global::wxSharp.PenStyle style);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsPenInfoC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxPenInfoBaseI17wxGraphicsPenInfoEC2ERK8wxColour10wxPenStyle")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr colour, global::wxSharp.PenStyle style);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsPenInfoD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo8GetWidthEv")]
            internal static extern double GetWidth(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo15GetGradientTypeEv")]
            internal static extern global::wxSharp.GradientType GetGradientType(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo5GetX1Ev")]
            internal static extern double GetX1(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo5GetY1Ev")]
            internal static extern double GetY1(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo5GetX2Ev")]
            internal static extern double GetX2(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo5GetY2Ev")]
            internal static extern double GetY2(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo9GetStartXEv")]
            internal static extern double GetStartX(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo9GetStartYEv")]
            internal static extern double GetStartY(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo7GetEndXEv")]
            internal static extern double GetEndX(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo7GetEndYEv")]
            internal static extern double GetEndY(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsPenInfo9GetRadiusEv")]
            internal static extern double GetRadius(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxPenInfoBaseI17wxGraphicsPenInfoE9GetColourEv")]
            internal static extern void GetColour(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxPenInfoBaseI17wxGraphicsPenInfoE8GetStyleEv")]
            internal static extern global::wxSharp.PenStyle GetStyle(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxPenInfoBaseI17wxGraphicsPenInfoE7GetJoinEv")]
            internal static extern global::wxSharp.PenJoin GetJoin(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxPenInfoBaseI17wxGraphicsPenInfoE6GetCapEv")]
            internal static extern global::wxSharp.PenCap GetCap(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxPenInfoBaseI17wxGraphicsPenInfoE9GetDashesEPPa")]
            internal static extern int GetDashes(global::System.IntPtr __instance, sbyte** ptr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxPenInfoBaseI17wxGraphicsPenInfoE12GetDashCountEv")]
            internal static extern int GetDashCount(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxPenInfoBaseI17wxGraphicsPenInfoE7GetDashEv")]
            internal static extern sbyte* GetDash(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxPenInfoBaseI17wxGraphicsPenInfoE13IsTransparentEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsTransparent(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsPenInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GraphicsPenInfo>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.GraphicsPenInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsPenInfo(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsPenInfo __CreateInstance(global::wxSharp.GraphicsPenInfo.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsPenInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsPenInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPenInfo.__Internal));
            global::wxSharp.GraphicsPenInfo.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsPenInfo(global::wxSharp.GraphicsPenInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsPenInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public GraphicsPenInfo(global::wxSharp.Color colour, double width, global::wxSharp.PenStyle style)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPenInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = colour.__Instance;
            __Internal.ctor(__Instance, __arg0, width, style);
        }

        public GraphicsPenInfo(global::wxSharp.GraphicsPenInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPenInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        protected GraphicsPenInfo(global::wxSharp.Color colour, global::wxSharp.PenStyle style)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPenInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = colour.__Instance;
            __Internal.ctor(__Instance, __arg0, style);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.GraphicsPenInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public double GetWidth()
        {
            var __ret = __Internal.GetWidth(__Instance);
            return __ret;
        }

        public global::wxSharp.GradientType GetGradientType()
        {
            var __ret = __Internal.GetGradientType(__Instance);
            return __ret;
        }

        public double GetX1()
        {
            var __ret = __Internal.GetX1(__Instance);
            return __ret;
        }

        public double GetY1()
        {
            var __ret = __Internal.GetY1(__Instance);
            return __ret;
        }

        public double GetX2()
        {
            var __ret = __Internal.GetX2(__Instance);
            return __ret;
        }

        public double GetY2()
        {
            var __ret = __Internal.GetY2(__Instance);
            return __ret;
        }

        public double GetStartX()
        {
            var __ret = __Internal.GetStartX(__Instance);
            return __ret;
        }

        public double GetStartY()
        {
            var __ret = __Internal.GetStartY(__Instance);
            return __ret;
        }

        public double GetEndX()
        {
            var __ret = __Internal.GetEndX(__Instance);
            return __ret;
        }

        public double GetEndY()
        {
            var __ret = __Internal.GetEndY(__Instance);
            return __ret;
        }

        public double GetRadius()
        {
            var __ret = __Internal.GetRadius(__Instance);
            return __ret;
        }

        public global::wxSharp.Color GetColour()
        {
            var __ret = new global::wxSharp.Color.__Internal();
            __Internal.GetColour(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Color.__CreateInstance(__ret);
        }

        public global::wxSharp.PenStyle GetStyle()
        {
            var __ret = __Internal.GetStyle(__Instance);
            return __ret;
        }

        public global::wxSharp.PenJoin GetJoin()
        {
            var __ret = __Internal.GetJoin(__Instance);
            return __ret;
        }

        public global::wxSharp.PenCap GetCap()
        {
            var __ret = __Internal.GetCap(__Instance);
            return __ret;
        }

        public int GetDashes(sbyte** ptr)
        {
            var __ret = __Internal.GetDashes(__Instance, ptr);
            return __ret;
        }

        public int GetDashCount()
        {
            var __ret = __Internal.GetDashCount(__Instance);
            return __ret;
        }

        public sbyte* GetDash()
        {
            var __ret = __Internal.GetDash(__Instance);
            return __ret;
        }

        public bool IsTransparent()
        {
            var __ret = __Internal.IsTransparent(__Instance);
            return __ret;
        }
    }

    public unsafe partial class GraphicsPath : global::wxSharp.GraphicsObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGraphicsPathC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGraphicsPathC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGraphicsPath11GetPathDataEv")]
            internal static extern global::System.IntPtr GetPathData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGraphicsPath14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.GraphicsPath __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsPath(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsPath __CreateInstance(global::wxSharp.GraphicsPath.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsPath(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GraphicsPath.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPath.__Internal));
            global::wxSharp.GraphicsPath.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GraphicsPath(global::wxSharp.GraphicsPath.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GraphicsPath(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public GraphicsPath()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPath.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsPath");
        }

        public GraphicsPath(global::wxSharp.GraphicsPath _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsPath.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsPath");
        }

        public virtual void MoveToPoint(double x, double y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___MoveToPointDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double));
            ___MoveToPointDelegate(__Instance, x, y);
        }

        public virtual void AddLineToPoint(double x, double y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___AddLineToPointDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double));
            ___AddLineToPointDelegate(__Instance, x, y);
        }

        public virtual void AddCurveToPoint(double cx1, double cy1, double cx2, double cy2, double x, double y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___AddCurveToPointDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double_double));
            ___AddCurveToPointDelegate(__Instance, cx1, cy1, cx2, cy2, x, y);
        }

        public virtual void AddPath(global::wxSharp.GraphicsPath path)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___AddPathDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = path.__Instance;
            ___AddPathDelegate(__Instance, __arg0);
        }

        public virtual void CloseSubpath()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___CloseSubpathDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___CloseSubpathDelegate(__Instance);
        }

        public virtual void GetCurrentPoint(ref double x, ref double y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___GetCurrentPointDelegate = (global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr));
            fixed (double* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (double* __y1 = &y)
                {
                    var __arg1 = __y1;
                    ___GetCurrentPointDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        public virtual void AddArc(double x, double y, double r, double startAngle, double endAngle, bool clockwise)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___AddArcDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double_bool));
            ___AddArcDelegate(__Instance, x, y, r, startAngle, endAngle, clockwise);
        }

        public virtual void AddQuadCurveToPoint(double cx, double cy, double x, double y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___AddQuadCurveToPointDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double));
            ___AddQuadCurveToPointDelegate(__Instance, cx, cy, x, y);
        }

        public virtual void AddRectangle(double x, double y, double w, double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___AddRectangleDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double));
            ___AddRectangleDelegate(__Instance, x, y, w, h);
        }

        public virtual void AddCircle(double x, double y, double r)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___AddCircleDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double));
            ___AddCircleDelegate(__Instance, x, y, r);
        }

        public virtual void AddArcToPoint(double x1, double y1, double x2, double y2, double r)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___AddArcToPointDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double));
            ___AddArcToPointDelegate(__Instance, x1, y1, x2, y2, r);
        }

        public virtual void AddEllipse(double x, double y, double w, double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___AddEllipseDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double));
            ___AddEllipseDelegate(__Instance, x, y, w, h);
        }

        public virtual void AddRoundedRectangle(double x, double y, double w, double h, double radius)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___AddRoundedRectangleDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double));
            ___AddRoundedRectangleDelegate(__Instance, x, y, w, h, radius);
        }

        public virtual global::System.IntPtr GetNativePath()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___GetNativePathDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetNativePathDelegate(__Instance);
            return __ret;
        }

        public virtual void UnGetNativePath(global::System.IntPtr p)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___UnGetNativePathDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            ___UnGetNativePathDelegate(__Instance, p);
        }

        public virtual void Transform(global::wxSharp.GraphicsMatrix matrix)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___TransformDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(matrix, null))
                throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = matrix.__Instance;
            ___TransformDelegate(__Instance, __arg0);
        }

        public virtual void GetBox(ref double x, ref double y, ref double w, ref double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___GetBoxDelegate = (global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr_doublePtr_doublePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr_doublePtr_doublePtr));
            fixed (double* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (double* __y1 = &y)
                {
                    var __arg1 = __y1;
                    fixed (double* __w2 = &w)
                    {
                        var __arg2 = __w2;
                        fixed (double* __h3 = &h)
                        {
                            var __arg3 = __h3;
                            ___GetBoxDelegate(__Instance, __arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public virtual bool Contains(double x, double y, global::wxSharp.PolygonFillMode fillStyle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 4);
            var ___ContainsDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_double_double_wxSharp_wxPolygonFillMode) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_double_double_wxSharp_wxPolygonFillMode));
            var __ret = ___ContainsDelegate(__Instance, x, y, fillStyle);
            return __ret;
        }

        public global::wxSharp.GraphicsPathData GetPathData()
        {
            var __ret = __Internal.GetPathData(__Instance);
            global::wxSharp.GraphicsPathData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsPathData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsPathData) global::wxSharp.GraphicsPathData.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.GraphicsPathData.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxGraphicsPath() {}
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData* CreateRefData() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData* CloneRefData(const wxObjectRefData* data) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void MoveToPoint( wxDouble x, wxDouble y )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double _MoveToPointDelegateInstance;

        private static void _MoveToPointDelegateHook(global::System.IntPtr __instance, double x, double y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.MoveToPoint(x, y);
        }

        // void AddLineToPoint( wxDouble x, wxDouble y )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double _AddLineToPointDelegateInstance;

        private static void _AddLineToPointDelegateHook(global::System.IntPtr __instance, double x, double y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AddLineToPoint(x, y);
        }

        // void AddCurveToPoint( wxDouble cx1, wxDouble cy1, wxDouble cx2, wxDouble cy2, wxDouble x, wxDouble y )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double_double _AddCurveToPointDelegateInstance;

        private static void _AddCurveToPointDelegateHook(global::System.IntPtr __instance, double cx1, double cy1, double cx2, double cy2, double x, double y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AddCurveToPoint(cx1, cy1, cx2, cy2, x, y);
        }

        // void AddPath( const wxGraphicsPath& path )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AddPathDelegateInstance;

        private static void _AddPathDelegateHook(global::System.IntPtr __instance, global::System.IntPtr path)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsPath __result0;
            if (path == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsPath.NativeToManagedMap.ContainsKey(path))
                __result0 = (global::wxSharp.GraphicsPath) global::wxSharp.GraphicsPath.NativeToManagedMap[path];
            else __result0 = (global::wxSharp.GraphicsPath) global::wxSharp.GraphicsPath.__CreateInstance(path, skipVTables: true);
            __target.AddPath(__result0);
        }

        // void CloseSubpath()
        private static global::wxSharp.Delegates.Action_IntPtr _CloseSubpathDelegateInstance;

        private static void _CloseSubpathDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.CloseSubpath();
        }

        // void GetCurrentPoint( wxDouble* x, wxDouble* y) const
        private static global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr _GetCurrentPointDelegateInstance;

        private static void _GetCurrentPointDelegateHook(global::System.IntPtr __instance, double* x, double* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetCurrentPoint(ref *x, ref *y);
        }

        // void AddArc( wxDouble x, wxDouble y, wxDouble r, wxDouble startAngle, wxDouble endAngle, bool clockwise )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double_bool _AddArcDelegateInstance;

        private static void _AddArcDelegateHook(global::System.IntPtr __instance, double x, double y, double r, double startAngle, double endAngle, bool clockwise)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AddArc(x, y, r, startAngle, endAngle, clockwise);
        }

        // void AddQuadCurveToPoint( wxDouble cx, wxDouble cy, wxDouble x, wxDouble y )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double _AddQuadCurveToPointDelegateInstance;

        private static void _AddQuadCurveToPointDelegateHook(global::System.IntPtr __instance, double cx, double cy, double x, double y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AddQuadCurveToPoint(cx, cy, x, y);
        }

        // void AddRectangle( wxDouble x, wxDouble y, wxDouble w, wxDouble h )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double _AddRectangleDelegateInstance;

        private static void _AddRectangleDelegateHook(global::System.IntPtr __instance, double x, double y, double w, double h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AddRectangle(x, y, w, h);
        }

        // void AddCircle( wxDouble x, wxDouble y, wxDouble r )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double _AddCircleDelegateInstance;

        private static void _AddCircleDelegateHook(global::System.IntPtr __instance, double x, double y, double r)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AddCircle(x, y, r);
        }

        // void AddArcToPoint( wxDouble x1, wxDouble y1 , wxDouble x2, wxDouble y2, wxDouble r )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double _AddArcToPointDelegateInstance;

        private static void _AddArcToPointDelegateHook(global::System.IntPtr __instance, double x1, double y1, double x2, double y2, double r)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AddArcToPoint(x1, y1, x2, y2, r);
        }

        // void AddEllipse( wxDouble x, wxDouble y, wxDouble w, wxDouble h)
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double _AddEllipseDelegateInstance;

        private static void _AddEllipseDelegateHook(global::System.IntPtr __instance, double x, double y, double w, double h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AddEllipse(x, y, w, h);
        }

        // void AddRoundedRectangle( wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble radius)
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double _AddRoundedRectangleDelegateInstance;

        private static void _AddRoundedRectangleDelegateHook(global::System.IntPtr __instance, double x, double y, double w, double h, double radius)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AddRoundedRectangle(x, y, w, h, radius);
        }

        // void * GetNativePath() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetNativePathDelegateInstance;

        private static global::System.IntPtr _GetNativePathDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetNativePath();
            return __ret;
        }

        // void UnGetNativePath(void *p)const
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _UnGetNativePathDelegateInstance;

        private static void _UnGetNativePathDelegateHook(global::System.IntPtr __instance, global::System.IntPtr p)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.UnGetNativePath(p);
        }

        // void Transform( const wxGraphicsMatrix& matrix )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _TransformDelegateInstance;

        private static void _TransformDelegateHook(global::System.IntPtr __instance, global::System.IntPtr matrix)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsMatrix __result0;
            if (matrix == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsMatrix.NativeToManagedMap.ContainsKey(matrix))
                __result0 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.NativeToManagedMap[matrix];
            else __result0 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.__CreateInstance(matrix, skipVTables: true);
            __target.Transform(__result0);
        }

        // void GetBox(wxDouble *x, wxDouble *y, wxDouble *w, wxDouble *h)const
        private static global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr_doublePtr_doublePtr _GetBoxDelegateInstance;

        private static void _GetBoxDelegateHook(global::System.IntPtr __instance, double* x, double* y, double* w, double* h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetBox(ref *x, ref *y, ref *w, ref *h);
        }

        // bool Contains( wxDouble x, wxDouble y, wxPolygonFillMode fillStyle = wxODDEVEN_RULE)const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_double_double_wxSharp_wxPolygonFillMode _ContainsDelegateInstance;

        private static bool _ContainsDelegateHook(global::System.IntPtr __instance, double x, double y, global::wxSharp.PolygonFillMode fillStyle)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsPath) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Contains(x, y, fillStyle);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[21];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _MoveToPointDelegateInstance += _MoveToPointDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MoveToPointDelegateInstance).ToPointer();
                _AddLineToPointDelegateInstance += _AddLineToPointDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_AddLineToPointDelegateInstance).ToPointer();
                _AddCurveToPointDelegateInstance += _AddCurveToPointDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_AddCurveToPointDelegateInstance).ToPointer();
                _AddPathDelegateInstance += _AddPathDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_AddPathDelegateInstance).ToPointer();
                _CloseSubpathDelegateInstance += _CloseSubpathDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_CloseSubpathDelegateInstance).ToPointer();
                _GetCurrentPointDelegateInstance += _GetCurrentPointDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_GetCurrentPointDelegateInstance).ToPointer();
                _AddArcDelegateInstance += _AddArcDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_AddArcDelegateInstance).ToPointer();
                _AddQuadCurveToPointDelegateInstance += _AddQuadCurveToPointDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_AddQuadCurveToPointDelegateInstance).ToPointer();
                _AddRectangleDelegateInstance += _AddRectangleDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_AddRectangleDelegateInstance).ToPointer();
                _AddCircleDelegateInstance += _AddCircleDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_AddCircleDelegateInstance).ToPointer();
                _AddArcToPointDelegateInstance += _AddArcToPointDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_AddArcToPointDelegateInstance).ToPointer();
                _AddEllipseDelegateInstance += _AddEllipseDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_AddEllipseDelegateInstance).ToPointer();
                _AddRoundedRectangleDelegateInstance += _AddRoundedRectangleDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_AddRoundedRectangleDelegateInstance).ToPointer();
                _GetNativePathDelegateInstance += _GetNativePathDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_GetNativePathDelegateInstance).ToPointer();
                _UnGetNativePathDelegateInstance += _UnGetNativePathDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_UnGetNativePathDelegateInstance).ToPointer();
                _TransformDelegateInstance += _TransformDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_TransformDelegateInstance).ToPointer();
                _GetBoxDelegateInstance += _GetBoxDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_GetBoxDelegateInstance).ToPointer();
                _ContainsDelegateInstance += _ContainsDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_ContainsDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(25 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(25 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = _Thunks[8];
                    *(void**) (vfptr0 + 44) = _Thunks[9];
                    *(void**) (vfptr0 + 48) = _Thunks[10];
                    *(void**) (vfptr0 + 52) = _Thunks[11];
                    *(void**) (vfptr0 + 56) = _Thunks[12];
                    *(void**) (vfptr0 + 60) = _Thunks[13];
                    *(void**) (vfptr0 + 64) = _Thunks[14];
                    *(void**) (vfptr0 + 68) = _Thunks[15];
                    *(void**) (vfptr0 + 72) = _Thunks[16];
                    *(void**) (vfptr0 + 76) = _Thunks[17];
                    *(void**) (vfptr0 + 80) = _Thunks[18];
                    *(void**) (vfptr0 + 84) = _Thunks[19];
                    *(void**) (vfptr0 + 88) = _Thunks[20];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe abstract partial class GraphicsContext : global::wxSharp.GraphicsObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal double m_width;

            [FieldOffset(16)]
            internal double m_height;

            [FieldOffset(24)]
            internal global::wxSharp.GraphicsPen.__Internal m_pen;

            [FieldOffset(32)]
            internal global::wxSharp.GraphicsBrush.__Internal m_brush;

            [FieldOffset(40)]
            internal global::wxSharp.GraphicsFont.__Internal m_font;

            [FieldOffset(48)]
            internal global::wxSharp.AntialiasMode m_antialias;

            [FieldOffset(52)]
            internal global::wxSharp.CompositionMode m_composition;

            [FieldOffset(56)]
            internal global::wxSharp.InterpolationQuality m_interpolation;

            [FieldOffset(60)]
            internal byte m_enableOffset;

            [FieldOffset(64)]
            internal global::System.IntPtr m_window;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContextC2EP18wxGraphicsRendererP8wxWindow")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr renderer, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext6CreateERK10wxWindowDC")]
            internal static extern global::System.IntPtr Create(global::System.IntPtr dc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext19CreateFromUnknownDCERK4wxDC")]
            internal static extern global::System.IntPtr CreateFromUnknownDC(global::System.IntPtr dc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext16CreateFromNativeEPv")]
            internal static extern global::System.IntPtr CreateFromNative(global::System.IntPtr context);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext22CreateFromNativeWindowEPv")]
            internal static extern global::System.IntPtr CreateFromNativeWindow(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext6CreateEP8wxWindow")]
            internal static extern global::System.IntPtr Create_1(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext6CreateEv")]
            internal static extern global::System.IntPtr Create();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsContext9GetWindowEv")]
            internal static extern global::System.IntPtr GetWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsContext10CreatePathEv")]
            internal static extern void CreatePath(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsContext9CreatePenERK5wxPen")]
            internal static extern void CreatePen(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr pen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsContext9CreatePenERK17wxGraphicsPenInfo")]
            internal static extern void CreatePen_1(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsContext25CreateLinearGradientBrushEddddRK8wxColourS2_RK16wxGraphicsMatrix")]
            internal static extern void CreateLinearGradientBrush(global::System.IntPtr @return, global::System.IntPtr __instance, double x1, double y1, double x2, double y2, global::System.IntPtr c1, global::System.IntPtr c2, global::System.IntPtr matrix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsContext25CreateLinearGradientBrushEddddRK23wxGraphicsGradientStopsRK16wxGraphicsMatrix")]
            internal static extern void CreateLinearGradientBrush(global::System.IntPtr @return, global::System.IntPtr __instance, double x1, double y1, double x2, double y2, global::System.IntPtr stops, global::System.IntPtr matrix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsContext25CreateRadialGradientBrushEdddddRK8wxColourS2_RK16wxGraphicsMatrix")]
            internal static extern void CreateRadialGradientBrush(global::System.IntPtr @return, global::System.IntPtr __instance, double startX, double startY, double endX, double endY, double radius, global::System.IntPtr oColor, global::System.IntPtr cColor, global::System.IntPtr matrix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsContext25CreateRadialGradientBrushEdddddRK23wxGraphicsGradientStopsRK16wxGraphicsMatrix")]
            internal static extern void CreateRadialGradientBrush(global::System.IntPtr @return, global::System.IntPtr __instance, double startX, double startY, double endX, double endY, double radius, global::System.IntPtr stops, global::System.IntPtr matrix);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxGraphicsContext7GetSizeEPdS0_")]
            internal static extern void GetSize(global::System.IntPtr __instance, double* width, double* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext6SetPenERK5wxPen")]
            internal static extern void SetPen_1(global::System.IntPtr __instance, global::System.IntPtr pen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext8SetBrushERK7wxBrush")]
            internal static extern void SetBrush_1(global::System.IntPtr __instance, global::System.IntPtr brush);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext13DisableOffsetEv")]
            internal static extern void DisableOffset(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxGraphicsContext13OffsetEnabledEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OffsetEnabled(global::System.IntPtr __instance);
        }

        internal static new global::wxSharp.GraphicsContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsContextInternal(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsContext __CreateInstance(global::wxSharp.GraphicsContext.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsContextInternal(native, skipVTables);
        }

        protected GraphicsContext(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        protected GraphicsContext(global::wxSharp.GraphicsRenderer renderer, global::wxSharp.Window window)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(renderer, null) ? global::System.IntPtr.Zero : renderer.__Instance;
            var __arg1 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsContext");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.IwxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.GraphicsContext.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.Window GetWindow()
        {
            var __ret = __Internal.GetWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void EndDoc()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___EndDocDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___EndDocDelegate(__Instance);
        }

        public virtual void StartPage(double width, double height)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___StartPageDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double));
            ___StartPageDelegate(__Instance, width, height);
        }

        public virtual void EndPage()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___EndPageDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___EndPageDelegate(__Instance);
        }

        public virtual void Flush()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___FlushDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___FlushDelegate(__Instance);
        }

        public global::wxSharp.GraphicsPath CreatePath()
        {
            var __ret = new global::wxSharp.GraphicsPath.__Internal();
            __Internal.CreatePath(new IntPtr(&__ret), __Instance);
            return global::wxSharp.GraphicsPath.__CreateInstance(__ret);
        }

        public global::wxSharp.GraphicsPen CreatePen(global::wxSharp.Pen pen)
        {
            if (ReferenceEquals(pen, null))
                throw new global::System.ArgumentNullException("pen", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pen.__Instance;
            var __ret = new global::wxSharp.GraphicsPen.__Internal();
            __Internal.CreatePen(new IntPtr(&__ret), __Instance, __arg0);
            return global::wxSharp.GraphicsPen.__CreateInstance(__ret);
        }

        public global::wxSharp.GraphicsPen CreatePen(global::wxSharp.GraphicsPenInfo info)
        {
            if (ReferenceEquals(info, null))
                throw new global::System.ArgumentNullException("info", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = info.__Instance;
            var __ret = new global::wxSharp.GraphicsPen.__Internal();
            __Internal.CreatePen_1(new IntPtr(&__ret), __Instance, __arg0);
            return global::wxSharp.GraphicsPen.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.GraphicsBrush CreateBrush(global::wxSharp.Brush brush)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___CreateBrushDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(brush, null))
                throw new global::System.ArgumentNullException("brush", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = brush.__Instance;
            var __ret = new global::wxSharp.GraphicsBrush.__Internal();
            ___CreateBrushDelegate(new IntPtr(&__ret), __Instance, __arg0);
            return global::wxSharp.GraphicsBrush.__CreateInstance(__ret);
        }

        public global::wxSharp.GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, global::wxSharp.Color c1, global::wxSharp.Color c2, global::wxSharp.GraphicsMatrix matrix)
        {
            if (ReferenceEquals(c1, null))
                throw new global::System.ArgumentNullException("c1", "Cannot be null because it is a C++ reference (&).");
            var __arg4 = c1.__Instance;
            if (ReferenceEquals(c2, null))
                throw new global::System.ArgumentNullException("c2", "Cannot be null because it is a C++ reference (&).");
            var __arg5 = c2.__Instance;
            if (ReferenceEquals(matrix, null))
                throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
            var __arg6 = matrix.__Instance;
            var __ret = new global::wxSharp.GraphicsBrush.__Internal();
            __Internal.CreateLinearGradientBrush(new IntPtr(&__ret), __Instance, x1, y1, x2, y2, __arg4, __arg5, __arg6);
            return global::wxSharp.GraphicsBrush.__CreateInstance(__ret);
        }

        public global::wxSharp.GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, global::wxSharp.GraphicsGradientStops stops, global::wxSharp.GraphicsMatrix matrix)
        {
            if (ReferenceEquals(stops, null))
                throw new global::System.ArgumentNullException("stops", "Cannot be null because it is a C++ reference (&).");
            var __arg4 = stops.__Instance;
            if (ReferenceEquals(matrix, null))
                throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
            var __arg5 = matrix.__Instance;
            var __ret = new global::wxSharp.GraphicsBrush.__Internal();
            __Internal.CreateLinearGradientBrush(new IntPtr(&__ret), __Instance, x1, y1, x2, y2, __arg4, __arg5);
            return global::wxSharp.GraphicsBrush.__CreateInstance(__ret);
        }

        public global::wxSharp.GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, global::wxSharp.Color oColor, global::wxSharp.Color cColor, global::wxSharp.GraphicsMatrix matrix)
        {
            if (ReferenceEquals(oColor, null))
                throw new global::System.ArgumentNullException("oColor", "Cannot be null because it is a C++ reference (&).");
            var __arg5 = oColor.__Instance;
            if (ReferenceEquals(cColor, null))
                throw new global::System.ArgumentNullException("cColor", "Cannot be null because it is a C++ reference (&).");
            var __arg6 = cColor.__Instance;
            if (ReferenceEquals(matrix, null))
                throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
            var __arg7 = matrix.__Instance;
            var __ret = new global::wxSharp.GraphicsBrush.__Internal();
            __Internal.CreateRadialGradientBrush(new IntPtr(&__ret), __Instance, startX, startY, endX, endY, radius, __arg5, __arg6, __arg7);
            return global::wxSharp.GraphicsBrush.__CreateInstance(__ret);
        }

        public global::wxSharp.GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, global::wxSharp.GraphicsGradientStops stops, global::wxSharp.GraphicsMatrix matrix)
        {
            if (ReferenceEquals(stops, null))
                throw new global::System.ArgumentNullException("stops", "Cannot be null because it is a C++ reference (&).");
            var __arg5 = stops.__Instance;
            if (ReferenceEquals(matrix, null))
                throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
            var __arg6 = matrix.__Instance;
            var __ret = new global::wxSharp.GraphicsBrush.__Internal();
            __Internal.CreateRadialGradientBrush(new IntPtr(&__ret), __Instance, startX, startY, endX, endY, radius, __arg5, __arg6);
            return global::wxSharp.GraphicsBrush.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.GraphicsBitmap CreateSubBitmap(global::wxSharp.GraphicsBitmap bitmap, double x, double y, double w, double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___CreateSubBitmapDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_double_double_double_double));
            if (ReferenceEquals(bitmap, null))
                throw new global::System.ArgumentNullException("bitmap", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = bitmap.__Instance;
            var __ret = new global::wxSharp.GraphicsBitmap.__Internal();
            ___CreateSubBitmapDelegate(new IntPtr(&__ret), __Instance, __arg0, x, y, w, h);
            return global::wxSharp.GraphicsBitmap.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.GraphicsMatrix CreateMatrix(double a, double b, double c, double d, double tx, double ty)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___CreateMatrixDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_double_double));
            var __ret = new global::wxSharp.GraphicsMatrix.__Internal();
            ___CreateMatrixDelegate(new IntPtr(&__ret), __Instance, a, b, c, d, tx, ty);
            return global::wxSharp.GraphicsMatrix.__CreateInstance(__ret);
        }

        public abstract void PushState();

        public abstract void PopState();

        public abstract void Clip(double x, double y, double w, double h);

        public abstract void ResetClip();

        public abstract void GetClipBox(ref double x, ref double y, ref double w, ref double h);

        public abstract global::System.IntPtr GetNativeContext();

        public virtual global::wxSharp.AntialiasMode GetAntialiasMode()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 23 * 4);
            var ___GetAntialiasModeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxAntialiasMode_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxAntialiasMode_IntPtr));
            var __ret = ___GetAntialiasModeDelegate(__Instance);
            return __ret;
        }

        public abstract bool SetAntialiasMode(global::wxSharp.AntialiasMode antialias);

        public virtual global::wxSharp.InterpolationQuality GetInterpolationQuality()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 4);
            var ___GetInterpolationQualityDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxInterpolationQuality_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxInterpolationQuality_IntPtr));
            var __ret = ___GetInterpolationQualityDelegate(__Instance);
            return __ret;
        }

        public abstract bool SetInterpolationQuality(global::wxSharp.InterpolationQuality interpolation);

        public virtual global::wxSharp.CompositionMode GetCompositionMode()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 4);
            var ___GetCompositionModeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxCompositionMode_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxCompositionMode_IntPtr));
            var __ret = ___GetCompositionModeDelegate(__Instance);
            return __ret;
        }

        public abstract bool SetCompositionMode(global::wxSharp.CompositionMode op);

        public void GetSize(ref double width, ref double height)
        {
            fixed (double* __width0 = &width)
            {
                var __arg0 = __width0;
                fixed (double* __height1 = &height)
                {
                    var __arg1 = __height1;
                    __Internal.GetSize(__Instance, __arg0, __arg1);
                }
            }
        }

        public virtual void GetDPI(ref double dpiX, ref double dpiY)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 29 * 4);
            var ___GetDPIDelegate = (global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr));
            fixed (double* __dpiX0 = &dpiX)
            {
                var __arg0 = __dpiX0;
                fixed (double* __dpiY1 = &dpiY)
                {
                    var __arg1 = __dpiY1;
                    ___GetDPIDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        public abstract void BeginLayer(double opacity);

        public abstract void EndLayer();

        public abstract void Translate(double dx, double dy);

        public abstract void Scale(double xScale, double yScale);

        public abstract void Rotate(double angle);

        public abstract void ConcatTransform(global::wxSharp.GraphicsMatrix matrix);

        public abstract void SetTransform(global::wxSharp.GraphicsMatrix matrix);

        public abstract global::wxSharp.GraphicsMatrix GetTransform();

        public virtual void SetPen(global::wxSharp.GraphicsPen pen)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 38 * 4);
            var ___SetPenDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(pen, null))
                throw new global::System.ArgumentNullException("pen", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pen.__Instance;
            ___SetPenDelegate(__Instance, __arg0);
        }

        public void SetPen(global::wxSharp.Pen pen)
        {
            if (ReferenceEquals(pen, null))
                throw new global::System.ArgumentNullException("pen", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pen.__Instance;
            __Internal.SetPen_1(__Instance, __arg0);
        }

        public virtual void SetBrush(global::wxSharp.GraphicsBrush brush)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 39 * 4);
            var ___SetBrushDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(brush, null))
                throw new global::System.ArgumentNullException("brush", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = brush.__Instance;
            ___SetBrushDelegate(__Instance, __arg0);
        }

        public void SetBrush(global::wxSharp.Brush brush)
        {
            if (ReferenceEquals(brush, null))
                throw new global::System.ArgumentNullException("brush", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = brush.__Instance;
            __Internal.SetBrush_1(__Instance, __arg0);
        }

        public virtual void SetFont(global::wxSharp.GraphicsFont font)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 40 * 4);
            var ___SetFontDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(font, null))
                throw new global::System.ArgumentNullException("font", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = font.__Instance;
            ___SetFontDelegate(__Instance, __arg0);
        }

        public abstract void StrokePath(global::wxSharp.GraphicsPath path);

        public abstract void FillPath(global::wxSharp.GraphicsPath path, global::wxSharp.PolygonFillMode fillStyle);

        public virtual void DrawPath(global::wxSharp.GraphicsPath path, global::wxSharp.PolygonFillMode fillStyle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 43 * 4);
            var ___DrawPathDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxPolygonFillMode) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxPolygonFillMode));
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = path.__Instance;
            ___DrawPathDelegate(__Instance, __arg0, fillStyle);
        }

        public virtual void ClearRectangle(double x, double y, double w, double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 44 * 4);
            var ___ClearRectangleDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double));
            ___ClearRectangleDelegate(__Instance, x, y, w, h);
        }

        public abstract void DrawBitmap(global::wxSharp.GraphicsBitmap bmp, double x, double y, double w, double h);

        public virtual void StrokeLine(double x1, double y1, double x2, double y2)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 50 * 4);
            var ___StrokeLineDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double));
            ___StrokeLineDelegate(__Instance, x1, y1, x2, y2);
        }

        public virtual void DrawRectangle(double x, double y, double w, double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 54 * 4);
            var ___DrawRectangleDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double));
            ___DrawRectangleDelegate(__Instance, x, y, w, h);
        }

        public virtual void DrawEllipse(double x, double y, double w, double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 55 * 4);
            var ___DrawEllipseDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double));
            ___DrawEllipseDelegate(__Instance, x, y, w, h);
        }

        public virtual void DrawRoundedRectangle(double x, double y, double w, double h, double radius)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 56 * 4);
            var ___DrawRoundedRectangleDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double));
            ___DrawRoundedRectangleDelegate(__Instance, x, y, w, h, radius);
        }

        public virtual bool ShouldOffset()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 57 * 4);
            var ___ShouldOffsetDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___ShouldOffsetDelegate(__Instance);
            return __ret;
        }

        public virtual void EnableOffset(bool enable)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 58 * 4);
            var ___EnableOffsetDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool));
            ___EnableOffsetDelegate(__Instance, enable);
        }

        public void DisableOffset()
        {
            __Internal.DisableOffset(__Instance);
        }

        public bool OffsetEnabled()
        {
            var __ret = __Internal.OffsetEnabled(__Instance);
            return __ret;
        }

        protected virtual global::wxSharp.GraphicsPen DoCreatePen(global::wxSharp.GraphicsPenInfo info)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 59 * 4);
            var ___DoCreatePenDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(info, null))
                throw new global::System.ArgumentNullException("info", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = info.__Instance;
            var __ret = new global::wxSharp.GraphicsPen.__Internal();
            ___DoCreatePenDelegate(new IntPtr(&__ret), __Instance, __arg0);
            return global::wxSharp.GraphicsPen.__CreateInstance(__ret);
        }

        public static global::wxSharp.GraphicsContext Create(global::wxSharp.WindowDC dc)
        {
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            var __ret = __Internal.Create(__arg0);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.GraphicsContext CreateFromUnknownDC(global::wxSharp.DC dc)
        {
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            var __ret = __Internal.CreateFromUnknownDC(__arg0);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.GraphicsContext CreateFromNative(global::System.IntPtr context)
        {
            var __ret = __Internal.CreateFromNative(context);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.GraphicsContext CreateFromNativeWindow(global::System.IntPtr window)
        {
            var __ret = __Internal.CreateFromNativeWindow(window);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.GraphicsContext Create(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.Create_1(__arg0);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.GraphicsContext Create()
        {
            var __ret = __Internal.Create();
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        protected double m_width
        {
            get
            {
                return ((global::wxSharp.GraphicsContext.__Internal*) __Instance)->m_width;
            }

            set
            {
                ((global::wxSharp.GraphicsContext.__Internal*)__Instance)->m_width = value;
            }
        }

        protected double m_height
        {
            get
            {
                return ((global::wxSharp.GraphicsContext.__Internal*) __Instance)->m_height;
            }

            set
            {
                ((global::wxSharp.GraphicsContext.__Internal*)__Instance)->m_height = value;
            }
        }

        protected global::wxSharp.GraphicsPen m_pen
        {
            get
            {
                return global::wxSharp.GraphicsPen.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.GraphicsContext.__Internal*) __Instance)->m_pen));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.GraphicsContext.__Internal*)__Instance)->m_pen = *(global::wxSharp.GraphicsPen.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.GraphicsBrush m_brush
        {
            get
            {
                return global::wxSharp.GraphicsBrush.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.GraphicsContext.__Internal*) __Instance)->m_brush));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.GraphicsContext.__Internal*)__Instance)->m_brush = *(global::wxSharp.GraphicsBrush.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.GraphicsFont m_font
        {
            get
            {
                return global::wxSharp.GraphicsFont.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.GraphicsContext.__Internal*) __Instance)->m_font));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.GraphicsContext.__Internal*)__Instance)->m_font = *(global::wxSharp.GraphicsFont.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.AntialiasMode m_antialias
        {
            get
            {
                return ((global::wxSharp.GraphicsContext.__Internal*) __Instance)->m_antialias;
            }

            set
            {
                ((global::wxSharp.GraphicsContext.__Internal*)__Instance)->m_antialias = value;
            }
        }

        protected global::wxSharp.CompositionMode m_composition
        {
            get
            {
                return ((global::wxSharp.GraphicsContext.__Internal*) __Instance)->m_composition;
            }

            set
            {
                ((global::wxSharp.GraphicsContext.__Internal*)__Instance)->m_composition = value;
            }
        }

        protected global::wxSharp.InterpolationQuality m_interpolation
        {
            get
            {
                return ((global::wxSharp.GraphicsContext.__Internal*) __Instance)->m_interpolation;
            }

            set
            {
                ((global::wxSharp.GraphicsContext.__Internal*)__Instance)->m_interpolation = value;
            }
        }

        protected bool m_enableOffset
        {
            get
            {
                return ((global::wxSharp.GraphicsContext.__Internal*) __Instance)->m_enableOffset != 0;
            }

            set
            {
                ((global::wxSharp.GraphicsContext.__Internal*)__Instance)->m_enableOffset = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // virtual ~wxGraphicsContext()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData* CreateRefData() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData* CloneRefData(const wxObjectRefData* data) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void EndDoc()
        private static global::wxSharp.Delegates.Action_IntPtr _EndDocDelegateInstance;

        private static void _EndDocDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.EndDoc();
        }

        // void StartPage( wxDouble width = 0, wxDouble height = 0 )
        private static global::wxSharp.Delegates.Action_IntPtr_double_double _StartPageDelegateInstance;

        private static void _StartPageDelegateHook(global::System.IntPtr __instance, double width, double height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.StartPage(width, height);
        }

        // void EndPage()
        private static global::wxSharp.Delegates.Action_IntPtr _EndPageDelegateInstance;

        private static void _EndPageDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.EndPage();
        }

        // void Flush()
        private static global::wxSharp.Delegates.Action_IntPtr _FlushDelegateInstance;

        private static void _FlushDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Flush();
        }

        // wxGraphicsBrush CreateBrush(const wxBrush& brush ) const
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr _CreateBrushDelegateInstance;

        private static void _CreateBrushDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr brush)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Brush __result1;
            if (brush == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Brush.NativeToManagedMap.ContainsKey(brush))
                __result1 = (global::wxSharp.Brush) global::wxSharp.Brush.NativeToManagedMap[brush];
            else __result1 = (global::wxSharp.Brush) global::wxSharp.Brush.__CreateInstance(brush, skipVTables: true);
            var __ret = __target.CreateBrush(__result1);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsBrush.__Internal*) @return = *(global::wxSharp.GraphicsBrush.__Internal*) __ret.__Instance;
        }

        // wxGraphicsBitmap CreateSubBitmap( const wxGraphicsBitmap &bitmap, wxDouble x, wxDouble y, wxDouble w, wxDouble h ) const
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_double_double_double_double _CreateSubBitmapDelegateInstance;

        private static void _CreateSubBitmapDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr bitmap, double x, double y, double w, double h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsBitmap __result1;
            if (bitmap == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.GraphicsBitmap.NativeToManagedMap.ContainsKey(bitmap))
                __result1 = (global::wxSharp.GraphicsBitmap) global::wxSharp.GraphicsBitmap.NativeToManagedMap[bitmap];
            else __result1 = (global::wxSharp.GraphicsBitmap) global::wxSharp.GraphicsBitmap.__CreateInstance(bitmap, skipVTables: true);
            var __ret = __target.CreateSubBitmap(__result1, x, y, w, h);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsBitmap.__Internal*) @return = *(global::wxSharp.GraphicsBitmap.__Internal*) __ret.__Instance;
        }

        // wxGraphicsMatrix CreateMatrix( wxDouble a=1.0, wxDouble b=0.0, wxDouble c=0.0, wxDouble d=1.0, wxDouble tx=0.0, wxDouble ty=0.0) const
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_double_double _CreateMatrixDelegateInstance;

        private static void _CreateMatrixDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, double a, double b, double c, double d, double tx, double ty)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateMatrix(a, b, c, d, tx, ty);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsMatrix.__Internal*) @return = *(global::wxSharp.GraphicsMatrix.__Internal*) __ret.__Instance;
        }

        // void PushState() = 0
        private static global::wxSharp.Delegates.Action_IntPtr _PushStateDelegateInstance;

        private static void _PushStateDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.PushState();
        }

        // void PopState() = 0
        private static global::wxSharp.Delegates.Action_IntPtr _PopStateDelegateInstance;

        private static void _PopStateDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.PopState();
        }

        // void Clip( wxDouble x, wxDouble y, wxDouble w, wxDouble h ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double _ClipDelegateInstance;

        private static void _ClipDelegateHook(global::System.IntPtr __instance, double x, double y, double w, double h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Clip(x, y, w, h);
        }

        // void ResetClip() = 0
        private static global::wxSharp.Delegates.Action_IntPtr _ResetClipDelegateInstance;

        private static void _ResetClipDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ResetClip();
        }

        // void GetClipBox(wxDouble* x, wxDouble* y, wxDouble* w, wxDouble* h) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr_doublePtr_doublePtr _GetClipBoxDelegateInstance;

        private static void _GetClipBoxDelegateHook(global::System.IntPtr __instance, double* x, double* y, double* w, double* h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetClipBox(ref *x, ref *y, ref *w, ref *h);
        }

        // void * GetNativeContext() = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetNativeContextDelegateInstance;

        private static global::System.IntPtr _GetNativeContextDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetNativeContext();
            return __ret;
        }

        // wxAntialiasMode GetAntialiasMode() const { return m_antialias; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxAntialiasMode_IntPtr _GetAntialiasModeDelegateInstance;

        private static global::wxSharp.AntialiasMode _GetAntialiasModeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetAntialiasMode();
            return __ret;
        }

        // bool SetAntialiasMode(wxAntialiasMode antialias) = 0
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxAntialiasMode _SetAntialiasModeDelegateInstance;

        private static bool _SetAntialiasModeDelegateHook(global::System.IntPtr __instance, global::wxSharp.AntialiasMode antialias)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetAntialiasMode(antialias);
        }

        // wxInterpolationQuality GetInterpolationQuality() const { return m_interpolation; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxInterpolationQuality_IntPtr _GetInterpolationQualityDelegateInstance;

        private static global::wxSharp.InterpolationQuality _GetInterpolationQualityDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetInterpolationQuality();
            return __ret;
        }

        // bool SetInterpolationQuality(wxInterpolationQuality interpolation) = 0
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxInterpolationQuality _SetInterpolationQualityDelegateInstance;

        private static bool _SetInterpolationQualityDelegateHook(global::System.IntPtr __instance, global::wxSharp.InterpolationQuality interpolation)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetInterpolationQuality(interpolation);
        }

        // wxCompositionMode GetCompositionMode() const { return m_composition; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxCompositionMode_IntPtr _GetCompositionModeDelegateInstance;

        private static global::wxSharp.CompositionMode _GetCompositionModeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetCompositionMode();
            return __ret;
        }

        // bool SetCompositionMode(wxCompositionMode op) = 0
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxCompositionMode _SetCompositionModeDelegateInstance;

        private static bool _SetCompositionModeDelegateHook(global::System.IntPtr __instance, global::wxSharp.CompositionMode op)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetCompositionMode(op);
        }

        // void GetDPI( wxDouble* dpiX, wxDouble* dpiY) const
        private static global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr _GetDPIDelegateInstance;

        private static void _GetDPIDelegateHook(global::System.IntPtr __instance, double* dpiX, double* dpiY)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetDPI(ref *dpiX, ref *dpiY);
        }

        // void BeginLayer(wxDouble opacity) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_double _BeginLayerDelegateInstance;

        private static void _BeginLayerDelegateHook(global::System.IntPtr __instance, double opacity)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.BeginLayer(opacity);
        }

        // void EndLayer() = 0
        private static global::wxSharp.Delegates.Action_IntPtr _EndLayerDelegateInstance;

        private static void _EndLayerDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.EndLayer();
        }

        // void Translate( wxDouble dx , wxDouble dy ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_double_double _TranslateDelegateInstance;

        private static void _TranslateDelegateHook(global::System.IntPtr __instance, double dx, double dy)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Translate(dx, dy);
        }

        // void Scale( wxDouble xScale , wxDouble yScale ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_double_double _ScaleDelegateInstance;

        private static void _ScaleDelegateHook(global::System.IntPtr __instance, double xScale, double yScale)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Scale(xScale, yScale);
        }

        // void Rotate( wxDouble angle ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_double _RotateDelegateInstance;

        private static void _RotateDelegateHook(global::System.IntPtr __instance, double angle)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Rotate(angle);
        }

        // void ConcatTransform( const wxGraphicsMatrix& matrix ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _ConcatTransformDelegateInstance;

        private static void _ConcatTransformDelegateHook(global::System.IntPtr __instance, global::System.IntPtr matrix)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsMatrix __result0;
            if (matrix == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsMatrix.NativeToManagedMap.ContainsKey(matrix))
                __result0 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.NativeToManagedMap[matrix];
            else __result0 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.__CreateInstance(matrix, skipVTables: true);
            __target.ConcatTransform(__result0);
        }

        // void SetTransform( const wxGraphicsMatrix& matrix ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetTransformDelegateInstance;

        private static void _SetTransformDelegateHook(global::System.IntPtr __instance, global::System.IntPtr matrix)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsMatrix __result0;
            if (matrix == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsMatrix.NativeToManagedMap.ContainsKey(matrix))
                __result0 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.NativeToManagedMap[matrix];
            else __result0 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.__CreateInstance(matrix, skipVTables: true);
            __target.SetTransform(__result0);
        }

        // wxGraphicsMatrix GetTransform() const = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _GetTransformDelegateInstance;

        private static void _GetTransformDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetTransform();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsMatrix.__Internal*) @return = *(global::wxSharp.GraphicsMatrix.__Internal*) __ret.__Instance;
        }

        // void SetPen( const wxGraphicsPen& pen )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetPenDelegateInstance;

        private static void _SetPenDelegateHook(global::System.IntPtr __instance, global::System.IntPtr pen)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsPen __result0;
            if (pen == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsPen.NativeToManagedMap.ContainsKey(pen))
                __result0 = (global::wxSharp.GraphicsPen) global::wxSharp.GraphicsPen.NativeToManagedMap[pen];
            else __result0 = (global::wxSharp.GraphicsPen) global::wxSharp.GraphicsPen.__CreateInstance(pen, skipVTables: true);
            __target.SetPen(__result0);
        }

        // void SetBrush( const wxGraphicsBrush& brush )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetBrushDelegateInstance;

        private static void _SetBrushDelegateHook(global::System.IntPtr __instance, global::System.IntPtr brush)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsBrush __result0;
            if (brush == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsBrush.NativeToManagedMap.ContainsKey(brush))
                __result0 = (global::wxSharp.GraphicsBrush) global::wxSharp.GraphicsBrush.NativeToManagedMap[brush];
            else __result0 = (global::wxSharp.GraphicsBrush) global::wxSharp.GraphicsBrush.__CreateInstance(brush, skipVTables: true);
            __target.SetBrush(__result0);
        }

        // void SetFont( const wxGraphicsFont& font )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetFontDelegateInstance;

        private static void _SetFontDelegateHook(global::System.IntPtr __instance, global::System.IntPtr font)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsFont __result0;
            if (font == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsFont.NativeToManagedMap.ContainsKey(font))
                __result0 = (global::wxSharp.GraphicsFont) global::wxSharp.GraphicsFont.NativeToManagedMap[font];
            else __result0 = (global::wxSharp.GraphicsFont) global::wxSharp.GraphicsFont.__CreateInstance(font, skipVTables: true);
            __target.SetFont(__result0);
        }

        // void StrokePath( const wxGraphicsPath& path ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _StrokePathDelegateInstance;

        private static void _StrokePathDelegateHook(global::System.IntPtr __instance, global::System.IntPtr path)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsPath __result0;
            if (path == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsPath.NativeToManagedMap.ContainsKey(path))
                __result0 = (global::wxSharp.GraphicsPath) global::wxSharp.GraphicsPath.NativeToManagedMap[path];
            else __result0 = (global::wxSharp.GraphicsPath) global::wxSharp.GraphicsPath.__CreateInstance(path, skipVTables: true);
            __target.StrokePath(__result0);
        }

        // void FillPath( const wxGraphicsPath& path, wxPolygonFillMode fillStyle = wxODDEVEN_RULE ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxPolygonFillMode _FillPathDelegateInstance;

        private static void _FillPathDelegateHook(global::System.IntPtr __instance, global::System.IntPtr path, global::wxSharp.PolygonFillMode fillStyle)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsPath __result0;
            if (path == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsPath.NativeToManagedMap.ContainsKey(path))
                __result0 = (global::wxSharp.GraphicsPath) global::wxSharp.GraphicsPath.NativeToManagedMap[path];
            else __result0 = (global::wxSharp.GraphicsPath) global::wxSharp.GraphicsPath.__CreateInstance(path, skipVTables: true);
            __target.FillPath(__result0, fillStyle);
        }

        // void DrawPath( const wxGraphicsPath& path, wxPolygonFillMode fillStyle = wxODDEVEN_RULE )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxPolygonFillMode _DrawPathDelegateInstance;

        private static void _DrawPathDelegateHook(global::System.IntPtr __instance, global::System.IntPtr path, global::wxSharp.PolygonFillMode fillStyle)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsPath __result0;
            if (path == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsPath.NativeToManagedMap.ContainsKey(path))
                __result0 = (global::wxSharp.GraphicsPath) global::wxSharp.GraphicsPath.NativeToManagedMap[path];
            else __result0 = (global::wxSharp.GraphicsPath) global::wxSharp.GraphicsPath.__CreateInstance(path, skipVTables: true);
            __target.DrawPath(__result0, fillStyle);
        }

        // void ClearRectangle(wxDouble x, wxDouble y, wxDouble w, wxDouble h)
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double _ClearRectangleDelegateInstance;

        private static void _ClearRectangleDelegateHook(global::System.IntPtr __instance, double x, double y, double w, double h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ClearRectangle(x, y, w, h);
        }

        // void DrawBitmap( const wxGraphicsBitmap &bmp, wxDouble x, wxDouble y, wxDouble w, wxDouble h ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double _DrawBitmapDelegateInstance;

        private static void _DrawBitmapDelegateHook(global::System.IntPtr __instance, global::System.IntPtr bmp, double x, double y, double w, double h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsBitmap __result0;
            if (bmp == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsBitmap.NativeToManagedMap.ContainsKey(bmp))
                __result0 = (global::wxSharp.GraphicsBitmap) global::wxSharp.GraphicsBitmap.NativeToManagedMap[bmp];
            else __result0 = (global::wxSharp.GraphicsBitmap) global::wxSharp.GraphicsBitmap.__CreateInstance(bmp, skipVTables: true);
            __target.DrawBitmap(__result0, x, y, w, h);
        }

        // void StrokeLine( wxDouble x1, wxDouble y1, wxDouble x2, wxDouble y2)
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double _StrokeLineDelegateInstance;

        private static void _StrokeLineDelegateHook(global::System.IntPtr __instance, double x1, double y1, double x2, double y2)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.StrokeLine(x1, y1, x2, y2);
        }

        // void DrawRectangle( wxDouble x, wxDouble y, wxDouble w, wxDouble h)
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double _DrawRectangleDelegateInstance;

        private static void _DrawRectangleDelegateHook(global::System.IntPtr __instance, double x, double y, double w, double h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DrawRectangle(x, y, w, h);
        }

        // void DrawEllipse( wxDouble x, wxDouble y, wxDouble w, wxDouble h)
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double _DrawEllipseDelegateInstance;

        private static void _DrawEllipseDelegateHook(global::System.IntPtr __instance, double x, double y, double w, double h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DrawEllipse(x, y, w, h);
        }

        // void DrawRoundedRectangle( wxDouble x, wxDouble y, wxDouble w, wxDouble h, wxDouble radius)
        private static global::wxSharp.Delegates.Action_IntPtr_double_double_double_double_double _DrawRoundedRectangleDelegateInstance;

        private static void _DrawRoundedRectangleDelegateHook(global::System.IntPtr __instance, double x, double y, double w, double h, double radius)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DrawRoundedRectangle(x, y, w, h, radius);
        }

        // bool ShouldOffset() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _ShouldOffsetDelegateInstance;

        private static bool _ShouldOffsetDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ShouldOffset();
        }

        // void EnableOffset(bool enable = true)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _EnableOffsetDelegateInstance;

        private static void _EnableOffsetDelegateHook(global::System.IntPtr __instance, bool enable)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.EnableOffset(enable);
        }

        // wxGraphicsPen DoCreatePen(const wxGraphicsPenInfo& info) const
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr _DoCreatePenDelegateInstance;

        private static void _DoCreatePenDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr info)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsContext) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsPenInfo __result1;
            if (info == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.GraphicsPenInfo.NativeToManagedMap.ContainsKey(info))
                __result1 = (global::wxSharp.GraphicsPenInfo) global::wxSharp.GraphicsPenInfo.NativeToManagedMap[info];
            else __result1 = global::wxSharp.GraphicsPenInfo.__CreateInstance(info);
            var __ret = __target.DoCreatePen(__result1);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsPen.__Internal*) @return = *(global::wxSharp.GraphicsPen.__Internal*) __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[46];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _EndDocDelegateInstance += _EndDocDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_EndDocDelegateInstance).ToPointer();
                _StartPageDelegateInstance += _StartPageDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_StartPageDelegateInstance).ToPointer();
                _EndPageDelegateInstance += _EndPageDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_EndPageDelegateInstance).ToPointer();
                _FlushDelegateInstance += _FlushDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_FlushDelegateInstance).ToPointer();
                _CreateBrushDelegateInstance += _CreateBrushDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_CreateBrushDelegateInstance).ToPointer();
                _CreateSubBitmapDelegateInstance += _CreateSubBitmapDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_CreateSubBitmapDelegateInstance).ToPointer();
                _CreateMatrixDelegateInstance += _CreateMatrixDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_CreateMatrixDelegateInstance).ToPointer();
                _PushStateDelegateInstance += _PushStateDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_PushStateDelegateInstance).ToPointer();
                _PopStateDelegateInstance += _PopStateDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_PopStateDelegateInstance).ToPointer();
                _ClipDelegateInstance += _ClipDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_ClipDelegateInstance).ToPointer();
                _ResetClipDelegateInstance += _ResetClipDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ResetClipDelegateInstance).ToPointer();
                _GetClipBoxDelegateInstance += _GetClipBoxDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_GetClipBoxDelegateInstance).ToPointer();
                _GetNativeContextDelegateInstance += _GetNativeContextDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_GetNativeContextDelegateInstance).ToPointer();
                _GetAntialiasModeDelegateInstance += _GetAntialiasModeDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_GetAntialiasModeDelegateInstance).ToPointer();
                _SetAntialiasModeDelegateInstance += _SetAntialiasModeDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_SetAntialiasModeDelegateInstance).ToPointer();
                _GetInterpolationQualityDelegateInstance += _GetInterpolationQualityDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_GetInterpolationQualityDelegateInstance).ToPointer();
                _SetInterpolationQualityDelegateInstance += _SetInterpolationQualityDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_SetInterpolationQualityDelegateInstance).ToPointer();
                _GetCompositionModeDelegateInstance += _GetCompositionModeDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_GetCompositionModeDelegateInstance).ToPointer();
                _SetCompositionModeDelegateInstance += _SetCompositionModeDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_SetCompositionModeDelegateInstance).ToPointer();
                _GetDPIDelegateInstance += _GetDPIDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_GetDPIDelegateInstance).ToPointer();
                _BeginLayerDelegateInstance += _BeginLayerDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_BeginLayerDelegateInstance).ToPointer();
                _EndLayerDelegateInstance += _EndLayerDelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_EndLayerDelegateInstance).ToPointer();
                _TranslateDelegateInstance += _TranslateDelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_TranslateDelegateInstance).ToPointer();
                _ScaleDelegateInstance += _ScaleDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_ScaleDelegateInstance).ToPointer();
                _RotateDelegateInstance += _RotateDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_RotateDelegateInstance).ToPointer();
                _ConcatTransformDelegateInstance += _ConcatTransformDelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_ConcatTransformDelegateInstance).ToPointer();
                _SetTransformDelegateInstance += _SetTransformDelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_SetTransformDelegateInstance).ToPointer();
                _GetTransformDelegateInstance += _GetTransformDelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_GetTransformDelegateInstance).ToPointer();
                _SetPenDelegateInstance += _SetPenDelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_SetPenDelegateInstance).ToPointer();
                _SetBrushDelegateInstance += _SetBrushDelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_SetBrushDelegateInstance).ToPointer();
                _SetFontDelegateInstance += _SetFontDelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_SetFontDelegateInstance).ToPointer();
                _StrokePathDelegateInstance += _StrokePathDelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_StrokePathDelegateInstance).ToPointer();
                _FillPathDelegateInstance += _FillPathDelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_FillPathDelegateInstance).ToPointer();
                _DrawPathDelegateInstance += _DrawPathDelegateHook;
                _Thunks[36] = Marshal.GetFunctionPointerForDelegate(_DrawPathDelegateInstance).ToPointer();
                _ClearRectangleDelegateInstance += _ClearRectangleDelegateHook;
                _Thunks[37] = Marshal.GetFunctionPointerForDelegate(_ClearRectangleDelegateInstance).ToPointer();
                _DrawBitmapDelegateInstance += _DrawBitmapDelegateHook;
                _Thunks[38] = Marshal.GetFunctionPointerForDelegate(_DrawBitmapDelegateInstance).ToPointer();
                _StrokeLineDelegateInstance += _StrokeLineDelegateHook;
                _Thunks[39] = Marshal.GetFunctionPointerForDelegate(_StrokeLineDelegateInstance).ToPointer();
                _DrawRectangleDelegateInstance += _DrawRectangleDelegateHook;
                _Thunks[40] = Marshal.GetFunctionPointerForDelegate(_DrawRectangleDelegateInstance).ToPointer();
                _DrawEllipseDelegateInstance += _DrawEllipseDelegateHook;
                _Thunks[41] = Marshal.GetFunctionPointerForDelegate(_DrawEllipseDelegateInstance).ToPointer();
                _DrawRoundedRectangleDelegateInstance += _DrawRoundedRectangleDelegateHook;
                _Thunks[42] = Marshal.GetFunctionPointerForDelegate(_DrawRoundedRectangleDelegateInstance).ToPointer();
                _ShouldOffsetDelegateInstance += _ShouldOffsetDelegateHook;
                _Thunks[43] = Marshal.GetFunctionPointerForDelegate(_ShouldOffsetDelegateInstance).ToPointer();
                _EnableOffsetDelegateInstance += _EnableOffsetDelegateHook;
                _Thunks[44] = Marshal.GetFunctionPointerForDelegate(_EnableOffsetDelegateInstance).ToPointer();
                _DoCreatePenDelegateInstance += _DoCreatePenDelegateHook;
                _Thunks[45] = Marshal.GetFunctionPointerForDelegate(_DoCreatePenDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(66 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 128);
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                    *(void**) (vfptr0 + 148) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 148);
                    *(void**) (vfptr0 + 152) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 152);
                    *(void**) (vfptr0 + 156) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 156);
                    *(void**) (vfptr0 + 160) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 160);
                    *(void**) (vfptr0 + 164) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 164);
                    *(void**) (vfptr0 + 168) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 168);
                    *(void**) (vfptr0 + 172) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 172);
                    *(void**) (vfptr0 + 176) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 176);
                    *(void**) (vfptr0 + 180) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 180);
                    *(void**) (vfptr0 + 184) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 184);
                    *(void**) (vfptr0 + 188) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 188);
                    *(void**) (vfptr0 + 192) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 192);
                    *(void**) (vfptr0 + 196) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 196);
                    *(void**) (vfptr0 + 200) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 200);
                    *(void**) (vfptr0 + 204) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 204);
                    *(void**) (vfptr0 + 208) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 208);
                    *(void**) (vfptr0 + 212) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 212);
                    *(void**) (vfptr0 + 216) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 216);
                    *(void**) (vfptr0 + 220) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 220);
                    *(void**) (vfptr0 + 224) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 224);
                    *(void**) (vfptr0 + 228) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 228);
                    *(void**) (vfptr0 + 232) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 232);
                    *(void**) (vfptr0 + 236) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 236);
                    *(void**) (vfptr0 + 240) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 240);
                    *(void**) (vfptr0 + 244) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 244);
                    *(void**) (vfptr0 + 248) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 248);
                    *(void**) (vfptr0 + 252) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 252);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(66 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = _Thunks[3];
                    *(void**) (vfptr0 + 28) = _Thunks[4];
                    *(void**) (vfptr0 + 32) = _Thunks[5];
                    *(void**) (vfptr0 + 36) = _Thunks[6];
                    *(void**) (vfptr0 + 40) = _Thunks[7];
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = _Thunks[8];
                    *(void**) (vfptr0 + 60) = _Thunks[9];
                    *(void**) (vfptr0 + 64) = _Thunks[10];
                    *(void**) (vfptr0 + 68) = _Thunks[11];
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = _Thunks[12];
                    *(void**) (vfptr0 + 80) = _Thunks[13];
                    *(void**) (vfptr0 + 84) = _Thunks[14];
                    *(void**) (vfptr0 + 88) = _Thunks[15];
                    *(void**) (vfptr0 + 92) = _Thunks[16];
                    *(void**) (vfptr0 + 96) = _Thunks[17];
                    *(void**) (vfptr0 + 100) = _Thunks[18];
                    *(void**) (vfptr0 + 104) = _Thunks[19];
                    *(void**) (vfptr0 + 108) = _Thunks[20];
                    *(void**) (vfptr0 + 112) = _Thunks[21];
                    *(void**) (vfptr0 + 116) = _Thunks[22];
                    *(void**) (vfptr0 + 120) = _Thunks[23];
                    *(void**) (vfptr0 + 124) = _Thunks[24];
                    *(void**) (vfptr0 + 128) = _Thunks[25];
                    *(void**) (vfptr0 + 132) = _Thunks[26];
                    *(void**) (vfptr0 + 136) = _Thunks[27];
                    *(void**) (vfptr0 + 140) = _Thunks[28];
                    *(void**) (vfptr0 + 144) = _Thunks[29];
                    *(void**) (vfptr0 + 148) = _Thunks[30];
                    *(void**) (vfptr0 + 152) = _Thunks[31];
                    *(void**) (vfptr0 + 156) = _Thunks[32];
                    *(void**) (vfptr0 + 160) = _Thunks[33];
                    *(void**) (vfptr0 + 164) = _Thunks[34];
                    *(void**) (vfptr0 + 168) = _Thunks[35];
                    *(void**) (vfptr0 + 172) = _Thunks[36];
                    *(void**) (vfptr0 + 176) = _Thunks[37];
                    *(void**) (vfptr0 + 180) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 180);
                    *(void**) (vfptr0 + 184) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 184);
                    *(void**) (vfptr0 + 188) = _Thunks[38];
                    *(void**) (vfptr0 + 192) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 192);
                    *(void**) (vfptr0 + 196) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 196);
                    *(void**) (vfptr0 + 200) = _Thunks[39];
                    *(void**) (vfptr0 + 204) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 204);
                    *(void**) (vfptr0 + 208) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 208);
                    *(void**) (vfptr0 + 212) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 212);
                    *(void**) (vfptr0 + 216) = _Thunks[40];
                    *(void**) (vfptr0 + 220) = _Thunks[41];
                    *(void**) (vfptr0 + 224) = _Thunks[42];
                    *(void**) (vfptr0 + 228) = _Thunks[43];
                    *(void**) (vfptr0 + 232) = _Thunks[44];
                    *(void**) (vfptr0 + 236) = _Thunks[45];
                    *(void**) (vfptr0 + 240) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 240);
                    *(void**) (vfptr0 + 244) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 244);
                    *(void**) (vfptr0 + 248) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 248);
                    *(void**) (vfptr0 + 252) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 252);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe abstract partial class GraphicsRenderer : global::wxSharp.Object, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxGraphicsRendererC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxGraphicsRenderer18GetDefaultRendererEv")]
            internal static extern global::System.IntPtr GetDefaultRenderer();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxGraphicsRenderer16GetCairoRendererEv")]
            internal static extern global::System.IntPtr GetCairoRenderer();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxGraphicsRenderer26CreateContextFromUnknownDCERK4wxDC")]
            internal static extern global::System.IntPtr CreateContextFromUnknownDC(global::System.IntPtr __instance, global::System.IntPtr dc);
        }

        internal static new global::wxSharp.GraphicsRenderer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsRendererInternal(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GraphicsRenderer __CreateInstance(global::wxSharp.GraphicsRenderer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GraphicsRendererInternal(native, skipVTables);
        }

        protected GraphicsRenderer(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        protected GraphicsRenderer()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsRenderer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.GraphicsRenderer");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.IwxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.GraphicsRenderer.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract global::wxSharp.GraphicsContext CreateContext(global::wxSharp.WindowDC dc);

        public global::wxSharp.GraphicsContext CreateContextFromUnknownDC(global::wxSharp.DC dc)
        {
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            var __ret = __Internal.CreateContextFromUnknownDC(__Instance, __arg0);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public abstract global::wxSharp.GraphicsContext CreateContextFromNativeContext(global::System.IntPtr context);

        public abstract global::wxSharp.GraphicsContext CreateContextFromNativeWindow(global::System.IntPtr window);

        public abstract global::wxSharp.GraphicsContext CreateContext(global::wxSharp.Window window);

        public abstract global::wxSharp.GraphicsContext CreateMeasuringContext();

        public abstract global::wxSharp.GraphicsPath CreatePath();

        public abstract global::wxSharp.GraphicsMatrix CreateMatrix(double a, double b, double c, double d, double tx, double ty);

        public abstract global::wxSharp.GraphicsPen CreatePen(global::wxSharp.GraphicsPenInfo info);

        public abstract global::wxSharp.GraphicsBrush CreateBrush(global::wxSharp.Brush brush);

        public abstract global::wxSharp.GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, global::wxSharp.GraphicsGradientStops stops, global::wxSharp.GraphicsMatrix matrix);

        public abstract global::wxSharp.GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, global::wxSharp.GraphicsGradientStops stops, global::wxSharp.GraphicsMatrix matrix);

        public abstract global::wxSharp.GraphicsBitmap CreateBitmapFromNativeBitmap(global::System.IntPtr bitmap);

        public abstract global::wxSharp.GraphicsBitmap CreateSubBitmap(global::wxSharp.GraphicsBitmap bitmap, double x, double y, double w, double h);

        public abstract void GetVersion(ref int major, ref int minor, ref int micro);

        public static global::wxSharp.GraphicsRenderer GetDefaultRenderer()
        {
            var __ret = __Internal.GetDefaultRenderer();
            global::wxSharp.GraphicsRenderer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsRenderer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsRenderer) global::wxSharp.GraphicsRenderer.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsRenderer.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsRenderer) global::wxSharp.GraphicsRenderer.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.GraphicsRenderer GetCairoRenderer()
        {
            var __ret = __Internal.GetCairoRenderer();
            global::wxSharp.GraphicsRenderer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsRenderer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsRenderer) global::wxSharp.GraphicsRenderer.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsRenderer.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsRenderer) global::wxSharp.GraphicsRenderer.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxGraphicsRenderer() {}
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxGraphicsContext * CreateContext( const wxWindowDC& dc) = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CreateContextDelegateInstance;

        private static global::System.IntPtr _CreateContextDelegateHook(global::System.IntPtr __instance, global::System.IntPtr dc)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.WindowDC __result0;
            if (dc == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowDC.NativeToManagedMap.ContainsKey(dc))
                __result0 = (global::wxSharp.WindowDC) global::wxSharp.WindowDC.NativeToManagedMap[dc];
            else __result0 = (global::wxSharp.WindowDC) global::wxSharp.WindowDC.__CreateInstance(dc, skipVTables: true);
            var __ret = __target.CreateContext(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxGraphicsContext * CreateContextFromNativeContext( void * context ) = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CreateContextFromNativeContextDelegateInstance;

        private static global::System.IntPtr _CreateContextFromNativeContextDelegateHook(global::System.IntPtr __instance, global::System.IntPtr context)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateContextFromNativeContext(context);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxGraphicsContext * CreateContextFromNativeWindow( void * window ) = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CreateContextFromNativeWindowDelegateInstance;

        private static global::System.IntPtr _CreateContextFromNativeWindowDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateContextFromNativeWindow(window);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxGraphicsContext * CreateContext( wxWindow* window ) = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CreateContext_1DelegateInstance;

        private static global::System.IntPtr _CreateContext_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr window)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            var __ret = __target.CreateContext(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxGraphicsContext * CreateMeasuringContext() = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateMeasuringContextDelegateInstance;

        private static global::System.IntPtr _CreateMeasuringContextDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateMeasuringContext();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxGraphicsPath CreatePath() = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _CreatePathDelegateInstance;

        private static void _CreatePathDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreatePath();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsPath.__Internal*) @return = *(global::wxSharp.GraphicsPath.__Internal*) __ret.__Instance;
        }

        // wxGraphicsMatrix CreateMatrix( wxDouble a=1.0, wxDouble b=0.0, wxDouble c=0.0, wxDouble d=1.0, wxDouble tx=0.0, wxDouble ty=0.0) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_double_double _CreateMatrixDelegateInstance;

        private static void _CreateMatrixDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, double a, double b, double c, double d, double tx, double ty)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateMatrix(a, b, c, d, tx, ty);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsMatrix.__Internal*) @return = *(global::wxSharp.GraphicsMatrix.__Internal*) __ret.__Instance;
        }

        // wxGraphicsPen CreatePen(const wxGraphicsPenInfo& info) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr _CreatePenDelegateInstance;

        private static void _CreatePenDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr info)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsPenInfo __result1;
            if (info == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.GraphicsPenInfo.NativeToManagedMap.ContainsKey(info))
                __result1 = (global::wxSharp.GraphicsPenInfo) global::wxSharp.GraphicsPenInfo.NativeToManagedMap[info];
            else __result1 = global::wxSharp.GraphicsPenInfo.__CreateInstance(info);
            var __ret = __target.CreatePen(__result1);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsPen.__Internal*) @return = *(global::wxSharp.GraphicsPen.__Internal*) __ret.__Instance;
        }

        // wxGraphicsBrush CreateBrush(const wxBrush& brush ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr _CreateBrushDelegateInstance;

        private static void _CreateBrushDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr brush)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Brush __result1;
            if (brush == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Brush.NativeToManagedMap.ContainsKey(brush))
                __result1 = (global::wxSharp.Brush) global::wxSharp.Brush.NativeToManagedMap[brush];
            else __result1 = (global::wxSharp.Brush) global::wxSharp.Brush.__CreateInstance(brush, skipVTables: true);
            var __ret = __target.CreateBrush(__result1);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsBrush.__Internal*) @return = *(global::wxSharp.GraphicsBrush.__Internal*) __ret.__Instance;
        }

        // wxGraphicsBrush CreateLinearGradientBrush(wxDouble x1, wxDouble y1, wxDouble x2, wxDouble y2, const wxGraphicsGradientStops& stops, const wxGraphicsMatrix& matrix = wxNullGraphicsMatrix) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_IntPtr_IntPtr _CreateLinearGradientBrushDelegateInstance;

        private static void _CreateLinearGradientBrushDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, double x1, double y1, double x2, double y2, global::System.IntPtr stops, global::System.IntPtr matrix)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsGradientStops __result5;
            if (stops == IntPtr.Zero) __result5 = null;
            else if (global::wxSharp.GraphicsGradientStops.NativeToManagedMap.ContainsKey(stops))
                __result5 = (global::wxSharp.GraphicsGradientStops) global::wxSharp.GraphicsGradientStops.NativeToManagedMap[stops];
            else __result5 = global::wxSharp.GraphicsGradientStops.__CreateInstance(stops);
            global::wxSharp.GraphicsMatrix __result6;
            if (matrix == IntPtr.Zero) __result6 = null;
            else if (global::wxSharp.GraphicsMatrix.NativeToManagedMap.ContainsKey(matrix))
                __result6 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.NativeToManagedMap[matrix];
            else __result6 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.__CreateInstance(matrix, skipVTables: true);
            var __ret = __target.CreateLinearGradientBrush(x1, y1, x2, y2, __result5, __result6);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsBrush.__Internal*) @return = *(global::wxSharp.GraphicsBrush.__Internal*) __ret.__Instance;
        }

        // wxGraphicsBrush CreateRadialGradientBrush(wxDouble startX, wxDouble startY, wxDouble endX, wxDouble endY, wxDouble radius, const wxGraphicsGradientStops& stops, const wxGraphicsMatrix& matrix = wxNullGraphicsMatrix) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_double_IntPtr_IntPtr _CreateRadialGradientBrushDelegateInstance;

        private static void _CreateRadialGradientBrushDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, double startX, double startY, double endX, double endY, double radius, global::System.IntPtr stops, global::System.IntPtr matrix)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsGradientStops __result6;
            if (stops == IntPtr.Zero) __result6 = null;
            else if (global::wxSharp.GraphicsGradientStops.NativeToManagedMap.ContainsKey(stops))
                __result6 = (global::wxSharp.GraphicsGradientStops) global::wxSharp.GraphicsGradientStops.NativeToManagedMap[stops];
            else __result6 = global::wxSharp.GraphicsGradientStops.__CreateInstance(stops);
            global::wxSharp.GraphicsMatrix __result7;
            if (matrix == IntPtr.Zero) __result7 = null;
            else if (global::wxSharp.GraphicsMatrix.NativeToManagedMap.ContainsKey(matrix))
                __result7 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.NativeToManagedMap[matrix];
            else __result7 = (global::wxSharp.GraphicsMatrix) global::wxSharp.GraphicsMatrix.__CreateInstance(matrix, skipVTables: true);
            var __ret = __target.CreateRadialGradientBrush(startX, startY, endX, endY, radius, __result6, __result7);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsBrush.__Internal*) @return = *(global::wxSharp.GraphicsBrush.__Internal*) __ret.__Instance;
        }

        // wxGraphicsBitmap CreateBitmapFromNativeBitmap( void* bitmap ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr _CreateBitmapFromNativeBitmapDelegateInstance;

        private static void _CreateBitmapFromNativeBitmapDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr bitmap)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateBitmapFromNativeBitmap(bitmap);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsBitmap.__Internal*) @return = *(global::wxSharp.GraphicsBitmap.__Internal*) __ret.__Instance;
        }

        // wxGraphicsBitmap CreateSubBitmap( const wxGraphicsBitmap &bitmap, wxDouble x, wxDouble y, wxDouble w, wxDouble h ) = 0
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_double_double_double_double _CreateSubBitmapDelegateInstance;

        private static void _CreateSubBitmapDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr bitmap, double x, double y, double w, double h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsBitmap __result1;
            if (bitmap == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.GraphicsBitmap.NativeToManagedMap.ContainsKey(bitmap))
                __result1 = (global::wxSharp.GraphicsBitmap) global::wxSharp.GraphicsBitmap.NativeToManagedMap[bitmap];
            else __result1 = (global::wxSharp.GraphicsBitmap) global::wxSharp.GraphicsBitmap.__CreateInstance(bitmap, skipVTables: true);
            var __ret = __target.CreateSubBitmap(__result1, x, y, w, h);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.GraphicsBitmap.__Internal*) @return = *(global::wxSharp.GraphicsBitmap.__Internal*) __ret.__Instance;
        }

        // void GetVersion(int* major, int* minor = NULL, int* micro = NULL) const = 0
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr_intPtr _GetVersionDelegateInstance;

        private static void _GetVersionDelegateHook(global::System.IntPtr __instance, int* major, int* minor, int* micro)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GraphicsRenderer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetVersion(ref *major, ref *minor, ref *micro);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[17];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CreateContextDelegateInstance += _CreateContextDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CreateContextDelegateInstance).ToPointer();
                _CreateContextFromNativeContextDelegateInstance += _CreateContextFromNativeContextDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_CreateContextFromNativeContextDelegateInstance).ToPointer();
                _CreateContextFromNativeWindowDelegateInstance += _CreateContextFromNativeWindowDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_CreateContextFromNativeWindowDelegateInstance).ToPointer();
                _CreateContext_1DelegateInstance += _CreateContext_1DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_CreateContext_1DelegateInstance).ToPointer();
                _CreateMeasuringContextDelegateInstance += _CreateMeasuringContextDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_CreateMeasuringContextDelegateInstance).ToPointer();
                _CreatePathDelegateInstance += _CreatePathDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_CreatePathDelegateInstance).ToPointer();
                _CreateMatrixDelegateInstance += _CreateMatrixDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_CreateMatrixDelegateInstance).ToPointer();
                _CreatePenDelegateInstance += _CreatePenDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_CreatePenDelegateInstance).ToPointer();
                _CreateBrushDelegateInstance += _CreateBrushDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_CreateBrushDelegateInstance).ToPointer();
                _CreateLinearGradientBrushDelegateInstance += _CreateLinearGradientBrushDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_CreateLinearGradientBrushDelegateInstance).ToPointer();
                _CreateRadialGradientBrushDelegateInstance += _CreateRadialGradientBrushDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_CreateRadialGradientBrushDelegateInstance).ToPointer();
                _CreateBitmapFromNativeBitmapDelegateInstance += _CreateBitmapFromNativeBitmapDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_CreateBitmapFromNativeBitmapDelegateInstance).ToPointer();
                _CreateSubBitmapDelegateInstance += _CreateSubBitmapDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_CreateSubBitmapDelegateInstance).ToPointer();
                _GetVersionDelegateInstance += _GetVersionDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_GetVersionDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(31 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(31 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = _Thunks[4];
                    *(void**) (vfptr0 + 36) = _Thunks[5];
                    *(void**) (vfptr0 + 40) = _Thunks[6];
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = _Thunks[7];
                    *(void**) (vfptr0 + 52) = _Thunks[8];
                    *(void**) (vfptr0 + 56) = _Thunks[9];
                    *(void**) (vfptr0 + 60) = _Thunks[10];
                    *(void**) (vfptr0 + 64) = _Thunks[11];
                    *(void**) (vfptr0 + 68) = _Thunks[12];
                    *(void**) (vfptr0 + 72) = _Thunks[13];
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = _Thunks[14];
                    *(void**) (vfptr0 + 104) = _Thunks[15];
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = _Thunks[16];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class GraphicsContextInternal : global::wxSharp.GraphicsContext, IDisposable
    {
        private static void* __CopyValue(global::wxSharp.GraphicsContext.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsContext.__Internal));
            *(global::wxSharp.GraphicsContext.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal GraphicsContextInternal(global::wxSharp.GraphicsContext.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal GraphicsContextInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override void PushState()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___PushStateDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___PushStateDelegate(__Instance);
        }

        public override void PopState()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___PopStateDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___PopStateDelegate(__Instance);
        }

        public override void Clip(double x, double y, double w, double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___ClipDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double_double_double));
            ___ClipDelegate(__Instance, x, y, w, h);
        }

        public override void ResetClip()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___ResetClipDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___ResetClipDelegate(__Instance);
        }

        public override void GetClipBox(ref double x, ref double y, ref double w, ref double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___GetClipBoxDelegate = (global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr_doublePtr_doublePtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_doublePtr_doublePtr_doublePtr_doublePtr));
            fixed (double* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (double* __y1 = &y)
                {
                    var __arg1 = __y1;
                    fixed (double* __w2 = &w)
                    {
                        var __arg2 = __w2;
                        fixed (double* __h3 = &h)
                        {
                            var __arg3 = __h3;
                            ___GetClipBoxDelegate(__Instance, __arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public override global::System.IntPtr GetNativeContext()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 4);
            var ___GetNativeContextDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetNativeContextDelegate(__Instance);
            return __ret;
        }

        public override bool SetAntialiasMode(global::wxSharp.AntialiasMode antialias)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 24 * 4);
            var ___SetAntialiasModeDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxAntialiasMode) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxAntialiasMode));
            var __ret = ___SetAntialiasModeDelegate(__Instance, antialias);
            return __ret;
        }

        public override bool SetInterpolationQuality(global::wxSharp.InterpolationQuality interpolation)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 26 * 4);
            var ___SetInterpolationQualityDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxInterpolationQuality) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxInterpolationQuality));
            var __ret = ___SetInterpolationQualityDelegate(__Instance, interpolation);
            return __ret;
        }

        public override bool SetCompositionMode(global::wxSharp.CompositionMode op)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 4);
            var ___SetCompositionModeDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxCompositionMode) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxCompositionMode));
            var __ret = ___SetCompositionModeDelegate(__Instance, op);
            return __ret;
        }

        public override void BeginLayer(double opacity)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 30 * 4);
            var ___BeginLayerDelegate = (global::wxSharp.Delegates.Action_IntPtr_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double));
            ___BeginLayerDelegate(__Instance, opacity);
        }

        public override void EndLayer()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 31 * 4);
            var ___EndLayerDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___EndLayerDelegate(__Instance);
        }

        public override void Translate(double dx, double dy)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 32 * 4);
            var ___TranslateDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double));
            ___TranslateDelegate(__Instance, dx, dy);
        }

        public override void Scale(double xScale, double yScale)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 33 * 4);
            var ___ScaleDelegate = (global::wxSharp.Delegates.Action_IntPtr_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double_double));
            ___ScaleDelegate(__Instance, xScale, yScale);
        }

        public override void Rotate(double angle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 34 * 4);
            var ___RotateDelegate = (global::wxSharp.Delegates.Action_IntPtr_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_double));
            ___RotateDelegate(__Instance, angle);
        }

        public override void ConcatTransform(global::wxSharp.GraphicsMatrix matrix)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 35 * 4);
            var ___ConcatTransformDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(matrix, null))
                throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = matrix.__Instance;
            ___ConcatTransformDelegate(__Instance, __arg0);
        }

        public override void SetTransform(global::wxSharp.GraphicsMatrix matrix)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 36 * 4);
            var ___SetTransformDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(matrix, null))
                throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = matrix.__Instance;
            ___SetTransformDelegate(__Instance, __arg0);
        }

        public override global::wxSharp.GraphicsMatrix GetTransform()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 37 * 4);
            var ___GetTransformDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __ret = new global::wxSharp.GraphicsMatrix.__Internal();
            ___GetTransformDelegate(new IntPtr(&__ret), __Instance);
            return global::wxSharp.GraphicsMatrix.__CreateInstance(__ret);
        }

        public override void StrokePath(global::wxSharp.GraphicsPath path)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 41 * 4);
            var ___StrokePathDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = path.__Instance;
            ___StrokePathDelegate(__Instance, __arg0);
        }

        public override void FillPath(global::wxSharp.GraphicsPath path, global::wxSharp.PolygonFillMode fillStyle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 42 * 4);
            var ___FillPathDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxPolygonFillMode) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxPolygonFillMode));
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = path.__Instance;
            ___FillPathDelegate(__Instance, __arg0, fillStyle);
        }

        public override void DrawBitmap(global::wxSharp.GraphicsBitmap bmp, double x, double y, double w, double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 47 * 4);
            var ___DrawBitmapDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double));
            if (ReferenceEquals(bmp, null))
                throw new global::System.ArgumentNullException("bmp", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = bmp.__Instance;
            ___DrawBitmapDelegate(__Instance, __arg0, x, y, w, h);
        }
    }

    public unsafe partial class GraphicsRendererInternal : global::wxSharp.GraphicsRenderer, IDisposable
    {
        private static void* __CopyValue(global::wxSharp.GraphicsRenderer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GraphicsRenderer.__Internal));
            *(global::wxSharp.GraphicsRenderer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal GraphicsRendererInternal(global::wxSharp.GraphicsRenderer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal GraphicsRendererInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override global::wxSharp.GraphicsContext CreateContext(global::wxSharp.WindowDC dc)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CreateContextDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            var __ret = ___CreateContextDelegate(__Instance, __arg0);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.GraphicsContext CreateContextFromNativeContext(global::System.IntPtr context)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___CreateContextFromNativeContextDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr));
            var __ret = ___CreateContextFromNativeContextDelegate(__Instance, context);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.GraphicsContext CreateContextFromNativeWindow(global::System.IntPtr window)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___CreateContextFromNativeWindowDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr));
            var __ret = ___CreateContextFromNativeWindowDelegate(__Instance, window);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.GraphicsContext CreateContext(global::wxSharp.Window window)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___CreateContext_1Delegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = ___CreateContext_1Delegate(__Instance, __arg0);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.GraphicsContext CreateMeasuringContext()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___CreateMeasuringContextDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CreateMeasuringContextDelegate(__Instance);
            global::wxSharp.GraphicsContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[__ret];
            else global::wxSharp.GraphicsContext.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.GraphicsPath CreatePath()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___CreatePathDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __ret = new global::wxSharp.GraphicsPath.__Internal();
            ___CreatePathDelegate(new IntPtr(&__ret), __Instance);
            return global::wxSharp.GraphicsPath.__CreateInstance(__ret);
        }

        public override global::wxSharp.GraphicsMatrix CreateMatrix(double a, double b, double c, double d, double tx, double ty)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___CreateMatrixDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_double_double));
            var __ret = new global::wxSharp.GraphicsMatrix.__Internal();
            ___CreateMatrixDelegate(new IntPtr(&__ret), __Instance, a, b, c, d, tx, ty);
            return global::wxSharp.GraphicsMatrix.__CreateInstance(__ret);
        }

        public override global::wxSharp.GraphicsPen CreatePen(global::wxSharp.GraphicsPenInfo info)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___CreatePenDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(info, null))
                throw new global::System.ArgumentNullException("info", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = info.__Instance;
            var __ret = new global::wxSharp.GraphicsPen.__Internal();
            ___CreatePenDelegate(new IntPtr(&__ret), __Instance, __arg0);
            return global::wxSharp.GraphicsPen.__CreateInstance(__ret);
        }

        public override global::wxSharp.GraphicsBrush CreateBrush(global::wxSharp.Brush brush)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___CreateBrushDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(brush, null))
                throw new global::System.ArgumentNullException("brush", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = brush.__Instance;
            var __ret = new global::wxSharp.GraphicsBrush.__Internal();
            ___CreateBrushDelegate(new IntPtr(&__ret), __Instance, __arg0);
            return global::wxSharp.GraphicsBrush.__CreateInstance(__ret);
        }

        public override global::wxSharp.GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, global::wxSharp.GraphicsGradientStops stops, global::wxSharp.GraphicsMatrix matrix)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___CreateLinearGradientBrushDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_IntPtr_IntPtr));
            if (ReferenceEquals(stops, null))
                throw new global::System.ArgumentNullException("stops", "Cannot be null because it is a C++ reference (&).");
            var __arg4 = stops.__Instance;
            if (ReferenceEquals(matrix, null))
                throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
            var __arg5 = matrix.__Instance;
            var __ret = new global::wxSharp.GraphicsBrush.__Internal();
            ___CreateLinearGradientBrushDelegate(new IntPtr(&__ret), __Instance, x1, y1, x2, y2, __arg4, __arg5);
            return global::wxSharp.GraphicsBrush.__CreateInstance(__ret);
        }

        public override global::wxSharp.GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, global::wxSharp.GraphicsGradientStops stops, global::wxSharp.GraphicsMatrix matrix)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___CreateRadialGradientBrushDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_double_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_double_double_double_double_double_IntPtr_IntPtr));
            if (ReferenceEquals(stops, null))
                throw new global::System.ArgumentNullException("stops", "Cannot be null because it is a C++ reference (&).");
            var __arg5 = stops.__Instance;
            if (ReferenceEquals(matrix, null))
                throw new global::System.ArgumentNullException("matrix", "Cannot be null because it is a C++ reference (&).");
            var __arg6 = matrix.__Instance;
            var __ret = new global::wxSharp.GraphicsBrush.__Internal();
            ___CreateRadialGradientBrushDelegate(new IntPtr(&__ret), __Instance, startX, startY, endX, endY, radius, __arg5, __arg6);
            return global::wxSharp.GraphicsBrush.__CreateInstance(__ret);
        }

        public override global::wxSharp.GraphicsBitmap CreateBitmapFromNativeBitmap(global::System.IntPtr bitmap)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 4);
            var ___CreateBitmapFromNativeBitmapDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            var __ret = new global::wxSharp.GraphicsBitmap.__Internal();
            ___CreateBitmapFromNativeBitmapDelegate(new IntPtr(&__ret), __Instance, bitmap);
            return global::wxSharp.GraphicsBitmap.__CreateInstance(__ret);
        }

        public override global::wxSharp.GraphicsBitmap CreateSubBitmap(global::wxSharp.GraphicsBitmap bitmap, double x, double y, double w, double h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 26 * 4);
            var ___CreateSubBitmapDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_double_double_double_double));
            if (ReferenceEquals(bitmap, null))
                throw new global::System.ArgumentNullException("bitmap", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = bitmap.__Instance;
            var __ret = new global::wxSharp.GraphicsBitmap.__Internal();
            ___CreateSubBitmapDelegate(new IntPtr(&__ret), __Instance, __arg0, x, y, w, h);
            return global::wxSharp.GraphicsBitmap.__CreateInstance(__ret);
        }

        public override void GetVersion(ref int major, ref int minor, ref int micro)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 4);
            var ___GetVersionDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr_intPtr));
            fixed (int* __major0 = &major)
            {
                var __arg0 = __major0;
                fixed (int* __minor1 = &minor)
                {
                    var __arg1 = __minor1;
                    fixed (int* __micro2 = &micro)
                    {
                        var __arg2 = __micro2;
                        ___GetVersionDelegate(__Instance, __arg0, __arg1, __arg2);
                    }
                }
            }
        }
    }

    public unsafe partial class graphics
    {
        public partial struct __Internal
        {
        }

        public static global::wxSharp.GraphicsMatrix NullGraphicsMatrix
        {
            get
            {
                var __ptr = (global::wxSharp.GraphicsMatrix.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsMatrix");
                return global::wxSharp.GraphicsMatrix.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.GraphicsMatrix.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsMatrix");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.GraphicsMatrix.__Internal*) value.__Instance;
            }
        }

        public static global::wxSharp.GraphicsPen NullGraphicsPen
        {
            get
            {
                var __ptr = (global::wxSharp.GraphicsPen.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsPen");
                return global::wxSharp.GraphicsPen.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.GraphicsPen.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsPen");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.GraphicsPen.__Internal*) value.__Instance;
            }
        }

        public static global::wxSharp.GraphicsBrush NullGraphicsBrush
        {
            get
            {
                var __ptr = (global::wxSharp.GraphicsBrush.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsBrush");
                return global::wxSharp.GraphicsBrush.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.GraphicsBrush.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsBrush");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.GraphicsBrush.__Internal*) value.__Instance;
            }
        }

        public static global::wxSharp.GraphicsFont NullGraphicsFont
        {
            get
            {
                var __ptr = (global::wxSharp.GraphicsFont.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsFont");
                return global::wxSharp.GraphicsFont.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.GraphicsFont.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsFont");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.GraphicsFont.__Internal*) value.__Instance;
            }
        }

        public static global::wxSharp.GraphicsBitmap NullGraphicsBitmap
        {
            get
            {
                var __ptr = (global::wxSharp.GraphicsBitmap.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsBitmap");
                return global::wxSharp.GraphicsBitmap.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.GraphicsBitmap.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsBitmap");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.GraphicsBitmap.__Internal*) value.__Instance;
            }
        }

        public static global::wxSharp.GraphicsPath NullGraphicsPath
        {
            get
            {
                var __ptr = (global::wxSharp.GraphicsPath.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsPath");
                return global::wxSharp.GraphicsPath.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.GraphicsPath.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullGraphicsPath");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.GraphicsPath.__Internal*) value.__Instance;
            }
        }
    }
}
