// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum FlexSizerGrowMode : uint
    {
        NONE = 0,
        SPECIFIED = 1,
        ALL = 2
    }

    public unsafe partial class StaticBox
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StaticBox> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StaticBox>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.StaticBox __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.StaticBox(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.StaticBox __CreateInstance(global::wxSharp.StaticBox.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.StaticBox(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.StaticBox.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StaticBox.__Internal));
            *(global::wxSharp.StaticBox.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StaticBox(global::wxSharp.StaticBox.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StaticBox(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class SizerFlags : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_proportion;

            [FieldOffset(4)]
            internal int m_flags;

            [FieldOffset(8)]
            internal int m_borderInPixels;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxSizerFlagsC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int proportion);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxSizerFlagsC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxSizerFlags16GetDefaultBorderEv")]
            internal static extern int GetDefaultBorder();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxSizerFlags26GetDefaultBorderFractionalEv")]
            internal static extern float GetDefaultBorderFractional();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxSizerFlags13GetProportionEv")]
            internal static extern int GetProportion(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxSizerFlags8GetFlagsEv")]
            internal static extern int GetFlags(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxSizerFlags17GetBorderInPixelsEv")]
            internal static extern int GetBorderInPixels(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.SizerFlags> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.SizerFlags>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.SizerFlags __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerFlags(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.SizerFlags __CreateInstance(global::wxSharp.SizerFlags.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerFlags(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.SizerFlags.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerFlags.__Internal));
            *(global::wxSharp.SizerFlags.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SizerFlags(global::wxSharp.SizerFlags.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SizerFlags(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SizerFlags(int proportion)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerFlags.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, proportion);
        }

        public SizerFlags(global::wxSharp.SizerFlags _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerFlags.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::wxSharp.SizerFlags.__Internal*) __Instance) = *((global::wxSharp.SizerFlags.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.SizerFlags __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int GetProportion()
        {
            var __ret = __Internal.GetProportion(__Instance);
            return __ret;
        }

        public int GetFlags()
        {
            var __ret = __Internal.GetFlags(__Instance);
            return __ret;
        }

        public int GetBorderInPixels()
        {
            var __ret = __Internal.GetBorderInPixels(__Instance);
            return __ret;
        }

        public static int GetDefaultBorder()
        {
            var __ret = __Internal.GetDefaultBorder();
            return __ret;
        }

        public static float GetDefaultBorderFractional()
        {
            var __ret = __Internal.GetDefaultBorderFractional();
            return __ret;
        }
    }

    public unsafe partial class SizerSpacer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::wxSharp.Size.__Internal m_size;

            [FieldOffset(8)]
            internal byte m_isShown;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxSizerSpacerC2ERK6wxSize")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxSizerSpacerC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxSizerSpacer7SetSizeERK6wxSize")]
            internal static extern void SetSize(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxSizerSpacer4ShowEb")]
            internal static extern void Show(global::System.IntPtr __instance, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxSizerSpacer7IsShownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsShown(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.SizerSpacer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.SizerSpacer>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.SizerSpacer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerSpacer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.SizerSpacer __CreateInstance(global::wxSharp.SizerSpacer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerSpacer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.SizerSpacer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerSpacer.__Internal));
            *(global::wxSharp.SizerSpacer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SizerSpacer(global::wxSharp.SizerSpacer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SizerSpacer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public SizerSpacer(global::wxSharp.Size size)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerSpacer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public SizerSpacer(global::wxSharp.SizerSpacer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerSpacer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::wxSharp.SizerSpacer.__Internal*) __Instance) = *((global::wxSharp.SizerSpacer.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.SizerSpacer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.SetSize(__Instance, __arg0);
        }

        public void Show(bool show)
        {
            __Internal.Show(__Instance, show);
        }

        public bool IsShown()
        {
            var __ret = __Internal.IsShown(__Instance);
            return __ret;
        }
    }

    public unsafe partial class SizerItem : global::wxSharp.Object, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::wxSharp.SizerItem.Item m_kind;

            [FieldOffset(12)]
            internal global::System.IntPtr m_window;

            [FieldOffset(12)]
            internal global::System.IntPtr m_sizer;

            [FieldOffset(12)]
            internal global::System.IntPtr m_spacer;

            [FieldOffset(16)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(24)]
            internal global::wxSharp.Size.__Internal m_minSize;

            [FieldOffset(32)]
            internal int m_proportion;

            [FieldOffset(36)]
            internal int m_border;

            [FieldOffset(40)]
            internal int m_flag;

            [FieldOffset(44)]
            internal int m_id;

            [FieldOffset(48)]
            internal global::wxSharp.Rect.__Internal m_rect;

            [FieldOffset(64)]
            internal float m_ratio;

            [FieldOffset(68)]
            internal global::System.IntPtr m_userData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItemC2EP8wxWindowiiiP8wxObject")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr window, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItemC2EP8wxWindowRK12wxSizerFlags")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr window, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItemC2EP7wxSizeriiiP8wxObject")]
            internal static extern void ctor_1(global::System.IntPtr __instance, global::System.IntPtr sizer, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItemC2EP7wxSizerRK12wxSizerFlags")]
            internal static extern void ctor_1(global::System.IntPtr __instance, global::System.IntPtr sizer, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItemC2EiiiiiP8wxObject")]
            internal static extern void ctor(global::System.IntPtr __instance, int width, int height, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItemC2EiiRK12wxSizerFlags")]
            internal static extern void ctor(global::System.IntPtr __instance, int width, int height, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItemC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem11DetachSizerEv")]
            internal static extern void DetachSizer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem10GetMinSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetMinSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem20GetMinSizeWithBorderEv")]
            internal static extern global::wxSharp.Size.__Internal GetMinSizeWithBorder(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem10GetMaxSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetMaxSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem20GetMaxSizeWithBorderEv")]
            internal static extern global::wxSharp.Size.__Internal GetMaxSizeWithBorder(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem10SetMinSizeERK6wxSize")]
            internal static extern void SetMinSize(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem10SetMinSizeEii")]
            internal static extern void SetMinSize(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem11SetInitSizeEii")]
            internal static extern void SetInitSize(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem8SetRatioEii")]
            internal static extern void SetRatio(global::System.IntPtr __instance, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem8SetRatioERK6wxSize")]
            internal static extern void SetRatio(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem8SetRatioEf")]
            internal static extern void SetRatio(global::System.IntPtr __instance, float ratio);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem8GetRatioEv")]
            internal static extern float GetRatio(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem5SetIdEi")]
            internal static extern void SetId(global::System.IntPtr __instance, int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem5GetIdEv")]
            internal static extern int GetId(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem8IsWindowEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem7IsSizerEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSizer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem8IsSpacerEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSpacer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem13SetProportionEi")]
            internal static extern void SetProportion(global::System.IntPtr __instance, int proportion);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem13GetProportionEv")]
            internal static extern int GetProportion(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem7SetFlagEi")]
            internal static extern void SetFlag(global::System.IntPtr __instance, int flag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem7GetFlagEv")]
            internal static extern int GetFlag(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem9SetBorderEi")]
            internal static extern void SetBorder(global::System.IntPtr __instance, int border);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem9GetBorderEv")]
            internal static extern int GetBorder(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem9GetWindowEv")]
            internal static extern global::System.IntPtr GetWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem8GetSizerEv")]
            internal static extern global::System.IntPtr GetSizer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem9GetSpacerEv")]
            internal static extern global::wxSharp.Size.__Internal GetSpacer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem7IsShownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsShown(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem4ShowEb")]
            internal static extern void Show(global::System.IntPtr __instance, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem11SetUserDataEP8wxObject")]
            internal static extern void SetUserData(global::System.IntPtr __instance, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem11GetUserDataEv")]
            internal static extern global::System.IntPtr GetUserData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem11GetPositionEv")]
            internal static extern global::wxSharp.Point.__Internal GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem20InformFirstDirectionEiii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InformFirstDirection(global::System.IntPtr __instance, int direction, int size, int availableOtherDir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem12AssignWindowEP8wxWindow")]
            internal static extern void AssignWindow(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem11AssignSizerEP7wxSizer")]
            internal static extern void AssignSizer(global::System.IntPtr __instance, global::System.IntPtr sizer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem12AssignSpacerERK6wxSize")]
            internal static extern void AssignSpacer(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem12AssignSpacerEii")]
            internal static extern void AssignSpacer(global::System.IntPtr __instance, int w, int h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem4InitEv")]
            internal static extern void Init(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem4InitERK12wxSizerFlags")]
            internal static extern void Init(global::System.IntPtr __instance, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem4FreeEv")]
            internal static extern void Free(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem11DoSetWindowEP8wxWindow")]
            internal static extern void DoSetWindow(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem10DoSetSizerEP7wxSizer")]
            internal static extern void DoSetSizer(global::System.IntPtr __instance, global::System.IntPtr sizer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizerItem11DoSetSpacerERK6wxSize")]
            internal static extern void DoSetSpacer(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizerItem15AddBorderToSizeERK6wxSize")]
            internal static extern global::wxSharp.Size.__Internal AddBorderToSize(global::System.IntPtr __instance, global::System.IntPtr size);
        }

        public enum Item : uint
        {
            Item_None = 0,
            Item_Window = 1,
            Item_Sizer = 2,
            Item_Spacer = 3,
            Item_Max = 4
        }

        internal static new global::wxSharp.SizerItem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerItem(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.SizerItem __CreateInstance(global::wxSharp.SizerItem.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerItem(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.SizerItem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItem.__Internal));
            *(global::wxSharp.SizerItem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SizerItem(global::wxSharp.SizerItem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SizerItem(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public SizerItem(global::wxSharp.Window window, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __arg4 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            __Internal.ctor(__Instance, __arg0, proportion, flag, border, __arg4);
            SetupVTables(GetType().FullName == "wxSharp.SizerItem");
        }

        public SizerItem(global::wxSharp.Window window, global::wxSharp.SizerFlags flags)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = flags.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.SizerItem");
        }

        public SizerItem(global::wxSharp.Sizer sizer, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __arg4 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            __Internal.ctor_1(__Instance, __arg0, proportion, flag, border, __arg4);
            SetupVTables(GetType().FullName == "wxSharp.SizerItem");
        }

        public SizerItem(global::wxSharp.Sizer sizer, global::wxSharp.SizerFlags flags)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = flags.__Instance;
            __Internal.ctor_1(__Instance, __arg0, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.SizerItem");
        }

        public SizerItem(int width, int height, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg5 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            __Internal.ctor(__Instance, width, height, proportion, flag, border, __arg5);
            SetupVTables(GetType().FullName == "wxSharp.SizerItem");
        }

        public SizerItem(int width, int height, global::wxSharp.SizerFlags flags)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = flags.__Instance;
            __Internal.ctor(__Instance, width, height, __arg2);
            SetupVTables(GetType().FullName == "wxSharp.SizerItem");
        }

        public SizerItem()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.SizerItem");
        }

        public virtual void DeleteWindows()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___DeleteWindowsDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DeleteWindowsDelegate(__Instance);
        }

        public void DetachSizer()
        {
            __Internal.DetachSizer(__Instance);
        }

        public virtual global::wxSharp.Size GetSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___GetSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___GetSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.Size CalcMin()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___CalcMinDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___CalcMinDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public virtual void SetDimension(global::wxSharp.Point pos, global::wxSharp.Size size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___SetDimensionDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pos.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = size.__Instance;
            ___SetDimensionDelegate(__Instance, __arg0, __arg1);
        }

        public global::wxSharp.Size GetMinSize()
        {
            var __ret = __Internal.GetMinSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Size GetMinSizeWithBorder()
        {
            var __ret = __Internal.GetMinSizeWithBorder(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Size GetMaxSize()
        {
            var __ret = __Internal.GetMaxSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Size GetMaxSizeWithBorder()
        {
            var __ret = __Internal.GetMaxSizeWithBorder(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void SetMinSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.SetMinSize(__Instance, __arg0);
        }

        public void SetMinSize(int x, int y)
        {
            __Internal.SetMinSize(__Instance, x, y);
        }

        public void SetInitSize(int x, int y)
        {
            __Internal.SetInitSize(__Instance, x, y);
        }

        public void SetRatio(int width, int height)
        {
            __Internal.SetRatio(__Instance, width, height);
        }

        public void SetRatio(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.SetRatio(__Instance, __arg0);
        }

        public void SetRatio(float ratio)
        {
            __Internal.SetRatio(__Instance, ratio);
        }

        public float GetRatio()
        {
            var __ret = __Internal.GetRatio(__Instance);
            return __ret;
        }

        public virtual global::wxSharp.Rect GetRect()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___GetRectDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __ret = new global::wxSharp.Rect.__Internal();
            ___GetRectDelegate(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public void SetId(int id)
        {
            __Internal.SetId(__Instance, id);
        }

        public int GetId()
        {
            var __ret = __Internal.GetId(__Instance);
            return __ret;
        }

        public bool IsWindow()
        {
            var __ret = __Internal.IsWindow(__Instance);
            return __ret;
        }

        public bool IsSizer()
        {
            var __ret = __Internal.IsSizer(__Instance);
            return __ret;
        }

        public bool IsSpacer()
        {
            var __ret = __Internal.IsSpacer(__Instance);
            return __ret;
        }

        public void SetProportion(int proportion)
        {
            __Internal.SetProportion(__Instance, proportion);
        }

        public int GetProportion()
        {
            var __ret = __Internal.GetProportion(__Instance);
            return __ret;
        }

        public void SetFlag(int flag)
        {
            __Internal.SetFlag(__Instance, flag);
        }

        public int GetFlag()
        {
            var __ret = __Internal.GetFlag(__Instance);
            return __ret;
        }

        public void SetBorder(int border)
        {
            __Internal.SetBorder(__Instance, border);
        }

        public int GetBorder()
        {
            var __ret = __Internal.GetBorder(__Instance);
            return __ret;
        }

        public global::wxSharp.Window GetWindow()
        {
            var __ret = __Internal.GetWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Sizer GetSizer()
        {
            var __ret = __Internal.GetSizer(__Instance);
            global::wxSharp.Sizer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[__ret];
            else global::wxSharp.Sizer.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Size GetSpacer()
        {
            var __ret = __Internal.GetSpacer(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public bool IsShown()
        {
            var __ret = __Internal.IsShown(__Instance);
            return __ret;
        }

        public void Show(bool show)
        {
            __Internal.Show(__Instance, show);
        }

        public void SetUserData(global::wxSharp.IwxObject userData)
        {
            var __arg0 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            __Internal.SetUserData(__Instance, __arg0);
        }

        public global::wxSharp.IwxObject GetUserData()
        {
            var __ret = __Internal.GetUserData(__Instance);
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Point GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public bool InformFirstDirection(int direction, int size, int availableOtherDir)
        {
            var __ret = __Internal.InformFirstDirection(__Instance, direction, size, availableOtherDir);
            return __ret;
        }

        public void AssignWindow(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.AssignWindow(__Instance, __arg0);
        }

        public void AssignSizer(global::wxSharp.Sizer sizer)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            __Internal.AssignSizer(__Instance, __arg0);
        }

        public void AssignSpacer(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.AssignSpacer(__Instance, __arg0);
        }

        public void AssignSpacer(int w, int h)
        {
            __Internal.AssignSpacer(__Instance, w, h);
        }

        protected void Init()
        {
            __Internal.Init(__Instance);
        }

        protected void Init(global::wxSharp.SizerFlags flags)
        {
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = flags.__Instance;
            __Internal.Init(__Instance, __arg0);
        }

        protected void Free()
        {
            __Internal.Free(__Instance);
        }

        protected void DoSetWindow(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.DoSetWindow(__Instance, __arg0);
        }

        protected void DoSetSizer(global::wxSharp.Sizer sizer)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            __Internal.DoSetSizer(__Instance, __arg0);
        }

        protected void DoSetSpacer(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.DoSetSpacer(__Instance, __arg0);
        }

        protected global::wxSharp.Size AddBorderToSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            var __ret = __Internal.AddBorderToSize(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        protected global::wxSharp.SizerItem.Item m_kind
        {
            get
            {
                return ((global::wxSharp.SizerItem.__Internal*) __Instance)->m_kind;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_kind = value;
            }
        }

        protected global::wxSharp.Window m_window
        {
            get
            {
                global::wxSharp.Window __result0;
                if (((global::wxSharp.SizerItem.__Internal*) __Instance)->m_window == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(((global::wxSharp.SizerItem.__Internal*) __Instance)->m_window))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.SizerItem.__Internal*) __Instance)->m_window];
                else global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.SizerItem.__Internal*) __Instance)->m_window] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(((global::wxSharp.SizerItem.__Internal*) __Instance)->m_window);
                return __result0;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_window = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Sizer m_sizer
        {
            get
            {
                global::wxSharp.Sizer __result0;
                if (((global::wxSharp.SizerItem.__Internal*) __Instance)->m_sizer == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(((global::wxSharp.SizerItem.__Internal*) __Instance)->m_sizer))
                    __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[((global::wxSharp.SizerItem.__Internal*) __Instance)->m_sizer];
                else global::wxSharp.Sizer.NativeToManagedMap[((global::wxSharp.SizerItem.__Internal*) __Instance)->m_sizer] = __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(((global::wxSharp.SizerItem.__Internal*) __Instance)->m_sizer);
                return __result0;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_sizer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.SizerSpacer m_spacer
        {
            get
            {
                global::wxSharp.SizerSpacer __result0;
                if (((global::wxSharp.SizerItem.__Internal*) __Instance)->m_spacer == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.SizerSpacer.NativeToManagedMap.ContainsKey(((global::wxSharp.SizerItem.__Internal*) __Instance)->m_spacer))
                    __result0 = (global::wxSharp.SizerSpacer) global::wxSharp.SizerSpacer.NativeToManagedMap[((global::wxSharp.SizerItem.__Internal*) __Instance)->m_spacer];
                else __result0 = global::wxSharp.SizerSpacer.__CreateInstance(((global::wxSharp.SizerItem.__Internal*) __Instance)->m_spacer);
                return __result0;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_spacer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Point m_pos
        {
            get
            {
                return global::wxSharp.Point.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.SizerItem.__Internal*) __Instance)->m_pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_pos = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Size m_minSize
        {
            get
            {
                return global::wxSharp.Size.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.SizerItem.__Internal*) __Instance)->m_minSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_minSize = *(global::wxSharp.Size.__Internal*) value.__Instance;
            }
        }

        protected int m_proportion
        {
            get
            {
                return ((global::wxSharp.SizerItem.__Internal*) __Instance)->m_proportion;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_proportion = value;
            }
        }

        protected int m_border
        {
            get
            {
                return ((global::wxSharp.SizerItem.__Internal*) __Instance)->m_border;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_border = value;
            }
        }

        protected int m_flag
        {
            get
            {
                return ((global::wxSharp.SizerItem.__Internal*) __Instance)->m_flag;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_flag = value;
            }
        }

        protected int m_id
        {
            get
            {
                return ((global::wxSharp.SizerItem.__Internal*) __Instance)->m_id;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_id = value;
            }
        }

        protected global::wxSharp.Rect m_rect
        {
            get
            {
                return global::wxSharp.Rect.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.SizerItem.__Internal*) __Instance)->m_rect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_rect = *(global::wxSharp.Rect.__Internal*) value.__Instance;
            }
        }

        protected float m_ratio
        {
            get
            {
                return ((global::wxSharp.SizerItem.__Internal*) __Instance)->m_ratio;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_ratio = value;
            }
        }

        protected global::wxSharp.IwxObject m_userData
        {
            get
            {
                global::wxSharp.Object __result0;
                if (((global::wxSharp.SizerItem.__Internal*) __Instance)->m_userData == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(((global::wxSharp.SizerItem.__Internal*) __Instance)->m_userData))
                    __result0 = (global::wxSharp.Object) global::wxSharp.Object.NativeToManagedMap[((global::wxSharp.SizerItem.__Internal*) __Instance)->m_userData];
                else global::wxSharp.Object.NativeToManagedMap[((global::wxSharp.SizerItem.__Internal*) __Instance)->m_userData] = __result0 = (global::wxSharp.Object) global::wxSharp.Object.__CreateInstance(((global::wxSharp.SizerItem.__Internal*) __Instance)->m_userData);
                return __result0;
            }

            set
            {
                ((global::wxSharp.SizerItem.__Internal*)__Instance)->m_userData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // virtual ~wxSizerItem()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizerItem) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizerItem) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizerItem) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DeleteWindows()
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteWindowsDelegateInstance;

        private static void _DeleteWindowsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizerItem) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteWindows();
        }

        // wxSize GetSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizerItem) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize CalcMin()
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _CalcMinDelegateInstance;

        private static global::wxSharp.Size.__Internal _CalcMinDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizerItem) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CalcMin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void SetDimension( const wxPoint& pos, const wxSize& size )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_IntPtr _SetDimensionDelegateInstance;

        private static void _SetDimensionDelegateHook(global::System.IntPtr __instance, global::System.IntPtr pos, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizerItem) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Point __result0;
            if (pos == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Point.NativeToManagedMap.ContainsKey(pos))
                __result0 = (global::wxSharp.Point) global::wxSharp.Point.NativeToManagedMap[pos];
            else __result0 = global::wxSharp.Point.__CreateInstance(pos);
            global::wxSharp.Size __result1;
            if (size == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result1 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result1 = global::wxSharp.Size.__CreateInstance(size);
            __target.SetDimension(__result0, __result1);
        }

        // wxRect GetRect() { return m_rect; }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _GetRectDelegateInstance;

        private static void _GetRectDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizerItem) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetRect();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.Rect.__Internal*) @return = *(global::wxSharp.Rect.__Internal*) __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[8];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _DeleteWindowsDelegateInstance += _DeleteWindowsDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_DeleteWindowsDelegateInstance).ToPointer();
                _GetSizeDelegateInstance += _GetSizeDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetSizeDelegateInstance).ToPointer();
                _CalcMinDelegateInstance += _CalcMinDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_CalcMinDelegateInstance).ToPointer();
                _SetDimensionDelegateInstance += _SetDimensionDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_SetDimensionDelegateInstance).ToPointer();
                _GetRectDelegateInstance += _GetRectDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetRectDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(12 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(12 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class wxSizerItemListNode : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxNodeBase;

            [FieldOffset(4)]
            internal global::wxSharp.ListKeyValue.__Internal m_key;

            [FieldOffset(8)]
            internal global::System.IntPtr m_data;

            [FieldOffset(12)]
            internal global::System.IntPtr m_next;

            [FieldOffset(16)]
            internal global::System.IntPtr m_previous;

            [FieldOffset(20)]
            internal global::System.IntPtr m_list;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxwxSizerItemListNode7GetNextEv")]
            internal static extern global::System.IntPtr GetNext(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxwxSizerItemListNode11GetPreviousEv")]
            internal static extern global::System.IntPtr GetPrevious(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxwxSizerItemListNode7GetDataEv")]
            internal static extern global::System.IntPtr GetData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxwxSizerItemListNode7SetDataEP11wxSizerItem")]
            internal static extern void SetData(global::System.IntPtr __instance, global::System.IntPtr data);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.wxSizerItemListNode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.wxSizerItemListNode>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.wxSizerItemListNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.wxSizerItemListNode(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.wxSizerItemListNode __CreateInstance(global::wxSharp.wxSizerItemListNode.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.wxSizerItemListNode(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.wxSizerItemListNode.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.wxSizerItemListNode.__Internal));
            *(global::wxSharp.wxSizerItemListNode.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxSizerItemListNode(global::wxSharp.wxSizerItemListNode.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxSizerItemListNode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.wxSizerItemListNode __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.wxSizerItemListNode.__Internal*) __Instance)->vptr_wxNodeBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.wxSizerItemListNode GetNext()
        {
            var __ret = __Internal.GetNext(__Instance);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode GetPrevious()
        {
            var __ret = __Internal.GetPrevious(__Instance);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem GetData()
        {
            var __ret = __Internal.GetData(__Instance);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public void SetData(global::wxSharp.SizerItem data)
        {
            var __arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            __Internal.SetData(__Instance, __arg0);
        }

        protected virtual void DeleteData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___DeleteDataDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DeleteDataDelegate(__Instance);
        }

        #region Virtual table interop

        // 
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.wxSizerItemListNode) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // 
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteDataDelegateInstance;

        private static void _DeleteDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.wxSizerItemListNode) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteData();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _DeleteDataDelegateInstance += _DeleteDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DeleteDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class SizerItemList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxListBase;

            [FieldOffset(4)]
            internal uint m_count;

            [FieldOffset(8)]
            internal byte m_destroy;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nodeFirst;

            [FieldOffset(16)]
            internal global::System.IntPtr m_nodeLast;

            [FieldOffset(20)]
            internal global::wxSharp.KeyType m_keyType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemListC2E9wxKeyType")]
            internal static extern void ctor(global::System.IntPtr __instance, global::wxSharp.KeyType keyType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemListC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr list);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemListC2EmRKP11wxSizerItem")]
            internal static extern void ctor(global::System.IntPtr __instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemList8GetFirstEv")]
            internal static extern global::System.IntPtr GetFirst(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemList7GetLastEv")]
            internal static extern global::System.IntPtr GetLast(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemList4ItemEm")]
            internal static extern global::System.IntPtr item(global::System.IntPtr __instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList6AppendEP11wxSizerItem")]
            internal static extern global::System.IntPtr Append(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList6InsertEP11wxSizerItem")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList6InsertEmP11wxSizerItem")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, uint pos, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList6InsertEP21wxwxSizerItemListNodeP11wxSizerItem")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, global::System.IntPtr prev, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList6AppendElPv")]
            internal static extern global::System.IntPtr Append(global::System.IntPtr __instance, int key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList6AppendEPKwPv")]
            internal static extern global::System.IntPtr Append_1(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList10DetachNodeEP21wxwxSizerItemListNode")]
            internal static extern global::System.IntPtr DetachNode(global::System.IntPtr __instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList10DeleteNodeEP21wxwxSizerItemListNode")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteNode(global::System.IntPtr __instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList12DeleteObjectEP11wxSizerItem")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteObject(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList5EraseEP21wxwxSizerItemListNode")]
            internal static extern void Erase(global::System.IntPtr __instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemList4FindEPK11wxSizerItem")]
            internal static extern global::System.IntPtr Find(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemList6MemberEPK11wxSizerItem")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Member(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemList7IndexOfEP11wxSizerItem")]
            internal static extern int IndexOf(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList6resizeEmP11wxSizerItem")]
            internal static extern void resize(global::System.IntPtr __instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemList4sizeEv")]
            internal static extern uint size(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemList8max_sizeEv")]
            internal static extern uint max_size(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemList5emptyEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool empty(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList10push_frontERKP11wxSizerItem")]
            internal static extern void push_front(global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList9pop_frontEv")]
            internal static extern void pop_front(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList9push_backERKP11wxSizerItem")]
            internal static extern void push_back(global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList8pop_backEv")]
            internal static extern void pop_back(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList6assignEmRKP11wxSizerItem")]
            internal static extern void assign(global::System.IntPtr __instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList5clearEv")]
            internal static extern void clear(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList6removeERKP11wxSizerItem")]
            internal static extern void remove(global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxSizerItemList7reverseEv")]
            internal static extern void reverse(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxSizerItemListixEm")]
            internal static extern global::System.IntPtr OperatorSubscript(global::System.IntPtr __instance, uint index);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.SizerItemList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.SizerItemList>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.SizerItemList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerItemList(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.SizerItemList __CreateInstance(global::wxSharp.SizerItemList.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerItemList(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.SizerItemList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItemList.__Internal));
            global::wxSharp.SizerItemList.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private SizerItemList(global::wxSharp.SizerItemList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SizerItemList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public SizerItemList(global::wxSharp.KeyType keyType)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItemList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, keyType);
            SetupVTables(GetType().FullName == "wxSharp.SizerItemList");
        }

        public SizerItemList(global::wxSharp.SizerItemList list)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItemList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(list, null))
                throw new global::System.ArgumentNullException("list", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = list.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.SizerItemList");
        }

        public SizerItemList(uint n, global::wxSharp.SizerItem v)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizerItemList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg1 = v.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            __Internal.ctor(__Instance, n, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.SizerItemList");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.SizerItemList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.SizerItemList.__Internal*) __Instance)->vptr_wxListBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.wxSizerItemListNode GetFirst()
        {
            var __ret = __Internal.GetFirst(__Instance);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode GetLast()
        {
            var __ret = __Internal.GetLast(__Instance);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode item(uint index)
        {
            var __ret = __Internal.item(__Instance, index);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode Append(global::wxSharp.SizerItem @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Append(__Instance, __arg0);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode Insert(global::wxSharp.SizerItem @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Insert(__Instance, __arg0);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode Insert(uint pos, global::wxSharp.SizerItem @object)
        {
            var __arg1 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Insert(__Instance, pos, __arg1);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode Insert(global::wxSharp.wxSizerItemListNode prev, global::wxSharp.SizerItem @object)
        {
            var __arg0 = ReferenceEquals(prev, null) ? global::System.IntPtr.Zero : prev.__Instance;
            var __arg1 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Insert(__Instance, __arg0, __arg1);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode Append(int key, global::System.IntPtr @object)
        {
            var __ret = __Internal.Append(__Instance, key, @object);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode Append(string key, global::System.IntPtr @object)
        {
            var __ret = __Internal.Append_1(__Instance, key, @object);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxSizerItemListNode DetachNode(global::wxSharp.wxSizerItemListNode node)
        {
            var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = __Internal.DetachNode(__Instance, __arg0);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public bool DeleteNode(global::wxSharp.wxSizerItemListNode node)
        {
            var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = __Internal.DeleteNode(__Instance, __arg0);
            return __ret;
        }

        public bool DeleteObject(global::wxSharp.SizerItem @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.DeleteObject(__Instance, __arg0);
            return __ret;
        }

        public void Erase(global::wxSharp.wxSizerItemListNode it)
        {
            var __arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            __Internal.Erase(__Instance, __arg0);
        }

        public global::wxSharp.wxSizerItemListNode Find(global::wxSharp.SizerItem @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Find(__Instance, __arg0);
            global::wxSharp.wxSizerItemListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxSizerItemListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxSizerItemListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxSizerItemListNode) global::wxSharp.wxSizerItemListNode.__CreateInstance(__ret);
            return __result0;
        }

        public bool Member(global::wxSharp.SizerItem @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Member(__Instance, __arg0);
            return __ret;
        }

        public int IndexOf(global::wxSharp.SizerItem @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.IndexOf(__Instance, __arg0);
            return __ret;
        }

        public void resize(uint n, global::wxSharp.SizerItem v)
        {
            var __arg1 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            __Internal.resize(__Instance, n, __arg1);
        }

        public uint size()
        {
            var __ret = __Internal.size(__Instance);
            return __ret;
        }

        public uint max_size()
        {
            var __ret = __Internal.max_size(__Instance);
            return __ret;
        }

        public bool empty()
        {
            var __ret = __Internal.empty(__Instance);
            return __ret;
        }

        public void push_front(global::wxSharp.SizerItem v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = v.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            __Internal.push_front(__Instance, __arg0);
        }

        public void pop_front()
        {
            __Internal.pop_front(__Instance);
        }

        public void push_back(global::wxSharp.SizerItem v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = v.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            __Internal.push_back(__Instance, __arg0);
        }

        public void pop_back()
        {
            __Internal.pop_back(__Instance);
        }

        public void assign(uint n, global::wxSharp.SizerItem v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg1 = v.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            __Internal.assign(__Instance, n, __arg1);
        }

        public void clear()
        {
            __Internal.clear(__Instance);
        }

        public void remove(global::wxSharp.SizerItem v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = v.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            __Internal.remove(__Instance, __arg0);
        }

        public void reverse()
        {
            __Internal.reverse(__Instance);
        }

        public global::wxSharp.SizerItem this[uint index]
        {
            get
            {
                var __ret = __Internal.OperatorSubscript(__Instance, index);
                return global::wxSharp.SizerItem.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                global::wxSharp.SizerItem.__Internal.cctor(global::wxSharp.SizerItemList.__Internal.OperatorSubscript(__Instance, index), value.__Instance);
            }
        }

        #region Virtual table interop

        // wxSizerItemList
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizerItemList) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[1];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe abstract partial class Sizer : global::wxSharp.Object, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 72)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr vptr_wxClientDataContainer;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(16)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(20)]
            internal global::wxSharp.Size.__Internal m_size;

            [FieldOffset(28)]
            internal global::wxSharp.Size.__Internal m_minSize;

            [FieldOffset(36)]
            internal global::wxSharp.Point.__Internal m_position;

            [FieldOffset(44)]
            internal global::wxSharp.SizerItemList.__Internal m_children;

            [FieldOffset(68)]
            internal global::System.IntPtr m_containingWindow;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizerC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizerC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer3AddEP8wxWindowiiiP8wxObject")]
            internal static extern global::System.IntPtr Add(global::System.IntPtr __instance, global::System.IntPtr window, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer3AddEPS_iiiP8wxObject")]
            internal static extern global::System.IntPtr Add_1(global::System.IntPtr __instance, global::System.IntPtr sizer, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer3AddEiiiiiP8wxObject")]
            internal static extern global::System.IntPtr Add(global::System.IntPtr __instance, int width, int height, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer3AddEP8wxWindowRK12wxSizerFlags")]
            internal static extern global::System.IntPtr Add(global::System.IntPtr __instance, global::System.IntPtr window, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer3AddEPS_RK12wxSizerFlags")]
            internal static extern global::System.IntPtr Add_1(global::System.IntPtr __instance, global::System.IntPtr sizer, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer3AddEiiRK12wxSizerFlags")]
            internal static extern global::System.IntPtr Add(global::System.IntPtr __instance, int width, int height, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer3AddEP11wxSizerItem")]
            internal static extern global::System.IntPtr Add(global::System.IntPtr __instance, global::System.IntPtr item);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer16AddStretchSpacerEi")]
            internal static extern global::System.IntPtr AddStretchSpacer(global::System.IntPtr __instance, int prop);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer6InsertEmP8wxWindowiiiP8wxObject")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, uint index, global::System.IntPtr window, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer6InsertEmPS_iiiP8wxObject")]
            internal static extern global::System.IntPtr Insert_1(global::System.IntPtr __instance, uint index, global::System.IntPtr sizer, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer6InsertEmiiiiiP8wxObject")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, uint index, int width, int height, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer6InsertEmP8wxWindowRK12wxSizerFlags")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, uint index, global::System.IntPtr window, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer6InsertEmPS_RK12wxSizerFlags")]
            internal static extern global::System.IntPtr Insert_1(global::System.IntPtr __instance, uint index, global::System.IntPtr sizer, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer6InsertEmiiRK12wxSizerFlags")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, uint index, int width, int height, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer12InsertSpacerEmi")]
            internal static extern global::System.IntPtr InsertSpacer(global::System.IntPtr __instance, uint index, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer19InsertStretchSpacerEmi")]
            internal static extern global::System.IntPtr InsertStretchSpacer(global::System.IntPtr __instance, uint index, int prop);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7PrependEP8wxWindowiiiP8wxObject")]
            internal static extern global::System.IntPtr Prepend(global::System.IntPtr __instance, global::System.IntPtr window, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7PrependEPS_iiiP8wxObject")]
            internal static extern global::System.IntPtr Prepend_1(global::System.IntPtr __instance, global::System.IntPtr sizer, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7PrependEiiiiiP8wxObject")]
            internal static extern global::System.IntPtr Prepend(global::System.IntPtr __instance, int width, int height, int proportion, int flag, int border, global::System.IntPtr userData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7PrependEP8wxWindowRK12wxSizerFlags")]
            internal static extern global::System.IntPtr Prepend(global::System.IntPtr __instance, global::System.IntPtr window, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7PrependEPS_RK12wxSizerFlags")]
            internal static extern global::System.IntPtr Prepend_1(global::System.IntPtr __instance, global::System.IntPtr sizer, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7PrependEiiRK12wxSizerFlags")]
            internal static extern global::System.IntPtr Prepend(global::System.IntPtr __instance, int width, int height, global::System.IntPtr flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7PrependEP11wxSizerItem")]
            internal static extern global::System.IntPtr Prepend(global::System.IntPtr __instance, global::System.IntPtr item);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer13PrependSpacerEi")]
            internal static extern global::System.IntPtr PrependSpacer(global::System.IntPtr __instance, int size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer20PrependStretchSpacerEi")]
            internal static extern global::System.IntPtr PrependStretchSpacer(global::System.IntPtr __instance, int prop);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer19SetContainingWindowEP8wxWindow")]
            internal static extern void SetContainingWindow(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxSizer19GetContainingWindowEv")]
            internal static extern global::System.IntPtr GetContainingWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer10SetMinSizeEii")]
            internal static extern void SetMinSize(global::System.IntPtr __instance, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer10SetMinSizeERK6wxSize")]
            internal static extern void SetMinSize(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer14SetItemMinSizeEP8wxWindowii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetItemMinSize(global::System.IntPtr __instance, global::System.IntPtr window, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer14SetItemMinSizeEP8wxWindowRK6wxSize")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetItemMinSize(global::System.IntPtr __instance, global::System.IntPtr window, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer14SetItemMinSizeEPS_ii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetItemMinSize_1(global::System.IntPtr __instance, global::System.IntPtr sizer, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer14SetItemMinSizeEPS_RK6wxSize")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetItemMinSize_1(global::System.IntPtr __instance, global::System.IntPtr sizer, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer14SetItemMinSizeEmii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetItemMinSize(global::System.IntPtr __instance, uint index, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer14SetItemMinSizeEmRK6wxSize")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetItemMinSize(global::System.IntPtr __instance, uint index, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxSizer7GetSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxSizer11GetPositionEv")]
            internal static extern global::wxSharp.Point.__Internal GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer10GetMinSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetMinSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer24ComputeFittingClientSizeEP8wxWindow")]
            internal static extern global::wxSharp.Size.__Internal ComputeFittingClientSize(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer24ComputeFittingWindowSizeEP8wxWindow")]
            internal static extern global::wxSharp.Size.__Internal ComputeFittingWindowSize(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer3FitEP8wxWindow")]
            internal static extern global::wxSharp.Size.__Internal Fit(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer9FitInsideEP8wxWindow")]
            internal static extern void FitInside(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer12SetSizeHintsEP8wxWindow")]
            internal static extern void SetSizeHints(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer12SetDimensionERK7wxPointRK6wxSize")]
            internal static extern void SetDimension(global::System.IntPtr __instance, global::System.IntPtr pos, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer12SetDimensionEiiii")]
            internal static extern void SetDimension(global::System.IntPtr __instance, int x, int y, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxSizer12GetItemCountEv")]
            internal static extern uint GetItemCount(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxSizer7IsEmptyEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsEmpty(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7GetItemEP8wxWindowb")]
            internal static extern global::System.IntPtr GetItem(global::System.IntPtr __instance, global::System.IntPtr window, bool recursive);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7GetItemEPS_b")]
            internal static extern global::System.IntPtr GetItem_1(global::System.IntPtr __instance, global::System.IntPtr sizer, bool recursive);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer7GetItemEm")]
            internal static extern global::System.IntPtr GetItem(global::System.IntPtr __instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer11GetItemByIdEib")]
            internal static extern global::System.IntPtr GetItemById(global::System.IntPtr __instance, int id, bool recursive);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer4ShowEP8wxWindowbb")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Show(global::System.IntPtr __instance, global::System.IntPtr window, bool show, bool recursive);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer4ShowEPS_bb")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Show_1(global::System.IntPtr __instance, global::System.IntPtr sizer, bool show, bool recursive);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer4ShowEmb")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Show(global::System.IntPtr __instance, uint index, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer4HideEPS_b")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Hide(global::System.IntPtr __instance, global::System.IntPtr sizer, bool recursive);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer4HideEP8wxWindowb")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Hide_1(global::System.IntPtr __instance, global::System.IntPtr window, bool recursive);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer4HideEm")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Hide(global::System.IntPtr __instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxSizer7IsShownEP8wxWindow")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsShown(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxSizer7IsShownEPS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsShown_1(global::System.IntPtr __instance, global::System.IntPtr sizer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxSizer7IsShownEm")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsShown(global::System.IntPtr __instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer4ShowEb")]
            internal static extern void Show(global::System.IntPtr __instance, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxSizer16GetMaxClientSizeEP8wxWindow")]
            internal static extern global::wxSharp.Size.__Internal GetMaxClientSize(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer16GetMinClientSizeEP8wxWindow")]
            internal static extern global::wxSharp.Size.__Internal GetMinClientSize(global::System.IntPtr __instance, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxSizer14VirtualFitSizeEP8wxWindow")]
            internal static extern global::wxSharp.Size.__Internal VirtualFitSize(global::System.IntPtr __instance, global::System.IntPtr window);
        }

        internal static new global::wxSharp.Sizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerInternal(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Sizer __CreateInstance(global::wxSharp.Sizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.SizerInternal(native, skipVTables);
        }

        protected Sizer(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        protected Sizer()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Sizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.Sizer");
        }

        protected Sizer(global::wxSharp.Sizer _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Sizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.Sizer");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.IwxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.Sizer.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.SizerItem Add(global::wxSharp.Window window, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __arg4 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            var __ret = __Internal.Add(__Instance, __arg0, proportion, flag, border, __arg4);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Add(global::wxSharp.Sizer sizer, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __arg4 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            var __ret = __Internal.Add_1(__Instance, __arg0, proportion, flag, border, __arg4);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Add(int width, int height, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
        {
            var __arg5 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            var __ret = __Internal.Add(__Instance, width, height, proportion, flag, border, __arg5);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Add(global::wxSharp.Window window, global::wxSharp.SizerFlags flags)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = flags.__Instance;
            var __ret = __Internal.Add(__Instance, __arg0, __arg1);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Add(global::wxSharp.Sizer sizer, global::wxSharp.SizerFlags flags)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = flags.__Instance;
            var __ret = __Internal.Add_1(__Instance, __arg0, __arg1);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Add(int width, int height, global::wxSharp.SizerFlags flags)
        {
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = flags.__Instance;
            var __ret = __Internal.Add(__Instance, width, height, __arg2);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Add(global::wxSharp.SizerItem item)
        {
            var __arg0 = ReferenceEquals(item, null) ? global::System.IntPtr.Zero : item.__Instance;
            var __ret = __Internal.Add(__Instance, __arg0);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public virtual global::wxSharp.SizerItem AddSpacer(int size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___AddSpacerDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_int));
            var __ret = ___AddSpacerDelegate(__Instance, size);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem AddStretchSpacer(int prop)
        {
            var __ret = __Internal.AddStretchSpacer(__Instance, prop);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Insert(uint index, global::wxSharp.Window window, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
        {
            var __arg1 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __arg5 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            var __ret = __Internal.Insert(__Instance, index, __arg1, proportion, flag, border, __arg5);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Insert(uint index, global::wxSharp.Sizer sizer, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
        {
            var __arg1 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __arg5 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            var __ret = __Internal.Insert_1(__Instance, index, __arg1, proportion, flag, border, __arg5);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Insert(uint index, int width, int height, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
        {
            var __arg6 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            var __ret = __Internal.Insert(__Instance, index, width, height, proportion, flag, border, __arg6);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Insert(uint index, global::wxSharp.Window window, global::wxSharp.SizerFlags flags)
        {
            var __arg1 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = flags.__Instance;
            var __ret = __Internal.Insert(__Instance, index, __arg1, __arg2);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Insert(uint index, global::wxSharp.Sizer sizer, global::wxSharp.SizerFlags flags)
        {
            var __arg1 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = flags.__Instance;
            var __ret = __Internal.Insert_1(__Instance, index, __arg1, __arg2);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Insert(uint index, int width, int height, global::wxSharp.SizerFlags flags)
        {
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = flags.__Instance;
            var __ret = __Internal.Insert(__Instance, index, width, height, __arg3);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public virtual global::wxSharp.SizerItem Insert(uint index, global::wxSharp.SizerItem item)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___Insert_6Delegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr));
            var __arg1 = ReferenceEquals(item, null) ? global::System.IntPtr.Zero : item.__Instance;
            var __ret = ___Insert_6Delegate(__Instance, index, __arg1);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem InsertSpacer(uint index, int size)
        {
            var __ret = __Internal.InsertSpacer(__Instance, index, size);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem InsertStretchSpacer(uint index, int prop)
        {
            var __ret = __Internal.InsertStretchSpacer(__Instance, index, prop);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Prepend(global::wxSharp.Window window, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __arg4 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            var __ret = __Internal.Prepend(__Instance, __arg0, proportion, flag, border, __arg4);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Prepend(global::wxSharp.Sizer sizer, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __arg4 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            var __ret = __Internal.Prepend_1(__Instance, __arg0, proportion, flag, border, __arg4);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Prepend(int width, int height, int proportion, int flag, int border, global::wxSharp.IwxObject userData)
        {
            var __arg5 = ReferenceEquals(userData, null) ? global::System.IntPtr.Zero : userData.__PointerToObject;
            var __ret = __Internal.Prepend(__Instance, width, height, proportion, flag, border, __arg5);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Prepend(global::wxSharp.Window window, global::wxSharp.SizerFlags flags)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = flags.__Instance;
            var __ret = __Internal.Prepend(__Instance, __arg0, __arg1);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Prepend(global::wxSharp.Sizer sizer, global::wxSharp.SizerFlags flags)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = flags.__Instance;
            var __ret = __Internal.Prepend_1(__Instance, __arg0, __arg1);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Prepend(int width, int height, global::wxSharp.SizerFlags flags)
        {
            if (ReferenceEquals(flags, null))
                throw new global::System.ArgumentNullException("flags", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = flags.__Instance;
            var __ret = __Internal.Prepend(__Instance, width, height, __arg2);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem Prepend(global::wxSharp.SizerItem item)
        {
            var __arg0 = ReferenceEquals(item, null) ? global::System.IntPtr.Zero : item.__Instance;
            var __ret = __Internal.Prepend(__Instance, __arg0);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem PrependSpacer(int size)
        {
            var __ret = __Internal.PrependSpacer(__Instance, size);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem PrependStretchSpacer(int prop)
        {
            var __ret = __Internal.PrependStretchSpacer(__Instance, prop);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public void SetContainingWindow(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.SetContainingWindow(__Instance, __arg0);
        }

        public global::wxSharp.Window GetContainingWindow()
        {
            var __ret = __Internal.GetContainingWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public virtual bool Remove(global::wxSharp.Sizer sizer)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___RemoveDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __ret = ___RemoveDelegate(__Instance, __arg0);
            return __ret;
        }

        public virtual bool Remove(int index)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___Remove_1Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___Remove_1Delegate(__Instance, index);
            return __ret;
        }

        public virtual bool Detach(global::wxSharp.Window window)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___DetachDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = ___DetachDelegate(__Instance, __arg0);
            return __ret;
        }

        public virtual bool Detach(global::wxSharp.Sizer sizer)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___Detach_1Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __ret = ___Detach_1Delegate(__Instance, __arg0);
            return __ret;
        }

        public virtual bool Detach(int index)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___Detach_2Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___Detach_2Delegate(__Instance, index);
            return __ret;
        }

        public virtual bool Replace(global::wxSharp.Window oldwin, global::wxSharp.Window newwin, bool recursive)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___ReplaceDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool));
            var __arg0 = ReferenceEquals(oldwin, null) ? global::System.IntPtr.Zero : oldwin.__Instance;
            var __arg1 = ReferenceEquals(newwin, null) ? global::System.IntPtr.Zero : newwin.__Instance;
            var __ret = ___ReplaceDelegate(__Instance, __arg0, __arg1, recursive);
            return __ret;
        }

        public virtual bool Replace(global::wxSharp.Sizer oldsz, global::wxSharp.Sizer newsz, bool recursive)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___Replace_1Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool));
            var __arg0 = ReferenceEquals(oldsz, null) ? global::System.IntPtr.Zero : oldsz.__Instance;
            var __arg1 = ReferenceEquals(newsz, null) ? global::System.IntPtr.Zero : newsz.__Instance;
            var __ret = ___Replace_1Delegate(__Instance, __arg0, __arg1, recursive);
            return __ret;
        }

        public virtual bool Replace(uint index, global::wxSharp.SizerItem newitem)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___Replace_2Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_uint_IntPtr));
            var __arg1 = ReferenceEquals(newitem, null) ? global::System.IntPtr.Zero : newitem.__Instance;
            var __ret = ___Replace_2Delegate(__Instance, index, __arg1);
            return __ret;
        }

        public virtual void Clear(bool delete_windows)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___ClearDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool));
            ___ClearDelegate(__Instance, delete_windows);
        }

        public virtual void DeleteWindows()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___DeleteWindowsDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DeleteWindowsDelegate(__Instance);
        }

        public virtual bool InformFirstDirection(int _0, int _1, int _2)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___InformFirstDirectionDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int));
            var __ret = ___InformFirstDirectionDelegate(__Instance, _0, _1, _2);
            return __ret;
        }

        public void SetMinSize(int width, int height)
        {
            __Internal.SetMinSize(__Instance, width, height);
        }

        public void SetMinSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.SetMinSize(__Instance, __arg0);
        }

        public bool SetItemMinSize(global::wxSharp.Window window, int width, int height)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.SetItemMinSize(__Instance, __arg0, width, height);
            return __ret;
        }

        public bool SetItemMinSize(global::wxSharp.Window window, global::wxSharp.Size size)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = size.__Instance;
            var __ret = __Internal.SetItemMinSize(__Instance, __arg0, __arg1);
            return __ret;
        }

        public bool SetItemMinSize(global::wxSharp.Sizer sizer, int width, int height)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __ret = __Internal.SetItemMinSize_1(__Instance, __arg0, width, height);
            return __ret;
        }

        public bool SetItemMinSize(global::wxSharp.Sizer sizer, global::wxSharp.Size size)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = size.__Instance;
            var __ret = __Internal.SetItemMinSize_1(__Instance, __arg0, __arg1);
            return __ret;
        }

        public bool SetItemMinSize(uint index, int width, int height)
        {
            var __ret = __Internal.SetItemMinSize(__Instance, index, width, height);
            return __ret;
        }

        public bool SetItemMinSize(uint index, global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = size.__Instance;
            var __ret = __Internal.SetItemMinSize(__Instance, index, __arg1);
            return __ret;
        }

        public global::wxSharp.Size GetSize()
        {
            var __ret = __Internal.GetSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Point GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public global::wxSharp.Size GetMinSize()
        {
            var __ret = __Internal.GetMinSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public abstract global::wxSharp.Size CalcMin();

        public virtual void RepositionChildren(global::wxSharp.Size _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___RepositionChildrenDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            ___RepositionChildrenDelegate(__Instance, __arg0);
        }

        public virtual void RecalcSizes()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___RecalcSizesDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___RecalcSizesDelegate(__Instance);
        }

        public virtual void Layout()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___LayoutDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___LayoutDelegate(__Instance);
        }

        public global::wxSharp.Size ComputeFittingClientSize(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.ComputeFittingClientSize(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Size ComputeFittingWindowSize(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.ComputeFittingWindowSize(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Size Fit(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.Fit(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void FitInside(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.FitInside(__Instance, __arg0);
        }

        public void SetSizeHints(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.SetSizeHints(__Instance, __arg0);
        }

        public void SetDimension(global::wxSharp.Point pos, global::wxSharp.Size size)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pos.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = size.__Instance;
            __Internal.SetDimension(__Instance, __arg0, __arg1);
        }

        public void SetDimension(int x, int y, int width, int height)
        {
            __Internal.SetDimension(__Instance, x, y, width, height);
        }

        public uint GetItemCount()
        {
            var __ret = __Internal.GetItemCount(__Instance);
            return __ret;
        }

        public bool IsEmpty()
        {
            var __ret = __Internal.IsEmpty(__Instance);
            return __ret;
        }

        public global::wxSharp.SizerItem GetItem(global::wxSharp.Window window, bool recursive)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.GetItem(__Instance, __arg0, recursive);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem GetItem(global::wxSharp.Sizer sizer, bool recursive)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __ret = __Internal.GetItem_1(__Instance, __arg0, recursive);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem GetItem(uint index)
        {
            var __ret = __Internal.GetItem(__Instance, index);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.SizerItem GetItemById(int id, bool recursive)
        {
            var __ret = __Internal.GetItemById(__Instance, id, recursive);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        public bool Show(global::wxSharp.Window window, bool show, bool recursive)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.Show(__Instance, __arg0, show, recursive);
            return __ret;
        }

        public bool Show(global::wxSharp.Sizer sizer, bool show, bool recursive)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __ret = __Internal.Show_1(__Instance, __arg0, show, recursive);
            return __ret;
        }

        public bool Show(uint index, bool show)
        {
            var __ret = __Internal.Show(__Instance, index, show);
            return __ret;
        }

        public bool Hide(global::wxSharp.Sizer sizer, bool recursive)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __ret = __Internal.Hide(__Instance, __arg0, recursive);
            return __ret;
        }

        public bool Hide(global::wxSharp.Window window, bool recursive)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.Hide_1(__Instance, __arg0, recursive);
            return __ret;
        }

        public bool Hide(uint index)
        {
            var __ret = __Internal.Hide(__Instance, index);
            return __ret;
        }

        public bool IsShown(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.IsShown(__Instance, __arg0);
            return __ret;
        }

        public bool IsShown(global::wxSharp.Sizer sizer)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __ret = __Internal.IsShown_1(__Instance, __arg0);
            return __ret;
        }

        public bool IsShown(uint index)
        {
            var __ret = __Internal.IsShown(__Instance, index);
            return __ret;
        }

        public virtual void ShowItems(bool show)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 4);
            var ___ShowItemsDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool));
            ___ShowItemsDelegate(__Instance, show);
        }

        public void Show(bool show)
        {
            __Internal.Show(__Instance, show);
        }

        public virtual bool AreAnyItemsShown()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 23 * 4);
            var ___AreAnyItemsShownDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___AreAnyItemsShownDelegate(__Instance);
            return __ret;
        }

        protected global::wxSharp.Size GetMaxClientSize(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.GetMaxClientSize(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        protected global::wxSharp.Size GetMinClientSize(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.GetMinClientSize(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        protected global::wxSharp.Size VirtualFitSize(global::wxSharp.Window window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.VirtualFitSize(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        protected virtual void DoSetMinSize(int width, int height)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 24 * 4);
            var ___DoSetMinSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int));
            ___DoSetMinSizeDelegate(__Instance, width, height);
        }

        protected virtual bool DoSetItemMinSize(global::wxSharp.Window window, int width, int height)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 4);
            var ___DoSetItemMinSizeDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int));
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = ___DoSetItemMinSizeDelegate(__Instance, __arg0, width, height);
            return __ret;
        }

        protected virtual bool DoSetItemMinSize(global::wxSharp.Sizer sizer, int width, int height)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 26 * 4);
            var ___DoSetItemMinSize_1Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int));
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            var __ret = ___DoSetItemMinSize_1Delegate(__Instance, __arg0, width, height);
            return __ret;
        }

        protected virtual bool DoSetItemMinSize(uint index, int width, int height)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 4);
            var ___DoSetItemMinSize_2Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_uint_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_uint_int_int));
            var __ret = ___DoSetItemMinSize_2Delegate(__Instance, index, width, height);
            return __ret;
        }

        protected virtual global::wxSharp.SizerItem DoInsert(uint index, global::wxSharp.SizerItem item)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 4);
            var ___DoInsertDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr));
            var __arg1 = ReferenceEquals(item, null) ? global::System.IntPtr.Zero : item.__Instance;
            var __ret = ___DoInsertDelegate(__Instance, index, __arg1);
            global::wxSharp.SizerItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[__ret];
            else global::wxSharp.SizerItem.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.Size m_size
        {
            get
            {
                return global::wxSharp.Size.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Sizer.__Internal*) __Instance)->m_size));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Sizer.__Internal*)__Instance)->m_size = *(global::wxSharp.Size.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Size m_minSize
        {
            get
            {
                return global::wxSharp.Size.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Sizer.__Internal*) __Instance)->m_minSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Sizer.__Internal*)__Instance)->m_minSize = *(global::wxSharp.Size.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Point m_position
        {
            get
            {
                return global::wxSharp.Point.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Sizer.__Internal*) __Instance)->m_position));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Sizer.__Internal*)__Instance)->m_position = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.SizerItemList m_children
        {
            get
            {
                return global::wxSharp.SizerItemList.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Sizer.__Internal*) __Instance)->m_children));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Sizer.__Internal*)__Instance)->m_children = *(global::wxSharp.SizerItemList.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Window m_containingWindow
        {
            get
            {
                global::wxSharp.Window __result0;
                if (((global::wxSharp.Sizer.__Internal*) __Instance)->m_containingWindow == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(((global::wxSharp.Sizer.__Internal*) __Instance)->m_containingWindow))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.Sizer.__Internal*) __Instance)->m_containingWindow];
                else global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.Sizer.__Internal*) __Instance)->m_containingWindow] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(((global::wxSharp.Sizer.__Internal*) __Instance)->m_containingWindow);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Sizer.__Internal*)__Instance)->m_containingWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // virtual ~wxSizer()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem *AddSpacer(int size)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_int _AddSpacerDelegateInstance;

        private static global::System.IntPtr _AddSpacerDelegateHook(global::System.IntPtr __instance, int size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AddSpacer(size);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem* Insert(size_t index, wxSizerItem *item)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _Insert_6DelegateInstance;

        private static global::System.IntPtr _Insert_6DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.Insert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool Remove( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _RemoveDelegateInstance;

        private static bool _RemoveDelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Remove(__result0);
        }

        // bool Remove( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Remove_1DelegateInstance;

        private static bool _Remove_1DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Remove(index);
        }

        // bool Detach( wxWindow *window )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _DetachDelegateInstance;

        private static bool _DetachDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _Detach_1DelegateInstance;

        private static bool _Detach_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Detach_2DelegateInstance;

        private static bool _Detach_2DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Detach(index);
        }

        // bool Replace( wxWindow *oldwin, wxWindow *newwin, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _ReplaceDelegateInstance;

        private static bool _ReplaceDelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldwin, global::System.IntPtr newwin, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (oldwin == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(oldwin))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[oldwin];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(oldwin, skipVTables: true);
            global::wxSharp.Window __result1;
            if (newwin == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(newwin))
                __result1 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[newwin];
            else __result1 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(newwin, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( wxSizer *oldsz, wxSizer *newsz, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _Replace_1DelegateInstance;

        private static bool _Replace_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldsz, global::System.IntPtr newsz, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (oldsz == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(oldsz))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[oldsz];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(oldsz, skipVTables: true);
            global::wxSharp.Sizer __result1;
            if (newsz == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(newsz))
                __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[newsz];
            else __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(newsz, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( size_t index, wxSizerItem *newitem )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_IntPtr _Replace_2DelegateInstance;

        private static bool _Replace_2DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr newitem)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (newitem == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(newitem))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[newitem];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(newitem, skipVTables: true);
            return __target.Replace(index, __result1);
        }

        // void Clear( bool delete_windows = false )
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ClearDelegateInstance;

        private static void _ClearDelegateHook(global::System.IntPtr __instance, bool delete_windows)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Clear(delete_windows);
        }

        // void DeleteWindows()
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteWindowsDelegateInstance;

        private static void _DeleteWindowsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteWindows();
        }

        // bool InformFirstDirection( int WXUNUSED(direction), int WXUNUSED(size), int WXUNUSED(availableOtherDir) ) { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _InformFirstDirectionDelegateInstance;

        private static bool _InformFirstDirectionDelegateHook(global::System.IntPtr __instance, int _0, int _1, int _2)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.InformFirstDirection(_0, _1, _2);
        }

        // wxSize CalcMin() = 0
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _CalcMinDelegateInstance;

        private static global::wxSharp.Size.__Internal _CalcMinDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CalcMin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void RepositionChildren(const wxSize& WXUNUSED(minSize)) { RecalcSizes(); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _RepositionChildrenDelegateInstance;

        private static void _RepositionChildrenDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[_0];
            else __result0 = global::wxSharp.Size.__CreateInstance(_0);
            __target.RepositionChildren(__result0);
        }

        // void RecalcSizes()
        private static global::wxSharp.Delegates.Action_IntPtr _RecalcSizesDelegateInstance;

        private static void _RecalcSizesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RecalcSizes();
        }

        // void Layout()
        private static global::wxSharp.Delegates.Action_IntPtr _LayoutDelegateInstance;

        private static void _LayoutDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Layout();
        }

        // void ShowItems (bool show)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ShowItemsDelegateInstance;

        private static void _ShowItemsDelegateHook(global::System.IntPtr __instance, bool show)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ShowItems(show);
        }

        // bool AreAnyItemsShown() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AreAnyItemsShownDelegateInstance;

        private static bool _AreAnyItemsShownDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AreAnyItemsShown();
        }

        // void DoSetMinSize( int width, int height )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetMinSizeDelegateInstance;

        private static void _DoSetMinSizeDelegateHook(global::System.IntPtr __instance, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetMinSize(width, height);
        }

        // bool DoSetItemMinSize( wxWindow *window, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSizeDelegateInstance;

        private static bool _DoSetItemMinSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( wxSizer *sizer, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSize_1DelegateInstance;

        private static bool _DoSetItemMinSize_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( size_t index, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_int_int _DoSetItemMinSize_2DelegateInstance;

        private static bool _DoSetItemMinSize_2DelegateHook(global::System.IntPtr __instance, uint index, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoSetItemMinSize(index, width, height);
        }

        // wxSizerItem* DoInsert(size_t index, wxSizerItem *item)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _DoInsertDelegateInstance;

        private static global::System.IntPtr _DoInsertDelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.DoInsert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void *DoGetClientData() const
        private static global::System.IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Sizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[28];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _AddSpacerDelegateInstance += _AddSpacerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_AddSpacerDelegateInstance).ToPointer();
                _Insert_6DelegateInstance += _Insert_6DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Insert_6DelegateInstance).ToPointer();
                _RemoveDelegateInstance += _RemoveDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_RemoveDelegateInstance).ToPointer();
                _Remove_1DelegateInstance += _Remove_1DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_Remove_1DelegateInstance).ToPointer();
                _DetachDelegateInstance += _DetachDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_DetachDelegateInstance).ToPointer();
                _Detach_1DelegateInstance += _Detach_1DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_Detach_1DelegateInstance).ToPointer();
                _Detach_2DelegateInstance += _Detach_2DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_Detach_2DelegateInstance).ToPointer();
                _ReplaceDelegateInstance += _ReplaceDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_ReplaceDelegateInstance).ToPointer();
                _Replace_1DelegateInstance += _Replace_1DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Replace_1DelegateInstance).ToPointer();
                _Replace_2DelegateInstance += _Replace_2DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_Replace_2DelegateInstance).ToPointer();
                _ClearDelegateInstance += _ClearDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ClearDelegateInstance).ToPointer();
                _DeleteWindowsDelegateInstance += _DeleteWindowsDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_DeleteWindowsDelegateInstance).ToPointer();
                _InformFirstDirectionDelegateInstance += _InformFirstDirectionDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_InformFirstDirectionDelegateInstance).ToPointer();
                _CalcMinDelegateInstance += _CalcMinDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_CalcMinDelegateInstance).ToPointer();
                _RepositionChildrenDelegateInstance += _RepositionChildrenDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_RepositionChildrenDelegateInstance).ToPointer();
                _RecalcSizesDelegateInstance += _RecalcSizesDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_RecalcSizesDelegateInstance).ToPointer();
                _LayoutDelegateInstance += _LayoutDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_LayoutDelegateInstance).ToPointer();
                _ShowItemsDelegateInstance += _ShowItemsDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_ShowItemsDelegateInstance).ToPointer();
                _AreAnyItemsShownDelegateInstance += _AreAnyItemsShownDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AreAnyItemsShownDelegateInstance).ToPointer();
                _DoSetMinSizeDelegateInstance += _DoSetMinSizeDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_DoSetMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSizeDelegateInstance += _DoSetItemMinSizeDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSize_1DelegateInstance += _DoSetItemMinSize_1DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_1DelegateInstance).ToPointer();
                _DoSetItemMinSize_2DelegateInstance += _DoSetItemMinSize_2DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_2DelegateInstance).ToPointer();
                _DoInsertDelegateInstance += _DoInsertDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_DoInsertDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = _Thunks[8];
                    *(void**) (vfptr0 + 44) = _Thunks[9];
                    *(void**) (vfptr0 + 48) = _Thunks[10];
                    *(void**) (vfptr0 + 52) = _Thunks[11];
                    *(void**) (vfptr0 + 56) = _Thunks[12];
                    *(void**) (vfptr0 + 60) = _Thunks[13];
                    *(void**) (vfptr0 + 64) = _Thunks[14];
                    *(void**) (vfptr0 + 68) = _Thunks[15];
                    *(void**) (vfptr0 + 72) = _Thunks[16];
                    *(void**) (vfptr0 + 76) = _Thunks[17];
                    *(void**) (vfptr0 + 80) = _Thunks[18];
                    *(void**) (vfptr0 + 84) = _Thunks[19];
                    *(void**) (vfptr0 + 88) = _Thunks[20];
                    *(void**) (vfptr0 + 92) = _Thunks[21];
                    *(void**) (vfptr0 + 96) = _Thunks[22];
                    *(void**) (vfptr0 + 100) = _Thunks[23];
                    *(void**) (vfptr0 + 104) = _Thunks[24];
                    *(void**) (vfptr0 + 108) = _Thunks[25];
                    *(void**) (vfptr0 + 112) = _Thunks[26];
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = _Thunks[27];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class GridSizer : global::wxSharp.Sizer, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr vptr_wxClientDataContainer;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(16)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(20)]
            internal global::wxSharp.Size.__Internal m_size;

            [FieldOffset(28)]
            internal global::wxSharp.Size.__Internal m_minSize;

            [FieldOffset(36)]
            internal global::wxSharp.Point.__Internal m_position;

            [FieldOffset(44)]
            internal global::wxSharp.SizerItemList.__Internal m_children;

            [FieldOffset(68)]
            internal global::System.IntPtr m_containingWindow;

            [FieldOffset(72)]
            internal int m_rows;

            [FieldOffset(76)]
            internal int m_cols;

            [FieldOffset(80)]
            internal int m_vgap;

            [FieldOffset(84)]
            internal int m_hgap;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizerC2Eiii")]
            internal static extern void ctor(global::System.IntPtr __instance, int cols, int vgap, int hgap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizerC2EiRK6wxSize")]
            internal static extern void ctor(global::System.IntPtr __instance, int cols, global::System.IntPtr gap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizerC2Eiiii")]
            internal static extern void ctor(global::System.IntPtr __instance, int rows, int cols, int vgap, int hgap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizerC2EiiRK6wxSize")]
            internal static extern void ctor(global::System.IntPtr __instance, int rows, int cols, global::System.IntPtr gap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizerC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizer7SetColsEi")]
            internal static extern void SetCols(global::System.IntPtr __instance, int cols);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizer7SetRowsEi")]
            internal static extern void SetRows(global::System.IntPtr __instance, int rows);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizer7SetVGapEi")]
            internal static extern void SetVGap(global::System.IntPtr __instance, int gap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizer7SetHGapEi")]
            internal static extern void SetHGap(global::System.IntPtr __instance, int gap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxGridSizer7GetColsEv")]
            internal static extern int GetCols(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxGridSizer7GetRowsEv")]
            internal static extern int GetRows(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxGridSizer7GetVGapEv")]
            internal static extern int GetVGap(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxGridSizer7GetHGapEv")]
            internal static extern int GetHGap(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxGridSizer21GetEffectiveColsCountEv")]
            internal static extern int GetEffectiveColsCount(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxGridSizer21GetEffectiveRowsCountEv")]
            internal static extern int GetEffectiveRowsCount(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxGridSizer12CalcRowsColsERiS0_")]
            internal static extern int CalcRowsCols(global::System.IntPtr __instance, int* rows, int* cols);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxGridSizer13SetItemBoundsEP11wxSizerItemiiii")]
            internal static extern void SetItemBounds(global::System.IntPtr __instance, global::System.IntPtr item, int x, int y, int w, int h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxGridSizer8CalcColsEv")]
            internal static extern int CalcCols(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxGridSizer8CalcRowsEv")]
            internal static extern int CalcRows(global::System.IntPtr __instance);
        }

        internal static new global::wxSharp.GridSizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GridSizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GridSizer __CreateInstance(global::wxSharp.GridSizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GridSizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GridSizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GridSizer.__Internal));
            global::wxSharp.GridSizer.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GridSizer(global::wxSharp.GridSizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GridSizer(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public GridSizer(int cols, int vgap, int hgap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GridSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, cols, vgap, hgap);
            SetupVTables(GetType().FullName == "wxSharp.GridSizer");
        }

        public GridSizer(int cols, global::wxSharp.Size gap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GridSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(gap, null))
                throw new global::System.ArgumentNullException("gap", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = gap.__Instance;
            __Internal.ctor(__Instance, cols, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.GridSizer");
        }

        public GridSizer(int rows, int cols, int vgap, int hgap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GridSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, rows, cols, vgap, hgap);
            SetupVTables(GetType().FullName == "wxSharp.GridSizer");
        }

        public GridSizer(int rows, int cols, global::wxSharp.Size gap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GridSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(gap, null))
                throw new global::System.ArgumentNullException("gap", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = gap.__Instance;
            __Internal.ctor(__Instance, rows, cols, __arg2);
            SetupVTables(GetType().FullName == "wxSharp.GridSizer");
        }

        public GridSizer(global::wxSharp.GridSizer _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GridSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GridSizer");
        }

        public override void RepositionChildren(global::wxSharp.Size minSize)
        {
            base.RepositionChildren(minSize);
        }

        public override global::wxSharp.Size CalcMin()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___CalcMinDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___CalcMinDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void SetCols(int cols)
        {
            __Internal.SetCols(__Instance, cols);
        }

        public void SetRows(int rows)
        {
            __Internal.SetRows(__Instance, rows);
        }

        public void SetVGap(int gap)
        {
            __Internal.SetVGap(__Instance, gap);
        }

        public void SetHGap(int gap)
        {
            __Internal.SetHGap(__Instance, gap);
        }

        public int GetCols()
        {
            var __ret = __Internal.GetCols(__Instance);
            return __ret;
        }

        public int GetRows()
        {
            var __ret = __Internal.GetRows(__Instance);
            return __ret;
        }

        public int GetVGap()
        {
            var __ret = __Internal.GetVGap(__Instance);
            return __ret;
        }

        public int GetHGap()
        {
            var __ret = __Internal.GetHGap(__Instance);
            return __ret;
        }

        public int GetEffectiveColsCount()
        {
            var __ret = __Internal.GetEffectiveColsCount(__Instance);
            return __ret;
        }

        public int GetEffectiveRowsCount()
        {
            var __ret = __Internal.GetEffectiveRowsCount(__Instance);
            return __ret;
        }

        public int CalcRowsCols(ref int rows, ref int cols)
        {
            fixed (int* __rows0 = &rows)
            {
                var __arg0 = __rows0;
                fixed (int* __cols1 = &cols)
                {
                    var __arg1 = __cols1;
                    var __ret = __Internal.CalcRowsCols(__Instance, __arg0, __arg1);
                    return __ret;
                }
            }
        }

        protected override global::wxSharp.SizerItem DoInsert(uint index, global::wxSharp.SizerItem item)
        {
            return base.DoInsert(index, item);
        }

        protected void SetItemBounds(global::wxSharp.SizerItem item, int x, int y, int w, int h)
        {
            var __arg0 = ReferenceEquals(item, null) ? global::System.IntPtr.Zero : item.__Instance;
            __Internal.SetItemBounds(__Instance, __arg0, x, y, w, h);
        }

        protected int CalcCols()
        {
            var __ret = __Internal.CalcCols(__Instance);
            return __ret;
        }

        protected int CalcRows()
        {
            var __ret = __Internal.CalcRows(__Instance);
            return __ret;
        }

        protected int m_rows
        {
            get
            {
                return ((global::wxSharp.GridSizer.__Internal*) __Instance)->m_rows;
            }

            set
            {
                ((global::wxSharp.GridSizer.__Internal*)__Instance)->m_rows = value;
            }
        }

        protected int m_cols
        {
            get
            {
                return ((global::wxSharp.GridSizer.__Internal*) __Instance)->m_cols;
            }

            set
            {
                ((global::wxSharp.GridSizer.__Internal*)__Instance)->m_cols = value;
            }
        }

        protected int m_vgap
        {
            get
            {
                return ((global::wxSharp.GridSizer.__Internal*) __Instance)->m_vgap;
            }

            set
            {
                ((global::wxSharp.GridSizer.__Internal*)__Instance)->m_vgap = value;
            }
        }

        protected int m_hgap
        {
            get
            {
                return ((global::wxSharp.GridSizer.__Internal*) __Instance)->m_hgap;
            }

            set
            {
                ((global::wxSharp.GridSizer.__Internal*)__Instance)->m_hgap = value;
            }
        }

        #region Virtual table interop

        // wxGridSizer
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem *AddSpacer(int size)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_int _AddSpacerDelegateInstance;

        private static global::System.IntPtr _AddSpacerDelegateHook(global::System.IntPtr __instance, int size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AddSpacer(size);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem* Insert(size_t index, wxSizerItem *item)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _Insert_6DelegateInstance;

        private static global::System.IntPtr _Insert_6DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.Insert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool Remove( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _RemoveDelegateInstance;

        private static bool _RemoveDelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Remove(__result0);
        }

        // bool Remove( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Remove_1DelegateInstance;

        private static bool _Remove_1DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Remove(index);
        }

        // bool Detach( wxWindow *window )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _DetachDelegateInstance;

        private static bool _DetachDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _Detach_1DelegateInstance;

        private static bool _Detach_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Detach_2DelegateInstance;

        private static bool _Detach_2DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Detach(index);
        }

        // bool Replace( wxWindow *oldwin, wxWindow *newwin, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _ReplaceDelegateInstance;

        private static bool _ReplaceDelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldwin, global::System.IntPtr newwin, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (oldwin == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(oldwin))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[oldwin];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(oldwin, skipVTables: true);
            global::wxSharp.Window __result1;
            if (newwin == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(newwin))
                __result1 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[newwin];
            else __result1 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(newwin, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( wxSizer *oldsz, wxSizer *newsz, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _Replace_1DelegateInstance;

        private static bool _Replace_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldsz, global::System.IntPtr newsz, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (oldsz == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(oldsz))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[oldsz];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(oldsz, skipVTables: true);
            global::wxSharp.Sizer __result1;
            if (newsz == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(newsz))
                __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[newsz];
            else __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(newsz, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( size_t index, wxSizerItem *newitem )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_IntPtr _Replace_2DelegateInstance;

        private static bool _Replace_2DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr newitem)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (newitem == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(newitem))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[newitem];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(newitem, skipVTables: true);
            return __target.Replace(index, __result1);
        }

        // void Clear( bool delete_windows = false )
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ClearDelegateInstance;

        private static void _ClearDelegateHook(global::System.IntPtr __instance, bool delete_windows)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Clear(delete_windows);
        }

        // void DeleteWindows()
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteWindowsDelegateInstance;

        private static void _DeleteWindowsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteWindows();
        }

        // bool InformFirstDirection( int WXUNUSED(direction), int WXUNUSED(size), int WXUNUSED(availableOtherDir) ) { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _InformFirstDirectionDelegateInstance;

        private static bool _InformFirstDirectionDelegateHook(global::System.IntPtr __instance, int _0, int _1, int _2)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.InformFirstDirection(_0, _1, _2);
        }

        // wxSize CalcMin() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _CalcMinDelegateInstance;

        private static global::wxSharp.Size.__Internal _CalcMinDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CalcMin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void RepositionChildren(const wxSize& minSize) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _RepositionChildrenDelegateInstance;

        private static void _RepositionChildrenDelegateHook(global::System.IntPtr __instance, global::System.IntPtr minSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (minSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(minSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[minSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(minSize);
            __target.RepositionChildren(__result0);
        }

        // void RecalcSizes()
        private static global::wxSharp.Delegates.Action_IntPtr _RecalcSizesDelegateInstance;

        private static void _RecalcSizesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RecalcSizes();
        }

        // void Layout()
        private static global::wxSharp.Delegates.Action_IntPtr _LayoutDelegateInstance;

        private static void _LayoutDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Layout();
        }

        // void ShowItems (bool show)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ShowItemsDelegateInstance;

        private static void _ShowItemsDelegateHook(global::System.IntPtr __instance, bool show)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ShowItems(show);
        }

        // bool AreAnyItemsShown() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AreAnyItemsShownDelegateInstance;

        private static bool _AreAnyItemsShownDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AreAnyItemsShown();
        }

        // void DoSetMinSize( int width, int height )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetMinSizeDelegateInstance;

        private static void _DoSetMinSizeDelegateHook(global::System.IntPtr __instance, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetMinSize(width, height);
        }

        // bool DoSetItemMinSize( wxWindow *window, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSizeDelegateInstance;

        private static bool _DoSetItemMinSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( wxSizer *sizer, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSize_1DelegateInstance;

        private static bool _DoSetItemMinSize_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( size_t index, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_int_int _DoSetItemMinSize_2DelegateInstance;

        private static bool _DoSetItemMinSize_2DelegateHook(global::System.IntPtr __instance, uint index, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoSetItemMinSize(index, width, height);
        }

        // wxSizerItem *DoInsert(size_t index, wxSizerItem *item) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _DoInsertDelegateInstance;

        private static global::System.IntPtr _DoInsertDelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.DoInsert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void *DoGetClientData() const
        private static global::System.IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[28];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _AddSpacerDelegateInstance += _AddSpacerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_AddSpacerDelegateInstance).ToPointer();
                _Insert_6DelegateInstance += _Insert_6DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Insert_6DelegateInstance).ToPointer();
                _RemoveDelegateInstance += _RemoveDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_RemoveDelegateInstance).ToPointer();
                _Remove_1DelegateInstance += _Remove_1DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_Remove_1DelegateInstance).ToPointer();
                _DetachDelegateInstance += _DetachDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_DetachDelegateInstance).ToPointer();
                _Detach_1DelegateInstance += _Detach_1DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_Detach_1DelegateInstance).ToPointer();
                _Detach_2DelegateInstance += _Detach_2DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_Detach_2DelegateInstance).ToPointer();
                _ReplaceDelegateInstance += _ReplaceDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_ReplaceDelegateInstance).ToPointer();
                _Replace_1DelegateInstance += _Replace_1DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Replace_1DelegateInstance).ToPointer();
                _Replace_2DelegateInstance += _Replace_2DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_Replace_2DelegateInstance).ToPointer();
                _ClearDelegateInstance += _ClearDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ClearDelegateInstance).ToPointer();
                _DeleteWindowsDelegateInstance += _DeleteWindowsDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_DeleteWindowsDelegateInstance).ToPointer();
                _InformFirstDirectionDelegateInstance += _InformFirstDirectionDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_InformFirstDirectionDelegateInstance).ToPointer();
                _CalcMinDelegateInstance += _CalcMinDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_CalcMinDelegateInstance).ToPointer();
                _RepositionChildrenDelegateInstance += _RepositionChildrenDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_RepositionChildrenDelegateInstance).ToPointer();
                _RecalcSizesDelegateInstance += _RecalcSizesDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_RecalcSizesDelegateInstance).ToPointer();
                _LayoutDelegateInstance += _LayoutDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_LayoutDelegateInstance).ToPointer();
                _ShowItemsDelegateInstance += _ShowItemsDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_ShowItemsDelegateInstance).ToPointer();
                _AreAnyItemsShownDelegateInstance += _AreAnyItemsShownDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AreAnyItemsShownDelegateInstance).ToPointer();
                _DoSetMinSizeDelegateInstance += _DoSetMinSizeDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_DoSetMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSizeDelegateInstance += _DoSetItemMinSizeDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSize_1DelegateInstance += _DoSetItemMinSize_1DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_1DelegateInstance).ToPointer();
                _DoSetItemMinSize_2DelegateInstance += _DoSetItemMinSize_2DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_2DelegateInstance).ToPointer();
                _DoInsertDelegateInstance += _DoInsertDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_DoInsertDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = _Thunks[8];
                    *(void**) (vfptr0 + 44) = _Thunks[9];
                    *(void**) (vfptr0 + 48) = _Thunks[10];
                    *(void**) (vfptr0 + 52) = _Thunks[11];
                    *(void**) (vfptr0 + 56) = _Thunks[12];
                    *(void**) (vfptr0 + 60) = _Thunks[13];
                    *(void**) (vfptr0 + 64) = _Thunks[14];
                    *(void**) (vfptr0 + 68) = _Thunks[15];
                    *(void**) (vfptr0 + 72) = _Thunks[16];
                    *(void**) (vfptr0 + 76) = _Thunks[17];
                    *(void**) (vfptr0 + 80) = _Thunks[18];
                    *(void**) (vfptr0 + 84) = _Thunks[19];
                    *(void**) (vfptr0 + 88) = _Thunks[20];
                    *(void**) (vfptr0 + 92) = _Thunks[21];
                    *(void**) (vfptr0 + 96) = _Thunks[22];
                    *(void**) (vfptr0 + 100) = _Thunks[23];
                    *(void**) (vfptr0 + 104) = _Thunks[24];
                    *(void**) (vfptr0 + 108) = _Thunks[25];
                    *(void**) (vfptr0 + 112) = _Thunks[26];
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = _Thunks[27];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class FlexGridSizer : global::wxSharp.GridSizer, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 168)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr vptr_wxClientDataContainer;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(16)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(20)]
            internal global::wxSharp.Size.__Internal m_size;

            [FieldOffset(28)]
            internal global::wxSharp.Size.__Internal m_minSize;

            [FieldOffset(36)]
            internal global::wxSharp.Point.__Internal m_position;

            [FieldOffset(44)]
            internal global::wxSharp.SizerItemList.__Internal m_children;

            [FieldOffset(68)]
            internal global::System.IntPtr m_containingWindow;

            [FieldOffset(72)]
            internal int m_rows;

            [FieldOffset(76)]
            internal int m_cols;

            [FieldOffset(80)]
            internal int m_vgap;

            [FieldOffset(84)]
            internal int m_hgap;

            [FieldOffset(88)]
            internal global::wxSharp.ArrayInt.__Internal m_rowHeights;

            [FieldOffset(100)]
            internal global::wxSharp.ArrayInt.__Internal m_colWidths;

            [FieldOffset(112)]
            internal global::wxSharp.ArrayInt.__Internal m_growableRows;

            [FieldOffset(124)]
            internal global::wxSharp.ArrayInt.__Internal m_growableCols;

            [FieldOffset(136)]
            internal global::wxSharp.ArrayInt.__Internal m_growableRowsProportions;

            [FieldOffset(148)]
            internal global::wxSharp.ArrayInt.__Internal m_growableColsProportions;

            [FieldOffset(160)]
            internal int m_flexDirection;

            [FieldOffset(164)]
            internal global::wxSharp.FlexSizerGrowMode m_growMode;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizerC2Eiii")]
            internal static extern void ctor(global::System.IntPtr __instance, int cols, int vgap, int hgap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizerC2EiRK6wxSize")]
            internal static extern void ctor(global::System.IntPtr __instance, int cols, global::System.IntPtr gap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizerC2Eiiii")]
            internal static extern void ctor(global::System.IntPtr __instance, int rows, int cols, int vgap, int hgap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizerC2EiiRK6wxSize")]
            internal static extern void ctor(global::System.IntPtr __instance, int rows, int cols, global::System.IntPtr gap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer14AddGrowableRowEmi")]
            internal static extern void AddGrowableRow(global::System.IntPtr __instance, uint idx, int proportion);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer17RemoveGrowableRowEm")]
            internal static extern void RemoveGrowableRow(global::System.IntPtr __instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer14AddGrowableColEmi")]
            internal static extern void AddGrowableCol(global::System.IntPtr __instance, uint idx, int proportion);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer17RemoveGrowableColEm")]
            internal static extern void RemoveGrowableCol(global::System.IntPtr __instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer13IsRowGrowableEm")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsRowGrowable(global::System.IntPtr __instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer13IsColGrowableEm")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsColGrowable(global::System.IntPtr __instance, uint idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer20SetFlexibleDirectionEi")]
            internal static extern void SetFlexibleDirection(global::System.IntPtr __instance, int direction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxFlexGridSizer20GetFlexibleDirectionEv")]
            internal static extern int GetFlexibleDirection(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer22SetNonFlexibleGrowModeE19wxFlexSizerGrowMode")]
            internal static extern void SetNonFlexibleGrowMode(global::System.IntPtr __instance, global::wxSharp.FlexSizerGrowMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxFlexGridSizer22GetNonFlexibleGrowModeEv")]
            internal static extern global::wxSharp.FlexSizerGrowMode GetNonFlexibleGrowMode(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer22AdjustForFlexDirectionEv")]
            internal static extern void AdjustForFlexDirection(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer18AdjustForGrowablesERK6wxSizeS2_")]
            internal static extern void AdjustForGrowables(global::System.IntPtr __instance, global::System.IntPtr sz, global::System.IntPtr minSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxFlexGridSizer20FindWidthsAndHeightsEii")]
            internal static extern global::wxSharp.Size.__Internal FindWidthsAndHeights(global::System.IntPtr __instance, int nrows, int ncols);
        }

        internal static new global::wxSharp.FlexGridSizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.FlexGridSizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.FlexGridSizer __CreateInstance(global::wxSharp.FlexGridSizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.FlexGridSizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.FlexGridSizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.FlexGridSizer.__Internal));
            *(global::wxSharp.FlexGridSizer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FlexGridSizer(global::wxSharp.FlexGridSizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FlexGridSizer(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public FlexGridSizer(int cols, int vgap, int hgap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.FlexGridSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, cols, vgap, hgap);
            SetupVTables(GetType().FullName == "wxSharp.FlexGridSizer");
        }

        public FlexGridSizer(int cols, global::wxSharp.Size gap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.FlexGridSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(gap, null))
                throw new global::System.ArgumentNullException("gap", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = gap.__Instance;
            __Internal.ctor(__Instance, cols, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.FlexGridSizer");
        }

        public FlexGridSizer(int rows, int cols, int vgap, int hgap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.FlexGridSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, rows, cols, vgap, hgap);
            SetupVTables(GetType().FullName == "wxSharp.FlexGridSizer");
        }

        public FlexGridSizer(int rows, int cols, global::wxSharp.Size gap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.FlexGridSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(gap, null))
                throw new global::System.ArgumentNullException("gap", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = gap.__Instance;
            __Internal.ctor(__Instance, rows, cols, __arg2);
            SetupVTables(GetType().FullName == "wxSharp.FlexGridSizer");
        }

        public void AddGrowableRow(uint idx, int proportion)
        {
            __Internal.AddGrowableRow(__Instance, idx, proportion);
        }

        public void RemoveGrowableRow(uint idx)
        {
            __Internal.RemoveGrowableRow(__Instance, idx);
        }

        public void AddGrowableCol(uint idx, int proportion)
        {
            __Internal.AddGrowableCol(__Instance, idx, proportion);
        }

        public void RemoveGrowableCol(uint idx)
        {
            __Internal.RemoveGrowableCol(__Instance, idx);
        }

        public bool IsRowGrowable(uint idx)
        {
            var __ret = __Internal.IsRowGrowable(__Instance, idx);
            return __ret;
        }

        public bool IsColGrowable(uint idx)
        {
            var __ret = __Internal.IsColGrowable(__Instance, idx);
            return __ret;
        }

        public void SetFlexibleDirection(int direction)
        {
            __Internal.SetFlexibleDirection(__Instance, direction);
        }

        public int GetFlexibleDirection()
        {
            var __ret = __Internal.GetFlexibleDirection(__Instance);
            return __ret;
        }

        public void SetNonFlexibleGrowMode(global::wxSharp.FlexSizerGrowMode mode)
        {
            __Internal.SetNonFlexibleGrowMode(__Instance, mode);
        }

        public global::wxSharp.FlexSizerGrowMode GetNonFlexibleGrowMode()
        {
            var __ret = __Internal.GetNonFlexibleGrowMode(__Instance);
            return __ret;
        }

        public override void RepositionChildren(global::wxSharp.Size minSize)
        {
            base.RepositionChildren(minSize);
        }

        public override global::wxSharp.Size CalcMin()
        {
            return base.CalcMin();
        }

        protected void AdjustForFlexDirection()
        {
            __Internal.AdjustForFlexDirection(__Instance);
        }

        protected void AdjustForGrowables(global::wxSharp.Size sz, global::wxSharp.Size minSize)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            if (ReferenceEquals(minSize, null))
                throw new global::System.ArgumentNullException("minSize", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = minSize.__Instance;
            __Internal.AdjustForGrowables(__Instance, __arg0, __arg1);
        }

        protected global::wxSharp.Size FindWidthsAndHeights(int nrows, int ncols)
        {
            var __ret = __Internal.FindWidthsAndHeights(__Instance, nrows, ncols);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        protected int m_flexDirection
        {
            get
            {
                return ((global::wxSharp.FlexGridSizer.__Internal*) __Instance)->m_flexDirection;
            }

            set
            {
                ((global::wxSharp.FlexGridSizer.__Internal*)__Instance)->m_flexDirection = value;
            }
        }

        protected global::wxSharp.FlexSizerGrowMode m_growMode
        {
            get
            {
                return ((global::wxSharp.FlexGridSizer.__Internal*) __Instance)->m_growMode;
            }

            set
            {
                ((global::wxSharp.FlexGridSizer.__Internal*)__Instance)->m_growMode = value;
            }
        }

        #region Virtual table interop

        // virtual ~wxFlexGridSizer()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem *AddSpacer(int size)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_int _AddSpacerDelegateInstance;

        private static global::System.IntPtr _AddSpacerDelegateHook(global::System.IntPtr __instance, int size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AddSpacer(size);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem* Insert(size_t index, wxSizerItem *item)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _Insert_6DelegateInstance;

        private static global::System.IntPtr _Insert_6DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.Insert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool Remove( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _RemoveDelegateInstance;

        private static bool _RemoveDelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Remove(__result0);
        }

        // bool Remove( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Remove_1DelegateInstance;

        private static bool _Remove_1DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Remove(index);
        }

        // bool Detach( wxWindow *window )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _DetachDelegateInstance;

        private static bool _DetachDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _Detach_1DelegateInstance;

        private static bool _Detach_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Detach_2DelegateInstance;

        private static bool _Detach_2DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Detach(index);
        }

        // bool Replace( wxWindow *oldwin, wxWindow *newwin, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _ReplaceDelegateInstance;

        private static bool _ReplaceDelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldwin, global::System.IntPtr newwin, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (oldwin == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(oldwin))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[oldwin];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(oldwin, skipVTables: true);
            global::wxSharp.Window __result1;
            if (newwin == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(newwin))
                __result1 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[newwin];
            else __result1 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(newwin, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( wxSizer *oldsz, wxSizer *newsz, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _Replace_1DelegateInstance;

        private static bool _Replace_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldsz, global::System.IntPtr newsz, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (oldsz == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(oldsz))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[oldsz];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(oldsz, skipVTables: true);
            global::wxSharp.Sizer __result1;
            if (newsz == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(newsz))
                __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[newsz];
            else __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(newsz, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( size_t index, wxSizerItem *newitem )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_IntPtr _Replace_2DelegateInstance;

        private static bool _Replace_2DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr newitem)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (newitem == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(newitem))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[newitem];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(newitem, skipVTables: true);
            return __target.Replace(index, __result1);
        }

        // void Clear( bool delete_windows = false )
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ClearDelegateInstance;

        private static void _ClearDelegateHook(global::System.IntPtr __instance, bool delete_windows)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Clear(delete_windows);
        }

        // void DeleteWindows()
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteWindowsDelegateInstance;

        private static void _DeleteWindowsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteWindows();
        }

        // bool InformFirstDirection( int WXUNUSED(direction), int WXUNUSED(size), int WXUNUSED(availableOtherDir) ) { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _InformFirstDirectionDelegateInstance;

        private static bool _InformFirstDirectionDelegateHook(global::System.IntPtr __instance, int _0, int _1, int _2)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.InformFirstDirection(_0, _1, _2);
        }

        // wxSize CalcMin() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _CalcMinDelegateInstance;

        private static global::wxSharp.Size.__Internal _CalcMinDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CalcMin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void RepositionChildren(const wxSize& minSize) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _RepositionChildrenDelegateInstance;

        private static void _RepositionChildrenDelegateHook(global::System.IntPtr __instance, global::System.IntPtr minSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (minSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(minSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[minSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(minSize);
            __target.RepositionChildren(__result0);
        }

        // void RecalcSizes()
        private static global::wxSharp.Delegates.Action_IntPtr _RecalcSizesDelegateInstance;

        private static void _RecalcSizesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RecalcSizes();
        }

        // void Layout()
        private static global::wxSharp.Delegates.Action_IntPtr _LayoutDelegateInstance;

        private static void _LayoutDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Layout();
        }

        // void ShowItems (bool show)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ShowItemsDelegateInstance;

        private static void _ShowItemsDelegateHook(global::System.IntPtr __instance, bool show)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ShowItems(show);
        }

        // bool AreAnyItemsShown() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AreAnyItemsShownDelegateInstance;

        private static bool _AreAnyItemsShownDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AreAnyItemsShown();
        }

        // void DoSetMinSize( int width, int height )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetMinSizeDelegateInstance;

        private static void _DoSetMinSizeDelegateHook(global::System.IntPtr __instance, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetMinSize(width, height);
        }

        // bool DoSetItemMinSize( wxWindow *window, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSizeDelegateInstance;

        private static bool _DoSetItemMinSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( wxSizer *sizer, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSize_1DelegateInstance;

        private static bool _DoSetItemMinSize_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( size_t index, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_int_int _DoSetItemMinSize_2DelegateInstance;

        private static bool _DoSetItemMinSize_2DelegateHook(global::System.IntPtr __instance, uint index, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoSetItemMinSize(index, width, height);
        }

        // wxSizerItem *DoInsert(size_t index, wxSizerItem *item) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _DoInsertDelegateInstance;

        private static global::System.IntPtr _DoInsertDelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.DoInsert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void *DoGetClientData() const
        private static global::System.IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FlexGridSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[28];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _AddSpacerDelegateInstance += _AddSpacerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_AddSpacerDelegateInstance).ToPointer();
                _Insert_6DelegateInstance += _Insert_6DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Insert_6DelegateInstance).ToPointer();
                _RemoveDelegateInstance += _RemoveDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_RemoveDelegateInstance).ToPointer();
                _Remove_1DelegateInstance += _Remove_1DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_Remove_1DelegateInstance).ToPointer();
                _DetachDelegateInstance += _DetachDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_DetachDelegateInstance).ToPointer();
                _Detach_1DelegateInstance += _Detach_1DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_Detach_1DelegateInstance).ToPointer();
                _Detach_2DelegateInstance += _Detach_2DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_Detach_2DelegateInstance).ToPointer();
                _ReplaceDelegateInstance += _ReplaceDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_ReplaceDelegateInstance).ToPointer();
                _Replace_1DelegateInstance += _Replace_1DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Replace_1DelegateInstance).ToPointer();
                _Replace_2DelegateInstance += _Replace_2DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_Replace_2DelegateInstance).ToPointer();
                _ClearDelegateInstance += _ClearDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ClearDelegateInstance).ToPointer();
                _DeleteWindowsDelegateInstance += _DeleteWindowsDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_DeleteWindowsDelegateInstance).ToPointer();
                _InformFirstDirectionDelegateInstance += _InformFirstDirectionDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_InformFirstDirectionDelegateInstance).ToPointer();
                _CalcMinDelegateInstance += _CalcMinDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_CalcMinDelegateInstance).ToPointer();
                _RepositionChildrenDelegateInstance += _RepositionChildrenDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_RepositionChildrenDelegateInstance).ToPointer();
                _RecalcSizesDelegateInstance += _RecalcSizesDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_RecalcSizesDelegateInstance).ToPointer();
                _LayoutDelegateInstance += _LayoutDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_LayoutDelegateInstance).ToPointer();
                _ShowItemsDelegateInstance += _ShowItemsDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_ShowItemsDelegateInstance).ToPointer();
                _AreAnyItemsShownDelegateInstance += _AreAnyItemsShownDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AreAnyItemsShownDelegateInstance).ToPointer();
                _DoSetMinSizeDelegateInstance += _DoSetMinSizeDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_DoSetMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSizeDelegateInstance += _DoSetItemMinSizeDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSize_1DelegateInstance += _DoSetItemMinSize_1DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_1DelegateInstance).ToPointer();
                _DoSetItemMinSize_2DelegateInstance += _DoSetItemMinSize_2DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_2DelegateInstance).ToPointer();
                _DoInsertDelegateInstance += _DoInsertDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_DoInsertDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = _Thunks[8];
                    *(void**) (vfptr0 + 44) = _Thunks[9];
                    *(void**) (vfptr0 + 48) = _Thunks[10];
                    *(void**) (vfptr0 + 52) = _Thunks[11];
                    *(void**) (vfptr0 + 56) = _Thunks[12];
                    *(void**) (vfptr0 + 60) = _Thunks[13];
                    *(void**) (vfptr0 + 64) = _Thunks[14];
                    *(void**) (vfptr0 + 68) = _Thunks[15];
                    *(void**) (vfptr0 + 72) = _Thunks[16];
                    *(void**) (vfptr0 + 76) = _Thunks[17];
                    *(void**) (vfptr0 + 80) = _Thunks[18];
                    *(void**) (vfptr0 + 84) = _Thunks[19];
                    *(void**) (vfptr0 + 88) = _Thunks[20];
                    *(void**) (vfptr0 + 92) = _Thunks[21];
                    *(void**) (vfptr0 + 96) = _Thunks[22];
                    *(void**) (vfptr0 + 100) = _Thunks[23];
                    *(void**) (vfptr0 + 104) = _Thunks[24];
                    *(void**) (vfptr0 + 108) = _Thunks[25];
                    *(void**) (vfptr0 + 112) = _Thunks[26];
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = _Thunks[27];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class BoxSizer : global::wxSharp.Sizer, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr vptr_wxClientDataContainer;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(16)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(20)]
            internal global::wxSharp.Size.__Internal m_size;

            [FieldOffset(28)]
            internal global::wxSharp.Size.__Internal m_minSize;

            [FieldOffset(36)]
            internal global::wxSharp.Point.__Internal m_position;

            [FieldOffset(44)]
            internal global::wxSharp.SizerItemList.__Internal m_children;

            [FieldOffset(68)]
            internal global::System.IntPtr m_containingWindow;

            [FieldOffset(72)]
            internal int m_orient;

            [FieldOffset(76)]
            internal int m_totalProportion;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxBoxSizerC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, global::wxSharp.SizerOrientation orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxBoxSizerC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxBoxSizer14GetOrientationEv")]
            internal static extern global::wxSharp.SizerOrientation GetOrientation(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxBoxSizer10IsVerticalEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsVertical(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxBoxSizer14SetOrientationEi")]
            internal static extern void SetOrientation(global::System.IntPtr __instance, global::wxSharp.SizerOrientation orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxBoxSizer17GetSizeInMajorDirERK6wxSize")]
            internal static extern int GetSizeInMajorDir(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxBoxSizer17GetSizeInMinorDirERK6wxSize")]
            internal static extern int GetSizeInMinorDir(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxBoxSizer18SizeFromMajorMinorEii")]
            internal static extern global::wxSharp.Size.__Internal SizeFromMajorMinor(global::System.IntPtr __instance, int major, int minor);
        }

        internal static new global::wxSharp.BoxSizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.BoxSizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.BoxSizer __CreateInstance(global::wxSharp.BoxSizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.BoxSizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.BoxSizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.BoxSizer.__Internal));
            global::wxSharp.BoxSizer.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private BoxSizer(global::wxSharp.BoxSizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected BoxSizer(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public BoxSizer(global::wxSharp.SizerOrientation orient)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.BoxSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, orient);
            SetupVTables(GetType().FullName == "wxSharp.BoxSizer");
        }

        public BoxSizer(global::wxSharp.BoxSizer _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.BoxSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.BoxSizer");
        }

        public override global::wxSharp.SizerItem AddSpacer(int size)
        {
            return base.AddSpacer(size);
        }

        public global::wxSharp.SizerOrientation GetOrientation()
        {
            var __ret = __Internal.GetOrientation(__Instance);
            return __ret;
        }

        public bool IsVertical()
        {
            var __ret = __Internal.IsVertical(__Instance);
            return __ret;
        }

        public void SetOrientation(global::wxSharp.SizerOrientation orient)
        {
            __Internal.SetOrientation(__Instance, orient);
        }

        public override global::wxSharp.Size CalcMin()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___CalcMinDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___CalcMinDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public override void RepositionChildren(global::wxSharp.Size minSize)
        {
            base.RepositionChildren(minSize);
        }

        public override bool InformFirstDirection(int direction, int size, int availableOtherDir)
        {
            return base.InformFirstDirection(direction, size, availableOtherDir);
        }

        protected override global::wxSharp.SizerItem DoInsert(uint index, global::wxSharp.SizerItem item)
        {
            return base.DoInsert(index, item);
        }

        protected int GetSizeInMajorDir(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            var __ret = __Internal.GetSizeInMajorDir(__Instance, __arg0);
            return __ret;
        }

        protected int GetSizeInMinorDir(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            var __ret = __Internal.GetSizeInMinorDir(__Instance, __arg0);
            return __ret;
        }

        protected global::wxSharp.Size SizeFromMajorMinor(int major, int minor)
        {
            var __ret = __Internal.SizeFromMajorMinor(__Instance, major, minor);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        protected int m_orient
        {
            get
            {
                return ((global::wxSharp.BoxSizer.__Internal*) __Instance)->m_orient;
            }

            set
            {
                ((global::wxSharp.BoxSizer.__Internal*)__Instance)->m_orient = value;
            }
        }

        protected int m_totalProportion
        {
            get
            {
                return ((global::wxSharp.BoxSizer.__Internal*) __Instance)->m_totalProportion;
            }

            set
            {
                ((global::wxSharp.BoxSizer.__Internal*)__Instance)->m_totalProportion = value;
            }
        }

        #region Virtual table interop

        // wxBoxSizer
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem *AddSpacer(int size) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_int _AddSpacerDelegateInstance;

        private static global::System.IntPtr _AddSpacerDelegateHook(global::System.IntPtr __instance, int size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AddSpacer(size);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem* Insert(size_t index, wxSizerItem *item)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _Insert_6DelegateInstance;

        private static global::System.IntPtr _Insert_6DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.Insert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool Remove( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _RemoveDelegateInstance;

        private static bool _RemoveDelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Remove(__result0);
        }

        // bool Remove( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Remove_1DelegateInstance;

        private static bool _Remove_1DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Remove(index);
        }

        // bool Detach( wxWindow *window )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _DetachDelegateInstance;

        private static bool _DetachDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _Detach_1DelegateInstance;

        private static bool _Detach_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Detach_2DelegateInstance;

        private static bool _Detach_2DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Detach(index);
        }

        // bool Replace( wxWindow *oldwin, wxWindow *newwin, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _ReplaceDelegateInstance;

        private static bool _ReplaceDelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldwin, global::System.IntPtr newwin, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (oldwin == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(oldwin))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[oldwin];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(oldwin, skipVTables: true);
            global::wxSharp.Window __result1;
            if (newwin == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(newwin))
                __result1 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[newwin];
            else __result1 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(newwin, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( wxSizer *oldsz, wxSizer *newsz, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _Replace_1DelegateInstance;

        private static bool _Replace_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldsz, global::System.IntPtr newsz, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (oldsz == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(oldsz))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[oldsz];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(oldsz, skipVTables: true);
            global::wxSharp.Sizer __result1;
            if (newsz == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(newsz))
                __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[newsz];
            else __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(newsz, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( size_t index, wxSizerItem *newitem )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_IntPtr _Replace_2DelegateInstance;

        private static bool _Replace_2DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr newitem)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (newitem == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(newitem))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[newitem];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(newitem, skipVTables: true);
            return __target.Replace(index, __result1);
        }

        // void Clear( bool delete_windows = false )
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ClearDelegateInstance;

        private static void _ClearDelegateHook(global::System.IntPtr __instance, bool delete_windows)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Clear(delete_windows);
        }

        // void DeleteWindows()
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteWindowsDelegateInstance;

        private static void _DeleteWindowsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteWindows();
        }

        // bool InformFirstDirection(int direction, int size, int availableOtherDir) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _InformFirstDirectionDelegateInstance;

        private static bool _InformFirstDirectionDelegateHook(global::System.IntPtr __instance, int direction, int size, int availableOtherDir)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.InformFirstDirection(direction, size, availableOtherDir);
        }

        // wxSize CalcMin() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _CalcMinDelegateInstance;

        private static global::wxSharp.Size.__Internal _CalcMinDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CalcMin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void RepositionChildren(const wxSize& minSize) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _RepositionChildrenDelegateInstance;

        private static void _RepositionChildrenDelegateHook(global::System.IntPtr __instance, global::System.IntPtr minSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (minSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(minSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[minSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(minSize);
            __target.RepositionChildren(__result0);
        }

        // void RecalcSizes()
        private static global::wxSharp.Delegates.Action_IntPtr _RecalcSizesDelegateInstance;

        private static void _RecalcSizesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RecalcSizes();
        }

        // void Layout()
        private static global::wxSharp.Delegates.Action_IntPtr _LayoutDelegateInstance;

        private static void _LayoutDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Layout();
        }

        // void ShowItems (bool show)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ShowItemsDelegateInstance;

        private static void _ShowItemsDelegateHook(global::System.IntPtr __instance, bool show)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ShowItems(show);
        }

        // bool AreAnyItemsShown() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AreAnyItemsShownDelegateInstance;

        private static bool _AreAnyItemsShownDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AreAnyItemsShown();
        }

        // void DoSetMinSize( int width, int height )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetMinSizeDelegateInstance;

        private static void _DoSetMinSizeDelegateHook(global::System.IntPtr __instance, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetMinSize(width, height);
        }

        // bool DoSetItemMinSize( wxWindow *window, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSizeDelegateInstance;

        private static bool _DoSetItemMinSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( wxSizer *sizer, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSize_1DelegateInstance;

        private static bool _DoSetItemMinSize_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( size_t index, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_int_int _DoSetItemMinSize_2DelegateInstance;

        private static bool _DoSetItemMinSize_2DelegateHook(global::System.IntPtr __instance, uint index, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoSetItemMinSize(index, width, height);
        }

        // wxSizerItem *DoInsert(size_t index, wxSizerItem *item) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _DoInsertDelegateInstance;

        private static global::System.IntPtr _DoInsertDelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.DoInsert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void *DoGetClientData() const
        private static global::System.IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.BoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[28];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _AddSpacerDelegateInstance += _AddSpacerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_AddSpacerDelegateInstance).ToPointer();
                _Insert_6DelegateInstance += _Insert_6DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Insert_6DelegateInstance).ToPointer();
                _RemoveDelegateInstance += _RemoveDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_RemoveDelegateInstance).ToPointer();
                _Remove_1DelegateInstance += _Remove_1DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_Remove_1DelegateInstance).ToPointer();
                _DetachDelegateInstance += _DetachDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_DetachDelegateInstance).ToPointer();
                _Detach_1DelegateInstance += _Detach_1DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_Detach_1DelegateInstance).ToPointer();
                _Detach_2DelegateInstance += _Detach_2DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_Detach_2DelegateInstance).ToPointer();
                _ReplaceDelegateInstance += _ReplaceDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_ReplaceDelegateInstance).ToPointer();
                _Replace_1DelegateInstance += _Replace_1DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Replace_1DelegateInstance).ToPointer();
                _Replace_2DelegateInstance += _Replace_2DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_Replace_2DelegateInstance).ToPointer();
                _ClearDelegateInstance += _ClearDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ClearDelegateInstance).ToPointer();
                _DeleteWindowsDelegateInstance += _DeleteWindowsDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_DeleteWindowsDelegateInstance).ToPointer();
                _InformFirstDirectionDelegateInstance += _InformFirstDirectionDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_InformFirstDirectionDelegateInstance).ToPointer();
                _CalcMinDelegateInstance += _CalcMinDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_CalcMinDelegateInstance).ToPointer();
                _RepositionChildrenDelegateInstance += _RepositionChildrenDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_RepositionChildrenDelegateInstance).ToPointer();
                _RecalcSizesDelegateInstance += _RecalcSizesDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_RecalcSizesDelegateInstance).ToPointer();
                _LayoutDelegateInstance += _LayoutDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_LayoutDelegateInstance).ToPointer();
                _ShowItemsDelegateInstance += _ShowItemsDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_ShowItemsDelegateInstance).ToPointer();
                _AreAnyItemsShownDelegateInstance += _AreAnyItemsShownDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AreAnyItemsShownDelegateInstance).ToPointer();
                _DoSetMinSizeDelegateInstance += _DoSetMinSizeDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_DoSetMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSizeDelegateInstance += _DoSetItemMinSizeDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSize_1DelegateInstance += _DoSetItemMinSize_1DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_1DelegateInstance).ToPointer();
                _DoSetItemMinSize_2DelegateInstance += _DoSetItemMinSize_2DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_2DelegateInstance).ToPointer();
                _DoInsertDelegateInstance += _DoInsertDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_DoInsertDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = _Thunks[8];
                    *(void**) (vfptr0 + 44) = _Thunks[9];
                    *(void**) (vfptr0 + 48) = _Thunks[10];
                    *(void**) (vfptr0 + 52) = _Thunks[11];
                    *(void**) (vfptr0 + 56) = _Thunks[12];
                    *(void**) (vfptr0 + 60) = _Thunks[13];
                    *(void**) (vfptr0 + 64) = _Thunks[14];
                    *(void**) (vfptr0 + 68) = _Thunks[15];
                    *(void**) (vfptr0 + 72) = _Thunks[16];
                    *(void**) (vfptr0 + 76) = _Thunks[17];
                    *(void**) (vfptr0 + 80) = _Thunks[18];
                    *(void**) (vfptr0 + 84) = _Thunks[19];
                    *(void**) (vfptr0 + 88) = _Thunks[20];
                    *(void**) (vfptr0 + 92) = _Thunks[21];
                    *(void**) (vfptr0 + 96) = _Thunks[22];
                    *(void**) (vfptr0 + 100) = _Thunks[23];
                    *(void**) (vfptr0 + 104) = _Thunks[24];
                    *(void**) (vfptr0 + 108) = _Thunks[25];
                    *(void**) (vfptr0 + 112) = _Thunks[26];
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = _Thunks[27];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class StaticBoxSizer : global::wxSharp.BoxSizer, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 84)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr vptr_wxClientDataContainer;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(16)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(20)]
            internal global::wxSharp.Size.__Internal m_size;

            [FieldOffset(28)]
            internal global::wxSharp.Size.__Internal m_minSize;

            [FieldOffset(36)]
            internal global::wxSharp.Point.__Internal m_position;

            [FieldOffset(44)]
            internal global::wxSharp.SizerItemList.__Internal m_children;

            [FieldOffset(68)]
            internal global::System.IntPtr m_containingWindow;

            [FieldOffset(72)]
            internal int m_orient;

            [FieldOffset(76)]
            internal int m_totalProportion;

            [FieldOffset(80)]
            internal global::System.IntPtr m_staticBox;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxStaticBoxSizerC2EP11wxStaticBoxi")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr box, global::wxSharp.SizerOrientation orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxStaticBoxSizer12GetStaticBoxEv")]
            internal static extern global::System.IntPtr GetStaticBox(global::System.IntPtr __instance);
        }

        internal static new global::wxSharp.StaticBoxSizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.StaticBoxSizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.StaticBoxSizer __CreateInstance(global::wxSharp.StaticBoxSizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.StaticBoxSizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.StaticBoxSizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StaticBoxSizer.__Internal));
            *(global::wxSharp.StaticBoxSizer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StaticBoxSizer(global::wxSharp.StaticBoxSizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StaticBoxSizer(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public StaticBoxSizer(global::wxSharp.StaticBox box, global::wxSharp.SizerOrientation orient)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StaticBoxSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(box, null) ? global::System.IntPtr.Zero : box.__Instance;
            __Internal.ctor(__Instance, __arg0, orient);
            SetupVTables(GetType().FullName == "wxSharp.StaticBoxSizer");
        }

        public override global::wxSharp.Size CalcMin()
        {
            return base.CalcMin();
        }

        public override void RepositionChildren(global::wxSharp.Size minSize)
        {
            base.RepositionChildren(minSize);
        }

        public global::wxSharp.StaticBox GetStaticBox()
        {
            var __ret = __Internal.GetStaticBox(__Instance);
            global::wxSharp.StaticBox __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.StaticBox.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.StaticBox) global::wxSharp.StaticBox.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.StaticBox.__CreateInstance(__ret);
            return __result0;
        }

        public override void ShowItems(bool show)
        {
            base.ShowItems(show);
        }

        public override bool AreAnyItemsShown()
        {
            return base.AreAnyItemsShown();
        }

        public override bool Detach(global::wxSharp.Window window)
        {
            return base.Detach(window);
        }

        public override bool Detach(global::wxSharp.Sizer sizer)
        {
            return base.Detach(sizer);
        }

        public override bool Detach(int index)
        {
            return base.Detach(index);
        }

        protected global::wxSharp.StaticBox m_staticBox
        {
            get
            {
                global::wxSharp.StaticBox __result0;
                if (((global::wxSharp.StaticBoxSizer.__Internal*) __Instance)->m_staticBox == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.StaticBox.NativeToManagedMap.ContainsKey(((global::wxSharp.StaticBoxSizer.__Internal*) __Instance)->m_staticBox))
                    __result0 = (global::wxSharp.StaticBox) global::wxSharp.StaticBox.NativeToManagedMap[((global::wxSharp.StaticBoxSizer.__Internal*) __Instance)->m_staticBox];
                else __result0 = global::wxSharp.StaticBox.__CreateInstance(((global::wxSharp.StaticBoxSizer.__Internal*) __Instance)->m_staticBox);
                return __result0;
            }

            set
            {
                ((global::wxSharp.StaticBoxSizer.__Internal*)__Instance)->m_staticBox = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // virtual ~wxStaticBoxSizer()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem *AddSpacer(int size) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_int _AddSpacerDelegateInstance;

        private static global::System.IntPtr _AddSpacerDelegateHook(global::System.IntPtr __instance, int size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AddSpacer(size);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem* Insert(size_t index, wxSizerItem *item)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _Insert_6DelegateInstance;

        private static global::System.IntPtr _Insert_6DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.Insert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool Remove( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _RemoveDelegateInstance;

        private static bool _RemoveDelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Remove(__result0);
        }

        // bool Remove( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Remove_1DelegateInstance;

        private static bool _Remove_1DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Remove(index);
        }

        // bool Detach( wxWindow *window ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _DetachDelegateInstance;

        private static bool _DetachDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( wxSizer *sizer ) wxOVERRIDE { return wxBoxSizer::Detach(sizer); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _Detach_1DelegateInstance;

        private static bool _Detach_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( int index ) wxOVERRIDE { return wxBoxSizer::Detach(index); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Detach_2DelegateInstance;

        private static bool _Detach_2DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Detach(index);
        }

        // bool Replace( wxWindow *oldwin, wxWindow *newwin, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _ReplaceDelegateInstance;

        private static bool _ReplaceDelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldwin, global::System.IntPtr newwin, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (oldwin == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(oldwin))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[oldwin];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(oldwin, skipVTables: true);
            global::wxSharp.Window __result1;
            if (newwin == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(newwin))
                __result1 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[newwin];
            else __result1 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(newwin, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( wxSizer *oldsz, wxSizer *newsz, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _Replace_1DelegateInstance;

        private static bool _Replace_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldsz, global::System.IntPtr newsz, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (oldsz == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(oldsz))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[oldsz];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(oldsz, skipVTables: true);
            global::wxSharp.Sizer __result1;
            if (newsz == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(newsz))
                __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[newsz];
            else __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(newsz, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( size_t index, wxSizerItem *newitem )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_IntPtr _Replace_2DelegateInstance;

        private static bool _Replace_2DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr newitem)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (newitem == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(newitem))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[newitem];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(newitem, skipVTables: true);
            return __target.Replace(index, __result1);
        }

        // void Clear( bool delete_windows = false )
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ClearDelegateInstance;

        private static void _ClearDelegateHook(global::System.IntPtr __instance, bool delete_windows)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Clear(delete_windows);
        }

        // void DeleteWindows()
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteWindowsDelegateInstance;

        private static void _DeleteWindowsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteWindows();
        }

        // bool InformFirstDirection(int direction, int size, int availableOtherDir) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _InformFirstDirectionDelegateInstance;

        private static bool _InformFirstDirectionDelegateHook(global::System.IntPtr __instance, int direction, int size, int availableOtherDir)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.InformFirstDirection(direction, size, availableOtherDir);
        }

        // wxSize CalcMin() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _CalcMinDelegateInstance;

        private static global::wxSharp.Size.__Internal _CalcMinDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CalcMin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void RepositionChildren(const wxSize& minSize) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _RepositionChildrenDelegateInstance;

        private static void _RepositionChildrenDelegateHook(global::System.IntPtr __instance, global::System.IntPtr minSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (minSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(minSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[minSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(minSize);
            __target.RepositionChildren(__result0);
        }

        // void RecalcSizes()
        private static global::wxSharp.Delegates.Action_IntPtr _RecalcSizesDelegateInstance;

        private static void _RecalcSizesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RecalcSizes();
        }

        // void Layout()
        private static global::wxSharp.Delegates.Action_IntPtr _LayoutDelegateInstance;

        private static void _LayoutDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Layout();
        }

        // void ShowItems (bool show) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ShowItemsDelegateInstance;

        private static void _ShowItemsDelegateHook(global::System.IntPtr __instance, bool show)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ShowItems(show);
        }

        // bool AreAnyItemsShown() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AreAnyItemsShownDelegateInstance;

        private static bool _AreAnyItemsShownDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AreAnyItemsShown();
        }

        // void DoSetMinSize( int width, int height )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetMinSizeDelegateInstance;

        private static void _DoSetMinSizeDelegateHook(global::System.IntPtr __instance, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetMinSize(width, height);
        }

        // bool DoSetItemMinSize( wxWindow *window, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSizeDelegateInstance;

        private static bool _DoSetItemMinSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( wxSizer *sizer, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSize_1DelegateInstance;

        private static bool _DoSetItemMinSize_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( size_t index, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_int_int _DoSetItemMinSize_2DelegateInstance;

        private static bool _DoSetItemMinSize_2DelegateHook(global::System.IntPtr __instance, uint index, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoSetItemMinSize(index, width, height);
        }

        // wxSizerItem *DoInsert(size_t index, wxSizerItem *item) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _DoInsertDelegateInstance;

        private static global::System.IntPtr _DoInsertDelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.DoInsert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void *DoGetClientData() const
        private static global::System.IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StaticBoxSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[28];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _AddSpacerDelegateInstance += _AddSpacerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_AddSpacerDelegateInstance).ToPointer();
                _Insert_6DelegateInstance += _Insert_6DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Insert_6DelegateInstance).ToPointer();
                _RemoveDelegateInstance += _RemoveDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_RemoveDelegateInstance).ToPointer();
                _Remove_1DelegateInstance += _Remove_1DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_Remove_1DelegateInstance).ToPointer();
                _DetachDelegateInstance += _DetachDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_DetachDelegateInstance).ToPointer();
                _Detach_1DelegateInstance += _Detach_1DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_Detach_1DelegateInstance).ToPointer();
                _Detach_2DelegateInstance += _Detach_2DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_Detach_2DelegateInstance).ToPointer();
                _ReplaceDelegateInstance += _ReplaceDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_ReplaceDelegateInstance).ToPointer();
                _Replace_1DelegateInstance += _Replace_1DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Replace_1DelegateInstance).ToPointer();
                _Replace_2DelegateInstance += _Replace_2DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_Replace_2DelegateInstance).ToPointer();
                _ClearDelegateInstance += _ClearDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ClearDelegateInstance).ToPointer();
                _DeleteWindowsDelegateInstance += _DeleteWindowsDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_DeleteWindowsDelegateInstance).ToPointer();
                _InformFirstDirectionDelegateInstance += _InformFirstDirectionDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_InformFirstDirectionDelegateInstance).ToPointer();
                _CalcMinDelegateInstance += _CalcMinDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_CalcMinDelegateInstance).ToPointer();
                _RepositionChildrenDelegateInstance += _RepositionChildrenDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_RepositionChildrenDelegateInstance).ToPointer();
                _RecalcSizesDelegateInstance += _RecalcSizesDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_RecalcSizesDelegateInstance).ToPointer();
                _LayoutDelegateInstance += _LayoutDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_LayoutDelegateInstance).ToPointer();
                _ShowItemsDelegateInstance += _ShowItemsDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_ShowItemsDelegateInstance).ToPointer();
                _AreAnyItemsShownDelegateInstance += _AreAnyItemsShownDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AreAnyItemsShownDelegateInstance).ToPointer();
                _DoSetMinSizeDelegateInstance += _DoSetMinSizeDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_DoSetMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSizeDelegateInstance += _DoSetItemMinSizeDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSize_1DelegateInstance += _DoSetItemMinSize_1DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_1DelegateInstance).ToPointer();
                _DoSetItemMinSize_2DelegateInstance += _DoSetItemMinSize_2DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_2DelegateInstance).ToPointer();
                _DoInsertDelegateInstance += _DoInsertDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_DoInsertDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = _Thunks[8];
                    *(void**) (vfptr0 + 44) = _Thunks[9];
                    *(void**) (vfptr0 + 48) = _Thunks[10];
                    *(void**) (vfptr0 + 52) = _Thunks[11];
                    *(void**) (vfptr0 + 56) = _Thunks[12];
                    *(void**) (vfptr0 + 60) = _Thunks[13];
                    *(void**) (vfptr0 + 64) = _Thunks[14];
                    *(void**) (vfptr0 + 68) = _Thunks[15];
                    *(void**) (vfptr0 + 72) = _Thunks[16];
                    *(void**) (vfptr0 + 76) = _Thunks[17];
                    *(void**) (vfptr0 + 80) = _Thunks[18];
                    *(void**) (vfptr0 + 84) = _Thunks[19];
                    *(void**) (vfptr0 + 88) = _Thunks[20];
                    *(void**) (vfptr0 + 92) = _Thunks[21];
                    *(void**) (vfptr0 + 96) = _Thunks[22];
                    *(void**) (vfptr0 + 100) = _Thunks[23];
                    *(void**) (vfptr0 + 104) = _Thunks[24];
                    *(void**) (vfptr0 + 108) = _Thunks[25];
                    *(void**) (vfptr0 + 112) = _Thunks[26];
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = _Thunks[27];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class StdDialogButtonSizer : global::wxSharp.BoxSizer, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 100)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr vptr_wxClientDataContainer;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(12)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(16)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(20)]
            internal global::wxSharp.Size.__Internal m_size;

            [FieldOffset(28)]
            internal global::wxSharp.Size.__Internal m_minSize;

            [FieldOffset(36)]
            internal global::wxSharp.Point.__Internal m_position;

            [FieldOffset(44)]
            internal global::wxSharp.SizerItemList.__Internal m_children;

            [FieldOffset(68)]
            internal global::System.IntPtr m_containingWindow;

            [FieldOffset(72)]
            internal int m_orient;

            [FieldOffset(76)]
            internal int m_totalProportion;

            [FieldOffset(80)]
            internal global::System.IntPtr m_buttonAffirmative;

            [FieldOffset(84)]
            internal global::System.IntPtr m_buttonApply;

            [FieldOffset(88)]
            internal global::System.IntPtr m_buttonNegative;

            [FieldOffset(92)]
            internal global::System.IntPtr m_buttonCancel;

            [FieldOffset(96)]
            internal global::System.IntPtr m_buttonHelp;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxStdDialogButtonSizerC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxStdDialogButtonSizer9AddButtonEP8wxButton")]
            internal static extern void AddButton(global::System.IntPtr __instance, global::System.IntPtr button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxStdDialogButtonSizer20SetAffirmativeButtonEP8wxButton")]
            internal static extern void SetAffirmativeButton(global::System.IntPtr __instance, global::System.IntPtr button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxStdDialogButtonSizer17SetNegativeButtonEP8wxButton")]
            internal static extern void SetNegativeButton(global::System.IntPtr __instance, global::System.IntPtr button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxStdDialogButtonSizer15SetCancelButtonEP8wxButton")]
            internal static extern void SetCancelButton(global::System.IntPtr __instance, global::System.IntPtr button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxStdDialogButtonSizer7RealizeEv")]
            internal static extern void Realize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxStdDialogButtonSizer20GetAffirmativeButtonEv")]
            internal static extern global::System.IntPtr GetAffirmativeButton(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxStdDialogButtonSizer14GetApplyButtonEv")]
            internal static extern global::System.IntPtr GetApplyButton(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxStdDialogButtonSizer17GetNegativeButtonEv")]
            internal static extern global::System.IntPtr GetNegativeButton(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxStdDialogButtonSizer15GetCancelButtonEv")]
            internal static extern global::System.IntPtr GetCancelButton(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxStdDialogButtonSizer13GetHelpButtonEv")]
            internal static extern global::System.IntPtr GetHelpButton(global::System.IntPtr __instance);
        }

        internal static new global::wxSharp.StdDialogButtonSizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.StdDialogButtonSizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.StdDialogButtonSizer __CreateInstance(global::wxSharp.StdDialogButtonSizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.StdDialogButtonSizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.StdDialogButtonSizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StdDialogButtonSizer.__Internal));
            *(global::wxSharp.StdDialogButtonSizer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StdDialogButtonSizer(global::wxSharp.StdDialogButtonSizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StdDialogButtonSizer(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public StdDialogButtonSizer()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StdDialogButtonSizer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.StdDialogButtonSizer");
        }

        public void AddButton(global::wxSharp.Button button)
        {
            var __arg0 = ReferenceEquals(button, null) ? global::System.IntPtr.Zero : button.__Instance;
            __Internal.AddButton(__Instance, __arg0);
        }

        public void SetAffirmativeButton(global::wxSharp.Button button)
        {
            var __arg0 = ReferenceEquals(button, null) ? global::System.IntPtr.Zero : button.__Instance;
            __Internal.SetAffirmativeButton(__Instance, __arg0);
        }

        public void SetNegativeButton(global::wxSharp.Button button)
        {
            var __arg0 = ReferenceEquals(button, null) ? global::System.IntPtr.Zero : button.__Instance;
            __Internal.SetNegativeButton(__Instance, __arg0);
        }

        public void SetCancelButton(global::wxSharp.Button button)
        {
            var __arg0 = ReferenceEquals(button, null) ? global::System.IntPtr.Zero : button.__Instance;
            __Internal.SetCancelButton(__Instance, __arg0);
        }

        public void Realize()
        {
            __Internal.Realize(__Instance);
        }

        public global::wxSharp.Button GetAffirmativeButton()
        {
            var __ret = __Internal.GetAffirmativeButton(__Instance);
            global::wxSharp.Button __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.Button.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Button GetApplyButton()
        {
            var __ret = __Internal.GetApplyButton(__Instance);
            global::wxSharp.Button __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.Button.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Button GetNegativeButton()
        {
            var __ret = __Internal.GetNegativeButton(__Instance);
            global::wxSharp.Button __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.Button.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Button GetCancelButton()
        {
            var __ret = __Internal.GetCancelButton(__Instance);
            global::wxSharp.Button __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.Button.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Button GetHelpButton()
        {
            var __ret = __Internal.GetHelpButton(__Instance);
            global::wxSharp.Button __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.Button.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.Button m_buttonAffirmative
        {
            get
            {
                global::wxSharp.Button __result0;
                if (((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonAffirmative == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonAffirmative))
                    __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonAffirmative];
                else __result0 = global::wxSharp.Button.__CreateInstance(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonAffirmative);
                return __result0;
            }

            set
            {
                ((global::wxSharp.StdDialogButtonSizer.__Internal*)__Instance)->m_buttonAffirmative = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Button m_buttonApply
        {
            get
            {
                global::wxSharp.Button __result0;
                if (((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonApply == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonApply))
                    __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonApply];
                else __result0 = global::wxSharp.Button.__CreateInstance(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonApply);
                return __result0;
            }

            set
            {
                ((global::wxSharp.StdDialogButtonSizer.__Internal*)__Instance)->m_buttonApply = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Button m_buttonNegative
        {
            get
            {
                global::wxSharp.Button __result0;
                if (((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonNegative == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonNegative))
                    __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonNegative];
                else __result0 = global::wxSharp.Button.__CreateInstance(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonNegative);
                return __result0;
            }

            set
            {
                ((global::wxSharp.StdDialogButtonSizer.__Internal*)__Instance)->m_buttonNegative = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Button m_buttonCancel
        {
            get
            {
                global::wxSharp.Button __result0;
                if (((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonCancel == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonCancel))
                    __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonCancel];
                else __result0 = global::wxSharp.Button.__CreateInstance(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonCancel);
                return __result0;
            }

            set
            {
                ((global::wxSharp.StdDialogButtonSizer.__Internal*)__Instance)->m_buttonCancel = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Button m_buttonHelp
        {
            get
            {
                global::wxSharp.Button __result0;
                if (((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonHelp == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Button.NativeToManagedMap.ContainsKey(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonHelp))
                    __result0 = (global::wxSharp.Button) global::wxSharp.Button.NativeToManagedMap[((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonHelp];
                else __result0 = global::wxSharp.Button.__CreateInstance(((global::wxSharp.StdDialogButtonSizer.__Internal*) __Instance)->m_buttonHelp);
                return __result0;
            }

            set
            {
                ((global::wxSharp.StdDialogButtonSizer.__Internal*)__Instance)->m_buttonHelp = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // wxStdDialogButtonSizer
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem *AddSpacer(int size) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_int _AddSpacerDelegateInstance;

        private static global::System.IntPtr _AddSpacerDelegateHook(global::System.IntPtr __instance, int size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.AddSpacer(size);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizerItem* Insert(size_t index, wxSizerItem *item)
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _Insert_6DelegateInstance;

        private static global::System.IntPtr _Insert_6DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.Insert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool Remove( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _RemoveDelegateInstance;

        private static bool _RemoveDelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Remove(__result0);
        }

        // bool Remove( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Remove_1DelegateInstance;

        private static bool _Remove_1DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Remove(index);
        }

        // bool Detach( wxWindow *window )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _DetachDelegateInstance;

        private static bool _DetachDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( wxSizer *sizer )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _Detach_1DelegateInstance;

        private static bool _Detach_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.Detach(__result0);
        }

        // bool Detach( int index )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _Detach_2DelegateInstance;

        private static bool _Detach_2DelegateHook(global::System.IntPtr __instance, int index)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Detach(index);
        }

        // bool Replace( wxWindow *oldwin, wxWindow *newwin, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _ReplaceDelegateInstance;

        private static bool _ReplaceDelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldwin, global::System.IntPtr newwin, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (oldwin == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(oldwin))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[oldwin];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(oldwin, skipVTables: true);
            global::wxSharp.Window __result1;
            if (newwin == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(newwin))
                __result1 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[newwin];
            else __result1 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(newwin, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( wxSizer *oldsz, wxSizer *newsz, bool recursive = false )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _Replace_1DelegateInstance;

        private static bool _Replace_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr oldsz, global::System.IntPtr newsz, bool recursive)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (oldsz == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(oldsz))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[oldsz];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(oldsz, skipVTables: true);
            global::wxSharp.Sizer __result1;
            if (newsz == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(newsz))
                __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[newsz];
            else __result1 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(newsz, skipVTables: true);
            return __target.Replace(__result0, __result1, recursive);
        }

        // bool Replace( size_t index, wxSizerItem *newitem )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_IntPtr _Replace_2DelegateInstance;

        private static bool _Replace_2DelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr newitem)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (newitem == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(newitem))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[newitem];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(newitem, skipVTables: true);
            return __target.Replace(index, __result1);
        }

        // void Clear( bool delete_windows = false )
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ClearDelegateInstance;

        private static void _ClearDelegateHook(global::System.IntPtr __instance, bool delete_windows)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Clear(delete_windows);
        }

        // void DeleteWindows()
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteWindowsDelegateInstance;

        private static void _DeleteWindowsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteWindows();
        }

        // bool InformFirstDirection(int direction, int size, int availableOtherDir) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _InformFirstDirectionDelegateInstance;

        private static bool _InformFirstDirectionDelegateHook(global::System.IntPtr __instance, int direction, int size, int availableOtherDir)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.InformFirstDirection(direction, size, availableOtherDir);
        }

        // wxSize CalcMin() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _CalcMinDelegateInstance;

        private static global::wxSharp.Size.__Internal _CalcMinDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CalcMin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void RepositionChildren(const wxSize& minSize) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _RepositionChildrenDelegateInstance;

        private static void _RepositionChildrenDelegateHook(global::System.IntPtr __instance, global::System.IntPtr minSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (minSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(minSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[minSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(minSize);
            __target.RepositionChildren(__result0);
        }

        // void RecalcSizes()
        private static global::wxSharp.Delegates.Action_IntPtr _RecalcSizesDelegateInstance;

        private static void _RecalcSizesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RecalcSizes();
        }

        // void Layout()
        private static global::wxSharp.Delegates.Action_IntPtr _LayoutDelegateInstance;

        private static void _LayoutDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Layout();
        }

        // void ShowItems (bool show)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _ShowItemsDelegateInstance;

        private static void _ShowItemsDelegateHook(global::System.IntPtr __instance, bool show)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ShowItems(show);
        }

        // bool AreAnyItemsShown() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AreAnyItemsShownDelegateInstance;

        private static bool _AreAnyItemsShownDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AreAnyItemsShown();
        }

        // void DoSetMinSize( int width, int height )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetMinSizeDelegateInstance;

        private static void _DoSetMinSizeDelegateHook(global::System.IntPtr __instance, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetMinSize(width, height);
        }

        // bool DoSetItemMinSize( wxWindow *window, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSizeDelegateInstance;

        private static bool _DoSetItemMinSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr window, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (window == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(window))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[window];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(window, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( wxSizer *sizer, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoSetItemMinSize_1DelegateInstance;

        private static bool _DoSetItemMinSize_1DelegateHook(global::System.IntPtr __instance, global::System.IntPtr sizer, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Sizer __result0;
            if (sizer == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(sizer))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[sizer];
            else __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(sizer, skipVTables: true);
            return __target.DoSetItemMinSize(__result0, width, height);
        }

        // bool DoSetItemMinSize( size_t index, int width, int height )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_uint_int_int _DoSetItemMinSize_2DelegateInstance;

        private static bool _DoSetItemMinSize_2DelegateHook(global::System.IntPtr __instance, uint index, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoSetItemMinSize(index, width, height);
        }

        // wxSizerItem *DoInsert(size_t index, wxSizerItem *item) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_uint_IntPtr _DoInsertDelegateInstance;

        private static global::System.IntPtr _DoInsertDelegateHook(global::System.IntPtr __instance, uint index, global::System.IntPtr item)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.SizerItem __result1;
            if (item == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.SizerItem.NativeToManagedMap.ContainsKey(item))
                __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.NativeToManagedMap[item];
            else __result1 = (global::wxSharp.SizerItem) global::wxSharp.SizerItem.__CreateInstance(item, skipVTables: true);
            var __ret = __target.DoInsert(index, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void *DoGetClientData() const
        private static global::System.IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StdDialogButtonSizer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[28];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _AddSpacerDelegateInstance += _AddSpacerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_AddSpacerDelegateInstance).ToPointer();
                _Insert_6DelegateInstance += _Insert_6DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Insert_6DelegateInstance).ToPointer();
                _RemoveDelegateInstance += _RemoveDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_RemoveDelegateInstance).ToPointer();
                _Remove_1DelegateInstance += _Remove_1DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_Remove_1DelegateInstance).ToPointer();
                _DetachDelegateInstance += _DetachDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_DetachDelegateInstance).ToPointer();
                _Detach_1DelegateInstance += _Detach_1DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_Detach_1DelegateInstance).ToPointer();
                _Detach_2DelegateInstance += _Detach_2DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_Detach_2DelegateInstance).ToPointer();
                _ReplaceDelegateInstance += _ReplaceDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_ReplaceDelegateInstance).ToPointer();
                _Replace_1DelegateInstance += _Replace_1DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Replace_1DelegateInstance).ToPointer();
                _Replace_2DelegateInstance += _Replace_2DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_Replace_2DelegateInstance).ToPointer();
                _ClearDelegateInstance += _ClearDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_ClearDelegateInstance).ToPointer();
                _DeleteWindowsDelegateInstance += _DeleteWindowsDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_DeleteWindowsDelegateInstance).ToPointer();
                _InformFirstDirectionDelegateInstance += _InformFirstDirectionDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_InformFirstDirectionDelegateInstance).ToPointer();
                _CalcMinDelegateInstance += _CalcMinDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_CalcMinDelegateInstance).ToPointer();
                _RepositionChildrenDelegateInstance += _RepositionChildrenDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_RepositionChildrenDelegateInstance).ToPointer();
                _RecalcSizesDelegateInstance += _RecalcSizesDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_RecalcSizesDelegateInstance).ToPointer();
                _LayoutDelegateInstance += _LayoutDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_LayoutDelegateInstance).ToPointer();
                _ShowItemsDelegateInstance += _ShowItemsDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_ShowItemsDelegateInstance).ToPointer();
                _AreAnyItemsShownDelegateInstance += _AreAnyItemsShownDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AreAnyItemsShownDelegateInstance).ToPointer();
                _DoSetMinSizeDelegateInstance += _DoSetMinSizeDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_DoSetMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSizeDelegateInstance += _DoSetItemMinSizeDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSizeDelegateInstance).ToPointer();
                _DoSetItemMinSize_1DelegateInstance += _DoSetItemMinSize_1DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_1DelegateInstance).ToPointer();
                _DoSetItemMinSize_2DelegateInstance += _DoSetItemMinSize_2DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_DoSetItemMinSize_2DelegateInstance).ToPointer();
                _DoInsertDelegateInstance += _DoInsertDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_DoInsertDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(39 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = _Thunks[8];
                    *(void**) (vfptr0 + 44) = _Thunks[9];
                    *(void**) (vfptr0 + 48) = _Thunks[10];
                    *(void**) (vfptr0 + 52) = _Thunks[11];
                    *(void**) (vfptr0 + 56) = _Thunks[12];
                    *(void**) (vfptr0 + 60) = _Thunks[13];
                    *(void**) (vfptr0 + 64) = _Thunks[14];
                    *(void**) (vfptr0 + 68) = _Thunks[15];
                    *(void**) (vfptr0 + 72) = _Thunks[16];
                    *(void**) (vfptr0 + 76) = _Thunks[17];
                    *(void**) (vfptr0 + 80) = _Thunks[18];
                    *(void**) (vfptr0 + 84) = _Thunks[19];
                    *(void**) (vfptr0 + 88) = _Thunks[20];
                    *(void**) (vfptr0 + 92) = _Thunks[21];
                    *(void**) (vfptr0 + 96) = _Thunks[22];
                    *(void**) (vfptr0 + 100) = _Thunks[23];
                    *(void**) (vfptr0 + 104) = _Thunks[24];
                    *(void**) (vfptr0 + 108) = _Thunks[25];
                    *(void**) (vfptr0 + 112) = _Thunks[26];
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = _Thunks[0];
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = _Thunks[27];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class SizerInternal : global::wxSharp.Sizer, IDisposable
    {
        private static void* __CopyValue(global::wxSharp.Sizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Sizer.__Internal));
            *(global::wxSharp.Sizer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal SizerInternal(global::wxSharp.Sizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal SizerInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override global::wxSharp.Size CalcMin()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___CalcMinDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___CalcMinDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }
    }
}
