// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum WindowVariant : uint
    {
        WINDOW_VARIANT_NORMAL = 0,
        WINDOW_VARIANT_SMALL = 1,
        WINDOW_VARIANT_MINI = 2,
        WINDOW_VARIANT_LARGE = 3,
        WINDOW_VARIANT_MAX = 4
    }

    public enum ShowEffect : uint
    {
        SHOW_EFFECT_NONE = 0,
        SHOW_EFFECT_ROLL_TO_LEFT = 1,
        SHOW_EFFECT_ROLL_TO_RIGHT = 2,
        SHOW_EFFECT_ROLL_TO_TOP = 3,
        SHOW_EFFECT_ROLL_TO_BOTTOM = 4,
        SHOW_EFFECT_SLIDE_TO_LEFT = 5,
        SHOW_EFFECT_SLIDE_TO_RIGHT = 6,
        SHOW_EFFECT_SLIDE_TO_TOP = 7,
        SHOW_EFFECT_SLIDE_TO_BOTTOM = 8,
        SHOW_EFFECT_BLEND = 9,
        SHOW_EFFECT_EXPAND = 10,
        SHOW_EFFECT_MAX = 11
    }

    [Flags]
    public enum TouchMode : uint
    {
        TOUCH_NONE = 0x0,
        TOUCH_VERTICAL_PAN_GESTURE = 0x1,
        TOUCH_HORIZONTAL_PAN_GESTURE = 0x2,
        TOUCH_PAN_GESTURES = 3,
        TOUCH_ZOOM_GESTURE = 0x4,
        TOUCH_ROTATE_GESTURE = 0x8,
        TOUCH_PRESS_GESTURES = 0x10,
        TOUCH_ALL_GESTURES = 0x1f
    }

    [Flags]
    public enum SendEventFlags : uint
    {
        SEND_EVENT_POST = 1
    }

    public unsafe partial class DropTarget
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DropTarget> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.DropTarget>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.DropTarget __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DropTarget(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DropTarget __CreateInstance(global::wxSharp.DropTarget.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DropTarget(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DropTarget.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DropTarget.__Internal));
            *(global::wxSharp.DropTarget.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private DropTarget(global::wxSharp.DropTarget.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DropTarget(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Caret
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Caret> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Caret>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.Caret __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Caret(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Caret __CreateInstance(global::wxSharp.Caret.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Caret(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Caret.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Caret.__Internal));
            *(global::wxSharp.Caret.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Caret(global::wxSharp.Caret.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Caret(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ToolTip
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ToolTip> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ToolTip>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.ToolTip __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ToolTip(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ToolTip __CreateInstance(global::wxSharp.ToolTip.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ToolTip(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ToolTip.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ToolTip.__Internal));
            *(global::wxSharp.ToolTip.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ToolTip(global::wxSharp.ToolTip.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ToolTip(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class LayoutConstraints
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.LayoutConstraints> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.LayoutConstraints>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.LayoutConstraints __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.LayoutConstraints(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.LayoutConstraints __CreateInstance(global::wxSharp.LayoutConstraints.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.LayoutConstraints(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.LayoutConstraints.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.LayoutConstraints.__Internal));
            *(global::wxSharp.LayoutConstraints.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private LayoutConstraints(global::wxSharp.LayoutConstraints.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LayoutConstraints(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ScrollHelper
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ScrollHelper> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ScrollHelper>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.ScrollHelper __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ScrollHelper(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ScrollHelper __CreateInstance(global::wxSharp.ScrollHelper.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ScrollHelper(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ScrollHelper.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ScrollHelper.__Internal));
            *(global::wxSharp.ScrollHelper.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ScrollHelper(global::wxSharp.ScrollHelper.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScrollHelper(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class TextEntry
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.TextEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.TextEntry>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.TextEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.TextEntry(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.TextEntry __CreateInstance(global::wxSharp.TextEntry.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.TextEntry(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.TextEntry.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.TextEntry.__Internal));
            *(global::wxSharp.TextEntry.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private TextEntry(global::wxSharp.TextEntry.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TextEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ScrollBar
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ScrollBar> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ScrollBar>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.ScrollBar __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ScrollBar(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ScrollBar __CreateInstance(global::wxSharp.ScrollBar.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ScrollBar(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ScrollBar.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ScrollBar.__Internal));
            *(global::wxSharp.ScrollBar.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ScrollBar(global::wxSharp.ScrollBar.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScrollBar(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class WidgetImpl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WidgetImpl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WidgetImpl>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.WidgetImpl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.WidgetImpl(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.WidgetImpl __CreateInstance(global::wxSharp.WidgetImpl.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.WidgetImpl(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.WidgetImpl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WidgetImpl.__Internal));
            *(global::wxSharp.WidgetImpl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WidgetImpl(global::wxSharp.WidgetImpl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WidgetImpl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class Button
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Button> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Button>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.Button __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Button(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Button __CreateInstance(global::wxSharp.Button.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Button(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Button.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Button.__Internal));
            *(global::wxSharp.Button.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Button(global::wxSharp.Button.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Button(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class VisualAttributes : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::wxSharp.Font.__Internal font;

            [FieldOffset(8)]
            internal global::wxSharp.Color.__Internal colFg;

            [FieldOffset(16)]
            internal global::wxSharp.Color.__Internal colBg;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxVisualAttributesC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxVisualAttributesC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxVisualAttributesD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.VisualAttributes> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.VisualAttributes>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.VisualAttributes __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.VisualAttributes(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.VisualAttributes __CreateInstance(global::wxSharp.VisualAttributes.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.VisualAttributes(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.VisualAttributes.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.VisualAttributes.__Internal));
            global::wxSharp.VisualAttributes.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private VisualAttributes(global::wxSharp.VisualAttributes.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VisualAttributes(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public VisualAttributes(global::wxSharp.VisualAttributes _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.VisualAttributes.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public VisualAttributes()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.VisualAttributes.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.VisualAttributes __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.Color colFg
        {
            get
            {
                return global::wxSharp.Color.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.VisualAttributes.__Internal*) __Instance)->colFg));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.VisualAttributes.__Internal*)__Instance)->colFg = *(global::wxSharp.Color.__Internal*) value.__Instance;
            }
        }

        public global::wxSharp.Color colBg
        {
            get
            {
                return global::wxSharp.Color.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.VisualAttributes.__Internal*) __Instance)->colBg));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.VisualAttributes.__Internal*)__Instance)->colBg = *(global::wxSharp.Color.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class WindowListNode : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxNodeBase;

            [FieldOffset(4)]
            internal global::wxSharp.ListKeyValue.__Internal m_key;

            [FieldOffset(8)]
            internal global::System.IntPtr m_data;

            [FieldOffset(12)]
            internal global::System.IntPtr m_next;

            [FieldOffset(16)]
            internal global::System.IntPtr m_previous;

            [FieldOffset(20)]
            internal global::System.IntPtr m_list;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxWindowListNode7GetNextEv")]
            internal static extern global::System.IntPtr GetNext(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxWindowListNode11GetPreviousEv")]
            internal static extern global::System.IntPtr GetPrevious(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxWindowListNode7GetDataEv")]
            internal static extern global::System.IntPtr GetData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxWindowListNode7SetDataEP8wxWindow")]
            internal static extern void SetData(global::System.IntPtr __instance, global::System.IntPtr data);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowListNode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowListNode>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.WindowListNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowListNode(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.WindowListNode __CreateInstance(global::wxSharp.WindowListNode.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowListNode(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.WindowListNode.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowListNode.__Internal));
            *(global::wxSharp.WindowListNode.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WindowListNode(global::wxSharp.WindowListNode.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WindowListNode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.WindowListNode __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.WindowListNode.__Internal*) __Instance)->vptr_wxNodeBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.WindowListNode GetNext()
        {
            var __ret = __Internal.GetNext(__Instance);
            global::wxSharp.WindowListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[__ret];
            else global::wxSharp.WindowListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.WindowListNode GetPrevious()
        {
            var __ret = __Internal.GetPrevious(__Instance);
            global::wxSharp.WindowListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[__ret];
            else global::wxSharp.WindowListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Window GetData()
        {
            var __ret = __Internal.GetData(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public void SetData(global::wxSharp.Window data)
        {
            var __arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            __Internal.SetData(__Instance, __arg0);
        }

        protected virtual void DeleteData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___DeleteDataDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DeleteDataDelegate(__Instance);
        }

        #region Virtual table interop

        // wxWindowListNode
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowListNode) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // 
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteDataDelegateInstance;

        private static void _DeleteDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowListNode) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteData();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _DeleteDataDelegateInstance += _DeleteDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DeleteDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class WindowList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxListBase;

            [FieldOffset(4)]
            internal uint m_count;

            [FieldOffset(8)]
            internal byte m_destroy;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nodeFirst;

            [FieldOffset(16)]
            internal global::System.IntPtr m_nodeLast;

            [FieldOffset(20)]
            internal global::wxSharp.KeyType m_keyType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowListC2E9wxKeyType")]
            internal static extern void ctor(global::System.IntPtr __instance, global::wxSharp.KeyType keyType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowListC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr list);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowListC2EmRKP8wxWindow")]
            internal static extern void ctor(global::System.IntPtr __instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowListC2ERKNS_14const_iteratorES2_")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowList8GetFirstEv")]
            internal static extern global::System.IntPtr GetFirst(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowList7GetLastEv")]
            internal static extern global::System.IntPtr GetLast(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowList4ItemEm")]
            internal static extern global::System.IntPtr item(global::System.IntPtr __instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6AppendElPv")]
            internal static extern global::System.IntPtr Append(global::System.IntPtr __instance, int key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6AppendEPKwPv")]
            internal static extern global::System.IntPtr Append_1(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList10DetachNodeEP16wxWindowListNode")]
            internal static extern global::System.IntPtr DetachNode(global::System.IntPtr __instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList10DeleteNodeEP16wxWindowListNode")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteNode(global::System.IntPtr __instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList5EraseEP16wxWindowListNode")]
            internal static extern void Erase(global::System.IntPtr __instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList5beginEv")]
            internal static extern global::wxSharp.WindowList.iterator.__Internal begin(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList3endEv")]
            internal static extern global::wxSharp.WindowList.iterator.__Internal end(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6rbeginEv")]
            internal static extern global::wxSharp.WindowList.reverse_iterator.__Internal rbegin(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList4rendEv")]
            internal static extern global::wxSharp.WindowList.reverse_iterator.__Internal rend(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6resizeEmP8wxWindow")]
            internal static extern void resize(global::System.IntPtr __instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowList4sizeEv")]
            internal static extern uint size(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowList8max_sizeEv")]
            internal static extern uint max_size(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowList5emptyEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool empty(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList10push_frontERKP8wxWindow")]
            internal static extern void push_front(global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList9pop_frontEv")]
            internal static extern void pop_front(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList9push_backERKP8wxWindow")]
            internal static extern void push_back(global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList8pop_backEv")]
            internal static extern void pop_back(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6assignENS_14const_iteratorERKS0_")]
            internal static extern void assign(global::System.IntPtr __instance, global::wxSharp.WindowList.const_iterator.__Internal first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6assignEmRKP8wxWindow")]
            internal static extern void assign_1(global::System.IntPtr __instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6insertERKNS_8iteratorERKP8wxWindow")]
            internal static extern global::wxSharp.WindowList.iterator.__Internal insert(global::System.IntPtr __instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6insertERKNS_8iteratorEmRKP8wxWindow")]
            internal static extern void insert(global::System.IntPtr __instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6insertERKNS_8iteratorENS_14const_iteratorERKS3_")]
            internal static extern void insert_1(global::System.IntPtr __instance, global::System.IntPtr it, global::wxSharp.WindowList.const_iterator.__Internal first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList5eraseERKNS_8iteratorE")]
            internal static extern global::wxSharp.WindowList.iterator.__Internal erase(global::System.IntPtr __instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList5eraseERKNS_8iteratorES2_")]
            internal static extern global::wxSharp.WindowList.iterator.__Internal erase(global::System.IntPtr __instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList5clearEv")]
            internal static extern void clear(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6spliceERKNS_8iteratorERS_S2_S2_")]
            internal static extern void splice(global::System.IntPtr __instance, global::System.IntPtr it, global::System.IntPtr l, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6spliceERKNS_8iteratorERS_")]
            internal static extern void splice(global::System.IntPtr __instance, global::System.IntPtr it, global::System.IntPtr l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6spliceERKNS_8iteratorERS_S2_")]
            internal static extern void splice(global::System.IntPtr __instance, global::System.IntPtr it, global::System.IntPtr l, global::System.IntPtr first);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList6removeERKP8wxWindow")]
            internal static extern void remove(global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowList7reverseEv")]
            internal static extern void reverse(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowListixEm")]
            internal static extern global::System.IntPtr OperatorSubscript(global::System.IntPtr __instance, uint index);
        }

        public unsafe partial class compatibility_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList22compatibility_iteratorC2EP16wxWindowListNode")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr ptr);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList22compatibility_iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK12wxWindowList22compatibility_iteratorcvP16wxWindowListNodeEv")]
                internal static extern global::System.IntPtr OperatorConversion(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.compatibility_iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.compatibility_iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.WindowList.compatibility_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.compatibility_iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.WindowList.compatibility_iterator __CreateInstance(global::wxSharp.WindowList.compatibility_iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.compatibility_iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.WindowList.compatibility_iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.compatibility_iterator.__Internal));
                *(global::wxSharp.WindowList.compatibility_iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private compatibility_iterator(global::wxSharp.WindowList.compatibility_iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected compatibility_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public compatibility_iterator(global::wxSharp.WindowListNode ptr)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.compatibility_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(ptr, null) ? global::System.IntPtr.Zero : ptr.__Instance;
                __Internal.ctor(__Instance, __arg0);
            }

            public compatibility_iterator(global::wxSharp.WindowList.compatibility_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.compatibility_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.WindowList.compatibility_iterator.__Internal*) __Instance) = *((global::wxSharp.WindowList.compatibility_iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.WindowList.compatibility_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static implicit operator global::wxSharp.WindowListNode(global::wxSharp.WindowList.compatibility_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = __op.__Instance;
                var __ret = __Internal.OperatorConversion(__arg0);
                global::wxSharp.WindowListNode __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[__ret];
                else global::wxSharp.WindowListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList8iteratorC2EP16wxWindowListNodeS2_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList8iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList8iteratorC2ERKS0_")]
                internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK12wxWindowList8iteratorneERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK12wxWindowList8iteratoreqERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.WindowList.iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.WindowList.iterator __CreateInstance(global::wxSharp.WindowList.iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.WindowList.iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.iterator.__Internal));
                *(global::wxSharp.WindowList.iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(global::wxSharp.WindowList.iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator(global::wxSharp.WindowListNode node, global::wxSharp.WindowListNode init)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public iterator()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public iterator(global::wxSharp.WindowList.iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.WindowList.iterator.__Internal*) __Instance) = *((global::wxSharp.WindowList.iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.WindowList.iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator !=(global::wxSharp.WindowList.iterator __op, global::wxSharp.WindowList.iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            public static bool operator ==(global::wxSharp.WindowList.iterator __op, global::wxSharp.WindowList.iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::wxSharp.WindowList.iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::wxSharp.WindowList.iterator.__Internal*) __Instance).GetHashCode();
            }

            public global::wxSharp.WindowListNode m_node
            {
                get
                {
                    global::wxSharp.WindowListNode __result0;
                    if (((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_node))
                        __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_node];
                    else global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_node] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.WindowList.iterator.__Internal*)__Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::wxSharp.WindowListNode m_init
            {
                get
                {
                    global::wxSharp.WindowListNode __result0;
                    if (((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_init))
                        __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_init];
                    else global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_init] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(((global::wxSharp.WindowList.iterator.__Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.WindowList.iterator.__Internal*)__Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class const_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList14const_iteratorC2EP16wxWindowListNodeS2_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList14const_iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList14const_iteratorC2ERKNS_8iteratorE")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList14const_iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK12wxWindowList14const_iteratorneERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK12wxWindowList14const_iteratoreqERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.const_iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.const_iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.WindowList.const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.const_iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.WindowList.const_iterator __CreateInstance(global::wxSharp.WindowList.const_iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.WindowList.const_iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_iterator.__Internal));
                *(global::wxSharp.WindowList.const_iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(global::wxSharp.WindowList.const_iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator(global::wxSharp.WindowListNode node, global::wxSharp.WindowListNode init)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public const_iterator()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public const_iterator(global::wxSharp.WindowList.iterator it)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = it.__Instance;
                __Internal.ctor(__Instance, __arg0);
            }

            public const_iterator(global::wxSharp.WindowList.const_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance) = *((global::wxSharp.WindowList.const_iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.WindowList.const_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator !=(global::wxSharp.WindowList.const_iterator __op, global::wxSharp.WindowList.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            public static bool operator ==(global::wxSharp.WindowList.const_iterator __op, global::wxSharp.WindowList.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::wxSharp.WindowList.const_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::wxSharp.WindowList.const_iterator.__Internal*) __Instance).GetHashCode();
            }

            public global::wxSharp.WindowListNode m_node
            {
                get
                {
                    global::wxSharp.WindowListNode __result0;
                    if (((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_node))
                        __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_node];
                    else global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_node] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.WindowList.const_iterator.__Internal*)__Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::wxSharp.WindowListNode m_init
            {
                get
                {
                    global::wxSharp.WindowListNode __result0;
                    if (((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_init))
                        __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_init];
                    else global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_init] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(((global::wxSharp.WindowList.const_iterator.__Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.WindowList.const_iterator.__Internal*)__Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList16reverse_iteratorC2EP16wxWindowListNodeS2_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList16reverse_iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList16reverse_iteratorC2ERKS0_")]
                internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK12wxWindowList16reverse_iteratorneERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK12wxWindowList16reverse_iteratoreqERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.reverse_iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.reverse_iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.WindowList.reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.reverse_iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.WindowList.reverse_iterator __CreateInstance(global::wxSharp.WindowList.reverse_iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.WindowList.reverse_iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.reverse_iterator.__Internal));
                *(global::wxSharp.WindowList.reverse_iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(global::wxSharp.WindowList.reverse_iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator(global::wxSharp.WindowListNode node, global::wxSharp.WindowListNode init)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public reverse_iterator(global::wxSharp.WindowList.reverse_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance) = *((global::wxSharp.WindowList.reverse_iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.WindowList.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator !=(global::wxSharp.WindowList.reverse_iterator __op, global::wxSharp.WindowList.reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            public static bool operator ==(global::wxSharp.WindowList.reverse_iterator __op, global::wxSharp.WindowList.reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::wxSharp.WindowList.reverse_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance).GetHashCode();
            }

            public global::wxSharp.WindowListNode m_node
            {
                get
                {
                    global::wxSharp.WindowListNode __result0;
                    if (((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_node))
                        __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_node];
                    else global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_node] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.WindowList.reverse_iterator.__Internal*)__Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::wxSharp.WindowListNode m_init
            {
                get
                {
                    global::wxSharp.WindowListNode __result0;
                    if (((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_init))
                        __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_init];
                    else global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_init] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(((global::wxSharp.WindowList.reverse_iterator.__Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.WindowList.reverse_iterator.__Internal*)__Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList22const_reverse_iteratorC2EP16wxWindowListNodeS2_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList22const_reverse_iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowList22const_reverse_iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK12wxWindowList22const_reverse_iteratorneERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK12wxWindowList22const_reverse_iteratoreqERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.const_reverse_iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList.const_reverse_iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.WindowList.const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.WindowList.const_reverse_iterator __CreateInstance(global::wxSharp.WindowList.const_reverse_iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.WindowList.const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.WindowList.const_reverse_iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_reverse_iterator.__Internal));
                *(global::wxSharp.WindowList.const_reverse_iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(global::wxSharp.WindowList.const_reverse_iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator(global::wxSharp.WindowListNode node, global::wxSharp.WindowListNode init)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public const_reverse_iterator(global::wxSharp.WindowList.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = it.__Instance;
                __Internal.ctor(__Instance, __arg0);
            }

            public const_reverse_iterator(global::wxSharp.WindowList.const_reverse_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.const_reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance) = *((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.WindowList.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator !=(global::wxSharp.WindowList.const_reverse_iterator __op, global::wxSharp.WindowList.const_reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            public static bool operator ==(global::wxSharp.WindowList.const_reverse_iterator __op, global::wxSharp.WindowList.const_reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::wxSharp.WindowList.const_reverse_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance).GetHashCode();
            }

            public global::wxSharp.WindowListNode m_node
            {
                get
                {
                    global::wxSharp.WindowListNode __result0;
                    if (((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_node))
                        __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_node];
                    else global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_node] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.WindowList.const_reverse_iterator.__Internal*)__Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::wxSharp.WindowListNode m_init
            {
                get
                {
                    global::wxSharp.WindowListNode __result0;
                    if (((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_init))
                        __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_init];
                    else global::wxSharp.WindowListNode.NativeToManagedMap[((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_init] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(((global::wxSharp.WindowList.const_reverse_iterator.__Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.WindowList.const_reverse_iterator.__Internal*)__Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowList>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.WindowList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowList(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.WindowList __CreateInstance(global::wxSharp.WindowList.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowList(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.WindowList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.__Internal));
            global::wxSharp.WindowList.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private WindowList(global::wxSharp.WindowList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WindowList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public WindowList(global::wxSharp.KeyType keyType)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, keyType);
            SetupVTables(GetType().FullName == "wxSharp.WindowList");
        }

        public WindowList(global::wxSharp.WindowList list)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(list, null))
                throw new global::System.ArgumentNullException("list", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = list.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.WindowList");
        }

        public WindowList(uint n, global::wxSharp.Window v)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg1 = v.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            __Internal.ctor(__Instance, n, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.WindowList");
        }

        public WindowList(global::wxSharp.WindowList.const_iterator first, global::wxSharp.WindowList.const_iterator last)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = last.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.WindowList");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.WindowList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.WindowList.__Internal*) __Instance)->vptr_wxListBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.WindowListNode GetFirst()
        {
            var __ret = __Internal.GetFirst(__Instance);
            global::wxSharp.WindowListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[__ret];
            else global::wxSharp.WindowListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.WindowListNode GetLast()
        {
            var __ret = __Internal.GetLast(__Instance);
            global::wxSharp.WindowListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[__ret];
            else global::wxSharp.WindowListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.WindowListNode item(uint index)
        {
            var __ret = __Internal.item(__Instance, index);
            global::wxSharp.WindowListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[__ret];
            else global::wxSharp.WindowListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.WindowListNode Append(int key, global::System.IntPtr @object)
        {
            var __ret = __Internal.Append(__Instance, key, @object);
            global::wxSharp.WindowListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[__ret];
            else global::wxSharp.WindowListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.WindowListNode Append(string key, global::System.IntPtr @object)
        {
            var __ret = __Internal.Append_1(__Instance, key, @object);
            global::wxSharp.WindowListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[__ret];
            else global::wxSharp.WindowListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.WindowListNode DetachNode(global::wxSharp.WindowListNode node)
        {
            var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = __Internal.DetachNode(__Instance, __arg0);
            global::wxSharp.WindowListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.NativeToManagedMap[__ret];
            else global::wxSharp.WindowListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowListNode) global::wxSharp.WindowListNode.__CreateInstance(__ret);
            return __result0;
        }

        public bool DeleteNode(global::wxSharp.WindowListNode node)
        {
            var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = __Internal.DeleteNode(__Instance, __arg0);
            return __ret;
        }

        public void Erase(global::wxSharp.WindowListNode it)
        {
            var __arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            __Internal.Erase(__Instance, __arg0);
        }

        public global::wxSharp.WindowList.iterator begin()
        {
            var __ret = __Internal.begin(__Instance);
            return global::wxSharp.WindowList.iterator.__CreateInstance(__ret);
        }

        public global::wxSharp.WindowList.iterator end()
        {
            var __ret = __Internal.end(__Instance);
            return global::wxSharp.WindowList.iterator.__CreateInstance(__ret);
        }

        public global::wxSharp.WindowList.reverse_iterator rbegin()
        {
            var __ret = __Internal.rbegin(__Instance);
            return global::wxSharp.WindowList.reverse_iterator.__CreateInstance(__ret);
        }

        public global::wxSharp.WindowList.reverse_iterator rend()
        {
            var __ret = __Internal.rend(__Instance);
            return global::wxSharp.WindowList.reverse_iterator.__CreateInstance(__ret);
        }

        public void resize(uint n, global::wxSharp.Window v)
        {
            var __arg1 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            __Internal.resize(__Instance, n, __arg1);
        }

        public uint size()
        {
            var __ret = __Internal.size(__Instance);
            return __ret;
        }

        public uint max_size()
        {
            var __ret = __Internal.max_size(__Instance);
            return __ret;
        }

        public bool empty()
        {
            var __ret = __Internal.empty(__Instance);
            return __ret;
        }

        public void push_front(global::wxSharp.Window v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = v.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            __Internal.push_front(__Instance, __arg0);
        }

        public void pop_front()
        {
            __Internal.pop_front(__Instance);
        }

        public void push_back(global::wxSharp.Window v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = v.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            __Internal.push_back(__Instance, __arg0);
        }

        public void pop_back()
        {
            __Internal.pop_back(__Instance);
        }

        public void assign(global::wxSharp.WindowList.const_iterator first, global::wxSharp.WindowList.const_iterator last)
        {
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is passed by value.");
            var __arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = last.__Instance;
            __Internal.assign(__Instance, *(global::wxSharp.WindowList.const_iterator.__Internal*) __arg0, __arg1);
        }

        public void assign(uint n, global::wxSharp.Window v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg1 = v.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            __Internal.assign_1(__Instance, n, __arg1);
        }

        public global::wxSharp.WindowList.iterator insert(global::wxSharp.WindowList.iterator it, global::wxSharp.Window v)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg1 = v.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var __ret = __Internal.insert(__Instance, __arg0, __arg1);
            return global::wxSharp.WindowList.iterator.__CreateInstance(__ret);
        }

        public void insert(global::wxSharp.WindowList.iterator it, uint n, global::wxSharp.Window v)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg2 = v.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            __Internal.insert(__Instance, __arg0, n, __arg2);
        }

        public void insert(global::wxSharp.WindowList.iterator it, global::wxSharp.WindowList.const_iterator first, global::wxSharp.WindowList.const_iterator last)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is passed by value.");
            var __arg1 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = last.__Instance;
            __Internal.insert_1(__Instance, __arg0, *(global::wxSharp.WindowList.const_iterator.__Internal*) __arg1, __arg2);
        }

        public global::wxSharp.WindowList.iterator erase(global::wxSharp.WindowList.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            var __ret = __Internal.erase(__Instance, __arg0);
            return global::wxSharp.WindowList.iterator.__CreateInstance(__ret);
        }

        public global::wxSharp.WindowList.iterator erase(global::wxSharp.WindowList.iterator first, global::wxSharp.WindowList.iterator last)
        {
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = last.__Instance;
            var __ret = __Internal.erase(__Instance, __arg0, __arg1);
            return global::wxSharp.WindowList.iterator.__CreateInstance(__ret);
        }

        public void clear()
        {
            __Internal.clear(__Instance);
        }

        public void splice(global::wxSharp.WindowList.iterator it, global::wxSharp.WindowList l, global::wxSharp.WindowList.iterator first, global::wxSharp.WindowList.iterator last)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = l.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = last.__Instance;
            __Internal.splice(__Instance, __arg0, __arg1, __arg2, __arg3);
        }

        public void splice(global::wxSharp.WindowList.iterator it, global::wxSharp.WindowList l)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = l.__Instance;
            __Internal.splice(__Instance, __arg0, __arg1);
        }

        public void splice(global::wxSharp.WindowList.iterator it, global::wxSharp.WindowList l, global::wxSharp.WindowList.iterator first)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = l.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = first.__Instance;
            __Internal.splice(__Instance, __arg0, __arg1, __arg2);
        }

        public void remove(global::wxSharp.Window v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = v.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            __Internal.remove(__Instance, __arg0);
        }

        public void reverse()
        {
            __Internal.reverse(__Instance);
        }

        public global::wxSharp.Window this[uint index]
        {
            get
            {
                var __ret = __Internal.OperatorSubscript(__Instance, index);
                return global::wxSharp.Window.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                global::wxSharp.Window.__Internal.cctor(global::wxSharp.WindowList.__Internal.OperatorSubscript(__Instance, index), value.__Instance);
            }
        }

        #region Virtual table interop

        // wxWindowList
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowList) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[1];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class Window : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 424)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_first;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nextHandler;

            [FieldOffset(16)]
            internal global::System.IntPtr m_previousHandler;

            [FieldOffset(20)]
            internal global::System.IntPtr m_dynamicEvents;

            [FieldOffset(24)]
            internal global::System.IntPtr m_pendingEvents;

            [FieldOffset(28)]
            internal global::wxSharp.CriticalSection.__Internal m_pendingEventsLock;

            [FieldOffset(32)]
            internal byte m_enabled;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(40)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(44)]
            internal global::wxSharp.WindowIDRef.__Internal m_windowId;

            [FieldOffset(48)]
            internal global::System.IntPtr m_parent;

            [FieldOffset(52)]
            internal global::wxSharp.WindowList.__Internal m_children;

            [FieldOffset(76)]
            internal int m_minWidth;

            [FieldOffset(80)]
            internal int m_minHeight;

            [FieldOffset(84)]
            internal int m_maxWidth;

            [FieldOffset(88)]
            internal int m_maxHeight;

            [FieldOffset(92)]
            internal global::System.IntPtr m_eventHandler;

            [FieldOffset(96)]
            internal global::System.IntPtr m_windowValidator;

            [FieldOffset(100)]
            internal global::System.IntPtr m_dropTarget;

            [FieldOffset(104)]
            internal global::wxSharp.Cursor.__Internal m_cursor;

            [FieldOffset(112)]
            internal global::wxSharp.Font.__Internal m_font;

            [FieldOffset(120)]
            internal global::wxSharp.Color.__Internal m_backgroundColour;

            [FieldOffset(128)]
            internal global::wxSharp.Color.__Internal m_foregroundColour;

            [FieldOffset(136)]
            internal global::System.IntPtr m_caret;

            [FieldOffset(140)]
            internal global::wxSharp.Region.__Internal m_updateRegion;

            [FieldOffset(148)]
            internal global::wxSharp.AcceleratorTable.__Internal m_acceleratorTable;

            [FieldOffset(156)]
            internal global::System.IntPtr m_tooltip;

            [FieldOffset(160)]
            internal global::System.IntPtr m_constraints;

            [FieldOffset(164)]
            internal global::System.IntPtr m_constraintsInvolvedIn;

            [FieldOffset(168)]
            internal global::System.IntPtr m_windowSizer;

            [FieldOffset(172)]
            internal global::System.IntPtr m_containingSizer;

            [FieldOffset(176)]
            internal byte m_autoLayout;

            [FieldOffset(176)]
            internal byte m_isShown;

            [FieldOffset(176)]
            internal byte m_isEnabled;

            [FieldOffset(176)]
            internal byte m_isBeingDeleted;

            [FieldOffset(176)]
            internal byte m_hasBgCol;

            [FieldOffset(176)]
            internal byte m_hasFgCol;

            [FieldOffset(176)]
            internal byte m_hasFont;

            [FieldOffset(176)]
            internal byte m_inheritBgCol;

            [FieldOffset(177)]
            internal byte m_inheritFgCol;

            [FieldOffset(177)]
            internal byte m_inheritFont;

            [FieldOffset(180)]
            internal int m_windowStyle;

            [FieldOffset(184)]
            internal int m_exStyle;

            [FieldOffset(188)]
            internal global::wxSharp.String.__Internal m_windowName;

            [FieldOffset(208)]
            internal byte m_themeEnabled;

            [FieldOffset(212)]
            internal global::wxSharp.BackgroundStyle m_backgroundStyle;

            [FieldOffset(216)]
            internal global::wxSharp.Palette.__Internal m_palette;

            [FieldOffset(224)]
            internal byte m_hasCustomPalette;

            [FieldOffset(228)]
            internal global::wxSharp.Size.__Internal m_virtualSize;

            [FieldOffset(236)]
            internal global::System.IntPtr m_scrollHelper;

            [FieldOffset(240)]
            internal global::wxSharp.WindowVariant m_windowVariant;

            [FieldOffset(244)]
            internal global::wxSharp.Size.__Internal m_bestSizeCache;

            [FieldOffset(252)]
            internal uint m_freezeCount;

            [FieldOffset(256)]
            internal global::wxSharp.List.__Internal m_subControls;

            [FieldOffset(280)]
            internal global::System.IntPtr m_cgContextRef;

            [FieldOffset(284)]
            internal byte m_cachedClippedRectValid;

            [FieldOffset(288)]
            internal global::wxSharp.Rect.__Internal m_cachedClippedRectWithOuterStructure;

            [FieldOffset(304)]
            internal global::wxSharp.Rect.__Internal m_cachedClippedRect;

            [FieldOffset(320)]
            internal global::wxSharp.Rect.__Internal m_cachedClippedClientRect;

            [FieldOffset(336)]
            internal global::wxSharp.Region.__Internal m_cachedClippedRegionWithOuterStructure;

            [FieldOffset(344)]
            internal global::wxSharp.Region.__Internal m_cachedClippedRegion;

            [FieldOffset(352)]
            internal global::wxSharp.Region.__Internal m_cachedClippedClientRegion;

            [FieldOffset(360)]
            internal global::wxSharp.Point.__Internal m_macTopLeftInset;

            [FieldOffset(368)]
            internal global::wxSharp.Point.__Internal m_macBottomRightInset;

            [FieldOffset(376)]
            internal byte m_macAlpha;

            [FieldOffset(380)]
            internal global::System.IntPtr m_hScrollBar;

            [FieldOffset(384)]
            internal global::System.IntPtr m_vScrollBar;

            [FieldOffset(388)]
            internal byte m_hScrollBarAlwaysShown;

            [FieldOffset(389)]
            internal byte m_vScrollBarAlwaysShown;

            [FieldOffset(392)]
            internal global::System.IntPtr m_growBox;

            [FieldOffset(396)]
            internal global::wxSharp.String.__Internal m_label;

            [FieldOffset(416)]
            internal byte m_isNativeWindowWrapper;

            [FieldOffset(417)]
            internal byte m_clipChildren;

            [FieldOffset(420)]
            internal global::System.IntPtr m_peer;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxWindowC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxWindow14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxWindow12OnMouseEventER12wxMouseEvent")]
            internal static extern void OnMouseEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxWindow7GetPeerEv")]
            internal static extern global::System.IntPtr GetPeer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxWindow14DontCreatePeerEv")]
            internal static extern void DontCreatePeer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxWindow16ShouldCreatePeerEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ShouldCreatePeer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxWindow7SetPeerEP12wxWidgetImpl")]
            internal static extern void SetPeer(global::System.IntPtr __instance, global::System.IntPtr peer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxWindow15SetWrappingPeerEP12wxWidgetImpl")]
            internal static extern void SetWrappingPeer(global::System.IntPtr __instance, global::System.IntPtr wrapper);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxWindow21IsNativeWindowWrapperEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsNativeWindowWrapper(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase5CloseEb")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Close(global::System.IntPtr __instance, bool force);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase15DestroyChildrenEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DestroyChildren(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14IsBeingDeletedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsBeingDeleted(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase16SetWindowVariantE15wxWindowVariant")]
            internal static extern void SetWindowVariant(global::System.IntPtr __instance, global::wxSharp.WindowVariant variant);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase16GetWindowVariantEv")]
            internal static extern global::wxSharp.WindowVariant GetWindowVariant(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase5GetIdEv")]
            internal static extern int GetId(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase12NewControlIdEi")]
            internal static extern int NewControlId(int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase18UnreserveControlIdEii")]
            internal static extern void UnreserveControlId(int id, int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase7SetSizeEiiiii")]
            internal static extern void SetSize(global::System.IntPtr __instance, int x, int y, int width, int height, int sizeFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase7SetSizeEii")]
            internal static extern void SetSize(global::System.IntPtr __instance, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase7SetSizeERK6wxSize")]
            internal static extern void SetSize(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase7SetSizeERK6wxRecti")]
            internal static extern void SetSize(global::System.IntPtr __instance, global::System.IntPtr rect, int sizeFlags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase4MoveEiii")]
            internal static extern void Move(global::System.IntPtr __instance, int x, int y, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase4MoveERK7wxPointi")]
            internal static extern void Move(global::System.IntPtr __instance, global::System.IntPtr pt, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase11SetPositionERK7wxPoint")]
            internal static extern void SetPosition(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase13SetClientSizeEii")]
            internal static extern void SetClientSize(global::System.IntPtr __instance, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase13SetClientSizeERK6wxSize")]
            internal static extern void SetClientSize(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase13SetClientSizeERK6wxRect")]
            internal static extern void SetClientSize_1(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase11GetPositionEPiS0_")]
            internal static extern void GetPosition(global::System.IntPtr __instance, int* x, int* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase11GetPositionEv")]
            internal static extern global::wxSharp.Point.__Internal GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase17GetScreenPositionEPiS0_")]
            internal static extern void GetScreenPosition(global::System.IntPtr __instance, int* x, int* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase17GetScreenPositionEv")]
            internal static extern global::wxSharp.Point.__Internal GetScreenPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase7GetSizeEPiS0_")]
            internal static extern void GetSize(global::System.IntPtr __instance, int* w, int* h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase7GetSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13GetClientSizeEPiS0_")]
            internal static extern void GetClientSize(global::System.IntPtr __instance, int* w, int* h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13GetClientSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetClientSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase7GetRectEv")]
            internal static extern void GetRect(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13GetScreenRectEv")]
            internal static extern void GetScreenRect(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13GetClientRectEv")]
            internal static extern void GetClientRect(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase11GetBestSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetBestSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase11GetBestSizeEPiS0_")]
            internal static extern void GetBestSize(global::System.IntPtr __instance, int* w, int* h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13GetBestHeightEi")]
            internal static extern int GetBestHeight(global::System.IntPtr __instance, int width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase12GetBestWidthEi")]
            internal static extern int GetBestWidth(global::System.IntPtr __instance, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase15SetScrollHelperEP14wxScrollHelper")]
            internal static extern void SetScrollHelper(global::System.IntPtr __instance, global::System.IntPtr sh);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase15GetScrollHelperEv")]
            internal static extern global::System.IntPtr GetScrollHelper(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase18InvalidateBestSizeEv")]
            internal static extern void InvalidateBestSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13CacheBestSizeERK6wxSize")]
            internal static extern void CacheBestSize(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase14SetInitialSizeERK6wxSize")]
            internal static extern void SetInitialSize(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase6CentreEi")]
            internal static extern void Centre(global::System.IntPtr __instance, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase6CenterEi")]
            internal static extern void Center(global::System.IntPtr __instance, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase14CentreOnParentEi")]
            internal static extern void CentreOnParent(global::System.IntPtr __instance, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase14CenterOnParentEi")]
            internal static extern void CenterOnParent(global::System.IntPtr __instance, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase12SetSizeHintsERK6wxSizeS2_S2_")]
            internal static extern void SetSizeHints(global::System.IntPtr __instance, global::System.IntPtr minSize, global::System.IntPtr maxSize, global::System.IntPtr incSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase11GetMinWidthEv")]
            internal static extern int GetMinWidth(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase12GetMinHeightEv")]
            internal static extern int GetMinHeight(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase11GetMaxWidthEv")]
            internal static extern int GetMaxWidth(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase12GetMaxHeightEv")]
            internal static extern int GetMaxHeight(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase14SetVirtualSizeERK6wxSize")]
            internal static extern void SetVirtualSize(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase14SetVirtualSizeEii")]
            internal static extern void SetVirtualSize(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14GetVirtualSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetVirtualSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14GetVirtualSizeEPiS0_")]
            internal static extern void GetVirtualSize(global::System.IntPtr __instance, int* x, int* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase21SendSizeEventToParentEi")]
            internal static extern void SendSizeEventToParent(global::System.IntPtr __instance, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase13PostSizeEventEv")]
            internal static extern void PostSizeEvent(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase21PostSizeEventToParentEv")]
            internal static extern void PostSizeEventToParent(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase4HideEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Hide(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase7DisableEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Disable(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase9IsEnabledEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsEnabled(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13IsThisEnabledEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsThisEnabled(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase14SetWindowStyleEl")]
            internal static extern void SetWindowStyle(global::System.IntPtr __instance, int style);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14GetWindowStyleEv")]
            internal static extern int GetWindowStyle(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase7HasFlagEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasFlag(global::System.IntPtr __instance, int flag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase17ToggleWindowStyleEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ToggleWindowStyle(global::System.IntPtr __instance, int flag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13GetExtraStyleEv")]
            internal static extern int GetExtraStyle(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13HasExtraStyleEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasExtraStyle(global::System.IntPtr __instance, int exFlag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase9FindFocusEv")]
            internal static extern global::System.IntPtr FindFocus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase11DoFindFocusEv")]
            internal static extern global::System.IntPtr DoFindFocus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase11IsFocusableEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFocusable(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14CanAcceptFocusEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CanAcceptFocus(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase26CanAcceptFocusFromKeyboardEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CanAcceptFocusFromKeyboard(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase10NavigateInEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool NavigateIn(global::System.IntPtr __instance, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase8NavigateEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Navigate(global::System.IntPtr __instance, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase21HandleAsNavigationKeyERK10wxKeyEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HandleAsNavigationKey(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase20MoveBeforeInTabOrderEP8wxWindow")]
            internal static extern void MoveBeforeInTabOrder(global::System.IntPtr __instance, global::System.IntPtr win);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase19MoveAfterInTabOrderEP8wxWindow")]
            internal static extern void MoveAfterInTabOrder(global::System.IntPtr __instance, global::System.IntPtr win);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14GetPrevSiblingEv")]
            internal static extern global::System.IntPtr GetPrevSibling(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14GetNextSiblingEv")]
            internal static extern global::System.IntPtr GetNextSibling(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase9GetParentEv")]
            internal static extern global::System.IntPtr GetParent(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14GetGrandParentEv")]
            internal static extern global::System.IntPtr GetGrandParent(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase10FindWindowEl")]
            internal static extern global::System.IntPtr FindWindow(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase14FindWindowByIdElPK8wxWindow")]
            internal static extern global::System.IntPtr FindWindowById(int winid, global::System.IntPtr parent);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase15GetEventHandlerEv")]
            internal static extern global::System.IntPtr GetEventHandler(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase15SetEventHandlerEP12wxEvtHandler")]
            internal static extern void SetEventHandler(global::System.IntPtr __instance, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase16PushEventHandlerEP12wxEvtHandler")]
            internal static extern void PushEventHandler(global::System.IntPtr __instance, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase15PopEventHandlerEb")]
            internal static extern global::System.IntPtr PopEventHandler(global::System.IntPtr __instance, bool deleteHandler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase18RemoveEventHandlerEP12wxEvtHandler")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RemoveEventHandler(global::System.IntPtr __instance, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase18ProcessWindowEventER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessWindowEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase25ProcessWindowEventLocallyER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessWindowEventLocally(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase17HandleWindowEventER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HandleWindowEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase7FromDIPERK6wxSize")]
            internal static extern global::wxSharp.Size.__Internal FromDIP(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase7FromDIPERK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal FromDIP_1(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase7FromDIPEi")]
            internal static extern int FromDIP(global::System.IntPtr __instance, int d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase5ToDIPERK6wxSize")]
            internal static extern global::wxSharp.Size.__Internal ToDIP(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase5ToDIPERK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal ToDIP_1(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase5ToDIPEi")]
            internal static extern int ToDIP(global::System.IntPtr __instance, int d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase21ConvertPixelsToDialogERK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal ConvertPixelsToDialog(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase21ConvertDialogToPixelsERK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal ConvertDialogToPixels(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase21ConvertPixelsToDialogERK6wxSize")]
            internal static extern global::wxSharp.Size.__Internal ConvertPixelsToDialog_1(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase21ConvertDialogToPixelsERK6wxSize")]
            internal static extern global::wxSharp.Size.__Internal ConvertDialogToPixels_1(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase12CaptureMouseEv")]
            internal static extern void CaptureMouse(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase12ReleaseMouseEv")]
            internal static extern void ReleaseMouse(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase10GetCaptureEv")]
            internal static extern global::System.IntPtr GetCapture();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase11RefreshRectERK6wxRectb")]
            internal static extern void RefreshRect(global::System.IntPtr __instance, global::System.IntPtr rect, bool eraseBackground);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase6FreezeEv")]
            internal static extern void Freeze(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase4ThawEv")]
            internal static extern void Thaw(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase8IsFrozenEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFrozen(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase19GetUpdateClientRectEv")]
            internal static extern void GetUpdateClientRect(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase9IsExposedEii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsExposed(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase9IsExposedEiiii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsExposed(global::System.IntPtr __instance, int x, int y, int w, int h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase9IsExposedERK7wxPoint")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsExposed(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase9IsExposedERK6wxRect")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsExposed_1(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase25GetClassDefaultAttributesE15wxWindowVariant")]
            internal static extern void GetClassDefaultAttributes(global::System.IntPtr @return, global::wxSharp.WindowVariant variant);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase22SetOwnBackgroundColourERK8wxColour")]
            internal static extern void SetOwnBackgroundColour(global::System.IntPtr __instance, global::System.IntPtr colour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase19GetBackgroundColourEv")]
            internal static extern void GetBackgroundColour(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase24InheritsBackgroundColourEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InheritsBackgroundColour(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase8UseBgColEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UseBgCol(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase19UseBackgroundColourEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UseBackgroundColour(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase22SetOwnForegroundColourERK8wxColour")]
            internal static extern void SetOwnForegroundColour(global::System.IntPtr __instance, global::System.IntPtr colour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase19GetForegroundColourEv")]
            internal static extern void GetForegroundColour(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase19UseForegroundColourEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UseForegroundColour(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase24InheritsForegroundColourEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InheritsForegroundColour(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase18GetBackgroundStyleEv")]
            internal static extern global::wxSharp.BackgroundStyle GetBackgroundStyle(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase8SetCaretEP7wxCaret")]
            internal static extern void SetCaret(global::System.IntPtr __instance, global::System.IntPtr caret);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase8GetCaretEv")]
            internal static extern global::System.IntPtr GetCaret(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14ClientToScreenEPiS0_")]
            internal static extern void ClientToScreen(global::System.IntPtr __instance, int* x, int* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14ScreenToClientEPiS0_")]
            internal static extern void ScreenToClient(global::System.IntPtr __instance, int* x, int* y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14ClientToScreenERK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal ClientToScreen(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14ScreenToClientERK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal ScreenToClient(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase7HitTestEii")]
            internal static extern global::wxSharp.HitTest HitTest(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase7HitTestERK7wxPoint")]
            internal static extern global::wxSharp.HitTest HitTest(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase9GetBorderEl")]
            internal static extern global::wxSharp.Border GetBorder(global::System.IntPtr __instance, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase9GetBorderEv")]
            internal static extern global::wxSharp.Border GetBorder(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase9PopupMenuEP6wxMenuRK7wxPoint")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool PopupMenu(global::System.IntPtr __instance, global::System.IntPtr menu, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase9PopupMenuEP6wxMenuii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool PopupMenu(global::System.IntPtr __instance, global::System.IntPtr menu, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase12HasScrollbarEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasScrollbar(global::System.IntPtr __instance, int orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase6LineUpEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LineUp(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase8LineDownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LineDown(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase6PageUpEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool PageUp(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase8PageDownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool PageDown(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase10SetToolTipEP9wxToolTip")]
            internal static extern void SetToolTip(global::System.IntPtr __instance, global::System.IntPtr tip);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase12UnsetToolTipEv")]
            internal static extern void UnsetToolTip(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase10GetToolTipEv")]
            internal static extern global::System.IntPtr GetToolTip(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase11CopyToolTipEP9wxToolTip")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CopyToolTip(global::System.IntPtr __instance, global::System.IntPtr tip);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase14SetConstraintsEP19wxLayoutConstraints")]
            internal static extern void SetConstraints(global::System.IntPtr __instance, global::System.IntPtr constraints);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase14GetConstraintsEv")]
            internal static extern global::System.IntPtr GetConstraints(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase16UnsetConstraintsEP19wxLayoutConstraints")]
            internal static extern void UnsetConstraints(global::System.IntPtr __instance, global::System.IntPtr c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase24GetConstraintsInvolvedInEv")]
            internal static extern global::System.IntPtr GetConstraintsInvolvedIn(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase24DeleteRelatedConstraintsEv")]
            internal static extern void DeleteRelatedConstraints(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase16ResetConstraintsEv")]
            internal static extern void ResetConstraints(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase13SetAutoLayoutEb")]
            internal static extern void SetAutoLayout(global::System.IntPtr __instance, bool autoLayout);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase13GetAutoLayoutEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetAutoLayout(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase8SetSizerEP7wxSizerb")]
            internal static extern void SetSizer(global::System.IntPtr __instance, global::System.IntPtr sizer, bool deleteOld);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase14SetSizerAndFitEP7wxSizerb")]
            internal static extern void SetSizerAndFit(global::System.IntPtr __instance, global::System.IntPtr sizer, bool deleteOld);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase8GetSizerEv")]
            internal static extern global::System.IntPtr GetSizer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase18SetContainingSizerEP7wxSizer")]
            internal static extern void SetContainingSizer(global::System.IntPtr __instance, global::System.IntPtr sizer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase18GetContainingSizerEv")]
            internal static extern global::System.IntPtr GetContainingSizer(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase18OnSysColourChangedER23wxSysColourChangedEvent")]
            internal static extern void OnSysColourChanged(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase12OnInitDialogER17wxInitDialogEvent")]
            internal static extern void OnInitDialog(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase13OnMiddleClickER12wxMouseEvent")]
            internal static extern void OnMiddleClick(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase6OnHelpER11wxHelpEvent")]
            internal static extern void OnHelp(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase22WXSendContextMenuEventERK7wxPoint")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WXSendContextMenuEvent(global::System.IntPtr __instance, global::System.IntPtr posInScreenCoords);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase16HasCustomPaletteEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasCustomPalette(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase28GetAncestorWithCustomPaletteEv")]
            internal static extern global::System.IntPtr GetAncestorWithCustomPalette(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxWindowBase12DoGetSiblingENS_11WindowOrderE")]
            internal static extern global::System.IntPtr DoGetSibling(global::System.IntPtr __instance, global::wxSharp.Window.WindowOrder order);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase18SatisfyConstraintsEv")]
            internal static extern void SatisfyConstraints(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase16SendDestroyEventEv")]
            internal static extern void SendDestroyEvent(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase12WidthDefaultEi")]
            internal static extern int WidthDefault(int w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase13HeightDefaultEi")]
            internal static extern int HeightDefault(int h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxWindowBase17NotifyCaptureLostEv")]
            internal static extern void NotifyCaptureLost();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler14GetNextHandlerEv")]
            internal static extern global::System.IntPtr GetNextHandler(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler18GetPreviousHandlerEv")]
            internal static extern global::System.IntPtr GetPreviousHandler(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler20SetEvtHandlerEnabledEb")]
            internal static extern void SetEvtHandlerEnabled(global::System.IntPtr __instance, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler20GetEvtHandlerEnabledEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetEvtHandlerEnabled(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler6UnlinkEv")]
            internal static extern void Unlink(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler10IsUnlinkedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUnlinked(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18SafelyProcessEventER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SafelyProcessEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ProcessEventLocallyER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessEventLocally(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler20ProcessPendingEventsEv")]
            internal static extern void ProcessPendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19DeletePendingEventsEv")]
            internal static extern void DeletePendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18ProcessThreadEventERK7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessThreadEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler13SetClientDataEPv")]
            internal static extern void SetClientData(global::System.IntPtr __instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler13GetClientDataEv")]
            internal static extern global::System.IntPtr GetClientData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler23SearchDynamicEventTableER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SearchDynamicEventTable(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ClearEventHashTableEv")]
            internal static extern void ClearEventHashTable(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler15OnSinkDestroyedEPS_")]
            internal static extern void OnSinkDestroyed(global::System.IntPtr __instance, global::System.IntPtr sink);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler11TryHereOnlyER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TryHereOnly(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler16TryBeforeAndHereER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TryBeforeAndHere(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxObject10GetRefDataEv")]
            internal static extern global::System.IntPtr GetRefData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject10SetRefDataEP12wxRefCounter")]
            internal static extern void SetRefData(global::System.IntPtr __instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject3RefERKS_")]
            internal static extern void Ref(global::System.IntPtr __instance, global::System.IntPtr clone);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject5UnRefEv")]
            internal static extern void UnRef(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject7UnShareEv")]
            internal static extern void UnShare(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxObject8IsSameAsERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSameAs(global::System.IntPtr __instance, global::System.IntPtr o);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject14AllocExclusiveEv")]
            internal static extern void AllocExclusive(global::System.IntPtr __instance);
        }

        public enum NavigationKind : uint
        {
            Navigation_Tab = 0,
            Navigation_Accel = 1
        }

        public enum WindowOrder : uint
        {
            OrderBefore = 0,
            OrderAfter = 1
        }

        public unsafe partial class ChildrenRepositioningGuard : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_win;

                [FieldOffset(4)]
                internal byte m_callEnd;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxWindowBase26ChildrenRepositioningGuardD2Ev")]
                internal static extern void dtor(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Window.ChildrenRepositioningGuard> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Window.ChildrenRepositioningGuard>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.Window.ChildrenRepositioningGuard __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.Window.ChildrenRepositioningGuard(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.Window.ChildrenRepositioningGuard __CreateInstance(global::wxSharp.Window.ChildrenRepositioningGuard.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.Window.ChildrenRepositioningGuard(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.Window.ChildrenRepositioningGuard.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Window.ChildrenRepositioningGuard.__Internal));
                *(global::wxSharp.Window.ChildrenRepositioningGuard.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private ChildrenRepositioningGuard(global::wxSharp.Window.ChildrenRepositioningGuard.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected ChildrenRepositioningGuard(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.Window.ChildrenRepositioningGuard __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (disposing)
                    __Internal.dtor(__Instance);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Window> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Window>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.Window __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Window(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Window __CreateInstance(global::wxSharp.Window.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Window(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Window.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Window.__Internal));
            *(global::wxSharp.Window.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Window(global::wxSharp.Window.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Window(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public Window()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Window.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.Window");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.Window __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.Window.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public virtual void SendSizeEvent(int flags)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 52 * 4);
            var ___SendSizeEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int));
            ___SendSizeEventDelegate(__Instance, flags);
        }

        public virtual void Raise()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 29 * 4);
            var ___RaiseDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___RaiseDelegate(__Instance);
        }

        public virtual void Lower()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 30 * 4);
            var ___LowerDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___LowerDelegate(__Instance);
        }

        public virtual bool Show(bool show)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 55 * 4);
            var ___ShowDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_bool));
            var __ret = ___ShowDelegate(__Instance, show);
            return __ret;
        }

        public virtual bool ShowWithEffect(global::wxSharp.ShowEffect effect, uint timeout)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 56 * 4);
            var ___ShowWithEffectDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint));
            var __ret = ___ShowWithEffectDelegate(__Instance, effect, timeout);
            return __ret;
        }

        public virtual bool HideWithEffect(global::wxSharp.ShowEffect effect, uint timeout)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 57 * 4);
            var ___HideWithEffectDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint));
            var __ret = ___HideWithEffectDelegate(__Instance, effect, timeout);
            return __ret;
        }

        public virtual bool IsShownOnScreen()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 60 * 4);
            var ___IsShownOnScreenDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsShownOnScreenDelegate(__Instance);
            return __ret;
        }

        public virtual void SetFocus()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 67 * 4);
            var ___SetFocusDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___SetFocusDelegate(__Instance);
        }

        public virtual void WarpPointer(int x, int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 90 * 4);
            var ___WarpPointerDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int));
            ___WarpPointerDelegate(__Instance, x, y);
        }

        public virtual bool EnableTouchEvents(int eventsMask)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 92 * 4);
            var ___EnableTouchEventsDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___EnableTouchEventsDelegate(__Instance, eventsMask);
            return __ret;
        }

        public virtual void Refresh(bool eraseBackground, global::wxSharp.Rect rect)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 93 * 4);
            var ___RefreshDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool_IntPtr));
            var __arg1 = ReferenceEquals(rect, null) ? global::System.IntPtr.Zero : rect.__Instance;
            ___RefreshDelegate(__Instance, eraseBackground, __arg1);
        }

        public virtual void Update()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 94 * 4);
            var ___UpdateDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___UpdateDelegate(__Instance);
        }

        public virtual void ClearBackground()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 95 * 4);
            var ___ClearBackgroundDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___ClearBackgroundDelegate(__Instance);
        }

        public virtual bool SetBackgroundColour(global::wxSharp.Color colour)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 102 * 4);
            var ___SetBackgroundColourDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = colour.__Instance;
            var __ret = ___SetBackgroundColourDelegate(__Instance, __arg0);
            return __ret;
        }

        public virtual bool SetForegroundColour(global::wxSharp.Color colour)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 103 * 4);
            var ___SetForegroundColourDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = colour.__Instance;
            var __ret = ___SetForegroundColourDelegate(__Instance, __arg0);
            return __ret;
        }

        public virtual bool SetBackgroundStyle(global::wxSharp.BackgroundStyle style)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 104 * 4);
            var ___SetBackgroundStyleDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxBackgroundStyle) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxBackgroundStyle));
            var __ret = ___SetBackgroundStyleDelegate(__Instance, style);
            return __ret;
        }

        public virtual int GetCharHeight()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 109 * 4);
            var ___GetCharHeightDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___GetCharHeightDelegate(__Instance);
            return __ret;
        }

        public virtual int GetCharWidth()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 110 * 4);
            var ___GetCharWidthDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___GetCharWidthDelegate(__Instance);
            return __ret;
        }

        public virtual void SetScrollbar(int orient, int pos, int thumbVisible, int range, bool refresh)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 115 * 4);
            var ___SetScrollbarDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_bool));
            ___SetScrollbarDelegate(__Instance, orient, pos, thumbVisible, range, refresh);
        }

        public virtual void SetScrollPos(int orient, int pos, bool refresh)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 116 * 4);
            var ___SetScrollPosDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int_bool));
            ___SetScrollPosDelegate(__Instance, orient, pos, refresh);
        }

        public virtual int GetScrollPos(int orient)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 117 * 4);
            var ___GetScrollPosDelegate = (global::wxSharp.Delegates.Func_int_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr_int));
            var __ret = ___GetScrollPosDelegate(__Instance, orient);
            return __ret;
        }

        public virtual int GetScrollThumb(int orient)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 118 * 4);
            var ___GetScrollThumbDelegate = (global::wxSharp.Delegates.Func_int_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr_int));
            var __ret = ___GetScrollThumbDelegate(__Instance, orient);
            return __ret;
        }

        public virtual int GetScrollRange(int orient)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 119 * 4);
            var ___GetScrollRangeDelegate = (global::wxSharp.Delegates.Func_int_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr_int));
            var __ret = ___GetScrollRangeDelegate(__Instance, orient);
            return __ret;
        }

        public virtual void ScrollWindow(int dx, int dy, global::wxSharp.Rect rect)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 120 * 4);
            var ___ScrollWindowDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int_IntPtr));
            var __arg2 = ReferenceEquals(rect, null) ? global::System.IntPtr.Zero : rect.__Instance;
            ___ScrollWindowDelegate(__Instance, dx, dy, __arg2);
        }

        public virtual void AlwaysShowScrollbars(bool horz, bool vert)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 123 * 4);
            var ___AlwaysShowScrollbarsDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool_bool));
            ___AlwaysShowScrollbarsDelegate(__Instance, horz, vert);
        }

        public virtual bool IsScrollbarAlwaysShown(int orient)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 124 * 4);
            var ___IsScrollbarAlwaysShownDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___IsScrollbarAlwaysShownDelegate(__Instance, orient);
            return __ret;
        }

        public virtual bool RegisterHotKey(int hotkeyId, int modifiers, int keycode)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 87 * 4);
            var ___RegisterHotKeyDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int));
            var __ret = ___RegisterHotKeyDelegate(__Instance, hotkeyId, modifiers, keycode);
            return __ret;
        }

        public virtual bool UnregisterHotKey(int hotkeyId)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 88 * 4);
            var ___UnregisterHotKeyDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___UnregisterHotKeyDelegate(__Instance, hotkeyId);
            return __ret;
        }

        public virtual void SetDropTarget(global::wxSharp.DropTarget dropTarget)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 126 * 4);
            var ___SetDropTargetDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(dropTarget, null) ? global::System.IntPtr.Zero : dropTarget.__Instance;
            ___SetDropTargetDelegate(__Instance, __arg0);
        }

        public virtual global::wxSharp.NSView GetHandle()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 143 * 4);
            var ___GetHandleDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetHandleDelegate(__Instance);
            global::wxSharp.NSView __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.NSView.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.NSView) global::wxSharp.NSView.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.NSView.__CreateInstance(__ret);
            return __result0;
        }

        public virtual bool SetTransparent(byte alpha)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 139 * 4);
            var ___SetTransparentDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_byte) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_byte));
            var __ret = ___SetTransparentDelegate(__Instance, alpha);
            return __ret;
        }

        public virtual bool CanSetTransparent()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 140 * 4);
            var ___CanSetTransparentDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___CanSetTransparentDelegate(__Instance);
            return __ret;
        }

        public virtual byte GetTransparent()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 186 * 4);
            var ___GetTransparentDelegate = (global::wxSharp.Delegates.Func_byte_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_byte_IntPtr));
            var __ret = ___GetTransparentDelegate(__Instance);
            return __ret;
        }

        public void OnMouseEvent(global::wxSharp.MouseEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnMouseEvent(__Instance, __arg0);
        }

        public virtual bool AcceptsFocus()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 70 * 4);
            var ___AcceptsFocusDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___AcceptsFocusDelegate(__Instance);
            return __ret;
        }

        public virtual bool IsDoubleBuffered()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 98 * 4);
            var ___IsDoubleBufferedDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsDoubleBufferedDelegate(__Instance);
            return __ret;
        }

        public virtual global::wxSharp.Point GetClientAreaOrigin()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 31 * 4);
            var ___GetClientAreaOriginDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxPoint___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxPoint___Internal_IntPtr));
            var __ret = ___GetClientAreaOriginDelegate(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public virtual void TriggerScrollEvent(int scrollEvent)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 187 * 4);
            var ___TriggerScrollEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int));
            ___TriggerScrollEventDelegate(__Instance, scrollEvent);
        }

        public virtual double GetContentScaleFactor()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 49 * 4);
            var ___GetContentScaleFactorDelegate = (global::wxSharp.Delegates.Func_double_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_double_IntPtr));
            var __ret = ___GetContentScaleFactorDelegate(__Instance);
            return __ret;
        }

        public virtual bool IsClientAreaChild(global::wxSharp.Window child)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 79 * 4);
            var ___IsClientAreaChildDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(child, null) ? global::System.IntPtr.Zero : child.__Instance;
            var __ret = ___IsClientAreaChildDelegate(__Instance, __arg0);
            return __ret;
        }

        protected virtual void DoEnable(bool enable)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 155 * 4);
            var ___DoEnableDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool));
            ___DoEnableDelegate(__Instance, enable);
        }

        protected virtual void DoClientToScreen(ref int x, ref int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 159 * 4);
            var ___DoClientToScreenDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr));
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    ___DoClientToScreenDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        protected virtual void DoScreenToClient(ref int x, ref int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 160 * 4);
            var ___DoScreenToClientDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr));
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    ___DoScreenToClientDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        protected virtual void DoCaptureMouse()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 162 * 4);
            var ___DoCaptureMouseDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DoCaptureMouseDelegate(__Instance);
        }

        protected virtual void DoReleaseMouse()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 163 * 4);
            var ___DoReleaseMouseDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DoReleaseMouseDelegate(__Instance);
        }

        protected virtual void DoGetPosition(ref int x, ref int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 164 * 4);
            var ___DoGetPositionDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr));
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    ___DoGetPositionDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        protected virtual void DoGetSize(ref int width, ref int height)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 166 * 4);
            var ___DoGetSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr));
            fixed (int* __width0 = &width)
            {
                var __arg0 = __width0;
                fixed (int* __height1 = &height)
                {
                    var __arg1 = __height1;
                    ___DoGetSizeDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        protected virtual void DoGetClientSize(ref int width, ref int height)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 167 * 4);
            var ___DoGetClientSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr));
            fixed (int* __width0 = &width)
            {
                var __arg0 = __width0;
                fixed (int* __height1 = &height)
                {
                    var __arg1 = __height1;
                    ___DoGetClientSizeDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        protected virtual global::wxSharp.Size DoGetBestSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 168 * 4);
            var ___DoGetBestSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___DoGetBestSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        protected virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 172 * 4);
            var ___DoSetSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int));
            ___DoSetSizeDelegate(__Instance, x, y, width, height, sizeFlags);
        }

        protected virtual void DoSetClientSize(int width, int height)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 173 * 4);
            var ___DoSetClientSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int));
            ___DoSetClientSizeDelegate(__Instance, width, height);
        }

        protected virtual void DoMoveWindow(int x, int y, int width, int height)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 176 * 4);
            var ___DoMoveWindowDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int_int_int));
            ___DoMoveWindowDelegate(__Instance, x, y, width, height);
        }

        protected virtual void DoSetToolTip(global::wxSharp.ToolTip tip)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 179 * 4);
            var ___DoSetToolTipDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(tip, null) ? global::System.IntPtr.Zero : tip.__Instance;
            ___DoSetToolTipDelegate(__Instance, __arg0);
        }

        protected virtual bool DoPopupMenu(global::wxSharp.Menu menu, int x, int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 180 * 4);
            var ___DoPopupMenuDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int));
            var __arg0 = ReferenceEquals(menu, null) ? global::System.IntPtr.Zero : menu.__Instance;
            var __ret = ___DoPopupMenuDelegate(__Instance, __arg0, x, y);
            return __ret;
        }

        protected virtual void DoSetWindowVariant(global::wxSharp.WindowVariant variant)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 182 * 4);
            var ___DoSetWindowVariantDelegate = (global::wxSharp.Delegates.Action_IntPtr_wxSharp_wxWindowVariant) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_wxSharp_wxWindowVariant));
            ___DoSetWindowVariantDelegate(__Instance, variant);
        }

        protected virtual void DoFreeze()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 183 * 4);
            var ___DoFreezeDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DoFreezeDelegate(__Instance);
        }

        protected virtual void DoThaw()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 184 * 4);
            var ___DoThawDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DoThawDelegate(__Instance);
        }

        protected virtual global::wxSharp.Size DoGetSizeFromClientSize(global::wxSharp.Size size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 211 * 4);
            var ___DoGetSizeFromClientSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr));
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            var __ret = ___DoGetSizeFromClientSizeDelegate(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.WidgetImpl GetPeer()
        {
            var __ret = __Internal.GetPeer(__Instance);
            global::wxSharp.WidgetImpl __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WidgetImpl.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WidgetImpl) global::wxSharp.WidgetImpl.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.WidgetImpl.__CreateInstance(__ret);
            return __result0;
        }

        public void DontCreatePeer()
        {
            __Internal.DontCreatePeer(__Instance);
        }

        public bool ShouldCreatePeer()
        {
            var __ret = __Internal.ShouldCreatePeer(__Instance);
            return __ret;
        }

        public void SetPeer(global::wxSharp.WidgetImpl peer)
        {
            var __arg0 = ReferenceEquals(peer, null) ? global::System.IntPtr.Zero : peer.__Instance;
            __Internal.SetPeer(__Instance, __arg0);
        }

        public void SetWrappingPeer(global::wxSharp.WidgetImpl wrapper)
        {
            var __arg0 = ReferenceEquals(wrapper, null) ? global::System.IntPtr.Zero : wrapper.__Instance;
            __Internal.SetWrappingPeer(__Instance, __arg0);
        }

        public bool IsNativeWindowWrapper()
        {
            var __ret = __Internal.IsNativeWindowWrapper(__Instance);
            return __ret;
        }

        public bool Close(bool force)
        {
            var __ret = __Internal.Close(__Instance, force);
            return __ret;
        }

        public virtual bool Destroy()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___DestroyDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___DestroyDelegate(__Instance);
            return __ret;
        }

        public bool DestroyChildren()
        {
            var __ret = __Internal.DestroyChildren(__Instance);
            return __ret;
        }

        public bool IsBeingDeleted()
        {
            var __ret = __Internal.IsBeingDeleted(__Instance);
            return __ret;
        }

        public void SetWindowVariant(global::wxSharp.WindowVariant variant)
        {
            __Internal.SetWindowVariant(__Instance, variant);
        }

        public global::wxSharp.WindowVariant GetWindowVariant()
        {
            var __ret = __Internal.GetWindowVariant(__Instance);
            return __ret;
        }

        public virtual int AdjustForLayoutDirection(int x, int width, int widthTotal)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 4);
            var ___AdjustForLayoutDirectionDelegate = (global::wxSharp.Delegates.Func_int_IntPtr_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr_int_int_int));
            var __ret = ___AdjustForLayoutDirectionDelegate(__Instance, x, width, widthTotal);
            return __ret;
        }

        public virtual void SetId(int winid)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 4);
            var ___SetIdDelegate = (global::wxSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int));
            ___SetIdDelegate(__Instance, winid);
        }

        public int GetId()
        {
            var __ret = __Internal.GetId(__Instance);
            return __ret;
        }

        public void SetSize(int x, int y, int width, int height, int sizeFlags)
        {
            __Internal.SetSize(__Instance, x, y, width, height, sizeFlags);
        }

        public void SetSize(int width, int height)
        {
            __Internal.SetSize(__Instance, width, height);
        }

        public void SetSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.SetSize(__Instance, __arg0);
        }

        public void SetSize(global::wxSharp.Rect rect, int sizeFlags)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.SetSize(__Instance, __arg0, sizeFlags);
        }

        public void Move(int x, int y, int flags)
        {
            __Internal.Move(__Instance, x, y, flags);
        }

        public void Move(global::wxSharp.Point pt, int flags)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.Move(__Instance, __arg0, flags);
        }

        public void SetPosition(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.SetPosition(__Instance, __arg0);
        }

        public void SetClientSize(int width, int height)
        {
            __Internal.SetClientSize(__Instance, width, height);
        }

        public void SetClientSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.SetClientSize(__Instance, __arg0);
        }

        public void SetClientSize(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.SetClientSize_1(__Instance, __arg0);
        }

        public void GetPosition(ref int x, ref int y)
        {
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    __Internal.GetPosition(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Point GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void GetScreenPosition(ref int x, ref int y)
        {
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    __Internal.GetScreenPosition(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Point GetScreenPosition()
        {
            var __ret = __Internal.GetScreenPosition(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void GetSize(ref int w, ref int h)
        {
            fixed (int* __w0 = &w)
            {
                var __arg0 = __w0;
                fixed (int* __h1 = &h)
                {
                    var __arg1 = __h1;
                    __Internal.GetSize(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Size GetSize()
        {
            var __ret = __Internal.GetSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void GetClientSize(ref int w, ref int h)
        {
            fixed (int* __w0 = &w)
            {
                var __arg0 = __w0;
                fixed (int* __h1 = &h)
                {
                    var __arg1 = __h1;
                    __Internal.GetClientSize(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Size GetClientSize()
        {
            var __ret = __Internal.GetClientSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Rect GetRect()
        {
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.GetRect(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public global::wxSharp.Rect GetScreenRect()
        {
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.GetScreenRect(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public global::wxSharp.Rect GetClientRect()
        {
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.GetClientRect(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.Size ClientToWindowSize(global::wxSharp.Size size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 32 * 4);
            var ___ClientToWindowSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr));
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            var __ret = ___ClientToWindowSizeDelegate(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.Size WindowToClientSize(global::wxSharp.Size size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 33 * 4);
            var ___WindowToClientSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr));
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            var __ret = ___WindowToClientSizeDelegate(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Size GetBestSize()
        {
            var __ret = __Internal.GetBestSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void GetBestSize(ref int w, ref int h)
        {
            fixed (int* __w0 = &w)
            {
                var __arg0 = __w0;
                fixed (int* __h1 = &h)
                {
                    var __arg1 = __h1;
                    __Internal.GetBestSize(__Instance, __arg0, __arg1);
                }
            }
        }

        public int GetBestHeight(int width)
        {
            var __ret = __Internal.GetBestHeight(__Instance, width);
            return __ret;
        }

        public int GetBestWidth(int height)
        {
            var __ret = __Internal.GetBestWidth(__Instance, height);
            return __ret;
        }

        public void SetScrollHelper(global::wxSharp.ScrollHelper sh)
        {
            var __arg0 = ReferenceEquals(sh, null) ? global::System.IntPtr.Zero : sh.__Instance;
            __Internal.SetScrollHelper(__Instance, __arg0);
        }

        public global::wxSharp.ScrollHelper GetScrollHelper()
        {
            var __ret = __Internal.GetScrollHelper(__Instance);
            global::wxSharp.ScrollHelper __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.ScrollHelper.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.ScrollHelper) global::wxSharp.ScrollHelper.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.ScrollHelper.__CreateInstance(__ret);
            return __result0;
        }

        public void InvalidateBestSize()
        {
            __Internal.InvalidateBestSize(__Instance);
        }

        public void CacheBestSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.CacheBestSize(__Instance, __arg0);
        }

        public virtual global::wxSharp.Size GetEffectiveMinSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 34 * 4);
            var ___GetEffectiveMinSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___GetEffectiveMinSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void SetInitialSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.SetInitialSize(__Instance, __arg0);
        }

        public void Centre(int dir)
        {
            __Internal.Centre(__Instance, dir);
        }

        public void Center(int dir)
        {
            __Internal.Center(__Instance, dir);
        }

        public void CentreOnParent(int dir)
        {
            __Internal.CentreOnParent(__Instance, dir);
        }

        public void CenterOnParent(int dir)
        {
            __Internal.CenterOnParent(__Instance, dir);
        }

        public virtual void Fit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 35 * 4);
            var ___FitDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___FitDelegate(__Instance);
        }

        public virtual void FitInside()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 36 * 4);
            var ___FitInsideDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___FitInsideDelegate(__Instance);
        }

        public virtual void SetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 37 * 4);
            var ___SetSizeHintsDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int));
            ___SetSizeHintsDelegate(__Instance, minW, minH, maxW, maxH, incW, incH);
        }

        public void SetSizeHints(global::wxSharp.Size minSize, global::wxSharp.Size maxSize, global::wxSharp.Size incSize)
        {
            if (ReferenceEquals(minSize, null))
                throw new global::System.ArgumentNullException("minSize", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = minSize.__Instance;
            if (ReferenceEquals(maxSize, null))
                throw new global::System.ArgumentNullException("maxSize", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = maxSize.__Instance;
            if (ReferenceEquals(incSize, null))
                throw new global::System.ArgumentNullException("incSize", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = incSize.__Instance;
            __Internal.SetSizeHints(__Instance, __arg0, __arg1, __arg2);
        }

        public virtual void SetMinSize(global::wxSharp.Size minSize)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 38 * 4);
            var ___SetMinSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(minSize, null))
                throw new global::System.ArgumentNullException("minSize", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = minSize.__Instance;
            ___SetMinSizeDelegate(__Instance, __arg0);
        }

        public virtual void SetMaxSize(global::wxSharp.Size maxSize)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 39 * 4);
            var ___SetMaxSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(maxSize, null))
                throw new global::System.ArgumentNullException("maxSize", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = maxSize.__Instance;
            ___SetMaxSizeDelegate(__Instance, __arg0);
        }

        public virtual void SetMinClientSize(global::wxSharp.Size size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 40 * 4);
            var ___SetMinClientSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            ___SetMinClientSizeDelegate(__Instance, __arg0);
        }

        public virtual void SetMaxClientSize(global::wxSharp.Size size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 41 * 4);
            var ___SetMaxClientSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            ___SetMaxClientSizeDelegate(__Instance, __arg0);
        }

        public virtual global::wxSharp.Size GetMinSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 42 * 4);
            var ___GetMinSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___GetMinSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.Size GetMaxSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 43 * 4);
            var ___GetMaxSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___GetMaxSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.Size GetMinClientSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 44 * 4);
            var ___GetMinClientSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___GetMinClientSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.Size GetMaxClientSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 45 * 4);
            var ___GetMaxClientSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___GetMaxClientSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public int GetMinWidth()
        {
            var __ret = __Internal.GetMinWidth(__Instance);
            return __ret;
        }

        public int GetMinHeight()
        {
            var __ret = __Internal.GetMinHeight(__Instance);
            return __ret;
        }

        public int GetMaxWidth()
        {
            var __ret = __Internal.GetMaxWidth(__Instance);
            return __ret;
        }

        public int GetMaxHeight()
        {
            var __ret = __Internal.GetMaxHeight(__Instance);
            return __ret;
        }

        public void SetVirtualSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.SetVirtualSize(__Instance, __arg0);
        }

        public void SetVirtualSize(int x, int y)
        {
            __Internal.SetVirtualSize(__Instance, x, y);
        }

        public global::wxSharp.Size GetVirtualSize()
        {
            var __ret = __Internal.GetVirtualSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void GetVirtualSize(ref int x, ref int y)
        {
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    __Internal.GetVirtualSize(__Instance, __arg0, __arg1);
                }
            }
        }

        public virtual void DoSetVirtualSize(int x, int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 46 * 4);
            var ___DoSetVirtualSizeDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int));
            ___DoSetVirtualSizeDelegate(__Instance, x, y);
        }

        public virtual global::wxSharp.Size DoGetVirtualSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 47 * 4);
            var ___DoGetVirtualSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___DoGetVirtualSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.Size GetBestVirtualSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 48 * 4);
            var ___GetBestVirtualSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___GetBestVirtualSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public virtual global::wxSharp.Size GetWindowBorderSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 50 * 4);
            var ___GetWindowBorderSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___GetWindowBorderSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public virtual bool InformFirstDirection(int direction, int size, int availableOtherDir)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 51 * 4);
            var ___InformFirstDirectionDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int));
            var __ret = ___InformFirstDirectionDelegate(__Instance, direction, size, availableOtherDir);
            return __ret;
        }

        public void SendSizeEventToParent(int flags)
        {
            __Internal.SendSizeEventToParent(__Instance, flags);
        }

        public void PostSizeEvent()
        {
            __Internal.PostSizeEvent(__Instance);
        }

        public void PostSizeEventToParent()
        {
            __Internal.PostSizeEventToParent(__Instance);
        }

        public virtual bool BeginRepositioningChildren()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 53 * 4);
            var ___BeginRepositioningChildrenDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___BeginRepositioningChildrenDelegate(__Instance);
            return __ret;
        }

        public virtual void EndRepositioningChildren()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 54 * 4);
            var ___EndRepositioningChildrenDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___EndRepositioningChildrenDelegate(__Instance);
        }

        public bool Hide()
        {
            var __ret = __Internal.Hide(__Instance);
            return __ret;
        }

        public virtual bool Enable(bool enable)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 58 * 4);
            var ___EnableDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_bool));
            var __ret = ___EnableDelegate(__Instance, enable);
            return __ret;
        }

        public bool Disable()
        {
            var __ret = __Internal.Disable(__Instance);
            return __ret;
        }

        public virtual bool IsShown()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 59 * 4);
            var ___IsShownDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsShownDelegate(__Instance);
            return __ret;
        }

        public bool IsEnabled()
        {
            var __ret = __Internal.IsEnabled(__Instance);
            return __ret;
        }

        public bool IsThisEnabled()
        {
            var __ret = __Internal.IsThisEnabled(__Instance);
            return __ret;
        }

        public virtual void SetWindowStyleFlag(int style)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 61 * 4);
            var ___SetWindowStyleFlagDelegate = (global::wxSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int));
            ___SetWindowStyleFlagDelegate(__Instance, style);
        }

        public virtual int GetWindowStyleFlag()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 62 * 4);
            var ___GetWindowStyleFlagDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___GetWindowStyleFlagDelegate(__Instance);
            return __ret;
        }

        public void SetWindowStyle(int style)
        {
            __Internal.SetWindowStyle(__Instance, style);
        }

        public int GetWindowStyle()
        {
            var __ret = __Internal.GetWindowStyle(__Instance);
            return __ret;
        }

        public bool HasFlag(int flag)
        {
            var __ret = __Internal.HasFlag(__Instance, flag);
            return __ret;
        }

        public virtual bool IsRetained()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 63 * 4);
            var ___IsRetainedDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsRetainedDelegate(__Instance);
            return __ret;
        }

        public bool ToggleWindowStyle(int flag)
        {
            var __ret = __Internal.ToggleWindowStyle(__Instance, flag);
            return __ret;
        }

        public virtual void SetExtraStyle(int exStyle)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 64 * 4);
            var ___SetExtraStyleDelegate = (global::wxSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int));
            ___SetExtraStyleDelegate(__Instance, exStyle);
        }

        public int GetExtraStyle()
        {
            var __ret = __Internal.GetExtraStyle(__Instance);
            return __ret;
        }

        public bool HasExtraStyle(int exFlag)
        {
            var __ret = __Internal.HasExtraStyle(__Instance, exFlag);
            return __ret;
        }

        public virtual void SetThemeEnabled(bool enableTheme)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 65 * 4);
            var ___SetThemeEnabledDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool));
            ___SetThemeEnabledDelegate(__Instance, enableTheme);
        }

        public virtual bool GetThemeEnabled()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 66 * 4);
            var ___GetThemeEnabledDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___GetThemeEnabledDelegate(__Instance);
            return __ret;
        }

        public virtual void SetFocusFromKbd()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 68 * 4);
            var ___SetFocusFromKbdDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___SetFocusFromKbdDelegate(__Instance);
        }

        public virtual bool HasFocus()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 69 * 4);
            var ___HasFocusDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___HasFocusDelegate(__Instance);
            return __ret;
        }

        public virtual bool AcceptsFocusRecursively()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 71 * 4);
            var ___AcceptsFocusRecursivelyDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___AcceptsFocusRecursivelyDelegate(__Instance);
            return __ret;
        }

        public virtual bool AcceptsFocusFromKeyboard()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 72 * 4);
            var ___AcceptsFocusFromKeyboardDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___AcceptsFocusFromKeyboardDelegate(__Instance);
            return __ret;
        }

        public virtual bool CanBeFocused()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 73 * 4);
            var ___CanBeFocusedDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___CanBeFocusedDelegate(__Instance);
            return __ret;
        }

        public bool IsFocusable()
        {
            var __ret = __Internal.IsFocusable(__Instance);
            return __ret;
        }

        public bool CanAcceptFocus()
        {
            var __ret = __Internal.CanAcceptFocus(__Instance);
            return __ret;
        }

        public bool CanAcceptFocusFromKeyboard()
        {
            var __ret = __Internal.CanAcceptFocusFromKeyboard(__Instance);
            return __ret;
        }

        public virtual void SetCanFocus(bool _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 74 * 4);
            var ___SetCanFocusDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool));
            ___SetCanFocusDelegate(__Instance, _0);
        }

        public bool NavigateIn(int flags)
        {
            var __ret = __Internal.NavigateIn(__Instance, flags);
            return __ret;
        }

        public bool Navigate(int flags)
        {
            var __ret = __Internal.Navigate(__Instance, flags);
            return __ret;
        }

        public bool HandleAsNavigationKey(global::wxSharp.KeyEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.HandleAsNavigationKey(__Instance, __arg0);
            return __ret;
        }

        public void MoveBeforeInTabOrder(global::wxSharp.Window win)
        {
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.MoveBeforeInTabOrder(__Instance, __arg0);
        }

        public void MoveAfterInTabOrder(global::wxSharp.Window win)
        {
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.MoveAfterInTabOrder(__Instance, __arg0);
        }

        public global::wxSharp.Window GetPrevSibling()
        {
            var __ret = __Internal.GetPrevSibling(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Window GetNextSibling()
        {
            var __ret = __Internal.GetNextSibling(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Window GetParent()
        {
            var __ret = __Internal.GetParent(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Window GetGrandParent()
        {
            var __ret = __Internal.GetGrandParent(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public virtual bool IsTopLevel()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 75 * 4);
            var ___IsTopLevelDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsTopLevelDelegate(__Instance);
            return __ret;
        }

        public global::wxSharp.Window FindWindow(int winid)
        {
            var __ret = __Internal.FindWindow(__Instance, winid);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.IwxEvtHandler GetEventHandler()
        {
            var __ret = __Internal.GetEventHandler(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public void SetEventHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            __Internal.SetEventHandler(__Instance, __arg0);
        }

        public void PushEventHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            __Internal.PushEventHandler(__Instance, __arg0);
        }

        public global::wxSharp.IwxEvtHandler PopEventHandler(bool deleteHandler)
        {
            var __ret = __Internal.PopEventHandler(__Instance, deleteHandler);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public bool RemoveEventHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            var __ret = __Internal.RemoveEventHandler(__Instance, __arg0);
            return __ret;
        }

        public bool ProcessWindowEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessWindowEvent(__Instance, __arg0);
            return __ret;
        }

        public bool ProcessWindowEventLocally(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessWindowEventLocally(__Instance, __arg0);
            return __ret;
        }

        public bool HandleWindowEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.HandleWindowEvent(__Instance, __arg0);
            return __ret;
        }

        public virtual void SetNextHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___SetNextHandlerDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            ___SetNextHandlerDelegate(__Instance, __arg0);
        }

        public virtual void SetPreviousHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___SetPreviousHandlerDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            ___SetPreviousHandlerDelegate(__Instance, __arg0);
        }

        public virtual bool Validate()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 82 * 4);
            var ___ValidateDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___ValidateDelegate(__Instance);
            return __ret;
        }

        public virtual bool TransferDataToWindow()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 83 * 4);
            var ___TransferDataToWindowDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___TransferDataToWindowDelegate(__Instance);
            return __ret;
        }

        public virtual bool TransferDataFromWindow()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 84 * 4);
            var ___TransferDataFromWindowDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___TransferDataFromWindowDelegate(__Instance);
            return __ret;
        }

        public virtual void InitDialog()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 85 * 4);
            var ___InitDialogDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___InitDialogDelegate(__Instance);
        }

        public virtual global::wxSharp.Size GetDPI()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 89 * 4);
            var ___GetDPIDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___GetDPIDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Size FromDIP(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            var __ret = __Internal.FromDIP(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Point FromDIP(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.FromDIP_1(__Instance, __arg0);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public int FromDIP(int d)
        {
            var __ret = __Internal.FromDIP(__Instance, d);
            return __ret;
        }

        public global::wxSharp.Size ToDIP(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            var __ret = __Internal.ToDIP(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Point ToDIP(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.ToDIP_1(__Instance, __arg0);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public int ToDIP(int d)
        {
            var __ret = __Internal.ToDIP(__Instance, d);
            return __ret;
        }

        public global::wxSharp.Point ConvertPixelsToDialog(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.ConvertPixelsToDialog(__Instance, __arg0);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public global::wxSharp.Point ConvertDialogToPixels(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.ConvertDialogToPixels(__Instance, __arg0);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public global::wxSharp.Size ConvertPixelsToDialog(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            var __ret = __Internal.ConvertPixelsToDialog_1(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Size ConvertDialogToPixels(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            var __ret = __Internal.ConvertDialogToPixels_1(__Instance, __arg0);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void CaptureMouse()
        {
            __Internal.CaptureMouse(__Instance);
        }

        public void ReleaseMouse()
        {
            __Internal.ReleaseMouse(__Instance);
        }

        public virtual bool HasCapture()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 91 * 4);
            var ___HasCaptureDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___HasCaptureDelegate(__Instance);
            return __ret;
        }

        public void RefreshRect(global::wxSharp.Rect rect, bool eraseBackground)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.RefreshRect(__Instance, __arg0, eraseBackground);
        }

        public void Freeze()
        {
            __Internal.Freeze(__Instance);
        }

        public void Thaw()
        {
            __Internal.Thaw(__Instance);
        }

        public bool IsFrozen()
        {
            var __ret = __Internal.IsFrozen(__Instance);
            return __ret;
        }

        public virtual void PrepareDC(global::wxSharp.DC _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 96 * 4);
            var ___PrepareDCDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            ___PrepareDCDelegate(__Instance, __arg0);
        }

        public virtual void SetDoubleBuffered(bool _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 97 * 4);
            var ___SetDoubleBufferedDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool));
            ___SetDoubleBufferedDelegate(__Instance, _0);
        }

        public global::wxSharp.Rect GetUpdateClientRect()
        {
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.GetUpdateClientRect(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public virtual bool DoIsExposed(int x, int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 99 * 4);
            var ___DoIsExposedDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int_int));
            var __ret = ___DoIsExposedDelegate(__Instance, x, y);
            return __ret;
        }

        public virtual bool DoIsExposed(int x, int y, int w, int h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 100 * 4);
            var ___DoIsExposed_1Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int_int));
            var __ret = ___DoIsExposed_1Delegate(__Instance, x, y, w, h);
            return __ret;
        }

        public bool IsExposed(int x, int y)
        {
            var __ret = __Internal.IsExposed(__Instance, x, y);
            return __ret;
        }

        public bool IsExposed(int x, int y, int w, int h)
        {
            var __ret = __Internal.IsExposed(__Instance, x, y, w, h);
            return __ret;
        }

        public bool IsExposed(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.IsExposed(__Instance, __arg0);
            return __ret;
        }

        public bool IsExposed(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            var __ret = __Internal.IsExposed_1(__Instance, __arg0);
            return __ret;
        }

        public virtual global::wxSharp.VisualAttributes GetDefaultAttributes()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 101 * 4);
            var ___GetDefaultAttributesDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __ret = new global::wxSharp.VisualAttributes.__Internal();
            ___GetDefaultAttributesDelegate(new IntPtr(&__ret), __Instance);
            return global::wxSharp.VisualAttributes.__CreateInstance(__ret);
        }

        public void SetOwnBackgroundColour(global::wxSharp.Color colour)
        {
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = colour.__Instance;
            __Internal.SetOwnBackgroundColour(__Instance, __arg0);
        }

        public global::wxSharp.Color GetBackgroundColour()
        {
            var __ret = new global::wxSharp.Color.__Internal();
            __Internal.GetBackgroundColour(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Color.__CreateInstance(__ret);
        }

        public bool InheritsBackgroundColour()
        {
            var __ret = __Internal.InheritsBackgroundColour(__Instance);
            return __ret;
        }

        public bool UseBgCol()
        {
            var __ret = __Internal.UseBgCol(__Instance);
            return __ret;
        }

        public bool UseBackgroundColour()
        {
            var __ret = __Internal.UseBackgroundColour(__Instance);
            return __ret;
        }

        public void SetOwnForegroundColour(global::wxSharp.Color colour)
        {
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = colour.__Instance;
            __Internal.SetOwnForegroundColour(__Instance, __arg0);
        }

        public global::wxSharp.Color GetForegroundColour()
        {
            var __ret = new global::wxSharp.Color.__Internal();
            __Internal.GetForegroundColour(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Color.__CreateInstance(__ret);
        }

        public bool UseForegroundColour()
        {
            var __ret = __Internal.UseForegroundColour(__Instance);
            return __ret;
        }

        public bool InheritsForegroundColour()
        {
            var __ret = __Internal.InheritsForegroundColour(__Instance);
            return __ret;
        }

        public global::wxSharp.BackgroundStyle GetBackgroundStyle()
        {
            var __ret = __Internal.GetBackgroundStyle(__Instance);
            return __ret;
        }

        public virtual bool HasTransparentBackground()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 105 * 4);
            var ___HasTransparentBackgroundDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___HasTransparentBackgroundDelegate(__Instance);
            return __ret;
        }

        public void SetCaret(global::wxSharp.Caret caret)
        {
            var __arg0 = ReferenceEquals(caret, null) ? global::System.IntPtr.Zero : caret.__Instance;
            __Internal.SetCaret(__Instance, __arg0);
        }

        public global::wxSharp.Caret GetCaret()
        {
            var __ret = __Internal.GetCaret(__Instance);
            global::wxSharp.Caret __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Caret.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Caret) global::wxSharp.Caret.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.Caret.__CreateInstance(__ret);
            return __result0;
        }

        public void ClientToScreen(ref int x, ref int y)
        {
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    __Internal.ClientToScreen(__Instance, __arg0, __arg1);
                }
            }
        }

        public void ScreenToClient(ref int x, ref int y)
        {
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    __Internal.ScreenToClient(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Point ClientToScreen(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.ClientToScreen(__Instance, __arg0);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public global::wxSharp.Point ScreenToClient(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.ScreenToClient(__Instance, __arg0);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public global::wxSharp.HitTest HitTest(int x, int y)
        {
            var __ret = __Internal.HitTest(__Instance, x, y);
            return __ret;
        }

        public global::wxSharp.HitTest HitTest(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.HitTest(__Instance, __arg0);
            return __ret;
        }

        public global::wxSharp.Border GetBorder(int flags)
        {
            var __ret = __Internal.GetBorder(__Instance, flags);
            return __ret;
        }

        public global::wxSharp.Border GetBorder()
        {
            var __ret = __Internal.GetBorder(__Instance);
            return __ret;
        }

        public virtual void UpdateWindowUI(int flags)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 111 * 4);
            var ___UpdateWindowUIDelegate = (global::wxSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int));
            ___UpdateWindowUIDelegate(__Instance, flags);
        }

        public virtual void DoUpdateWindowUI(global::wxSharp.UpdateUIEvent @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 112 * 4);
            var ___DoUpdateWindowUIDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            ___DoUpdateWindowUIDelegate(__Instance, __arg0);
        }

        public bool PopupMenu(global::wxSharp.Menu menu, global::wxSharp.Point pos)
        {
            var __arg0 = ReferenceEquals(menu, null) ? global::System.IntPtr.Zero : menu.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = pos.__Instance;
            var __ret = __Internal.PopupMenu(__Instance, __arg0, __arg1);
            return __ret;
        }

        public bool PopupMenu(global::wxSharp.Menu menu, int x, int y)
        {
            var __arg0 = ReferenceEquals(menu, null) ? global::System.IntPtr.Zero : menu.__Instance;
            var __ret = __Internal.PopupMenu(__Instance, __arg0, x, y);
            return __ret;
        }

        public virtual bool HasMultiplePages()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 113 * 4);
            var ___HasMultiplePagesDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___HasMultiplePagesDelegate(__Instance);
            return __ret;
        }

        public virtual bool CanScroll(int orient)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 114 * 4);
            var ___CanScrollDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___CanScrollDelegate(__Instance, orient);
            return __ret;
        }

        public bool HasScrollbar(int orient)
        {
            var __ret = __Internal.HasScrollbar(__Instance, orient);
            return __ret;
        }

        public virtual bool ScrollLines(int _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 121 * 4);
            var ___ScrollLinesDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___ScrollLinesDelegate(__Instance, _0);
            return __ret;
        }

        public virtual bool ScrollPages(int _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 122 * 4);
            var ___ScrollPagesDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___ScrollPagesDelegate(__Instance, _0);
            return __ret;
        }

        public bool LineUp()
        {
            var __ret = __Internal.LineUp(__Instance);
            return __ret;
        }

        public bool LineDown()
        {
            var __ret = __Internal.LineDown(__Instance);
            return __ret;
        }

        public bool PageUp()
        {
            var __ret = __Internal.PageUp(__Instance);
            return __ret;
        }

        public bool PageDown()
        {
            var __ret = __Internal.PageDown(__Instance);
            return __ret;
        }

        public void SetToolTip(global::wxSharp.ToolTip tip)
        {
            var __arg0 = ReferenceEquals(tip, null) ? global::System.IntPtr.Zero : tip.__Instance;
            __Internal.SetToolTip(__Instance, __arg0);
        }

        public void UnsetToolTip()
        {
            __Internal.UnsetToolTip(__Instance);
        }

        public global::wxSharp.ToolTip GetToolTip()
        {
            var __ret = __Internal.GetToolTip(__Instance);
            global::wxSharp.ToolTip __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.ToolTip.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.ToolTip) global::wxSharp.ToolTip.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.ToolTip.__CreateInstance(__ret);
            return __result0;
        }

        public bool CopyToolTip(global::wxSharp.ToolTip tip)
        {
            var __arg0 = ReferenceEquals(tip, null) ? global::System.IntPtr.Zero : tip.__Instance;
            var __ret = __Internal.CopyToolTip(__Instance, __arg0);
            return __ret;
        }

        public virtual global::wxSharp.DropTarget GetDropTarget()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 127 * 4);
            var ___GetDropTargetDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetDropTargetDelegate(__Instance);
            global::wxSharp.DropTarget __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.DropTarget.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.DropTarget) global::wxSharp.DropTarget.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.DropTarget.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void DragAcceptFiles(bool accept)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 128 * 4);
            var ___DragAcceptFilesDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool));
            ___DragAcceptFilesDelegate(__Instance, accept);
        }

        public void SetConstraints(global::wxSharp.LayoutConstraints constraints)
        {
            var __arg0 = ReferenceEquals(constraints, null) ? global::System.IntPtr.Zero : constraints.__Instance;
            __Internal.SetConstraints(__Instance, __arg0);
        }

        public global::wxSharp.LayoutConstraints GetConstraints()
        {
            var __ret = __Internal.GetConstraints(__Instance);
            global::wxSharp.LayoutConstraints __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.LayoutConstraints.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.LayoutConstraints) global::wxSharp.LayoutConstraints.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.LayoutConstraints.__CreateInstance(__ret);
            return __result0;
        }

        public void UnsetConstraints(global::wxSharp.LayoutConstraints c)
        {
            var __arg0 = ReferenceEquals(c, null) ? global::System.IntPtr.Zero : c.__Instance;
            __Internal.UnsetConstraints(__Instance, __arg0);
        }

        public global::wxSharp.WindowList GetConstraintsInvolvedIn()
        {
            var __ret = __Internal.GetConstraintsInvolvedIn(__Instance);
            global::wxSharp.WindowList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.WindowList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.WindowList) global::wxSharp.WindowList.NativeToManagedMap[__ret];
            else global::wxSharp.WindowList.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.WindowList) global::wxSharp.WindowList.__CreateInstance(__ret);
            return __result0;
        }

        public void DeleteRelatedConstraints()
        {
            __Internal.DeleteRelatedConstraints(__Instance);
        }

        public void ResetConstraints()
        {
            __Internal.ResetConstraints(__Instance);
        }

        public virtual void SetConstraintSizes(bool recurse)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 129 * 4);
            var ___SetConstraintSizesDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool));
            ___SetConstraintSizesDelegate(__Instance, recurse);
        }

        public virtual bool LayoutPhase1(ref int noChanges)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 130 * 4);
            var ___LayoutPhase1Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_intPtr));
            fixed (int* __noChanges0 = &noChanges)
            {
                var __arg0 = __noChanges0;
                var __ret = ___LayoutPhase1Delegate(__Instance, __arg0);
                return __ret;
            }
        }

        public virtual bool LayoutPhase2(ref int noChanges)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 131 * 4);
            var ___LayoutPhase2Delegate = (global::wxSharp.Delegates.Func_bool_IntPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_intPtr));
            fixed (int* __noChanges0 = &noChanges)
            {
                var __arg0 = __noChanges0;
                var __ret = ___LayoutPhase2Delegate(__Instance, __arg0);
                return __ret;
            }
        }

        public virtual bool DoPhase(int phase)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 132 * 4);
            var ___DoPhaseDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___DoPhaseDelegate(__Instance, phase);
            return __ret;
        }

        public virtual void SetSizeConstraint(int x, int y, int w, int h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 133 * 4);
            var ___SetSizeConstraintDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int_int_int));
            ___SetSizeConstraintDelegate(__Instance, x, y, w, h);
        }

        public virtual void MoveConstraint(int x, int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 134 * 4);
            var ___MoveConstraintDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int));
            ___MoveConstraintDelegate(__Instance, x, y);
        }

        public virtual void GetSizeConstraint(ref int w, ref int h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 135 * 4);
            var ___GetSizeConstraintDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr));
            fixed (int* __w0 = &w)
            {
                var __arg0 = __w0;
                fixed (int* __h1 = &h)
                {
                    var __arg1 = __h1;
                    ___GetSizeConstraintDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        public virtual void GetClientSizeConstraint(ref int w, ref int h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 136 * 4);
            var ___GetClientSizeConstraintDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr));
            fixed (int* __w0 = &w)
            {
                var __arg0 = __w0;
                fixed (int* __h1 = &h)
                {
                    var __arg1 = __h1;
                    ___GetClientSizeConstraintDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        public virtual void GetPositionConstraint(ref int x, ref int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 137 * 4);
            var ___GetPositionConstraintDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr));
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    ___GetPositionConstraintDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        public void SetAutoLayout(bool autoLayout)
        {
            __Internal.SetAutoLayout(__Instance, autoLayout);
        }

        public bool GetAutoLayout()
        {
            var __ret = __Internal.GetAutoLayout(__Instance);
            return __ret;
        }

        public virtual bool Layout()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 138 * 4);
            var ___LayoutDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___LayoutDelegate(__Instance);
            return __ret;
        }

        public void SetSizer(global::wxSharp.Sizer sizer, bool deleteOld)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            __Internal.SetSizer(__Instance, __arg0, deleteOld);
        }

        public void SetSizerAndFit(global::wxSharp.Sizer sizer, bool deleteOld)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            __Internal.SetSizerAndFit(__Instance, __arg0, deleteOld);
        }

        public global::wxSharp.Sizer GetSizer()
        {
            var __ret = __Internal.GetSizer(__Instance);
            global::wxSharp.Sizer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[__ret];
            else global::wxSharp.Sizer.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(__ret);
            return __result0;
        }

        public void SetContainingSizer(global::wxSharp.Sizer sizer)
        {
            var __arg0 = ReferenceEquals(sizer, null) ? global::System.IntPtr.Zero : sizer.__Instance;
            __Internal.SetContainingSizer(__Instance, __arg0);
        }

        public global::wxSharp.Sizer GetContainingSizer()
        {
            var __ret = __Internal.GetContainingSizer(__Instance);
            global::wxSharp.Sizer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[__ret];
            else global::wxSharp.Sizer.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(__ret);
            return __result0;
        }

        public void OnSysColourChanged(global::wxSharp.SysColourChangedEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnSysColourChanged(__Instance, __arg0);
        }

        public void OnInitDialog(global::wxSharp.InitDialogEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnInitDialog(__Instance, __arg0);
        }

        public void OnMiddleClick(global::wxSharp.MouseEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnMiddleClick(__Instance, __arg0);
        }

        public void OnHelp(global::wxSharp.HelpEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnHelp(__Instance, __arg0);
        }

        public virtual void OnInternalIdle()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 141 * 4);
            var ___OnInternalIdleDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___OnInternalIdleDelegate(__Instance);
        }

        public virtual bool SendIdleEvents(global::wxSharp.IdleEvent @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 142 * 4);
            var ___SendIdleEventsDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___SendIdleEventsDelegate(__Instance, __arg0);
            return __ret;
        }

        public bool WXSendContextMenuEvent(global::wxSharp.Point posInScreenCoords)
        {
            if (ReferenceEquals(posInScreenCoords, null))
                throw new global::System.ArgumentNullException("posInScreenCoords", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = posInScreenCoords.__Instance;
            var __ret = __Internal.WXSendContextMenuEvent(__Instance, __arg0);
            return __ret;
        }

        public virtual void AssociateHandle(global::wxSharp.NSView _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 144 * 4);
            var ___AssociateHandleDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            ___AssociateHandleDelegate(__Instance, __arg0);
        }

        public virtual void DissociateHandle()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 145 * 4);
            var ___DissociateHandleDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DissociateHandleDelegate(__Instance);
        }

        public bool HasCustomPalette()
        {
            var __ret = __Internal.HasCustomPalette(__Instance);
            return __ret;
        }

        public global::wxSharp.Window GetAncestorWithCustomPalette()
        {
            var __ret = __Internal.GetAncestorWithCustomPalette(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void InheritAttributes()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 146 * 4);
            var ___InheritAttributesDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___InheritAttributesDelegate(__Instance);
        }

        public virtual bool ShouldInheritColours()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 147 * 4);
            var ___ShouldInheritColoursDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___ShouldInheritColoursDelegate(__Instance);
            return __ret;
        }

        public virtual bool CanBeOutsideClientArea()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 148 * 4);
            var ___CanBeOutsideClientAreaDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___CanBeOutsideClientAreaDelegate(__Instance);
            return __ret;
        }

        public virtual bool CanApplyThemeBorder()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 149 * 4);
            var ___CanApplyThemeBorderDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___CanApplyThemeBorderDelegate(__Instance);
            return __ret;
        }

        public virtual global::wxSharp.Window GetMainWindowOfCompositeControl()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 150 * 4);
            var ___GetMainWindowOfCompositeControlDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetMainWindowOfCompositeControlDelegate(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public virtual bool IsTopNavigationDomain(global::wxSharp.Window.NavigationKind _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 151 * 4);
            var ___IsTopNavigationDomainDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxWindow_NavigationKind) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxWindow_NavigationKind));
            var __ret = ___IsTopNavigationDomainDelegate(__Instance, _0);
            return __ret;
        }

        public virtual global::wxSharp.TextEntry WXGetTextEntry()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 152 * 4);
            var ___WXGetTextEntryDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___WXGetTextEntryDelegate(__Instance);
            global::wxSharp.TextEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.TextEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.TextEntry) global::wxSharp.TextEntry.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.TextEntry.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual bool TryAfter(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___TryAfterDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___TryAfterDelegate(__Instance, __arg0);
            return __ret;
        }

        protected global::wxSharp.Window DoGetSibling(global::wxSharp.Window.WindowOrder order)
        {
            var __ret = __Internal.DoGetSibling(__Instance, order);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual void DoMoveInTabOrder(global::wxSharp.Window win, global::wxSharp.Window.WindowOrder move)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 153 * 4);
            var ___DoMoveInTabOrderDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxWindow_WindowOrder) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxWindow_WindowOrder));
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            ___DoMoveInTabOrderDelegate(__Instance, __arg0, move);
        }

        protected virtual bool DoNavigateIn(int flags)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 154 * 4);
            var ___DoNavigateInDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_int));
            var __ret = ___DoNavigateInDelegate(__Instance, flags);
            return __ret;
        }

        protected void SatisfyConstraints()
        {
            __Internal.SatisfyConstraints(__Instance);
        }

        protected void SendDestroyEvent()
        {
            __Internal.SendDestroyEvent(__Instance);
        }

        protected virtual global::wxSharp.Border GetDefaultBorder()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 156 * 4);
            var ___GetDefaultBorderDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr));
            var __ret = ___GetDefaultBorderDelegate(__Instance);
            return __ret;
        }

        protected virtual global::wxSharp.Border GetDefaultBorderForControl()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 157 * 4);
            var ___GetDefaultBorderForControlDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr));
            var __ret = ___GetDefaultBorderForControlDelegate(__Instance);
            return __ret;
        }

        protected virtual global::wxSharp.HitTest DoHitTest(int x, int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 161 * 4);
            var ___DoHitTestDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxHitTest_IntPtr_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxHitTest_IntPtr_int_int));
            var __ret = ___DoHitTestDelegate(__Instance, x, y);
            return __ret;
        }

        protected virtual void DoGetScreenPosition(ref int x, ref int y)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 165 * 4);
            var ___DoGetScreenPositionDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr));
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    ___DoGetScreenPositionDelegate(__Instance, __arg0, __arg1);
                }
            }
        }

        protected virtual global::wxSharp.Size DoGetBestClientSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 169 * 4);
            var ___DoGetBestClientSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___DoGetBestClientSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        protected virtual int DoGetBestClientHeight(int _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 170 * 4);
            var ___DoGetBestClientHeightDelegate = (global::wxSharp.Delegates.Func_int_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr_int));
            var __ret = ___DoGetBestClientHeightDelegate(__Instance, _0);
            return __ret;
        }

        protected virtual int DoGetBestClientWidth(int _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 171 * 4);
            var ___DoGetBestClientWidthDelegate = (global::wxSharp.Delegates.Func_int_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr_int));
            var __ret = ___DoGetBestClientWidthDelegate(__Instance, _0);
            return __ret;
        }

        protected virtual void DoSetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 174 * 4);
            var ___DoSetSizeHintsDelegate = (global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int));
            ___DoSetSizeHintsDelegate(__Instance, minW, minH, maxW, maxH, incW, incH);
        }

        protected virtual global::wxSharp.Size DoGetBorderSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 175 * 4);
            var ___DoGetBorderSizeDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr));
            var __ret = ___DoGetBorderSizeDelegate(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        protected virtual void DoCentre(int dir)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 177 * 4);
            var ___DoCentreDelegate = (global::wxSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int));
            ___DoCentreDelegate(__Instance, dir);
        }

        public virtual void AdjustForParentClientOrigin(ref int x, ref int y, int sizeFlags)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 181 * 4);
            var ___AdjustForParentClientOriginDelegate = (global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr_int));
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    ___AdjustForParentClientOriginDelegate(__Instance, __arg0, __arg1, sizeFlags);
                }
            }
        }

        public global::wxSharp.IwxEvtHandler GetNextHandler()
        {
            var __ret = __Internal.GetNextHandler(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.IwxEvtHandler GetPreviousHandler()
        {
            var __ret = __Internal.GetPreviousHandler(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public void SetEvtHandlerEnabled(bool enabled)
        {
            __Internal.SetEvtHandlerEnabled(__Instance, enabled);
        }

        public bool GetEvtHandlerEnabled()
        {
            var __ret = __Internal.GetEvtHandlerEnabled(__Instance);
            return __ret;
        }

        public void Unlink()
        {
            __Internal.Unlink(__Instance);
        }

        public bool IsUnlinked()
        {
            var __ret = __Internal.IsUnlinked(__Instance);
            return __ret;
        }

        public virtual bool ProcessEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___ProcessEventDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___ProcessEventDelegate(__Instance, __arg0);
            return __ret;
        }

        public bool SafelyProcessEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.SafelyProcessEvent(__Instance, __arg0);
            return __ret;
        }

        public bool ProcessEventLocally(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessEventLocally(__Instance, __arg0);
            return __ret;
        }

        public virtual void QueueEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___QueueEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            ___QueueEventDelegate(__Instance, __arg0);
        }

        public virtual void AddPendingEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___AddPendingEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            ___AddPendingEventDelegate(__Instance, __arg0);
        }

        public void ProcessPendingEvents()
        {
            __Internal.ProcessPendingEvents(__Instance);
        }

        public void DeletePendingEvents()
        {
            __Internal.DeletePendingEvents(__Instance);
        }

        public bool ProcessThreadEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessThreadEvent(__Instance, __arg0);
            return __ret;
        }

        public void SetClientData(global::System.IntPtr data)
        {
            __Internal.SetClientData(__Instance, data);
        }

        public global::System.IntPtr GetClientData()
        {
            var __ret = __Internal.GetClientData(__Instance);
            return __ret;
        }

        public bool SearchDynamicEventTable(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.SearchDynamicEventTable(__Instance, __arg0);
            return __ret;
        }

        public void ClearEventHashTable()
        {
            __Internal.ClearEventHashTable(__Instance);
        }

        public void OnSinkDestroyed(global::wxSharp.IwxEvtHandler sink)
        {
            var __arg0 = ReferenceEquals(sink, null) ? global::System.IntPtr.Zero : sink.__PointerToEvtHandler;
            __Internal.OnSinkDestroyed(__Instance, __arg0);
        }

        protected bool TryHereOnly(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.TryHereOnly(__Instance, __arg0);
            return __ret;
        }

        protected bool TryBeforeAndHere(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.TryBeforeAndHere(__Instance, __arg0);
            return __ret;
        }

        protected virtual void DoSetClientData(global::System.IntPtr data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___DoSetClientDataDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            ___DoSetClientDataDelegate(__Instance, data);
        }

        protected virtual global::System.IntPtr DoGetClientData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___DoGetClientDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___DoGetClientDataDelegate(__Instance);
            return __ret;
        }

        public global::wxSharp.RefCounter GetRefData()
        {
            var __ret = __Internal.GetRefData(__Instance);
            global::wxSharp.RefCounter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[__ret];
            else global::wxSharp.RefCounter.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(__ret);
            return __result0;
        }

        public void SetRefData(global::wxSharp.RefCounter data)
        {
            var __arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            __Internal.SetRefData(__Instance, __arg0);
        }

        public void Ref(global::wxSharp.IwxObject clone)
        {
            if (ReferenceEquals(clone, null))
                throw new global::System.ArgumentNullException("clone", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = clone.__PointerToObject;
            __Internal.Ref(__Instance, __arg0);
        }

        public void UnRef()
        {
            __Internal.UnRef(__Instance);
        }

        public void UnShare()
        {
            __Internal.UnShare(__Instance);
        }

        public bool IsSameAs(global::wxSharp.IwxObject o)
        {
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__PointerToObject;
            var __ret = __Internal.IsSameAs(__Instance, __arg0);
            return __ret;
        }

        protected void AllocExclusive()
        {
            __Internal.AllocExclusive(__Instance);
        }

        protected virtual global::wxSharp.RefCounter CreateRefData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___CreateRefDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CreateRefDataDelegate(__Instance);
            global::wxSharp.RefCounter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[__ret];
            else global::wxSharp.RefCounter.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual global::wxSharp.RefCounter CloneRefData(global::wxSharp.RefCounter data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___CloneRefDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            var __ret = ___CloneRefDataDelegate(__Instance, __arg0);
            global::wxSharp.RefCounter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[__ret];
            else global::wxSharp.RefCounter.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public static int NewControlId(int count)
        {
            var __ret = __Internal.NewControlId(count);
            return __ret;
        }

        public static void UnreserveControlId(int id, int count)
        {
            __Internal.UnreserveControlId(id, count);
        }

        public static global::wxSharp.Window FindFocus()
        {
            var __ret = __Internal.FindFocus();
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.Window DoFindFocus()
        {
            var __ret = __Internal.DoFindFocus();
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.Window FindWindowById(int winid, global::wxSharp.Window parent)
        {
            var __arg1 = ReferenceEquals(parent, null) ? global::System.IntPtr.Zero : parent.__Instance;
            var __ret = __Internal.FindWindowById(winid, __arg1);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.Window GetCapture()
        {
            var __ret = __Internal.GetCapture();
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.VisualAttributes GetClassDefaultAttributes(global::wxSharp.WindowVariant variant)
        {
            var __ret = new global::wxSharp.VisualAttributes.__Internal();
            __Internal.GetClassDefaultAttributes(new IntPtr(&__ret), variant);
            return global::wxSharp.VisualAttributes.__CreateInstance(__ret);
        }

        protected static int WidthDefault(int w)
        {
            var __ret = __Internal.WidthDefault(w);
            return __ret;
        }

        protected static int HeightDefault(int h)
        {
            var __ret = __Internal.HeightDefault(h);
            return __ret;
        }

        protected static void NotifyCaptureLost()
        {
            __Internal.NotifyCaptureLost();
        }

        protected global::wxSharp.Window m_parent
        {
            get
            {
                global::wxSharp.Window __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_parent == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_parent))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_parent];
                else global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_parent] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_parent);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_parent = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.WindowList m_children
        {
            get
            {
                return global::wxSharp.WindowList.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_children));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_children = *(global::wxSharp.WindowList.__Internal*) value.__Instance;
            }
        }

        protected int m_minWidth
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_minWidth;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_minWidth = value;
            }
        }

        protected int m_minHeight
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_minHeight;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_minHeight = value;
            }
        }

        protected int m_maxWidth
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_maxWidth;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_maxWidth = value;
            }
        }

        protected int m_maxHeight
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_maxHeight;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_maxHeight = value;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_eventHandler
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_eventHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_eventHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_eventHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_eventHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_eventHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_eventHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.DropTarget m_dropTarget
        {
            get
            {
                global::wxSharp.DropTarget __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_dropTarget == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.DropTarget.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_dropTarget))
                    __result0 = (global::wxSharp.DropTarget) global::wxSharp.DropTarget.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_dropTarget];
                else __result0 = global::wxSharp.DropTarget.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_dropTarget);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_dropTarget = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Color m_backgroundColour
        {
            get
            {
                return global::wxSharp.Color.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_backgroundColour));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_backgroundColour = *(global::wxSharp.Color.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Color m_foregroundColour
        {
            get
            {
                return global::wxSharp.Color.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_foregroundColour));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_foregroundColour = *(global::wxSharp.Color.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Caret m_caret
        {
            get
            {
                global::wxSharp.Caret __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_caret == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Caret.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_caret))
                    __result0 = (global::wxSharp.Caret) global::wxSharp.Caret.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_caret];
                else __result0 = global::wxSharp.Caret.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_caret);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_caret = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.ToolTip m_tooltip
        {
            get
            {
                global::wxSharp.ToolTip __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_tooltip == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.ToolTip.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_tooltip))
                    __result0 = (global::wxSharp.ToolTip) global::wxSharp.ToolTip.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_tooltip];
                else __result0 = global::wxSharp.ToolTip.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_tooltip);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_tooltip = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.LayoutConstraints m_constraints
        {
            get
            {
                global::wxSharp.LayoutConstraints __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_constraints == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.LayoutConstraints.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_constraints))
                    __result0 = (global::wxSharp.LayoutConstraints) global::wxSharp.LayoutConstraints.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_constraints];
                else __result0 = global::wxSharp.LayoutConstraints.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_constraints);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_constraints = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.WindowList m_constraintsInvolvedIn
        {
            get
            {
                global::wxSharp.WindowList __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_constraintsInvolvedIn == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.WindowList.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_constraintsInvolvedIn))
                    __result0 = (global::wxSharp.WindowList) global::wxSharp.WindowList.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_constraintsInvolvedIn];
                else global::wxSharp.WindowList.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_constraintsInvolvedIn] = __result0 = (global::wxSharp.WindowList) global::wxSharp.WindowList.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_constraintsInvolvedIn);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_constraintsInvolvedIn = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Sizer m_windowSizer
        {
            get
            {
                global::wxSharp.Sizer __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_windowSizer == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_windowSizer))
                    __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_windowSizer];
                else global::wxSharp.Sizer.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_windowSizer] = __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_windowSizer);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_windowSizer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Sizer m_containingSizer
        {
            get
            {
                global::wxSharp.Sizer __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_containingSizer == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Sizer.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_containingSizer))
                    __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_containingSizer];
                else global::wxSharp.Sizer.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_containingSizer] = __result0 = (global::wxSharp.Sizer) global::wxSharp.Sizer.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_containingSizer);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_containingSizer = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_autoLayout
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_autoLayout != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_autoLayout = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_isShown
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_isShown != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_isShown = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_isEnabled
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_isEnabled != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_isEnabled = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_isBeingDeleted
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_isBeingDeleted != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_isBeingDeleted = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_hasBgCol
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_hasBgCol != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_hasBgCol = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_hasFgCol
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_hasFgCol != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_hasFgCol = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_hasFont
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_hasFont != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_hasFont = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_inheritBgCol
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_inheritBgCol != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_inheritBgCol = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_inheritFgCol
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_inheritFgCol != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_inheritFgCol = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_inheritFont
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_inheritFont != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_inheritFont = (byte) (value ? 1 : 0);
            }
        }

        protected int m_windowStyle
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_windowStyle;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_windowStyle = value;
            }
        }

        protected int m_exStyle
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_exStyle;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_exStyle = value;
            }
        }

        protected bool m_themeEnabled
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_themeEnabled != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_themeEnabled = (byte) (value ? 1 : 0);
            }
        }

        protected global::wxSharp.BackgroundStyle m_backgroundStyle
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_backgroundStyle;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_backgroundStyle = value;
            }
        }

        protected bool m_hasCustomPalette
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_hasCustomPalette != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_hasCustomPalette = (byte) (value ? 1 : 0);
            }
        }

        protected global::wxSharp.Size m_virtualSize
        {
            get
            {
                return global::wxSharp.Size.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_virtualSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_virtualSize = *(global::wxSharp.Size.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.ScrollHelper m_scrollHelper
        {
            get
            {
                global::wxSharp.ScrollHelper __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_scrollHelper == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.ScrollHelper.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_scrollHelper))
                    __result0 = (global::wxSharp.ScrollHelper) global::wxSharp.ScrollHelper.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_scrollHelper];
                else __result0 = global::wxSharp.ScrollHelper.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_scrollHelper);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_scrollHelper = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.WindowVariant m_windowVariant
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_windowVariant;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_windowVariant = value;
            }
        }

        protected global::wxSharp.Size m_bestSizeCache
        {
            get
            {
                return global::wxSharp.Size.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_bestSizeCache));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_bestSizeCache = *(global::wxSharp.Size.__Internal*) value.__Instance;
            }
        }

        protected global::System.IntPtr m_cgContextRef
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_cgContextRef;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_cgContextRef = (global::System.IntPtr) value;
            }
        }

        protected bool m_cachedClippedRectValid
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_cachedClippedRectValid != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_cachedClippedRectValid = (byte) (value ? 1 : 0);
            }
        }

        protected global::wxSharp.Rect m_cachedClippedRectWithOuterStructure
        {
            get
            {
                return global::wxSharp.Rect.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_cachedClippedRectWithOuterStructure));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_cachedClippedRectWithOuterStructure = *(global::wxSharp.Rect.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Rect m_cachedClippedRect
        {
            get
            {
                return global::wxSharp.Rect.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_cachedClippedRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_cachedClippedRect = *(global::wxSharp.Rect.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Rect m_cachedClippedClientRect
        {
            get
            {
                return global::wxSharp.Rect.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_cachedClippedClientRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_cachedClippedClientRect = *(global::wxSharp.Rect.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Point m_macTopLeftInset
        {
            get
            {
                return global::wxSharp.Point.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_macTopLeftInset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_macTopLeftInset = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Point m_macBottomRightInset
        {
            get
            {
                return global::wxSharp.Point.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.Window.__Internal*) __Instance)->m_macBottomRightInset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.Window.__Internal*)__Instance)->m_macBottomRightInset = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        protected byte m_macAlpha
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_macAlpha;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_macAlpha = value;
            }
        }

        protected global::wxSharp.ScrollBar m_hScrollBar
        {
            get
            {
                global::wxSharp.ScrollBar __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_hScrollBar == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.ScrollBar.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_hScrollBar))
                    __result0 = (global::wxSharp.ScrollBar) global::wxSharp.ScrollBar.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_hScrollBar];
                else __result0 = global::wxSharp.ScrollBar.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_hScrollBar);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_hScrollBar = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.ScrollBar m_vScrollBar
        {
            get
            {
                global::wxSharp.ScrollBar __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_vScrollBar == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.ScrollBar.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_vScrollBar))
                    __result0 = (global::wxSharp.ScrollBar) global::wxSharp.ScrollBar.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_vScrollBar];
                else __result0 = global::wxSharp.ScrollBar.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_vScrollBar);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_vScrollBar = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_hScrollBarAlwaysShown
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_hScrollBarAlwaysShown != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_hScrollBarAlwaysShown = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_vScrollBarAlwaysShown
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_vScrollBarAlwaysShown != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_vScrollBarAlwaysShown = (byte) (value ? 1 : 0);
            }
        }

        protected global::wxSharp.Window m_growBox
        {
            get
            {
                global::wxSharp.Window __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_growBox == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_growBox))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_growBox];
                else global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_growBox] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_growBox);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_growBox = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_isNativeWindowWrapper
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_isNativeWindowWrapper != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_isNativeWindowWrapper = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_clipChildren
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_clipChildren != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_clipChildren = (byte) (value ? 1 : 0);
            }
        }

        protected global::wxSharp.IwxEvtHandler m_nextHandler
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_nextHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_nextHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_nextHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_nextHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_nextHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_nextHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_previousHandler
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_previousHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_previousHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_previousHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_previousHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_previousHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_previousHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_enabled
        {
            get
            {
                return ((global::wxSharp.Window.__Internal*) __Instance)->m_enabled != 0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_enabled = (byte) (value ? 1 : 0);
            }
        }

        public global::System.IntPtr __PointerTowxEvtHandler
        {
            get
            {
                return __Instance + 0;
            }
        }

        protected global::wxSharp.RefCounter m_refData
        {
            get
            {
                global::wxSharp.RefCounter __result0;
                if (((global::wxSharp.Window.__Internal*) __Instance)->m_refData == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(((global::wxSharp.Window.__Internal*) __Instance)->m_refData))
                    __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_refData];
                else global::wxSharp.RefCounter.NativeToManagedMap[((global::wxSharp.Window.__Internal*) __Instance)->m_refData] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(((global::wxSharp.Window.__Internal*) __Instance)->m_refData);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Window.__Internal*)__Instance)->m_refData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr __PointerTowxObject
        {
            get
            {
                return __Instance + 0;
            }
        }

        public global::System.IntPtr __PointerTowxTrackable
        {
            get
            {
                return __Instance + 8;
            }
        }

        #region Virtual table interop

        // virtual ~wxWindowMac()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetNextHandler(wxEvtHandler *handler) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetNextHandlerDelegateInstance;

        private static void _SetNextHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetNextHandler(__result0);
        }

        // void SetPreviousHandler(wxEvtHandler *handler) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetPreviousHandlerDelegateInstance;

        private static void _SetPreviousHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetPreviousHandler(__result0);
        }

        // bool ProcessEvent(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _ProcessEventDelegateInstance;

        private static bool _ProcessEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.ProcessEvent(__result0);
        }

        // void QueueEvent(wxEvent *event)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _QueueEventDelegateInstance;

        private static void _QueueEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.QueueEvent(__result0);
        }

        // void AddPendingEvent(const wxEvent& event) { // notice that the thread-safety problem comes from the fact that // Clone() doesn't make deep copies of wxString fields of wxEvent // object and so the same wxString could be used from both threads when // the event object is destroyed in this one -- QueueEvent() avoids // this problem as the event pointer is not used any more in this // thread at all after it is called. QueueEvent(event.Clone()); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AddPendingEventDelegateInstance;

        private static void _AddPendingEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.AddPendingEvent(__result0);
        }

        // bool TryBefore(wxEvent& event) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryBeforeDelegateInstance;

        private static bool _TryBeforeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryBefore(__result0);
        }

        // bool TryAfter(wxEvent& event) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryAfterDelegateInstance;

        private static bool _TryAfterDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryAfter(__result0);
        }

        // void DoSetClientData( void *data )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoSetClientDataDelegateInstance;

        private static void _DoSetClientDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        // bool Destroy()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _DestroyDelegateInstance;

        private static bool _DestroyDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Destroy();
        }

        // wxCoord AdjustForLayoutDirection(wxCoord x, wxCoord width, wxCoord widthTotal) const
        private static global::wxSharp.Delegates.Func_int_IntPtr_int_int_int _AdjustForLayoutDirectionDelegateInstance;

        private static int _AdjustForLayoutDirectionDelegateHook(global::System.IntPtr __instance, int x, int width, int widthTotal)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AdjustForLayoutDirection(x, width, widthTotal);
        }

        // void SetId( wxWindowID winid ) { m_windowId = winid; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetIdDelegateInstance;

        private static void _SetIdDelegateHook(global::System.IntPtr __instance, int winid)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetId(winid);
        }

        // void Raise() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _RaiseDelegateInstance;

        private static void _RaiseDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Raise();
        }

        // void Lower() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _LowerDelegateInstance;

        private static void _LowerDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Lower();
        }

        // wxPoint GetClientAreaOrigin() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxPoint___Internal_IntPtr _GetClientAreaOriginDelegateInstance;

        private static global::wxSharp.Point.__Internal _GetClientAreaOriginDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClientAreaOrigin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Point.__Internal*) __ret.__Instance;
        }

        // wxSize ClientToWindowSize(const wxSize& size) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr _ClientToWindowSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _ClientToWindowSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            var __ret = __target.ClientToWindowSize(__result0);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize WindowToClientSize(const wxSize& size) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr _WindowToClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _WindowToClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            var __ret = __target.WindowToClientSize(__result0);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetEffectiveMinSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetEffectiveMinSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetEffectiveMinSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEffectiveMinSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void Fit()
        private static global::wxSharp.Delegates.Action_IntPtr _FitDelegateInstance;

        private static void _FitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Fit();
        }

        // void FitInside()
        private static global::wxSharp.Delegates.Action_IntPtr _FitInsideDelegateInstance;

        private static void _FitInsideDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.FitInside();
        }

        // void SetSizeHints( int minW, int minH, int maxW = wxDefaultCoord, int maxH = wxDefaultCoord, int incW = wxDefaultCoord, int incH = wxDefaultCoord ) { DoSetSizeHints(minW, minH, maxW, maxH, incW, incH); }
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int _SetSizeHintsDelegateInstance;

        private static void _SetSizeHintsDelegateHook(global::System.IntPtr __instance, int minW, int minH, int maxW, int maxH, int incW, int incH)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetSizeHints(minW, minH, maxW, maxH, incW, incH);
        }

        // void SetMinSize(const wxSize& minSize)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMinSizeDelegateInstance;

        private static void _SetMinSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr minSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (minSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(minSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[minSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(minSize);
            __target.SetMinSize(__result0);
        }

        // void SetMaxSize(const wxSize& maxSize)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMaxSizeDelegateInstance;

        private static void _SetMaxSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr maxSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (maxSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(maxSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[maxSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(maxSize);
            __target.SetMaxSize(__result0);
        }

        // void SetMinClientSize(const wxSize& size) { SetMinSize(ClientToWindowSize(size)); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMinClientSizeDelegateInstance;

        private static void _SetMinClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            __target.SetMinClientSize(__result0);
        }

        // void SetMaxClientSize(const wxSize& size) { SetMaxSize(ClientToWindowSize(size)); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMaxClientSizeDelegateInstance;

        private static void _SetMaxClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            __target.SetMaxClientSize(__result0);
        }

        // wxSize GetMinSize() const { return wxSize(m_minWidth, m_minHeight); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMinSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMinSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMinSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetMaxSize() const { return wxSize(m_maxWidth, m_maxHeight); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMaxSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMaxSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMaxSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetMinClientSize() const { return WindowToClientSize(GetMinSize()); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMinClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMinClientSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMinClientSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetMaxClientSize() const { return WindowToClientSize(GetMaxSize()); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMaxClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMaxClientSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMaxClientSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void DoSetVirtualSize( int x, int y )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetVirtualSizeDelegateInstance;

        private static void _DoSetVirtualSizeDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetVirtualSize(x, y);
        }

        // wxSize DoGetVirtualSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetVirtualSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetVirtualSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetVirtualSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetBestVirtualSize() const { wxSize client( GetClientSize() ); wxSize best( GetBestSize() ); return wxSize( wxMax( client.x, best.x ), wxMax( client.y, best.y ) ); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetBestVirtualSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetBestVirtualSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetBestVirtualSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // double GetContentScaleFactor() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_double_IntPtr _GetContentScaleFactorDelegateInstance;

        private static double _GetContentScaleFactorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetContentScaleFactor();
        }

        // wxSize GetWindowBorderSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetWindowBorderSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetWindowBorderSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetWindowBorderSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // bool InformFirstDirection(int direction, int size, int availableOtherDir)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _InformFirstDirectionDelegateInstance;

        private static bool _InformFirstDirectionDelegateHook(global::System.IntPtr __instance, int direction, int size, int availableOtherDir)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.InformFirstDirection(direction, size, availableOtherDir);
        }

        // void SendSizeEvent(int flags = 0) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int _SendSizeEventDelegateInstance;

        private static void _SendSizeEventDelegateHook(global::System.IntPtr __instance, int flags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SendSizeEvent(flags);
        }

        // bool BeginRepositioningChildren() { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _BeginRepositioningChildrenDelegateInstance;

        private static bool _BeginRepositioningChildrenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.BeginRepositioningChildren();
        }

        // void EndRepositioningChildren() { }
        private static global::wxSharp.Delegates.Action_IntPtr _EndRepositioningChildrenDelegateInstance;

        private static void _EndRepositioningChildrenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.EndRepositioningChildren();
        }

        // bool Show( bool show = true ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_bool _ShowDelegateInstance;

        private static bool _ShowDelegateHook(global::System.IntPtr __instance, bool show)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Show(show);
        }

        // bool ShowWithEffect(wxShowEffect effect, unsigned timeout = 0) wxOVERRIDE { return OSXShowWithEffect(true, effect, timeout); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint _ShowWithEffectDelegateInstance;

        private static bool _ShowWithEffectDelegateHook(global::System.IntPtr __instance, global::wxSharp.ShowEffect effect, uint timeout)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ShowWithEffect(effect, timeout);
        }

        // bool HideWithEffect(wxShowEffect effect, unsigned timeout = 0) wxOVERRIDE { return OSXShowWithEffect(false, effect, timeout); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint _HideWithEffectDelegateInstance;

        private static bool _HideWithEffectDelegateHook(global::System.IntPtr __instance, global::wxSharp.ShowEffect effect, uint timeout)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HideWithEffect(effect, timeout);
        }

        // bool Enable( bool enable = true )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_bool _EnableDelegateInstance;

        private static bool _EnableDelegateHook(global::System.IntPtr __instance, bool enable)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Enable(enable);
        }

        // bool IsShown() const { return m_isShown; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsShownDelegateInstance;

        private static bool _IsShownDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsShown();
        }

        // bool IsShownOnScreen() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsShownOnScreenDelegateInstance;

        private static bool _IsShownOnScreenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsShownOnScreen();
        }

        // void SetWindowStyleFlag( long style ) { m_windowStyle = style; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetWindowStyleFlagDelegateInstance;

        private static void _SetWindowStyleFlagDelegateHook(global::System.IntPtr __instance, int style)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetWindowStyleFlag(style);
        }

        // long GetWindowStyleFlag() const { return m_windowStyle; }
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetWindowStyleFlagDelegateInstance;

        private static int _GetWindowStyleFlagDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetWindowStyleFlag();
        }

        // bool IsRetained() const { return HasFlag(wxRETAINED); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsRetainedDelegateInstance;

        private static bool _IsRetainedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsRetained();
        }

        // void SetExtraStyle(long exStyle) { m_exStyle = exStyle; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetExtraStyleDelegateInstance;

        private static void _SetExtraStyleDelegateHook(global::System.IntPtr __instance, int exStyle)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetExtraStyle(exStyle);
        }

        // void SetThemeEnabled(bool enableTheme) { m_themeEnabled = enableTheme; }
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetThemeEnabledDelegateInstance;

        private static void _SetThemeEnabledDelegateHook(global::System.IntPtr __instance, bool enableTheme)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetThemeEnabled(enableTheme);
        }

        // bool GetThemeEnabled() const { return m_themeEnabled; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _GetThemeEnabledDelegateInstance;

        private static bool _GetThemeEnabledDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetThemeEnabled();
        }

        // void SetFocus() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _SetFocusDelegateInstance;

        private static void _SetFocusDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetFocus();
        }

        // void SetFocusFromKbd() { SetFocus(); }
        private static global::wxSharp.Delegates.Action_IntPtr _SetFocusFromKbdDelegateInstance;

        private static void _SetFocusFromKbdDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetFocusFromKbd();
        }

        // bool HasFocus() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasFocusDelegateInstance;

        private static bool _HasFocusDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasFocus();
        }

        // bool AcceptsFocus() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AcceptsFocusDelegateInstance;

        private static bool _AcceptsFocusDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AcceptsFocus();
        }

        // bool AcceptsFocusRecursively() const { return AcceptsFocus(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AcceptsFocusRecursivelyDelegateInstance;

        private static bool _AcceptsFocusRecursivelyDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AcceptsFocusRecursively();
        }

        // bool AcceptsFocusFromKeyboard() const { return AcceptsFocus(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AcceptsFocusFromKeyboardDelegateInstance;

        private static bool _AcceptsFocusFromKeyboardDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AcceptsFocusFromKeyboard();
        }

        // bool CanBeFocused() const { return IsShown() && IsEnabled(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanBeFocusedDelegateInstance;

        private static bool _CanBeFocusedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanBeFocused();
        }

        // void SetCanFocus(bool WXUNUSED(canFocus)) { }
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetCanFocusDelegateInstance;

        private static void _SetCanFocusDelegateHook(global::System.IntPtr __instance, bool _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetCanFocus(_0);
        }

        // bool IsTopLevel() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsTopLevelDelegateInstance;

        private static bool _IsTopLevelDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsTopLevel();
        }

        // bool IsClientAreaChild(const wxWindow *child) const wxOVERRIDE { return !MacIsWindowScrollbar(child) && !((wxWindow*)m_growBox==child) && wxWindowBase::IsClientAreaChild(child); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _IsClientAreaChildDelegateInstance;

        private static bool _IsClientAreaChildDelegateHook(global::System.IntPtr __instance, global::System.IntPtr child)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (child == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(child))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[child];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(child, skipVTables: true);
            return __target.IsClientAreaChild(__result0);
        }

        // bool Validate()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _ValidateDelegateInstance;

        private static bool _ValidateDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Validate();
        }

        // bool TransferDataToWindow()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _TransferDataToWindowDelegateInstance;

        private static bool _TransferDataToWindowDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.TransferDataToWindow();
        }

        // bool TransferDataFromWindow()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _TransferDataFromWindowDelegateInstance;

        private static bool _TransferDataFromWindowDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.TransferDataFromWindow();
        }

        // void InitDialog()
        private static global::wxSharp.Delegates.Action_IntPtr _InitDialogDelegateInstance;

        private static void _InitDialogDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.InitDialog();
        }

        // bool RegisterHotKey(int hotkeyId, int modifiers, int keycode) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _RegisterHotKeyDelegateInstance;

        private static bool _RegisterHotKeyDelegateHook(global::System.IntPtr __instance, int hotkeyId, int modifiers, int keycode)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.RegisterHotKey(hotkeyId, modifiers, keycode);
        }

        // bool UnregisterHotKey(int hotkeyId) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _UnregisterHotKeyDelegateInstance;

        private static bool _UnregisterHotKeyDelegateHook(global::System.IntPtr __instance, int hotkeyId)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.UnregisterHotKey(hotkeyId);
        }

        // wxSize GetDPI() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetDPIDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetDPIDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDPI();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void WarpPointer( int x, int y ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _WarpPointerDelegateInstance;

        private static void _WarpPointerDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.WarpPointer(x, y);
        }

        // bool HasCapture() const { return reinterpret_cast<const wxWindow*>(this) == GetCapture(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasCaptureDelegateInstance;

        private static bool _HasCaptureDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasCapture();
        }

        // bool EnableTouchEvents(int eventsMask) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _EnableTouchEventsDelegateInstance;

        private static bool _EnableTouchEventsDelegateHook(global::System.IntPtr __instance, int eventsMask)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.EnableTouchEvents(eventsMask);
        }

        // void Refresh( bool eraseBackground = true, const wxRect *rect = NULL ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool_IntPtr _RefreshDelegateInstance;

        private static void _RefreshDelegateHook(global::System.IntPtr __instance, bool eraseBackground, global::System.IntPtr rect)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Rect __result1;
            if (rect == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Rect.NativeToManagedMap.ContainsKey(rect))
                __result1 = (global::wxSharp.Rect) global::wxSharp.Rect.NativeToManagedMap[rect];
            else __result1 = global::wxSharp.Rect.__CreateInstance(rect);
            __target.Refresh(eraseBackground, __result1);
        }

        // void Update() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        // void ClearBackground() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _ClearBackgroundDelegateInstance;

        private static void _ClearBackgroundDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ClearBackground();
        }

        // void PrepareDC( wxDC & WXUNUSED(dc) ) { }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _PrepareDCDelegateInstance;

        private static void _PrepareDCDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.DC __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.DC.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.DC) global::wxSharp.DC.NativeToManagedMap[_0];
            else __result0 = (global::wxSharp.DC) global::wxSharp.DC.__CreateInstance(_0, skipVTables: true);
            __target.PrepareDC(__result0);
        }

        // void SetDoubleBuffered(bool WXUNUSED(on)) { }
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetDoubleBufferedDelegateInstance;

        private static void _SetDoubleBufferedDelegateHook(global::System.IntPtr __instance, bool _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetDoubleBuffered(_0);
        }

        // bool IsDoubleBuffered() const wxOVERRIDE { return true; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsDoubleBufferedDelegateInstance;

        private static bool _IsDoubleBufferedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsDoubleBuffered();
        }

        // bool DoIsExposed( int x, int y ) const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int _DoIsExposedDelegateInstance;

        private static bool _DoIsExposedDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoIsExposed(x, y);
        }

        // bool DoIsExposed( int x, int y, int w, int h ) const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int_int _DoIsExposed_1DelegateInstance;

        private static bool _DoIsExposed_1DelegateHook(global::System.IntPtr __instance, int x, int y, int w, int h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoIsExposed(x, y, w, h);
        }

        // wxVisualAttributes GetDefaultAttributes() const { return GetClassDefaultAttributes(GetWindowVariant()); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _GetDefaultAttributesDelegateInstance;

        private static void _GetDefaultAttributesDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDefaultAttributes();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.VisualAttributes.__Internal*) @return = *(global::wxSharp.VisualAttributes.__Internal*) __ret.__Instance;
        }

        // bool SetBackgroundColour( const wxColour &colour ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _SetBackgroundColourDelegateInstance;

        private static bool _SetBackgroundColourDelegateHook(global::System.IntPtr __instance, global::System.IntPtr colour)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Color __result0;
            if (colour == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Color.NativeToManagedMap.ContainsKey(colour))
                __result0 = (global::wxSharp.Color) global::wxSharp.Color.NativeToManagedMap[colour];
            else __result0 = (global::wxSharp.Color) global::wxSharp.Color.__CreateInstance(colour, skipVTables: true);
            return __target.SetBackgroundColour(__result0);
        }

        // bool SetForegroundColour( const wxColour &colour ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _SetForegroundColourDelegateInstance;

        private static bool _SetForegroundColourDelegateHook(global::System.IntPtr __instance, global::System.IntPtr colour)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Color __result0;
            if (colour == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Color.NativeToManagedMap.ContainsKey(colour))
                __result0 = (global::wxSharp.Color) global::wxSharp.Color.NativeToManagedMap[colour];
            else __result0 = (global::wxSharp.Color) global::wxSharp.Color.__CreateInstance(colour, skipVTables: true);
            return __target.SetForegroundColour(__result0);
        }

        // bool SetBackgroundStyle(wxBackgroundStyle style) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxBackgroundStyle _SetBackgroundStyleDelegateInstance;

        private static bool _SetBackgroundStyleDelegateHook(global::System.IntPtr __instance, global::wxSharp.BackgroundStyle style)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetBackgroundStyle(style);
        }

        // bool HasTransparentBackground() { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasTransparentBackgroundDelegateInstance;

        private static bool _HasTransparentBackgroundDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasTransparentBackground();
        }

        // int GetCharHeight() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetCharHeightDelegateInstance;

        private static int _GetCharHeightDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetCharHeight();
        }

        // int GetCharWidth() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetCharWidthDelegateInstance;

        private static int _GetCharWidthDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetCharWidth();
        }

        // void UpdateWindowUI(long flags = wxUPDATE_UI_NONE)
        private static global::wxSharp.Delegates.Action_IntPtr_int _UpdateWindowUIDelegateInstance;

        private static void _UpdateWindowUIDelegateHook(global::System.IntPtr __instance, int flags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.UpdateWindowUI(flags);
        }

        // void DoUpdateWindowUI(wxUpdateUIEvent& event)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoUpdateWindowUIDelegateInstance;

        private static void _DoUpdateWindowUIDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.UpdateUIEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.UpdateUIEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.UpdateUIEvent) global::wxSharp.UpdateUIEvent.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.UpdateUIEvent) global::wxSharp.UpdateUIEvent.__CreateInstance(@event, skipVTables: true);
            __target.DoUpdateWindowUI(__result0);
        }

        // bool HasMultiplePages() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasMultiplePagesDelegateInstance;

        private static bool _HasMultiplePagesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasMultiplePages();
        }

        // bool CanScroll(int orient) const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _CanScrollDelegateInstance;

        private static bool _CanScrollDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanScroll(orient);
        }

        // void SetScrollbar( int orient, int pos, int thumbVisible, int range, bool refresh = true ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_bool _SetScrollbarDelegateInstance;

        private static void _SetScrollbarDelegateHook(global::System.IntPtr __instance, int orient, int pos, int thumbVisible, int range, bool refresh)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetScrollbar(orient, pos, thumbVisible, range, refresh);
        }

        // void SetScrollPos( int orient, int pos, bool refresh = true ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_bool _SetScrollPosDelegateInstance;

        private static void _SetScrollPosDelegateHook(global::System.IntPtr __instance, int orient, int pos, bool refresh)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetScrollPos(orient, pos, refresh);
        }

        // int GetScrollPos( int orient ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _GetScrollPosDelegateInstance;

        private static int _GetScrollPosDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetScrollPos(orient);
        }

        // int GetScrollThumb( int orient ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _GetScrollThumbDelegateInstance;

        private static int _GetScrollThumbDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetScrollThumb(orient);
        }

        // int GetScrollRange( int orient ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _GetScrollRangeDelegateInstance;

        private static int _GetScrollRangeDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetScrollRange(orient);
        }

        // void ScrollWindow( int dx, int dy, const wxRect* rect = NULL ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_IntPtr _ScrollWindowDelegateInstance;

        private static void _ScrollWindowDelegateHook(global::System.IntPtr __instance, int dx, int dy, global::System.IntPtr rect)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Rect __result2;
            if (rect == IntPtr.Zero) __result2 = null;
            else if (global::wxSharp.Rect.NativeToManagedMap.ContainsKey(rect))
                __result2 = (global::wxSharp.Rect) global::wxSharp.Rect.NativeToManagedMap[rect];
            else __result2 = global::wxSharp.Rect.__CreateInstance(rect);
            __target.ScrollWindow(dx, dy, __result2);
        }

        // bool ScrollLines(int WXUNUSED(lines)) { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _ScrollLinesDelegateInstance;

        private static bool _ScrollLinesDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ScrollLines(_0);
        }

        // bool ScrollPages(int WXUNUSED(pages)) { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _ScrollPagesDelegateInstance;

        private static bool _ScrollPagesDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ScrollPages(_0);
        }

        // void AlwaysShowScrollbars(bool horz = true, bool vert = true) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool_bool _AlwaysShowScrollbarsDelegateInstance;

        private static void _AlwaysShowScrollbarsDelegateHook(global::System.IntPtr __instance, bool horz, bool vert)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AlwaysShowScrollbars(horz, vert);
        }

        // bool IsScrollbarAlwaysShown(int orient) const wxOVERRIDE { return orient == wxHORIZONTAL ? m_hScrollBarAlwaysShown : m_vScrollBarAlwaysShown; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _IsScrollbarAlwaysShownDelegateInstance;

        private static bool _IsScrollbarAlwaysShownDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsScrollbarAlwaysShown(orient);
        }

        // void SetDropTarget( wxDropTarget *dropTarget ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetDropTargetDelegateInstance;

        private static void _SetDropTargetDelegateHook(global::System.IntPtr __instance, global::System.IntPtr dropTarget)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.DropTarget __result0;
            if (dropTarget == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.DropTarget.NativeToManagedMap.ContainsKey(dropTarget))
                __result0 = (global::wxSharp.DropTarget) global::wxSharp.DropTarget.NativeToManagedMap[dropTarget];
            else __result0 = global::wxSharp.DropTarget.__CreateInstance(dropTarget);
            __target.SetDropTarget(__result0);
        }

        // wxDropTarget *GetDropTarget() const { return m_dropTarget; }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetDropTargetDelegateInstance;

        private static global::System.IntPtr _GetDropTargetDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDropTarget();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DragAcceptFiles(bool accept)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _DragAcceptFilesDelegateInstance;

        private static void _DragAcceptFilesDelegateHook(global::System.IntPtr __instance, bool accept)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DragAcceptFiles(accept);
        }

        // void SetConstraintSizes(bool recurse = true)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetConstraintSizesDelegateInstance;

        private static void _SetConstraintSizesDelegateHook(global::System.IntPtr __instance, bool recurse)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetConstraintSizes(recurse);
        }

        // bool LayoutPhase1(int *noChanges)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_intPtr _LayoutPhase1DelegateInstance;

        private static bool _LayoutPhase1DelegateHook(global::System.IntPtr __instance, int* noChanges)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.LayoutPhase1(ref *noChanges);
        }

        // bool LayoutPhase2(int *noChanges)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_intPtr _LayoutPhase2DelegateInstance;

        private static bool _LayoutPhase2DelegateHook(global::System.IntPtr __instance, int* noChanges)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.LayoutPhase2(ref *noChanges);
        }

        // bool DoPhase(int phase)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _DoPhaseDelegateInstance;

        private static bool _DoPhaseDelegateHook(global::System.IntPtr __instance, int phase)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoPhase(phase);
        }

        // void SetSizeConstraint(int x, int y, int w, int h)
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int _SetSizeConstraintDelegateInstance;

        private static void _SetSizeConstraintDelegateHook(global::System.IntPtr __instance, int x, int y, int w, int h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetSizeConstraint(x, y, w, h);
        }

        // void MoveConstraint(int x, int y)
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _MoveConstraintDelegateInstance;

        private static void _MoveConstraintDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.MoveConstraint(x, y);
        }

        // void GetSizeConstraint(int *w, int *h) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _GetSizeConstraintDelegateInstance;

        private static void _GetSizeConstraintDelegateHook(global::System.IntPtr __instance, int* w, int* h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetSizeConstraint(ref *w, ref *h);
        }

        // void GetClientSizeConstraint(int *w, int *h) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _GetClientSizeConstraintDelegateInstance;

        private static void _GetClientSizeConstraintDelegateHook(global::System.IntPtr __instance, int* w, int* h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetClientSizeConstraint(ref *w, ref *h);
        }

        // void GetPositionConstraint(int *x, int *y) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _GetPositionConstraintDelegateInstance;

        private static void _GetPositionConstraintDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetPositionConstraint(ref *x, ref *y);
        }

        // bool Layout()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _LayoutDelegateInstance;

        private static bool _LayoutDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Layout();
        }

        // bool SetTransparent(wxByte alpha) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_byte _SetTransparentDelegateInstance;

        private static bool _SetTransparentDelegateHook(global::System.IntPtr __instance, byte alpha)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetTransparent(alpha);
        }

        // bool CanSetTransparent() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanSetTransparentDelegateInstance;

        private static bool _CanSetTransparentDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanSetTransparent();
        }

        // void OnInternalIdle()
        private static global::wxSharp.Delegates.Action_IntPtr _OnInternalIdleDelegateInstance;

        private static void _OnInternalIdleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnInternalIdle();
        }

        // bool SendIdleEvents(wxIdleEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _SendIdleEventsDelegateInstance;

        private static bool _SendIdleEventsDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IdleEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.IdleEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.IdleEvent) global::wxSharp.IdleEvent.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.IdleEvent) global::wxSharp.IdleEvent.__CreateInstance(@event, skipVTables: true);
            return __target.SendIdleEvents(__result0);
        }

        // WXWidget GetHandle() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetHandleDelegateInstance;

        private static global::System.IntPtr _GetHandleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetHandle();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void AssociateHandle(WXWidget WXUNUSED(handle)) { }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AssociateHandleDelegateInstance;

        private static void _AssociateHandleDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.NSView __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.NSView.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.NSView) global::wxSharp.NSView.NativeToManagedMap[_0];
            else __result0 = global::wxSharp.NSView.__CreateInstance(_0);
            __target.AssociateHandle(__result0);
        }

        // void DissociateHandle() { }
        private static global::wxSharp.Delegates.Action_IntPtr _DissociateHandleDelegateInstance;

        private static void _DissociateHandleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DissociateHandle();
        }

        // void InheritAttributes()
        private static global::wxSharp.Delegates.Action_IntPtr _InheritAttributesDelegateInstance;

        private static void _InheritAttributesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.InheritAttributes();
        }

        // bool ShouldInheritColours() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _ShouldInheritColoursDelegateInstance;

        private static bool _ShouldInheritColoursDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ShouldInheritColours();
        }

        // bool CanBeOutsideClientArea() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanBeOutsideClientAreaDelegateInstance;

        private static bool _CanBeOutsideClientAreaDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanBeOutsideClientArea();
        }

        // bool CanApplyThemeBorder() const { return true; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanApplyThemeBorderDelegateInstance;

        private static bool _CanApplyThemeBorderDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanApplyThemeBorder();
        }

        // wxWindow *GetMainWindowOfCompositeControl() { return (wxWindow*)this; }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetMainWindowOfCompositeControlDelegateInstance;

        private static global::System.IntPtr _GetMainWindowOfCompositeControlDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMainWindowOfCompositeControl();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsTopNavigationDomain(NavigationKind WXUNUSED(kind)) const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxWindow_NavigationKind _IsTopNavigationDomainDelegateInstance;

        private static bool _IsTopNavigationDomainDelegateHook(global::System.IntPtr __instance, global::wxSharp.Window.NavigationKind _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsTopNavigationDomain(_0);
        }

        // wxTextEntry* WXGetTextEntry() const { return NULL; }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _WXGetTextEntryDelegateInstance;

        private static global::System.IntPtr _WXGetTextEntryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WXGetTextEntry();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DoMoveInTabOrder(wxWindow *win, WindowOrder move)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxWindow_WindowOrder _DoMoveInTabOrderDelegateInstance;

        private static void _DoMoveInTabOrderDelegateHook(global::System.IntPtr __instance, global::System.IntPtr win, global::wxSharp.Window.WindowOrder move)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (win == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(win))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[win];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(win, skipVTables: true);
            __target.DoMoveInTabOrder(__result0, move);
        }

        // bool DoNavigateIn(int flags)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _DoNavigateInDelegateInstance;

        private static bool _DoNavigateInDelegateHook(global::System.IntPtr __instance, int flags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoNavigateIn(flags);
        }

        // void DoEnable( bool enable ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool _DoEnableDelegateInstance;

        private static void _DoEnableDelegateHook(global::System.IntPtr __instance, bool enable)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoEnable(enable);
        }

        // wxBorder GetDefaultBorder() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr _GetDefaultBorderDelegateInstance;

        private static global::wxSharp.Border _GetDefaultBorderDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDefaultBorder();
            return __ret;
        }

        // wxBorder GetDefaultBorderForControl() const { return wxBORDER_THEME; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr _GetDefaultBorderForControlDelegateInstance;

        private static global::wxSharp.Border _GetDefaultBorderForControlDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDefaultBorderForControl();
            return __ret;
        }

        // void DoClientToScreen( int *x, int *y ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoClientToScreenDelegateInstance;

        private static void _DoClientToScreenDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoClientToScreen(ref *x, ref *y);
        }

        // void DoScreenToClient( int *x, int *y ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoScreenToClientDelegateInstance;

        private static void _DoScreenToClientDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoScreenToClient(ref *x, ref *y);
        }

        // wxHitTest DoHitTest(wxCoord x, wxCoord y) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxHitTest_IntPtr_int_int _DoHitTestDelegateInstance;

        private static global::wxSharp.HitTest _DoHitTestDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoHitTest(x, y);
            return __ret;
        }

        // void DoCaptureMouse() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoCaptureMouseDelegateInstance;

        private static void _DoCaptureMouseDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoCaptureMouse();
        }

        // void DoReleaseMouse() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoReleaseMouseDelegateInstance;

        private static void _DoReleaseMouseDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoReleaseMouse();
        }

        // void DoGetPosition( int *x, int *y ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetPositionDelegateInstance;

        private static void _DoGetPositionDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetPosition(ref *x, ref *y);
        }

        // void DoGetScreenPosition(int *x, int *y) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetScreenPositionDelegateInstance;

        private static void _DoGetScreenPositionDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetScreenPosition(ref *x, ref *y);
        }

        // void DoGetSize( int *width, int *height ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetSizeDelegateInstance;

        private static void _DoGetSizeDelegateHook(global::System.IntPtr __instance, int* width, int* height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetSize(ref *width, ref *height);
        }

        // void DoGetClientSize( int *width, int *height ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetClientSizeDelegateInstance;

        private static void _DoGetClientSizeDelegateHook(global::System.IntPtr __instance, int* width, int* height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetClientSize(ref *width, ref *height);
        }

        // wxSize DoGetBestSize() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetBestSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetBestSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetBestSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize DoGetBestClientSize() const { return wxDefaultSize; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetBestClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetBestClientSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetBestClientSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // int DoGetBestClientHeight(int WXUNUSED(width)) const { return wxDefaultCoord; }
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _DoGetBestClientHeightDelegateInstance;

        private static int _DoGetBestClientHeightDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoGetBestClientHeight(_0);
        }

        // int DoGetBestClientWidth(int WXUNUSED(height)) const { return wxDefaultCoord; }
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _DoGetBestClientWidthDelegateInstance;

        private static int _DoGetBestClientWidthDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoGetBestClientWidth(_0);
        }

        // void DoSetSize(int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int _DoSetSizeDelegateInstance;

        private static void _DoSetSizeDelegateHook(global::System.IntPtr __instance, int x, int y, int width, int height, int sizeFlags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetSize(x, y, width, height, sizeFlags);
        }

        // void DoSetClientSize(int width, int height) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetClientSizeDelegateInstance;

        private static void _DoSetClientSizeDelegateHook(global::System.IntPtr __instance, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientSize(width, height);
        }

        // void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int _DoSetSizeHintsDelegateInstance;

        private static void _DoSetSizeHintsDelegateHook(global::System.IntPtr __instance, int minW, int minH, int maxW, int maxH, int incW, int incH)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetSizeHints(minW, minH, maxW, maxH, incW, incH);
        }

        // wxSize DoGetBorderSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetBorderSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetBorderSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetBorderSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void DoMoveWindow( int x, int y, int width, int height ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int _DoMoveWindowDelegateInstance;

        private static void _DoMoveWindowDelegateHook(global::System.IntPtr __instance, int x, int y, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoMoveWindow(x, y, width, height);
        }

        // void DoCentre(int dir)
        private static global::wxSharp.Delegates.Action_IntPtr_int _DoCentreDelegateInstance;

        private static void _DoCentreDelegateHook(global::System.IntPtr __instance, int dir)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoCentre(dir);
        }

        // void DoSetToolTip( wxToolTip *tip ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoSetToolTipDelegateInstance;

        private static void _DoSetToolTipDelegateHook(global::System.IntPtr __instance, global::System.IntPtr tip)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.ToolTip __result0;
            if (tip == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.ToolTip.NativeToManagedMap.ContainsKey(tip))
                __result0 = (global::wxSharp.ToolTip) global::wxSharp.ToolTip.NativeToManagedMap[tip];
            else __result0 = global::wxSharp.ToolTip.__CreateInstance(tip);
            __target.DoSetToolTip(__result0);
        }

        // bool DoPopupMenu( wxMenu *menu, int x, int y ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoPopupMenuDelegateInstance;

        private static bool _DoPopupMenuDelegateHook(global::System.IntPtr __instance, global::System.IntPtr menu, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Menu __result0;
            if (menu == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Menu.NativeToManagedMap.ContainsKey(menu))
                __result0 = (global::wxSharp.Menu) global::wxSharp.Menu.NativeToManagedMap[menu];
            else __result0 = global::wxSharp.Menu.__CreateInstance(menu);
            return __target.DoPopupMenu(__result0, x, y);
        }

        // void AdjustForParentClientOrigin(int& x, int& y, int sizeFlags = 0) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr_int _AdjustForParentClientOriginDelegateInstance;

        private static void _AdjustForParentClientOriginDelegateHook(global::System.IntPtr __instance, int* x, int* y, int sizeFlags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AdjustForParentClientOrigin(ref *x, ref *y, sizeFlags);
        }

        // void DoSetWindowVariant( wxWindowVariant variant ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_wxSharp_wxWindowVariant _DoSetWindowVariantDelegateInstance;

        private static void _DoSetWindowVariantDelegateHook(global::System.IntPtr __instance, global::wxSharp.WindowVariant variant)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetWindowVariant(variant);
        }

        // void DoFreeze() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoFreezeDelegateInstance;

        private static void _DoFreezeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoFreeze();
        }

        // void DoThaw() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoThawDelegateInstance;

        private static void _DoThawDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoThaw();
        }

        // wxByte GetTransparent() const
        private static global::wxSharp.Delegates.Func_byte_IntPtr _GetTransparentDelegateInstance;

        private static byte _GetTransparentDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetTransparent();
        }

        // void TriggerScrollEvent( wxEventType scrollEvent )
        private static global::wxSharp.Delegates.Action_IntPtr_int _TriggerScrollEventDelegateInstance;

        private static void _TriggerScrollEventDelegateHook(global::System.IntPtr __instance, int scrollEvent)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.TriggerScrollEvent(scrollEvent);
        }

        // wxSize DoGetSizeFromClientSize( const wxSize & size ) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr _DoGetSizeFromClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetSizeFromClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Window) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            var __ret = __target.DoGetSizeFromClientSize(__result0);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[162];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _SetNextHandlerDelegateInstance += _SetNextHandlerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetNextHandlerDelegateInstance).ToPointer();
                _SetPreviousHandlerDelegateInstance += _SetPreviousHandlerDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_SetPreviousHandlerDelegateInstance).ToPointer();
                _ProcessEventDelegateInstance += _ProcessEventDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_ProcessEventDelegateInstance).ToPointer();
                _QueueEventDelegateInstance += _QueueEventDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_QueueEventDelegateInstance).ToPointer();
                _AddPendingEventDelegateInstance += _AddPendingEventDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_AddPendingEventDelegateInstance).ToPointer();
                _TryBeforeDelegateInstance += _TryBeforeDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_TryBeforeDelegateInstance).ToPointer();
                _TryAfterDelegateInstance += _TryAfterDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_TryAfterDelegateInstance).ToPointer();
                _DoSetClientDataDelegateInstance += _DoSetClientDataDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_DoSetClientDataDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
                _DestroyDelegateInstance += _DestroyDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_DestroyDelegateInstance).ToPointer();
                _AdjustForLayoutDirectionDelegateInstance += _AdjustForLayoutDirectionDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_AdjustForLayoutDirectionDelegateInstance).ToPointer();
                _SetIdDelegateInstance += _SetIdDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_SetIdDelegateInstance).ToPointer();
                _RaiseDelegateInstance += _RaiseDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_RaiseDelegateInstance).ToPointer();
                _LowerDelegateInstance += _LowerDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_LowerDelegateInstance).ToPointer();
                _GetClientAreaOriginDelegateInstance += _GetClientAreaOriginDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_GetClientAreaOriginDelegateInstance).ToPointer();
                _ClientToWindowSizeDelegateInstance += _ClientToWindowSizeDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_ClientToWindowSizeDelegateInstance).ToPointer();
                _WindowToClientSizeDelegateInstance += _WindowToClientSizeDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_WindowToClientSizeDelegateInstance).ToPointer();
                _GetEffectiveMinSizeDelegateInstance += _GetEffectiveMinSizeDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_GetEffectiveMinSizeDelegateInstance).ToPointer();
                _FitDelegateInstance += _FitDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_FitDelegateInstance).ToPointer();
                _FitInsideDelegateInstance += _FitInsideDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_FitInsideDelegateInstance).ToPointer();
                _SetSizeHintsDelegateInstance += _SetSizeHintsDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_SetSizeHintsDelegateInstance).ToPointer();
                _SetMinSizeDelegateInstance += _SetMinSizeDelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_SetMinSizeDelegateInstance).ToPointer();
                _SetMaxSizeDelegateInstance += _SetMaxSizeDelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_SetMaxSizeDelegateInstance).ToPointer();
                _SetMinClientSizeDelegateInstance += _SetMinClientSizeDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_SetMinClientSizeDelegateInstance).ToPointer();
                _SetMaxClientSizeDelegateInstance += _SetMaxClientSizeDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_SetMaxClientSizeDelegateInstance).ToPointer();
                _GetMinSizeDelegateInstance += _GetMinSizeDelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_GetMinSizeDelegateInstance).ToPointer();
                _GetMaxSizeDelegateInstance += _GetMaxSizeDelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_GetMaxSizeDelegateInstance).ToPointer();
                _GetMinClientSizeDelegateInstance += _GetMinClientSizeDelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_GetMinClientSizeDelegateInstance).ToPointer();
                _GetMaxClientSizeDelegateInstance += _GetMaxClientSizeDelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_GetMaxClientSizeDelegateInstance).ToPointer();
                _DoSetVirtualSizeDelegateInstance += _DoSetVirtualSizeDelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_DoSetVirtualSizeDelegateInstance).ToPointer();
                _DoGetVirtualSizeDelegateInstance += _DoGetVirtualSizeDelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_DoGetVirtualSizeDelegateInstance).ToPointer();
                _GetBestVirtualSizeDelegateInstance += _GetBestVirtualSizeDelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_GetBestVirtualSizeDelegateInstance).ToPointer();
                _GetContentScaleFactorDelegateInstance += _GetContentScaleFactorDelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_GetContentScaleFactorDelegateInstance).ToPointer();
                _GetWindowBorderSizeDelegateInstance += _GetWindowBorderSizeDelegateHook;
                _Thunks[36] = Marshal.GetFunctionPointerForDelegate(_GetWindowBorderSizeDelegateInstance).ToPointer();
                _InformFirstDirectionDelegateInstance += _InformFirstDirectionDelegateHook;
                _Thunks[37] = Marshal.GetFunctionPointerForDelegate(_InformFirstDirectionDelegateInstance).ToPointer();
                _SendSizeEventDelegateInstance += _SendSizeEventDelegateHook;
                _Thunks[38] = Marshal.GetFunctionPointerForDelegate(_SendSizeEventDelegateInstance).ToPointer();
                _BeginRepositioningChildrenDelegateInstance += _BeginRepositioningChildrenDelegateHook;
                _Thunks[39] = Marshal.GetFunctionPointerForDelegate(_BeginRepositioningChildrenDelegateInstance).ToPointer();
                _EndRepositioningChildrenDelegateInstance += _EndRepositioningChildrenDelegateHook;
                _Thunks[40] = Marshal.GetFunctionPointerForDelegate(_EndRepositioningChildrenDelegateInstance).ToPointer();
                _ShowDelegateInstance += _ShowDelegateHook;
                _Thunks[41] = Marshal.GetFunctionPointerForDelegate(_ShowDelegateInstance).ToPointer();
                _ShowWithEffectDelegateInstance += _ShowWithEffectDelegateHook;
                _Thunks[42] = Marshal.GetFunctionPointerForDelegate(_ShowWithEffectDelegateInstance).ToPointer();
                _HideWithEffectDelegateInstance += _HideWithEffectDelegateHook;
                _Thunks[43] = Marshal.GetFunctionPointerForDelegate(_HideWithEffectDelegateInstance).ToPointer();
                _EnableDelegateInstance += _EnableDelegateHook;
                _Thunks[44] = Marshal.GetFunctionPointerForDelegate(_EnableDelegateInstance).ToPointer();
                _IsShownDelegateInstance += _IsShownDelegateHook;
                _Thunks[45] = Marshal.GetFunctionPointerForDelegate(_IsShownDelegateInstance).ToPointer();
                _IsShownOnScreenDelegateInstance += _IsShownOnScreenDelegateHook;
                _Thunks[46] = Marshal.GetFunctionPointerForDelegate(_IsShownOnScreenDelegateInstance).ToPointer();
                _SetWindowStyleFlagDelegateInstance += _SetWindowStyleFlagDelegateHook;
                _Thunks[47] = Marshal.GetFunctionPointerForDelegate(_SetWindowStyleFlagDelegateInstance).ToPointer();
                _GetWindowStyleFlagDelegateInstance += _GetWindowStyleFlagDelegateHook;
                _Thunks[48] = Marshal.GetFunctionPointerForDelegate(_GetWindowStyleFlagDelegateInstance).ToPointer();
                _IsRetainedDelegateInstance += _IsRetainedDelegateHook;
                _Thunks[49] = Marshal.GetFunctionPointerForDelegate(_IsRetainedDelegateInstance).ToPointer();
                _SetExtraStyleDelegateInstance += _SetExtraStyleDelegateHook;
                _Thunks[50] = Marshal.GetFunctionPointerForDelegate(_SetExtraStyleDelegateInstance).ToPointer();
                _SetThemeEnabledDelegateInstance += _SetThemeEnabledDelegateHook;
                _Thunks[51] = Marshal.GetFunctionPointerForDelegate(_SetThemeEnabledDelegateInstance).ToPointer();
                _GetThemeEnabledDelegateInstance += _GetThemeEnabledDelegateHook;
                _Thunks[52] = Marshal.GetFunctionPointerForDelegate(_GetThemeEnabledDelegateInstance).ToPointer();
                _SetFocusDelegateInstance += _SetFocusDelegateHook;
                _Thunks[53] = Marshal.GetFunctionPointerForDelegate(_SetFocusDelegateInstance).ToPointer();
                _SetFocusFromKbdDelegateInstance += _SetFocusFromKbdDelegateHook;
                _Thunks[54] = Marshal.GetFunctionPointerForDelegate(_SetFocusFromKbdDelegateInstance).ToPointer();
                _HasFocusDelegateInstance += _HasFocusDelegateHook;
                _Thunks[55] = Marshal.GetFunctionPointerForDelegate(_HasFocusDelegateInstance).ToPointer();
                _AcceptsFocusDelegateInstance += _AcceptsFocusDelegateHook;
                _Thunks[56] = Marshal.GetFunctionPointerForDelegate(_AcceptsFocusDelegateInstance).ToPointer();
                _AcceptsFocusRecursivelyDelegateInstance += _AcceptsFocusRecursivelyDelegateHook;
                _Thunks[57] = Marshal.GetFunctionPointerForDelegate(_AcceptsFocusRecursivelyDelegateInstance).ToPointer();
                _AcceptsFocusFromKeyboardDelegateInstance += _AcceptsFocusFromKeyboardDelegateHook;
                _Thunks[58] = Marshal.GetFunctionPointerForDelegate(_AcceptsFocusFromKeyboardDelegateInstance).ToPointer();
                _CanBeFocusedDelegateInstance += _CanBeFocusedDelegateHook;
                _Thunks[59] = Marshal.GetFunctionPointerForDelegate(_CanBeFocusedDelegateInstance).ToPointer();
                _SetCanFocusDelegateInstance += _SetCanFocusDelegateHook;
                _Thunks[60] = Marshal.GetFunctionPointerForDelegate(_SetCanFocusDelegateInstance).ToPointer();
                _IsTopLevelDelegateInstance += _IsTopLevelDelegateHook;
                _Thunks[61] = Marshal.GetFunctionPointerForDelegate(_IsTopLevelDelegateInstance).ToPointer();
                _IsClientAreaChildDelegateInstance += _IsClientAreaChildDelegateHook;
                _Thunks[62] = Marshal.GetFunctionPointerForDelegate(_IsClientAreaChildDelegateInstance).ToPointer();
                _ValidateDelegateInstance += _ValidateDelegateHook;
                _Thunks[63] = Marshal.GetFunctionPointerForDelegate(_ValidateDelegateInstance).ToPointer();
                _TransferDataToWindowDelegateInstance += _TransferDataToWindowDelegateHook;
                _Thunks[64] = Marshal.GetFunctionPointerForDelegate(_TransferDataToWindowDelegateInstance).ToPointer();
                _TransferDataFromWindowDelegateInstance += _TransferDataFromWindowDelegateHook;
                _Thunks[65] = Marshal.GetFunctionPointerForDelegate(_TransferDataFromWindowDelegateInstance).ToPointer();
                _InitDialogDelegateInstance += _InitDialogDelegateHook;
                _Thunks[66] = Marshal.GetFunctionPointerForDelegate(_InitDialogDelegateInstance).ToPointer();
                _RegisterHotKeyDelegateInstance += _RegisterHotKeyDelegateHook;
                _Thunks[67] = Marshal.GetFunctionPointerForDelegate(_RegisterHotKeyDelegateInstance).ToPointer();
                _UnregisterHotKeyDelegateInstance += _UnregisterHotKeyDelegateHook;
                _Thunks[68] = Marshal.GetFunctionPointerForDelegate(_UnregisterHotKeyDelegateInstance).ToPointer();
                _GetDPIDelegateInstance += _GetDPIDelegateHook;
                _Thunks[69] = Marshal.GetFunctionPointerForDelegate(_GetDPIDelegateInstance).ToPointer();
                _WarpPointerDelegateInstance += _WarpPointerDelegateHook;
                _Thunks[70] = Marshal.GetFunctionPointerForDelegate(_WarpPointerDelegateInstance).ToPointer();
                _HasCaptureDelegateInstance += _HasCaptureDelegateHook;
                _Thunks[71] = Marshal.GetFunctionPointerForDelegate(_HasCaptureDelegateInstance).ToPointer();
                _EnableTouchEventsDelegateInstance += _EnableTouchEventsDelegateHook;
                _Thunks[72] = Marshal.GetFunctionPointerForDelegate(_EnableTouchEventsDelegateInstance).ToPointer();
                _RefreshDelegateInstance += _RefreshDelegateHook;
                _Thunks[73] = Marshal.GetFunctionPointerForDelegate(_RefreshDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[74] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
                _ClearBackgroundDelegateInstance += _ClearBackgroundDelegateHook;
                _Thunks[75] = Marshal.GetFunctionPointerForDelegate(_ClearBackgroundDelegateInstance).ToPointer();
                _PrepareDCDelegateInstance += _PrepareDCDelegateHook;
                _Thunks[76] = Marshal.GetFunctionPointerForDelegate(_PrepareDCDelegateInstance).ToPointer();
                _SetDoubleBufferedDelegateInstance += _SetDoubleBufferedDelegateHook;
                _Thunks[77] = Marshal.GetFunctionPointerForDelegate(_SetDoubleBufferedDelegateInstance).ToPointer();
                _IsDoubleBufferedDelegateInstance += _IsDoubleBufferedDelegateHook;
                _Thunks[78] = Marshal.GetFunctionPointerForDelegate(_IsDoubleBufferedDelegateInstance).ToPointer();
                _DoIsExposedDelegateInstance += _DoIsExposedDelegateHook;
                _Thunks[79] = Marshal.GetFunctionPointerForDelegate(_DoIsExposedDelegateInstance).ToPointer();
                _DoIsExposed_1DelegateInstance += _DoIsExposed_1DelegateHook;
                _Thunks[80] = Marshal.GetFunctionPointerForDelegate(_DoIsExposed_1DelegateInstance).ToPointer();
                _GetDefaultAttributesDelegateInstance += _GetDefaultAttributesDelegateHook;
                _Thunks[81] = Marshal.GetFunctionPointerForDelegate(_GetDefaultAttributesDelegateInstance).ToPointer();
                _SetBackgroundColourDelegateInstance += _SetBackgroundColourDelegateHook;
                _Thunks[82] = Marshal.GetFunctionPointerForDelegate(_SetBackgroundColourDelegateInstance).ToPointer();
                _SetForegroundColourDelegateInstance += _SetForegroundColourDelegateHook;
                _Thunks[83] = Marshal.GetFunctionPointerForDelegate(_SetForegroundColourDelegateInstance).ToPointer();
                _SetBackgroundStyleDelegateInstance += _SetBackgroundStyleDelegateHook;
                _Thunks[84] = Marshal.GetFunctionPointerForDelegate(_SetBackgroundStyleDelegateInstance).ToPointer();
                _HasTransparentBackgroundDelegateInstance += _HasTransparentBackgroundDelegateHook;
                _Thunks[85] = Marshal.GetFunctionPointerForDelegate(_HasTransparentBackgroundDelegateInstance).ToPointer();
                _GetCharHeightDelegateInstance += _GetCharHeightDelegateHook;
                _Thunks[86] = Marshal.GetFunctionPointerForDelegate(_GetCharHeightDelegateInstance).ToPointer();
                _GetCharWidthDelegateInstance += _GetCharWidthDelegateHook;
                _Thunks[87] = Marshal.GetFunctionPointerForDelegate(_GetCharWidthDelegateInstance).ToPointer();
                _UpdateWindowUIDelegateInstance += _UpdateWindowUIDelegateHook;
                _Thunks[88] = Marshal.GetFunctionPointerForDelegate(_UpdateWindowUIDelegateInstance).ToPointer();
                _DoUpdateWindowUIDelegateInstance += _DoUpdateWindowUIDelegateHook;
                _Thunks[89] = Marshal.GetFunctionPointerForDelegate(_DoUpdateWindowUIDelegateInstance).ToPointer();
                _HasMultiplePagesDelegateInstance += _HasMultiplePagesDelegateHook;
                _Thunks[90] = Marshal.GetFunctionPointerForDelegate(_HasMultiplePagesDelegateInstance).ToPointer();
                _CanScrollDelegateInstance += _CanScrollDelegateHook;
                _Thunks[91] = Marshal.GetFunctionPointerForDelegate(_CanScrollDelegateInstance).ToPointer();
                _SetScrollbarDelegateInstance += _SetScrollbarDelegateHook;
                _Thunks[92] = Marshal.GetFunctionPointerForDelegate(_SetScrollbarDelegateInstance).ToPointer();
                _SetScrollPosDelegateInstance += _SetScrollPosDelegateHook;
                _Thunks[93] = Marshal.GetFunctionPointerForDelegate(_SetScrollPosDelegateInstance).ToPointer();
                _GetScrollPosDelegateInstance += _GetScrollPosDelegateHook;
                _Thunks[94] = Marshal.GetFunctionPointerForDelegate(_GetScrollPosDelegateInstance).ToPointer();
                _GetScrollThumbDelegateInstance += _GetScrollThumbDelegateHook;
                _Thunks[95] = Marshal.GetFunctionPointerForDelegate(_GetScrollThumbDelegateInstance).ToPointer();
                _GetScrollRangeDelegateInstance += _GetScrollRangeDelegateHook;
                _Thunks[96] = Marshal.GetFunctionPointerForDelegate(_GetScrollRangeDelegateInstance).ToPointer();
                _ScrollWindowDelegateInstance += _ScrollWindowDelegateHook;
                _Thunks[97] = Marshal.GetFunctionPointerForDelegate(_ScrollWindowDelegateInstance).ToPointer();
                _ScrollLinesDelegateInstance += _ScrollLinesDelegateHook;
                _Thunks[98] = Marshal.GetFunctionPointerForDelegate(_ScrollLinesDelegateInstance).ToPointer();
                _ScrollPagesDelegateInstance += _ScrollPagesDelegateHook;
                _Thunks[99] = Marshal.GetFunctionPointerForDelegate(_ScrollPagesDelegateInstance).ToPointer();
                _AlwaysShowScrollbarsDelegateInstance += _AlwaysShowScrollbarsDelegateHook;
                _Thunks[100] = Marshal.GetFunctionPointerForDelegate(_AlwaysShowScrollbarsDelegateInstance).ToPointer();
                _IsScrollbarAlwaysShownDelegateInstance += _IsScrollbarAlwaysShownDelegateHook;
                _Thunks[101] = Marshal.GetFunctionPointerForDelegate(_IsScrollbarAlwaysShownDelegateInstance).ToPointer();
                _SetDropTargetDelegateInstance += _SetDropTargetDelegateHook;
                _Thunks[102] = Marshal.GetFunctionPointerForDelegate(_SetDropTargetDelegateInstance).ToPointer();
                _GetDropTargetDelegateInstance += _GetDropTargetDelegateHook;
                _Thunks[103] = Marshal.GetFunctionPointerForDelegate(_GetDropTargetDelegateInstance).ToPointer();
                _DragAcceptFilesDelegateInstance += _DragAcceptFilesDelegateHook;
                _Thunks[104] = Marshal.GetFunctionPointerForDelegate(_DragAcceptFilesDelegateInstance).ToPointer();
                _SetConstraintSizesDelegateInstance += _SetConstraintSizesDelegateHook;
                _Thunks[105] = Marshal.GetFunctionPointerForDelegate(_SetConstraintSizesDelegateInstance).ToPointer();
                _LayoutPhase1DelegateInstance += _LayoutPhase1DelegateHook;
                _Thunks[106] = Marshal.GetFunctionPointerForDelegate(_LayoutPhase1DelegateInstance).ToPointer();
                _LayoutPhase2DelegateInstance += _LayoutPhase2DelegateHook;
                _Thunks[107] = Marshal.GetFunctionPointerForDelegate(_LayoutPhase2DelegateInstance).ToPointer();
                _DoPhaseDelegateInstance += _DoPhaseDelegateHook;
                _Thunks[108] = Marshal.GetFunctionPointerForDelegate(_DoPhaseDelegateInstance).ToPointer();
                _SetSizeConstraintDelegateInstance += _SetSizeConstraintDelegateHook;
                _Thunks[109] = Marshal.GetFunctionPointerForDelegate(_SetSizeConstraintDelegateInstance).ToPointer();
                _MoveConstraintDelegateInstance += _MoveConstraintDelegateHook;
                _Thunks[110] = Marshal.GetFunctionPointerForDelegate(_MoveConstraintDelegateInstance).ToPointer();
                _GetSizeConstraintDelegateInstance += _GetSizeConstraintDelegateHook;
                _Thunks[111] = Marshal.GetFunctionPointerForDelegate(_GetSizeConstraintDelegateInstance).ToPointer();
                _GetClientSizeConstraintDelegateInstance += _GetClientSizeConstraintDelegateHook;
                _Thunks[112] = Marshal.GetFunctionPointerForDelegate(_GetClientSizeConstraintDelegateInstance).ToPointer();
                _GetPositionConstraintDelegateInstance += _GetPositionConstraintDelegateHook;
                _Thunks[113] = Marshal.GetFunctionPointerForDelegate(_GetPositionConstraintDelegateInstance).ToPointer();
                _LayoutDelegateInstance += _LayoutDelegateHook;
                _Thunks[114] = Marshal.GetFunctionPointerForDelegate(_LayoutDelegateInstance).ToPointer();
                _SetTransparentDelegateInstance += _SetTransparentDelegateHook;
                _Thunks[115] = Marshal.GetFunctionPointerForDelegate(_SetTransparentDelegateInstance).ToPointer();
                _CanSetTransparentDelegateInstance += _CanSetTransparentDelegateHook;
                _Thunks[116] = Marshal.GetFunctionPointerForDelegate(_CanSetTransparentDelegateInstance).ToPointer();
                _OnInternalIdleDelegateInstance += _OnInternalIdleDelegateHook;
                _Thunks[117] = Marshal.GetFunctionPointerForDelegate(_OnInternalIdleDelegateInstance).ToPointer();
                _SendIdleEventsDelegateInstance += _SendIdleEventsDelegateHook;
                _Thunks[118] = Marshal.GetFunctionPointerForDelegate(_SendIdleEventsDelegateInstance).ToPointer();
                _GetHandleDelegateInstance += _GetHandleDelegateHook;
                _Thunks[119] = Marshal.GetFunctionPointerForDelegate(_GetHandleDelegateInstance).ToPointer();
                _AssociateHandleDelegateInstance += _AssociateHandleDelegateHook;
                _Thunks[120] = Marshal.GetFunctionPointerForDelegate(_AssociateHandleDelegateInstance).ToPointer();
                _DissociateHandleDelegateInstance += _DissociateHandleDelegateHook;
                _Thunks[121] = Marshal.GetFunctionPointerForDelegate(_DissociateHandleDelegateInstance).ToPointer();
                _InheritAttributesDelegateInstance += _InheritAttributesDelegateHook;
                _Thunks[122] = Marshal.GetFunctionPointerForDelegate(_InheritAttributesDelegateInstance).ToPointer();
                _ShouldInheritColoursDelegateInstance += _ShouldInheritColoursDelegateHook;
                _Thunks[123] = Marshal.GetFunctionPointerForDelegate(_ShouldInheritColoursDelegateInstance).ToPointer();
                _CanBeOutsideClientAreaDelegateInstance += _CanBeOutsideClientAreaDelegateHook;
                _Thunks[124] = Marshal.GetFunctionPointerForDelegate(_CanBeOutsideClientAreaDelegateInstance).ToPointer();
                _CanApplyThemeBorderDelegateInstance += _CanApplyThemeBorderDelegateHook;
                _Thunks[125] = Marshal.GetFunctionPointerForDelegate(_CanApplyThemeBorderDelegateInstance).ToPointer();
                _GetMainWindowOfCompositeControlDelegateInstance += _GetMainWindowOfCompositeControlDelegateHook;
                _Thunks[126] = Marshal.GetFunctionPointerForDelegate(_GetMainWindowOfCompositeControlDelegateInstance).ToPointer();
                _IsTopNavigationDomainDelegateInstance += _IsTopNavigationDomainDelegateHook;
                _Thunks[127] = Marshal.GetFunctionPointerForDelegate(_IsTopNavigationDomainDelegateInstance).ToPointer();
                _WXGetTextEntryDelegateInstance += _WXGetTextEntryDelegateHook;
                _Thunks[128] = Marshal.GetFunctionPointerForDelegate(_WXGetTextEntryDelegateInstance).ToPointer();
                _DoMoveInTabOrderDelegateInstance += _DoMoveInTabOrderDelegateHook;
                _Thunks[129] = Marshal.GetFunctionPointerForDelegate(_DoMoveInTabOrderDelegateInstance).ToPointer();
                _DoNavigateInDelegateInstance += _DoNavigateInDelegateHook;
                _Thunks[130] = Marshal.GetFunctionPointerForDelegate(_DoNavigateInDelegateInstance).ToPointer();
                _DoEnableDelegateInstance += _DoEnableDelegateHook;
                _Thunks[131] = Marshal.GetFunctionPointerForDelegate(_DoEnableDelegateInstance).ToPointer();
                _GetDefaultBorderDelegateInstance += _GetDefaultBorderDelegateHook;
                _Thunks[132] = Marshal.GetFunctionPointerForDelegate(_GetDefaultBorderDelegateInstance).ToPointer();
                _GetDefaultBorderForControlDelegateInstance += _GetDefaultBorderForControlDelegateHook;
                _Thunks[133] = Marshal.GetFunctionPointerForDelegate(_GetDefaultBorderForControlDelegateInstance).ToPointer();
                _DoClientToScreenDelegateInstance += _DoClientToScreenDelegateHook;
                _Thunks[134] = Marshal.GetFunctionPointerForDelegate(_DoClientToScreenDelegateInstance).ToPointer();
                _DoScreenToClientDelegateInstance += _DoScreenToClientDelegateHook;
                _Thunks[135] = Marshal.GetFunctionPointerForDelegate(_DoScreenToClientDelegateInstance).ToPointer();
                _DoHitTestDelegateInstance += _DoHitTestDelegateHook;
                _Thunks[136] = Marshal.GetFunctionPointerForDelegate(_DoHitTestDelegateInstance).ToPointer();
                _DoCaptureMouseDelegateInstance += _DoCaptureMouseDelegateHook;
                _Thunks[137] = Marshal.GetFunctionPointerForDelegate(_DoCaptureMouseDelegateInstance).ToPointer();
                _DoReleaseMouseDelegateInstance += _DoReleaseMouseDelegateHook;
                _Thunks[138] = Marshal.GetFunctionPointerForDelegate(_DoReleaseMouseDelegateInstance).ToPointer();
                _DoGetPositionDelegateInstance += _DoGetPositionDelegateHook;
                _Thunks[139] = Marshal.GetFunctionPointerForDelegate(_DoGetPositionDelegateInstance).ToPointer();
                _DoGetScreenPositionDelegateInstance += _DoGetScreenPositionDelegateHook;
                _Thunks[140] = Marshal.GetFunctionPointerForDelegate(_DoGetScreenPositionDelegateInstance).ToPointer();
                _DoGetSizeDelegateInstance += _DoGetSizeDelegateHook;
                _Thunks[141] = Marshal.GetFunctionPointerForDelegate(_DoGetSizeDelegateInstance).ToPointer();
                _DoGetClientSizeDelegateInstance += _DoGetClientSizeDelegateHook;
                _Thunks[142] = Marshal.GetFunctionPointerForDelegate(_DoGetClientSizeDelegateInstance).ToPointer();
                _DoGetBestSizeDelegateInstance += _DoGetBestSizeDelegateHook;
                _Thunks[143] = Marshal.GetFunctionPointerForDelegate(_DoGetBestSizeDelegateInstance).ToPointer();
                _DoGetBestClientSizeDelegateInstance += _DoGetBestClientSizeDelegateHook;
                _Thunks[144] = Marshal.GetFunctionPointerForDelegate(_DoGetBestClientSizeDelegateInstance).ToPointer();
                _DoGetBestClientHeightDelegateInstance += _DoGetBestClientHeightDelegateHook;
                _Thunks[145] = Marshal.GetFunctionPointerForDelegate(_DoGetBestClientHeightDelegateInstance).ToPointer();
                _DoGetBestClientWidthDelegateInstance += _DoGetBestClientWidthDelegateHook;
                _Thunks[146] = Marshal.GetFunctionPointerForDelegate(_DoGetBestClientWidthDelegateInstance).ToPointer();
                _DoSetSizeDelegateInstance += _DoSetSizeDelegateHook;
                _Thunks[147] = Marshal.GetFunctionPointerForDelegate(_DoSetSizeDelegateInstance).ToPointer();
                _DoSetClientSizeDelegateInstance += _DoSetClientSizeDelegateHook;
                _Thunks[148] = Marshal.GetFunctionPointerForDelegate(_DoSetClientSizeDelegateInstance).ToPointer();
                _DoSetSizeHintsDelegateInstance += _DoSetSizeHintsDelegateHook;
                _Thunks[149] = Marshal.GetFunctionPointerForDelegate(_DoSetSizeHintsDelegateInstance).ToPointer();
                _DoGetBorderSizeDelegateInstance += _DoGetBorderSizeDelegateHook;
                _Thunks[150] = Marshal.GetFunctionPointerForDelegate(_DoGetBorderSizeDelegateInstance).ToPointer();
                _DoMoveWindowDelegateInstance += _DoMoveWindowDelegateHook;
                _Thunks[151] = Marshal.GetFunctionPointerForDelegate(_DoMoveWindowDelegateInstance).ToPointer();
                _DoCentreDelegateInstance += _DoCentreDelegateHook;
                _Thunks[152] = Marshal.GetFunctionPointerForDelegate(_DoCentreDelegateInstance).ToPointer();
                _DoSetToolTipDelegateInstance += _DoSetToolTipDelegateHook;
                _Thunks[153] = Marshal.GetFunctionPointerForDelegate(_DoSetToolTipDelegateInstance).ToPointer();
                _DoPopupMenuDelegateInstance += _DoPopupMenuDelegateHook;
                _Thunks[154] = Marshal.GetFunctionPointerForDelegate(_DoPopupMenuDelegateInstance).ToPointer();
                _AdjustForParentClientOriginDelegateInstance += _AdjustForParentClientOriginDelegateHook;
                _Thunks[155] = Marshal.GetFunctionPointerForDelegate(_AdjustForParentClientOriginDelegateInstance).ToPointer();
                _DoSetWindowVariantDelegateInstance += _DoSetWindowVariantDelegateHook;
                _Thunks[156] = Marshal.GetFunctionPointerForDelegate(_DoSetWindowVariantDelegateInstance).ToPointer();
                _DoFreezeDelegateInstance += _DoFreezeDelegateHook;
                _Thunks[157] = Marshal.GetFunctionPointerForDelegate(_DoFreezeDelegateInstance).ToPointer();
                _DoThawDelegateInstance += _DoThawDelegateHook;
                _Thunks[158] = Marshal.GetFunctionPointerForDelegate(_DoThawDelegateInstance).ToPointer();
                _GetTransparentDelegateInstance += _GetTransparentDelegateHook;
                _Thunks[159] = Marshal.GetFunctionPointerForDelegate(_GetTransparentDelegateInstance).ToPointer();
                _TriggerScrollEventDelegateInstance += _TriggerScrollEventDelegateHook;
                _Thunks[160] = Marshal.GetFunctionPointerForDelegate(_TriggerScrollEventDelegateInstance).ToPointer();
                _DoGetSizeFromClientSizeDelegateInstance += _DoGetSizeFromClientSizeDelegateHook;
                _Thunks[161] = Marshal.GetFunctionPointerForDelegate(_DoGetSizeFromClientSizeDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(215 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 128);
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                    *(void**) (vfptr0 + 148) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 148);
                    *(void**) (vfptr0 + 152) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 152);
                    *(void**) (vfptr0 + 156) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 156);
                    *(void**) (vfptr0 + 160) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 160);
                    *(void**) (vfptr0 + 164) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 164);
                    *(void**) (vfptr0 + 168) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 168);
                    *(void**) (vfptr0 + 172) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 172);
                    *(void**) (vfptr0 + 176) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 176);
                    *(void**) (vfptr0 + 180) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 180);
                    *(void**) (vfptr0 + 184) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 184);
                    *(void**) (vfptr0 + 188) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 188);
                    *(void**) (vfptr0 + 192) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 192);
                    *(void**) (vfptr0 + 196) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 196);
                    *(void**) (vfptr0 + 200) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 200);
                    *(void**) (vfptr0 + 204) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 204);
                    *(void**) (vfptr0 + 208) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 208);
                    *(void**) (vfptr0 + 212) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 212);
                    *(void**) (vfptr0 + 216) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 216);
                    *(void**) (vfptr0 + 220) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 220);
                    *(void**) (vfptr0 + 224) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 224);
                    *(void**) (vfptr0 + 228) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 228);
                    *(void**) (vfptr0 + 232) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 232);
                    *(void**) (vfptr0 + 236) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 236);
                    *(void**) (vfptr0 + 240) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 240);
                    *(void**) (vfptr0 + 244) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 244);
                    *(void**) (vfptr0 + 248) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 248);
                    *(void**) (vfptr0 + 252) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 252);
                    *(void**) (vfptr0 + 256) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 256);
                    *(void**) (vfptr0 + 260) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 260);
                    *(void**) (vfptr0 + 264) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 264);
                    *(void**) (vfptr0 + 268) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 268);
                    *(void**) (vfptr0 + 272) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 272);
                    *(void**) (vfptr0 + 276) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 276);
                    *(void**) (vfptr0 + 280) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 280);
                    *(void**) (vfptr0 + 284) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 284);
                    *(void**) (vfptr0 + 288) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 288);
                    *(void**) (vfptr0 + 292) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 292);
                    *(void**) (vfptr0 + 296) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 296);
                    *(void**) (vfptr0 + 300) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 300);
                    *(void**) (vfptr0 + 304) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 304);
                    *(void**) (vfptr0 + 308) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 308);
                    *(void**) (vfptr0 + 312) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 312);
                    *(void**) (vfptr0 + 316) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 316);
                    *(void**) (vfptr0 + 320) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 320);
                    *(void**) (vfptr0 + 324) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 324);
                    *(void**) (vfptr0 + 328) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 328);
                    *(void**) (vfptr0 + 332) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 332);
                    *(void**) (vfptr0 + 336) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 336);
                    *(void**) (vfptr0 + 340) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 340);
                    *(void**) (vfptr0 + 344) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 344);
                    *(void**) (vfptr0 + 348) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 348);
                    *(void**) (vfptr0 + 352) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 352);
                    *(void**) (vfptr0 + 356) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 356);
                    *(void**) (vfptr0 + 360) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 360);
                    *(void**) (vfptr0 + 364) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 364);
                    *(void**) (vfptr0 + 368) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 368);
                    *(void**) (vfptr0 + 372) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 372);
                    *(void**) (vfptr0 + 376) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 376);
                    *(void**) (vfptr0 + 380) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 380);
                    *(void**) (vfptr0 + 384) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 384);
                    *(void**) (vfptr0 + 388) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 388);
                    *(void**) (vfptr0 + 392) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 392);
                    *(void**) (vfptr0 + 396) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 396);
                    *(void**) (vfptr0 + 400) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 400);
                    *(void**) (vfptr0 + 404) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 404);
                    *(void**) (vfptr0 + 408) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 408);
                    *(void**) (vfptr0 + 412) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 412);
                    *(void**) (vfptr0 + 416) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 416);
                    *(void**) (vfptr0 + 420) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 420);
                    *(void**) (vfptr0 + 424) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 424);
                    *(void**) (vfptr0 + 428) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 428);
                    *(void**) (vfptr0 + 432) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 432);
                    *(void**) (vfptr0 + 436) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 436);
                    *(void**) (vfptr0 + 440) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 440);
                    *(void**) (vfptr0 + 444) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 444);
                    *(void**) (vfptr0 + 448) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 448);
                    *(void**) (vfptr0 + 452) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 452);
                    *(void**) (vfptr0 + 456) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 456);
                    *(void**) (vfptr0 + 460) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 460);
                    *(void**) (vfptr0 + 464) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 464);
                    *(void**) (vfptr0 + 468) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 468);
                    *(void**) (vfptr0 + 472) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 472);
                    *(void**) (vfptr0 + 476) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 476);
                    *(void**) (vfptr0 + 480) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 480);
                    *(void**) (vfptr0 + 484) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 484);
                    *(void**) (vfptr0 + 488) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 488);
                    *(void**) (vfptr0 + 492) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 492);
                    *(void**) (vfptr0 + 496) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 496);
                    *(void**) (vfptr0 + 500) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 500);
                    *(void**) (vfptr0 + 504) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 504);
                    *(void**) (vfptr0 + 508) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 508);
                    *(void**) (vfptr0 + 512) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 512);
                    *(void**) (vfptr0 + 516) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 516);
                    *(void**) (vfptr0 + 520) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 520);
                    *(void**) (vfptr0 + 524) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 524);
                    *(void**) (vfptr0 + 528) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 528);
                    *(void**) (vfptr0 + 532) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 532);
                    *(void**) (vfptr0 + 536) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 536);
                    *(void**) (vfptr0 + 540) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 540);
                    *(void**) (vfptr0 + 544) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 544);
                    *(void**) (vfptr0 + 548) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 548);
                    *(void**) (vfptr0 + 552) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 552);
                    *(void**) (vfptr0 + 556) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 556);
                    *(void**) (vfptr0 + 560) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 560);
                    *(void**) (vfptr0 + 564) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 564);
                    *(void**) (vfptr0 + 568) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 568);
                    *(void**) (vfptr0 + 572) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 572);
                    *(void**) (vfptr0 + 576) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 576);
                    *(void**) (vfptr0 + 580) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 580);
                    *(void**) (vfptr0 + 584) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 584);
                    *(void**) (vfptr0 + 588) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 588);
                    *(void**) (vfptr0 + 592) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 592);
                    *(void**) (vfptr0 + 596) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 596);
                    *(void**) (vfptr0 + 600) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 600);
                    *(void**) (vfptr0 + 604) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 604);
                    *(void**) (vfptr0 + 608) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 608);
                    *(void**) (vfptr0 + 612) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 612);
                    *(void**) (vfptr0 + 616) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 616);
                    *(void**) (vfptr0 + 620) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 620);
                    *(void**) (vfptr0 + 624) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 624);
                    *(void**) (vfptr0 + 628) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 628);
                    *(void**) (vfptr0 + 632) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 632);
                    *(void**) (vfptr0 + 636) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 636);
                    *(void**) (vfptr0 + 640) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 640);
                    *(void**) (vfptr0 + 644) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 644);
                    *(void**) (vfptr0 + 648) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 648);
                    *(void**) (vfptr0 + 652) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 652);
                    *(void**) (vfptr0 + 656) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 656);
                    *(void**) (vfptr0 + 660) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 660);
                    *(void**) (vfptr0 + 664) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 664);
                    *(void**) (vfptr0 + 668) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 668);
                    *(void**) (vfptr0 + 672) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 672);
                    *(void**) (vfptr0 + 676) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 676);
                    *(void**) (vfptr0 + 680) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 680);
                    *(void**) (vfptr0 + 684) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 684);
                    *(void**) (vfptr0 + 688) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 688);
                    *(void**) (vfptr0 + 692) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 692);
                    *(void**) (vfptr0 + 696) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 696);
                    *(void**) (vfptr0 + 700) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 700);
                    *(void**) (vfptr0 + 704) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 704);
                    *(void**) (vfptr0 + 708) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 708);
                    *(void**) (vfptr0 + 712) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 712);
                    *(void**) (vfptr0 + 716) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 716);
                    *(void**) (vfptr0 + 720) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 720);
                    *(void**) (vfptr0 + 724) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 724);
                    *(void**) (vfptr0 + 728) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 728);
                    *(void**) (vfptr0 + 732) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 732);
                    *(void**) (vfptr0 + 736) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 736);
                    *(void**) (vfptr0 + 740) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 740);
                    *(void**) (vfptr0 + 744) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 744);
                    *(void**) (vfptr0 + 748) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 748);
                    *(void**) (vfptr0 + 752) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 752);
                    *(void**) (vfptr0 + 756) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 756);
                    *(void**) (vfptr0 + 760) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 760);
                    *(void**) (vfptr0 + 764) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 764);
                    *(void**) (vfptr0 + 768) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 768);
                    *(void**) (vfptr0 + 772) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 772);
                    *(void**) (vfptr0 + 776) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 776);
                    *(void**) (vfptr0 + 780) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 780);
                    *(void**) (vfptr0 + 784) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 784);
                    *(void**) (vfptr0 + 788) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 788);
                    *(void**) (vfptr0 + 792) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 792);
                    *(void**) (vfptr0 + 796) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 796);
                    *(void**) (vfptr0 + 800) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 800);
                    *(void**) (vfptr0 + 804) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 804);
                    *(void**) (vfptr0 + 808) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 808);
                    *(void**) (vfptr0 + 812) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 812);
                    *(void**) (vfptr0 + 816) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 816);
                    *(void**) (vfptr0 + 820) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 820);
                    *(void**) (vfptr0 + 824) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 824);
                    *(void**) (vfptr0 + 828) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 828);
                    *(void**) (vfptr0 + 832) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 832);
                    *(void**) (vfptr0 + 836) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 836);
                    *(void**) (vfptr0 + 840) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 840);
                    *(void**) (vfptr0 + 844) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 844);
                    *(void**) (vfptr0 + 848) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 848);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(215 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = _Thunks[8];
                    *(void**) (vfptr0 + 48) = _Thunks[9];
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = _Thunks[10];
                    *(void**) (vfptr0 + 76) = _Thunks[11];
                    *(void**) (vfptr0 + 80) = _Thunks[12];
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = _Thunks[13];
                    *(void**) (vfptr0 + 112) = _Thunks[14];
                    *(void**) (vfptr0 + 116) = _Thunks[15];
                    *(void**) (vfptr0 + 120) = _Thunks[16];
                    *(void**) (vfptr0 + 124) = _Thunks[17];
                    *(void**) (vfptr0 + 128) = _Thunks[18];
                    *(void**) (vfptr0 + 132) = _Thunks[19];
                    *(void**) (vfptr0 + 136) = _Thunks[20];
                    *(void**) (vfptr0 + 140) = _Thunks[21];
                    *(void**) (vfptr0 + 144) = _Thunks[22];
                    *(void**) (vfptr0 + 148) = _Thunks[23];
                    *(void**) (vfptr0 + 152) = _Thunks[24];
                    *(void**) (vfptr0 + 156) = _Thunks[25];
                    *(void**) (vfptr0 + 160) = _Thunks[26];
                    *(void**) (vfptr0 + 164) = _Thunks[27];
                    *(void**) (vfptr0 + 168) = _Thunks[28];
                    *(void**) (vfptr0 + 172) = _Thunks[29];
                    *(void**) (vfptr0 + 176) = _Thunks[30];
                    *(void**) (vfptr0 + 180) = _Thunks[31];
                    *(void**) (vfptr0 + 184) = _Thunks[32];
                    *(void**) (vfptr0 + 188) = _Thunks[33];
                    *(void**) (vfptr0 + 192) = _Thunks[34];
                    *(void**) (vfptr0 + 196) = _Thunks[35];
                    *(void**) (vfptr0 + 200) = _Thunks[36];
                    *(void**) (vfptr0 + 204) = _Thunks[37];
                    *(void**) (vfptr0 + 208) = _Thunks[38];
                    *(void**) (vfptr0 + 212) = _Thunks[39];
                    *(void**) (vfptr0 + 216) = _Thunks[40];
                    *(void**) (vfptr0 + 220) = _Thunks[41];
                    *(void**) (vfptr0 + 224) = _Thunks[42];
                    *(void**) (vfptr0 + 228) = _Thunks[43];
                    *(void**) (vfptr0 + 232) = _Thunks[44];
                    *(void**) (vfptr0 + 236) = _Thunks[45];
                    *(void**) (vfptr0 + 240) = _Thunks[46];
                    *(void**) (vfptr0 + 244) = _Thunks[47];
                    *(void**) (vfptr0 + 248) = _Thunks[48];
                    *(void**) (vfptr0 + 252) = _Thunks[49];
                    *(void**) (vfptr0 + 256) = _Thunks[50];
                    *(void**) (vfptr0 + 260) = _Thunks[51];
                    *(void**) (vfptr0 + 264) = _Thunks[52];
                    *(void**) (vfptr0 + 268) = _Thunks[53];
                    *(void**) (vfptr0 + 272) = _Thunks[54];
                    *(void**) (vfptr0 + 276) = _Thunks[55];
                    *(void**) (vfptr0 + 280) = _Thunks[56];
                    *(void**) (vfptr0 + 284) = _Thunks[57];
                    *(void**) (vfptr0 + 288) = _Thunks[58];
                    *(void**) (vfptr0 + 292) = _Thunks[59];
                    *(void**) (vfptr0 + 296) = _Thunks[60];
                    *(void**) (vfptr0 + 300) = _Thunks[61];
                    *(void**) (vfptr0 + 304) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 304);
                    *(void**) (vfptr0 + 308) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 308);
                    *(void**) (vfptr0 + 312) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 312);
                    *(void**) (vfptr0 + 316) = _Thunks[62];
                    *(void**) (vfptr0 + 320) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 320);
                    *(void**) (vfptr0 + 324) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 324);
                    *(void**) (vfptr0 + 328) = _Thunks[63];
                    *(void**) (vfptr0 + 332) = _Thunks[64];
                    *(void**) (vfptr0 + 336) = _Thunks[65];
                    *(void**) (vfptr0 + 340) = _Thunks[66];
                    *(void**) (vfptr0 + 344) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 344);
                    *(void**) (vfptr0 + 348) = _Thunks[67];
                    *(void**) (vfptr0 + 352) = _Thunks[68];
                    *(void**) (vfptr0 + 356) = _Thunks[69];
                    *(void**) (vfptr0 + 360) = _Thunks[70];
                    *(void**) (vfptr0 + 364) = _Thunks[71];
                    *(void**) (vfptr0 + 368) = _Thunks[72];
                    *(void**) (vfptr0 + 372) = _Thunks[73];
                    *(void**) (vfptr0 + 376) = _Thunks[74];
                    *(void**) (vfptr0 + 380) = _Thunks[75];
                    *(void**) (vfptr0 + 384) = _Thunks[76];
                    *(void**) (vfptr0 + 388) = _Thunks[77];
                    *(void**) (vfptr0 + 392) = _Thunks[78];
                    *(void**) (vfptr0 + 396) = _Thunks[79];
                    *(void**) (vfptr0 + 400) = _Thunks[80];
                    *(void**) (vfptr0 + 404) = _Thunks[81];
                    *(void**) (vfptr0 + 408) = _Thunks[82];
                    *(void**) (vfptr0 + 412) = _Thunks[83];
                    *(void**) (vfptr0 + 416) = _Thunks[84];
                    *(void**) (vfptr0 + 420) = _Thunks[85];
                    *(void**) (vfptr0 + 424) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 424);
                    *(void**) (vfptr0 + 428) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 428);
                    *(void**) (vfptr0 + 432) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 432);
                    *(void**) (vfptr0 + 436) = _Thunks[86];
                    *(void**) (vfptr0 + 440) = _Thunks[87];
                    *(void**) (vfptr0 + 444) = _Thunks[88];
                    *(void**) (vfptr0 + 448) = _Thunks[89];
                    *(void**) (vfptr0 + 452) = _Thunks[90];
                    *(void**) (vfptr0 + 456) = _Thunks[91];
                    *(void**) (vfptr0 + 460) = _Thunks[92];
                    *(void**) (vfptr0 + 464) = _Thunks[93];
                    *(void**) (vfptr0 + 468) = _Thunks[94];
                    *(void**) (vfptr0 + 472) = _Thunks[95];
                    *(void**) (vfptr0 + 476) = _Thunks[96];
                    *(void**) (vfptr0 + 480) = _Thunks[97];
                    *(void**) (vfptr0 + 484) = _Thunks[98];
                    *(void**) (vfptr0 + 488) = _Thunks[99];
                    *(void**) (vfptr0 + 492) = _Thunks[100];
                    *(void**) (vfptr0 + 496) = _Thunks[101];
                    *(void**) (vfptr0 + 500) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 500);
                    *(void**) (vfptr0 + 504) = _Thunks[102];
                    *(void**) (vfptr0 + 508) = _Thunks[103];
                    *(void**) (vfptr0 + 512) = _Thunks[104];
                    *(void**) (vfptr0 + 516) = _Thunks[105];
                    *(void**) (vfptr0 + 520) = _Thunks[106];
                    *(void**) (vfptr0 + 524) = _Thunks[107];
                    *(void**) (vfptr0 + 528) = _Thunks[108];
                    *(void**) (vfptr0 + 532) = _Thunks[109];
                    *(void**) (vfptr0 + 536) = _Thunks[110];
                    *(void**) (vfptr0 + 540) = _Thunks[111];
                    *(void**) (vfptr0 + 544) = _Thunks[112];
                    *(void**) (vfptr0 + 548) = _Thunks[113];
                    *(void**) (vfptr0 + 552) = _Thunks[114];
                    *(void**) (vfptr0 + 556) = _Thunks[115];
                    *(void**) (vfptr0 + 560) = _Thunks[116];
                    *(void**) (vfptr0 + 564) = _Thunks[117];
                    *(void**) (vfptr0 + 568) = _Thunks[118];
                    *(void**) (vfptr0 + 572) = _Thunks[119];
                    *(void**) (vfptr0 + 576) = _Thunks[120];
                    *(void**) (vfptr0 + 580) = _Thunks[121];
                    *(void**) (vfptr0 + 584) = _Thunks[122];
                    *(void**) (vfptr0 + 588) = _Thunks[123];
                    *(void**) (vfptr0 + 592) = _Thunks[124];
                    *(void**) (vfptr0 + 596) = _Thunks[125];
                    *(void**) (vfptr0 + 600) = _Thunks[126];
                    *(void**) (vfptr0 + 604) = _Thunks[127];
                    *(void**) (vfptr0 + 608) = _Thunks[128];
                    *(void**) (vfptr0 + 612) = _Thunks[129];
                    *(void**) (vfptr0 + 616) = _Thunks[130];
                    *(void**) (vfptr0 + 620) = _Thunks[131];
                    *(void**) (vfptr0 + 624) = _Thunks[132];
                    *(void**) (vfptr0 + 628) = _Thunks[133];
                    *(void**) (vfptr0 + 632) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 632);
                    *(void**) (vfptr0 + 636) = _Thunks[134];
                    *(void**) (vfptr0 + 640) = _Thunks[135];
                    *(void**) (vfptr0 + 644) = _Thunks[136];
                    *(void**) (vfptr0 + 648) = _Thunks[137];
                    *(void**) (vfptr0 + 652) = _Thunks[138];
                    *(void**) (vfptr0 + 656) = _Thunks[139];
                    *(void**) (vfptr0 + 660) = _Thunks[140];
                    *(void**) (vfptr0 + 664) = _Thunks[141];
                    *(void**) (vfptr0 + 668) = _Thunks[142];
                    *(void**) (vfptr0 + 672) = _Thunks[143];
                    *(void**) (vfptr0 + 676) = _Thunks[144];
                    *(void**) (vfptr0 + 680) = _Thunks[145];
                    *(void**) (vfptr0 + 684) = _Thunks[146];
                    *(void**) (vfptr0 + 688) = _Thunks[147];
                    *(void**) (vfptr0 + 692) = _Thunks[148];
                    *(void**) (vfptr0 + 696) = _Thunks[149];
                    *(void**) (vfptr0 + 700) = _Thunks[150];
                    *(void**) (vfptr0 + 704) = _Thunks[151];
                    *(void**) (vfptr0 + 708) = _Thunks[152];
                    *(void**) (vfptr0 + 712) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 712);
                    *(void**) (vfptr0 + 716) = _Thunks[153];
                    *(void**) (vfptr0 + 720) = _Thunks[154];
                    *(void**) (vfptr0 + 724) = _Thunks[155];
                    *(void**) (vfptr0 + 728) = _Thunks[156];
                    *(void**) (vfptr0 + 732) = _Thunks[157];
                    *(void**) (vfptr0 + 736) = _Thunks[158];
                    *(void**) (vfptr0 + 740) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 740);
                    *(void**) (vfptr0 + 744) = _Thunks[159];
                    *(void**) (vfptr0 + 748) = _Thunks[160];
                    *(void**) (vfptr0 + 752) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 752);
                    *(void**) (vfptr0 + 756) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 756);
                    *(void**) (vfptr0 + 760) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 760);
                    *(void**) (vfptr0 + 764) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 764);
                    *(void**) (vfptr0 + 768) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 768);
                    *(void**) (vfptr0 + 772) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 772);
                    *(void**) (vfptr0 + 776) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 776);
                    *(void**) (vfptr0 + 780) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 780);
                    *(void**) (vfptr0 + 784) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 784);
                    *(void**) (vfptr0 + 788) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 788);
                    *(void**) (vfptr0 + 792) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 792);
                    *(void**) (vfptr0 + 796) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 796);
                    *(void**) (vfptr0 + 800) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 800);
                    *(void**) (vfptr0 + 804) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 804);
                    *(void**) (vfptr0 + 808) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 808);
                    *(void**) (vfptr0 + 812) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 812);
                    *(void**) (vfptr0 + 816) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 816);
                    *(void**) (vfptr0 + 820) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 820);
                    *(void**) (vfptr0 + 824) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 824);
                    *(void**) (vfptr0 + 828) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 828);
                    *(void**) (vfptr0 + 832) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 832);
                    *(void**) (vfptr0 + 836) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 836);
                    *(void**) (vfptr0 + 840) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 840);
                    *(void**) (vfptr0 + 844) = _Thunks[161];
                    *(void**) (vfptr0 + 848) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 848);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class window
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z21wxFindWindowAtPointerR7wxPoint")]
            internal static extern global::System.IntPtr FindWindowAtPointer(global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxGetMousePositionv")]
            internal static extern global::wxSharp.Point.__Internal GetMousePosition();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z17wxGetActiveWindowv")]
            internal static extern global::System.IntPtr GetActiveWindow();
        }

        public static global::wxSharp.Window FindWindowAtPointer(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.FindWindowAtPointer(__arg0);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.Point GetMousePosition()
        {
            var __ret = __Internal.GetMousePosition();
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Window GetActiveWindow()
        {
            var __ret = __Internal.GetActiveWindow();
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.WindowList TopLevelWindows
        {
            get
            {
                var __ptr = (global::wxSharp.WindowList.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxTopLevelWindows");
                return global::wxSharp.WindowList.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.WindowList.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxTopLevelWindows");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.WindowList.__Internal*) value.__Instance;
            }
        }
    }
}
