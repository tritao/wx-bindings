// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include "FastDelegates.h"
#include <wx/app.h>
#include "ozone/event.h"

namespace Ozone
{
    class App;
    class AppConsole;
    class Event;
    class Object;
    class Window;
}

namespace Ozone
{
    class AppConsole : public Ozone::EvtHandler
    {
    public:

        AppConsole(::wxAppConsole* instance, bool ownNativeInstance = false);

        AppConsole();

        ~AppConsole();

        virtual bool Initialize(int& argc, wchar_t** argv);

        void CheckSignal();

        virtual bool CallOnInit();

        virtual bool OnInit();

        virtual int OnRun();

        virtual void OnLaunched();

        virtual int OnExit();

        virtual void CleanUp();

        virtual void OnFatalException();

        virtual void Exit();

        const char* GetAppName() const;

        void SetAppName(const char* name);

        const char* GetAppDisplayName() const;

        void SetAppDisplayName(const char* name);

        const char* GetClassName() const;

        void SetClassName(const char* name);

        void SetVendorName(const char* name);

        void SetVendorDisplayName(const char* name);

        virtual void SetCLocale();

        virtual void OnUnhandledException();

        virtual bool OnExceptionInMainLoop();

        virtual bool StoreCurrentException();

        virtual void RethrowStoredException();

        virtual void ProcessPendingEvents();

        bool HasPendingEvents() const;

        void SuspendProcessingOfPendingEvents();

        void ResumeProcessingOfPendingEvents();

        void RemovePendingEventHandler(::Ozone::EvtHandler* toRemove);

        void AppendPendingEventHandler(::Ozone::EvtHandler* toAppend);

        void DelayPendingEventHandler(::Ozone::EvtHandler* toDelay);

        void DeletePendingEvents();

        void ScheduleForDestruction(::Ozone::Object* object);

        bool IsScheduledForDestruction(::Ozone::Object* object) const;

        virtual bool Pending();

        virtual bool Dispatch();

        virtual int MainLoop();

        virtual void ExitMainLoop();

        bool Yield(bool onlyIfNeeded);

        virtual void WakeUpIdle();

        virtual bool ProcessIdle();

        virtual bool UsesEventLoop() const;

        virtual void OnAssertFailure(wchar_t* file, int line, wchar_t* func, wchar_t* cond, wchar_t* msg);

        virtual void OnAssert(wchar_t* file, int line, wchar_t* cond, wchar_t* msg);

        int get_argc();

        void set_argc(int value);

        static bool IsMainLoopRunning();

        static bool CheckBuildOptions(const char* optionsSignature, const char* componentName);

        static ::Ozone::AppConsole* GetInstance();

        static void SetInstance(::Ozone::AppConsole* app);
    };

    class App : public Ozone::AppConsole
    {
    public:

        App(::wxApp* instance, bool ownNativeInstance = false);

        App();

        ~App();

        fastdelegate::FastDelegate<void (::Ozone::CloseEvent&)> OnQueryEndSession;

        fastdelegate::FastDelegate<void (::Ozone::CloseEvent&)> OnEndSession;

        fastdelegate::FastDelegate<void (::Ozone::ActivateEvent&)> OnActivateApp;

        fastdelegate::FastDelegate<void (::Ozone::ActivateEvent&)> OnHibernate;

        fastdelegate::FastDelegate<void (::Ozone::IdleEvent&)> OnIdle;

        virtual bool SetNativeTheme(const char* theme);

        virtual bool OnInitGui();

        virtual void WakeUpIdle() override;

        virtual bool Initialize(int& argc, wchar_t** argv) override;

        virtual void CleanUp() override;

        virtual void OnAssertFailure(wchar_t* file, int line, wchar_t* func, wchar_t* cond, wchar_t* msg) override;

        virtual void* GetXVisualInfo();

        bool EventsPending();

        bool DoIdle();

        virtual int OnRun() override;

        virtual int OnExit() override;

        virtual bool SafeYield(::Ozone::Window* win, bool onlyIfNeeded);

        virtual bool SafeYieldFor(::Ozone::Window* win, long eventsToProcess);

        virtual bool ProcessIdle() override;

        virtual bool UsesEventLoop() const override;

        virtual bool IsActive() const;

        void SetTopWindow(::Ozone::Window* win);

        virtual ::Ozone::Window* GetTopWindow() const;

        void SetExitOnFrameDelete(bool flag);

        bool GetExitOnFrameDelete() const;

        void SetUseBestVisual(bool flag, bool forceTrueColour);

        bool GetUseBestVisual() const;

        virtual void SetPrintMode(int _0);

        int GetPrintMode() const;

        virtual void SetActive(bool isActive, ::Ozone::Window* lastFocus);

        virtual int HandleEvent(::wxEvent& event) override;
    };

    void Exit();
    void WakeUpIdle();
}
