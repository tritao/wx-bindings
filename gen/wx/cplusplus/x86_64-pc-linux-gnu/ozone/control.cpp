// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "ozone/control.h"
#include "ozone/control.h"
#include "ozone/defs.h"
#include "ozone/event.h"
#include "ozone/gdicmn.h"
#include "ozone/object.h"

#include <wx/eventfilter.h>

::Ozone::Control::Control(::wxControl* instance, bool ownNativeInstance)
    : ::Ozone::Window((::wxWindow*)instance, ownNativeInstance)
{
    __Instance = instance;

    auto __instance = (wxControl*) __Instance;
    if (__instance && __instance->GetClientData() == nullptr)
        __instance->SetClientData(this);
}

::Ozone::Control::~Control()
{
}

Ozone::Control::Control()
    : ::Ozone::Window((::wxWindow*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxControl();

    auto __instance = (wxControl*) __Instance;
    if (__instance && __instance->GetClientData() == nullptr)
        __instance->SetClientData(this);
}

::Ozone::VisualAttributes Ozone::Control::GetDefaultAttributes() const
{
    ::wxVisualAttributes __ret = ((::wxControl*)__Instance)->GetDefaultAttributes();
    auto ____ret = new ::wxVisualAttributes(__ret);
    return ____ret;
}

int Ozone::Control::GetAlignment() const
{
    int __ret = ((::wxControl*)__Instance)->GetAlignment();
    return __ret;
}

void Ozone::Control::SetLabel(const char* label)
{
    auto __arg0 = label;
    ((::wxControl*)__Instance)->SetLabel(__arg0);
}

const char* Ozone::Control::GetLabel() const
{
    ::wxString __ret = ((::wxControl*)__Instance)->GetLabel();
    return strdup(__ret.utf8_str().data());
}

void Ozone::Control::SetLabelText(const char* text)
{
    auto __arg0 = text;
    ((::wxControl*)__Instance)->SetLabelText(__arg0);
}

const char* Ozone::Control::GetLabelText() const
{
    ::wxString __ret = ((::wxControl*)__Instance)->GetLabelText();
    return strdup(__ret.utf8_str().data());
}

bool Ozone::Control::SetLabelMarkup(const char* markup)
{
    auto __arg0 = markup;
    bool __ret = ((::wxControl*)__Instance)->SetLabelMarkup(__arg0);
    return __ret;
}

bool Ozone::Control::ShouldInheritColours() const
{
    bool __ret = ((::wxControl*)__Instance)->ShouldInheritColours();
    return __ret;
}

void Ozone::Control::Command(::Ozone::CommandEvent& event)
{
    auto &__arg0 = *(::wxCommandEvent*)event.__Instance;
    ((::wxControl*)__Instance)->Command(__arg0);
}

void Ozone::Control::DoUpdateWindowUI(::Ozone::UpdateUIEvent& event)
{
    auto &__arg0 = *(::wxUpdateUIEvent*)event.__Instance;
    ((::wxControl*)__Instance)->DoUpdateWindowUI(__arg0);
}

::Ozone::Size Ozone::Control::GetSizeFromTextSize(int xlen, int ylen) const
{
    ::wxSize __ret = ((::wxControl*)__Instance)->GetSizeFromTextSize(xlen, ylen);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::Ozone::Size Ozone::Control::GetSizeFromTextSize(const ::Ozone::Size& tsize) const
{
    auto &__arg0 = *(::wxSize*)tsize.__Instance;
    ::wxSize __ret = ((::wxControl*)__Instance)->GetSizeFromTextSize(__arg0);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::Ozone::Size Ozone::Control::GetSizeFromText(const char* text) const
{
    auto __arg0 = text;
    ::wxSize __ret = ((::wxControl*)__Instance)->GetSizeFromText(__arg0);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

const char* Ozone::Control::GetLabelText(const char* label)
{
    auto __arg0 = label;
    ::wxString __ret = ::wxControlBase::GetLabelText(__arg0);
    return strdup(__ret.utf8_str().data());
}

const char* Ozone::Control::RemoveMnemonics(const char* str)
{
    auto __arg0 = str;
    ::wxString __ret = ::wxControlBase::RemoveMnemonics(__arg0);
    return strdup(__ret.utf8_str().data());
}

const char* Ozone::Control::EscapeMnemonics(const char* str)
{
    auto __arg0 = str;
    ::wxString __ret = ::wxControlBase::EscapeMnemonics(__arg0);
    return strdup(__ret.utf8_str().data());
}

const char* Ozone::Control::Ellipsize(const char* label, const ::Ozone::DC& dc, ::Ozone::EllipsizeMode mode, int maxWidth, int flags)
{
    auto __arg0 = label;
    auto &__arg1 = *(::wxDC*)dc.__Instance;
    auto __arg2 = (::wxEllipsizeMode)mode;
    ::wxString __ret = ::wxControlBase::Ellipsize(__arg0, __arg1, __arg2, maxWidth, flags);
    return strdup(__ret.utf8_str().data());
}

int Ozone::Control::FindAccelIndex(const char* label, const char* labelOnly)
{
    auto __arg0 = label;
    auto __arg1_str = new wxString(labelOnly);
    auto __arg1 = __arg1_str;
    int __ret = ::wxControlBase::FindAccelIndex(__arg0, __arg1);
    return __ret;
}

::Ozone::VisualAttributes Ozone::Control::GetCompositeControlsDefaultAttributes(::Ozone::WindowVariant variant)
{
    auto __arg0 = (::wxWindowVariant)variant;
    ::wxVisualAttributes __ret = ::wxControlBase::GetCompositeControlsDefaultAttributes(__arg0);
    auto ____ret = new ::wxVisualAttributes(__ret);
    return ____ret;
}

int Ozone::Control::HandleEvent(::wxEvent& event)
{
    wxEventType eventType = event.GetEventType();

    if(eventType == wxEVT_TEXT_COPY)
    {
        if (!OnTextCopy.empty())
        {
            wxClipboardTextEvent* _event = wxStaticCast(&event, wxClipboardTextEvent);
            Ozone::ClipboardTextEvent _e(_event);
            OnTextCopy(_e);
        }
    }
    else if(eventType == wxEVT_TEXT_CUT)
    {
        if (!OnTextCut.empty())
        {
            wxClipboardTextEvent* _event = wxStaticCast(&event, wxClipboardTextEvent);
            Ozone::ClipboardTextEvent _e(_event);
            OnTextCut(_e);
        }
    }
    else if(eventType == wxEVT_TEXT_PASTE)
    {
        if (!OnTextPaste.empty())
        {
            wxClipboardTextEvent* _event = wxStaticCast(&event, wxClipboardTextEvent);
            Ozone::ClipboardTextEvent _e(_event);
            OnTextPaste(_e);
        }
    }

    return Window::HandleEvent(event);
}

