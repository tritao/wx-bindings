// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "ozone/event.h"
#include "ozone/event.h"
#include "ozone/window.h"

#include <wx/eventfilter.h>

Ozone::Event::Event(::wxEvent* instance, bool ownNativeInstance)
    : Ozone::Object((::wxObject*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::Event::~Event()
{
}

Ozone::Event::Event(int winid, int commandType)
    : Ozone::Object((::wxObject*)nullptr)
{
    __OwnsNativeInstance = true;
}

void Ozone::Event::SetEventType(int typ)
{
    auto __arg0 = (::wxEventType)typ;
    ((::wxEvent*)__Instance)->SetEventType(__arg0);
}

int Ozone::Event::GetEventType() const
{
    ::wxEventType __ret = ((::wxEvent*)__Instance)->GetEventType();
    return __ret;
}

::Ozone::Object* Ozone::Event::GetEventObject() const
{
    ::wxObject* __ret = ((::wxEvent*)__Instance)->GetEventObject();
    return (__ret == nullptr) ? nullptr : new Ozone::Object((::wxObject*)__ret);
}

void Ozone::Event::SetEventObject(::Ozone::Object* obj)
{
    auto __arg0 = obj ? (::wxObject*)obj->__Instance : nullptr;
    ((::wxEvent*)__Instance)->SetEventObject(__arg0);
}

long Ozone::Event::GetTimestamp() const
{
    long __ret = ((::wxEvent*)__Instance)->GetTimestamp();
    return __ret;
}

void Ozone::Event::SetTimestamp(long ts)
{
    ((::wxEvent*)__Instance)->SetTimestamp(ts);
}

int Ozone::Event::GetId() const
{
    int __ret = ((::wxEvent*)__Instance)->GetId();
    return __ret;
}

void Ozone::Event::SetId(int Id)
{
    ((::wxEvent*)__Instance)->SetId(Id);
}

::Ozone::Object* Ozone::Event::GetEventUserData() const
{
    ::wxObject* __ret = ((::wxEvent*)__Instance)->GetEventUserData();
    return (__ret == nullptr) ? nullptr : new Ozone::Object((::wxObject*)__ret);
}

void Ozone::Event::Skip(bool skip)
{
    ((::wxEvent*)__Instance)->Skip(skip);
}

bool Ozone::Event::GetSkipped() const
{
    bool __ret = ((::wxEvent*)__Instance)->GetSkipped();
    return __ret;
}

::Ozone::Event* Ozone::Event::Clone() const
{
    ::wxEvent* __ret = ((::wxEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

::Ozone::EventCategory Ozone::Event::GetEventCategory() const
{
    ::wxEventCategory __ret = ((::wxEvent*)__Instance)->GetEventCategory();
    return (::Ozone::EventCategory)__ret;
}

bool Ozone::Event::IsCommandEvent() const
{
    bool __ret = ((::wxEvent*)__Instance)->IsCommandEvent();
    return __ret;
}

bool Ozone::Event::ShouldPropagate() const
{
    bool __ret = ((::wxEvent*)__Instance)->ShouldPropagate();
    return __ret;
}

int Ozone::Event::StopPropagation()
{
    int __ret = ((::wxEvent*)__Instance)->StopPropagation();
    return __ret;
}

void Ozone::Event::ResumePropagation(int propagationLevel)
{
    ((::wxEvent*)__Instance)->ResumePropagation(propagationLevel);
}

::Ozone::EvtHandler* Ozone::Event::GetPropagatedFrom() const
{
    ::wxEvtHandler* __ret = ((::wxEvent*)__Instance)->GetPropagatedFrom();
    return (__ret == nullptr) ? nullptr : new Ozone::EvtHandler((::wxEvtHandler*)__ret);
}

bool Ozone::Event::WasProcessed()
{
    bool __ret = ((::wxEvent*)__Instance)->WasProcessed();
    return __ret;
}

void Ozone::Event::SetWillBeProcessedAgain()
{
    ((::wxEvent*)__Instance)->SetWillBeProcessedAgain();
}

bool Ozone::Event::WillBeProcessedAgain()
{
    bool __ret = ((::wxEvent*)__Instance)->WillBeProcessedAgain();
    return __ret;
}

bool Ozone::Event::ShouldProcessOnlyIn(::Ozone::EvtHandler* h) const
{
    auto __arg0 = h ? (::wxEvtHandler*)h->__Instance : nullptr;
    bool __ret = ((::wxEvent*)__Instance)->ShouldProcessOnlyIn(__arg0);
    return __ret;
}

void Ozone::Event::DidntHonourProcessOnlyIn()
{
    ((::wxEvent*)__Instance)->DidntHonourProcessOnlyIn();
}

::Ozone::Object* Ozone::Event::get_m_callbackUserData()
{
    ::wxObject* __ret = ((::wxEvent*)__Instance)->m_callbackUserData;
    return (__ret == nullptr) ? nullptr : new Ozone::Object((::wxObject*)__ret);
}


void Ozone::Event::set_m_callbackUserData(::Ozone::Object* value)
{
    auto __arg0 = value ? (::wxObject*)value->__Instance : nullptr;
    ((::wxEvent*)__Instance)->m_callbackUserData = __arg0;
}

Ozone::PropagateOnce::PropagateOnce(::wxPropagateOnce* instance, bool ownNativeInstance)
    : __OwnsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

Ozone::PropagateOnce::~PropagateOnce()
{
}

Ozone::PropagateOnce::PropagateOnce(::Ozone::Event& event, ::Ozone::EvtHandler* handler)
{
    __OwnsNativeInstance = true;
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    auto __arg1 = handler ? (::wxEvtHandler*)handler->__Instance : nullptr;
    __Instance = new ::wxPropagateOnce(__arg0, __arg1);
}

Ozone::IdleEvent::IdleEvent(::wxIdleEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::IdleEvent::~IdleEvent()
{
}

Ozone::IdleEvent::IdleEvent()
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxIdleEvent();
}

void Ozone::IdleEvent::RequestMore(bool needMore)
{
    ((::wxIdleEvent*)__Instance)->RequestMore(needMore);
}

bool Ozone::IdleEvent::MoreRequested() const
{
    bool __ret = ((::wxIdleEvent*)__Instance)->MoreRequested();
    return __ret;
}

::Ozone::Event* Ozone::IdleEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxIdleEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

void Ozone::IdleEvent::SetMode(::Ozone::IdleMode mode)
{
    auto __arg0 = (::wxIdleMode)mode;
    ::wxIdleEvent::SetMode(__arg0);
}

::Ozone::IdleMode Ozone::IdleEvent::GetMode()
{
    ::wxIdleMode __ret = ::wxIdleEvent::GetMode();
    return (::Ozone::IdleMode)__ret;
}

Ozone::ThreadEvent::ThreadEvent(::wxThreadEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::ThreadEvent::~ThreadEvent()
{
}

Ozone::ThreadEvent::ThreadEvent(int eventType, int id)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)eventType;
    __Instance = new ::wxThreadEvent(__arg0, id);
}

::Ozone::Event* Ozone::ThreadEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxThreadEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

::Ozone::EventCategory Ozone::ThreadEvent::GetEventCategory() const
{
    ::wxEventCategory __ret = ((::wxThreadEvent*)__Instance)->GetEventCategory();
    return (::Ozone::EventCategory)__ret;
}

Ozone::AsyncMethodCallEvent::AsyncMethodCallEvent(::wxAsyncMethodCallEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::AsyncMethodCallEvent::~AsyncMethodCallEvent()
{
}

Ozone::AsyncMethodCallEvent::AsyncMethodCallEvent(::Ozone::Object* object)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
}

void Ozone::AsyncMethodCallEvent::Execute()
{
    ((::wxAsyncMethodCallEvent*)__Instance)->Execute();
}

Ozone::CommandEvent::CommandEvent(::wxCommandEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::CommandEvent::~CommandEvent()
{
}

Ozone::CommandEvent::CommandEvent(int commandType, int winid)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)commandType;
    __Instance = new ::wxCommandEvent(__arg0, winid);
}

void Ozone::CommandEvent::SetClientData(void* clientData)
{
    auto __arg0 = (void*)clientData;
    ((::wxCommandEvent*)__Instance)->SetClientData(__arg0);
}

void* Ozone::CommandEvent::GetClientData() const
{
    void* __ret = ((::wxCommandEvent*)__Instance)->GetClientData();
    return __ret;
}

const char* Ozone::CommandEvent::GetString() const
{
    ::wxString __ret = ((::wxCommandEvent*)__Instance)->GetString();
    return __ret.c_str();
}

int Ozone::CommandEvent::GetSelection() const
{
    int __ret = ((::wxCommandEvent*)__Instance)->GetSelection();
    return __ret;
}

bool Ozone::CommandEvent::IsChecked() const
{
    bool __ret = ((::wxCommandEvent*)__Instance)->IsChecked();
    return __ret;
}

bool Ozone::CommandEvent::IsSelection() const
{
    bool __ret = ((::wxCommandEvent*)__Instance)->IsSelection();
    return __ret;
}

::Ozone::Event* Ozone::CommandEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxCommandEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

::Ozone::EventCategory Ozone::CommandEvent::GetEventCategory() const
{
    ::wxEventCategory __ret = ((::wxCommandEvent*)__Instance)->GetEventCategory();
    return (::Ozone::EventCategory)__ret;
}

Ozone::NotifyEvent::NotifyEvent(::wxNotifyEvent* instance, bool ownNativeInstance)
    : Ozone::CommandEvent((::wxCommandEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::NotifyEvent::~NotifyEvent()
{
}

Ozone::NotifyEvent::NotifyEvent(int commandType, int winid)
    : Ozone::CommandEvent((::wxCommandEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)commandType;
    __Instance = new ::wxNotifyEvent(__arg0, winid);
}

void Ozone::NotifyEvent::Veto()
{
    ((::wxNotifyEvent*)__Instance)->Veto();
}

void Ozone::NotifyEvent::Allow()
{
    ((::wxNotifyEvent*)__Instance)->Allow();
}

bool Ozone::NotifyEvent::IsAllowed() const
{
    bool __ret = ((::wxNotifyEvent*)__Instance)->IsAllowed();
    return __ret;
}

::Ozone::Event* Ozone::NotifyEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxNotifyEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::ScrollEvent::ScrollEvent(::wxScrollEvent* instance, bool ownNativeInstance)
    : Ozone::CommandEvent((::wxCommandEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::ScrollEvent::~ScrollEvent()
{
}

Ozone::ScrollEvent::ScrollEvent(int commandType, int winid, int pos, int orient)
    : Ozone::CommandEvent((::wxCommandEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)commandType;
    __Instance = new ::wxScrollEvent(__arg0, winid, pos, orient);
}

int Ozone::ScrollEvent::GetOrientation() const
{
    int __ret = ((::wxScrollEvent*)__Instance)->GetOrientation();
    return __ret;
}

int Ozone::ScrollEvent::GetPosition() const
{
    int __ret = ((::wxScrollEvent*)__Instance)->GetPosition();
    return __ret;
}

void Ozone::ScrollEvent::SetOrientation(int orient)
{
    ((::wxScrollEvent*)__Instance)->SetOrientation(orient);
}

void Ozone::ScrollEvent::SetPosition(int pos)
{
    ((::wxScrollEvent*)__Instance)->SetPosition(pos);
}

::Ozone::Event* Ozone::ScrollEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxScrollEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::ScrollWinEvent::ScrollWinEvent(::wxScrollWinEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::ScrollWinEvent::~ScrollWinEvent()
{
}

Ozone::ScrollWinEvent::ScrollWinEvent(int commandType, int pos, int orient)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)commandType;
    __Instance = new ::wxScrollWinEvent(__arg0, pos, orient);
}

int Ozone::ScrollWinEvent::GetOrientation() const
{
    int __ret = ((::wxScrollWinEvent*)__Instance)->GetOrientation();
    return __ret;
}

int Ozone::ScrollWinEvent::GetPosition() const
{
    int __ret = ((::wxScrollWinEvent*)__Instance)->GetPosition();
    return __ret;
}

void Ozone::ScrollWinEvent::SetOrientation(int orient)
{
    ((::wxScrollWinEvent*)__Instance)->SetOrientation(orient);
}

void Ozone::ScrollWinEvent::SetPosition(int pos)
{
    ((::wxScrollWinEvent*)__Instance)->SetPosition(pos);
}

::Ozone::Event* Ozone::ScrollWinEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxScrollWinEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::MouseEvent::MouseEvent(::wxMouseEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::MouseEvent::~MouseEvent()
{
}

Ozone::MouseEvent::MouseEvent(int mouseType)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)mouseType;
    __Instance = new ::wxMouseEvent(__arg0);
}

bool Ozone::MouseEvent::IsButton() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->IsButton();
    return __ret;
}

bool Ozone::MouseEvent::ButtonDown(int but) const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->ButtonDown(but);
    return __ret;
}

bool Ozone::MouseEvent::ButtonDClick(int but) const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->ButtonDClick(but);
    return __ret;
}

bool Ozone::MouseEvent::ButtonUp(int but) const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->ButtonUp(but);
    return __ret;
}

bool Ozone::MouseEvent::Button(int but) const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Button(but);
    return __ret;
}

int Ozone::MouseEvent::GetButton() const
{
    int __ret = ((::wxMouseEvent*)__Instance)->GetButton();
    return __ret;
}

bool Ozone::MouseEvent::LeftDown() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->LeftDown();
    return __ret;
}

bool Ozone::MouseEvent::MiddleDown() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->MiddleDown();
    return __ret;
}

bool Ozone::MouseEvent::RightDown() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->RightDown();
    return __ret;
}

bool Ozone::MouseEvent::Aux1Down() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Aux1Down();
    return __ret;
}

bool Ozone::MouseEvent::Aux2Down() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Aux2Down();
    return __ret;
}

bool Ozone::MouseEvent::LeftUp() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->LeftUp();
    return __ret;
}

bool Ozone::MouseEvent::MiddleUp() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->MiddleUp();
    return __ret;
}

bool Ozone::MouseEvent::RightUp() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->RightUp();
    return __ret;
}

bool Ozone::MouseEvent::Aux1Up() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Aux1Up();
    return __ret;
}

bool Ozone::MouseEvent::Aux2Up() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Aux2Up();
    return __ret;
}

bool Ozone::MouseEvent::LeftDClick() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->LeftDClick();
    return __ret;
}

bool Ozone::MouseEvent::MiddleDClick() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->MiddleDClick();
    return __ret;
}

bool Ozone::MouseEvent::RightDClick() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->RightDClick();
    return __ret;
}

bool Ozone::MouseEvent::Aux1DClick() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Aux1DClick();
    return __ret;
}

bool Ozone::MouseEvent::Aux2DClick() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Aux2DClick();
    return __ret;
}

bool Ozone::MouseEvent::Magnify() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Magnify();
    return __ret;
}

bool Ozone::MouseEvent::Dragging() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Dragging();
    return __ret;
}

bool Ozone::MouseEvent::Moving() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Moving();
    return __ret;
}

bool Ozone::MouseEvent::Entering() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Entering();
    return __ret;
}

bool Ozone::MouseEvent::Leaving() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->Leaving();
    return __ret;
}

int Ozone::MouseEvent::GetClickCount() const
{
    int __ret = ((::wxMouseEvent*)__Instance)->GetClickCount();
    return __ret;
}

::Ozone::Point Ozone::MouseEvent::GetLogicalPosition(const ::Ozone::DC& dc) const
{
    auto &__arg0 = *(::wxDC*)dc.__Instance;
    ::wxPoint __ret = ((::wxMouseEvent*)__Instance)->GetLogicalPosition(__arg0);
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

int Ozone::MouseEvent::GetWheelRotation() const
{
    int __ret = ((::wxMouseEvent*)__Instance)->GetWheelRotation();
    return __ret;
}

int Ozone::MouseEvent::GetWheelDelta() const
{
    int __ret = ((::wxMouseEvent*)__Instance)->GetWheelDelta();
    return __ret;
}

bool Ozone::MouseEvent::IsWheelInverted() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->IsWheelInverted();
    return __ret;
}

::Ozone::MouseWheelAxis Ozone::MouseEvent::GetWheelAxis() const
{
    ::wxMouseWheelAxis __ret = ((::wxMouseEvent*)__Instance)->GetWheelAxis();
    return (::Ozone::MouseWheelAxis)__ret;
}

int Ozone::MouseEvent::GetLinesPerAction() const
{
    int __ret = ((::wxMouseEvent*)__Instance)->GetLinesPerAction();
    return __ret;
}

int Ozone::MouseEvent::GetColumnsPerAction() const
{
    int __ret = ((::wxMouseEvent*)__Instance)->GetColumnsPerAction();
    return __ret;
}

bool Ozone::MouseEvent::IsPageScroll() const
{
    bool __ret = ((::wxMouseEvent*)__Instance)->IsPageScroll();
    return __ret;
}

float Ozone::MouseEvent::GetMagnification() const
{
    float __ret = ((::wxMouseEvent*)__Instance)->GetMagnification();
    return __ret;
}

::Ozone::Event* Ozone::MouseEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxMouseEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

::Ozone::EventCategory Ozone::MouseEvent::GetEventCategory() const
{
    ::wxEventCategory __ret = ((::wxMouseEvent*)__Instance)->GetEventCategory();
    return (::Ozone::EventCategory)__ret;
}

int Ozone::MouseEvent::get_m_clickCount()
{
    int __ret = ((::wxMouseEvent*)__Instance)->m_clickCount;
    return __ret;
}


void Ozone::MouseEvent::set_m_clickCount(int value)
{
    ((::wxMouseEvent*)__Instance)->m_clickCount = value;
}

::Ozone::MouseWheelAxis Ozone::MouseEvent::get_m_wheelAxis()
{
    ::wxMouseWheelAxis __ret = ((::wxMouseEvent*)__Instance)->m_wheelAxis;
    return (::Ozone::MouseWheelAxis)__ret;
}


void Ozone::MouseEvent::set_m_wheelAxis(::Ozone::MouseWheelAxis value)
{
    auto __arg0 = (::wxMouseWheelAxis)value;
    ((::wxMouseEvent*)__Instance)->m_wheelAxis = __arg0;
}

int Ozone::MouseEvent::get_m_wheelRotation()
{
    int __ret = ((::wxMouseEvent*)__Instance)->m_wheelRotation;
    return __ret;
}


void Ozone::MouseEvent::set_m_wheelRotation(int value)
{
    ((::wxMouseEvent*)__Instance)->m_wheelRotation = value;
}

int Ozone::MouseEvent::get_m_wheelDelta()
{
    int __ret = ((::wxMouseEvent*)__Instance)->m_wheelDelta;
    return __ret;
}


void Ozone::MouseEvent::set_m_wheelDelta(int value)
{
    ((::wxMouseEvent*)__Instance)->m_wheelDelta = value;
}

bool Ozone::MouseEvent::get_m_wheelInverted()
{
    bool __ret = ((::wxMouseEvent*)__Instance)->m_wheelInverted;
    return __ret;
}


void Ozone::MouseEvent::set_m_wheelInverted(bool value)
{
    ((::wxMouseEvent*)__Instance)->m_wheelInverted = value;
}

int Ozone::MouseEvent::get_m_linesPerAction()
{
    int __ret = ((::wxMouseEvent*)__Instance)->m_linesPerAction;
    return __ret;
}


void Ozone::MouseEvent::set_m_linesPerAction(int value)
{
    ((::wxMouseEvent*)__Instance)->m_linesPerAction = value;
}

int Ozone::MouseEvent::get_m_columnsPerAction()
{
    int __ret = ((::wxMouseEvent*)__Instance)->m_columnsPerAction;
    return __ret;
}


void Ozone::MouseEvent::set_m_columnsPerAction(int value)
{
    ((::wxMouseEvent*)__Instance)->m_columnsPerAction = value;
}

float Ozone::MouseEvent::get_m_magnification()
{
    float __ret = ((::wxMouseEvent*)__Instance)->m_magnification;
    return __ret;
}


void Ozone::MouseEvent::set_m_magnification(float value)
{
    ((::wxMouseEvent*)__Instance)->m_magnification = value;
}

Ozone::SetCursorEvent::SetCursorEvent(::wxSetCursorEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::SetCursorEvent::~SetCursorEvent()
{
}

Ozone::SetCursorEvent::SetCursorEvent(int x, int y)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxCoord)x;
    auto __arg1 = (::wxCoord)y;
    __Instance = new ::wxSetCursorEvent(__arg0, __arg1);
}

int Ozone::SetCursorEvent::GetX() const
{
    ::wxCoord __ret = ((::wxSetCursorEvent*)__Instance)->GetX();
    return __ret;
}

int Ozone::SetCursorEvent::GetY() const
{
    ::wxCoord __ret = ((::wxSetCursorEvent*)__Instance)->GetY();
    return __ret;
}

bool Ozone::SetCursorEvent::HasCursor() const
{
    bool __ret = ((::wxSetCursorEvent*)__Instance)->HasCursor();
    return __ret;
}

::Ozone::Event* Ozone::SetCursorEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxSetCursorEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::GestureEvent::GestureEvent(::wxGestureEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::GestureEvent::~GestureEvent()
{
}

Ozone::GestureEvent::GestureEvent(int winid, int type)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    auto __arg1 = (::wxEventType)type;
    __Instance = new ::wxGestureEvent(__arg0, __arg1);
}

void Ozone::GestureEvent::SetPosition(const ::Ozone::Point& pos)
{
    auto &__arg0 = *(::wxPoint*)pos.__Instance;
    ((::wxGestureEvent*)__Instance)->SetPosition(__arg0);
}

bool Ozone::GestureEvent::IsGestureStart() const
{
    bool __ret = ((::wxGestureEvent*)__Instance)->IsGestureStart();
    return __ret;
}

void Ozone::GestureEvent::SetGestureStart(bool isStart)
{
    ((::wxGestureEvent*)__Instance)->SetGestureStart(isStart);
}

bool Ozone::GestureEvent::IsGestureEnd() const
{
    bool __ret = ((::wxGestureEvent*)__Instance)->IsGestureEnd();
    return __ret;
}

void Ozone::GestureEvent::SetGestureEnd(bool isEnd)
{
    ((::wxGestureEvent*)__Instance)->SetGestureEnd(isEnd);
}

::Ozone::Event* Ozone::GestureEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxGestureEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::PanGestureEvent::PanGestureEvent(::wxPanGestureEvent* instance, bool ownNativeInstance)
    : Ozone::GestureEvent((::wxGestureEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::PanGestureEvent::~PanGestureEvent()
{
}

Ozone::PanGestureEvent::PanGestureEvent(int winid)
    : Ozone::GestureEvent((::wxGestureEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    __Instance = new ::wxPanGestureEvent(__arg0);
}

::Ozone::Point Ozone::PanGestureEvent::GetDelta() const
{
    ::wxPoint __ret = ((::wxPanGestureEvent*)__Instance)->GetDelta();
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

void Ozone::PanGestureEvent::SetDelta(const ::Ozone::Point& delta)
{
    auto &__arg0 = *(::wxPoint*)delta.__Instance;
    ((::wxPanGestureEvent*)__Instance)->SetDelta(__arg0);
}

::Ozone::Event* Ozone::PanGestureEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxPanGestureEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::ZoomGestureEvent::ZoomGestureEvent(::wxZoomGestureEvent* instance, bool ownNativeInstance)
    : Ozone::GestureEvent((::wxGestureEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::ZoomGestureEvent::~ZoomGestureEvent()
{
}

Ozone::ZoomGestureEvent::ZoomGestureEvent(int winid)
    : Ozone::GestureEvent((::wxGestureEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    __Instance = new ::wxZoomGestureEvent(__arg0);
}

double Ozone::ZoomGestureEvent::GetZoomFactor() const
{
    double __ret = ((::wxZoomGestureEvent*)__Instance)->GetZoomFactor();
    return __ret;
}

void Ozone::ZoomGestureEvent::SetZoomFactor(double zoomFactor)
{
    ((::wxZoomGestureEvent*)__Instance)->SetZoomFactor(zoomFactor);
}

::Ozone::Event* Ozone::ZoomGestureEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxZoomGestureEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::RotateGestureEvent::RotateGestureEvent(::wxRotateGestureEvent* instance, bool ownNativeInstance)
    : Ozone::GestureEvent((::wxGestureEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::RotateGestureEvent::~RotateGestureEvent()
{
}

Ozone::RotateGestureEvent::RotateGestureEvent(int winid)
    : Ozone::GestureEvent((::wxGestureEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    __Instance = new ::wxRotateGestureEvent(__arg0);
}

double Ozone::RotateGestureEvent::GetRotationAngle() const
{
    double __ret = ((::wxRotateGestureEvent*)__Instance)->GetRotationAngle();
    return __ret;
}

void Ozone::RotateGestureEvent::SetRotationAngle(double rotationAngle)
{
    ((::wxRotateGestureEvent*)__Instance)->SetRotationAngle(rotationAngle);
}

::Ozone::Event* Ozone::RotateGestureEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxRotateGestureEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::TwoFingerTapEvent::TwoFingerTapEvent(::wxTwoFingerTapEvent* instance, bool ownNativeInstance)
    : Ozone::GestureEvent((::wxGestureEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::TwoFingerTapEvent::~TwoFingerTapEvent()
{
}

Ozone::TwoFingerTapEvent::TwoFingerTapEvent(int winid)
    : Ozone::GestureEvent((::wxGestureEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    __Instance = new ::wxTwoFingerTapEvent(__arg0);
}

::Ozone::Event* Ozone::TwoFingerTapEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxTwoFingerTapEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::LongPressEvent::LongPressEvent(::wxLongPressEvent* instance, bool ownNativeInstance)
    : Ozone::GestureEvent((::wxGestureEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::LongPressEvent::~LongPressEvent()
{
}

Ozone::LongPressEvent::LongPressEvent(int winid)
    : Ozone::GestureEvent((::wxGestureEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    __Instance = new ::wxLongPressEvent(__arg0);
}

::Ozone::Event* Ozone::LongPressEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxLongPressEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::PressAndTapEvent::PressAndTapEvent(::wxPressAndTapEvent* instance, bool ownNativeInstance)
    : Ozone::GestureEvent((::wxGestureEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::PressAndTapEvent::~PressAndTapEvent()
{
}

Ozone::PressAndTapEvent::PressAndTapEvent(int winid)
    : Ozone::GestureEvent((::wxGestureEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    __Instance = new ::wxPressAndTapEvent(__arg0);
}

::Ozone::Event* Ozone::PressAndTapEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxPressAndTapEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::KeyEvent::KeyEvent(::wxKeyEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::KeyEvent::~KeyEvent()
{
}

Ozone::KeyEvent::KeyEvent(int keyType)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)keyType;
    __Instance = new ::wxKeyEvent(__arg0);
}

Ozone::KeyEvent::KeyEvent(int eventType, const ::Ozone::KeyEvent& evt)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)eventType;
    auto &__arg1 = *(::wxKeyEvent*)evt.__Instance;
    __Instance = new ::wxKeyEvent(__arg0, __arg1);
}

int Ozone::KeyEvent::GetKeyCode() const
{
    int __ret = ((::wxKeyEvent*)__Instance)->GetKeyCode();
    return __ret;
}

bool Ozone::KeyEvent::IsKeyInCategory(int category) const
{
    bool __ret = ((::wxKeyEvent*)__Instance)->IsKeyInCategory(category);
    return __ret;
}

wchar_t Ozone::KeyEvent::GetUnicodeKey() const
{
    ::wxChar __ret = ((::wxKeyEvent*)__Instance)->GetUnicodeKey();
    return __ret;
}

unsigned int Ozone::KeyEvent::GetRawKeyCode() const
{
    ::wxUint32 __ret = ((::wxKeyEvent*)__Instance)->GetRawKeyCode();
    return __ret;
}

unsigned int Ozone::KeyEvent::GetRawKeyFlags() const
{
    ::wxUint32 __ret = ((::wxKeyEvent*)__Instance)->GetRawKeyFlags();
    return __ret;
}

void Ozone::KeyEvent::GetPosition(int* xpos, int* ypos) const
{
    int* __arg0 = (::wxCoord*)xpos;
    int* __arg1 = (::wxCoord*)ypos;
    ((::wxKeyEvent*)__Instance)->GetPosition(__arg0, __arg1);
    xpos = __arg0;
    ypos = __arg1;
}

void Ozone::KeyEvent::GetPosition(long* xpos, long* ypos) const
{
    long* __arg0 = (long*)xpos;
    long* __arg1 = (long*)ypos;
    ((::wxKeyEvent*)__Instance)->GetPosition(__arg0, __arg1);
    xpos = __arg0;
    ypos = __arg1;
}

::Ozone::Point Ozone::KeyEvent::GetPosition() const
{
    ::wxPoint __ret = ((::wxKeyEvent*)__Instance)->GetPosition();
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

int Ozone::KeyEvent::GetX() const
{
    ::wxCoord __ret = ((::wxKeyEvent*)__Instance)->GetX();
    return __ret;
}

int Ozone::KeyEvent::GetY() const
{
    ::wxCoord __ret = ((::wxKeyEvent*)__Instance)->GetY();
    return __ret;
}

void Ozone::KeyEvent::DoAllowNextEvent()
{
    ((::wxKeyEvent*)__Instance)->DoAllowNextEvent();
}

bool Ozone::KeyEvent::IsNextEventAllowed() const
{
    bool __ret = ((::wxKeyEvent*)__Instance)->IsNextEventAllowed();
    return __ret;
}

::Ozone::Event* Ozone::KeyEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxKeyEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

::Ozone::EventCategory Ozone::KeyEvent::GetEventCategory() const
{
    ::wxEventCategory __ret = ((::wxKeyEvent*)__Instance)->GetEventCategory();
    return (::Ozone::EventCategory)__ret;
}

int Ozone::KeyEvent::get_m_x()
{
    ::wxCoord __ret = ((::wxKeyEvent*)__Instance)->m_x;
    return __ret;
}


void Ozone::KeyEvent::set_m_x(int value)
{
    auto __arg0 = (::wxCoord)value;
    ((::wxKeyEvent*)__Instance)->m_x = __arg0;
}

int Ozone::KeyEvent::get_m_y()
{
    ::wxCoord __ret = ((::wxKeyEvent*)__Instance)->m_y;
    return __ret;
}


void Ozone::KeyEvent::set_m_y(int value)
{
    auto __arg0 = (::wxCoord)value;
    ((::wxKeyEvent*)__Instance)->m_y = __arg0;
}

long Ozone::KeyEvent::get_m_keyCode()
{
    long __ret = ((::wxKeyEvent*)__Instance)->m_keyCode;
    return __ret;
}


void Ozone::KeyEvent::set_m_keyCode(long value)
{
    ((::wxKeyEvent*)__Instance)->m_keyCode = value;
}

wchar_t Ozone::KeyEvent::get_m_uniChar()
{
    ::wxChar __ret = ((::wxKeyEvent*)__Instance)->m_uniChar;
    return __ret;
}


void Ozone::KeyEvent::set_m_uniChar(wchar_t value)
{
    auto __arg0 = (::wxChar)value;
    ((::wxKeyEvent*)__Instance)->m_uniChar = __arg0;
}

unsigned int Ozone::KeyEvent::get_m_rawCode()
{
    ::wxUint32 __ret = ((::wxKeyEvent*)__Instance)->m_rawCode;
    return __ret;
}


void Ozone::KeyEvent::set_m_rawCode(unsigned int value)
{
    auto __arg0 = (::wxUint32)value;
    ((::wxKeyEvent*)__Instance)->m_rawCode = __arg0;
}

unsigned int Ozone::KeyEvent::get_m_rawFlags()
{
    ::wxUint32 __ret = ((::wxKeyEvent*)__Instance)->m_rawFlags;
    return __ret;
}


void Ozone::KeyEvent::set_m_rawFlags(unsigned int value)
{
    auto __arg0 = (::wxUint32)value;
    ((::wxKeyEvent*)__Instance)->m_rawFlags = __arg0;
}

Ozone::SizeEvent::SizeEvent(::wxSizeEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::SizeEvent::~SizeEvent()
{
}

Ozone::SizeEvent::SizeEvent()
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxSizeEvent();
}

Ozone::SizeEvent::SizeEvent(const ::Ozone::Size& sz, int winid)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto &__arg0 = *(::wxSize*)sz.__Instance;
    __Instance = new ::wxSizeEvent(__arg0, winid);
}

Ozone::SizeEvent::SizeEvent(const ::Ozone::Rect& rect, int id)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto &__arg0 = *(::wxRect*)rect.__Instance;
    __Instance = new ::wxSizeEvent(__arg0, id);
}

::Ozone::Size Ozone::SizeEvent::GetSize() const
{
    ::wxSize __ret = ((::wxSizeEvent*)__Instance)->GetSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

void Ozone::SizeEvent::SetSize(::Ozone::Size size)
{
    auto __arg0 = *(::wxSize*)size.__Instance;
    ((::wxSizeEvent*)__Instance)->SetSize(__arg0);
}

::Ozone::Rect Ozone::SizeEvent::GetRect() const
{
    ::wxRect __ret = ((::wxSizeEvent*)__Instance)->GetRect();
    auto ____ret = new ::wxRect(__ret);
    return ____ret;
}

void Ozone::SizeEvent::SetRect(const ::Ozone::Rect& rect)
{
    auto &__arg0 = *(::wxRect*)rect.__Instance;
    ((::wxSizeEvent*)__Instance)->SetRect(__arg0);
}

::Ozone::Event* Ozone::SizeEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxSizeEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

::Ozone::Size Ozone::SizeEvent::get_m_size()
{
    ::wxSize __ret = ((::wxSizeEvent*)__Instance)->m_size;
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}


void Ozone::SizeEvent::set_m_size(::Ozone::Size value)
{
    auto __arg0 = *(::wxSize*)value.__Instance;
    ((::wxSizeEvent*)__Instance)->m_size = __arg0;
}

::Ozone::Rect Ozone::SizeEvent::get_m_rect()
{
    ::wxRect __ret = ((::wxSizeEvent*)__Instance)->m_rect;
    auto ____ret = new ::wxRect(__ret);
    return ____ret;
}


void Ozone::SizeEvent::set_m_rect(::Ozone::Rect value)
{
    auto __arg0 = *(::wxRect*)value.__Instance;
    ((::wxSizeEvent*)__Instance)->m_rect = __arg0;
}

Ozone::MoveEvent::MoveEvent(::wxMoveEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::MoveEvent::~MoveEvent()
{
}

Ozone::MoveEvent::MoveEvent()
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxMoveEvent();
}

Ozone::MoveEvent::MoveEvent(const ::Ozone::Point& pos, int winid)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto &__arg0 = *(::wxPoint*)pos.__Instance;
    __Instance = new ::wxMoveEvent(__arg0, winid);
}

Ozone::MoveEvent::MoveEvent(const ::Ozone::Rect& rect, int id)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto &__arg0 = *(::wxRect*)rect.__Instance;
    __Instance = new ::wxMoveEvent(__arg0, id);
}

::Ozone::Point Ozone::MoveEvent::GetPosition() const
{
    ::wxPoint __ret = ((::wxMoveEvent*)__Instance)->GetPosition();
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

void Ozone::MoveEvent::SetPosition(const ::Ozone::Point& pos)
{
    auto &__arg0 = *(::wxPoint*)pos.__Instance;
    ((::wxMoveEvent*)__Instance)->SetPosition(__arg0);
}

::Ozone::Rect Ozone::MoveEvent::GetRect() const
{
    ::wxRect __ret = ((::wxMoveEvent*)__Instance)->GetRect();
    auto ____ret = new ::wxRect(__ret);
    return ____ret;
}

void Ozone::MoveEvent::SetRect(const ::Ozone::Rect& rect)
{
    auto &__arg0 = *(::wxRect*)rect.__Instance;
    ((::wxMoveEvent*)__Instance)->SetRect(__arg0);
}

::Ozone::Event* Ozone::MoveEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxMoveEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::PaintEvent::PaintEvent(::wxPaintEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::PaintEvent::~PaintEvent()
{
}

::Ozone::Event* Ozone::PaintEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxPaintEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::NcPaintEvent::NcPaintEvent(::wxNcPaintEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::NcPaintEvent::~NcPaintEvent()
{
}

::Ozone::Event* Ozone::NcPaintEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxNcPaintEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::EraseEvent::EraseEvent(::wxEraseEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::EraseEvent::~EraseEvent()
{
}

Ozone::EraseEvent::EraseEvent(int Id, ::Ozone::DC* dc)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg1 = dc ? (::wxDC*)dc->__Instance : nullptr;
    __Instance = new ::wxEraseEvent(Id, __arg1);
}

::Ozone::DC* Ozone::EraseEvent::GetDC() const
{
    ::wxDC* __ret = ((::wxEraseEvent*)__Instance)->GetDC();
    return (__ret == nullptr) ? nullptr : new Ozone::DC((::wxDC*)__ret);
}

::Ozone::Event* Ozone::EraseEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxEraseEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::FocusEvent::FocusEvent(::wxFocusEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::FocusEvent::~FocusEvent()
{
}

Ozone::FocusEvent::FocusEvent(int type, int winid)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)type;
    __Instance = new ::wxFocusEvent(__arg0, winid);
}

::Ozone::Window* Ozone::FocusEvent::GetWindow() const
{
    ::wxWindow* __ret = ((::wxFocusEvent*)__Instance)->GetWindow();
    return (__ret == nullptr) ? nullptr : new Ozone::Window((::wxWindow*)__ret);
}

void Ozone::FocusEvent::SetWindow(::Ozone::Window* win)
{
    auto __arg0 = win ? (::wxWindow*)win->__Instance : nullptr;
    ((::wxFocusEvent*)__Instance)->SetWindow(__arg0);
}

::Ozone::Event* Ozone::FocusEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxFocusEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::ChildFocusEvent::ChildFocusEvent(::wxChildFocusEvent* instance, bool ownNativeInstance)
    : Ozone::CommandEvent((::wxCommandEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::ChildFocusEvent::~ChildFocusEvent()
{
}

Ozone::ChildFocusEvent::ChildFocusEvent(::Ozone::Window* win)
    : Ozone::CommandEvent((::wxCommandEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = win ? (::wxWindow*)win->__Instance : nullptr;
    __Instance = new ::wxChildFocusEvent(__arg0);
}

::Ozone::Window* Ozone::ChildFocusEvent::GetWindow() const
{
    ::wxWindow* __ret = ((::wxChildFocusEvent*)__Instance)->GetWindow();
    return (__ret == nullptr) ? nullptr : new Ozone::Window((::wxWindow*)__ret);
}

::Ozone::Event* Ozone::ChildFocusEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxChildFocusEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::ActivateEvent::ActivateEvent(::wxActivateEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::ActivateEvent::~ActivateEvent()
{
}

Ozone::ActivateEvent::ActivateEvent(int type, bool active, int Id, ::Ozone::ActivateEvent::Reason activationReason)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)type;
    auto __arg3 = (::wxActivateEvent::Reason)activationReason;
    __Instance = new ::wxActivateEvent(__arg0, active, Id, __arg3);
}

bool Ozone::ActivateEvent::GetActive() const
{
    bool __ret = ((::wxActivateEvent*)__Instance)->GetActive();
    return __ret;
}

::Ozone::ActivateEvent::Reason Ozone::ActivateEvent::GetActivationReason() const
{
    ::wxActivateEvent::Reason __ret = ((::wxActivateEvent*)__Instance)->GetActivationReason();
    return (::Ozone::ActivateEvent::Reason)__ret;
}

::Ozone::Event* Ozone::ActivateEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxActivateEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::InitDialogEvent::InitDialogEvent(::wxInitDialogEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::InitDialogEvent::~InitDialogEvent()
{
}

Ozone::InitDialogEvent::InitDialogEvent(int Id)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxInitDialogEvent(Id);
}

::Ozone::Event* Ozone::InitDialogEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxInitDialogEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::MenuEvent::MenuEvent(::wxMenuEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::MenuEvent::~MenuEvent()
{
}

int Ozone::MenuEvent::GetMenuId() const
{
    int __ret = ((::wxMenuEvent*)__Instance)->GetMenuId();
    return __ret;
}

bool Ozone::MenuEvent::IsPopup() const
{
    bool __ret = ((::wxMenuEvent*)__Instance)->IsPopup();
    return __ret;
}

::Ozone::Event* Ozone::MenuEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxMenuEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::CloseEvent::CloseEvent(::wxCloseEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::CloseEvent::~CloseEvent()
{
}

Ozone::CloseEvent::CloseEvent(int type, int winid)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)type;
    __Instance = new ::wxCloseEvent(__arg0, winid);
}

void Ozone::CloseEvent::SetLoggingOff(bool logOff)
{
    ((::wxCloseEvent*)__Instance)->SetLoggingOff(logOff);
}

bool Ozone::CloseEvent::GetLoggingOff() const
{
    bool __ret = ((::wxCloseEvent*)__Instance)->GetLoggingOff();
    return __ret;
}

void Ozone::CloseEvent::Veto(bool veto)
{
    ((::wxCloseEvent*)__Instance)->Veto(veto);
}

void Ozone::CloseEvent::SetCanVeto(bool canVeto)
{
    ((::wxCloseEvent*)__Instance)->SetCanVeto(canVeto);
}

bool Ozone::CloseEvent::CanVeto() const
{
    bool __ret = ((::wxCloseEvent*)__Instance)->CanVeto();
    return __ret;
}

bool Ozone::CloseEvent::GetVeto() const
{
    bool __ret = ((::wxCloseEvent*)__Instance)->GetVeto();
    return __ret;
}

::Ozone::Event* Ozone::CloseEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxCloseEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::ShowEvent::ShowEvent(::wxShowEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::ShowEvent::~ShowEvent()
{
}

Ozone::ShowEvent::ShowEvent(int winid, bool show)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxShowEvent(winid, show);
}

void Ozone::ShowEvent::SetShow(bool show)
{
    ((::wxShowEvent*)__Instance)->SetShow(show);
}

bool Ozone::ShowEvent::IsShown() const
{
    bool __ret = ((::wxShowEvent*)__Instance)->IsShown();
    return __ret;
}

::Ozone::Event* Ozone::ShowEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxShowEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::IconizeEvent::IconizeEvent(::wxIconizeEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::IconizeEvent::~IconizeEvent()
{
}

Ozone::IconizeEvent::IconizeEvent(int winid, bool iconized)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxIconizeEvent(winid, iconized);
}

bool Ozone::IconizeEvent::IsIconized() const
{
    bool __ret = ((::wxIconizeEvent*)__Instance)->IsIconized();
    return __ret;
}

::Ozone::Event* Ozone::IconizeEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxIconizeEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::MaximizeEvent::MaximizeEvent(::wxMaximizeEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::MaximizeEvent::~MaximizeEvent()
{
}

Ozone::MaximizeEvent::MaximizeEvent(int winid)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxMaximizeEvent(winid);
}

::Ozone::Event* Ozone::MaximizeEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxMaximizeEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::JoystickEvent::JoystickEvent(::wxJoystickEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::JoystickEvent::~JoystickEvent()
{
}

Ozone::JoystickEvent::JoystickEvent(int type, int state, int joystick, int change)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)type;
    __Instance = new ::wxJoystickEvent(__arg0, state, joystick, change);
}

::Ozone::Point Ozone::JoystickEvent::GetPosition() const
{
    ::wxPoint __ret = ((::wxJoystickEvent*)__Instance)->GetPosition();
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

int Ozone::JoystickEvent::GetZPosition() const
{
    int __ret = ((::wxJoystickEvent*)__Instance)->GetZPosition();
    return __ret;
}

int Ozone::JoystickEvent::GetButtonState() const
{
    int __ret = ((::wxJoystickEvent*)__Instance)->GetButtonState();
    return __ret;
}

int Ozone::JoystickEvent::GetButtonChange() const
{
    int __ret = ((::wxJoystickEvent*)__Instance)->GetButtonChange();
    return __ret;
}

int Ozone::JoystickEvent::GetButtonOrdinal() const
{
    int __ret = ((::wxJoystickEvent*)__Instance)->GetButtonOrdinal();
    return __ret;
}

int Ozone::JoystickEvent::GetJoystick() const
{
    int __ret = ((::wxJoystickEvent*)__Instance)->GetJoystick();
    return __ret;
}

void Ozone::JoystickEvent::SetJoystick(int stick)
{
    ((::wxJoystickEvent*)__Instance)->SetJoystick(stick);
}

void Ozone::JoystickEvent::SetButtonState(int state)
{
    ((::wxJoystickEvent*)__Instance)->SetButtonState(state);
}

void Ozone::JoystickEvent::SetButtonChange(int change)
{
    ((::wxJoystickEvent*)__Instance)->SetButtonChange(change);
}

void Ozone::JoystickEvent::SetPosition(const ::Ozone::Point& pos)
{
    auto &__arg0 = *(::wxPoint*)pos.__Instance;
    ((::wxJoystickEvent*)__Instance)->SetPosition(__arg0);
}

void Ozone::JoystickEvent::SetZPosition(int zPos)
{
    ((::wxJoystickEvent*)__Instance)->SetZPosition(zPos);
}

bool Ozone::JoystickEvent::IsButton() const
{
    bool __ret = ((::wxJoystickEvent*)__Instance)->IsButton();
    return __ret;
}

bool Ozone::JoystickEvent::IsMove() const
{
    bool __ret = ((::wxJoystickEvent*)__Instance)->IsMove();
    return __ret;
}

bool Ozone::JoystickEvent::IsZMove() const
{
    bool __ret = ((::wxJoystickEvent*)__Instance)->IsZMove();
    return __ret;
}

bool Ozone::JoystickEvent::ButtonDown(int but) const
{
    bool __ret = ((::wxJoystickEvent*)__Instance)->ButtonDown(but);
    return __ret;
}

bool Ozone::JoystickEvent::ButtonUp(int but) const
{
    bool __ret = ((::wxJoystickEvent*)__Instance)->ButtonUp(but);
    return __ret;
}

bool Ozone::JoystickEvent::ButtonIsDown(int but) const
{
    bool __ret = ((::wxJoystickEvent*)__Instance)->ButtonIsDown(but);
    return __ret;
}

::Ozone::Event* Ozone::JoystickEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxJoystickEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::UpdateUIEvent::UpdateUIEvent(::wxUpdateUIEvent* instance, bool ownNativeInstance)
    : Ozone::CommandEvent((::wxCommandEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::UpdateUIEvent::~UpdateUIEvent()
{
}

Ozone::UpdateUIEvent::UpdateUIEvent(int commandId)
    : Ozone::CommandEvent((::wxCommandEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)commandId;
    __Instance = new ::wxUpdateUIEvent(__arg0);
}

bool Ozone::UpdateUIEvent::GetChecked() const
{
    bool __ret = ((::wxUpdateUIEvent*)__Instance)->GetChecked();
    return __ret;
}

bool Ozone::UpdateUIEvent::GetEnabled() const
{
    bool __ret = ((::wxUpdateUIEvent*)__Instance)->GetEnabled();
    return __ret;
}

bool Ozone::UpdateUIEvent::GetShown() const
{
    bool __ret = ((::wxUpdateUIEvent*)__Instance)->GetShown();
    return __ret;
}

const char* Ozone::UpdateUIEvent::GetText() const
{
    ::wxString __ret = ((::wxUpdateUIEvent*)__Instance)->GetText();
    return __ret.c_str();
}

bool Ozone::UpdateUIEvent::GetSetText() const
{
    bool __ret = ((::wxUpdateUIEvent*)__Instance)->GetSetText();
    return __ret;
}

bool Ozone::UpdateUIEvent::GetSetChecked() const
{
    bool __ret = ((::wxUpdateUIEvent*)__Instance)->GetSetChecked();
    return __ret;
}

bool Ozone::UpdateUIEvent::GetSetEnabled() const
{
    bool __ret = ((::wxUpdateUIEvent*)__Instance)->GetSetEnabled();
    return __ret;
}

bool Ozone::UpdateUIEvent::GetSetShown() const
{
    bool __ret = ((::wxUpdateUIEvent*)__Instance)->GetSetShown();
    return __ret;
}

void Ozone::UpdateUIEvent::Check(bool check)
{
    ((::wxUpdateUIEvent*)__Instance)->Check(check);
}

void Ozone::UpdateUIEvent::Enable(bool enable)
{
    ((::wxUpdateUIEvent*)__Instance)->Enable(enable);
}

void Ozone::UpdateUIEvent::Show(bool show)
{
    ((::wxUpdateUIEvent*)__Instance)->Show(show);
}

void Ozone::UpdateUIEvent::SetText(const char* text)
{
    auto __arg0 = text;
    ((::wxUpdateUIEvent*)__Instance)->SetText(__arg0);
}

bool Ozone::UpdateUIEvent::IsCheckable() const
{
    bool __ret = ((::wxUpdateUIEvent*)__Instance)->IsCheckable();
    return __ret;
}

void Ozone::UpdateUIEvent::DisallowCheck()
{
    ((::wxUpdateUIEvent*)__Instance)->DisallowCheck();
}

void Ozone::UpdateUIEvent::SetUpdateInterval(long updateInterval)
{
    ::wxUpdateUIEvent::SetUpdateInterval(updateInterval);
}

long Ozone::UpdateUIEvent::GetUpdateInterval()
{
    long __ret = ::wxUpdateUIEvent::GetUpdateInterval();
    return __ret;
}

void Ozone::UpdateUIEvent::ResetUpdateTime()
{
    ::wxUpdateUIEvent::ResetUpdateTime();
}

void Ozone::UpdateUIEvent::SetMode(::Ozone::UpdateUIMode mode)
{
    auto __arg0 = (::wxUpdateUIMode)mode;
    ::wxUpdateUIEvent::SetMode(__arg0);
}

::Ozone::UpdateUIMode Ozone::UpdateUIEvent::GetMode()
{
    ::wxUpdateUIMode __ret = ::wxUpdateUIEvent::GetMode();
    return (::Ozone::UpdateUIMode)__ret;
}

::Ozone::Event* Ozone::UpdateUIEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxUpdateUIEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::SysColourChangedEvent::SysColourChangedEvent(::wxSysColourChangedEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::SysColourChangedEvent::~SysColourChangedEvent()
{
}

Ozone::SysColourChangedEvent::SysColourChangedEvent()
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxSysColourChangedEvent();
}

::Ozone::Event* Ozone::SysColourChangedEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxSysColourChangedEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::MouseCaptureChangedEvent::MouseCaptureChangedEvent(::wxMouseCaptureChangedEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::MouseCaptureChangedEvent::~MouseCaptureChangedEvent()
{
}

Ozone::MouseCaptureChangedEvent::MouseCaptureChangedEvent(int winid, ::Ozone::Window* gainedCapture)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    auto __arg1 = gainedCapture ? (::wxWindow*)gainedCapture->__Instance : nullptr;
    __Instance = new ::wxMouseCaptureChangedEvent(__arg0, __arg1);
}

::Ozone::Event* Ozone::MouseCaptureChangedEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxMouseCaptureChangedEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

::Ozone::Window* Ozone::MouseCaptureChangedEvent::GetCapturedWindow() const
{
    ::wxWindow* __ret = ((::wxMouseCaptureChangedEvent*)__Instance)->GetCapturedWindow();
    return (__ret == nullptr) ? nullptr : new Ozone::Window((::wxWindow*)__ret);
}

Ozone::MouseCaptureLostEvent::MouseCaptureLostEvent(::wxMouseCaptureLostEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::MouseCaptureLostEvent::~MouseCaptureLostEvent()
{
}

Ozone::MouseCaptureLostEvent::MouseCaptureLostEvent(int winid)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    __Instance = new ::wxMouseCaptureLostEvent(__arg0);
}

::Ozone::Event* Ozone::MouseCaptureLostEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxMouseCaptureLostEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::DisplayChangedEvent::DisplayChangedEvent(::wxDisplayChangedEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::DisplayChangedEvent::~DisplayChangedEvent()
{
}

Ozone::DisplayChangedEvent::DisplayChangedEvent()
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxDisplayChangedEvent();
}

::Ozone::Event* Ozone::DisplayChangedEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxDisplayChangedEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::DPIChangedEvent::DPIChangedEvent(::wxDPIChangedEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::DPIChangedEvent::~DPIChangedEvent()
{
}

Ozone::DPIChangedEvent::DPIChangedEvent(const ::Ozone::Size& oldDPI, const ::Ozone::Size& newDPI)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto &__arg0 = *(::wxSize*)oldDPI.__Instance;
    auto &__arg1 = *(::wxSize*)newDPI.__Instance;
    __Instance = new ::wxDPIChangedEvent(__arg0, __arg1);
}

::Ozone::Size Ozone::DPIChangedEvent::GetOldDPI() const
{
    ::wxSize __ret = ((::wxDPIChangedEvent*)__Instance)->GetOldDPI();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::Ozone::Size Ozone::DPIChangedEvent::GetNewDPI() const
{
    ::wxSize __ret = ((::wxDPIChangedEvent*)__Instance)->GetNewDPI();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::Ozone::Event* Ozone::DPIChangedEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxDPIChangedEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::PaletteChangedEvent::PaletteChangedEvent(::wxPaletteChangedEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::PaletteChangedEvent::~PaletteChangedEvent()
{
}

Ozone::PaletteChangedEvent::PaletteChangedEvent(int winid)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    __Instance = new ::wxPaletteChangedEvent(__arg0);
}

void Ozone::PaletteChangedEvent::SetChangedWindow(::Ozone::Window* win)
{
    auto __arg0 = win ? (::wxWindow*)win->__Instance : nullptr;
    ((::wxPaletteChangedEvent*)__Instance)->SetChangedWindow(__arg0);
}

::Ozone::Window* Ozone::PaletteChangedEvent::GetChangedWindow() const
{
    ::wxWindow* __ret = ((::wxPaletteChangedEvent*)__Instance)->GetChangedWindow();
    return (__ret == nullptr) ? nullptr : new Ozone::Window((::wxWindow*)__ret);
}

::Ozone::Event* Ozone::PaletteChangedEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxPaletteChangedEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::QueryNewPaletteEvent::QueryNewPaletteEvent(::wxQueryNewPaletteEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::QueryNewPaletteEvent::~QueryNewPaletteEvent()
{
}

Ozone::QueryNewPaletteEvent::QueryNewPaletteEvent(int winid)
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxWindowID)winid;
    __Instance = new ::wxQueryNewPaletteEvent(__arg0);
}

void Ozone::QueryNewPaletteEvent::SetPaletteRealized(bool realized)
{
    ((::wxQueryNewPaletteEvent*)__Instance)->SetPaletteRealized(realized);
}

bool Ozone::QueryNewPaletteEvent::GetPaletteRealized() const
{
    bool __ret = ((::wxQueryNewPaletteEvent*)__Instance)->GetPaletteRealized();
    return __ret;
}

::Ozone::Event* Ozone::QueryNewPaletteEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxQueryNewPaletteEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::NavigationKeyEvent::NavigationKeyEvent(::wxNavigationKeyEvent* instance, bool ownNativeInstance)
    : Ozone::Event((::wxEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::NavigationKeyEvent::~NavigationKeyEvent()
{
}

Ozone::NavigationKeyEvent::NavigationKeyEvent()
    : Ozone::Event((::wxEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxNavigationKeyEvent();
}

bool Ozone::NavigationKeyEvent::GetDirection() const
{
    bool __ret = ((::wxNavigationKeyEvent*)__Instance)->GetDirection();
    return __ret;
}

void Ozone::NavigationKeyEvent::SetDirection(bool bForward)
{
    ((::wxNavigationKeyEvent*)__Instance)->SetDirection(bForward);
}

bool Ozone::NavigationKeyEvent::IsWindowChange() const
{
    bool __ret = ((::wxNavigationKeyEvent*)__Instance)->IsWindowChange();
    return __ret;
}

void Ozone::NavigationKeyEvent::SetWindowChange(bool bIs)
{
    ((::wxNavigationKeyEvent*)__Instance)->SetWindowChange(bIs);
}

bool Ozone::NavigationKeyEvent::IsFromTab() const
{
    bool __ret = ((::wxNavigationKeyEvent*)__Instance)->IsFromTab();
    return __ret;
}

void Ozone::NavigationKeyEvent::SetFromTab(bool bIs)
{
    ((::wxNavigationKeyEvent*)__Instance)->SetFromTab(bIs);
}

::Ozone::Window* Ozone::NavigationKeyEvent::GetCurrentFocus() const
{
    ::wxWindow* __ret = ((::wxNavigationKeyEvent*)__Instance)->GetCurrentFocus();
    return (__ret == nullptr) ? nullptr : new Ozone::Window((::wxWindow*)__ret);
}

void Ozone::NavigationKeyEvent::SetCurrentFocus(::Ozone::Window* win)
{
    auto __arg0 = win ? (::wxWindow*)win->__Instance : nullptr;
    ((::wxNavigationKeyEvent*)__Instance)->SetCurrentFocus(__arg0);
}

void Ozone::NavigationKeyEvent::SetFlags(long flags)
{
    ((::wxNavigationKeyEvent*)__Instance)->SetFlags(flags);
}

::Ozone::Event* Ozone::NavigationKeyEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxNavigationKeyEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

long Ozone::NavigationKeyEvent::get_m_flags()
{
    long __ret = ((::wxNavigationKeyEvent*)__Instance)->m_flags;
    return __ret;
}


void Ozone::NavigationKeyEvent::set_m_flags(long value)
{
    ((::wxNavigationKeyEvent*)__Instance)->m_flags = value;
}

::Ozone::Window* Ozone::NavigationKeyEvent::get_m_focus()
{
    ::wxWindow* __ret = ((::wxNavigationKeyEvent*)__Instance)->m_focus;
    return (__ret == nullptr) ? nullptr : new Ozone::Window((::wxWindow*)__ret);
}


void Ozone::NavigationKeyEvent::set_m_focus(::Ozone::Window* value)
{
    auto __arg0 = value ? (::wxWindow*)value->__Instance : nullptr;
    ((::wxNavigationKeyEvent*)__Instance)->m_focus = __arg0;
}

Ozone::WindowCreateEvent::WindowCreateEvent(::wxWindowCreateEvent* instance, bool ownNativeInstance)
    : Ozone::CommandEvent((::wxCommandEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::WindowCreateEvent::~WindowCreateEvent()
{
}

Ozone::WindowCreateEvent::WindowCreateEvent(::Ozone::Window* win)
    : Ozone::CommandEvent((::wxCommandEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = win ? (::wxWindow*)win->__Instance : nullptr;
    __Instance = new ::wxWindowCreateEvent(__arg0);
}

::Ozone::Window* Ozone::WindowCreateEvent::GetWindow() const
{
    ::wxWindow* __ret = ((::wxWindowCreateEvent*)__Instance)->GetWindow();
    return (__ret == nullptr) ? nullptr : new Ozone::Window((::wxWindow*)__ret);
}

::Ozone::Event* Ozone::WindowCreateEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxWindowCreateEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::WindowDestroyEvent::WindowDestroyEvent(::wxWindowDestroyEvent* instance, bool ownNativeInstance)
    : Ozone::CommandEvent((::wxCommandEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::WindowDestroyEvent::~WindowDestroyEvent()
{
}

Ozone::WindowDestroyEvent::WindowDestroyEvent(::Ozone::Window* win)
    : Ozone::CommandEvent((::wxCommandEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = win ? (::wxWindow*)win->__Instance : nullptr;
    __Instance = new ::wxWindowDestroyEvent(__arg0);
}

::Ozone::Window* Ozone::WindowDestroyEvent::GetWindow() const
{
    ::wxWindow* __ret = ((::wxWindowDestroyEvent*)__Instance)->GetWindow();
    return (__ret == nullptr) ? nullptr : new Ozone::Window((::wxWindow*)__ret);
}

::Ozone::Event* Ozone::WindowDestroyEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxWindowDestroyEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::HelpEvent::HelpEvent(::wxHelpEvent* instance, bool ownNativeInstance)
    : Ozone::CommandEvent((::wxCommandEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::HelpEvent::~HelpEvent()
{
}

Ozone::HelpEvent::HelpEvent(int type, int winid, const ::Ozone::Point& pt, ::Ozone::HelpEvent::Source origin)
    : Ozone::CommandEvent((::wxCommandEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)type;
    auto __arg1 = (::wxWindowID)winid;
    auto &__arg2 = *(::wxPoint*)pt.__Instance;
    auto __arg3 = (::wxHelpEvent::Origin)origin;
    __Instance = new ::wxHelpEvent(__arg0, __arg1, __arg2, __arg3);
}

void Ozone::HelpEvent::SetPosition(const ::Ozone::Point& pos)
{
    auto &__arg0 = *(::wxPoint*)pos.__Instance;
    ((::wxHelpEvent*)__Instance)->SetPosition(__arg0);
}

void Ozone::HelpEvent::SetLink(const char* link)
{
    auto __arg0 = link;
    ((::wxHelpEvent*)__Instance)->SetLink(__arg0);
}

void Ozone::HelpEvent::SetTarget(const char* target)
{
    auto __arg0 = target;
    ((::wxHelpEvent*)__Instance)->SetTarget(__arg0);
}

::Ozone::Event* Ozone::HelpEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxHelpEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

::Ozone::HelpEvent::Source Ozone::HelpEvent::GetOrigin() const
{
    ::wxHelpEvent::Origin __ret = ((::wxHelpEvent*)__Instance)->GetOrigin();
    return (::Ozone::HelpEvent::Source)__ret;
}

void Ozone::HelpEvent::SetOrigin(::Ozone::HelpEvent::Source origin)
{
    auto __arg0 = (::wxHelpEvent::Origin)origin;
    ((::wxHelpEvent*)__Instance)->SetOrigin(__arg0);
}

Ozone::ClipboardTextEvent::ClipboardTextEvent(::wxClipboardTextEvent* instance, bool ownNativeInstance)
    : Ozone::CommandEvent((::wxCommandEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::ClipboardTextEvent::~ClipboardTextEvent()
{
}

Ozone::ClipboardTextEvent::ClipboardTextEvent(int type, int winid)
    : Ozone::CommandEvent((::wxCommandEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)type;
    auto __arg1 = (::wxWindowID)winid;
    __Instance = new ::wxClipboardTextEvent(__arg0, __arg1);
}

::Ozone::Event* Ozone::ClipboardTextEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxClipboardTextEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::ContextMenuEvent::ContextMenuEvent(::wxContextMenuEvent* instance, bool ownNativeInstance)
    : Ozone::CommandEvent((::wxCommandEvent*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::ContextMenuEvent::~ContextMenuEvent()
{
}

Ozone::ContextMenuEvent::ContextMenuEvent(int type, int winid, const ::Ozone::Point& pt)
    : Ozone::CommandEvent((::wxCommandEvent*)nullptr)
{
    __OwnsNativeInstance = true;
    auto __arg0 = (::wxEventType)type;
    auto __arg1 = (::wxWindowID)winid;
    auto &__arg2 = *(::wxPoint*)pt.__Instance;
    __Instance = new ::wxContextMenuEvent(__arg0, __arg1, __arg2);
}

void Ozone::ContextMenuEvent::SetPosition(const ::Ozone::Point& pos)
{
    auto &__arg0 = *(::wxPoint*)pos.__Instance;
    ((::wxContextMenuEvent*)__Instance)->SetPosition(__arg0);
}

::Ozone::Event* Ozone::ContextMenuEvent::Clone() const
{
    ::wxEvent* __ret = ((::wxContextMenuEvent*)__Instance)->Clone();
    return (__ret == nullptr) ? nullptr : new Ozone::Event((::wxEvent*)__ret);
}

Ozone::EvtHandler::EvtHandler(::wxEvtHandler* instance, bool ownNativeInstance)
    : Ozone::Object((::wxObject*)instance, ownNativeInstance)
{
    __Instance = instance;
}

Ozone::EvtHandler::~EvtHandler()
{
}

Ozone::EvtHandler::EvtHandler()
    : Ozone::Object((::wxObject*)nullptr)
{
    __OwnsNativeInstance = true;
    __Instance = new ::wxEvtHandler();
}

::Ozone::EvtHandler* Ozone::EvtHandler::GetNextHandler() const
{
    ::wxEvtHandler* __ret = ((::wxEvtHandler*)__Instance)->GetNextHandler();
    return (__ret == nullptr) ? nullptr : new Ozone::EvtHandler((::wxEvtHandler*)__ret);
}

::Ozone::EvtHandler* Ozone::EvtHandler::GetPreviousHandler() const
{
    ::wxEvtHandler* __ret = ((::wxEvtHandler*)__Instance)->GetPreviousHandler();
    return (__ret == nullptr) ? nullptr : new Ozone::EvtHandler((::wxEvtHandler*)__ret);
}

void Ozone::EvtHandler::SetNextHandler(::Ozone::EvtHandler* handler)
{
    auto __arg0 = handler ? (::wxEvtHandler*)handler->__Instance : nullptr;
    ((::wxEvtHandler*)__Instance)->SetNextHandler(__arg0);
}

void Ozone::EvtHandler::SetPreviousHandler(::Ozone::EvtHandler* handler)
{
    auto __arg0 = handler ? (::wxEvtHandler*)handler->__Instance : nullptr;
    ((::wxEvtHandler*)__Instance)->SetPreviousHandler(__arg0);
}

void Ozone::EvtHandler::SetEvtHandlerEnabled(bool enabled)
{
    ((::wxEvtHandler*)__Instance)->SetEvtHandlerEnabled(enabled);
}

bool Ozone::EvtHandler::GetEvtHandlerEnabled() const
{
    bool __ret = ((::wxEvtHandler*)__Instance)->GetEvtHandlerEnabled();
    return __ret;
}

void Ozone::EvtHandler::Unlink()
{
    ((::wxEvtHandler*)__Instance)->Unlink();
}

bool Ozone::EvtHandler::IsUnlinked() const
{
    bool __ret = ((::wxEvtHandler*)__Instance)->IsUnlinked();
    return __ret;
}

bool Ozone::EvtHandler::ProcessEvent(::Ozone::Event& event)
{
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    bool __ret = ((::wxEvtHandler*)__Instance)->ProcessEvent(__arg0);
    return __ret;
}

bool Ozone::EvtHandler::SafelyProcessEvent(::Ozone::Event& event)
{
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    bool __ret = ((::wxEvtHandler*)__Instance)->SafelyProcessEvent(__arg0);
    return __ret;
}

bool Ozone::EvtHandler::ProcessEventLocally(::Ozone::Event& event)
{
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    bool __ret = ((::wxEvtHandler*)__Instance)->ProcessEventLocally(__arg0);
    return __ret;
}

void Ozone::EvtHandler::QueueEvent(::Ozone::Event* event)
{
    auto __arg0 = event ? (::wxEvent*)event->__Instance : nullptr;
    ((::wxEvtHandler*)__Instance)->QueueEvent(__arg0);
}

void Ozone::EvtHandler::AddPendingEvent(const ::Ozone::Event& event)
{
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    ((::wxEvtHandler*)__Instance)->AddPendingEvent(__arg0);
}

void Ozone::EvtHandler::ProcessPendingEvents()
{
    ((::wxEvtHandler*)__Instance)->ProcessPendingEvents();
}

void Ozone::EvtHandler::DeletePendingEvents()
{
    ((::wxEvtHandler*)__Instance)->DeletePendingEvents();
}

bool Ozone::EvtHandler::ProcessThreadEvent(const ::Ozone::Event& event)
{
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    bool __ret = ((::wxEvtHandler*)__Instance)->ProcessThreadEvent(__arg0);
    return __ret;
}

void Ozone::EvtHandler::WXConsumeException()
{
    ::wxEvtHandler::WXConsumeException();
}

void Ozone::EvtHandler::SetClientData(void* data)
{
    auto __arg0 = (void*)data;
    ((::wxEvtHandler*)__Instance)->SetClientData(__arg0);
}

void* Ozone::EvtHandler::GetClientData() const
{
    void* __ret = ((::wxEvtHandler*)__Instance)->GetClientData();
    return __ret;
}

bool Ozone::EvtHandler::SearchDynamicEventTable(::Ozone::Event& event)
{
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    bool __ret = ((::wxEvtHandler*)__Instance)->SearchDynamicEventTable(__arg0);
    return __ret;
}

void Ozone::EvtHandler::ClearEventHashTable()
{
    ((::wxEvtHandler*)__Instance)->ClearEventHashTable();
}

void Ozone::EvtHandler::OnSinkDestroyed(::Ozone::EvtHandler* sink)
{
    auto __arg0 = sink ? (::wxEvtHandler*)sink->__Instance : nullptr;
    ((::wxEvtHandler*)__Instance)->OnSinkDestroyed(__arg0);
}

int Ozone::EvtHandler::HandleEvent(::wxEvent& event)
{
    return wxEventFilter::Event_Skip;
}

int (::Ozone::NewEventType)()
{
    ::wxEventType __ret = ::wxNewEventType();
    return __ret;
}

void (::Ozone::PostEvent)(::Ozone::EvtHandler* dest, const ::Ozone::Event& event)
{
    auto __arg0 = dest ? (::wxEvtHandler*)dest->__Instance : nullptr;
    auto &__arg1 = *(::wxEvent*)event.__Instance;
    ::wxPostEvent(__arg0, __arg1);
}

void (::Ozone::QueueEvent)(::Ozone::EvtHandler* dest, ::Ozone::Event* event)
{
    auto __arg0 = dest ? (::wxEvtHandler*)dest->__Instance : nullptr;
    auto __arg1 = event ? (::wxEvent*)event->__Instance : nullptr;
    ::wxQueueEvent(__arg0, __arg1);
}

::Ozone::Window* (::Ozone::FindFocusDescendant)(::Ozone::Window* ancestor)
{
    auto __arg0 = ancestor ? (::wxWindow*)ancestor->__Instance : nullptr;
    ::wxWindow* __ret = ::wxFindFocusDescendant(__arg0);
    return (__ret == nullptr) ? nullptr : new Ozone::Window((::wxWindow*)__ret);
}
