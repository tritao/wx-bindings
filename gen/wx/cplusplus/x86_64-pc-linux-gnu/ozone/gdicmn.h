// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include "FastDelegates.h"
#include <wx/gdicmn.h>
#include "ozone/colour.h"

namespace Ozone
{
    class Brush;
    class ColourDatabase;
    class GDIObjListBase;
    class Object;
    class Pen;
    class Point;
    class PointList;
    class RealPoint;
    class Rect;
    class ResourceCache;
    class Size;
    class StockGDI;
    class wxPointListNode;
    enum class BitmapType : unsigned int;
    enum class EllipsizeFlags : unsigned int;
    enum class EllipsizeMode : unsigned int;
    enum class KeyType : unsigned int;
    enum class PolygonFillMode : unsigned int;
    enum class StockCursor : unsigned int;
}

namespace Ozone
{
    enum class BitmapType : unsigned int
    {
        INVALID = 0,
        BMP = 1,
        BMP_RESOURCE = 2,
        RESOURCE = 2,
        ICO = 3,
        ICO_RESOURCE = 4,
        CUR = 5,
        CUR_RESOURCE = 6,
        XBM = 7,
        XBM_DATA = 8,
        XPM = 9,
        XPM_DATA = 10,
        TIFF = 11,
        TIF = 11,
        TIFF_RESOURCE = 12,
        TIF_RESOURCE = 12,
        GIF = 13,
        GIF_RESOURCE = 14,
        PNG = 15,
        PNG_RESOURCE = 16,
        JPEG = 17,
        JPEG_RESOURCE = 18,
        PNM = 19,
        PNM_RESOURCE = 20,
        PCX = 21,
        PCX_RESOURCE = 22,
        PICT = 23,
        PICT_RESOURCE = 24,
        ICON = 25,
        ICON_RESOURCE = 26,
        ANI = 27,
        IFF = 28,
        TGA = 29,
        MACCURSOR = 30,
        MACCURSOR_RESOURCE = 31,
        MAX = 32,
        ANY = 50
    };

    enum class StockCursor : unsigned int
    {
        NONE = 0,
        ARROW = 1,
        RIGHT_ARROW = 2,
        BULLSEYE = 3,
        CHAR = 4,
        CROSS = 5,
        HAND = 6,
        IBEAM = 7,
        LEFT_BUTTON = 8,
        MAGNIFIER = 9,
        MIDDLE_BUTTON = 10,
        NO_ENTRY = 11,
        PAINT_BRUSH = 12,
        PENCIL = 13,
        POINT_LEFT = 14,
        POINT_RIGHT = 15,
        QUESTION_ARROW = 16,
        RIGHT_BUTTON = 17,
        SIZENESW = 18,
        SIZENS = 19,
        SIZENWSE = 20,
        SIZEWE = 21,
        SIZING = 22,
        SPRAYCAN = 23,
        WAIT = 24,
        WATCH = 25,
        BLANK = 26,
        DEFAULT = 27,
        ARROWWAIT = 28,
        MAX = 29
    };

    enum class PolygonFillMode : unsigned int
    {
        ODDEVEN_RULE = 1,
        WINDING_RULE = 2
    };

    enum class EllipsizeFlags : unsigned int
    {
        NONE = 0,
        PROCESS_MNEMONICS = 1,
        EXPAND_TABS = 2,
        DEFAULT = 3
    };

    enum class EllipsizeMode : unsigned int
    {
        NONE = 0,
        START = 1,
        MIDDLE = 2,
        END = 3
    };

    class Size
    {
    public:

        ::wxSize* __Instance;

        void* __ExternalInstance;

        Size(::wxSize* instance, bool ownNativeInstance = false);

        Size();

        Size(int xx, int yy);

        Size(const ::Ozone::Size& _0);

        ~Size();

        void IncTo(const ::Ozone::Size& sz);

        void DecTo(const ::Ozone::Size& sz);

        void DecToIfSpecified(const ::Ozone::Size& sz);

        void IncBy(int dx, int dy);

        void IncBy(const ::Ozone::Point& pt);

        void IncBy(const ::Ozone::Size& sz);

        void IncBy(int d);

        void DecBy(int dx, int dy);

        void DecBy(const ::Ozone::Point& pt);

        void DecBy(const ::Ozone::Size& sz);

        void DecBy(int d);

        void Set(int xx, int yy);

        void SetWidth(int w);

        void SetHeight(int h);

        int GetWidth() const;

        int GetHeight() const;

        bool IsFullySpecified() const;

        void SetDefaults(const ::Ozone::Size& size);

        int GetX() const;

        int GetY() const;

        int get_x();

        void set_x(int value);

        int get_y();

        void set_y(int value);

    protected:

        bool __OwnsNativeInstance;
    };

    class RealPoint
    {
    public:

        ::wxRealPoint* __Instance;

        void* __ExternalInstance;

        RealPoint(::wxRealPoint* instance, bool ownNativeInstance = false);

        RealPoint();

        RealPoint(double xx, double yy);

        RealPoint(const ::Ozone::Point& pt);

        RealPoint(const ::Ozone::RealPoint& _0);

        ~RealPoint();

        double get_x();

        void set_x(double value);

        double get_y();

        void set_y(double value);

    protected:

        bool __OwnsNativeInstance;
    };

    class Point
    {
    public:

        ::wxPoint* __Instance;

        void* __ExternalInstance;

        Point(::wxPoint* instance, bool ownNativeInstance = false);

        Point();

        Point(int xx, int yy);

        Point(const ::Ozone::RealPoint& pt);

        Point(const ::Ozone::Point& _0);

        ~Point();

        bool IsFullySpecified() const;

        void SetDefaults(const ::Ozone::Point& pt);

        int get_x();

        void set_x(int value);

        int get_y();

        void set_y(int value);

    protected:

        bool __OwnsNativeInstance;
    };

    class wxPointListNode
    {
    public:

        ::wxwxPointListNode* __Instance;

        void* __ExternalInstance;

        wxPointListNode(::wxwxPointListNode* instance, bool ownNativeInstance = false);

        ~wxPointListNode();

        ::Ozone::wxPointListNode* GetNext() const;

        ::Ozone::wxPointListNode* GetPrevious() const;

        ::Ozone::Point* GetData() const;

        void SetData(::Ozone::Point* data);

    protected:

        bool __OwnsNativeInstance;
    };

    class PointList
    {
    public:

        ::wxPointList* __Instance;

        void* __ExternalInstance;

        PointList(::wxPointList* instance, bool ownNativeInstance = false);

        PointList(::Ozone::KeyType keyType);

        PointList(const ::Ozone::PointList& list);

        explicit PointList(unsigned long n, ::Ozone::Point*const & v);

        ~PointList();

        ::Ozone::wxPointListNode* GetFirst() const;

        ::Ozone::wxPointListNode* GetLast() const;

        ::Ozone::wxPointListNode* Item(unsigned long index) const;

        ::Ozone::Point* operator[](unsigned long index) const;

        ::Ozone::wxPointListNode* Append(::Ozone::Point* object);

        ::Ozone::wxPointListNode* Insert(::Ozone::Point* object);

        ::Ozone::wxPointListNode* Insert(unsigned long pos, ::Ozone::Point* object);

        ::Ozone::wxPointListNode* Insert(::Ozone::wxPointListNode* prev, ::Ozone::Point* object);

        ::Ozone::wxPointListNode* Append(long key, void* object);

        ::Ozone::wxPointListNode* Append(wchar_t* key, void* object);

        ::Ozone::wxPointListNode* DetachNode(::Ozone::wxPointListNode* node);

        bool DeleteNode(::Ozone::wxPointListNode* node);

        bool DeleteObject(::Ozone::Point* object);

        void Erase(::Ozone::wxPointListNode* it);

        ::Ozone::wxPointListNode* Find(const ::Ozone::Point* object) const;

        bool Member(const ::Ozone::Point* object) const;

        int IndexOf(::Ozone::Point* object) const;

        void resize(unsigned long n, ::Ozone::Point* v);

        unsigned long size() const;

        unsigned long max_size() const;

        bool empty() const;

        void push_front(::Ozone::Point*const & v);

        void pop_front();

        void push_back(::Ozone::Point*const & v);

        void pop_back();

        void assign(unsigned long n, ::Ozone::Point*const & v);

        void clear();

        void remove(::Ozone::Point*const & v);

        void reverse();

    protected:

        bool __OwnsNativeInstance;
    };

    class Rect
    {
    public:

        ::wxRect* __Instance;

        void* __ExternalInstance;

        Rect(::wxRect* instance, bool ownNativeInstance = false);

        Rect();

        Rect(int xx, int yy, int ww, int hh);

        Rect(const ::Ozone::Point& topLeft, const ::Ozone::Point& bottomRight);

        Rect(const ::Ozone::Point& pt, const ::Ozone::Size& size);

        Rect(const ::Ozone::Size& size);

        Rect(const ::Ozone::Rect& _0);

        ~Rect();

        int GetX() const;

        void SetX(int xx);

        int GetY() const;

        void SetY(int yy);

        int GetWidth() const;

        void SetWidth(int w);

        int GetHeight() const;

        void SetHeight(int h);

        ::Ozone::Point GetPosition() const;

        void SetPosition(const ::Ozone::Point& p);

        ::Ozone::Size GetSize() const;

        void SetSize(const ::Ozone::Size& s);

        bool IsEmpty() const;

        int GetLeft() const;

        int GetTop() const;

        int GetBottom() const;

        int GetRight() const;

        void SetLeft(int left);

        void SetRight(int right);

        void SetTop(int top);

        void SetBottom(int bottom);

        ::Ozone::Point GetTopLeft() const;

        ::Ozone::Point GetLeftTop() const;

        void SetTopLeft(const ::Ozone::Point& p);

        void SetLeftTop(const ::Ozone::Point& p);

        ::Ozone::Point GetBottomRight() const;

        ::Ozone::Point GetRightBottom() const;

        void SetBottomRight(const ::Ozone::Point& p);

        void SetRightBottom(const ::Ozone::Point& p);

        ::Ozone::Point GetTopRight() const;

        ::Ozone::Point GetRightTop() const;

        void SetTopRight(const ::Ozone::Point& p);

        void SetRightTop(const ::Ozone::Point& p);

        ::Ozone::Point GetBottomLeft() const;

        ::Ozone::Point GetLeftBottom() const;

        void SetBottomLeft(const ::Ozone::Point& p);

        void SetLeftBottom(const ::Ozone::Point& p);

        ::Ozone::Rect Inflate(int dx, int dy) const;

        ::Ozone::Rect Deflate(int dx, int dy) const;

        void Offset(int dx, int dy);

        void Offset(const ::Ozone::Point& pt);

        ::Ozone::Rect Intersect(const ::Ozone::Rect& rect) const;

        ::Ozone::Rect Union(const ::Ozone::Rect& rect) const;

        bool Contains(int x, int y) const;

        bool Contains(const ::Ozone::Point& pt) const;

        bool Contains(const ::Ozone::Rect& rect) const;

        bool Intersects(const ::Ozone::Rect& rect) const;

        ::Ozone::Rect CentreIn(const ::Ozone::Rect& r, int dir) const;

        ::Ozone::Rect CenterIn(const ::Ozone::Rect& r, int dir) const;

        int get_x();

        void set_x(int value);

        int get_y();

        void set_y(int value);

        int get_width();

        void set_width(int value);

        int get_height();

        void set_height(int value);

    protected:

        bool __OwnsNativeInstance;
    };

    class GDIObjListBase
    {
    public:

        ::wxGDIObjListBase* __Instance;

        void* __ExternalInstance;

        GDIObjListBase(::wxGDIObjListBase* instance, bool ownNativeInstance = false);

        GDIObjListBase();

        GDIObjListBase(const ::Ozone::GDIObjListBase& _0);

        ~GDIObjListBase();

    protected:

        bool __OwnsNativeInstance;
    };

    class ColourDatabase
    {
    public:

        ::wxColourDatabase* __Instance;

        void* __ExternalInstance;

        ColourDatabase(::wxColourDatabase* instance, bool ownNativeInstance = false);

        ColourDatabase();

        ColourDatabase(const ::Ozone::ColourDatabase& _0);

        ~ColourDatabase();

        ::Ozone::Color Find(const char* name) const;

        const char* FindName(const ::Ozone::Color& colour) const;

        void AddColour(const char* name, const ::Ozone::Color& colour);

    protected:

        bool __OwnsNativeInstance;
    };

    class ResourceCache
    {
    public:

        ::wxResourceCache* __Instance;

        void* __ExternalInstance;

        ResourceCache(::wxResourceCache* instance, bool ownNativeInstance = false);

        ResourceCache();

        ResourceCache(unsigned int keyType);

        ResourceCache(const ::Ozone::ResourceCache& _0);

        ~ResourceCache();

    protected:

        bool __OwnsNativeInstance;
    };

    class StockGDI
    {
    public:

        enum class Item : unsigned int
        {
            BRUSH_BLACK = 0,
            BRUSH_BLUE = 1,
            BRUSH_CYAN = 2,
            BRUSH_GREEN = 3,
            BRUSH_YELLOW = 4,
            BRUSH_GREY = 5,
            BRUSH_LIGHTGREY = 6,
            BRUSH_MEDIUMGREY = 7,
            BRUSH_RED = 8,
            BRUSH_TRANSPARENT = 9,
            BRUSH_WHITE = 10,
            COLOUR_BLACK = 11,
            COLOUR_BLUE = 12,
            COLOUR_CYAN = 13,
            COLOUR_GREEN = 14,
            COLOUR_YELLOW = 15,
            COLOUR_LIGHTGREY = 16,
            COLOUR_RED = 17,
            COLOUR_WHITE = 18,
            CURSOR_CROSS = 19,
            CURSOR_HOURGLASS = 20,
            CURSOR_STANDARD = 21,
            FONT_ITALIC = 22,
            FONT_NORMAL = 23,
            FONT_SMALL = 24,
            FONT_SWISS = 25,
            PEN_BLACK = 26,
            PEN_BLACKDASHED = 27,
            PEN_BLUE = 28,
            PEN_CYAN = 29,
            PEN_GREEN = 30,
            PEN_YELLOW = 31,
            PEN_GREY = 32,
            PEN_LIGHTGREY = 33,
            PEN_MEDIUMGREY = 34,
            PEN_RED = 35,
            PEN_TRANSPARENT = 36,
            PEN_WHITE = 37,
            ITEMCOUNT = 38
        };

        ::wxStockGDI* __Instance;

        void* __ExternalInstance;

        StockGDI(::wxStockGDI* instance, bool ownNativeInstance = false);

        StockGDI();

        ~StockGDI();

        static void DeleteAll();

        static const ::Ozone::Brush* GetBrush(::Ozone::StockGDI::Item item);

        static const ::Ozone::Color* GetColour(::Ozone::StockGDI::Item item);

        static const ::Ozone::Pen* GetPen(::Ozone::StockGDI::Item item);

    protected:

        bool __OwnsNativeInstance;
    };

    bool operator==(const ::Ozone::Size& s1, const ::Ozone::Size& s2);
    bool operator!=(const ::Ozone::Size& s1, const ::Ozone::Size& s2);
    ::Ozone::Size operator+(const ::Ozone::Size& s1, const ::Ozone::Size& s2);
    ::Ozone::Size operator-(const ::Ozone::Size& s1, const ::Ozone::Size& s2);
    ::Ozone::Size operator/(const ::Ozone::Size& s, int i);
    ::Ozone::Size operator*(const ::Ozone::Size& s, int i);
    ::Ozone::Size operator*(int i, const ::Ozone::Size& s);
    ::Ozone::Size operator/(const ::Ozone::Size& s, unsigned int i);
    ::Ozone::Size operator*(const ::Ozone::Size& s, unsigned int i);
    ::Ozone::Size operator*(unsigned int i, const ::Ozone::Size& s);
    ::Ozone::Size operator/(const ::Ozone::Size& s, long i);
    ::Ozone::Size operator*(const ::Ozone::Size& s, long i);
    ::Ozone::Size operator*(long i, const ::Ozone::Size& s);
    ::Ozone::Size operator/(const ::Ozone::Size& s, unsigned long i);
    ::Ozone::Size operator*(const ::Ozone::Size& s, unsigned long i);
    ::Ozone::Size operator*(unsigned long i, const ::Ozone::Size& s);
    ::Ozone::Size operator*(const ::Ozone::Size& s, double i);
    ::Ozone::Size operator*(double i, const ::Ozone::Size& s);
    bool operator==(const ::Ozone::RealPoint& p1, const ::Ozone::RealPoint& p2);
    bool operator!=(const ::Ozone::RealPoint& p1, const ::Ozone::RealPoint& p2);
    ::Ozone::RealPoint operator+(const ::Ozone::RealPoint& p1, const ::Ozone::RealPoint& p2);
    ::Ozone::RealPoint operator-(const ::Ozone::RealPoint& p1, const ::Ozone::RealPoint& p2);
    ::Ozone::RealPoint operator/(const ::Ozone::RealPoint& s, int i);
    ::Ozone::RealPoint operator*(const ::Ozone::RealPoint& s, int i);
    ::Ozone::RealPoint operator*(int i, const ::Ozone::RealPoint& s);
    ::Ozone::RealPoint operator/(const ::Ozone::RealPoint& s, unsigned int i);
    ::Ozone::RealPoint operator*(const ::Ozone::RealPoint& s, unsigned int i);
    ::Ozone::RealPoint operator*(unsigned int i, const ::Ozone::RealPoint& s);
    ::Ozone::RealPoint operator/(const ::Ozone::RealPoint& s, long i);
    ::Ozone::RealPoint operator*(const ::Ozone::RealPoint& s, long i);
    ::Ozone::RealPoint operator*(long i, const ::Ozone::RealPoint& s);
    ::Ozone::RealPoint operator/(const ::Ozone::RealPoint& s, unsigned long i);
    ::Ozone::RealPoint operator*(const ::Ozone::RealPoint& s, unsigned long i);
    ::Ozone::RealPoint operator*(unsigned long i, const ::Ozone::RealPoint& s);
    ::Ozone::RealPoint operator*(const ::Ozone::RealPoint& s, double i);
    ::Ozone::RealPoint operator*(double i, const ::Ozone::RealPoint& s);
    bool operator==(const ::Ozone::Point& p1, const ::Ozone::Point& p2);
    bool operator!=(const ::Ozone::Point& p1, const ::Ozone::Point& p2);
    ::Ozone::Point operator+(const ::Ozone::Point& p1, const ::Ozone::Point& p2);
    ::Ozone::Point operator-(const ::Ozone::Point& p1, const ::Ozone::Point& p2);
    ::Ozone::Point operator+(const ::Ozone::Point& p, const ::Ozone::Size& s);
    ::Ozone::Point operator-(const ::Ozone::Point& p, const ::Ozone::Size& s);
    ::Ozone::Point operator+(const ::Ozone::Size& s, const ::Ozone::Point& p);
    ::Ozone::Point operator-(const ::Ozone::Size& s, const ::Ozone::Point& p);
    ::Ozone::Point operator-(const ::Ozone::Point& p);
    ::Ozone::Point operator/(const ::Ozone::Point& s, int i);
    ::Ozone::Point operator*(const ::Ozone::Point& s, int i);
    ::Ozone::Point operator*(int i, const ::Ozone::Point& s);
    ::Ozone::Point operator/(const ::Ozone::Point& s, unsigned int i);
    ::Ozone::Point operator*(const ::Ozone::Point& s, unsigned int i);
    ::Ozone::Point operator*(unsigned int i, const ::Ozone::Point& s);
    ::Ozone::Point operator/(const ::Ozone::Point& s, long i);
    ::Ozone::Point operator*(const ::Ozone::Point& s, long i);
    ::Ozone::Point operator*(long i, const ::Ozone::Point& s);
    ::Ozone::Point operator/(const ::Ozone::Point& s, unsigned long i);
    ::Ozone::Point operator*(const ::Ozone::Point& s, unsigned long i);
    ::Ozone::Point operator*(unsigned long i, const ::Ozone::Point& s);
    ::Ozone::Point operator*(const ::Ozone::Point& s, double i);
    ::Ozone::Point operator*(double i, const ::Ozone::Point& s);
    bool operator==(const ::Ozone::Rect& r1, const ::Ozone::Rect& r2);
    bool operator!=(const ::Ozone::Rect& r1, const ::Ozone::Rect& r2);
    ::Ozone::Rect operator+(const ::Ozone::Rect& r1, const ::Ozone::Rect& r2);
    ::Ozone::Rect operator*(const ::Ozone::Rect& r1, const ::Ozone::Rect& r2);
    void InitializeStockLists();
    void DeleteStockLists();
    bool ColourDisplay();
    int DisplayDepth();
    void DisplaySize(int* width, int* height);
    ::Ozone::Size GetDisplaySize();
    void DisplaySizeMM(int* width, int* height);
    ::Ozone::Size GetDisplaySizeMM();
    ::Ozone::Size GetDisplayPPI();
    void ClientDisplayRect(int* x, int* y, int* width, int* height);
    ::Ozone::Rect GetClientDisplayRect();

    // ::Ozone::Size DefaultSize

    // ::Ozone::Point DefaultPosition

    // char[] PanelNameStr

    // ::Ozone::Pen NullPen

    // ::Ozone::Brush NullBrush

    // ::Ozone::Color NullColour
}
