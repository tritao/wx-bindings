// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include "FastDelegates.h"
#include <wx/graphics.h>
#include "ozone/brush.h"
#include "ozone/colour.h"
#include "ozone/gdicmn.h"
#include "ozone/object.h"
#include "ozone/pen.h"

namespace Ozone
{
    class DC;
    class GraphicsBitmap;
    class GraphicsBrush;
    class GraphicsContext;
    class GraphicsFont;
    class GraphicsGradientStop;
    class GraphicsGradientStops;
    class GraphicsMatrix;
    class GraphicsObject;
    class GraphicsPath;
    class GraphicsPen;
    class GraphicsPenInfo;
    class GraphicsRenderer;
    class RefCounter;
    class Window;
    class WindowDC;
    enum class AntialiasMode : unsigned int;
    enum class CompositionMode;
    enum class GradientType : unsigned int;
    enum class InterpolationQuality : unsigned int;
    enum class PenCap;
    enum class PenJoin;
    enum class PenStyle;
    enum class PolygonFillMode : unsigned int;
}

namespace Ozone
{
    enum class GradientType : unsigned int
    {
        NONE = 0,
        LINEAR = 1,
        RADIAL = 2
    };

    enum class AntialiasMode : unsigned int
    {
        NONE = 0,
        DEFAULT = 1
    };

    enum class CompositionMode
    {
        INVALID = -1,
        CLEAR = 0,
        SOURCE = 1,
        OVER = 2,
        IN = 3,
        OUT = 4,
        ATOP = 5,
        DEST = 6,
        DEST_OVER = 7,
        DEST_IN = 8,
        DEST_OUT = 9,
        DEST_ATOP = 10,
        XOR = 11,
        ADD = 12
    };

    enum class InterpolationQuality : unsigned int
    {
        DEFAULT = 0,
        NONE = 1,
        FAST = 2,
        GOOD = 3,
        BEST = 4
    };

    class GraphicsObject : public Ozone::Object
    {
    public:

        GraphicsObject(::wxGraphicsObject* instance, bool ownNativeInstance = false);

        GraphicsObject();

        GraphicsObject(::Ozone::GraphicsRenderer* renderer);

        GraphicsObject(const ::Ozone::GraphicsObject& _0);

        ~GraphicsObject();

        bool IsNull() const;

        ::Ozone::GraphicsRenderer* GetRenderer() const;
    };

    class GraphicsPen : public Ozone::GraphicsObject
    {
    public:

        GraphicsPen(::wxGraphicsPen* instance, bool ownNativeInstance = false);

        GraphicsPen();

        GraphicsPen(const ::Ozone::GraphicsPen& _0);

        ~GraphicsPen();
    };

    class GraphicsBrush : public Ozone::GraphicsObject
    {
    public:

        GraphicsBrush(::wxGraphicsBrush* instance, bool ownNativeInstance = false);

        GraphicsBrush();

        GraphicsBrush(const ::Ozone::GraphicsBrush& _0);

        ~GraphicsBrush();
    };

    class GraphicsFont : public Ozone::GraphicsObject
    {
    public:

        GraphicsFont(::wxGraphicsFont* instance, bool ownNativeInstance = false);

        GraphicsFont();

        GraphicsFont(const ::Ozone::GraphicsFont& _0);

        ~GraphicsFont();
    };

    class GraphicsBitmap : public Ozone::GraphicsObject
    {
    public:

        GraphicsBitmap(::wxGraphicsBitmap* instance, bool ownNativeInstance = false);

        GraphicsBitmap();

        GraphicsBitmap(const ::Ozone::GraphicsBitmap& _0);

        ~GraphicsBitmap();

        void* GetNativeBitmap() const;
    };

    class GraphicsMatrix : public Ozone::GraphicsObject
    {
    public:

        GraphicsMatrix(::wxGraphicsMatrix* instance, bool ownNativeInstance = false);

        GraphicsMatrix();

        GraphicsMatrix(const ::Ozone::GraphicsMatrix& _0);

        ~GraphicsMatrix();

        void Concat(const ::Ozone::GraphicsMatrix& t);

        virtual void Set(double a, double b, double c, double d, double tx, double ty);

        virtual void Get(double* a, double* b, double* c, double* d, double* tx, double* ty) const;

        virtual void Invert();

        bool IsEqual(const ::Ozone::GraphicsMatrix& t) const;

        virtual bool IsIdentity() const;

        virtual void Translate(double dx, double dy);

        virtual void Scale(double xScale, double yScale);

        virtual void Rotate(double angle);

        virtual void TransformPoint(double* x, double* y) const;

        virtual void TransformDistance(double* dx, double* dy) const;

        virtual void* GetNativeMatrix() const;
    };

    class GraphicsGradientStop
    {
    public:

        ::wxGraphicsGradientStop* __Instance;

        void* __ExternalInstance;

        GraphicsGradientStop(::wxGraphicsGradientStop* instance, bool ownNativeInstance = false);

        GraphicsGradientStop(::Ozone::Color col, float pos);

        GraphicsGradientStop(const ::Ozone::GraphicsGradientStop& _0);

        ~GraphicsGradientStop();

        void SetColour(const ::Ozone::Color& col);

        float GetPosition() const;

        void SetPosition(float pos);

    protected:

        bool __OwnsNativeInstance;
    };

    class GraphicsGradientStops
    {
    public:

        ::wxGraphicsGradientStops* __Instance;

        void* __ExternalInstance;

        GraphicsGradientStops(::wxGraphicsGradientStops* instance, bool ownNativeInstance = false);

        GraphicsGradientStops(::Ozone::Color startCol, ::Ozone::Color endCol);

        GraphicsGradientStops(const ::Ozone::GraphicsGradientStops& _0);

        ~GraphicsGradientStops();

        void Add(const ::Ozone::GraphicsGradientStop& stop);

        void Add(::Ozone::Color col, float pos);

        unsigned long GetCount() const;

        ::Ozone::GraphicsGradientStop Item(unsigned int n) const;

        void SetStartColour(::Ozone::Color col);

        ::Ozone::Color GetStartColour() const;

        void SetEndColour(::Ozone::Color col);

        ::Ozone::Color GetEndColour() const;

    protected:

        bool __OwnsNativeInstance;
    };

    class GraphicsPenInfo
    {
    public:

        ::wxGraphicsPenInfo* __Instance;

        void* __ExternalInstance;

        GraphicsPenInfo(::wxGraphicsPenInfo* instance, bool ownNativeInstance = false);

        explicit GraphicsPenInfo(const ::Ozone::Color& colour, double width, ::Ozone::PenStyle style);

        GraphicsPenInfo(const ::Ozone::GraphicsPenInfo& _0);

        ~GraphicsPenInfo();

        double GetWidth() const;

        ::Ozone::GradientType GetGradientType() const;

        double GetX1() const;

        double GetY1() const;

        double GetX2() const;

        double GetY2() const;

        double GetStartX() const;

        double GetStartY() const;

        double GetEndX() const;

        double GetEndY() const;

        double GetRadius() const;

        ::Ozone::Color GetColour() const;

        ::Ozone::PenStyle GetStyle() const;

        ::Ozone::PenJoin GetJoin() const;

        ::Ozone::PenCap GetCap() const;

        int GetDashes(signed char** ptr) const;

        int GetDashCount() const;

        signed char* GetDash() const;

        bool IsTransparent() const;

    protected:

        bool __OwnsNativeInstance;
    };

    class GraphicsPath : public Ozone::GraphicsObject
    {
    public:

        GraphicsPath(::wxGraphicsPath* instance, bool ownNativeInstance = false);

        GraphicsPath();

        GraphicsPath(const ::Ozone::GraphicsPath& _0);

        ~GraphicsPath();

        virtual void MoveToPoint(double x, double y);

        virtual void AddLineToPoint(double x, double y);

        virtual void AddCurveToPoint(double cx1, double cy1, double cx2, double cy2, double x, double y);

        virtual void AddPath(const ::Ozone::GraphicsPath& path);

        virtual void CloseSubpath();

        virtual void GetCurrentPoint(double* x, double* y) const;

        virtual void AddArc(double x, double y, double r, double startAngle, double endAngle, bool clockwise);

        virtual void AddQuadCurveToPoint(double cx, double cy, double x, double y);

        virtual void AddRectangle(double x, double y, double w, double h);

        virtual void AddCircle(double x, double y, double r);

        virtual void AddArcToPoint(double x1, double y1, double x2, double y2, double r);

        virtual void AddEllipse(double x, double y, double w, double h);

        virtual void AddRoundedRectangle(double x, double y, double w, double h, double radius);

        virtual void* GetNativePath() const;

        virtual void UnGetNativePath(void* p) const;

        virtual void Transform(const ::Ozone::GraphicsMatrix& matrix);

        virtual void GetBox(double* x, double* y, double* w, double* h) const;

        virtual bool Contains(double x, double y, ::Ozone::PolygonFillMode fillStyle) const;
    };

    class GraphicsContext : public Ozone::GraphicsObject
    {
    public:

        GraphicsContext(::wxGraphicsContext* instance, bool ownNativeInstance = false);

        GraphicsContext(::Ozone::GraphicsRenderer* renderer, ::Ozone::Window* window);

        ~GraphicsContext();

        ::Ozone::Window* GetWindow() const;

        virtual bool StartDoc(const char* message);

        virtual void EndDoc();

        virtual void StartPage(double width, double height);

        virtual void EndPage();

        virtual void Flush();

        ::Ozone::GraphicsPath CreatePath() const;

        ::Ozone::GraphicsPen CreatePen(const ::Ozone::Pen& pen) const;

        ::Ozone::GraphicsPen CreatePen(const ::Ozone::GraphicsPenInfo& info) const;

        virtual ::Ozone::GraphicsBrush CreateBrush(const ::Ozone::Brush& brush) const;

        ::Ozone::GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, const ::Ozone::Color& c1, const ::Ozone::Color& c2, const ::Ozone::GraphicsMatrix& matrix) const;

        ::Ozone::GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, const ::Ozone::GraphicsGradientStops& stops, const ::Ozone::GraphicsMatrix& matrix) const;

        ::Ozone::GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, const ::Ozone::Color& oColor, const ::Ozone::Color& cColor, const ::Ozone::GraphicsMatrix& matrix) const;

        ::Ozone::GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, const ::Ozone::GraphicsGradientStops& stops, const ::Ozone::GraphicsMatrix& matrix) const;

        virtual ::Ozone::GraphicsFont CreateFont(double sizeInPixels, const char* facename, int flags, const ::Ozone::Color& col) const;

        virtual ::Ozone::GraphicsBitmap CreateSubBitmap(const ::Ozone::GraphicsBitmap& bitmap, double x, double y, double w, double h) const;

        virtual ::Ozone::GraphicsMatrix CreateMatrix(double a, double b, double c, double d, double tx, double ty) const;

        virtual void PushState();

        virtual void PopState();

        virtual void Clip(double x, double y, double w, double h);

        virtual void ResetClip();

        virtual void GetClipBox(double* x, double* y, double* w, double* h);

        virtual void* GetNativeContext();

        virtual ::Ozone::AntialiasMode GetAntialiasMode() const;

        virtual bool SetAntialiasMode(::Ozone::AntialiasMode antialias);

        virtual ::Ozone::InterpolationQuality GetInterpolationQuality() const;

        virtual bool SetInterpolationQuality(::Ozone::InterpolationQuality interpolation);

        virtual ::Ozone::CompositionMode GetCompositionMode() const;

        virtual bool SetCompositionMode(::Ozone::CompositionMode op);

        void GetSize(double* width, double* height) const;

        virtual void GetDPI(double* dpiX, double* dpiY) const;

        virtual void BeginLayer(double opacity);

        virtual void EndLayer();

        virtual void Translate(double dx, double dy);

        virtual void Scale(double xScale, double yScale);

        virtual void Rotate(double angle);

        virtual void ConcatTransform(const ::Ozone::GraphicsMatrix& matrix);

        virtual void SetTransform(const ::Ozone::GraphicsMatrix& matrix);

        virtual ::Ozone::GraphicsMatrix GetTransform() const;

        virtual void SetPen(const ::Ozone::GraphicsPen& pen);

        void SetPen(const ::Ozone::Pen& pen);

        virtual void SetBrush(const ::Ozone::GraphicsBrush& brush);

        void SetBrush(const ::Ozone::Brush& brush);

        virtual void SetFont(const ::Ozone::GraphicsFont& font);

        virtual void StrokePath(const ::Ozone::GraphicsPath& path);

        virtual void FillPath(const ::Ozone::GraphicsPath& path, ::Ozone::PolygonFillMode fillStyle);

        virtual void DrawPath(const ::Ozone::GraphicsPath& path, ::Ozone::PolygonFillMode fillStyle);

        virtual void ClearRectangle(double x, double y, double w, double h);

        void DrawText(const char* str, double x, double y);

        void DrawText(const char* str, double x, double y, double angle);

        void DrawText(const char* str, double x, double y, const ::Ozone::GraphicsBrush& backgroundBrush);

        void DrawText(const char* str, double x, double y, double angle, const ::Ozone::GraphicsBrush& backgroundBrush);

        virtual void GetTextExtent(const char* text, double* width, double* height, double* descent, double* externalLeading) const;

        virtual void DrawBitmap(const ::Ozone::GraphicsBitmap& bmp, double x, double y, double w, double h);

        virtual void StrokeLine(double x1, double y1, double x2, double y2);

        virtual void DrawRectangle(double x, double y, double w, double h);

        virtual void DrawEllipse(double x, double y, double w, double h);

        virtual void DrawRoundedRectangle(double x, double y, double w, double h, double radius);

        virtual bool ShouldOffset() const;

        virtual void EnableOffset(bool enable);

        void DisableOffset();

        bool OffsetEnabled();

        static ::Ozone::GraphicsContext* Create(const ::Ozone::WindowDC& dc);

        static ::Ozone::GraphicsContext* CreateFromUnknownDC(const ::Ozone::DC& dc);

        static ::Ozone::GraphicsContext* CreateFromNative(void* context);

        static ::Ozone::GraphicsContext* CreateFromNativeWindow(void* window);

        static ::Ozone::GraphicsContext* Create(::Ozone::Window* window);

        static ::Ozone::GraphicsContext* Create();
    };

    class GraphicsRenderer : public Ozone::Object
    {
    public:

        GraphicsRenderer(::wxGraphicsRenderer* instance, bool ownNativeInstance = false);

        GraphicsRenderer();

        ~GraphicsRenderer();

        virtual ::Ozone::GraphicsContext* CreateContext(const ::Ozone::WindowDC& dc);

        ::Ozone::GraphicsContext* CreateContextFromUnknownDC(const ::Ozone::DC& dc);

        virtual ::Ozone::GraphicsContext* CreateContextFromNativeContext(void* context);

        virtual ::Ozone::GraphicsContext* CreateContextFromNativeWindow(void* window);

        virtual ::Ozone::GraphicsContext* CreateContext(::Ozone::Window* window);

        virtual ::Ozone::GraphicsContext* CreateMeasuringContext();

        virtual ::Ozone::GraphicsPath CreatePath();

        virtual ::Ozone::GraphicsMatrix CreateMatrix(double a, double b, double c, double d, double tx, double ty);

        virtual ::Ozone::GraphicsPen CreatePen(const ::Ozone::GraphicsPenInfo& info);

        virtual ::Ozone::GraphicsBrush CreateBrush(const ::Ozone::Brush& brush);

        virtual ::Ozone::GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, const ::Ozone::GraphicsGradientStops& stops, const ::Ozone::GraphicsMatrix& matrix);

        virtual ::Ozone::GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, const ::Ozone::GraphicsGradientStops& stops, const ::Ozone::GraphicsMatrix& matrix);

        virtual ::Ozone::GraphicsFont CreateFont(double sizeInPixels, const char* facename, int flags, const ::Ozone::Color& col);

        virtual ::Ozone::GraphicsBitmap CreateBitmapFromNativeBitmap(void* bitmap);

        virtual ::Ozone::GraphicsBitmap CreateSubBitmap(const ::Ozone::GraphicsBitmap& bitmap, double x, double y, double w, double h);

        virtual const char* GetName() const;

        virtual void GetVersion(int* major, int* minor, int* micro) const;

        static ::Ozone::GraphicsRenderer* GetDefaultRenderer();

        static ::Ozone::GraphicsRenderer* GetCairoRenderer();
    };
}
