// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "ozone/object.h"
#include "ozone/object.h"

#include <wx/eventfilter.h>

Ozone::RefCounter::RefCounter(::wxRefCounter* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

Ozone::RefCounter::RefCounter()
{
    __ownsNativeInstance = true;
    __Instance = new ::wxRefCounter();
}

int Ozone::RefCounter::GetRefCount() const
{
    int __ret = ((::wxRefCounter*)__Instance)->GetRefCount();
    return __ret;
}

void Ozone::RefCounter::IncRef()
{
    ((::wxRefCounter*)__Instance)->IncRef();
}

void Ozone::RefCounter::DecRef()
{
    ((::wxRefCounter*)__Instance)->DecRef();
}

Ozone::Object::Object(::wxObject* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

Ozone::Object::~Object()
{
}

Ozone::Object::Object()
{
    __ownsNativeInstance = true;
    __Instance = new ::wxObject();
}

Ozone::Object::Object(const ::Ozone::Object& other)
{
    __ownsNativeInstance = true;
    auto &__arg0 = *(::wxObject*)other.__Instance;
    __Instance = new ::wxObject(__arg0);
}

::Ozone::RefCounter* Ozone::Object::GetRefData() const
{
    ::wxObjectRefData* __ret = ((::wxObject*)__Instance)->GetRefData();
    return (__ret == nullptr) ? nullptr : new Ozone::RefCounter((::wxRefCounter*)__ret);
}

void Ozone::Object::SetRefData(::Ozone::RefCounter* data)
{
    auto __arg0 = data ? (::wxRefCounter*)data->__Instance : nullptr;
    ((::wxObject*)__Instance)->SetRefData(__arg0);
}

void Ozone::Object::Ref(const ::Ozone::Object& clone)
{
    auto &__arg0 = *(::wxObject*)clone.__Instance;
    ((::wxObject*)__Instance)->Ref(__arg0);
}

void Ozone::Object::UnRef()
{
    ((::wxObject*)__Instance)->UnRef();
}

void Ozone::Object::UnShare()
{
    ((::wxObject*)__Instance)->UnShare();
}

bool Ozone::Object::IsSameAs(const ::Ozone::Object& o) const
{
    auto &__arg0 = *(::wxObject*)o.__Instance;
    bool __ret = ((::wxObject*)__Instance)->IsSameAs(__arg0);
    return __ret;
}

