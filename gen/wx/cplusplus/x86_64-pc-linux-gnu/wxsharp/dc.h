// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include "FastDelegates.h"
#include <wx/dc.h>
#include "wxsharp/object.h"

namespace wxSharp
{
    class Brush;
    class ClientDC;
    class Color;
    class DC;
    class FontMetrics;
    class GraphicsContext;
    class PaintDC;
    class Pen;
    class Point;
    class PointList;
    class Rect;
    class Size;
    class Window;
    class WindowDC;
    enum class Direction : unsigned int;
    enum class FloodFillStyle : unsigned int;
    enum class MappingMode : unsigned int;
    enum class PolygonFillMode : unsigned int;
    enum class RasterOperationMode : unsigned int;
}

namespace wxSharp
{
    enum class RasterOperationMode : unsigned int
    {
        CLEAR = 0,
        XOR = 1,
        INVERT = 2,
        OR_REVERSE = 3,
        AND_REVERSE = 4,
        COPY = 5,
        AND = 6,
        AND_INVERT = 7,
        NO_OP = 8,
        NOR = 9,
        EQUIV = 10,
        SRC_INVERT = 11,
        OR_INVERT = 12,
        NAND = 13,
        OR = 14,
        SET = 15
    };

    enum class MappingMode : unsigned int
    {
        MM_TEXT = 1,
        MM_METRIC = 2,
        MM_LOMETRIC = 3,
        MM_TWIPS = 4,
        MM_POINTS = 5
    };

    enum class FloodFillStyle : unsigned int
    {
        FLOOD_SURFACE = 1,
        FLOOD_BORDER = 2
    };

    class FontMetrics
    {
    public:

        ::wxFontMetrics* __Instance;

        FontMetrics(::wxFontMetrics* instance, bool ownNativeInstance = false);

        FontMetrics();

        FontMetrics(const ::wxSharp::FontMetrics& _0);

        ~FontMetrics();

        int get_height();

        void set_height(int value);

        int get_ascent();

        void set_ascent(int value);

        int get_descent();

        void set_descent(int value);

        int get_internalLeading();

        void set_internalLeading(int value);

        int get_externalLeading();

        void set_externalLeading(int value);

        int get_averageWidth();

        void set_averageWidth(int value);

    protected:
        bool __ownsNativeInstance;
    };

    class DC : public wxSharp::Object
    {
    public:

        DC(::wxDC* instance, bool ownNativeInstance = false);

        ~DC();

        virtual int GetResolution() const;

        virtual ::wxSharp::GraphicsContext* GetGraphicsContext() const;

        virtual void SetGraphicsContext(::wxSharp::GraphicsContext* ctx);

        void CopyAttributes(const ::wxSharp::DC& dc);

        ::wxSharp::Window* GetWindow() const;

        void* GetHandle() const;

        bool IsOk() const;

        bool CanDrawBitmap() const;

        bool CanGetTextExtent() const;

        void GetSize(int* width, int* height) const;

        ::wxSharp::Size GetSize() const;

        void GetSizeMM(int* width, int* height) const;

        ::wxSharp::Size GetSizeMM() const;

        int GetDepth() const;

        ::wxSharp::Size GetPPI() const;

        double GetContentScaleFactor() const;

        bool StartDoc(const char* message);

        void EndDoc();

        void StartPage();

        void EndPage();

        void CalcBoundingBox(int x, int y);

        void ResetBoundingBox();

        int MinX() const;

        int MaxX() const;

        int MinY() const;

        int MaxY() const;

        void SetPen(const ::wxSharp::Pen& pen);

        void SetBrush(const ::wxSharp::Brush& brush);

        void SetBackground(const ::wxSharp::Brush& brush);

        void SetBackgroundMode(int mode);

        int GetBackgroundMode() const;

        void SetTextForeground(const ::wxSharp::Color& colour);

        void SetTextBackground(const ::wxSharp::Color& colour);

        void SetLogicalFunction(::wxSharp::RasterOperationMode function);

        ::wxSharp::RasterOperationMode GetLogicalFunction() const;

        int GetCharHeight() const;

        int GetCharWidth() const;

        ::wxSharp::FontMetrics GetFontMetrics() const;

        ::wxSharp::Size GetTextExtent(const char* string) const;

        ::wxSharp::Size GetMultiLineTextExtent(const char* string) const;

        void Clear();

        void SetClippingRegion(int x, int y, int width, int height);

        void SetClippingRegion(const ::wxSharp::Point& pt, const ::wxSharp::Size& sz);

        void SetClippingRegion(const ::wxSharp::Rect& rect);

        void DestroyClippingRegion();

        bool GetClippingBox(int* x, int* y, int* w, int* h) const;

        bool GetClippingBox(::wxSharp::Rect& rect) const;

        int DeviceToLogicalX(int x) const;

        int DeviceToLogicalY(int y) const;

        int DeviceToLogicalXRel(int x) const;

        int DeviceToLogicalYRel(int y) const;

        ::wxSharp::Point DeviceToLogical(const ::wxSharp::Point& pt) const;

        ::wxSharp::Point DeviceToLogical(int x, int y) const;

        ::wxSharp::Size DeviceToLogicalRel(const ::wxSharp::Size& dim) const;

        ::wxSharp::Size DeviceToLogicalRel(int x, int y) const;

        int LogicalToDeviceX(int x) const;

        int LogicalToDeviceY(int y) const;

        int LogicalToDeviceXRel(int x) const;

        int LogicalToDeviceYRel(int y) const;

        ::wxSharp::Point LogicalToDevice(const ::wxSharp::Point& pt) const;

        ::wxSharp::Point LogicalToDevice(int x, int y) const;

        ::wxSharp::Size LogicalToDeviceRel(const ::wxSharp::Size& dim) const;

        ::wxSharp::Size LogicalToDeviceRel(int x, int y) const;

        void SetMapMode(::wxSharp::MappingMode mode);

        ::wxSharp::MappingMode GetMapMode() const;

        void SetUserScale(double x, double y);

        void GetUserScale(double* x, double* y) const;

        void SetLogicalScale(double x, double y);

        void GetLogicalScale(double* x, double* y) const;

        void SetLogicalOrigin(int x, int y);

        void GetLogicalOrigin(int* x, int* y) const;

        ::wxSharp::Point GetLogicalOrigin() const;

        void SetDeviceOrigin(int x, int y);

        void GetDeviceOrigin(int* x, int* y) const;

        ::wxSharp::Point GetDeviceOrigin() const;

        void SetAxisOrientation(bool xLeftRight, bool yBottomUp);

        bool CanUseTransformMatrix() const;

        void ResetTransformMatrix();

        void SetDeviceLocalOrigin(int x, int y);

        bool FloodFill(int x, int y, const ::wxSharp::Color& col, ::wxSharp::FloodFillStyle style);

        bool FloodFill(const ::wxSharp::Point& pt, const ::wxSharp::Color& col, ::wxSharp::FloodFillStyle style);

        void GradientFillConcentric(const ::wxSharp::Rect& rect, const ::wxSharp::Color& initialColour, const ::wxSharp::Color& destColour);

        void GradientFillConcentric(const ::wxSharp::Rect& rect, const ::wxSharp::Color& initialColour, const ::wxSharp::Color& destColour, const ::wxSharp::Point& circleCenter);

        void GradientFillLinear(const ::wxSharp::Rect& rect, const ::wxSharp::Color& initialColour, const ::wxSharp::Color& destColour, ::wxSharp::Direction nDirection);

        bool GetPixel(int x, int y, ::wxSharp::Color* col) const;

        bool GetPixel(const ::wxSharp::Point& pt, ::wxSharp::Color* col) const;

        void DrawLine(int x1, int y1, int x2, int y2);

        void DrawLine(const ::wxSharp::Point& pt1, const ::wxSharp::Point& pt2);

        void CrossHair(int x, int y);

        void CrossHair(const ::wxSharp::Point& pt);

        void DrawArc(int x1, int y1, int x2, int y2, int xc, int yc);

        void DrawArc(const ::wxSharp::Point& pt1, const ::wxSharp::Point& pt2, const ::wxSharp::Point& centre);

        void DrawCheckMark(int x, int y, int width, int height);

        void DrawCheckMark(const ::wxSharp::Rect& rect);

        void DrawEllipticArc(int x, int y, int w, int h, double sa, double ea);

        void DrawEllipticArc(const ::wxSharp::Point& pt, const ::wxSharp::Size& sz, double sa, double ea);

        void DrawPoint(int x, int y);

        void DrawPoint(const ::wxSharp::Point& pt);

        void DrawLines(int n, ::wxSharp::Point points[], int xoffset, int yoffset);

        void DrawLines(const ::wxSharp::PointList* list, int xoffset, int yoffset);

        void DrawPolygon(int n, ::wxSharp::Point points[], int xoffset, int yoffset, ::wxSharp::PolygonFillMode fillStyle);

        void DrawPolygon(const ::wxSharp::PointList* list, int xoffset, int yoffset, ::wxSharp::PolygonFillMode fillStyle);

        void DrawPolyPolygon(int n, int count[], ::wxSharp::Point points[], int xoffset, int yoffset, ::wxSharp::PolygonFillMode fillStyle);

        void DrawRectangle(int x, int y, int width, int height);

        void DrawRectangle(const ::wxSharp::Point& pt, const ::wxSharp::Size& sz);

        void DrawRectangle(const ::wxSharp::Rect& rect);

        void DrawRoundedRectangle(int x, int y, int width, int height, double radius);

        void DrawRoundedRectangle(const ::wxSharp::Point& pt, const ::wxSharp::Size& sz, double radius);

        void DrawRoundedRectangle(const ::wxSharp::Rect& r, double radius);

        void DrawCircle(int x, int y, int radius);

        void DrawCircle(const ::wxSharp::Point& pt, int radius);

        void DrawEllipse(int x, int y, int width, int height);

        void DrawEllipse(const ::wxSharp::Point& pt, const ::wxSharp::Size& sz);

        void DrawEllipse(const ::wxSharp::Rect& rect);

        void DrawText(const char* text, int x, int y);

        void DrawText(const char* text, const ::wxSharp::Point& pt);

        void DrawRotatedText(const char* text, int x, int y, double angle);

        void DrawRotatedText(const char* text, const ::wxSharp::Point& pt, double angle);

        void DrawLabel(const char* text, const ::wxSharp::Rect& rect, int alignment, int indexAccel);

        bool Blit(int xdest, int ydest, int width, int height, ::wxSharp::DC* source, int xsrc, int ysrc, ::wxSharp::RasterOperationMode rop, bool useMask, int xsrcMask, int ysrcMask);

        bool Blit(const ::wxSharp::Point& destPt, const ::wxSharp::Size& sz, ::wxSharp::DC* source, const ::wxSharp::Point& srcPt, ::wxSharp::RasterOperationMode rop, bool useMask, const ::wxSharp::Point& srcPtMask);

        bool StretchBlit(int dstX, int dstY, int dstWidth, int dstHeight, ::wxSharp::DC* source, int srcX, int srcY, int srcWidth, int srcHeight, ::wxSharp::RasterOperationMode rop, bool useMask, int srcMaskX, int srcMaskY);

        bool StretchBlit(const ::wxSharp::Point& dstPt, const ::wxSharp::Size& dstSize, ::wxSharp::DC* source, const ::wxSharp::Point& srcPt, const ::wxSharp::Size& srcSize, ::wxSharp::RasterOperationMode rop, bool useMask, const ::wxSharp::Point& srcMaskPt);

        void DrawSpline(int x1, int y1, int x2, int y2, int x3, int y3);

        void DrawSpline(int n, ::wxSharp::Point points[]);

        void DrawSpline(const ::wxSharp::PointList* points);
    };
}
