// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include "FastDelegates.h"
#include <wx/event.h>
#include "wxsharp/object.h"

namespace wxSharp
{
    class ActivateEvent;
    class AsyncMethodCallEvent;
    class ChildFocusEvent;
    class ClipboardTextEvent;
    class CloseEvent;
    class CommandEvent;
    class ContextMenuEvent;
    class DC;
    class DPIChangedEvent;
    class DisplayChangedEvent;
    class EraseEvent;
    class Event;
    class EventTypeTag;
    class EvtHandler;
    class FocusEvent;
    class GestureEvent;
    class HelpEvent;
    class IconizeEvent;
    class IdleEvent;
    class InitDialogEvent;
    class JoystickEvent;
    class KeyEvent;
    class LongPressEvent;
    class MaximizeEvent;
    class MenuEvent;
    class MouseCaptureChangedEvent;
    class MouseCaptureLostEvent;
    class MouseEvent;
    class MoveEvent;
    class NavigationKeyEvent;
    class NcPaintEvent;
    class NotifyEvent;
    class PaintEvent;
    class PaletteChangedEvent;
    class PanGestureEvent;
    class Point;
    class PressAndTapEvent;
    class PropagateOnce;
    class QueryNewPaletteEvent;
    class Rect;
    class RotateGestureEvent;
    class ScrollEvent;
    class ScrollWinEvent;
    class SetCursorEvent;
    class ShowEvent;
    class Size;
    class SizeEvent;
    class SysColourChangedEvent;
    class ThreadEvent;
    class TwoFingerTapEvent;
    class UpdateUIEvent;
    class Window;
    class WindowCreateEvent;
    class WindowDestroyEvent;
    class ZoomGestureEvent;
    enum class EventCategory : unsigned int;
    enum class EventPropagation : unsigned int;
    enum class IdleMode : unsigned int;
    enum class JoystickButton;
    enum class JoystickId : unsigned int;
    enum class KeyCategoryFlags : unsigned int;
    enum class MouseWheelAxis : unsigned int;
    enum class UpdateUIMode : unsigned int;
    namespace Private
    {
        class EventClassOf;
    }
}

namespace wxSharp
{
    enum class EventCategory : unsigned int
    {
        UI = 1,
        USER_INPUT = 2,
        SOCKET = 4,
        TIMER = 8,
        THREAD = 16,
        UNKNOWN = 32,
        CLIPBOARD = 64,
        NATIVE_EVENTS = 3,
        ALL = 127
    };

    enum class UpdateUIMode : unsigned int
    {
        PROCESS_ALL = 0,
        PROCESS_SPECIFIED = 1
    };

    enum class MouseWheelAxis : unsigned int
    {
        VERTICAL = 0,
        HORIZONTAL = 1
    };

    enum class IdleMode : unsigned int
    {
        PROCESS_ALL = 0,
        PROCESS_SPECIFIED = 1
    };

    enum class JoystickId : unsigned int
    {
        JOYSTICK1 = 0,
        JOYSTICK2 = 1
    };

    enum class JoystickButton
    {
        BUTTON_ANY = -1,
        BUTTON1 = 1,
        BUTTON2 = 2,
        BUTTON3 = 4,
        BUTTON4 = 8
    };

    enum class EventPropagation : unsigned int
    {
        NONE = 0,
        MAX = 2147483647
    };

    enum class KeyCategoryFlags : unsigned int
    {
        CATEGORY_ARROW = 1,
        CATEGORY_PAGING = 2,
        CATEGORY_JUMP = 4,
        CATEGORY_TAB = 8,
        CATEGORY_CUT = 16,
        CATEGORY_NAVIGATION = 7
    };

    class Event : public wxSharp::Object
    {
    public:

        Event(::wxEvent* instance, bool ownNativeInstance = false);

        Event(int winid, int commandType);

        ~Event();

        void SetEventType(int typ);

        int GetEventType() const;

        ::wxSharp::Object* GetEventObject() const;

        void SetEventObject(::wxSharp::Object* obj);

        long GetTimestamp() const;

        void SetTimestamp(long ts);

        int GetId() const;

        void SetId(int Id);

        ::wxSharp::Object* GetEventUserData() const;

        void Skip(bool skip);

        bool GetSkipped() const;

        virtual ::wxSharp::Event* Clone() const;

        virtual ::wxSharp::EventCategory GetEventCategory() const;

        bool IsCommandEvent() const;

        bool ShouldPropagate() const;

        int StopPropagation();

        void ResumePropagation(int propagationLevel);

        ::wxSharp::EvtHandler* GetPropagatedFrom() const;

        bool WasProcessed();

        void SetWillBeProcessedAgain();

        bool WillBeProcessedAgain();

        bool ShouldProcessOnlyIn(::wxSharp::EvtHandler* h) const;

        void DidntHonourProcessOnlyIn();

        ::wxSharp::Object* get_m_callbackUserData();

        void set_m_callbackUserData(::wxSharp::Object* value);
    };

    class PropagateOnce
    {
    public:

        ::wxPropagateOnce* __Instance;

        PropagateOnce(::wxPropagateOnce* instance, bool ownNativeInstance = false);

        PropagateOnce(::wxSharp::Event& event, ::wxSharp::EvtHandler* handler);

        ~PropagateOnce();

    protected:
        bool __ownsNativeInstance;
    };

    class IdleEvent : public wxSharp::Event
    {
    public:

        IdleEvent(::wxIdleEvent* instance, bool ownNativeInstance = false);

        IdleEvent();

        ~IdleEvent();

        void RequestMore(bool needMore);

        bool MoreRequested() const;

        virtual ::wxSharp::Event* Clone() const override;

        static void SetMode(::wxSharp::IdleMode mode);

        static ::wxSharp::IdleMode GetMode();
    };

    class ThreadEvent : public wxSharp::Event
    {
    public:

        ThreadEvent(::wxThreadEvent* instance, bool ownNativeInstance = false);

        ThreadEvent(int eventType, int id);

        ~ThreadEvent();

        virtual ::wxSharp::Event* Clone() const override;

        virtual ::wxSharp::EventCategory GetEventCategory() const override;
    };

    class AsyncMethodCallEvent : public wxSharp::Event
    {
    public:

        AsyncMethodCallEvent(::wxAsyncMethodCallEvent* instance, bool ownNativeInstance = false);

        AsyncMethodCallEvent(::wxSharp::Object* object);

        ~AsyncMethodCallEvent();

        virtual void Execute();
    };

    class CommandEvent : public wxSharp::Event
    {
    public:

        CommandEvent(::wxCommandEvent* instance, bool ownNativeInstance = false);

        CommandEvent(int commandType, int winid);

        ~CommandEvent();

        void SetClientData(void* clientData);

        void* GetClientData() const;

        const char* GetString() const;

        int GetSelection() const;

        bool IsChecked() const;

        bool IsSelection() const;

        virtual ::wxSharp::Event* Clone() const override;

        virtual ::wxSharp::EventCategory GetEventCategory() const override;
    };

    class NotifyEvent : public wxSharp::CommandEvent
    {
    public:

        NotifyEvent(::wxNotifyEvent* instance, bool ownNativeInstance = false);

        NotifyEvent(int commandType, int winid);

        ~NotifyEvent();

        void Veto();

        void Allow();

        bool IsAllowed() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class ScrollEvent : public wxSharp::CommandEvent
    {
    public:

        ScrollEvent(::wxScrollEvent* instance, bool ownNativeInstance = false);

        ScrollEvent(int commandType, int winid, int pos, int orient);

        ~ScrollEvent();

        int GetOrientation() const;

        int GetPosition() const;

        void SetOrientation(int orient);

        void SetPosition(int pos);

        virtual ::wxSharp::Event* Clone() const override;
    };

    class ScrollWinEvent : public wxSharp::Event
    {
    public:

        ScrollWinEvent(::wxScrollWinEvent* instance, bool ownNativeInstance = false);

        ScrollWinEvent(int commandType, int pos, int orient);

        ~ScrollWinEvent();

        int GetOrientation() const;

        int GetPosition() const;

        void SetOrientation(int orient);

        void SetPosition(int pos);

        virtual ::wxSharp::Event* Clone() const override;
    };

    class MouseEvent : public wxSharp::Event
    {
    public:

        MouseEvent(::wxMouseEvent* instance, bool ownNativeInstance = false);

        MouseEvent(int mouseType);

        ~MouseEvent();

        bool IsButton() const;

        bool ButtonDown(int but) const;

        bool ButtonDClick(int but) const;

        bool ButtonUp(int but) const;

        bool Button(int but) const;

        int GetButton() const;

        bool LeftDown() const;

        bool MiddleDown() const;

        bool RightDown() const;

        bool Aux1Down() const;

        bool Aux2Down() const;

        bool LeftUp() const;

        bool MiddleUp() const;

        bool RightUp() const;

        bool Aux1Up() const;

        bool Aux2Up() const;

        bool LeftDClick() const;

        bool MiddleDClick() const;

        bool RightDClick() const;

        bool Aux1DClick() const;

        bool Aux2DClick() const;

        bool Magnify() const;

        bool Dragging() const;

        bool Moving() const;

        bool Entering() const;

        bool Leaving() const;

        int GetClickCount() const;

        ::wxSharp::Point GetLogicalPosition(const ::wxSharp::DC& dc) const;

        int GetWheelRotation() const;

        int GetWheelDelta() const;

        bool IsWheelInverted() const;

        ::wxSharp::MouseWheelAxis GetWheelAxis() const;

        int GetLinesPerAction() const;

        int GetColumnsPerAction() const;

        bool IsPageScroll() const;

        float GetMagnification() const;

        virtual ::wxSharp::Event* Clone() const override;

        virtual ::wxSharp::EventCategory GetEventCategory() const override;

        int get_m_clickCount();

        void set_m_clickCount(int value);

        ::wxSharp::MouseWheelAxis get_m_wheelAxis();

        void set_m_wheelAxis(::wxSharp::MouseWheelAxis value);

        int get_m_wheelRotation();

        void set_m_wheelRotation(int value);

        int get_m_wheelDelta();

        void set_m_wheelDelta(int value);

        bool get_m_wheelInverted();

        void set_m_wheelInverted(bool value);

        int get_m_linesPerAction();

        void set_m_linesPerAction(int value);

        int get_m_columnsPerAction();

        void set_m_columnsPerAction(int value);

        float get_m_magnification();

        void set_m_magnification(float value);
    };

    class SetCursorEvent : public wxSharp::Event
    {
    public:

        SetCursorEvent(::wxSetCursorEvent* instance, bool ownNativeInstance = false);

        SetCursorEvent(int x, int y);

        ~SetCursorEvent();

        int GetX() const;

        int GetY() const;

        bool HasCursor() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class GestureEvent : public wxSharp::Event
    {
    public:

        GestureEvent(::wxGestureEvent* instance, bool ownNativeInstance = false);

        GestureEvent(int winid, int type);

        ~GestureEvent();

        void SetPosition(const ::wxSharp::Point& pos);

        bool IsGestureStart() const;

        void SetGestureStart(bool isStart);

        bool IsGestureEnd() const;

        void SetGestureEnd(bool isEnd);

        virtual ::wxSharp::Event* Clone() const override;
    };

    class PanGestureEvent : public wxSharp::GestureEvent
    {
    public:

        PanGestureEvent(::wxPanGestureEvent* instance, bool ownNativeInstance = false);

        PanGestureEvent(int winid);

        ~PanGestureEvent();

        ::wxSharp::Point GetDelta() const;

        void SetDelta(const ::wxSharp::Point& delta);

        virtual ::wxSharp::Event* Clone() const override;
    };

    class ZoomGestureEvent : public wxSharp::GestureEvent
    {
    public:

        ZoomGestureEvent(::wxZoomGestureEvent* instance, bool ownNativeInstance = false);

        ZoomGestureEvent(int winid);

        ~ZoomGestureEvent();

        double GetZoomFactor() const;

        void SetZoomFactor(double zoomFactor);

        virtual ::wxSharp::Event* Clone() const override;
    };

    class RotateGestureEvent : public wxSharp::GestureEvent
    {
    public:

        RotateGestureEvent(::wxRotateGestureEvent* instance, bool ownNativeInstance = false);

        RotateGestureEvent(int winid);

        ~RotateGestureEvent();

        double GetRotationAngle() const;

        void SetRotationAngle(double rotationAngle);

        virtual ::wxSharp::Event* Clone() const override;
    };

    class TwoFingerTapEvent : public wxSharp::GestureEvent
    {
    public:

        TwoFingerTapEvent(::wxTwoFingerTapEvent* instance, bool ownNativeInstance = false);

        TwoFingerTapEvent(int winid);

        ~TwoFingerTapEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class LongPressEvent : public wxSharp::GestureEvent
    {
    public:

        LongPressEvent(::wxLongPressEvent* instance, bool ownNativeInstance = false);

        LongPressEvent(int winid);

        ~LongPressEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class PressAndTapEvent : public wxSharp::GestureEvent
    {
    public:

        PressAndTapEvent(::wxPressAndTapEvent* instance, bool ownNativeInstance = false);

        PressAndTapEvent(int winid);

        ~PressAndTapEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class KeyEvent : public wxSharp::Event
    {
    public:

        KeyEvent(::wxKeyEvent* instance, bool ownNativeInstance = false);

        KeyEvent(int keyType);

        KeyEvent(int eventType, const ::wxSharp::KeyEvent& evt);

        ~KeyEvent();

        int GetKeyCode() const;

        bool IsKeyInCategory(int category) const;

        wchar_t GetUnicodeKey() const;

        unsigned int GetRawKeyCode() const;

        unsigned int GetRawKeyFlags() const;

        void GetPosition(int* xpos, int* ypos) const;

        void GetPosition(long* xpos, long* ypos) const;

        ::wxSharp::Point GetPosition() const;

        int GetX() const;

        int GetY() const;

        void DoAllowNextEvent();

        bool IsNextEventAllowed() const;

        virtual ::wxSharp::Event* Clone() const override;

        virtual ::wxSharp::EventCategory GetEventCategory() const override;

        int get_m_x();

        void set_m_x(int value);

        int get_m_y();

        void set_m_y(int value);

        long get_m_keyCode();

        void set_m_keyCode(long value);

        wchar_t get_m_uniChar();

        void set_m_uniChar(wchar_t value);

        unsigned int get_m_rawCode();

        void set_m_rawCode(unsigned int value);

        unsigned int get_m_rawFlags();

        void set_m_rawFlags(unsigned int value);
    };

    class SizeEvent : public wxSharp::Event
    {
    public:

        SizeEvent(::wxSizeEvent* instance, bool ownNativeInstance = false);

        SizeEvent();

        SizeEvent(const ::wxSharp::Size& sz, int winid);

        SizeEvent(const ::wxSharp::Rect& rect, int id);

        ~SizeEvent();

        ::wxSharp::Size GetSize() const;

        void SetSize(::wxSharp::Size size);

        ::wxSharp::Rect GetRect() const;

        void SetRect(const ::wxSharp::Rect& rect);

        virtual ::wxSharp::Event* Clone() const override;

        ::wxSharp::Size get_m_size();

        void set_m_size(::wxSharp::Size value);

        ::wxSharp::Rect get_m_rect();

        void set_m_rect(::wxSharp::Rect value);
    };

    class MoveEvent : public wxSharp::Event
    {
    public:

        MoveEvent(::wxMoveEvent* instance, bool ownNativeInstance = false);

        MoveEvent();

        MoveEvent(const ::wxSharp::Point& pos, int winid);

        MoveEvent(const ::wxSharp::Rect& rect, int id);

        ~MoveEvent();

        ::wxSharp::Point GetPosition() const;

        void SetPosition(const ::wxSharp::Point& pos);

        ::wxSharp::Rect GetRect() const;

        void SetRect(const ::wxSharp::Rect& rect);

        virtual ::wxSharp::Event* Clone() const override;
    };

    class PaintEvent : public wxSharp::Event
    {
    public:

        PaintEvent(::wxPaintEvent* instance, bool ownNativeInstance = false);

        ~PaintEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class NcPaintEvent : public wxSharp::Event
    {
    public:

        NcPaintEvent(::wxNcPaintEvent* instance, bool ownNativeInstance = false);

        ~NcPaintEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class EraseEvent : public wxSharp::Event
    {
    public:

        EraseEvent(::wxEraseEvent* instance, bool ownNativeInstance = false);

        EraseEvent(int Id, ::wxSharp::DC* dc);

        ~EraseEvent();

        ::wxSharp::DC* GetDC() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class FocusEvent : public wxSharp::Event
    {
    public:

        FocusEvent(::wxFocusEvent* instance, bool ownNativeInstance = false);

        FocusEvent(int type, int winid);

        ~FocusEvent();

        ::wxSharp::Window* GetWindow() const;

        void SetWindow(::wxSharp::Window* win);

        virtual ::wxSharp::Event* Clone() const override;
    };

    class ChildFocusEvent : public wxSharp::CommandEvent
    {
    public:

        ChildFocusEvent(::wxChildFocusEvent* instance, bool ownNativeInstance = false);

        ChildFocusEvent(::wxSharp::Window* win);

        ~ChildFocusEvent();

        ::wxSharp::Window* GetWindow() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class ActivateEvent : public wxSharp::Event
    {
    public:

        enum class Reason : unsigned int
        {
            Mouse = 0,
            Unknown = 1
        };

        ActivateEvent(::wxActivateEvent* instance, bool ownNativeInstance = false);

        ActivateEvent(int type, bool active, int Id, ::wxSharp::ActivateEvent::Reason activationReason);

        ~ActivateEvent();

        bool GetActive() const;

        ::wxSharp::ActivateEvent::Reason GetActivationReason() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class InitDialogEvent : public wxSharp::Event
    {
    public:

        InitDialogEvent(::wxInitDialogEvent* instance, bool ownNativeInstance = false);

        InitDialogEvent(int Id);

        ~InitDialogEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class MenuEvent : public wxSharp::Event
    {
    public:

        MenuEvent(::wxMenuEvent* instance, bool ownNativeInstance = false);

        ~MenuEvent();

        int GetMenuId() const;

        bool IsPopup() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class CloseEvent : public wxSharp::Event
    {
    public:

        CloseEvent(::wxCloseEvent* instance, bool ownNativeInstance = false);

        CloseEvent(int type, int winid);

        ~CloseEvent();

        void SetLoggingOff(bool logOff);

        bool GetLoggingOff() const;

        void Veto(bool veto);

        void SetCanVeto(bool canVeto);

        bool CanVeto() const;

        bool GetVeto() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class ShowEvent : public wxSharp::Event
    {
    public:

        ShowEvent(::wxShowEvent* instance, bool ownNativeInstance = false);

        ShowEvent(int winid, bool show);

        ~ShowEvent();

        void SetShow(bool show);

        bool IsShown() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class IconizeEvent : public wxSharp::Event
    {
    public:

        IconizeEvent(::wxIconizeEvent* instance, bool ownNativeInstance = false);

        IconizeEvent(int winid, bool iconized);

        ~IconizeEvent();

        bool IsIconized() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class MaximizeEvent : public wxSharp::Event
    {
    public:

        MaximizeEvent(::wxMaximizeEvent* instance, bool ownNativeInstance = false);

        MaximizeEvent(int winid);

        ~MaximizeEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class JoystickEvent : public wxSharp::Event
    {
    public:

        JoystickEvent(::wxJoystickEvent* instance, bool ownNativeInstance = false);

        JoystickEvent(int type, int state, int joystick, int change);

        ~JoystickEvent();

        ::wxSharp::Point GetPosition() const;

        int GetZPosition() const;

        int GetButtonState() const;

        int GetButtonChange() const;

        int GetButtonOrdinal() const;

        int GetJoystick() const;

        void SetJoystick(int stick);

        void SetButtonState(int state);

        void SetButtonChange(int change);

        void SetPosition(const ::wxSharp::Point& pos);

        void SetZPosition(int zPos);

        bool IsButton() const;

        bool IsMove() const;

        bool IsZMove() const;

        bool ButtonDown(int but) const;

        bool ButtonUp(int but) const;

        bool ButtonIsDown(int but) const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class UpdateUIEvent : public wxSharp::CommandEvent
    {
    public:

        UpdateUIEvent(::wxUpdateUIEvent* instance, bool ownNativeInstance = false);

        UpdateUIEvent(int commandId);

        ~UpdateUIEvent();

        bool GetChecked() const;

        bool GetEnabled() const;

        bool GetShown() const;

        const char* GetText() const;

        bool GetSetText() const;

        bool GetSetChecked() const;

        bool GetSetEnabled() const;

        bool GetSetShown() const;

        void Check(bool check);

        void Enable(bool enable);

        void Show(bool show);

        void SetText(const char* text);

        bool IsCheckable() const;

        void DisallowCheck();

        virtual ::wxSharp::Event* Clone() const override;

        static void SetUpdateInterval(long updateInterval);

        static long GetUpdateInterval();

        static void ResetUpdateTime();

        static void SetMode(::wxSharp::UpdateUIMode mode);

        static ::wxSharp::UpdateUIMode GetMode();
    };

    class SysColourChangedEvent : public wxSharp::Event
    {
    public:

        SysColourChangedEvent(::wxSysColourChangedEvent* instance, bool ownNativeInstance = false);

        SysColourChangedEvent();

        ~SysColourChangedEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class MouseCaptureChangedEvent : public wxSharp::Event
    {
    public:

        MouseCaptureChangedEvent(::wxMouseCaptureChangedEvent* instance, bool ownNativeInstance = false);

        MouseCaptureChangedEvent(int winid, ::wxSharp::Window* gainedCapture);

        ~MouseCaptureChangedEvent();

        virtual ::wxSharp::Event* Clone() const override;

        ::wxSharp::Window* GetCapturedWindow() const;
    };

    class MouseCaptureLostEvent : public wxSharp::Event
    {
    public:

        MouseCaptureLostEvent(::wxMouseCaptureLostEvent* instance, bool ownNativeInstance = false);

        MouseCaptureLostEvent(int winid);

        ~MouseCaptureLostEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class DisplayChangedEvent : public wxSharp::Event
    {
    public:

        DisplayChangedEvent(::wxDisplayChangedEvent* instance, bool ownNativeInstance = false);

        DisplayChangedEvent();

        ~DisplayChangedEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class DPIChangedEvent : public wxSharp::Event
    {
    public:

        DPIChangedEvent(::wxDPIChangedEvent* instance, bool ownNativeInstance = false);

        explicit DPIChangedEvent(const ::wxSharp::Size& oldDPI, const ::wxSharp::Size& newDPI);

        ~DPIChangedEvent();

        ::wxSharp::Size GetOldDPI() const;

        ::wxSharp::Size GetNewDPI() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class PaletteChangedEvent : public wxSharp::Event
    {
    public:

        PaletteChangedEvent(::wxPaletteChangedEvent* instance, bool ownNativeInstance = false);

        PaletteChangedEvent(int winid);

        ~PaletteChangedEvent();

        void SetChangedWindow(::wxSharp::Window* win);

        ::wxSharp::Window* GetChangedWindow() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class QueryNewPaletteEvent : public wxSharp::Event
    {
    public:

        QueryNewPaletteEvent(::wxQueryNewPaletteEvent* instance, bool ownNativeInstance = false);

        QueryNewPaletteEvent(int winid);

        ~QueryNewPaletteEvent();

        void SetPaletteRealized(bool realized);

        bool GetPaletteRealized() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class NavigationKeyEvent : public wxSharp::Event
    {
    public:

        enum class NavigationKeyEventFlags : unsigned int
        {
            IsBackward = 0x0,
            IsForward = 0x1,
            WinChange = 0x2,
            FromTab = 0x4
        };

        NavigationKeyEvent(::wxNavigationKeyEvent* instance, bool ownNativeInstance = false);

        NavigationKeyEvent();

        ~NavigationKeyEvent();

        bool GetDirection() const;

        void SetDirection(bool bForward);

        bool IsWindowChange() const;

        void SetWindowChange(bool bIs);

        bool IsFromTab() const;

        void SetFromTab(bool bIs);

        ::wxSharp::Window* GetCurrentFocus() const;

        void SetCurrentFocus(::wxSharp::Window* win);

        void SetFlags(long flags);

        virtual ::wxSharp::Event* Clone() const override;

        long get_m_flags();

        void set_m_flags(long value);

        ::wxSharp::Window* get_m_focus();

        void set_m_focus(::wxSharp::Window* value);
    };

    class WindowCreateEvent : public wxSharp::CommandEvent
    {
    public:

        WindowCreateEvent(::wxWindowCreateEvent* instance, bool ownNativeInstance = false);

        WindowCreateEvent(::wxSharp::Window* win);

        ~WindowCreateEvent();

        ::wxSharp::Window* GetWindow() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class WindowDestroyEvent : public wxSharp::CommandEvent
    {
    public:

        WindowDestroyEvent(::wxWindowDestroyEvent* instance, bool ownNativeInstance = false);

        WindowDestroyEvent(::wxSharp::Window* win);

        ~WindowDestroyEvent();

        ::wxSharp::Window* GetWindow() const;

        virtual ::wxSharp::Event* Clone() const override;
    };

    class HelpEvent : public wxSharp::CommandEvent
    {
    public:

        enum class Source : unsigned int
        {
            Unknown = 0,
            Keyboard = 1,
            HelpButton = 2
        };

        HelpEvent(::wxHelpEvent* instance, bool ownNativeInstance = false);

        HelpEvent(int type, int winid, const ::wxSharp::Point& pt, ::wxSharp::HelpEvent::Source origin);

        ~HelpEvent();

        void SetPosition(const ::wxSharp::Point& pos);

        void SetLink(const char* link);

        void SetTarget(const char* target);

        virtual ::wxSharp::Event* Clone() const override;

        ::wxSharp::HelpEvent::Source GetOrigin() const;

        void SetOrigin(::wxSharp::HelpEvent::Source origin);
    };

    class ClipboardTextEvent : public wxSharp::CommandEvent
    {
    public:

        ClipboardTextEvent(::wxClipboardTextEvent* instance, bool ownNativeInstance = false);

        ClipboardTextEvent(int type, int winid);

        ~ClipboardTextEvent();

        virtual ::wxSharp::Event* Clone() const override;
    };

    class ContextMenuEvent : public wxSharp::CommandEvent
    {
    public:

        ContextMenuEvent(::wxContextMenuEvent* instance, bool ownNativeInstance = false);

        ContextMenuEvent(int type, int winid, const ::wxSharp::Point& pt);

        ~ContextMenuEvent();

        void SetPosition(const ::wxSharp::Point& pos);

        virtual ::wxSharp::Event* Clone() const override;
    };

    class EvtHandler : public wxSharp::Object
    {
    public:

        EvtHandler(::wxEvtHandler* instance, bool ownNativeInstance = false);

        EvtHandler();

        ~EvtHandler();

        ::wxSharp::EvtHandler* GetNextHandler() const;

        ::wxSharp::EvtHandler* GetPreviousHandler() const;

        virtual void SetNextHandler(::wxSharp::EvtHandler* handler);

        virtual void SetPreviousHandler(::wxSharp::EvtHandler* handler);

        void SetEvtHandlerEnabled(bool enabled);

        bool GetEvtHandlerEnabled() const;

        void Unlink();

        bool IsUnlinked() const;

        virtual bool ProcessEvent(::wxSharp::Event& event);

        bool SafelyProcessEvent(::wxSharp::Event& event);

        bool ProcessEventLocally(::wxSharp::Event& event);

        virtual void QueueEvent(::wxSharp::Event* event);

        virtual void AddPendingEvent(const ::wxSharp::Event& event);

        void ProcessPendingEvents();

        void DeletePendingEvents();

        bool ProcessThreadEvent(const ::wxSharp::Event& event);

        void SetClientData(void* data);

        void* GetClientData() const;

        bool SearchDynamicEventTable(::wxSharp::Event& event);

        void ClearEventHashTable();

        void OnSinkDestroyed(::wxSharp::EvtHandler* sink);

        virtual int HandleEvent(::wxEvent& event);

        static void WXConsumeException();
    };

    int NewEventType();
    void PostEvent(::wxSharp::EvtHandler* dest, const ::wxSharp::Event& event);
    void QueueEvent(::wxSharp::EvtHandler* dest, ::wxSharp::Event* event);
    ::wxSharp::Window* FindFocusDescendant(::wxSharp::Window* ancestor);

    namespace Private
    {
    }
}
