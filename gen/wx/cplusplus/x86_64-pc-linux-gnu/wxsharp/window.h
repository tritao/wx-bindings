// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include "CppSharp.h"
#include "FastDelegates.h"
#include <wx/window.h>
#include "wxsharp/colour.h"
#include "wxsharp/event.h"
#include "wxsharp/gdicmn.h"

namespace wxSharp
{
    class DC;
    class Event;
    class HelpEvent;
    class IdleEvent;
    class InitDialogEvent;
    class KeyEvent;
    class MouseEvent;
    class Object;
    class Sizer;
    class SysColourChangedEvent;
    class UpdateUIEvent;
    class VisualAttributes;
    class Window;
    class WindowList;
    class WindowListNode;
    enum class BackgroundStyle : unsigned int;
    enum class Border : unsigned int;
    enum class HitTest : unsigned int;
    enum class KeyType : unsigned int;
    enum class SendEventFlags : unsigned int;
    enum class ShowEffect : unsigned int;
    enum class TouchMode : unsigned int;
    enum class WindowVariant : unsigned int;
}

namespace wxSharp
{
    enum class WindowVariant : unsigned int
    {
        NORMAL = 0,
        SMALL = 1,
        MINI = 2,
        LARGE = 3,
        MAX = 4
    };

    enum class ShowEffect : unsigned int
    {
        NONE = 0,
        ROLL_TO_LEFT = 1,
        ROLL_TO_RIGHT = 2,
        ROLL_TO_TOP = 3,
        ROLL_TO_BOTTOM = 4,
        SLIDE_TO_LEFT = 5,
        SLIDE_TO_RIGHT = 6,
        SLIDE_TO_TOP = 7,
        SLIDE_TO_BOTTOM = 8,
        BLEND = 9,
        EXPAND = 10,
        MAX = 11
    };

    enum class TouchMode : unsigned int
    {
        NONE = 0x0,
        VERTICAL_PAN_GESTURE = 0x1,
        HORIZONTAL_PAN_GESTURE = 0x2,
        PAN_GESTURES = 3,
        ZOOM_GESTURE = 0x4,
        ROTATE_GESTURE = 0x8,
        PRESS_GESTURES = 0x10,
        ALL_GESTURES = 0x1f
    };

    enum class SendEventFlags : unsigned int
    {
        POST = 1
    };

    class VisualAttributes
    {
    public:

        ::wxVisualAttributes* __Instance;

        VisualAttributes(::wxVisualAttributes* instance, bool ownNativeInstance = false);

        VisualAttributes(const ::wxSharp::VisualAttributes& _0);

        VisualAttributes();

        ~VisualAttributes();

        ::wxSharp::Color get_colFg();

        void set_colFg(::wxSharp::Color value);

        ::wxSharp::Color get_colBg();

        void set_colBg(::wxSharp::Color value);

    protected:
        bool __ownsNativeInstance;
    };

    class WindowListNode
    {
    public:

        ::wxWindowListNode* __Instance;

        WindowListNode(::wxWindowListNode* instance, bool ownNativeInstance = false);

        ~WindowListNode();

        ::wxSharp::WindowListNode* GetNext() const;

        ::wxSharp::WindowListNode* GetPrevious() const;

        ::wxSharp::Window* GetData() const;

        void SetData(::wxSharp::Window* data);

    protected:
        bool __ownsNativeInstance;
    };

    class WindowList
    {
    public:

        ::wxWindowList* __Instance;

        WindowList(::wxWindowList* instance, bool ownNativeInstance = false);

        WindowList(::wxSharp::KeyType keyType);

        WindowList(const ::wxSharp::WindowList& list);

        explicit WindowList(unsigned long n, ::wxSharp::Window*const & v);

        ~WindowList();

        ::wxSharp::WindowListNode* GetFirst() const;

        ::wxSharp::WindowListNode* GetLast() const;

        ::wxSharp::WindowListNode* Item(unsigned long index) const;

        ::wxSharp::Window* operator[](unsigned long index) const;

        ::wxSharp::WindowListNode* Append(long key, void* object);

        ::wxSharp::WindowListNode* Append(wchar_t* key, void* object);

        ::wxSharp::WindowListNode* DetachNode(::wxSharp::WindowListNode* node);

        bool DeleteNode(::wxSharp::WindowListNode* node);

        void Erase(::wxSharp::WindowListNode* it);

        void resize(unsigned long n, ::wxSharp::Window* v);

        unsigned long size() const;

        unsigned long max_size() const;

        bool empty() const;

        void push_front(::wxSharp::Window*const & v);

        void pop_front();

        void push_back(::wxSharp::Window*const & v);

        void pop_back();

        void assign(unsigned long n, ::wxSharp::Window*const & v);

        void clear();

        void remove(::wxSharp::Window*const & v);

        void reverse();

    protected:
        bool __ownsNativeInstance;
    };

    class Window : public wxSharp::EvtHandler
    {
    public:

        enum class ScrollDir : unsigned int
        {
            Horz = 0,
            Vert = 1,
            Max = 2
        };

        enum class NavigationKind : unsigned int
        {
            Tab = 0,
            Accel = 1
        };

        Window(::wxWindow* instance, bool ownNativeInstance = false);

        Window();

        Window(::wxSharp::Window* parent, int id, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name);

        ~Window();

        fastdelegate::FastDelegate<void (::wxSharp::ActivateEvent&)> OnActivate;

        fastdelegate::FastDelegate<void (::wxSharp::ChildFocusEvent&)> OnChildFocus;

        fastdelegate::FastDelegate<void (::wxSharp::ContextMenuEvent&)> OnContextMenu;

        fastdelegate::FastDelegate<void (::wxSharp::HelpEvent&)> OnHelp;

        fastdelegate::FastDelegate<void (::wxSharp::HelpEvent&)> OnHelpRange;

        fastdelegate::FastDelegate<void (::wxSharp::EraseEvent&)> OnEraseBackground;

        fastdelegate::FastDelegate<void (::wxSharp::FocusEvent&)> OnSetFocus;

        fastdelegate::FastDelegate<void (::wxSharp::FocusEvent&)> OnKillFocus;

        fastdelegate::FastDelegate<void (::wxSharp::IdleEvent&)> OnIdle;

        fastdelegate::FastDelegate<void (::wxSharp::JoystickEvent&)> OnJoyButtonDown;

        fastdelegate::FastDelegate<void (::wxSharp::JoystickEvent&)> OnJoyButtonUp;

        fastdelegate::FastDelegate<void (::wxSharp::JoystickEvent&)> OnJoyMove;

        fastdelegate::FastDelegate<void (::wxSharp::JoystickEvent&)> OnJoyZmove;

        fastdelegate::FastDelegate<void (::wxSharp::KeyEvent&)> OnKeyDown;

        fastdelegate::FastDelegate<void (::wxSharp::KeyEvent&)> OnKeyUp;

        fastdelegate::FastDelegate<void (::wxSharp::KeyEvent&)> OnChar;

        fastdelegate::FastDelegate<void (::wxSharp::KeyEvent&)> OnCharHook;

        fastdelegate::FastDelegate<void (::wxSharp::MouseCaptureLostEvent&)> OnMouseCaptureLost;

        fastdelegate::FastDelegate<void (::wxSharp::MouseCaptureChangedEvent&)> OnMouseCaptureChanged;

        fastdelegate::FastDelegate<void (::wxSharp::MouseEvent&)> OnMouseAux1Down;

        fastdelegate::FastDelegate<void (::wxSharp::MouseEvent&)> OnMouseAux1Up;

        fastdelegate::FastDelegate<void (::wxSharp::MouseEvent&)> OnMouseAux1Dclick;

        fastdelegate::FastDelegate<void (::wxSharp::MouseEvent&)> OnMouseAux2Down;

        fastdelegate::FastDelegate<void (::wxSharp::MouseEvent&)> OnMouseAux2Up;

        fastdelegate::FastDelegate<void (::wxSharp::MouseEvent&)> OnMouseAux2Dclick;

        fastdelegate::FastDelegate<void (::wxSharp::PaintEvent&)> OnPaint;

        fastdelegate::FastDelegate<void (::wxSharp::ScrollWinEvent&)> OnScrollwinTop;

        fastdelegate::FastDelegate<void (::wxSharp::ScrollWinEvent&)> OnScrollwinBottom;

        fastdelegate::FastDelegate<void (::wxSharp::ScrollWinEvent&)> OnScrollwinLineup;

        fastdelegate::FastDelegate<void (::wxSharp::ScrollWinEvent&)> OnScrollwinLinedown;

        fastdelegate::FastDelegate<void (::wxSharp::ScrollWinEvent&)> OnScrollwinPageup;

        fastdelegate::FastDelegate<void (::wxSharp::ScrollWinEvent&)> OnScrollwinPagedown;

        fastdelegate::FastDelegate<void (::wxSharp::ScrollWinEvent&)> OnScrollwinThumbtrack;

        fastdelegate::FastDelegate<void (::wxSharp::ScrollWinEvent&)> OnScrollwinThumbrelease;

        fastdelegate::FastDelegate<void (::wxSharp::SetCursorEvent&)> OnSetCursor;

        fastdelegate::FastDelegate<void (::wxSharp::SizeEvent&)> OnSize;

        fastdelegate::FastDelegate<void (::wxSharp::SysColourChangedEvent&)> OnSysColourChanged;

        bool Create(::wxSharp::Window* parent, int id, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name);

        virtual void Raise();

        virtual void Lower();

        virtual bool Show(bool show);

        virtual bool IsShown() const;

        virtual bool IsRetained() const;

        virtual void SetFocus();

        virtual void SetCanFocus(bool canFocus);

        virtual void WarpPointer(int x, int y);

        virtual bool EnableTouchEvents(int eventsMask);

        virtual void Refresh(bool eraseBackground, const ::wxSharp::Rect* rect);

        virtual void Update();

        virtual void ClearBackground();

        virtual bool SetBackgroundColour(const ::wxSharp::Color& colour);

        virtual bool SetForegroundColour(const ::wxSharp::Color& colour);

        virtual bool SetBackgroundStyle(::wxSharp::BackgroundStyle style);

        virtual bool IsTransparentBackgroundSupported(const char* reason) const;

        virtual int GetCharHeight() const;

        virtual int GetCharWidth() const;

        virtual double GetContentScaleFactor() const;

        virtual double GetDPIScaleFactor() const;

        virtual void SetScrollbar(int orient, int pos, int thumbVisible, int range, bool refresh);

        virtual void SetScrollPos(int orient, int pos, bool refresh);

        virtual int GetScrollPos(int orient) const;

        virtual int GetScrollThumb(int orient) const;

        virtual int GetScrollRange(int orient) const;

        virtual void ScrollWindow(int dx, int dy, const ::wxSharp::Rect* rect);

        virtual bool ScrollLines(int lines);

        virtual bool ScrollPages(int pages);

        virtual int AdjustForLayoutDirection(int x, int width, int widthTotal) const;

        virtual bool DoIsExposed(int x, int y) const;

        virtual bool DoIsExposed(int x, int y, int w, int h) const;

        virtual void SetDoubleBuffered(bool on);

        virtual bool IsDoubleBuffered() const;

        virtual void SetLabel(const char* label);

        virtual const char* GetLabel() const;

        virtual void OnInternalIdle();

        bool PreCreation(::wxSharp::Window* parent, const ::wxSharp::Point& pos, const ::wxSharp::Size& size);

        void PostCreation();

        void DoAddChild(::wxSharp::Window* child);

        bool IsOfStandardClass() const;

        bool Close(bool force);

        virtual bool Destroy();

        bool DestroyChildren();

        bool IsBeingDeleted() const;

        virtual void SetName(const char* name);

        virtual const char* GetName() const;

        void SetWindowVariant(::wxSharp::WindowVariant variant);

        ::wxSharp::WindowVariant GetWindowVariant() const;

        virtual void SetId(int winid);

        int GetId() const;

        void SetSize(int x, int y, int width, int height, int sizeFlags);

        void SetSize(int width, int height);

        void SetSize(const ::wxSharp::Size& size);

        void SetSize(const ::wxSharp::Rect& rect, int sizeFlags);

        void Move(int x, int y, int flags);

        void Move(const ::wxSharp::Point& pt, int flags);

        void SetPosition(const ::wxSharp::Point& pt);

        void SetClientSize(int width, int height);

        void SetClientSize(const ::wxSharp::Size& size);

        void SetClientSize(const ::wxSharp::Rect& rect);

        void GetPosition(int* x, int* y) const;

        ::wxSharp::Point GetPosition() const;

        void GetScreenPosition(int* x, int* y) const;

        ::wxSharp::Point GetScreenPosition() const;

        void GetSize(int* w, int* h) const;

        ::wxSharp::Size GetSize() const;

        void GetClientSize(int* w, int* h) const;

        ::wxSharp::Size GetClientSize() const;

        ::wxSharp::Rect GetRect() const;

        ::wxSharp::Rect GetScreenRect() const;

        virtual ::wxSharp::Point GetClientAreaOrigin() const;

        ::wxSharp::Rect GetClientRect() const;

        virtual ::wxSharp::Size ClientToWindowSize(const ::wxSharp::Size& size) const;

        virtual ::wxSharp::Size WindowToClientSize(const ::wxSharp::Size& size) const;

        ::wxSharp::Size GetBestSize() const;

        void GetBestSize(int* w, int* h) const;

        int GetBestHeight(int width) const;

        int GetBestWidth(int height) const;

        void InvalidateBestSize();

        void CacheBestSize(const ::wxSharp::Size& size) const;

        virtual ::wxSharp::Size GetEffectiveMinSize() const;

        void SetInitialSize(const ::wxSharp::Size& size);

        void Centre(int dir);

        void Center(int dir);

        void CentreOnParent(int dir);

        void CenterOnParent(int dir);

        virtual void Fit();

        virtual void FitInside();

        virtual void SetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH);

        void SetSizeHints(const ::wxSharp::Size& minSize, const ::wxSharp::Size& maxSize, const ::wxSharp::Size& incSize);

        virtual void SetMinSize(const ::wxSharp::Size& minSize);

        virtual void SetMaxSize(const ::wxSharp::Size& maxSize);

        virtual void SetMinClientSize(const ::wxSharp::Size& size);

        virtual void SetMaxClientSize(const ::wxSharp::Size& size);

        virtual ::wxSharp::Size GetMinSize() const;

        virtual ::wxSharp::Size GetMaxSize() const;

        virtual ::wxSharp::Size GetMinClientSize() const;

        virtual ::wxSharp::Size GetMaxClientSize() const;

        int GetMinWidth() const;

        int GetMinHeight() const;

        int GetMaxWidth() const;

        int GetMaxHeight() const;

        void SetVirtualSize(const ::wxSharp::Size& size);

        void SetVirtualSize(int x, int y);

        ::wxSharp::Size GetVirtualSize() const;

        void GetVirtualSize(int* x, int* y) const;

        virtual void DoSetVirtualSize(int x, int y);

        virtual ::wxSharp::Size DoGetVirtualSize() const;

        virtual ::wxSharp::Size GetBestVirtualSize() const;

        virtual ::wxSharp::Size GetWindowBorderSize() const;

        virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);

        virtual void SendSizeEvent(int flags);

        void SendSizeEventToParent(int flags);

        void PostSizeEvent();

        void PostSizeEventToParent();

        virtual bool BeginRepositioningChildren();

        virtual void EndRepositioningChildren();

        bool Hide();

        virtual bool ShowWithEffect(::wxSharp::ShowEffect _0, unsigned int _1);

        virtual bool HideWithEffect(::wxSharp::ShowEffect _0, unsigned int _1);

        virtual bool Enable(bool enable);

        bool Disable();

        bool IsEnabled() const;

        virtual bool IsThisEnabled() const;

        virtual bool IsShownOnScreen() const;

        virtual void SetWindowStyleFlag(long style);

        virtual long GetWindowStyleFlag() const;

        void SetWindowStyle(long style);

        long GetWindowStyle() const;

        bool HasFlag(int flag) const;

        bool ToggleWindowStyle(int flag);

        virtual void SetExtraStyle(long exStyle);

        long GetExtraStyle() const;

        bool HasExtraStyle(int exFlag) const;

        virtual void SetThemeEnabled(bool enableTheme);

        virtual bool GetThemeEnabled() const;

        virtual void SetFocusFromKbd();

        virtual bool HasFocus() const;

        virtual bool AcceptsFocus() const;

        virtual bool AcceptsFocusRecursively() const;

        virtual bool AcceptsFocusFromKeyboard() const;

        void DisableFocusFromKeyboard();

        virtual bool CanBeFocused() const;

        bool IsFocusable() const;

        bool CanAcceptFocus() const;

        bool CanAcceptFocusFromKeyboard() const;

        virtual void EnableVisibleFocus(bool _0);

        bool NavigateIn(int flags);

        bool Navigate(int flags);

        bool HandleAsNavigationKey(const ::wxSharp::KeyEvent& event);

        void MoveBeforeInTabOrder(::wxSharp::Window* win);

        void MoveAfterInTabOrder(::wxSharp::Window* win);

        ::wxSharp::Window* GetPrevSibling() const;

        ::wxSharp::Window* GetNextSibling() const;

        ::wxSharp::Window* GetParent() const;

        ::wxSharp::Window* GetGrandParent() const;

        virtual bool IsTopLevel() const;

        virtual bool IsClientAreaChild(const ::wxSharp::Window* _0) const;

        ::wxSharp::Window* FindWindow(long winid) const;

        ::wxSharp::Window* FindWindow(const char* name) const;

        ::wxSharp::EvtHandler* GetEventHandler() const;

        void SetEventHandler(::wxSharp::EvtHandler* handler);

        void PushEventHandler(::wxSharp::EvtHandler* handler);

        ::wxSharp::EvtHandler* PopEventHandler(bool deleteHandler);

        bool RemoveEventHandler(::wxSharp::EvtHandler* handler);

        bool ProcessWindowEvent(::wxSharp::Event& event);

        bool ProcessWindowEventLocally(::wxSharp::Event& event);

        bool HandleWindowEvent(::wxSharp::Event& event) const;

        virtual void SetNextHandler(::wxSharp::EvtHandler* handler) override;

        virtual void SetPreviousHandler(::wxSharp::EvtHandler* handler) override;

        virtual bool Validate();

        virtual bool TransferDataToWindow();

        virtual bool TransferDataFromWindow();

        virtual void InitDialog();

        virtual bool RegisterHotKey(int hotkeyId, int modifiers, int keycode);

        virtual bool UnregisterHotKey(int hotkeyId);

        virtual ::wxSharp::Size GetDPI() const;

        ::wxSharp::Size FromDIP(const ::wxSharp::Size& sz) const;

        ::wxSharp::Point FromDIP(const ::wxSharp::Point& pt) const;

        int FromDIP(int d) const;

        ::wxSharp::Size ToDIP(const ::wxSharp::Size& sz) const;

        ::wxSharp::Point ToDIP(const ::wxSharp::Point& pt) const;

        int ToDIP(int d) const;

        ::wxSharp::Point ConvertPixelsToDialog(const ::wxSharp::Point& pt) const;

        ::wxSharp::Point ConvertDialogToPixels(const ::wxSharp::Point& pt) const;

        ::wxSharp::Size ConvertPixelsToDialog(const ::wxSharp::Size& sz) const;

        ::wxSharp::Size ConvertDialogToPixels(const ::wxSharp::Size& sz) const;

        void CaptureMouse();

        void ReleaseMouse();

        virtual bool HasCapture() const;

        void RefreshRect(const ::wxSharp::Rect& rect, bool eraseBackground);

        void Freeze();

        void Thaw();

        bool IsFrozen() const;

        virtual void PrepareDC(::wxSharp::DC& _0);

        ::wxSharp::Rect GetUpdateClientRect() const;

        bool IsExposed(int x, int y) const;

        bool IsExposed(int x, int y, int w, int h) const;

        bool IsExposed(const ::wxSharp::Point& pt) const;

        bool IsExposed(const ::wxSharp::Rect& rect) const;

        virtual ::wxSharp::VisualAttributes GetDefaultAttributes() const;

        void SetOwnBackgroundColour(const ::wxSharp::Color& colour);

        ::wxSharp::Color GetBackgroundColour() const;

        bool InheritsBackgroundColour() const;

        bool UseBgCol() const;

        bool UseBackgroundColour() const;

        void SetOwnForegroundColour(const ::wxSharp::Color& colour);

        ::wxSharp::Color GetForegroundColour() const;

        bool UseForegroundColour() const;

        bool InheritsForegroundColour() const;

        ::wxSharp::BackgroundStyle GetBackgroundStyle() const;

        virtual bool HasTransparentBackground();

        ::wxSharp::Size GetTextExtent(const char* string) const;

        void ClientToScreen(int* x, int* y) const;

        void ScreenToClient(int* x, int* y) const;

        ::wxSharp::Point ClientToScreen(const ::wxSharp::Point& pt) const;

        ::wxSharp::Point ScreenToClient(const ::wxSharp::Point& pt) const;

        ::wxSharp::HitTest HitTest(int x, int y) const;

        ::wxSharp::HitTest HitTest(const ::wxSharp::Point& pt) const;

        ::wxSharp::Border GetBorder(long flags) const;

        ::wxSharp::Border GetBorder() const;

        virtual void UpdateWindowUI(long flags);

        virtual void DoUpdateWindowUI(::wxSharp::UpdateUIEvent& event);

        virtual bool HasMultiplePages() const;

        virtual bool CanScroll(int orient) const;

        bool HasScrollbar(int orient) const;

        bool LineUp();

        bool LineDown();

        bool PageUp();

        bool PageDown();

        virtual void AlwaysShowScrollbars(bool _0, bool _1);

        virtual bool IsScrollbarAlwaysShown(int _0) const;

        void SetHelpText(const char* text);

        virtual const char* GetHelpTextAtPoint(const ::wxSharp::Point& pt, ::wxSharp::HelpEvent::Source origin) const;

        const char* GetHelpText() const;

        void SetToolTip(const char* tip);

        void UnsetToolTip();

        const char* GetToolTipText() const;

        virtual void DragAcceptFiles(bool accept);

        ::wxSharp::WindowList* GetConstraintsInvolvedIn() const;

        void DeleteRelatedConstraints();

        void ResetConstraints();

        virtual void SetConstraintSizes(bool recurse);

        virtual bool LayoutPhase1(int* noChanges);

        virtual bool LayoutPhase2(int* noChanges);

        virtual bool DoPhase(int phase);

        virtual void SetSizeConstraint(int x, int y, int w, int h);

        virtual void MoveConstraint(int x, int y);

        virtual void GetSizeConstraint(int* w, int* h) const;

        virtual void GetClientSizeConstraint(int* w, int* h) const;

        virtual void GetPositionConstraint(int* x, int* y) const;

        void SetAutoLayout(bool autoLayout);

        bool GetAutoLayout() const;

        virtual bool Layout();

        void SetSizer(::wxSharp::Sizer* sizer, bool deleteOld);

        void SetSizerAndFit(::wxSharp::Sizer* sizer, bool deleteOld);

        ::wxSharp::Sizer* GetSizer() const;

        void SetContainingSizer(::wxSharp::Sizer* sizer);

        ::wxSharp::Sizer* GetContainingSizer() const;

        virtual bool SetTransparent(unsigned char _0);

        virtual bool CanSetTransparent();

        void OnInitDialog(::wxSharp::InitDialogEvent& event);

        void OnMiddleClick(::wxSharp::MouseEvent& event);

        virtual bool SendIdleEvents(::wxSharp::IdleEvent& event);

        bool WXSendContextMenuEvent(const ::wxSharp::Point& posInScreenCoords);

        virtual void DissociateHandle();

        bool HasCustomPalette() const;

        ::wxSharp::Window* GetAncestorWithCustomPalette() const;

        virtual void InheritAttributes();

        virtual bool ShouldInheritColours() const;

        virtual bool CanBeOutsideClientArea() const;

        virtual bool CanApplyThemeBorder() const;

        virtual ::wxSharp::Window* GetMainWindowOfCompositeControl();

        virtual bool IsTopNavigationDomain(::wxSharp::Window::NavigationKind _0) const;

        virtual int HandleEvent(::wxEvent& event) override;

        int get_m_x();

        void set_m_x(int value);

        int get_m_y();

        void set_m_y(int value);

        int get_m_width();

        void set_m_width(int value);

        int get_m_height();

        void set_m_height(int value);

        int get_m_clientWidth();

        void set_m_clientWidth(int value);

        int get_m_clientHeight();

        void set_m_clientHeight(int value);

        bool get_m_useCachedClientSize();

        void set_m_useCachedClientSize(bool value);

        bool get_m_isGtkPositionValid();

        void set_m_isGtkPositionValid(bool value);

        const char* get_m_gtkLabel();

        void set_m_gtkLabel(const char* value);

        bool get_m_noExpose();

        void set_m_noExpose(bool value);

        bool get_m_nativeSizeEvent();

        void set_m_nativeSizeEvent(bool value);

        bool get_m_isScrolling();

        void set_m_isScrolling(bool value);

        bool get_m_clipPaintRegion();

        void set_m_clipPaintRegion(bool value);

        bool get_m_dirtyTabOrder();

        void set_m_dirtyTabOrder(bool value);

        bool get_m_mouseButtonDown();

        void set_m_mouseButtonDown(bool value);

        bool get_m_showOnIdle();

        void set_m_showOnIdle(bool value);

        bool get_m_needCursorReset();

        void set_m_needCursorReset(bool value);

        static ::wxSharp::Window::ScrollDir ScrollDirFromOrient(int orient);

        static int OrientFromScrollDir(::wxSharp::Window::ScrollDir dir);

        static int NewControlId(int count);

        static void UnreserveControlId(int id, int count);

        static ::wxSharp::Window* FindFocus();

        static ::wxSharp::Window* DoFindFocus();

        static ::wxSharp::Window* FindWindowById(long winid, const ::wxSharp::Window* parent);

        static ::wxSharp::Window* FindWindowByName(const char* name, const ::wxSharp::Window* parent);

        static ::wxSharp::Window* FindWindowByLabel(const char* label, const ::wxSharp::Window* parent);

        static ::wxSharp::Window* GetCapture();

        static ::wxSharp::VisualAttributes GetClassDefaultAttributes(::wxSharp::WindowVariant variant);
    };

    ::wxSharp::Window* FindWindowAtPointer(::wxSharp::Point& pt);
    ::wxSharp::Point GetMousePosition();
    ::wxSharp::Window* GetActiveWindow();
}
