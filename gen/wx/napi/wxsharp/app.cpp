// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <wxsharp/app.h>
#include <node/node_api.h>
#include <assert.h>
#include <stdio.h>
#include "NAPIHelpers.h"

extern napi_ref ctor_wxSharp_Event_Event;
extern napi_ref ctor_wxSharp_GraphicsContext_GraphicsContext;
extern napi_ref ctor_wxSharp_GraphicsPath_GraphicsPath;
extern napi_ref ctor_wxSharp_GraphicsMatrix_GraphicsMatrix;
extern napi_ref ctor_wxSharp_GraphicsPen_GraphicsPen;
extern napi_ref ctor_wxSharp_GraphicsBrush_GraphicsBrush;
extern napi_ref ctor_wxSharp_GraphicsFont_GraphicsFont;
extern napi_ref ctor_wxSharp_GraphicsBitmap_GraphicsBitmap;
extern napi_ref ctor_wxSharp_Color_Color;
extern napi_ref ctor_wxSharp_Size_Size;
extern napi_ref ctor_wxSharp_Rect_Rect;
extern napi_ref ctor_wxSharp_Point_Point;
extern napi_ref ctor_wxSharp_SizerItem_SizerItem;
extern napi_ref ctor_wxSharp_Window_Window;
extern napi_ref ctor_wxSharp_EvtHandler_EvtHandler;
extern napi_ref ctor_wxSharp_VisualAttributes_VisualAttributes;

static void dtor_wxSharp_AppConsole_AppConsole(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_AppConsole_AppConsole;

// wxSharp::AppConsole::AppConsole
static napi_value callback_method_wxSharp_AppConsole_AppConsole(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // AppConsole()
overload0:
    {
        instance = new wxSharp::AppConsole();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_AppConsole_AppConsole, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::AppConsole::AppConsole: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::CheckSignal
static napi_value callback_method_wxSharp_AppConsole_CheckSignal(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->CheckSignal();
    printf("wxSharp::AppConsole::CheckSignal: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::CallOnInit
static napi_value callback_method_wxSharp_AppConsole_CallOnInit(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->CallOnInit();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::AppConsole::CallOnInit: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::OnInit
static napi_value callback_method_wxSharp_AppConsole_OnInit(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->OnInit();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::AppConsole::OnInit: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::OnRun
static napi_value callback_method_wxSharp_AppConsole_OnRun(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    int __ret = instance->OnRun();

    napi_value __result;
    status = napi_create_int32(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::AppConsole::OnRun: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::OnLaunched
static napi_value callback_method_wxSharp_AppConsole_OnLaunched(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->OnLaunched();
    printf("wxSharp::AppConsole::OnLaunched: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::OnExit
static napi_value callback_method_wxSharp_AppConsole_OnExit(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    int __ret = instance->OnExit();

    napi_value __result;
    status = napi_create_int32(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::AppConsole::OnExit: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::CleanUp
static napi_value callback_method_wxSharp_AppConsole_CleanUp(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->CleanUp();
    printf("wxSharp::AppConsole::CleanUp: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::OnFatalException
static napi_value callback_method_wxSharp_AppConsole_OnFatalException(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->OnFatalException();
    printf("wxSharp::AppConsole::OnFatalException: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::Exit
static napi_value callback_method_wxSharp_AppConsole_Exit(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Exit();
    printf("wxSharp::AppConsole::Exit: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::SetVendorName
static napi_value callback_method_wxSharp_AppConsole_SetVendorName(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetVendorName(const char* name)
overload0:
    {
        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg0 = name;

        instance->SetVendorName(__arg0);
    }
    printf("wxSharp::AppConsole::SetVendorName: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::SetVendorDisplayName
static napi_value callback_method_wxSharp_AppConsole_SetVendorDisplayName(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetVendorDisplayName(const char* name)
overload0:
    {
        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg0 = name;

        instance->SetVendorDisplayName(__arg0);
    }
    printf("wxSharp::AppConsole::SetVendorDisplayName: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::SetCLocale
static napi_value callback_method_wxSharp_AppConsole_SetCLocale(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->SetCLocale();
    printf("wxSharp::AppConsole::SetCLocale: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::OnUnhandledException
static napi_value callback_method_wxSharp_AppConsole_OnUnhandledException(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->OnUnhandledException();
    printf("wxSharp::AppConsole::OnUnhandledException: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::OnExceptionInMainLoop
static napi_value callback_method_wxSharp_AppConsole_OnExceptionInMainLoop(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->OnExceptionInMainLoop();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::AppConsole::OnExceptionInMainLoop: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::RethrowStoredException
static napi_value callback_method_wxSharp_AppConsole_RethrowStoredException(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->RethrowStoredException();
    printf("wxSharp::AppConsole::RethrowStoredException: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::ProcessPendingEvents
static napi_value callback_method_wxSharp_AppConsole_ProcessPendingEvents(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->ProcessPendingEvents();
    printf("wxSharp::AppConsole::ProcessPendingEvents: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::SuspendProcessingOfPendingEvents
static napi_value callback_method_wxSharp_AppConsole_SuspendProcessingOfPendingEvents(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->SuspendProcessingOfPendingEvents();
    printf("wxSharp::AppConsole::SuspendProcessingOfPendingEvents: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::ResumeProcessingOfPendingEvents
static napi_value callback_method_wxSharp_AppConsole_ResumeProcessingOfPendingEvents(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->ResumeProcessingOfPendingEvents();
    printf("wxSharp::AppConsole::ResumeProcessingOfPendingEvents: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::RemovePendingEventHandler
static napi_value callback_method_wxSharp_AppConsole_RemovePendingEventHandler(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void RemovePendingEventHandler(::wxSharp::EvtHandler* toRemove)
overload0:
    {
        wxSharp::EvtHandler* toRemove_instance;
        status = napi_unwrap(env, _this, (void**) &toRemove_instance);
        auto __arg0 = toRemove_instance;

        instance->RemovePendingEventHandler(__arg0);
    }
    printf("wxSharp::AppConsole::RemovePendingEventHandler: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::AppendPendingEventHandler
static napi_value callback_method_wxSharp_AppConsole_AppendPendingEventHandler(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AppendPendingEventHandler(::wxSharp::EvtHandler* toAppend)
overload0:
    {
        wxSharp::EvtHandler* toAppend_instance;
        status = napi_unwrap(env, _this, (void**) &toAppend_instance);
        auto __arg0 = toAppend_instance;

        instance->AppendPendingEventHandler(__arg0);
    }
    printf("wxSharp::AppConsole::AppendPendingEventHandler: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::DelayPendingEventHandler
static napi_value callback_method_wxSharp_AppConsole_DelayPendingEventHandler(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DelayPendingEventHandler(::wxSharp::EvtHandler* toDelay)
overload0:
    {
        wxSharp::EvtHandler* toDelay_instance;
        status = napi_unwrap(env, _this, (void**) &toDelay_instance);
        auto __arg0 = toDelay_instance;

        instance->DelayPendingEventHandler(__arg0);
    }
    printf("wxSharp::AppConsole::DelayPendingEventHandler: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::DeletePendingEvents
static napi_value callback_method_wxSharp_AppConsole_DeletePendingEvents(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->DeletePendingEvents();
    printf("wxSharp::AppConsole::DeletePendingEvents: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::ScheduleForDestruction
static napi_value callback_method_wxSharp_AppConsole_ScheduleForDestruction(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void ScheduleForDestruction(::wxSharp::Object* object)
overload0:
    {
        wxSharp::Object* object_instance;
        status = napi_unwrap(env, _this, (void**) &object_instance);
        auto __arg0 = object_instance;

        instance->ScheduleForDestruction(__arg0);
    }
    printf("wxSharp::AppConsole::ScheduleForDestruction: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::IsScheduledForDestruction
static napi_value callback_method_wxSharp_AppConsole_IsScheduledForDestruction(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool IsScheduledForDestruction(::wxSharp::Object* object) const
overload0:
    {
        wxSharp::Object* object_instance;
        status = napi_unwrap(env, _this, (void**) &object_instance);
        auto __arg0 = object_instance;

        bool __ret = instance->IsScheduledForDestruction(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::AppConsole::IsScheduledForDestruction: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::ExitMainLoop
static napi_value callback_method_wxSharp_AppConsole_ExitMainLoop(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->ExitMainLoop();
    printf("wxSharp::AppConsole::ExitMainLoop: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::Yield
static napi_value callback_method_wxSharp_AppConsole_Yield(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Yield(bool onlyIfNeeded)
overload0:
    {
        bool onlyIfNeeded;
        status = napi_get_value_bool(env, args[0], &onlyIfNeeded);
        auto __arg0 = (bool)onlyIfNeeded;

        bool __ret = instance->Yield(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::AppConsole::Yield: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::WakeUpIdle
static napi_value callback_method_wxSharp_AppConsole_WakeUpIdle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->WakeUpIdle();
    printf("wxSharp::AppConsole::WakeUpIdle: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::set_argc
static napi_value callback_method_wxSharp_AppConsole_set_argc(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_argc(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_argc(__arg0);
    }
    printf("wxSharp::AppConsole::set_argc: %lu\n", argc);
    return _this;
}

// wxSharp::AppConsole::CheckBuildOptions
static napi_value callback_method_wxSharp_AppConsole_CheckBuildOptions(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::AppConsole* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool CheckBuildOptions(const char* optionsSignature, const char* componentName)
overload0:
    {
        size_t _optionsSignature_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_optionsSignature_size);

        char* optionsSignature = (char*) malloc(_optionsSignature_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_optionsSignature_size);
        assert(status == napi_ok);
        auto __arg0 = optionsSignature;

        size_t _componentName_size;
        status = napi_get_value_string_utf8(env, args[1], nullptr, 0, &_componentName_size);

        char* componentName = (char*) malloc(_componentName_size);
        status = napi_get_value_string_utf8(env, args[1], nullptr, 0, &_componentName_size);
        assert(status == napi_ok);
        auto __arg1 = componentName;

        bool __ret = ::wxSharp::AppConsole::CheckBuildOptions(__arg0, __arg1);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::AppConsole::CheckBuildOptions: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_AppConsole(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "CheckSignal", nullptr, callback_method_wxSharp_AppConsole_CheckSignal, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CallOnInit", nullptr, callback_method_wxSharp_AppConsole_CallOnInit, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnInit", nullptr, callback_method_wxSharp_AppConsole_OnInit, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnRun", nullptr, callback_method_wxSharp_AppConsole_OnRun, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnLaunched", nullptr, callback_method_wxSharp_AppConsole_OnLaunched, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnExit", nullptr, callback_method_wxSharp_AppConsole_OnExit, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CleanUp", nullptr, callback_method_wxSharp_AppConsole_CleanUp, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnFatalException", nullptr, callback_method_wxSharp_AppConsole_OnFatalException, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Exit", nullptr, callback_method_wxSharp_AppConsole_Exit, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetVendorName", nullptr, callback_method_wxSharp_AppConsole_SetVendorName, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetVendorDisplayName", nullptr, callback_method_wxSharp_AppConsole_SetVendorDisplayName, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetCLocale", nullptr, callback_method_wxSharp_AppConsole_SetCLocale, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnUnhandledException", nullptr, callback_method_wxSharp_AppConsole_OnUnhandledException, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnExceptionInMainLoop", nullptr, callback_method_wxSharp_AppConsole_OnExceptionInMainLoop, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "RethrowStoredException", nullptr, callback_method_wxSharp_AppConsole_RethrowStoredException, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ProcessPendingEvents", nullptr, callback_method_wxSharp_AppConsole_ProcessPendingEvents, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SuspendProcessingOfPendingEvents", nullptr, callback_method_wxSharp_AppConsole_SuspendProcessingOfPendingEvents, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ResumeProcessingOfPendingEvents", nullptr, callback_method_wxSharp_AppConsole_ResumeProcessingOfPendingEvents, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "RemovePendingEventHandler", nullptr, callback_method_wxSharp_AppConsole_RemovePendingEventHandler, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AppendPendingEventHandler", nullptr, callback_method_wxSharp_AppConsole_AppendPendingEventHandler, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DelayPendingEventHandler", nullptr, callback_method_wxSharp_AppConsole_DelayPendingEventHandler, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DeletePendingEvents", nullptr, callback_method_wxSharp_AppConsole_DeletePendingEvents, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ScheduleForDestruction", nullptr, callback_method_wxSharp_AppConsole_ScheduleForDestruction, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsScheduledForDestruction", nullptr, callback_method_wxSharp_AppConsole_IsScheduledForDestruction, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ExitMainLoop", nullptr, callback_method_wxSharp_AppConsole_ExitMainLoop, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Yield", nullptr, callback_method_wxSharp_AppConsole_Yield, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "WakeUpIdle", nullptr, callback_method_wxSharp_AppConsole_WakeUpIdle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_argc", nullptr, callback_method_wxSharp_AppConsole_set_argc, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CheckBuildOptions", nullptr, callback_method_wxSharp_AppConsole_CheckBuildOptions, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "AppConsole", NAPI_AUTO_LENGTH, callback_method_wxSharp_AppConsole_AppConsole, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_AppConsole_AppConsole);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_App_App(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_App_App;

// wxSharp::App::App
static napi_value callback_method_wxSharp_App_App(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::App* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // App()
overload0:
    {
        instance = new wxSharp::App();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_App_App, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::App::App: %lu\n", argc);
    return _this;
}

// wxSharp::App::SetNativeTheme
static napi_value callback_method_wxSharp_App_SetNativeTheme(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SetNativeTheme(const char* theme)
overload0:
    {
        size_t _theme_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_theme_size);

        char* theme = (char*) malloc(_theme_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_theme_size);
        assert(status == napi_ok);
        auto __arg0 = theme;

        bool __ret = instance->SetNativeTheme(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::App::SetNativeTheme: %lu\n", argc);
    return _this;
}

// wxSharp::App::OnInitGui
static napi_value callback_method_wxSharp_App_OnInitGui(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->OnInitGui();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::App::OnInitGui: %lu\n", argc);
    return _this;
}

// wxSharp::App::WakeUpIdle
static napi_value callback_method_wxSharp_App_WakeUpIdle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->WakeUpIdle();
    printf("wxSharp::App::WakeUpIdle: %lu\n", argc);
    return _this;
}

// wxSharp::App::CleanUp
static napi_value callback_method_wxSharp_App_CleanUp(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->CleanUp();
    printf("wxSharp::App::CleanUp: %lu\n", argc);
    return _this;
}

// wxSharp::App::DoIdle
static napi_value callback_method_wxSharp_App_DoIdle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->DoIdle();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::App::DoIdle: %lu\n", argc);
    return _this;
}

// wxSharp::App::OnRun
static napi_value callback_method_wxSharp_App_OnRun(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    int __ret = instance->OnRun();

    napi_value __result;
    status = napi_create_int32(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::App::OnRun: %lu\n", argc);
    return _this;
}

// wxSharp::App::OnExit
static napi_value callback_method_wxSharp_App_OnExit(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    int __ret = instance->OnExit();

    napi_value __result;
    status = napi_create_int32(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::App::OnExit: %lu\n", argc);
    return _this;
}

// wxSharp::App::SafeYield
static napi_value callback_method_wxSharp_App_SafeYield(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_BOOL(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SafeYield(::wxSharp::Window* win, bool onlyIfNeeded)
overload0:
    {
        wxSharp::Window* win_instance;
        status = napi_unwrap(env, _this, (void**) &win_instance);
        auto __arg0 = win_instance;

        bool onlyIfNeeded;
        status = napi_get_value_bool(env, args[1], &onlyIfNeeded);
        auto __arg1 = (bool)onlyIfNeeded;

        bool __ret = instance->SafeYield(__arg0, __arg1);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::App::SafeYield: %lu\n", argc);
    return _this;
}

// wxSharp::App::SafeYieldFor
static napi_value callback_method_wxSharp_App_SafeYieldFor(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SafeYieldFor(::wxSharp::Window* win, long eventsToProcess)
overload0:
    {
        wxSharp::Window* win_instance;
        status = napi_unwrap(env, _this, (void**) &win_instance);
        auto __arg0 = win_instance;

        int32_t eventsToProcess;
        status = napi_get_value_int32(env, args[1], &eventsToProcess);
        auto __arg1 = eventsToProcess;

        bool __ret = instance->SafeYieldFor(__arg0, __arg1);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::App::SafeYieldFor: %lu\n", argc);
    return _this;
}

// wxSharp::App::SetUseBestVisual
static napi_value callback_method_wxSharp_App_SetUseBestVisual(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_BOOL(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetUseBestVisual(bool flag, bool forceTrueColour)
overload0:
    {
        bool flag;
        status = napi_get_value_bool(env, args[0], &flag);
        auto __arg0 = (bool)flag;

        bool forceTrueColour;
        status = napi_get_value_bool(env, args[1], &forceTrueColour);
        auto __arg1 = (bool)forceTrueColour;

        instance->SetUseBestVisual(__arg0, __arg1);
    }
    printf("wxSharp::App::SetUseBestVisual: %lu\n", argc);
    return _this;
}

// wxSharp::App::SetActive
static napi_value callback_method_wxSharp_App_SetActive(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::App* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_OBJECT(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetActive(bool isActive, ::wxSharp::Window* lastFocus)
overload0:
    {
        bool isActive;
        status = napi_get_value_bool(env, args[0], &isActive);
        auto __arg0 = (bool)isActive;

        wxSharp::Window* lastFocus_instance;
        status = napi_unwrap(env, _this, (void**) &lastFocus_instance);
        auto __arg1 = lastFocus_instance;

        instance->SetActive(__arg0, __arg1);
    }
    printf("wxSharp::App::SetActive: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_App(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "SetNativeTheme", nullptr, callback_method_wxSharp_App_SetNativeTheme, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnInitGui", nullptr, callback_method_wxSharp_App_OnInitGui, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "WakeUpIdle", nullptr, callback_method_wxSharp_App_WakeUpIdle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CleanUp", nullptr, callback_method_wxSharp_App_CleanUp, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DoIdle", nullptr, callback_method_wxSharp_App_DoIdle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnRun", nullptr, callback_method_wxSharp_App_OnRun, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnExit", nullptr, callback_method_wxSharp_App_OnExit, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SafeYield", nullptr, callback_method_wxSharp_App_SafeYield, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SafeYieldFor", nullptr, callback_method_wxSharp_App_SafeYieldFor, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetUseBestVisual", nullptr, callback_method_wxSharp_App_SetUseBestVisual, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetActive", nullptr, callback_method_wxSharp_App_SetActive, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "App", NAPI_AUTO_LENGTH, callback_method_wxSharp_App_App, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_App_App);
    assert(status == napi_ok);

    return constructor;
}

// wxSharp::Exit
static napi_value callback_function_wxSharp_Exit(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    ::wxSharp::Exit();

    return nullptr;
}

static napi_value register_function_wxSharp_Exit(napi_env env)
{
    napi_status status;
    napi_value _wxSharp_Exit;
    status = napi_create_function(env, "Exit", NAPI_AUTO_LENGTH, callback_function_wxSharp_Exit, 0, &_wxSharp_Exit);
    assert(status == napi_ok);

    return _wxSharp_Exit;
}

// wxSharp::WakeUpIdle
static napi_value callback_function_wxSharp_WakeUpIdle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    ::wxSharp::WakeUpIdle();

    return nullptr;
}

static napi_value register_function_wxSharp_WakeUpIdle(napi_env env)
{
    napi_status status;
    napi_value _wxSharp_WakeUpIdle;
    status = napi_create_function(env, "WakeUpIdle", NAPI_AUTO_LENGTH, callback_function_wxSharp_WakeUpIdle, 0, &_wxSharp_WakeUpIdle);
    assert(status == napi_ok);

    return _wxSharp_WakeUpIdle;
}

// wxSharp::CreateApp
static napi_value callback_function_wxSharp_CreateApp(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    ::wxSharp::AppConsole* __ret = ::wxSharp::CreateApp();

    napi_value ____ret_ctor;
    status = napi_get_reference_value(env, ctor_wxSharp_AppConsole_AppConsole, &____ret_ctor);
    assert(status == napi_ok);

    napi_value ____ret_instance;
    status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
    assert(status == napi_ok);


    return ____ret_instance;

    return nullptr;
}

static napi_value register_function_wxSharp_CreateApp(napi_env env)
{
    napi_status status;
    napi_value _wxSharp_CreateApp;
    status = napi_create_function(env, "CreateApp", NAPI_AUTO_LENGTH, callback_function_wxSharp_CreateApp, 0, &_wxSharp_CreateApp);
    assert(status == napi_ok);

    return _wxSharp_CreateApp;
}

void register_wxsharp_app(napi_env env, napi_value exports)
{
    napi_value value;

    value = register_class_wxSharp_AppConsole(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "AppConsole", value));

    value = register_class_wxSharp_App(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "App", value));

    value = register_function_wxSharp_Exit(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "Exit", value));

    value = register_function_wxSharp_WakeUpIdle(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "WakeUpIdle", value));

    value = register_function_wxSharp_CreateApp(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "CreateApp", value));
}
