// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <wxsharp/containr.h>
#include <node/node_api.h>
#include <assert.h>
#include <stdio.h>
#include "NAPIHelpers.h"

extern napi_ref ctor_wxSharp_Event_Event;
extern napi_ref ctor_wxSharp_GraphicsContext_GraphicsContext;
extern napi_ref ctor_wxSharp_GraphicsPath_GraphicsPath;
extern napi_ref ctor_wxSharp_GraphicsMatrix_GraphicsMatrix;
extern napi_ref ctor_wxSharp_GraphicsPen_GraphicsPen;
extern napi_ref ctor_wxSharp_GraphicsBrush_GraphicsBrush;
extern napi_ref ctor_wxSharp_GraphicsFont_GraphicsFont;
extern napi_ref ctor_wxSharp_GraphicsBitmap_GraphicsBitmap;
extern napi_ref ctor_wxSharp_Color_Color;
extern napi_ref ctor_wxSharp_Size_Size;
extern napi_ref ctor_wxSharp_Rect_Rect;
extern napi_ref ctor_wxSharp_Point_Point;
extern napi_ref ctor_wxSharp_SizerItem_SizerItem;
extern napi_ref ctor_wxSharp_Window_Window;
extern napi_ref ctor_wxSharp_EvtHandler_EvtHandler;
extern napi_ref ctor_wxSharp_VisualAttributes_VisualAttributes;

static void dtor_wxSharp_ControlContainer_ControlContainer(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_ControlContainer_ControlContainer;

// wxSharp::ControlContainer::ControlContainer
static napi_value callback_method_wxSharp_ControlContainer_ControlContainer(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::ControlContainer* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ControlContainer(const ::wxSharp::ControlContainer& _0)
overload0:
    {
        wxSharp::ControlContainer* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto &__arg0 = *_0_instance;

        instance = new wxSharp::ControlContainer(__arg0);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_ControlContainer_ControlContainer, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::ControlContainer::ControlContainer: %lu\n", argc);
    return _this;
}

// wxSharp::ControlContainer::SetContainerWindow
static napi_value callback_method_wxSharp_ControlContainer_SetContainerWindow(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::ControlContainer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetContainerWindow(::wxSharp::Window* winParent)
overload0:
    {
        wxSharp::Window* winParent_instance;
        status = napi_unwrap(env, _this, (void**) &winParent_instance);
        auto __arg0 = winParent_instance;

        instance->SetContainerWindow(__arg0);
    }
    printf("wxSharp::ControlContainer::SetContainerWindow: %lu\n", argc);
    return _this;
}

// wxSharp::ControlContainer::DisableSelfFocus
static napi_value callback_method_wxSharp_ControlContainer_DisableSelfFocus(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::ControlContainer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->DisableSelfFocus();
    printf("wxSharp::ControlContainer::DisableSelfFocus: %lu\n", argc);
    return _this;
}

// wxSharp::ControlContainer::EnableSelfFocus
static napi_value callback_method_wxSharp_ControlContainer_EnableSelfFocus(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::ControlContainer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->EnableSelfFocus();
    printf("wxSharp::ControlContainer::EnableSelfFocus: %lu\n", argc);
    return _this;
}

// wxSharp::ControlContainer::DoSetFocus
static napi_value callback_method_wxSharp_ControlContainer_DoSetFocus(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::ControlContainer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->DoSetFocus();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::ControlContainer::DoSetFocus: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_ControlContainer(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "SetContainerWindow", nullptr, callback_method_wxSharp_ControlContainer_SetContainerWindow, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DisableSelfFocus", nullptr, callback_method_wxSharp_ControlContainer_DisableSelfFocus, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EnableSelfFocus", nullptr, callback_method_wxSharp_ControlContainer_EnableSelfFocus, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DoSetFocus", nullptr, callback_method_wxSharp_ControlContainer_DoSetFocus, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "ControlContainer", NAPI_AUTO_LENGTH, callback_method_wxSharp_ControlContainer_ControlContainer, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_ControlContainer_ControlContainer);
    assert(status == napi_ok);

    return constructor;
}

void register_wxsharp_containr(napi_env env, napi_value exports)
{
    napi_value value;

    value = register_class_wxSharp_ControlContainer(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "ControlContainer", value));
}
