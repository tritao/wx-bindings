// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <wxsharp/defs.h>
#include <node/node_api.h>
#include <assert.h>
#include <stdio.h>
#include "NAPIHelpers.h"

static napi_value register_enum_wxSharp_KeyType(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NONE
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // INTEGER
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    // STRING
    napi_value i_2;
    status = napi_create_uint32(env, 2, &i_2);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "INTEGER", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "STRING", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_Direction(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // LEFT
    napi_value i_0;
    status = napi_create_uint32(env, 0x10, &i_0);
    assert(status == napi_ok);

    // RIGHT
    napi_value i_1;
    status = napi_create_uint32(env, 0x20, &i_1);
    assert(status == napi_ok);

    // UP
    napi_value i_2;
    status = napi_create_uint32(env, 0x40, &i_2);
    assert(status == napi_ok);

    // DOWN
    napi_value i_3;
    status = napi_create_uint32(env, 0x80, &i_3);
    assert(status == napi_ok);

    // TOP
    napi_value i_4;
    status = napi_create_uint32(env, 64, &i_4);
    assert(status == napi_ok);

    // BOTTOM
    napi_value i_5;
    status = napi_create_uint32(env, 128, &i_5);
    assert(status == napi_ok);

    // NORTH
    napi_value i_6;
    status = napi_create_uint32(env, 64, &i_6);
    assert(status == napi_ok);

    // SOUTH
    napi_value i_7;
    status = napi_create_uint32(env, 128, &i_7);
    assert(status == napi_ok);

    // WEST
    napi_value i_8;
    status = napi_create_uint32(env, 16, &i_8);
    assert(status == napi_ok);

    // EAST
    napi_value i_9;
    status = napi_create_uint32(env, 32, &i_9);
    assert(status == napi_ok);

    // ALL
    napi_value i_10;
    status = napi_create_uint32(env, 240, &i_10);
    assert(status == napi_ok);

    // DIRECTION_MASK
    napi_value i_11;
    status = napi_create_uint32(env, 240, &i_11);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "LEFT", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "RIGHT", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "UP", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "DOWN", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "TOP", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "BOTTOM", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "NORTH", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "SOUTH", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "WEST", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "EAST", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr },
        { "ALL", nullptr, nullptr, nullptr, nullptr, i_10, attributes, nullptr },
        { "DIRECTION_MASK", nullptr, nullptr, nullptr, nullptr, i_11, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_BackgroundStyle(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // ERASE
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // SYSTEM
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    // PAINT
    napi_value i_2;
    status = napi_create_uint32(env, 2, &i_2);
    assert(status == napi_ok);

    // TRANSPARENT
    napi_value i_3;
    status = napi_create_uint32(env, 3, &i_3);
    assert(status == napi_ok);

    // COLOUR
    napi_value i_4;
    status = napi_create_uint32(env, 4, &i_4);
    assert(status == napi_ok);

    // CUSTOM
    napi_value i_5;
    status = napi_create_uint32(env, 2, &i_5);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "ERASE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "SYSTEM", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "PAINT", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "TRANSPARENT", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "COLOUR", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "CUSTOM", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_HitTest(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NOWHERE
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // SCROLLBAR_FIRST
    napi_value i_1;
    status = napi_create_uint32(env, 0, &i_1);
    assert(status == napi_ok);

    // SCROLLBAR_ARROW_LINE_1
    napi_value i_2;
    status = napi_create_uint32(env, 1, &i_2);
    assert(status == napi_ok);

    // SCROLLBAR_ARROW_LINE_2
    napi_value i_3;
    status = napi_create_uint32(env, 2, &i_3);
    assert(status == napi_ok);

    // SCROLLBAR_ARROW_PAGE_1
    napi_value i_4;
    status = napi_create_uint32(env, 3, &i_4);
    assert(status == napi_ok);

    // SCROLLBAR_ARROW_PAGE_2
    napi_value i_5;
    status = napi_create_uint32(env, 4, &i_5);
    assert(status == napi_ok);

    // SCROLLBAR_THUMB
    napi_value i_6;
    status = napi_create_uint32(env, 5, &i_6);
    assert(status == napi_ok);

    // SCROLLBAR_BAR_1
    napi_value i_7;
    status = napi_create_uint32(env, 6, &i_7);
    assert(status == napi_ok);

    // SCROLLBAR_BAR_2
    napi_value i_8;
    status = napi_create_uint32(env, 7, &i_8);
    assert(status == napi_ok);

    // SCROLLBAR_LAST
    napi_value i_9;
    status = napi_create_uint32(env, 8, &i_9);
    assert(status == napi_ok);

    // WINDOW_OUTSIDE
    napi_value i_10;
    status = napi_create_uint32(env, 9, &i_10);
    assert(status == napi_ok);

    // WINDOW_INSIDE
    napi_value i_11;
    status = napi_create_uint32(env, 10, &i_11);
    assert(status == napi_ok);

    // WINDOW_VERT_SCROLLBAR
    napi_value i_12;
    status = napi_create_uint32(env, 11, &i_12);
    assert(status == napi_ok);

    // WINDOW_HORZ_SCROLLBAR
    napi_value i_13;
    status = napi_create_uint32(env, 12, &i_13);
    assert(status == napi_ok);

    // WINDOW_CORNER
    napi_value i_14;
    status = napi_create_uint32(env, 13, &i_14);
    assert(status == napi_ok);

    // MAX
    napi_value i_15;
    status = napi_create_uint32(env, 14, &i_15);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NOWHERE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "SCROLLBAR_FIRST", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "SCROLLBAR_ARROW_LINE_1", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "SCROLLBAR_ARROW_LINE_2", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "SCROLLBAR_ARROW_PAGE_1", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "SCROLLBAR_ARROW_PAGE_2", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "SCROLLBAR_THUMB", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "SCROLLBAR_BAR_1", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "SCROLLBAR_BAR_2", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "SCROLLBAR_LAST", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr },
        { "WINDOW_OUTSIDE", nullptr, nullptr, nullptr, nullptr, i_10, attributes, nullptr },
        { "WINDOW_INSIDE", nullptr, nullptr, nullptr, nullptr, i_11, attributes, nullptr },
        { "WINDOW_VERT_SCROLLBAR", nullptr, nullptr, nullptr, nullptr, i_12, attributes, nullptr },
        { "WINDOW_HORZ_SCROLLBAR", nullptr, nullptr, nullptr, nullptr, i_13, attributes, nullptr },
        { "WINDOW_CORNER", nullptr, nullptr, nullptr, nullptr, i_14, attributes, nullptr },
        { "MAX", nullptr, nullptr, nullptr, nullptr, i_15, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_Border(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // DEFAULT
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // NONE
    napi_value i_1;
    status = napi_create_uint32(env, 0x200000, &i_1);
    assert(status == napi_ok);

    // STATIC
    napi_value i_2;
    status = napi_create_uint32(env, 0x1000000, &i_2);
    assert(status == napi_ok);

    // SIMPLE
    napi_value i_3;
    status = napi_create_uint32(env, 0x2000000, &i_3);
    assert(status == napi_ok);

    // RAISED
    napi_value i_4;
    status = napi_create_uint32(env, 0x4000000, &i_4);
    assert(status == napi_ok);

    // SUNKEN
    napi_value i_5;
    status = napi_create_uint32(env, 0x8000000, &i_5);
    assert(status == napi_ok);

    // DOUBLE
    napi_value i_6;
    status = napi_create_uint32(env, 0x10000000, &i_6);
    assert(status == napi_ok);

    // THEME
    napi_value i_7;
    status = napi_create_uint32(env, 268435456, &i_7);
    assert(status == napi_ok);

    // MASK
    napi_value i_8;
    status = napi_create_uint32(env, 0x1f200000, &i_8);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "DEFAULT", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "STATIC", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "SIMPLE", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "RAISED", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "SUNKEN", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "DOUBLE", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "THEME", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "MASK", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_SizerOrientation(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // HORIZONTAL
    napi_value i_0;
    status = napi_create_uint32(env, 0x4, &i_0);
    assert(status == napi_ok);

    // VERTICAL
    napi_value i_1;
    status = napi_create_uint32(env, 0x8, &i_1);
    assert(status == napi_ok);

    // BOTH
    napi_value i_2;
    status = napi_create_uint32(env, 12, &i_2);
    assert(status == napi_ok);

    // ORIENTATION_MASK
    napi_value i_3;
    status = napi_create_uint32(env, 12, &i_3);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "HORIZONTAL", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "VERTICAL", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "BOTH", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "ORIENTATION_MASK", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_Alignment(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // INVALID
    napi_value i_0;
    status = napi_create_int32(env, -1, &i_0);
    assert(status == napi_ok);

    // NOT
    napi_value i_1;
    status = napi_create_int32(env, 0, &i_1);
    assert(status == napi_ok);

    // CENTER_HORIZONTAL
    napi_value i_2;
    status = napi_create_int32(env, 256, &i_2);
    assert(status == napi_ok);

    // CENTRE_HORIZONTAL
    napi_value i_3;
    status = napi_create_int32(env, 256, &i_3);
    assert(status == napi_ok);

    // LEFT
    napi_value i_4;
    status = napi_create_int32(env, 0, &i_4);
    assert(status == napi_ok);

    // TOP
    napi_value i_5;
    status = napi_create_int32(env, 0, &i_5);
    assert(status == napi_ok);

    // RIGHT
    napi_value i_6;
    status = napi_create_int32(env, 512, &i_6);
    assert(status == napi_ok);

    // BOTTOM
    napi_value i_7;
    status = napi_create_int32(env, 1024, &i_7);
    assert(status == napi_ok);

    // CENTER_VERTICAL
    napi_value i_8;
    status = napi_create_int32(env, 2048, &i_8);
    assert(status == napi_ok);

    // CENTRE_VERTICAL
    napi_value i_9;
    status = napi_create_int32(env, 2048, &i_9);
    assert(status == napi_ok);

    // CENTER
    napi_value i_10;
    status = napi_create_int32(env, 2304, &i_10);
    assert(status == napi_ok);

    // CENTRE
    napi_value i_11;
    status = napi_create_int32(env, 2304, &i_11);
    assert(status == napi_ok);

    // MASK
    napi_value i_12;
    status = napi_create_int32(env, 3840, &i_12);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "INVALID", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "NOT", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "CENTER_HORIZONTAL", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "CENTRE_HORIZONTAL", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "LEFT", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "TOP", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "RIGHT", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "BOTTOM", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "CENTER_VERTICAL", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "CENTRE_VERTICAL", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr },
        { "CENTER", nullptr, nullptr, nullptr, nullptr, i_10, attributes, nullptr },
        { "CENTRE", nullptr, nullptr, nullptr, nullptr, i_11, attributes, nullptr },
        { "MASK", nullptr, nullptr, nullptr, nullptr, i_12, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_CheckBoxState(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // UNCHECKED
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // CHECKED
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    // UNDETERMINED
    napi_value i_2;
    status = napi_create_uint32(env, 2, &i_2);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "UNCHECKED", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "CHECKED", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "UNDETERMINED", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_DataFormatId(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // INVALID
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // TEXT
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    // BITMAP
    napi_value i_2;
    status = napi_create_uint32(env, 2, &i_2);
    assert(status == napi_ok);

    // METAFILE
    napi_value i_3;
    status = napi_create_uint32(env, 3, &i_3);
    assert(status == napi_ok);

    // SYLK
    napi_value i_4;
    status = napi_create_uint32(env, 4, &i_4);
    assert(status == napi_ok);

    // DIF
    napi_value i_5;
    status = napi_create_uint32(env, 5, &i_5);
    assert(status == napi_ok);

    // TIFF
    napi_value i_6;
    status = napi_create_uint32(env, 6, &i_6);
    assert(status == napi_ok);

    // OEMTEXT
    napi_value i_7;
    status = napi_create_uint32(env, 7, &i_7);
    assert(status == napi_ok);

    // DIB
    napi_value i_8;
    status = napi_create_uint32(env, 8, &i_8);
    assert(status == napi_ok);

    // PALETTE
    napi_value i_9;
    status = napi_create_uint32(env, 9, &i_9);
    assert(status == napi_ok);

    // PENDATA
    napi_value i_10;
    status = napi_create_uint32(env, 10, &i_10);
    assert(status == napi_ok);

    // RIFF
    napi_value i_11;
    status = napi_create_uint32(env, 11, &i_11);
    assert(status == napi_ok);

    // WAVE
    napi_value i_12;
    status = napi_create_uint32(env, 12, &i_12);
    assert(status == napi_ok);

    // UNICODETEXT
    napi_value i_13;
    status = napi_create_uint32(env, 13, &i_13);
    assert(status == napi_ok);

    // ENHMETAFILE
    napi_value i_14;
    status = napi_create_uint32(env, 14, &i_14);
    assert(status == napi_ok);

    // FILENAME
    napi_value i_15;
    status = napi_create_uint32(env, 15, &i_15);
    assert(status == napi_ok);

    // LOCALE
    napi_value i_16;
    status = napi_create_uint32(env, 16, &i_16);
    assert(status == napi_ok);

    // PRIVATE
    napi_value i_17;
    status = napi_create_uint32(env, 20, &i_17);
    assert(status == napi_ok);

    // HTML
    napi_value i_18;
    status = napi_create_uint32(env, 30, &i_18);
    assert(status == napi_ok);

    // MAX
    napi_value i_19;
    status = napi_create_uint32(env, 31, &i_19);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "INVALID", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "TEXT", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "BITMAP", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "METAFILE", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "SYLK", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "DIF", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "TIFF", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "OEMTEXT", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "DIB", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "PALETTE", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr },
        { "PENDATA", nullptr, nullptr, nullptr, nullptr, i_10, attributes, nullptr },
        { "RIFF", nullptr, nullptr, nullptr, nullptr, i_11, attributes, nullptr },
        { "WAVE", nullptr, nullptr, nullptr, nullptr, i_12, attributes, nullptr },
        { "UNICODETEXT", nullptr, nullptr, nullptr, nullptr, i_13, attributes, nullptr },
        { "ENHMETAFILE", nullptr, nullptr, nullptr, nullptr, i_14, attributes, nullptr },
        { "FILENAME", nullptr, nullptr, nullptr, nullptr, i_15, attributes, nullptr },
        { "LOCALE", nullptr, nullptr, nullptr, nullptr, i_16, attributes, nullptr },
        { "PRIVATE", nullptr, nullptr, nullptr, nullptr, i_17, attributes, nullptr },
        { "HTML", nullptr, nullptr, nullptr, nullptr, i_18, attributes, nullptr },
        { "MAX", nullptr, nullptr, nullptr, nullptr, i_19, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_GeometryCentre(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // CENTRE
    napi_value i_0;
    status = napi_create_uint32(env, 0x1, &i_0);
    assert(status == napi_ok);

    // CENTER
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "CENTRE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "CENTER", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_HatchStyle(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // INVALID
    napi_value i_0;
    status = napi_create_int32(env, -1, &i_0);
    assert(status == napi_ok);

    // FIRST
    napi_value i_1;
    status = napi_create_int32(env, 111, &i_1);
    assert(status == napi_ok);

    // BDIAGONAL
    napi_value i_2;
    status = napi_create_int32(env, 111, &i_2);
    assert(status == napi_ok);

    // CROSSDIAG
    napi_value i_3;
    status = napi_create_int32(env, 112, &i_3);
    assert(status == napi_ok);

    // FDIAGONAL
    napi_value i_4;
    status = napi_create_int32(env, 113, &i_4);
    assert(status == napi_ok);

    // CROSS
    napi_value i_5;
    status = napi_create_int32(env, 114, &i_5);
    assert(status == napi_ok);

    // HORIZONTAL
    napi_value i_6;
    status = napi_create_int32(env, 115, &i_6);
    assert(status == napi_ok);

    // VERTICAL
    napi_value i_7;
    status = napi_create_int32(env, 116, &i_7);
    assert(status == napi_ok);

    // LAST
    napi_value i_8;
    status = napi_create_int32(env, 116, &i_8);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "INVALID", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "FIRST", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "BDIAGONAL", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "CROSSDIAG", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "FDIAGONAL", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "CROSS", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "HORIZONTAL", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "VERTICAL", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "LAST", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_ItemKind(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // SEPARATOR
    napi_value i_0;
    status = napi_create_int32(env, -1, &i_0);
    assert(status == napi_ok);

    // NORMAL
    napi_value i_1;
    status = napi_create_int32(env, 0, &i_1);
    assert(status == napi_ok);

    // CHECK
    napi_value i_2;
    status = napi_create_int32(env, 1, &i_2);
    assert(status == napi_ok);

    // RADIO
    napi_value i_3;
    status = napi_create_int32(env, 2, &i_3);
    assert(status == napi_ok);

    // DROPDOWN
    napi_value i_4;
    status = napi_create_int32(env, 3, &i_4);
    assert(status == napi_ok);

    // MAX
    napi_value i_5;
    status = napi_create_int32(env, 4, &i_5);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "SEPARATOR", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "NORMAL", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "CHECK", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "RADIO", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "DROPDOWN", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "MAX", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_KeyCode(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NONE
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // CONTROL_A
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    // CONTROL_B
    napi_value i_2;
    status = napi_create_uint32(env, 2, &i_2);
    assert(status == napi_ok);

    // CONTROL_C
    napi_value i_3;
    status = napi_create_uint32(env, 3, &i_3);
    assert(status == napi_ok);

    // CONTROL_D
    napi_value i_4;
    status = napi_create_uint32(env, 4, &i_4);
    assert(status == napi_ok);

    // CONTROL_E
    napi_value i_5;
    status = napi_create_uint32(env, 5, &i_5);
    assert(status == napi_ok);

    // CONTROL_F
    napi_value i_6;
    status = napi_create_uint32(env, 6, &i_6);
    assert(status == napi_ok);

    // CONTROL_G
    napi_value i_7;
    status = napi_create_uint32(env, 7, &i_7);
    assert(status == napi_ok);

    // CONTROL_H
    napi_value i_8;
    status = napi_create_uint32(env, 8, &i_8);
    assert(status == napi_ok);

    // CONTROL_I
    napi_value i_9;
    status = napi_create_uint32(env, 9, &i_9);
    assert(status == napi_ok);

    // CONTROL_J
    napi_value i_10;
    status = napi_create_uint32(env, 10, &i_10);
    assert(status == napi_ok);

    // CONTROL_K
    napi_value i_11;
    status = napi_create_uint32(env, 11, &i_11);
    assert(status == napi_ok);

    // CONTROL_L
    napi_value i_12;
    status = napi_create_uint32(env, 12, &i_12);
    assert(status == napi_ok);

    // CONTROL_M
    napi_value i_13;
    status = napi_create_uint32(env, 13, &i_13);
    assert(status == napi_ok);

    // CONTROL_N
    napi_value i_14;
    status = napi_create_uint32(env, 14, &i_14);
    assert(status == napi_ok);

    // CONTROL_O
    napi_value i_15;
    status = napi_create_uint32(env, 15, &i_15);
    assert(status == napi_ok);

    // CONTROL_P
    napi_value i_16;
    status = napi_create_uint32(env, 16, &i_16);
    assert(status == napi_ok);

    // CONTROL_Q
    napi_value i_17;
    status = napi_create_uint32(env, 17, &i_17);
    assert(status == napi_ok);

    // CONTROL_R
    napi_value i_18;
    status = napi_create_uint32(env, 18, &i_18);
    assert(status == napi_ok);

    // CONTROL_S
    napi_value i_19;
    status = napi_create_uint32(env, 19, &i_19);
    assert(status == napi_ok);

    // CONTROL_T
    napi_value i_20;
    status = napi_create_uint32(env, 20, &i_20);
    assert(status == napi_ok);

    // CONTROL_U
    napi_value i_21;
    status = napi_create_uint32(env, 21, &i_21);
    assert(status == napi_ok);

    // CONTROL_V
    napi_value i_22;
    status = napi_create_uint32(env, 22, &i_22);
    assert(status == napi_ok);

    // CONTROL_W
    napi_value i_23;
    status = napi_create_uint32(env, 23, &i_23);
    assert(status == napi_ok);

    // CONTROL_X
    napi_value i_24;
    status = napi_create_uint32(env, 24, &i_24);
    assert(status == napi_ok);

    // CONTROL_Y
    napi_value i_25;
    status = napi_create_uint32(env, 25, &i_25);
    assert(status == napi_ok);

    // CONTROL_Z
    napi_value i_26;
    status = napi_create_uint32(env, 26, &i_26);
    assert(status == napi_ok);

    // BACK
    napi_value i_27;
    status = napi_create_uint32(env, 8, &i_27);
    assert(status == napi_ok);

    // TAB
    napi_value i_28;
    status = napi_create_uint32(env, 9, &i_28);
    assert(status == napi_ok);

    // RETURN
    napi_value i_29;
    status = napi_create_uint32(env, 13, &i_29);
    assert(status == napi_ok);

    // ESCAPE
    napi_value i_30;
    status = napi_create_uint32(env, 27, &i_30);
    assert(status == napi_ok);

    // SPACE
    napi_value i_31;
    status = napi_create_uint32(env, 32, &i_31);
    assert(status == napi_ok);

    // DELETE
    napi_value i_32;
    status = napi_create_uint32(env, 127, &i_32);
    assert(status == napi_ok);

    // START
    napi_value i_33;
    status = napi_create_uint32(env, 300, &i_33);
    assert(status == napi_ok);

    // LBUTTON
    napi_value i_34;
    status = napi_create_uint32(env, 301, &i_34);
    assert(status == napi_ok);

    // RBUTTON
    napi_value i_35;
    status = napi_create_uint32(env, 302, &i_35);
    assert(status == napi_ok);

    // CANCEL
    napi_value i_36;
    status = napi_create_uint32(env, 303, &i_36);
    assert(status == napi_ok);

    // MBUTTON
    napi_value i_37;
    status = napi_create_uint32(env, 304, &i_37);
    assert(status == napi_ok);

    // CLEAR
    napi_value i_38;
    status = napi_create_uint32(env, 305, &i_38);
    assert(status == napi_ok);

    // SHIFT
    napi_value i_39;
    status = napi_create_uint32(env, 306, &i_39);
    assert(status == napi_ok);

    // ALT
    napi_value i_40;
    status = napi_create_uint32(env, 307, &i_40);
    assert(status == napi_ok);

    // CONTROL
    napi_value i_41;
    status = napi_create_uint32(env, 308, &i_41);
    assert(status == napi_ok);

    // MENU
    napi_value i_42;
    status = napi_create_uint32(env, 309, &i_42);
    assert(status == napi_ok);

    // PAUSE
    napi_value i_43;
    status = napi_create_uint32(env, 310, &i_43);
    assert(status == napi_ok);

    // CAPITAL
    napi_value i_44;
    status = napi_create_uint32(env, 311, &i_44);
    assert(status == napi_ok);

    // END
    napi_value i_45;
    status = napi_create_uint32(env, 312, &i_45);
    assert(status == napi_ok);

    // HOME
    napi_value i_46;
    status = napi_create_uint32(env, 313, &i_46);
    assert(status == napi_ok);

    // LEFT
    napi_value i_47;
    status = napi_create_uint32(env, 314, &i_47);
    assert(status == napi_ok);

    // UP
    napi_value i_48;
    status = napi_create_uint32(env, 315, &i_48);
    assert(status == napi_ok);

    // RIGHT
    napi_value i_49;
    status = napi_create_uint32(env, 316, &i_49);
    assert(status == napi_ok);

    // DOWN
    napi_value i_50;
    status = napi_create_uint32(env, 317, &i_50);
    assert(status == napi_ok);

    // SELECT
    napi_value i_51;
    status = napi_create_uint32(env, 318, &i_51);
    assert(status == napi_ok);

    // PRINT
    napi_value i_52;
    status = napi_create_uint32(env, 319, &i_52);
    assert(status == napi_ok);

    // EXECUTE
    napi_value i_53;
    status = napi_create_uint32(env, 320, &i_53);
    assert(status == napi_ok);

    // SNAPSHOT
    napi_value i_54;
    status = napi_create_uint32(env, 321, &i_54);
    assert(status == napi_ok);

    // INSERT
    napi_value i_55;
    status = napi_create_uint32(env, 322, &i_55);
    assert(status == napi_ok);

    // HELP
    napi_value i_56;
    status = napi_create_uint32(env, 323, &i_56);
    assert(status == napi_ok);

    // NUMPAD0
    napi_value i_57;
    status = napi_create_uint32(env, 324, &i_57);
    assert(status == napi_ok);

    // NUMPAD1
    napi_value i_58;
    status = napi_create_uint32(env, 325, &i_58);
    assert(status == napi_ok);

    // NUMPAD2
    napi_value i_59;
    status = napi_create_uint32(env, 326, &i_59);
    assert(status == napi_ok);

    // NUMPAD3
    napi_value i_60;
    status = napi_create_uint32(env, 327, &i_60);
    assert(status == napi_ok);

    // NUMPAD4
    napi_value i_61;
    status = napi_create_uint32(env, 328, &i_61);
    assert(status == napi_ok);

    // NUMPAD5
    napi_value i_62;
    status = napi_create_uint32(env, 329, &i_62);
    assert(status == napi_ok);

    // NUMPAD6
    napi_value i_63;
    status = napi_create_uint32(env, 330, &i_63);
    assert(status == napi_ok);

    // NUMPAD7
    napi_value i_64;
    status = napi_create_uint32(env, 331, &i_64);
    assert(status == napi_ok);

    // NUMPAD8
    napi_value i_65;
    status = napi_create_uint32(env, 332, &i_65);
    assert(status == napi_ok);

    // NUMPAD9
    napi_value i_66;
    status = napi_create_uint32(env, 333, &i_66);
    assert(status == napi_ok);

    // MULTIPLY
    napi_value i_67;
    status = napi_create_uint32(env, 334, &i_67);
    assert(status == napi_ok);

    // ADD
    napi_value i_68;
    status = napi_create_uint32(env, 335, &i_68);
    assert(status == napi_ok);

    // SEPARATOR
    napi_value i_69;
    status = napi_create_uint32(env, 336, &i_69);
    assert(status == napi_ok);

    // SUBTRACT
    napi_value i_70;
    status = napi_create_uint32(env, 337, &i_70);
    assert(status == napi_ok);

    // DECIMAL
    napi_value i_71;
    status = napi_create_uint32(env, 338, &i_71);
    assert(status == napi_ok);

    // DIVIDE
    napi_value i_72;
    status = napi_create_uint32(env, 339, &i_72);
    assert(status == napi_ok);

    // F1
    napi_value i_73;
    status = napi_create_uint32(env, 340, &i_73);
    assert(status == napi_ok);

    // F2
    napi_value i_74;
    status = napi_create_uint32(env, 341, &i_74);
    assert(status == napi_ok);

    // F3
    napi_value i_75;
    status = napi_create_uint32(env, 342, &i_75);
    assert(status == napi_ok);

    // F4
    napi_value i_76;
    status = napi_create_uint32(env, 343, &i_76);
    assert(status == napi_ok);

    // F5
    napi_value i_77;
    status = napi_create_uint32(env, 344, &i_77);
    assert(status == napi_ok);

    // F6
    napi_value i_78;
    status = napi_create_uint32(env, 345, &i_78);
    assert(status == napi_ok);

    // F7
    napi_value i_79;
    status = napi_create_uint32(env, 346, &i_79);
    assert(status == napi_ok);

    // F8
    napi_value i_80;
    status = napi_create_uint32(env, 347, &i_80);
    assert(status == napi_ok);

    // F9
    napi_value i_81;
    status = napi_create_uint32(env, 348, &i_81);
    assert(status == napi_ok);

    // F10
    napi_value i_82;
    status = napi_create_uint32(env, 349, &i_82);
    assert(status == napi_ok);

    // F11
    napi_value i_83;
    status = napi_create_uint32(env, 350, &i_83);
    assert(status == napi_ok);

    // F12
    napi_value i_84;
    status = napi_create_uint32(env, 351, &i_84);
    assert(status == napi_ok);

    // F13
    napi_value i_85;
    status = napi_create_uint32(env, 352, &i_85);
    assert(status == napi_ok);

    // F14
    napi_value i_86;
    status = napi_create_uint32(env, 353, &i_86);
    assert(status == napi_ok);

    // F15
    napi_value i_87;
    status = napi_create_uint32(env, 354, &i_87);
    assert(status == napi_ok);

    // F16
    napi_value i_88;
    status = napi_create_uint32(env, 355, &i_88);
    assert(status == napi_ok);

    // F17
    napi_value i_89;
    status = napi_create_uint32(env, 356, &i_89);
    assert(status == napi_ok);

    // F18
    napi_value i_90;
    status = napi_create_uint32(env, 357, &i_90);
    assert(status == napi_ok);

    // F19
    napi_value i_91;
    status = napi_create_uint32(env, 358, &i_91);
    assert(status == napi_ok);

    // F20
    napi_value i_92;
    status = napi_create_uint32(env, 359, &i_92);
    assert(status == napi_ok);

    // F21
    napi_value i_93;
    status = napi_create_uint32(env, 360, &i_93);
    assert(status == napi_ok);

    // F22
    napi_value i_94;
    status = napi_create_uint32(env, 361, &i_94);
    assert(status == napi_ok);

    // F23
    napi_value i_95;
    status = napi_create_uint32(env, 362, &i_95);
    assert(status == napi_ok);

    // F24
    napi_value i_96;
    status = napi_create_uint32(env, 363, &i_96);
    assert(status == napi_ok);

    // NUMLOCK
    napi_value i_97;
    status = napi_create_uint32(env, 364, &i_97);
    assert(status == napi_ok);

    // SCROLL
    napi_value i_98;
    status = napi_create_uint32(env, 365, &i_98);
    assert(status == napi_ok);

    // PAGEUP
    napi_value i_99;
    status = napi_create_uint32(env, 366, &i_99);
    assert(status == napi_ok);

    // PAGEDOWN
    napi_value i_100;
    status = napi_create_uint32(env, 367, &i_100);
    assert(status == napi_ok);

    // NUMPAD_SPACE
    napi_value i_101;
    status = napi_create_uint32(env, 368, &i_101);
    assert(status == napi_ok);

    // NUMPAD_TAB
    napi_value i_102;
    status = napi_create_uint32(env, 369, &i_102);
    assert(status == napi_ok);

    // NUMPAD_ENTER
    napi_value i_103;
    status = napi_create_uint32(env, 370, &i_103);
    assert(status == napi_ok);

    // NUMPAD_F1
    napi_value i_104;
    status = napi_create_uint32(env, 371, &i_104);
    assert(status == napi_ok);

    // NUMPAD_F2
    napi_value i_105;
    status = napi_create_uint32(env, 372, &i_105);
    assert(status == napi_ok);

    // NUMPAD_F3
    napi_value i_106;
    status = napi_create_uint32(env, 373, &i_106);
    assert(status == napi_ok);

    // NUMPAD_F4
    napi_value i_107;
    status = napi_create_uint32(env, 374, &i_107);
    assert(status == napi_ok);

    // NUMPAD_HOME
    napi_value i_108;
    status = napi_create_uint32(env, 375, &i_108);
    assert(status == napi_ok);

    // NUMPAD_LEFT
    napi_value i_109;
    status = napi_create_uint32(env, 376, &i_109);
    assert(status == napi_ok);

    // NUMPAD_UP
    napi_value i_110;
    status = napi_create_uint32(env, 377, &i_110);
    assert(status == napi_ok);

    // NUMPAD_RIGHT
    napi_value i_111;
    status = napi_create_uint32(env, 378, &i_111);
    assert(status == napi_ok);

    // NUMPAD_DOWN
    napi_value i_112;
    status = napi_create_uint32(env, 379, &i_112);
    assert(status == napi_ok);

    // NUMPAD_PAGEUP
    napi_value i_113;
    status = napi_create_uint32(env, 380, &i_113);
    assert(status == napi_ok);

    // NUMPAD_PAGEDOWN
    napi_value i_114;
    status = napi_create_uint32(env, 381, &i_114);
    assert(status == napi_ok);

    // NUMPAD_END
    napi_value i_115;
    status = napi_create_uint32(env, 382, &i_115);
    assert(status == napi_ok);

    // NUMPAD_BEGIN
    napi_value i_116;
    status = napi_create_uint32(env, 383, &i_116);
    assert(status == napi_ok);

    // NUMPAD_INSERT
    napi_value i_117;
    status = napi_create_uint32(env, 384, &i_117);
    assert(status == napi_ok);

    // NUMPAD_DELETE
    napi_value i_118;
    status = napi_create_uint32(env, 385, &i_118);
    assert(status == napi_ok);

    // NUMPAD_EQUAL
    napi_value i_119;
    status = napi_create_uint32(env, 386, &i_119);
    assert(status == napi_ok);

    // NUMPAD_MULTIPLY
    napi_value i_120;
    status = napi_create_uint32(env, 387, &i_120);
    assert(status == napi_ok);

    // NUMPAD_ADD
    napi_value i_121;
    status = napi_create_uint32(env, 388, &i_121);
    assert(status == napi_ok);

    // NUMPAD_SEPARATOR
    napi_value i_122;
    status = napi_create_uint32(env, 389, &i_122);
    assert(status == napi_ok);

    // NUMPAD_SUBTRACT
    napi_value i_123;
    status = napi_create_uint32(env, 390, &i_123);
    assert(status == napi_ok);

    // NUMPAD_DECIMAL
    napi_value i_124;
    status = napi_create_uint32(env, 391, &i_124);
    assert(status == napi_ok);

    // NUMPAD_DIVIDE
    napi_value i_125;
    status = napi_create_uint32(env, 392, &i_125);
    assert(status == napi_ok);

    // WINDOWS_LEFT
    napi_value i_126;
    status = napi_create_uint32(env, 393, &i_126);
    assert(status == napi_ok);

    // WINDOWS_RIGHT
    napi_value i_127;
    status = napi_create_uint32(env, 394, &i_127);
    assert(status == napi_ok);

    // WINDOWS_MENU
    napi_value i_128;
    status = napi_create_uint32(env, 395, &i_128);
    assert(status == napi_ok);

    // RAW_CONTROL
    napi_value i_129;
    status = napi_create_uint32(env, 308, &i_129);
    assert(status == napi_ok);

    // COMMAND
    napi_value i_130;
    status = napi_create_uint32(env, 308, &i_130);
    assert(status == napi_ok);

    // SPECIAL1
    napi_value i_131;
    status = napi_create_uint32(env, 397, &i_131);
    assert(status == napi_ok);

    // SPECIAL2
    napi_value i_132;
    status = napi_create_uint32(env, 398, &i_132);
    assert(status == napi_ok);

    // SPECIAL3
    napi_value i_133;
    status = napi_create_uint32(env, 399, &i_133);
    assert(status == napi_ok);

    // SPECIAL4
    napi_value i_134;
    status = napi_create_uint32(env, 400, &i_134);
    assert(status == napi_ok);

    // SPECIAL5
    napi_value i_135;
    status = napi_create_uint32(env, 401, &i_135);
    assert(status == napi_ok);

    // SPECIAL6
    napi_value i_136;
    status = napi_create_uint32(env, 402, &i_136);
    assert(status == napi_ok);

    // SPECIAL7
    napi_value i_137;
    status = napi_create_uint32(env, 403, &i_137);
    assert(status == napi_ok);

    // SPECIAL8
    napi_value i_138;
    status = napi_create_uint32(env, 404, &i_138);
    assert(status == napi_ok);

    // SPECIAL9
    napi_value i_139;
    status = napi_create_uint32(env, 405, &i_139);
    assert(status == napi_ok);

    // SPECIAL10
    napi_value i_140;
    status = napi_create_uint32(env, 406, &i_140);
    assert(status == napi_ok);

    // SPECIAL11
    napi_value i_141;
    status = napi_create_uint32(env, 407, &i_141);
    assert(status == napi_ok);

    // SPECIAL12
    napi_value i_142;
    status = napi_create_uint32(env, 408, &i_142);
    assert(status == napi_ok);

    // SPECIAL13
    napi_value i_143;
    status = napi_create_uint32(env, 409, &i_143);
    assert(status == napi_ok);

    // SPECIAL14
    napi_value i_144;
    status = napi_create_uint32(env, 410, &i_144);
    assert(status == napi_ok);

    // SPECIAL15
    napi_value i_145;
    status = napi_create_uint32(env, 411, &i_145);
    assert(status == napi_ok);

    // SPECIAL16
    napi_value i_146;
    status = napi_create_uint32(env, 412, &i_146);
    assert(status == napi_ok);

    // SPECIAL17
    napi_value i_147;
    status = napi_create_uint32(env, 413, &i_147);
    assert(status == napi_ok);

    // SPECIAL18
    napi_value i_148;
    status = napi_create_uint32(env, 414, &i_148);
    assert(status == napi_ok);

    // SPECIAL19
    napi_value i_149;
    status = napi_create_uint32(env, 415, &i_149);
    assert(status == napi_ok);

    // SPECIAL20
    napi_value i_150;
    status = napi_create_uint32(env, 416, &i_150);
    assert(status == napi_ok);

    // BROWSER_BACK
    napi_value i_151;
    status = napi_create_uint32(env, 417, &i_151);
    assert(status == napi_ok);

    // BROWSER_FORWARD
    napi_value i_152;
    status = napi_create_uint32(env, 418, &i_152);
    assert(status == napi_ok);

    // BROWSER_REFRESH
    napi_value i_153;
    status = napi_create_uint32(env, 419, &i_153);
    assert(status == napi_ok);

    // BROWSER_STOP
    napi_value i_154;
    status = napi_create_uint32(env, 420, &i_154);
    assert(status == napi_ok);

    // BROWSER_SEARCH
    napi_value i_155;
    status = napi_create_uint32(env, 421, &i_155);
    assert(status == napi_ok);

    // BROWSER_FAVORITES
    napi_value i_156;
    status = napi_create_uint32(env, 422, &i_156);
    assert(status == napi_ok);

    // BROWSER_HOME
    napi_value i_157;
    status = napi_create_uint32(env, 423, &i_157);
    assert(status == napi_ok);

    // VOLUME_MUTE
    napi_value i_158;
    status = napi_create_uint32(env, 424, &i_158);
    assert(status == napi_ok);

    // VOLUME_DOWN
    napi_value i_159;
    status = napi_create_uint32(env, 425, &i_159);
    assert(status == napi_ok);

    // VOLUME_UP
    napi_value i_160;
    status = napi_create_uint32(env, 426, &i_160);
    assert(status == napi_ok);

    // MEDIA_NEXT_TRACK
    napi_value i_161;
    status = napi_create_uint32(env, 427, &i_161);
    assert(status == napi_ok);

    // MEDIA_PREV_TRACK
    napi_value i_162;
    status = napi_create_uint32(env, 428, &i_162);
    assert(status == napi_ok);

    // MEDIA_STOP
    napi_value i_163;
    status = napi_create_uint32(env, 429, &i_163);
    assert(status == napi_ok);

    // MEDIA_PLAY_PAUSE
    napi_value i_164;
    status = napi_create_uint32(env, 430, &i_164);
    assert(status == napi_ok);

    // LAUNCH_MAIL
    napi_value i_165;
    status = napi_create_uint32(env, 431, &i_165);
    assert(status == napi_ok);

    // LAUNCH_APP1
    napi_value i_166;
    status = napi_create_uint32(env, 432, &i_166);
    assert(status == napi_ok);

    // LAUNCH_APP2
    napi_value i_167;
    status = napi_create_uint32(env, 433, &i_167);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "CONTROL_A", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "CONTROL_B", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "CONTROL_C", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "CONTROL_D", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "CONTROL_E", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "CONTROL_F", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "CONTROL_G", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "CONTROL_H", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "CONTROL_I", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr },
        { "CONTROL_J", nullptr, nullptr, nullptr, nullptr, i_10, attributes, nullptr },
        { "CONTROL_K", nullptr, nullptr, nullptr, nullptr, i_11, attributes, nullptr },
        { "CONTROL_L", nullptr, nullptr, nullptr, nullptr, i_12, attributes, nullptr },
        { "CONTROL_M", nullptr, nullptr, nullptr, nullptr, i_13, attributes, nullptr },
        { "CONTROL_N", nullptr, nullptr, nullptr, nullptr, i_14, attributes, nullptr },
        { "CONTROL_O", nullptr, nullptr, nullptr, nullptr, i_15, attributes, nullptr },
        { "CONTROL_P", nullptr, nullptr, nullptr, nullptr, i_16, attributes, nullptr },
        { "CONTROL_Q", nullptr, nullptr, nullptr, nullptr, i_17, attributes, nullptr },
        { "CONTROL_R", nullptr, nullptr, nullptr, nullptr, i_18, attributes, nullptr },
        { "CONTROL_S", nullptr, nullptr, nullptr, nullptr, i_19, attributes, nullptr },
        { "CONTROL_T", nullptr, nullptr, nullptr, nullptr, i_20, attributes, nullptr },
        { "CONTROL_U", nullptr, nullptr, nullptr, nullptr, i_21, attributes, nullptr },
        { "CONTROL_V", nullptr, nullptr, nullptr, nullptr, i_22, attributes, nullptr },
        { "CONTROL_W", nullptr, nullptr, nullptr, nullptr, i_23, attributes, nullptr },
        { "CONTROL_X", nullptr, nullptr, nullptr, nullptr, i_24, attributes, nullptr },
        { "CONTROL_Y", nullptr, nullptr, nullptr, nullptr, i_25, attributes, nullptr },
        { "CONTROL_Z", nullptr, nullptr, nullptr, nullptr, i_26, attributes, nullptr },
        { "BACK", nullptr, nullptr, nullptr, nullptr, i_27, attributes, nullptr },
        { "TAB", nullptr, nullptr, nullptr, nullptr, i_28, attributes, nullptr },
        { "RETURN", nullptr, nullptr, nullptr, nullptr, i_29, attributes, nullptr },
        { "ESCAPE", nullptr, nullptr, nullptr, nullptr, i_30, attributes, nullptr },
        { "SPACE", nullptr, nullptr, nullptr, nullptr, i_31, attributes, nullptr },
        { "DELETE", nullptr, nullptr, nullptr, nullptr, i_32, attributes, nullptr },
        { "START", nullptr, nullptr, nullptr, nullptr, i_33, attributes, nullptr },
        { "LBUTTON", nullptr, nullptr, nullptr, nullptr, i_34, attributes, nullptr },
        { "RBUTTON", nullptr, nullptr, nullptr, nullptr, i_35, attributes, nullptr },
        { "CANCEL", nullptr, nullptr, nullptr, nullptr, i_36, attributes, nullptr },
        { "MBUTTON", nullptr, nullptr, nullptr, nullptr, i_37, attributes, nullptr },
        { "CLEAR", nullptr, nullptr, nullptr, nullptr, i_38, attributes, nullptr },
        { "SHIFT", nullptr, nullptr, nullptr, nullptr, i_39, attributes, nullptr },
        { "ALT", nullptr, nullptr, nullptr, nullptr, i_40, attributes, nullptr },
        { "CONTROL", nullptr, nullptr, nullptr, nullptr, i_41, attributes, nullptr },
        { "MENU", nullptr, nullptr, nullptr, nullptr, i_42, attributes, nullptr },
        { "PAUSE", nullptr, nullptr, nullptr, nullptr, i_43, attributes, nullptr },
        { "CAPITAL", nullptr, nullptr, nullptr, nullptr, i_44, attributes, nullptr },
        { "END", nullptr, nullptr, nullptr, nullptr, i_45, attributes, nullptr },
        { "HOME", nullptr, nullptr, nullptr, nullptr, i_46, attributes, nullptr },
        { "LEFT", nullptr, nullptr, nullptr, nullptr, i_47, attributes, nullptr },
        { "UP", nullptr, nullptr, nullptr, nullptr, i_48, attributes, nullptr },
        { "RIGHT", nullptr, nullptr, nullptr, nullptr, i_49, attributes, nullptr },
        { "DOWN", nullptr, nullptr, nullptr, nullptr, i_50, attributes, nullptr },
        { "SELECT", nullptr, nullptr, nullptr, nullptr, i_51, attributes, nullptr },
        { "PRINT", nullptr, nullptr, nullptr, nullptr, i_52, attributes, nullptr },
        { "EXECUTE", nullptr, nullptr, nullptr, nullptr, i_53, attributes, nullptr },
        { "SNAPSHOT", nullptr, nullptr, nullptr, nullptr, i_54, attributes, nullptr },
        { "INSERT", nullptr, nullptr, nullptr, nullptr, i_55, attributes, nullptr },
        { "HELP", nullptr, nullptr, nullptr, nullptr, i_56, attributes, nullptr },
        { "NUMPAD0", nullptr, nullptr, nullptr, nullptr, i_57, attributes, nullptr },
        { "NUMPAD1", nullptr, nullptr, nullptr, nullptr, i_58, attributes, nullptr },
        { "NUMPAD2", nullptr, nullptr, nullptr, nullptr, i_59, attributes, nullptr },
        { "NUMPAD3", nullptr, nullptr, nullptr, nullptr, i_60, attributes, nullptr },
        { "NUMPAD4", nullptr, nullptr, nullptr, nullptr, i_61, attributes, nullptr },
        { "NUMPAD5", nullptr, nullptr, nullptr, nullptr, i_62, attributes, nullptr },
        { "NUMPAD6", nullptr, nullptr, nullptr, nullptr, i_63, attributes, nullptr },
        { "NUMPAD7", nullptr, nullptr, nullptr, nullptr, i_64, attributes, nullptr },
        { "NUMPAD8", nullptr, nullptr, nullptr, nullptr, i_65, attributes, nullptr },
        { "NUMPAD9", nullptr, nullptr, nullptr, nullptr, i_66, attributes, nullptr },
        { "MULTIPLY", nullptr, nullptr, nullptr, nullptr, i_67, attributes, nullptr },
        { "ADD", nullptr, nullptr, nullptr, nullptr, i_68, attributes, nullptr },
        { "SEPARATOR", nullptr, nullptr, nullptr, nullptr, i_69, attributes, nullptr },
        { "SUBTRACT", nullptr, nullptr, nullptr, nullptr, i_70, attributes, nullptr },
        { "DECIMAL", nullptr, nullptr, nullptr, nullptr, i_71, attributes, nullptr },
        { "DIVIDE", nullptr, nullptr, nullptr, nullptr, i_72, attributes, nullptr },
        { "F1", nullptr, nullptr, nullptr, nullptr, i_73, attributes, nullptr },
        { "F2", nullptr, nullptr, nullptr, nullptr, i_74, attributes, nullptr },
        { "F3", nullptr, nullptr, nullptr, nullptr, i_75, attributes, nullptr },
        { "F4", nullptr, nullptr, nullptr, nullptr, i_76, attributes, nullptr },
        { "F5", nullptr, nullptr, nullptr, nullptr, i_77, attributes, nullptr },
        { "F6", nullptr, nullptr, nullptr, nullptr, i_78, attributes, nullptr },
        { "F7", nullptr, nullptr, nullptr, nullptr, i_79, attributes, nullptr },
        { "F8", nullptr, nullptr, nullptr, nullptr, i_80, attributes, nullptr },
        { "F9", nullptr, nullptr, nullptr, nullptr, i_81, attributes, nullptr },
        { "F10", nullptr, nullptr, nullptr, nullptr, i_82, attributes, nullptr },
        { "F11", nullptr, nullptr, nullptr, nullptr, i_83, attributes, nullptr },
        { "F12", nullptr, nullptr, nullptr, nullptr, i_84, attributes, nullptr },
        { "F13", nullptr, nullptr, nullptr, nullptr, i_85, attributes, nullptr },
        { "F14", nullptr, nullptr, nullptr, nullptr, i_86, attributes, nullptr },
        { "F15", nullptr, nullptr, nullptr, nullptr, i_87, attributes, nullptr },
        { "F16", nullptr, nullptr, nullptr, nullptr, i_88, attributes, nullptr },
        { "F17", nullptr, nullptr, nullptr, nullptr, i_89, attributes, nullptr },
        { "F18", nullptr, nullptr, nullptr, nullptr, i_90, attributes, nullptr },
        { "F19", nullptr, nullptr, nullptr, nullptr, i_91, attributes, nullptr },
        { "F20", nullptr, nullptr, nullptr, nullptr, i_92, attributes, nullptr },
        { "F21", nullptr, nullptr, nullptr, nullptr, i_93, attributes, nullptr },
        { "F22", nullptr, nullptr, nullptr, nullptr, i_94, attributes, nullptr },
        { "F23", nullptr, nullptr, nullptr, nullptr, i_95, attributes, nullptr },
        { "F24", nullptr, nullptr, nullptr, nullptr, i_96, attributes, nullptr },
        { "NUMLOCK", nullptr, nullptr, nullptr, nullptr, i_97, attributes, nullptr },
        { "SCROLL", nullptr, nullptr, nullptr, nullptr, i_98, attributes, nullptr },
        { "PAGEUP", nullptr, nullptr, nullptr, nullptr, i_99, attributes, nullptr },
        { "PAGEDOWN", nullptr, nullptr, nullptr, nullptr, i_100, attributes, nullptr },
        { "NUMPAD_SPACE", nullptr, nullptr, nullptr, nullptr, i_101, attributes, nullptr },
        { "NUMPAD_TAB", nullptr, nullptr, nullptr, nullptr, i_102, attributes, nullptr },
        { "NUMPAD_ENTER", nullptr, nullptr, nullptr, nullptr, i_103, attributes, nullptr },
        { "NUMPAD_F1", nullptr, nullptr, nullptr, nullptr, i_104, attributes, nullptr },
        { "NUMPAD_F2", nullptr, nullptr, nullptr, nullptr, i_105, attributes, nullptr },
        { "NUMPAD_F3", nullptr, nullptr, nullptr, nullptr, i_106, attributes, nullptr },
        { "NUMPAD_F4", nullptr, nullptr, nullptr, nullptr, i_107, attributes, nullptr },
        { "NUMPAD_HOME", nullptr, nullptr, nullptr, nullptr, i_108, attributes, nullptr },
        { "NUMPAD_LEFT", nullptr, nullptr, nullptr, nullptr, i_109, attributes, nullptr },
        { "NUMPAD_UP", nullptr, nullptr, nullptr, nullptr, i_110, attributes, nullptr },
        { "NUMPAD_RIGHT", nullptr, nullptr, nullptr, nullptr, i_111, attributes, nullptr },
        { "NUMPAD_DOWN", nullptr, nullptr, nullptr, nullptr, i_112, attributes, nullptr },
        { "NUMPAD_PAGEUP", nullptr, nullptr, nullptr, nullptr, i_113, attributes, nullptr },
        { "NUMPAD_PAGEDOWN", nullptr, nullptr, nullptr, nullptr, i_114, attributes, nullptr },
        { "NUMPAD_END", nullptr, nullptr, nullptr, nullptr, i_115, attributes, nullptr },
        { "NUMPAD_BEGIN", nullptr, nullptr, nullptr, nullptr, i_116, attributes, nullptr },
        { "NUMPAD_INSERT", nullptr, nullptr, nullptr, nullptr, i_117, attributes, nullptr },
        { "NUMPAD_DELETE", nullptr, nullptr, nullptr, nullptr, i_118, attributes, nullptr },
        { "NUMPAD_EQUAL", nullptr, nullptr, nullptr, nullptr, i_119, attributes, nullptr },
        { "NUMPAD_MULTIPLY", nullptr, nullptr, nullptr, nullptr, i_120, attributes, nullptr },
        { "NUMPAD_ADD", nullptr, nullptr, nullptr, nullptr, i_121, attributes, nullptr },
        { "NUMPAD_SEPARATOR", nullptr, nullptr, nullptr, nullptr, i_122, attributes, nullptr },
        { "NUMPAD_SUBTRACT", nullptr, nullptr, nullptr, nullptr, i_123, attributes, nullptr },
        { "NUMPAD_DECIMAL", nullptr, nullptr, nullptr, nullptr, i_124, attributes, nullptr },
        { "NUMPAD_DIVIDE", nullptr, nullptr, nullptr, nullptr, i_125, attributes, nullptr },
        { "WINDOWS_LEFT", nullptr, nullptr, nullptr, nullptr, i_126, attributes, nullptr },
        { "WINDOWS_RIGHT", nullptr, nullptr, nullptr, nullptr, i_127, attributes, nullptr },
        { "WINDOWS_MENU", nullptr, nullptr, nullptr, nullptr, i_128, attributes, nullptr },
        { "RAW_CONTROL", nullptr, nullptr, nullptr, nullptr, i_129, attributes, nullptr },
        { "COMMAND", nullptr, nullptr, nullptr, nullptr, i_130, attributes, nullptr },
        { "SPECIAL1", nullptr, nullptr, nullptr, nullptr, i_131, attributes, nullptr },
        { "SPECIAL2", nullptr, nullptr, nullptr, nullptr, i_132, attributes, nullptr },
        { "SPECIAL3", nullptr, nullptr, nullptr, nullptr, i_133, attributes, nullptr },
        { "SPECIAL4", nullptr, nullptr, nullptr, nullptr, i_134, attributes, nullptr },
        { "SPECIAL5", nullptr, nullptr, nullptr, nullptr, i_135, attributes, nullptr },
        { "SPECIAL6", nullptr, nullptr, nullptr, nullptr, i_136, attributes, nullptr },
        { "SPECIAL7", nullptr, nullptr, nullptr, nullptr, i_137, attributes, nullptr },
        { "SPECIAL8", nullptr, nullptr, nullptr, nullptr, i_138, attributes, nullptr },
        { "SPECIAL9", nullptr, nullptr, nullptr, nullptr, i_139, attributes, nullptr },
        { "SPECIAL10", nullptr, nullptr, nullptr, nullptr, i_140, attributes, nullptr },
        { "SPECIAL11", nullptr, nullptr, nullptr, nullptr, i_141, attributes, nullptr },
        { "SPECIAL12", nullptr, nullptr, nullptr, nullptr, i_142, attributes, nullptr },
        { "SPECIAL13", nullptr, nullptr, nullptr, nullptr, i_143, attributes, nullptr },
        { "SPECIAL14", nullptr, nullptr, nullptr, nullptr, i_144, attributes, nullptr },
        { "SPECIAL15", nullptr, nullptr, nullptr, nullptr, i_145, attributes, nullptr },
        { "SPECIAL16", nullptr, nullptr, nullptr, nullptr, i_146, attributes, nullptr },
        { "SPECIAL17", nullptr, nullptr, nullptr, nullptr, i_147, attributes, nullptr },
        { "SPECIAL18", nullptr, nullptr, nullptr, nullptr, i_148, attributes, nullptr },
        { "SPECIAL19", nullptr, nullptr, nullptr, nullptr, i_149, attributes, nullptr },
        { "SPECIAL20", nullptr, nullptr, nullptr, nullptr, i_150, attributes, nullptr },
        { "BROWSER_BACK", nullptr, nullptr, nullptr, nullptr, i_151, attributes, nullptr },
        { "BROWSER_FORWARD", nullptr, nullptr, nullptr, nullptr, i_152, attributes, nullptr },
        { "BROWSER_REFRESH", nullptr, nullptr, nullptr, nullptr, i_153, attributes, nullptr },
        { "BROWSER_STOP", nullptr, nullptr, nullptr, nullptr, i_154, attributes, nullptr },
        { "BROWSER_SEARCH", nullptr, nullptr, nullptr, nullptr, i_155, attributes, nullptr },
        { "BROWSER_FAVORITES", nullptr, nullptr, nullptr, nullptr, i_156, attributes, nullptr },
        { "BROWSER_HOME", nullptr, nullptr, nullptr, nullptr, i_157, attributes, nullptr },
        { "VOLUME_MUTE", nullptr, nullptr, nullptr, nullptr, i_158, attributes, nullptr },
        { "VOLUME_DOWN", nullptr, nullptr, nullptr, nullptr, i_159, attributes, nullptr },
        { "VOLUME_UP", nullptr, nullptr, nullptr, nullptr, i_160, attributes, nullptr },
        { "MEDIA_NEXT_TRACK", nullptr, nullptr, nullptr, nullptr, i_161, attributes, nullptr },
        { "MEDIA_PREV_TRACK", nullptr, nullptr, nullptr, nullptr, i_162, attributes, nullptr },
        { "MEDIA_STOP", nullptr, nullptr, nullptr, nullptr, i_163, attributes, nullptr },
        { "MEDIA_PLAY_PAUSE", nullptr, nullptr, nullptr, nullptr, i_164, attributes, nullptr },
        { "LAUNCH_MAIL", nullptr, nullptr, nullptr, nullptr, i_165, attributes, nullptr },
        { "LAUNCH_APP1", nullptr, nullptr, nullptr, nullptr, i_166, attributes, nullptr },
        { "LAUNCH_APP2", nullptr, nullptr, nullptr, nullptr, i_167, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_KeyModifier(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NONE
    napi_value i_0;
    status = napi_create_uint32(env, 0x0, &i_0);
    assert(status == napi_ok);

    // ALT
    napi_value i_1;
    status = napi_create_uint32(env, 0x1, &i_1);
    assert(status == napi_ok);

    // CONTROL
    napi_value i_2;
    status = napi_create_uint32(env, 0x2, &i_2);
    assert(status == napi_ok);

    // ALTGR
    napi_value i_3;
    status = napi_create_uint32(env, 3, &i_3);
    assert(status == napi_ok);

    // SHIFT
    napi_value i_4;
    status = napi_create_uint32(env, 0x4, &i_4);
    assert(status == napi_ok);

    // META
    napi_value i_5;
    status = napi_create_uint32(env, 0x8, &i_5);
    assert(status == napi_ok);

    // WIN
    napi_value i_6;
    status = napi_create_uint32(env, 8, &i_6);
    assert(status == napi_ok);

    // RAW_CONTROL
    napi_value i_7;
    status = napi_create_uint32(env, 2, &i_7);
    assert(status == napi_ok);

    // CMD
    napi_value i_8;
    status = napi_create_uint32(env, 2, &i_8);
    assert(status == napi_ok);

    // ALL
    napi_value i_9;
    status = napi_create_uint32(env, 0xffff, &i_9);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "ALT", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "CONTROL", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "ALTGR", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "SHIFT", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "META", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "WIN", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "RAW_CONTROL", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "CMD", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "ALL", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_SizerFlagBits(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // FIXED_MINSIZE
    napi_value i_0;
    status = napi_create_uint32(env, 0x8000, &i_0);
    assert(status == napi_ok);

    // RESERVE_SPACE_EVEN_IF_HIDDEN
    napi_value i_1;
    status = napi_create_uint32(env, 0x2, &i_1);
    assert(status == napi_ok);

    // SIZER_FLAG_BITS_MASK
    napi_value i_2;
    status = napi_create_uint32(env, 0x8002, &i_2);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "FIXED_MINSIZE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "RESERVE_SPACE_EVEN_IF_HIDDEN", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "SIZER_FLAG_BITS_MASK", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_StandardID(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // AUTO_LOWEST
    napi_value i_0;
    status = napi_create_int32(env, -1000000, &i_0);
    assert(status == napi_ok);

    // AUTO_HIGHEST
    napi_value i_1;
    status = napi_create_int32(env, -2000, &i_1);
    assert(status == napi_ok);

    // NONE
    napi_value i_2;
    status = napi_create_int32(env, -3, &i_2);
    assert(status == napi_ok);

    // SEPARATOR
    napi_value i_3;
    status = napi_create_int32(env, -2, &i_3);
    assert(status == napi_ok);

    // ANY
    napi_value i_4;
    status = napi_create_int32(env, -1, &i_4);
    assert(status == napi_ok);

    // LOWEST
    napi_value i_5;
    status = napi_create_int32(env, 4999, &i_5);
    assert(status == napi_ok);

    // OPEN
    napi_value i_6;
    status = napi_create_int32(env, 5000, &i_6);
    assert(status == napi_ok);

    // CLOSE
    napi_value i_7;
    status = napi_create_int32(env, 5001, &i_7);
    assert(status == napi_ok);

    // NEW
    napi_value i_8;
    status = napi_create_int32(env, 5002, &i_8);
    assert(status == napi_ok);

    // SAVE
    napi_value i_9;
    status = napi_create_int32(env, 5003, &i_9);
    assert(status == napi_ok);

    // SAVEAS
    napi_value i_10;
    status = napi_create_int32(env, 5004, &i_10);
    assert(status == napi_ok);

    // REVERT
    napi_value i_11;
    status = napi_create_int32(env, 5005, &i_11);
    assert(status == napi_ok);

    // EXIT
    napi_value i_12;
    status = napi_create_int32(env, 5006, &i_12);
    assert(status == napi_ok);

    // UNDO
    napi_value i_13;
    status = napi_create_int32(env, 5007, &i_13);
    assert(status == napi_ok);

    // REDO
    napi_value i_14;
    status = napi_create_int32(env, 5008, &i_14);
    assert(status == napi_ok);

    // HELP
    napi_value i_15;
    status = napi_create_int32(env, 5009, &i_15);
    assert(status == napi_ok);

    // PRINT
    napi_value i_16;
    status = napi_create_int32(env, 5010, &i_16);
    assert(status == napi_ok);

    // PRINT_SETUP
    napi_value i_17;
    status = napi_create_int32(env, 5011, &i_17);
    assert(status == napi_ok);

    // PAGE_SETUP
    napi_value i_18;
    status = napi_create_int32(env, 5012, &i_18);
    assert(status == napi_ok);

    // PREVIEW
    napi_value i_19;
    status = napi_create_int32(env, 5013, &i_19);
    assert(status == napi_ok);

    // ABOUT
    napi_value i_20;
    status = napi_create_int32(env, 5014, &i_20);
    assert(status == napi_ok);

    // HELP_CONTENTS
    napi_value i_21;
    status = napi_create_int32(env, 5015, &i_21);
    assert(status == napi_ok);

    // HELP_INDEX
    napi_value i_22;
    status = napi_create_int32(env, 5016, &i_22);
    assert(status == napi_ok);

    // HELP_SEARCH
    napi_value i_23;
    status = napi_create_int32(env, 5017, &i_23);
    assert(status == napi_ok);

    // HELP_COMMANDS
    napi_value i_24;
    status = napi_create_int32(env, 5018, &i_24);
    assert(status == napi_ok);

    // HELP_PROCEDURES
    napi_value i_25;
    status = napi_create_int32(env, 5019, &i_25);
    assert(status == napi_ok);

    // HELP_CONTEXT
    napi_value i_26;
    status = napi_create_int32(env, 5020, &i_26);
    assert(status == napi_ok);

    // CLOSE_ALL
    napi_value i_27;
    status = napi_create_int32(env, 5021, &i_27);
    assert(status == napi_ok);

    // PREFERENCES
    napi_value i_28;
    status = napi_create_int32(env, 5022, &i_28);
    assert(status == napi_ok);

    // EDIT
    napi_value i_29;
    status = napi_create_int32(env, 5030, &i_29);
    assert(status == napi_ok);

    // CUT
    napi_value i_30;
    status = napi_create_int32(env, 5031, &i_30);
    assert(status == napi_ok);

    // COPY
    napi_value i_31;
    status = napi_create_int32(env, 5032, &i_31);
    assert(status == napi_ok);

    // PASTE
    napi_value i_32;
    status = napi_create_int32(env, 5033, &i_32);
    assert(status == napi_ok);

    // CLEAR
    napi_value i_33;
    status = napi_create_int32(env, 5034, &i_33);
    assert(status == napi_ok);

    // FIND
    napi_value i_34;
    status = napi_create_int32(env, 5035, &i_34);
    assert(status == napi_ok);

    // DUPLICATE
    napi_value i_35;
    status = napi_create_int32(env, 5036, &i_35);
    assert(status == napi_ok);

    // SELECTALL
    napi_value i_36;
    status = napi_create_int32(env, 5037, &i_36);
    assert(status == napi_ok);

    // DELETE
    napi_value i_37;
    status = napi_create_int32(env, 5038, &i_37);
    assert(status == napi_ok);

    // REPLACE
    napi_value i_38;
    status = napi_create_int32(env, 5039, &i_38);
    assert(status == napi_ok);

    // REPLACE_ALL
    napi_value i_39;
    status = napi_create_int32(env, 5040, &i_39);
    assert(status == napi_ok);

    // PROPERTIES
    napi_value i_40;
    status = napi_create_int32(env, 5041, &i_40);
    assert(status == napi_ok);

    // VIEW_DETAILS
    napi_value i_41;
    status = napi_create_int32(env, 5042, &i_41);
    assert(status == napi_ok);

    // VIEW_LARGEICONS
    napi_value i_42;
    status = napi_create_int32(env, 5043, &i_42);
    assert(status == napi_ok);

    // VIEW_SMALLICONS
    napi_value i_43;
    status = napi_create_int32(env, 5044, &i_43);
    assert(status == napi_ok);

    // VIEW_LIST
    napi_value i_44;
    status = napi_create_int32(env, 5045, &i_44);
    assert(status == napi_ok);

    // VIEW_SORTDATE
    napi_value i_45;
    status = napi_create_int32(env, 5046, &i_45);
    assert(status == napi_ok);

    // VIEW_SORTNAME
    napi_value i_46;
    status = napi_create_int32(env, 5047, &i_46);
    assert(status == napi_ok);

    // VIEW_SORTSIZE
    napi_value i_47;
    status = napi_create_int32(env, 5048, &i_47);
    assert(status == napi_ok);

    // VIEW_SORTTYPE
    napi_value i_48;
    status = napi_create_int32(env, 5049, &i_48);
    assert(status == napi_ok);

    // FILE
    napi_value i_49;
    status = napi_create_int32(env, 5050, &i_49);
    assert(status == napi_ok);

    // FILE1
    napi_value i_50;
    status = napi_create_int32(env, 5051, &i_50);
    assert(status == napi_ok);

    // FILE2
    napi_value i_51;
    status = napi_create_int32(env, 5052, &i_51);
    assert(status == napi_ok);

    // FILE3
    napi_value i_52;
    status = napi_create_int32(env, 5053, &i_52);
    assert(status == napi_ok);

    // FILE4
    napi_value i_53;
    status = napi_create_int32(env, 5054, &i_53);
    assert(status == napi_ok);

    // FILE5
    napi_value i_54;
    status = napi_create_int32(env, 5055, &i_54);
    assert(status == napi_ok);

    // FILE6
    napi_value i_55;
    status = napi_create_int32(env, 5056, &i_55);
    assert(status == napi_ok);

    // FILE7
    napi_value i_56;
    status = napi_create_int32(env, 5057, &i_56);
    assert(status == napi_ok);

    // FILE8
    napi_value i_57;
    status = napi_create_int32(env, 5058, &i_57);
    assert(status == napi_ok);

    // FILE9
    napi_value i_58;
    status = napi_create_int32(env, 5059, &i_58);
    assert(status == napi_ok);

    // OK
    napi_value i_59;
    status = napi_create_int32(env, 5100, &i_59);
    assert(status == napi_ok);

    // CANCEL
    napi_value i_60;
    status = napi_create_int32(env, 5101, &i_60);
    assert(status == napi_ok);

    // APPLY
    napi_value i_61;
    status = napi_create_int32(env, 5102, &i_61);
    assert(status == napi_ok);

    // YES
    napi_value i_62;
    status = napi_create_int32(env, 5103, &i_62);
    assert(status == napi_ok);

    // NO
    napi_value i_63;
    status = napi_create_int32(env, 5104, &i_63);
    assert(status == napi_ok);

    // STATIC
    napi_value i_64;
    status = napi_create_int32(env, 5105, &i_64);
    assert(status == napi_ok);

    // FORWARD
    napi_value i_65;
    status = napi_create_int32(env, 5106, &i_65);
    assert(status == napi_ok);

    // BACKWARD
    napi_value i_66;
    status = napi_create_int32(env, 5107, &i_66);
    assert(status == napi_ok);

    // DEFAULT
    napi_value i_67;
    status = napi_create_int32(env, 5108, &i_67);
    assert(status == napi_ok);

    // MORE
    napi_value i_68;
    status = napi_create_int32(env, 5109, &i_68);
    assert(status == napi_ok);

    // SETUP
    napi_value i_69;
    status = napi_create_int32(env, 5110, &i_69);
    assert(status == napi_ok);

    // RESET
    napi_value i_70;
    status = napi_create_int32(env, 5111, &i_70);
    assert(status == napi_ok);

    // CONTEXT_HELP
    napi_value i_71;
    status = napi_create_int32(env, 5112, &i_71);
    assert(status == napi_ok);

    // YESTOALL
    napi_value i_72;
    status = napi_create_int32(env, 5113, &i_72);
    assert(status == napi_ok);

    // NOTOALL
    napi_value i_73;
    status = napi_create_int32(env, 5114, &i_73);
    assert(status == napi_ok);

    // ABORT
    napi_value i_74;
    status = napi_create_int32(env, 5115, &i_74);
    assert(status == napi_ok);

    // RETRY
    napi_value i_75;
    status = napi_create_int32(env, 5116, &i_75);
    assert(status == napi_ok);

    // IGNORE
    napi_value i_76;
    status = napi_create_int32(env, 5117, &i_76);
    assert(status == napi_ok);

    // ADD
    napi_value i_77;
    status = napi_create_int32(env, 5118, &i_77);
    assert(status == napi_ok);

    // REMOVE
    napi_value i_78;
    status = napi_create_int32(env, 5119, &i_78);
    assert(status == napi_ok);

    // UP
    napi_value i_79;
    status = napi_create_int32(env, 5120, &i_79);
    assert(status == napi_ok);

    // DOWN
    napi_value i_80;
    status = napi_create_int32(env, 5121, &i_80);
    assert(status == napi_ok);

    // HOME
    napi_value i_81;
    status = napi_create_int32(env, 5122, &i_81);
    assert(status == napi_ok);

    // REFRESH
    napi_value i_82;
    status = napi_create_int32(env, 5123, &i_82);
    assert(status == napi_ok);

    // STOP
    napi_value i_83;
    status = napi_create_int32(env, 5124, &i_83);
    assert(status == napi_ok);

    // INDEX
    napi_value i_84;
    status = napi_create_int32(env, 5125, &i_84);
    assert(status == napi_ok);

    // BOLD
    napi_value i_85;
    status = napi_create_int32(env, 5126, &i_85);
    assert(status == napi_ok);

    // ITALIC
    napi_value i_86;
    status = napi_create_int32(env, 5127, &i_86);
    assert(status == napi_ok);

    // JUSTIFY_CENTER
    napi_value i_87;
    status = napi_create_int32(env, 5128, &i_87);
    assert(status == napi_ok);

    // JUSTIFY_FILL
    napi_value i_88;
    status = napi_create_int32(env, 5129, &i_88);
    assert(status == napi_ok);

    // JUSTIFY_RIGHT
    napi_value i_89;
    status = napi_create_int32(env, 5130, &i_89);
    assert(status == napi_ok);

    // JUSTIFY_LEFT
    napi_value i_90;
    status = napi_create_int32(env, 5131, &i_90);
    assert(status == napi_ok);

    // UNDERLINE
    napi_value i_91;
    status = napi_create_int32(env, 5132, &i_91);
    assert(status == napi_ok);

    // INDENT
    napi_value i_92;
    status = napi_create_int32(env, 5133, &i_92);
    assert(status == napi_ok);

    // UNINDENT
    napi_value i_93;
    status = napi_create_int32(env, 5134, &i_93);
    assert(status == napi_ok);

    // ZOOM_100
    napi_value i_94;
    status = napi_create_int32(env, 5135, &i_94);
    assert(status == napi_ok);

    // ZOOM_FIT
    napi_value i_95;
    status = napi_create_int32(env, 5136, &i_95);
    assert(status == napi_ok);

    // ZOOM_IN
    napi_value i_96;
    status = napi_create_int32(env, 5137, &i_96);
    assert(status == napi_ok);

    // ZOOM_OUT
    napi_value i_97;
    status = napi_create_int32(env, 5138, &i_97);
    assert(status == napi_ok);

    // UNDELETE
    napi_value i_98;
    status = napi_create_int32(env, 5139, &i_98);
    assert(status == napi_ok);

    // REVERT_TO_SAVED
    napi_value i_99;
    status = napi_create_int32(env, 5140, &i_99);
    assert(status == napi_ok);

    // CDROM
    napi_value i_100;
    status = napi_create_int32(env, 5141, &i_100);
    assert(status == napi_ok);

    // CONVERT
    napi_value i_101;
    status = napi_create_int32(env, 5142, &i_101);
    assert(status == napi_ok);

    // EXECUTE
    napi_value i_102;
    status = napi_create_int32(env, 5143, &i_102);
    assert(status == napi_ok);

    // FLOPPY
    napi_value i_103;
    status = napi_create_int32(env, 5144, &i_103);
    assert(status == napi_ok);

    // HARDDISK
    napi_value i_104;
    status = napi_create_int32(env, 5145, &i_104);
    assert(status == napi_ok);

    // BOTTOM
    napi_value i_105;
    status = napi_create_int32(env, 5146, &i_105);
    assert(status == napi_ok);

    // FIRST
    napi_value i_106;
    status = napi_create_int32(env, 5147, &i_106);
    assert(status == napi_ok);

    // LAST
    napi_value i_107;
    status = napi_create_int32(env, 5148, &i_107);
    assert(status == napi_ok);

    // TOP
    napi_value i_108;
    status = napi_create_int32(env, 5149, &i_108);
    assert(status == napi_ok);

    // INFO
    napi_value i_109;
    status = napi_create_int32(env, 5150, &i_109);
    assert(status == napi_ok);

    // JUMP_TO
    napi_value i_110;
    status = napi_create_int32(env, 5151, &i_110);
    assert(status == napi_ok);

    // NETWORK
    napi_value i_111;
    status = napi_create_int32(env, 5152, &i_111);
    assert(status == napi_ok);

    // SELECT_COLOR
    napi_value i_112;
    status = napi_create_int32(env, 5153, &i_112);
    assert(status == napi_ok);

    // SELECT_FONT
    napi_value i_113;
    status = napi_create_int32(env, 5154, &i_113);
    assert(status == napi_ok);

    // SORT_ASCENDING
    napi_value i_114;
    status = napi_create_int32(env, 5155, &i_114);
    assert(status == napi_ok);

    // SORT_DESCENDING
    napi_value i_115;
    status = napi_create_int32(env, 5156, &i_115);
    assert(status == napi_ok);

    // SPELL_CHECK
    napi_value i_116;
    status = napi_create_int32(env, 5157, &i_116);
    assert(status == napi_ok);

    // STRIKETHROUGH
    napi_value i_117;
    status = napi_create_int32(env, 5158, &i_117);
    assert(status == napi_ok);

    // SYSTEM_MENU
    napi_value i_118;
    status = napi_create_int32(env, 5200, &i_118);
    assert(status == napi_ok);

    // CLOSE_FRAME
    napi_value i_119;
    status = napi_create_int32(env, 5201, &i_119);
    assert(status == napi_ok);

    // MOVE_FRAME
    napi_value i_120;
    status = napi_create_int32(env, 5202, &i_120);
    assert(status == napi_ok);

    // RESIZE_FRAME
    napi_value i_121;
    status = napi_create_int32(env, 5203, &i_121);
    assert(status == napi_ok);

    // MAXIMIZE_FRAME
    napi_value i_122;
    status = napi_create_int32(env, 5204, &i_122);
    assert(status == napi_ok);

    // ICONIZE_FRAME
    napi_value i_123;
    status = napi_create_int32(env, 5205, &i_123);
    assert(status == napi_ok);

    // RESTORE_FRAME
    napi_value i_124;
    status = napi_create_int32(env, 5206, &i_124);
    assert(status == napi_ok);

    // MDI_WINDOW_FIRST
    napi_value i_125;
    status = napi_create_int32(env, 5230, &i_125);
    assert(status == napi_ok);

    // MDI_WINDOW_CASCADE
    napi_value i_126;
    status = napi_create_int32(env, 5230, &i_126);
    assert(status == napi_ok);

    // MDI_WINDOW_TILE_HORZ
    napi_value i_127;
    status = napi_create_int32(env, 5231, &i_127);
    assert(status == napi_ok);

    // MDI_WINDOW_TILE_VERT
    napi_value i_128;
    status = napi_create_int32(env, 5232, &i_128);
    assert(status == napi_ok);

    // MDI_WINDOW_ARRANGE_ICONS
    napi_value i_129;
    status = napi_create_int32(env, 5233, &i_129);
    assert(status == napi_ok);

    // MDI_WINDOW_PREV
    napi_value i_130;
    status = napi_create_int32(env, 5234, &i_130);
    assert(status == napi_ok);

    // MDI_WINDOW_NEXT
    napi_value i_131;
    status = napi_create_int32(env, 5235, &i_131);
    assert(status == napi_ok);

    // MDI_WINDOW_LAST
    napi_value i_132;
    status = napi_create_int32(env, 5235, &i_132);
    assert(status == napi_ok);

    // OSX_MENU_FIRST
    napi_value i_133;
    status = napi_create_int32(env, 5250, &i_133);
    assert(status == napi_ok);

    // OSX_HIDE
    napi_value i_134;
    status = napi_create_int32(env, 5250, &i_134);
    assert(status == napi_ok);

    // OSX_HIDEOTHERS
    napi_value i_135;
    status = napi_create_int32(env, 5251, &i_135);
    assert(status == napi_ok);

    // OSX_SHOWALL
    napi_value i_136;
    status = napi_create_int32(env, 5252, &i_136);
    assert(status == napi_ok);

    // OSX_SERVICES
    napi_value i_137;
    status = napi_create_int32(env, 5253, &i_137);
    assert(status == napi_ok);

    // OSX_MENU_LAST
    napi_value i_138;
    status = napi_create_int32(env, 5253, &i_138);
    assert(status == napi_ok);

    // FILEDLGG
    napi_value i_139;
    status = napi_create_int32(env, 5900, &i_139);
    assert(status == napi_ok);

    // FILECTRL
    napi_value i_140;
    status = napi_create_int32(env, 5950, &i_140);
    assert(status == napi_ok);

    // HIGHEST
    napi_value i_141;
    status = napi_create_int32(env, 5999, &i_141);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "AUTO_LOWEST", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "AUTO_HIGHEST", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "SEPARATOR", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "ANY", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "LOWEST", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "OPEN", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "CLOSE", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "NEW", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "SAVE", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr },
        { "SAVEAS", nullptr, nullptr, nullptr, nullptr, i_10, attributes, nullptr },
        { "REVERT", nullptr, nullptr, nullptr, nullptr, i_11, attributes, nullptr },
        { "EXIT", nullptr, nullptr, nullptr, nullptr, i_12, attributes, nullptr },
        { "UNDO", nullptr, nullptr, nullptr, nullptr, i_13, attributes, nullptr },
        { "REDO", nullptr, nullptr, nullptr, nullptr, i_14, attributes, nullptr },
        { "HELP", nullptr, nullptr, nullptr, nullptr, i_15, attributes, nullptr },
        { "PRINT", nullptr, nullptr, nullptr, nullptr, i_16, attributes, nullptr },
        { "PRINT_SETUP", nullptr, nullptr, nullptr, nullptr, i_17, attributes, nullptr },
        { "PAGE_SETUP", nullptr, nullptr, nullptr, nullptr, i_18, attributes, nullptr },
        { "PREVIEW", nullptr, nullptr, nullptr, nullptr, i_19, attributes, nullptr },
        { "ABOUT", nullptr, nullptr, nullptr, nullptr, i_20, attributes, nullptr },
        { "HELP_CONTENTS", nullptr, nullptr, nullptr, nullptr, i_21, attributes, nullptr },
        { "HELP_INDEX", nullptr, nullptr, nullptr, nullptr, i_22, attributes, nullptr },
        { "HELP_SEARCH", nullptr, nullptr, nullptr, nullptr, i_23, attributes, nullptr },
        { "HELP_COMMANDS", nullptr, nullptr, nullptr, nullptr, i_24, attributes, nullptr },
        { "HELP_PROCEDURES", nullptr, nullptr, nullptr, nullptr, i_25, attributes, nullptr },
        { "HELP_CONTEXT", nullptr, nullptr, nullptr, nullptr, i_26, attributes, nullptr },
        { "CLOSE_ALL", nullptr, nullptr, nullptr, nullptr, i_27, attributes, nullptr },
        { "PREFERENCES", nullptr, nullptr, nullptr, nullptr, i_28, attributes, nullptr },
        { "EDIT", nullptr, nullptr, nullptr, nullptr, i_29, attributes, nullptr },
        { "CUT", nullptr, nullptr, nullptr, nullptr, i_30, attributes, nullptr },
        { "COPY", nullptr, nullptr, nullptr, nullptr, i_31, attributes, nullptr },
        { "PASTE", nullptr, nullptr, nullptr, nullptr, i_32, attributes, nullptr },
        { "CLEAR", nullptr, nullptr, nullptr, nullptr, i_33, attributes, nullptr },
        { "FIND", nullptr, nullptr, nullptr, nullptr, i_34, attributes, nullptr },
        { "DUPLICATE", nullptr, nullptr, nullptr, nullptr, i_35, attributes, nullptr },
        { "SELECTALL", nullptr, nullptr, nullptr, nullptr, i_36, attributes, nullptr },
        { "DELETE", nullptr, nullptr, nullptr, nullptr, i_37, attributes, nullptr },
        { "REPLACE", nullptr, nullptr, nullptr, nullptr, i_38, attributes, nullptr },
        { "REPLACE_ALL", nullptr, nullptr, nullptr, nullptr, i_39, attributes, nullptr },
        { "PROPERTIES", nullptr, nullptr, nullptr, nullptr, i_40, attributes, nullptr },
        { "VIEW_DETAILS", nullptr, nullptr, nullptr, nullptr, i_41, attributes, nullptr },
        { "VIEW_LARGEICONS", nullptr, nullptr, nullptr, nullptr, i_42, attributes, nullptr },
        { "VIEW_SMALLICONS", nullptr, nullptr, nullptr, nullptr, i_43, attributes, nullptr },
        { "VIEW_LIST", nullptr, nullptr, nullptr, nullptr, i_44, attributes, nullptr },
        { "VIEW_SORTDATE", nullptr, nullptr, nullptr, nullptr, i_45, attributes, nullptr },
        { "VIEW_SORTNAME", nullptr, nullptr, nullptr, nullptr, i_46, attributes, nullptr },
        { "VIEW_SORTSIZE", nullptr, nullptr, nullptr, nullptr, i_47, attributes, nullptr },
        { "VIEW_SORTTYPE", nullptr, nullptr, nullptr, nullptr, i_48, attributes, nullptr },
        { "FILE", nullptr, nullptr, nullptr, nullptr, i_49, attributes, nullptr },
        { "FILE1", nullptr, nullptr, nullptr, nullptr, i_50, attributes, nullptr },
        { "FILE2", nullptr, nullptr, nullptr, nullptr, i_51, attributes, nullptr },
        { "FILE3", nullptr, nullptr, nullptr, nullptr, i_52, attributes, nullptr },
        { "FILE4", nullptr, nullptr, nullptr, nullptr, i_53, attributes, nullptr },
        { "FILE5", nullptr, nullptr, nullptr, nullptr, i_54, attributes, nullptr },
        { "FILE6", nullptr, nullptr, nullptr, nullptr, i_55, attributes, nullptr },
        { "FILE7", nullptr, nullptr, nullptr, nullptr, i_56, attributes, nullptr },
        { "FILE8", nullptr, nullptr, nullptr, nullptr, i_57, attributes, nullptr },
        { "FILE9", nullptr, nullptr, nullptr, nullptr, i_58, attributes, nullptr },
        { "OK", nullptr, nullptr, nullptr, nullptr, i_59, attributes, nullptr },
        { "CANCEL", nullptr, nullptr, nullptr, nullptr, i_60, attributes, nullptr },
        { "APPLY", nullptr, nullptr, nullptr, nullptr, i_61, attributes, nullptr },
        { "YES", nullptr, nullptr, nullptr, nullptr, i_62, attributes, nullptr },
        { "NO", nullptr, nullptr, nullptr, nullptr, i_63, attributes, nullptr },
        { "STATIC", nullptr, nullptr, nullptr, nullptr, i_64, attributes, nullptr },
        { "FORWARD", nullptr, nullptr, nullptr, nullptr, i_65, attributes, nullptr },
        { "BACKWARD", nullptr, nullptr, nullptr, nullptr, i_66, attributes, nullptr },
        { "DEFAULT", nullptr, nullptr, nullptr, nullptr, i_67, attributes, nullptr },
        { "MORE", nullptr, nullptr, nullptr, nullptr, i_68, attributes, nullptr },
        { "SETUP", nullptr, nullptr, nullptr, nullptr, i_69, attributes, nullptr },
        { "RESET", nullptr, nullptr, nullptr, nullptr, i_70, attributes, nullptr },
        { "CONTEXT_HELP", nullptr, nullptr, nullptr, nullptr, i_71, attributes, nullptr },
        { "YESTOALL", nullptr, nullptr, nullptr, nullptr, i_72, attributes, nullptr },
        { "NOTOALL", nullptr, nullptr, nullptr, nullptr, i_73, attributes, nullptr },
        { "ABORT", nullptr, nullptr, nullptr, nullptr, i_74, attributes, nullptr },
        { "RETRY", nullptr, nullptr, nullptr, nullptr, i_75, attributes, nullptr },
        { "IGNORE", nullptr, nullptr, nullptr, nullptr, i_76, attributes, nullptr },
        { "ADD", nullptr, nullptr, nullptr, nullptr, i_77, attributes, nullptr },
        { "REMOVE", nullptr, nullptr, nullptr, nullptr, i_78, attributes, nullptr },
        { "UP", nullptr, nullptr, nullptr, nullptr, i_79, attributes, nullptr },
        { "DOWN", nullptr, nullptr, nullptr, nullptr, i_80, attributes, nullptr },
        { "HOME", nullptr, nullptr, nullptr, nullptr, i_81, attributes, nullptr },
        { "REFRESH", nullptr, nullptr, nullptr, nullptr, i_82, attributes, nullptr },
        { "STOP", nullptr, nullptr, nullptr, nullptr, i_83, attributes, nullptr },
        { "INDEX", nullptr, nullptr, nullptr, nullptr, i_84, attributes, nullptr },
        { "BOLD", nullptr, nullptr, nullptr, nullptr, i_85, attributes, nullptr },
        { "ITALIC", nullptr, nullptr, nullptr, nullptr, i_86, attributes, nullptr },
        { "JUSTIFY_CENTER", nullptr, nullptr, nullptr, nullptr, i_87, attributes, nullptr },
        { "JUSTIFY_FILL", nullptr, nullptr, nullptr, nullptr, i_88, attributes, nullptr },
        { "JUSTIFY_RIGHT", nullptr, nullptr, nullptr, nullptr, i_89, attributes, nullptr },
        { "JUSTIFY_LEFT", nullptr, nullptr, nullptr, nullptr, i_90, attributes, nullptr },
        { "UNDERLINE", nullptr, nullptr, nullptr, nullptr, i_91, attributes, nullptr },
        { "INDENT", nullptr, nullptr, nullptr, nullptr, i_92, attributes, nullptr },
        { "UNINDENT", nullptr, nullptr, nullptr, nullptr, i_93, attributes, nullptr },
        { "ZOOM_100", nullptr, nullptr, nullptr, nullptr, i_94, attributes, nullptr },
        { "ZOOM_FIT", nullptr, nullptr, nullptr, nullptr, i_95, attributes, nullptr },
        { "ZOOM_IN", nullptr, nullptr, nullptr, nullptr, i_96, attributes, nullptr },
        { "ZOOM_OUT", nullptr, nullptr, nullptr, nullptr, i_97, attributes, nullptr },
        { "UNDELETE", nullptr, nullptr, nullptr, nullptr, i_98, attributes, nullptr },
        { "REVERT_TO_SAVED", nullptr, nullptr, nullptr, nullptr, i_99, attributes, nullptr },
        { "CDROM", nullptr, nullptr, nullptr, nullptr, i_100, attributes, nullptr },
        { "CONVERT", nullptr, nullptr, nullptr, nullptr, i_101, attributes, nullptr },
        { "EXECUTE", nullptr, nullptr, nullptr, nullptr, i_102, attributes, nullptr },
        { "FLOPPY", nullptr, nullptr, nullptr, nullptr, i_103, attributes, nullptr },
        { "HARDDISK", nullptr, nullptr, nullptr, nullptr, i_104, attributes, nullptr },
        { "BOTTOM", nullptr, nullptr, nullptr, nullptr, i_105, attributes, nullptr },
        { "FIRST", nullptr, nullptr, nullptr, nullptr, i_106, attributes, nullptr },
        { "LAST", nullptr, nullptr, nullptr, nullptr, i_107, attributes, nullptr },
        { "TOP", nullptr, nullptr, nullptr, nullptr, i_108, attributes, nullptr },
        { "INFO", nullptr, nullptr, nullptr, nullptr, i_109, attributes, nullptr },
        { "JUMP_TO", nullptr, nullptr, nullptr, nullptr, i_110, attributes, nullptr },
        { "NETWORK", nullptr, nullptr, nullptr, nullptr, i_111, attributes, nullptr },
        { "SELECT_COLOR", nullptr, nullptr, nullptr, nullptr, i_112, attributes, nullptr },
        { "SELECT_FONT", nullptr, nullptr, nullptr, nullptr, i_113, attributes, nullptr },
        { "SORT_ASCENDING", nullptr, nullptr, nullptr, nullptr, i_114, attributes, nullptr },
        { "SORT_DESCENDING", nullptr, nullptr, nullptr, nullptr, i_115, attributes, nullptr },
        { "SPELL_CHECK", nullptr, nullptr, nullptr, nullptr, i_116, attributes, nullptr },
        { "STRIKETHROUGH", nullptr, nullptr, nullptr, nullptr, i_117, attributes, nullptr },
        { "SYSTEM_MENU", nullptr, nullptr, nullptr, nullptr, i_118, attributes, nullptr },
        { "CLOSE_FRAME", nullptr, nullptr, nullptr, nullptr, i_119, attributes, nullptr },
        { "MOVE_FRAME", nullptr, nullptr, nullptr, nullptr, i_120, attributes, nullptr },
        { "RESIZE_FRAME", nullptr, nullptr, nullptr, nullptr, i_121, attributes, nullptr },
        { "MAXIMIZE_FRAME", nullptr, nullptr, nullptr, nullptr, i_122, attributes, nullptr },
        { "ICONIZE_FRAME", nullptr, nullptr, nullptr, nullptr, i_123, attributes, nullptr },
        { "RESTORE_FRAME", nullptr, nullptr, nullptr, nullptr, i_124, attributes, nullptr },
        { "MDI_WINDOW_FIRST", nullptr, nullptr, nullptr, nullptr, i_125, attributes, nullptr },
        { "MDI_WINDOW_CASCADE", nullptr, nullptr, nullptr, nullptr, i_126, attributes, nullptr },
        { "MDI_WINDOW_TILE_HORZ", nullptr, nullptr, nullptr, nullptr, i_127, attributes, nullptr },
        { "MDI_WINDOW_TILE_VERT", nullptr, nullptr, nullptr, nullptr, i_128, attributes, nullptr },
        { "MDI_WINDOW_ARRANGE_ICONS", nullptr, nullptr, nullptr, nullptr, i_129, attributes, nullptr },
        { "MDI_WINDOW_PREV", nullptr, nullptr, nullptr, nullptr, i_130, attributes, nullptr },
        { "MDI_WINDOW_NEXT", nullptr, nullptr, nullptr, nullptr, i_131, attributes, nullptr },
        { "MDI_WINDOW_LAST", nullptr, nullptr, nullptr, nullptr, i_132, attributes, nullptr },
        { "OSX_MENU_FIRST", nullptr, nullptr, nullptr, nullptr, i_133, attributes, nullptr },
        { "OSX_HIDE", nullptr, nullptr, nullptr, nullptr, i_134, attributes, nullptr },
        { "OSX_HIDEOTHERS", nullptr, nullptr, nullptr, nullptr, i_135, attributes, nullptr },
        { "OSX_SHOWALL", nullptr, nullptr, nullptr, nullptr, i_136, attributes, nullptr },
        { "OSX_SERVICES", nullptr, nullptr, nullptr, nullptr, i_137, attributes, nullptr },
        { "OSX_MENU_LAST", nullptr, nullptr, nullptr, nullptr, i_138, attributes, nullptr },
        { "FILEDLGG", nullptr, nullptr, nullptr, nullptr, i_139, attributes, nullptr },
        { "FILECTRL", nullptr, nullptr, nullptr, nullptr, i_140, attributes, nullptr },
        { "HIGHEST", nullptr, nullptr, nullptr, nullptr, i_141, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_Stretch(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // STRETCH_NOT
    napi_value i_0;
    status = napi_create_uint32(env, 0x0, &i_0);
    assert(status == napi_ok);

    // SHRINK
    napi_value i_1;
    status = napi_create_uint32(env, 0x1000, &i_1);
    assert(status == napi_ok);

    // GROW
    napi_value i_2;
    status = napi_create_uint32(env, 0x2000, &i_2);
    assert(status == napi_ok);

    // EXPAND
    napi_value i_3;
    status = napi_create_uint32(env, 8192, &i_3);
    assert(status == napi_ok);

    // SHAPED
    napi_value i_4;
    status = napi_create_uint32(env, 0x4000, &i_4);
    assert(status == napi_ok);

    // TILE
    napi_value i_5;
    status = napi_create_uint32(env, 49152, &i_5);
    assert(status == napi_ok);

    // STRETCH_MASK
    napi_value i_6;
    status = napi_create_uint32(env, 0x7000, &i_6);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "STRETCH_NOT", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "SHRINK", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "GROW", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "EXPAND", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "SHAPED", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "TILE", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "STRETCH_MASK", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_TOOL(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // TOP
    napi_value i_0;
    status = napi_create_uint32(env, 1, &i_0);
    assert(status == napi_ok);

    // BOTTOM
    napi_value i_1;
    status = napi_create_uint32(env, 2, &i_1);
    assert(status == napi_ok);

    // LEFT
    napi_value i_2;
    status = napi_create_uint32(env, 3, &i_2);
    assert(status == napi_ok);

    // RIGHT
    napi_value i_3;
    status = napi_create_uint32(env, 4, &i_3);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "TOP", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "BOTTOM", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "LEFT", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "RIGHT", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

void register_wxsharp_defs(napi_env env, napi_value exports)
{
    napi_value value;

    value = register_enum_wxSharp_KeyType(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "KeyType", value));

    value = register_enum_wxSharp_Direction(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "Direction", value));

    value = register_enum_wxSharp_BackgroundStyle(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "BackgroundStyle", value));

    value = register_enum_wxSharp_HitTest(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "HitTest", value));

    value = register_enum_wxSharp_Border(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "Border", value));

    value = register_enum_wxSharp_SizerOrientation(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "SizerOrientation", value));

    value = register_enum_wxSharp_Alignment(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "Alignment", value));

    value = register_enum_wxSharp_CheckBoxState(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "CheckBoxState", value));

    value = register_enum_wxSharp_DataFormatId(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "DataFormatId", value));

    value = register_enum_wxSharp_GeometryCentre(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GeometryCentre", value));

    value = register_enum_wxSharp_HatchStyle(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "HatchStyle", value));

    value = register_enum_wxSharp_ItemKind(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "ItemKind", value));

    value = register_enum_wxSharp_KeyCode(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "KeyCode", value));

    value = register_enum_wxSharp_KeyModifier(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "KeyModifier", value));

    value = register_enum_wxSharp_SizerFlagBits(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "SizerFlagBits", value));

    value = register_enum_wxSharp_StandardID(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "StandardID", value));

    value = register_enum_wxSharp_Stretch(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "Stretch", value));

    value = register_enum_wxSharp_TOOL(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "TOOL", value));
}
