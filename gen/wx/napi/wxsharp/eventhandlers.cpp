// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <wxsharp/eventhandlers.h>
#include <node/node_api.h>
#include <assert.h>
#include <stdio.h>
#include "NAPIHelpers.h"

static void dtor__EventFilter__EventFilter(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor__EventFilter__EventFilter;

// _EventFilter::_EventFilter
static napi_value callback_method__EventFilter__EventFilter(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    _EventFilter* instance = nullptr;

    instance = new _EventFilter();
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor__EventFilter__EventFilter, nullptr, &result);
    assert(status == napi_ok);

    printf("_EventFilter::_EventFilter: %lu\n", argc);
    return _this;
}

static napi_value register_class___EventFilter(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }

    };

    napi_value constructor;
    status = napi_define_class(env, "_EventFilter", NAPI_AUTO_LENGTH, callback_method__EventFilter__EventFilter, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor__EventFilter__EventFilter);
    assert(status == napi_ok);

    return constructor;
}

void register_wxsharp_eventhandlers(napi_env env, napi_value exports)
{
    napi_value value;

    value = register_class___EventFilter(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "_EventFilter", value));
}
