// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <wxsharp/graphics.h>
#include <node/node_api.h>
#include <assert.h>
#include <stdio.h>
#include "NAPIHelpers.h"

extern napi_ref ctor_wxSharp_Event_Event;
extern napi_ref ctor_wxSharp_Color_Color;
extern napi_ref ctor_wxSharp_Size_Size;
extern napi_ref ctor_wxSharp_Rect_Rect;
extern napi_ref ctor_wxSharp_Point_Point;
extern napi_ref ctor_wxSharp_SizerItem_SizerItem;
extern napi_ref ctor_wxSharp_Window_Window;
extern napi_ref ctor_wxSharp_EvtHandler_EvtHandler;
extern napi_ref ctor_wxSharp_VisualAttributes_VisualAttributes;

static napi_value register_enum_wxSharp_GradientType(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NONE
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // LINEAR
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    // RADIAL
    napi_value i_2;
    status = napi_create_uint32(env, 2, &i_2);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "LINEAR", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "RADIAL", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_AntialiasMode(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NONE
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // DEFAULT
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "DEFAULT", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_InterpolationQuality(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // DEFAULT
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // NONE
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    // FAST
    napi_value i_2;
    status = napi_create_uint32(env, 2, &i_2);
    assert(status == napi_ok);

    // GOOD
    napi_value i_3;
    status = napi_create_uint32(env, 3, &i_3);
    assert(status == napi_ok);

    // BEST
    napi_value i_4;
    status = napi_create_uint32(env, 4, &i_4);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "DEFAULT", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "FAST", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "GOOD", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "BEST", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_CompositionMode(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // INVALID
    napi_value i_0;
    status = napi_create_int32(env, -1, &i_0);
    assert(status == napi_ok);

    // CLEAR
    napi_value i_1;
    status = napi_create_int32(env, 0, &i_1);
    assert(status == napi_ok);

    // SOURCE
    napi_value i_2;
    status = napi_create_int32(env, 1, &i_2);
    assert(status == napi_ok);

    // OVER
    napi_value i_3;
    status = napi_create_int32(env, 2, &i_3);
    assert(status == napi_ok);

    // IN
    napi_value i_4;
    status = napi_create_int32(env, 3, &i_4);
    assert(status == napi_ok);

    // OUT
    napi_value i_5;
    status = napi_create_int32(env, 4, &i_5);
    assert(status == napi_ok);

    // ATOP
    napi_value i_6;
    status = napi_create_int32(env, 5, &i_6);
    assert(status == napi_ok);

    // DEST
    napi_value i_7;
    status = napi_create_int32(env, 6, &i_7);
    assert(status == napi_ok);

    // DEST_OVER
    napi_value i_8;
    status = napi_create_int32(env, 7, &i_8);
    assert(status == napi_ok);

    // DEST_IN
    napi_value i_9;
    status = napi_create_int32(env, 8, &i_9);
    assert(status == napi_ok);

    // DEST_OUT
    napi_value i_10;
    status = napi_create_int32(env, 9, &i_10);
    assert(status == napi_ok);

    // DEST_ATOP
    napi_value i_11;
    status = napi_create_int32(env, 10, &i_11);
    assert(status == napi_ok);

    // XOR
    napi_value i_12;
    status = napi_create_int32(env, 11, &i_12);
    assert(status == napi_ok);

    // ADD
    napi_value i_13;
    status = napi_create_int32(env, 12, &i_13);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "INVALID", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "CLEAR", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "SOURCE", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "OVER", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "IN", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "OUT", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "ATOP", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "DEST", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "DEST_OVER", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "DEST_IN", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr },
        { "DEST_OUT", nullptr, nullptr, nullptr, nullptr, i_10, attributes, nullptr },
        { "DEST_ATOP", nullptr, nullptr, nullptr, nullptr, i_11, attributes, nullptr },
        { "XOR", nullptr, nullptr, nullptr, nullptr, i_12, attributes, nullptr },
        { "ADD", nullptr, nullptr, nullptr, nullptr, i_13, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static void dtor_wxSharp_GraphicsObject_GraphicsObject(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsObject_GraphicsObject;

// wxSharp::GraphicsObject::GraphicsObject
static napi_value callback_method_wxSharp_GraphicsObject_GraphicsObject(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsObject* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsObject()
overload0:
    {
        instance = new wxSharp::GraphicsObject();
    }

    // GraphicsObject(::wxSharp::GraphicsRenderer* renderer)
overload1:
    {
        wxSharp::GraphicsRenderer* renderer_instance;
        status = napi_unwrap(env, _this, (void**) &renderer_instance);
        auto __arg0 = renderer_instance;

        instance = new wxSharp::GraphicsObject(__arg0);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsObject_GraphicsObject, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsObject::GraphicsObject: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsObject(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }

    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsObject", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsObject_GraphicsObject, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsObject_GraphicsObject);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsPen_GraphicsPen(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsPen_GraphicsPen;

// wxSharp::GraphicsPen::GraphicsPen
static napi_value callback_method_wxSharp_GraphicsPen_GraphicsPen(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPen* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsPen()
overload0:
    {
        instance = new wxSharp::GraphicsPen();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsPen_GraphicsPen, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsPen::GraphicsPen: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsPen(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }

    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsPen", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsPen_GraphicsPen, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsPen_GraphicsPen);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsBrush_GraphicsBrush(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsBrush_GraphicsBrush;

// wxSharp::GraphicsBrush::GraphicsBrush
static napi_value callback_method_wxSharp_GraphicsBrush_GraphicsBrush(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsBrush* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsBrush()
overload0:
    {
        instance = new wxSharp::GraphicsBrush();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsBrush_GraphicsBrush, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsBrush::GraphicsBrush: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsBrush(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }

    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsBrush", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsBrush_GraphicsBrush, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsBrush_GraphicsBrush);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsFont_GraphicsFont(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsFont_GraphicsFont;

// wxSharp::GraphicsFont::GraphicsFont
static napi_value callback_method_wxSharp_GraphicsFont_GraphicsFont(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsFont* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsFont()
overload0:
    {
        instance = new wxSharp::GraphicsFont();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsFont_GraphicsFont, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsFont::GraphicsFont: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsFont(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }

    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsFont", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsFont_GraphicsFont, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsFont_GraphicsFont);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsBitmap_GraphicsBitmap(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsBitmap_GraphicsBitmap;

// wxSharp::GraphicsBitmap::GraphicsBitmap
static napi_value callback_method_wxSharp_GraphicsBitmap_GraphicsBitmap(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsBitmap* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsBitmap()
overload0:
    {
        instance = new wxSharp::GraphicsBitmap();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsBitmap_GraphicsBitmap, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsBitmap::GraphicsBitmap: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsBitmap(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }

    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsBitmap", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsBitmap_GraphicsBitmap, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsBitmap_GraphicsBitmap);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsMatrix_GraphicsMatrix(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsMatrix_GraphicsMatrix;

// wxSharp::GraphicsMatrix::GraphicsMatrix
static napi_value callback_method_wxSharp_GraphicsMatrix_GraphicsMatrix(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsMatrix* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsMatrix()
overload0:
    {
        instance = new wxSharp::GraphicsMatrix();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsMatrix_GraphicsMatrix, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsMatrix::GraphicsMatrix: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsMatrix::Concat
static napi_value callback_method_wxSharp_GraphicsMatrix_Concat(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsMatrix* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Concat(const ::wxSharp::GraphicsMatrix& t)
overload0:
    {
        wxSharp::GraphicsMatrix* t_instance;
        status = napi_unwrap(env, _this, (void**) &t_instance);
        auto &__arg0 = *t_instance;

        instance->Concat(__arg0);
    }
    printf("wxSharp::GraphicsMatrix::Concat: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsMatrix::Set
static napi_value callback_method_wxSharp_GraphicsMatrix_Set(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 6 || argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsMatrix* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_NUMBER(types[5]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Set(double a, double b, double c, double d, double tx, double ty)
overload0:
    {
        double a;
        status = napi_get_value_double(env, args[0], &a);
        auto __arg0 = a;

        double b;
        status = napi_get_value_double(env, args[1], &b);
        auto __arg1 = b;

        double c;
        status = napi_get_value_double(env, args[2], &c);
        auto __arg2 = c;

        double d;
        status = napi_get_value_double(env, args[3], &d);
        auto __arg3 = d;

        double tx;
        status = napi_get_value_double(env, args[4], &tx);
        auto __arg4 = tx;

        double ty;
        status = napi_get_value_double(env, args[5], &ty);
        auto __arg5 = ty;

        instance->Set(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
    }
    printf("wxSharp::GraphicsMatrix::Set: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsMatrix::Invert
static napi_value callback_method_wxSharp_GraphicsMatrix_Invert(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsMatrix* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Invert();
    printf("wxSharp::GraphicsMatrix::Invert: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsMatrix::IsEqual
static napi_value callback_method_wxSharp_GraphicsMatrix_IsEqual(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsMatrix* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool IsEqual(const ::wxSharp::GraphicsMatrix& t) const
overload0:
    {
        wxSharp::GraphicsMatrix* t_instance;
        status = napi_unwrap(env, _this, (void**) &t_instance);
        auto &__arg0 = *t_instance;

        bool __ret = instance->IsEqual(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::GraphicsMatrix::IsEqual: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsMatrix::Translate
static napi_value callback_method_wxSharp_GraphicsMatrix_Translate(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsMatrix* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Translate(double dx, double dy)
overload0:
    {
        double dx;
        status = napi_get_value_double(env, args[0], &dx);
        auto __arg0 = dx;

        double dy;
        status = napi_get_value_double(env, args[1], &dy);
        auto __arg1 = dy;

        instance->Translate(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsMatrix::Translate: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsMatrix::Scale
static napi_value callback_method_wxSharp_GraphicsMatrix_Scale(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsMatrix* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Scale(double xScale, double yScale)
overload0:
    {
        double xScale;
        status = napi_get_value_double(env, args[0], &xScale);
        auto __arg0 = xScale;

        double yScale;
        status = napi_get_value_double(env, args[1], &yScale);
        auto __arg1 = yScale;

        instance->Scale(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsMatrix::Scale: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsMatrix::Rotate
static napi_value callback_method_wxSharp_GraphicsMatrix_Rotate(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsMatrix* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Rotate(double angle)
overload0:
    {
        double angle;
        status = napi_get_value_double(env, args[0], &angle);
        auto __arg0 = angle;

        instance->Rotate(__arg0);
    }
    printf("wxSharp::GraphicsMatrix::Rotate: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsMatrix(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "Concat", nullptr, callback_method_wxSharp_GraphicsMatrix_Concat, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Set", nullptr, callback_method_wxSharp_GraphicsMatrix_Set, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Invert", nullptr, callback_method_wxSharp_GraphicsMatrix_Invert, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsEqual", nullptr, callback_method_wxSharp_GraphicsMatrix_IsEqual, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Translate", nullptr, callback_method_wxSharp_GraphicsMatrix_Translate, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Scale", nullptr, callback_method_wxSharp_GraphicsMatrix_Scale, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Rotate", nullptr, callback_method_wxSharp_GraphicsMatrix_Rotate, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsMatrix", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsMatrix_GraphicsMatrix, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsMatrix_GraphicsMatrix);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsGradientStop_GraphicsGradientStop(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsGradientStop_GraphicsGradientStop;

// wxSharp::GraphicsGradientStop::GraphicsGradientStop
static napi_value callback_method_wxSharp_GraphicsGradientStop_GraphicsGradientStop(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsGradientStop* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsGradientStop(::wxSharp::Color col, float pos)
overload0:
    {
        wxSharp::Color* col_instance;
        status = napi_unwrap(env, _this, (void**) &col_instance);
        auto __arg0 = *col_instance;

        double pos;
        status = napi_get_value_double(env, args[1], &pos);
        auto __arg1 = (float)pos;

        instance = new wxSharp::GraphicsGradientStop(__arg0, __arg1);
    }

    // GraphicsGradientStop(const ::wxSharp::GraphicsGradientStop& _0)
overload1:
    {
        wxSharp::GraphicsGradientStop* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto &__arg0 = *_0_instance;

        instance = new wxSharp::GraphicsGradientStop(__arg0);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsGradientStop_GraphicsGradientStop, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsGradientStop::GraphicsGradientStop: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsGradientStop::SetColour
static napi_value callback_method_wxSharp_GraphicsGradientStop_SetColour(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsGradientStop* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetColour(const ::wxSharp::Color& col)
overload0:
    {
        wxSharp::Color* col_instance;
        status = napi_unwrap(env, _this, (void**) &col_instance);
        auto &__arg0 = *col_instance;

        instance->SetColour(__arg0);
    }
    printf("wxSharp::GraphicsGradientStop::SetColour: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsGradientStop(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "SetColour", nullptr, callback_method_wxSharp_GraphicsGradientStop_SetColour, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsGradientStop", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsGradientStop_GraphicsGradientStop, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsGradientStop_GraphicsGradientStop);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsGradientStops_GraphicsGradientStops(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsGradientStops_GraphicsGradientStops;

// wxSharp::GraphicsGradientStops::GraphicsGradientStops
static napi_value callback_method_wxSharp_GraphicsGradientStops_GraphicsGradientStops(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsGradientStops* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

typecheck1:
    if (NAPI_IS_OBJECT(types[1]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsGradientStops(::wxSharp::Color startCol, ::wxSharp::Color endCol)
overload0:
    {
        wxSharp::Color* startCol_instance;
        status = napi_unwrap(env, _this, (void**) &startCol_instance);
        auto __arg0 = *startCol_instance;

        wxSharp::Color* endCol_instance;
        status = napi_unwrap(env, _this, (void**) &endCol_instance);
        auto __arg1 = *endCol_instance;

        instance = new wxSharp::GraphicsGradientStops(__arg0, __arg1);
    }

    // GraphicsGradientStops(const ::wxSharp::GraphicsGradientStops& _0)
overload1:
    {
        wxSharp::GraphicsGradientStops* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto &__arg0 = *_0_instance;

        instance = new wxSharp::GraphicsGradientStops(__arg0);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsGradientStops_GraphicsGradientStops, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsGradientStops::GraphicsGradientStops: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsGradientStops::Add
static napi_value callback_method_wxSharp_GraphicsGradientStops_Add(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsGradientStops* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Add(const ::wxSharp::GraphicsGradientStop& stop)
overload0:
    {
        wxSharp::GraphicsGradientStop* stop_instance;
        status = napi_unwrap(env, _this, (void**) &stop_instance);
        auto &__arg0 = *stop_instance;

        instance->Add(__arg0);
    }

    // void Add(::wxSharp::Color col, float pos)
overload1:
    {
        wxSharp::Color* col_instance;
        status = napi_unwrap(env, _this, (void**) &col_instance);
        auto __arg0 = *col_instance;

        double pos;
        status = napi_get_value_double(env, args[1], &pos);
        auto __arg1 = (float)pos;

        instance->Add(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsGradientStops::Add: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsGradientStops::Item
static napi_value callback_method_wxSharp_GraphicsGradientStops_Item(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsGradientStops* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_UINT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsGradientStop Item(unsigned int n) const
overload0:
    {
        uint32_t n;
        status = napi_get_value_uint32(env, args[0], &n);
        auto __arg0 = n;

        ::wxSharp::GraphicsGradientStop __ret = instance->Item(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsGradientStop_GraphicsGradientStop, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsGradientStops::Item: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsGradientStops(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "Add", nullptr, callback_method_wxSharp_GraphicsGradientStops_Add, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Item", nullptr, callback_method_wxSharp_GraphicsGradientStops_Item, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsGradientStops", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsGradientStops_GraphicsGradientStops, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsGradientStops_GraphicsGradientStops);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsPenInfo_GraphicsPenInfo(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsPenInfo_GraphicsPenInfo;

// wxSharp::GraphicsPenInfo::GraphicsPenInfo
static napi_value callback_method_wxSharp_GraphicsPenInfo_GraphicsPenInfo(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPenInfo* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // explicit GraphicsPenInfo(const ::wxSharp::Color& colour, double width, ::wxSharp::PenStyle style)
overload0:
    {
        wxSharp::Color* colour_instance;
        status = napi_unwrap(env, _this, (void**) &colour_instance);
        auto &__arg0 = *colour_instance;

        double width;
        status = napi_get_value_double(env, args[1], &width);
        auto __arg1 = width;

        int32_t style;
        status = napi_get_value_int32(env, args[2], &style);
        auto __arg2 = (::wxSharp::PenStyle)style;

        instance = new wxSharp::GraphicsPenInfo(__arg0, __arg1, __arg2);
    }

    // GraphicsPenInfo(const ::wxSharp::GraphicsPenInfo& _0)
overload1:
    {
        wxSharp::GraphicsPenInfo* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto &__arg0 = *_0_instance;

        instance = new wxSharp::GraphicsPenInfo(__arg0);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsPenInfo_GraphicsPenInfo, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsPenInfo::GraphicsPenInfo: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsPenInfo(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }

    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsPenInfo", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsPenInfo_GraphicsPenInfo, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsPenInfo_GraphicsPenInfo);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsPath_GraphicsPath(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsPath_GraphicsPath;

// wxSharp::GraphicsPath::GraphicsPath
static napi_value callback_method_wxSharp_GraphicsPath_GraphicsPath(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsPath()
overload0:
    {
        instance = new wxSharp::GraphicsPath();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsPath_GraphicsPath, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsPath::GraphicsPath: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::MoveToPoint
static napi_value callback_method_wxSharp_GraphicsPath_MoveToPoint(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void MoveToPoint(double x, double y)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        instance->MoveToPoint(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsPath::MoveToPoint: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddLineToPoint
static napi_value callback_method_wxSharp_GraphicsPath_AddLineToPoint(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddLineToPoint(double x, double y)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        instance->AddLineToPoint(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsPath::AddLineToPoint: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddCurveToPoint
static napi_value callback_method_wxSharp_GraphicsPath_AddCurveToPoint(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 6 || argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_NUMBER(types[5]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddCurveToPoint(double cx1, double cy1, double cx2, double cy2, double x, double y)
overload0:
    {
        double cx1;
        status = napi_get_value_double(env, args[0], &cx1);
        auto __arg0 = cx1;

        double cy1;
        status = napi_get_value_double(env, args[1], &cy1);
        auto __arg1 = cy1;

        double cx2;
        status = napi_get_value_double(env, args[2], &cx2);
        auto __arg2 = cx2;

        double cy2;
        status = napi_get_value_double(env, args[3], &cy2);
        auto __arg3 = cy2;

        double x;
        status = napi_get_value_double(env, args[4], &x);
        auto __arg4 = x;

        double y;
        status = napi_get_value_double(env, args[5], &y);
        auto __arg5 = y;

        instance->AddCurveToPoint(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
    }
    printf("wxSharp::GraphicsPath::AddCurveToPoint: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddPath
static napi_value callback_method_wxSharp_GraphicsPath_AddPath(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddPath(const ::wxSharp::GraphicsPath& path)
overload0:
    {
        wxSharp::GraphicsPath* path_instance;
        status = napi_unwrap(env, _this, (void**) &path_instance);
        auto &__arg0 = *path_instance;

        instance->AddPath(__arg0);
    }
    printf("wxSharp::GraphicsPath::AddPath: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::CloseSubpath
static napi_value callback_method_wxSharp_GraphicsPath_CloseSubpath(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->CloseSubpath();
    printf("wxSharp::GraphicsPath::CloseSubpath: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddArc
static napi_value callback_method_wxSharp_GraphicsPath_AddArc(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 6 || argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_BOOL(types[5]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddArc(double x, double y, double r, double startAngle, double endAngle, bool clockwise)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double r;
        status = napi_get_value_double(env, args[2], &r);
        auto __arg2 = r;

        double startAngle;
        status = napi_get_value_double(env, args[3], &startAngle);
        auto __arg3 = startAngle;

        double endAngle;
        status = napi_get_value_double(env, args[4], &endAngle);
        auto __arg4 = endAngle;

        bool clockwise;
        status = napi_get_value_bool(env, args[5], &clockwise);
        auto __arg5 = (bool)clockwise;

        instance->AddArc(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
    }
    printf("wxSharp::GraphicsPath::AddArc: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddQuadCurveToPoint
static napi_value callback_method_wxSharp_GraphicsPath_AddQuadCurveToPoint(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddQuadCurveToPoint(double cx, double cy, double x, double y)
overload0:
    {
        double cx;
        status = napi_get_value_double(env, args[0], &cx);
        auto __arg0 = cx;

        double cy;
        status = napi_get_value_double(env, args[1], &cy);
        auto __arg1 = cy;

        double x;
        status = napi_get_value_double(env, args[2], &x);
        auto __arg2 = x;

        double y;
        status = napi_get_value_double(env, args[3], &y);
        auto __arg3 = y;

        instance->AddQuadCurveToPoint(__arg0, __arg1, __arg2, __arg3);
    }
    printf("wxSharp::GraphicsPath::AddQuadCurveToPoint: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddRectangle
static napi_value callback_method_wxSharp_GraphicsPath_AddRectangle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddRectangle(double x, double y, double w, double h)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double w;
        status = napi_get_value_double(env, args[2], &w);
        auto __arg2 = w;

        double h;
        status = napi_get_value_double(env, args[3], &h);
        auto __arg3 = h;

        instance->AddRectangle(__arg0, __arg1, __arg2, __arg3);
    }
    printf("wxSharp::GraphicsPath::AddRectangle: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddCircle
static napi_value callback_method_wxSharp_GraphicsPath_AddCircle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddCircle(double x, double y, double r)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double r;
        status = napi_get_value_double(env, args[2], &r);
        auto __arg2 = r;

        instance->AddCircle(__arg0, __arg1, __arg2);
    }
    printf("wxSharp::GraphicsPath::AddCircle: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddArcToPoint
static napi_value callback_method_wxSharp_GraphicsPath_AddArcToPoint(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 5 || argc > 5)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddArcToPoint(double x1, double y1, double x2, double y2, double r)
overload0:
    {
        double x1;
        status = napi_get_value_double(env, args[0], &x1);
        auto __arg0 = x1;

        double y1;
        status = napi_get_value_double(env, args[1], &y1);
        auto __arg1 = y1;

        double x2;
        status = napi_get_value_double(env, args[2], &x2);
        auto __arg2 = x2;

        double y2;
        status = napi_get_value_double(env, args[3], &y2);
        auto __arg3 = y2;

        double r;
        status = napi_get_value_double(env, args[4], &r);
        auto __arg4 = r;

        instance->AddArcToPoint(__arg0, __arg1, __arg2, __arg3, __arg4);
    }
    printf("wxSharp::GraphicsPath::AddArcToPoint: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddEllipse
static napi_value callback_method_wxSharp_GraphicsPath_AddEllipse(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddEllipse(double x, double y, double w, double h)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double w;
        status = napi_get_value_double(env, args[2], &w);
        auto __arg2 = w;

        double h;
        status = napi_get_value_double(env, args[3], &h);
        auto __arg3 = h;

        instance->AddEllipse(__arg0, __arg1, __arg2, __arg3);
    }
    printf("wxSharp::GraphicsPath::AddEllipse: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::AddRoundedRectangle
static napi_value callback_method_wxSharp_GraphicsPath_AddRoundedRectangle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 5 || argc > 5)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AddRoundedRectangle(double x, double y, double w, double h, double radius)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double w;
        status = napi_get_value_double(env, args[2], &w);
        auto __arg2 = w;

        double h;
        status = napi_get_value_double(env, args[3], &h);
        auto __arg3 = h;

        double radius;
        status = napi_get_value_double(env, args[4], &radius);
        auto __arg4 = radius;

        instance->AddRoundedRectangle(__arg0, __arg1, __arg2, __arg3, __arg4);
    }
    printf("wxSharp::GraphicsPath::AddRoundedRectangle: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::Transform
static napi_value callback_method_wxSharp_GraphicsPath_Transform(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Transform(const ::wxSharp::GraphicsMatrix& matrix)
overload0:
    {
        wxSharp::GraphicsMatrix* matrix_instance;
        status = napi_unwrap(env, _this, (void**) &matrix_instance);
        auto &__arg0 = *matrix_instance;

        instance->Transform(__arg0);
    }
    printf("wxSharp::GraphicsPath::Transform: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsPath::Contains
static napi_value callback_method_wxSharp_GraphicsPath_Contains(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsPath* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Contains(double x, double y, ::wxSharp::PolygonFillMode fillStyle) const
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        int32_t fillStyle;
        status = napi_get_value_int32(env, args[2], &fillStyle);
        auto __arg2 = (::wxSharp::PolygonFillMode)fillStyle;

        bool __ret = instance->Contains(__arg0, __arg1, __arg2);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::GraphicsPath::Contains: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsPath(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "MoveToPoint", nullptr, callback_method_wxSharp_GraphicsPath_MoveToPoint, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddLineToPoint", nullptr, callback_method_wxSharp_GraphicsPath_AddLineToPoint, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddCurveToPoint", nullptr, callback_method_wxSharp_GraphicsPath_AddCurveToPoint, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddPath", nullptr, callback_method_wxSharp_GraphicsPath_AddPath, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CloseSubpath", nullptr, callback_method_wxSharp_GraphicsPath_CloseSubpath, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddArc", nullptr, callback_method_wxSharp_GraphicsPath_AddArc, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddQuadCurveToPoint", nullptr, callback_method_wxSharp_GraphicsPath_AddQuadCurveToPoint, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddRectangle", nullptr, callback_method_wxSharp_GraphicsPath_AddRectangle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddCircle", nullptr, callback_method_wxSharp_GraphicsPath_AddCircle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddArcToPoint", nullptr, callback_method_wxSharp_GraphicsPath_AddArcToPoint, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddEllipse", nullptr, callback_method_wxSharp_GraphicsPath_AddEllipse, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddRoundedRectangle", nullptr, callback_method_wxSharp_GraphicsPath_AddRoundedRectangle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Transform", nullptr, callback_method_wxSharp_GraphicsPath_Transform, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Contains", nullptr, callback_method_wxSharp_GraphicsPath_Contains, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsPath", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsPath_GraphicsPath, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsPath_GraphicsPath);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsContext_GraphicsContext(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsContext_GraphicsContext;

// wxSharp::GraphicsContext::GraphicsContext
static napi_value callback_method_wxSharp_GraphicsContext_GraphicsContext(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

typecheck1:
    if (NAPI_IS_OBJECT(types[1]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsContext(::wxSharp::GraphicsRenderer* renderer, ::wxSharp::Window* window)
overload0:
    {
        wxSharp::GraphicsRenderer* renderer_instance;
        status = napi_unwrap(env, _this, (void**) &renderer_instance);
        auto __arg0 = renderer_instance;

        wxSharp::Window* window_instance;
        status = napi_unwrap(env, _this, (void**) &window_instance);
        auto __arg1 = window_instance;

        instance = new wxSharp::GraphicsContext(__arg0, __arg1);
    }

    // GraphicsContext
overload1:
    {
        wxSharp::GraphicsContext* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto &__arg0 = *_0_instance;

        instance = new wxSharp::GraphicsContext(__arg0);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsContext_GraphicsContext, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsContext::GraphicsContext: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::StartDoc
static napi_value callback_method_wxSharp_GraphicsContext_StartDoc(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool StartDoc(const char* message)
overload0:
    {
        size_t _message_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_message_size);

        char* message = (char*) malloc(_message_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_message_size);
        assert(status == napi_ok);
        auto __arg0 = message;

        bool __ret = instance->StartDoc(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::GraphicsContext::StartDoc: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::EndDoc
static napi_value callback_method_wxSharp_GraphicsContext_EndDoc(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->EndDoc();
    printf("wxSharp::GraphicsContext::EndDoc: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::StartPage
static napi_value callback_method_wxSharp_GraphicsContext_StartPage(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void StartPage(double width, double height)
overload0:
    {
        double width;
        status = napi_get_value_double(env, args[0], &width);
        auto __arg0 = width;

        double height;
        status = napi_get_value_double(env, args[1], &height);
        auto __arg1 = height;

        instance->StartPage(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsContext::StartPage: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::EndPage
static napi_value callback_method_wxSharp_GraphicsContext_EndPage(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->EndPage();
    printf("wxSharp::GraphicsContext::EndPage: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::Flush
static napi_value callback_method_wxSharp_GraphicsContext_Flush(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Flush();
    printf("wxSharp::GraphicsContext::Flush: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::CreatePath
static napi_value callback_method_wxSharp_GraphicsContext_CreatePath(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    ::wxSharp::GraphicsPath __ret = instance->CreatePath();

    napi_value ____ret_ctor;
    status = napi_get_reference_value(env, ctor_wxSharp_GraphicsPath_GraphicsPath, &____ret_ctor);
    assert(status == napi_ok);

    napi_value ____ret_instance;
    status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
    assert(status == napi_ok);


    return ____ret_instance;
    printf("wxSharp::GraphicsContext::CreatePath: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::CreatePen
static napi_value callback_method_wxSharp_GraphicsContext_CreatePen(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsPen CreatePen(const ::wxSharp::Pen& pen) const
overload0:
    {
        wxSharp::Pen* pen_instance;
        status = napi_unwrap(env, _this, (void**) &pen_instance);
        auto &__arg0 = *pen_instance;

        ::wxSharp::GraphicsPen __ret = instance->CreatePen(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsPen_GraphicsPen, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::GraphicsPen CreatePen(const ::wxSharp::GraphicsPenInfo& info) const
overload1:
    {
        wxSharp::GraphicsPenInfo* info_instance;
        status = napi_unwrap(env, _this, (void**) &info_instance);
        auto &__arg0 = *info_instance;

        ::wxSharp::GraphicsPen __ret = instance->CreatePen(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsPen_GraphicsPen, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsContext::CreatePen: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::CreateBrush
static napi_value callback_method_wxSharp_GraphicsContext_CreateBrush(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsBrush CreateBrush(const ::wxSharp::Brush& brush) const
overload0:
    {
        wxSharp::Brush* brush_instance;
        status = napi_unwrap(env, _this, (void**) &brush_instance);
        auto &__arg0 = *brush_instance;

        ::wxSharp::GraphicsBrush __ret = instance->CreateBrush(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBrush_GraphicsBrush, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsContext::CreateBrush: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::CreateLinearGradientBrush
static napi_value callback_method_wxSharp_GraphicsContext_CreateLinearGradientBrush(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 6 || argc > 7)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_OBJECT(types[4]))
        goto typecheck5;

    if (NAPI_IS_OBJECT(types[4]))
        goto typecheck6;

    goto error;

typecheck5:
    if (NAPI_IS_OBJECT(types[5]))
        goto typecheck7;

    goto error;

typecheck6:
    if (NAPI_IS_OBJECT(types[5]))
        goto overload0;

    goto error;

typecheck7:
    if (NAPI_IS_OBJECT(types[6]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, const ::wxSharp::Color& c1, const ::wxSharp::Color& c2, const ::wxSharp::GraphicsMatrix& matrix) const
overload0:
    {
        double x1;
        status = napi_get_value_double(env, args[0], &x1);
        auto __arg0 = x1;

        double y1;
        status = napi_get_value_double(env, args[1], &y1);
        auto __arg1 = y1;

        double x2;
        status = napi_get_value_double(env, args[2], &x2);
        auto __arg2 = x2;

        double y2;
        status = napi_get_value_double(env, args[3], &y2);
        auto __arg3 = y2;

        wxSharp::Color* c1_instance;
        status = napi_unwrap(env, _this, (void**) &c1_instance);
        auto &__arg4 = *c1_instance;

        wxSharp::Color* c2_instance;
        status = napi_unwrap(env, _this, (void**) &c2_instance);
        auto &__arg5 = *c2_instance;

        wxSharp::GraphicsMatrix* matrix_instance;
        status = napi_unwrap(env, _this, (void**) &matrix_instance);
        auto &__arg6 = *matrix_instance;

        ::wxSharp::GraphicsBrush __ret = instance->CreateLinearGradientBrush(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBrush_GraphicsBrush, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, const ::wxSharp::GraphicsGradientStops& stops, const ::wxSharp::GraphicsMatrix& matrix) const
overload1:
    {
        double x1;
        status = napi_get_value_double(env, args[0], &x1);
        auto __arg0 = x1;

        double y1;
        status = napi_get_value_double(env, args[1], &y1);
        auto __arg1 = y1;

        double x2;
        status = napi_get_value_double(env, args[2], &x2);
        auto __arg2 = x2;

        double y2;
        status = napi_get_value_double(env, args[3], &y2);
        auto __arg3 = y2;

        wxSharp::GraphicsGradientStops* stops_instance;
        status = napi_unwrap(env, _this, (void**) &stops_instance);
        auto &__arg4 = *stops_instance;

        wxSharp::GraphicsMatrix* matrix_instance;
        status = napi_unwrap(env, _this, (void**) &matrix_instance);
        auto &__arg5 = *matrix_instance;

        ::wxSharp::GraphicsBrush __ret = instance->CreateLinearGradientBrush(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBrush_GraphicsBrush, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsContext::CreateLinearGradientBrush: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::CreateRadialGradientBrush
static napi_value callback_method_wxSharp_GraphicsContext_CreateRadialGradientBrush(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 7 || argc > 8)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_OBJECT(types[5]))
        goto typecheck6;

    if (NAPI_IS_OBJECT(types[5]))
        goto typecheck7;

    goto error;

typecheck6:
    if (NAPI_IS_OBJECT(types[6]))
        goto typecheck8;

    goto error;

typecheck7:
    if (NAPI_IS_OBJECT(types[6]))
        goto overload0;

    goto error;

typecheck8:
    if (NAPI_IS_OBJECT(types[7]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, const ::wxSharp::Color& oColor, const ::wxSharp::Color& cColor, const ::wxSharp::GraphicsMatrix& matrix) const
overload0:
    {
        double startX;
        status = napi_get_value_double(env, args[0], &startX);
        auto __arg0 = startX;

        double startY;
        status = napi_get_value_double(env, args[1], &startY);
        auto __arg1 = startY;

        double endX;
        status = napi_get_value_double(env, args[2], &endX);
        auto __arg2 = endX;

        double endY;
        status = napi_get_value_double(env, args[3], &endY);
        auto __arg3 = endY;

        double radius;
        status = napi_get_value_double(env, args[4], &radius);
        auto __arg4 = radius;

        wxSharp::Color* oColor_instance;
        status = napi_unwrap(env, _this, (void**) &oColor_instance);
        auto &__arg5 = *oColor_instance;

        wxSharp::Color* cColor_instance;
        status = napi_unwrap(env, _this, (void**) &cColor_instance);
        auto &__arg6 = *cColor_instance;

        wxSharp::GraphicsMatrix* matrix_instance;
        status = napi_unwrap(env, _this, (void**) &matrix_instance);
        auto &__arg7 = *matrix_instance;

        ::wxSharp::GraphicsBrush __ret = instance->CreateRadialGradientBrush(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBrush_GraphicsBrush, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, const ::wxSharp::GraphicsGradientStops& stops, const ::wxSharp::GraphicsMatrix& matrix) const
overload1:
    {
        double startX;
        status = napi_get_value_double(env, args[0], &startX);
        auto __arg0 = startX;

        double startY;
        status = napi_get_value_double(env, args[1], &startY);
        auto __arg1 = startY;

        double endX;
        status = napi_get_value_double(env, args[2], &endX);
        auto __arg2 = endX;

        double endY;
        status = napi_get_value_double(env, args[3], &endY);
        auto __arg3 = endY;

        double radius;
        status = napi_get_value_double(env, args[4], &radius);
        auto __arg4 = radius;

        wxSharp::GraphicsGradientStops* stops_instance;
        status = napi_unwrap(env, _this, (void**) &stops_instance);
        auto &__arg5 = *stops_instance;

        wxSharp::GraphicsMatrix* matrix_instance;
        status = napi_unwrap(env, _this, (void**) &matrix_instance);
        auto &__arg6 = *matrix_instance;

        ::wxSharp::GraphicsBrush __ret = instance->CreateRadialGradientBrush(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBrush_GraphicsBrush, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsContext::CreateRadialGradientBrush: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::CreateFont
static napi_value callback_method_wxSharp_GraphicsContext_CreateFont(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_OBJECT(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsFont CreateFont(double sizeInPixels, const char* facename, int flags, const ::wxSharp::Color& col) const
overload0:
    {
        double sizeInPixels;
        status = napi_get_value_double(env, args[0], &sizeInPixels);
        auto __arg0 = sizeInPixels;

        size_t _facename_size;
        status = napi_get_value_string_utf8(env, args[1], nullptr, 0, &_facename_size);

        char* facename = (char*) malloc(_facename_size);
        status = napi_get_value_string_utf8(env, args[1], nullptr, 0, &_facename_size);
        assert(status == napi_ok);
        auto __arg1 = facename;

        int32_t flags;
        status = napi_get_value_int32(env, args[2], &flags);
        auto __arg2 = flags;

        wxSharp::Color* col_instance;
        status = napi_unwrap(env, _this, (void**) &col_instance);
        auto &__arg3 = *col_instance;

        ::wxSharp::GraphicsFont __ret = instance->CreateFont(__arg0, __arg1, __arg2, __arg3);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsFont_GraphicsFont, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsContext::CreateFont: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::CreateSubBitmap
static napi_value callback_method_wxSharp_GraphicsContext_CreateSubBitmap(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 5 || argc > 5)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsBitmap CreateSubBitmap(const ::wxSharp::GraphicsBitmap& bitmap, double x, double y, double w, double h) const
overload0:
    {
        wxSharp::GraphicsBitmap* bitmap_instance;
        status = napi_unwrap(env, _this, (void**) &bitmap_instance);
        auto &__arg0 = *bitmap_instance;

        double x;
        status = napi_get_value_double(env, args[1], &x);
        auto __arg1 = x;

        double y;
        status = napi_get_value_double(env, args[2], &y);
        auto __arg2 = y;

        double w;
        status = napi_get_value_double(env, args[3], &w);
        auto __arg3 = w;

        double h;
        status = napi_get_value_double(env, args[4], &h);
        auto __arg4 = h;

        ::wxSharp::GraphicsBitmap __ret = instance->CreateSubBitmap(__arg0, __arg1, __arg2, __arg3, __arg4);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBitmap_GraphicsBitmap, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsContext::CreateSubBitmap: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::CreateMatrix
static napi_value callback_method_wxSharp_GraphicsContext_CreateMatrix(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 6 || argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_NUMBER(types[5]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsMatrix CreateMatrix(double a, double b, double c, double d, double tx, double ty) const
overload0:
    {
        double a;
        status = napi_get_value_double(env, args[0], &a);
        auto __arg0 = a;

        double b;
        status = napi_get_value_double(env, args[1], &b);
        auto __arg1 = b;

        double c;
        status = napi_get_value_double(env, args[2], &c);
        auto __arg2 = c;

        double d;
        status = napi_get_value_double(env, args[3], &d);
        auto __arg3 = d;

        double tx;
        status = napi_get_value_double(env, args[4], &tx);
        auto __arg4 = tx;

        double ty;
        status = napi_get_value_double(env, args[5], &ty);
        auto __arg5 = ty;

        ::wxSharp::GraphicsMatrix __ret = instance->CreateMatrix(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsMatrix_GraphicsMatrix, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsContext::CreateMatrix: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::PushState
static napi_value callback_method_wxSharp_GraphicsContext_PushState(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->PushState();
    printf("wxSharp::GraphicsContext::PushState: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::PopState
static napi_value callback_method_wxSharp_GraphicsContext_PopState(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->PopState();
    printf("wxSharp::GraphicsContext::PopState: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::Clip
static napi_value callback_method_wxSharp_GraphicsContext_Clip(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Clip(double x, double y, double w, double h)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double w;
        status = napi_get_value_double(env, args[2], &w);
        auto __arg2 = w;

        double h;
        status = napi_get_value_double(env, args[3], &h);
        auto __arg3 = h;

        instance->Clip(__arg0, __arg1, __arg2, __arg3);
    }
    printf("wxSharp::GraphicsContext::Clip: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::ResetClip
static napi_value callback_method_wxSharp_GraphicsContext_ResetClip(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->ResetClip();
    printf("wxSharp::GraphicsContext::ResetClip: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::SetAntialiasMode
static napi_value callback_method_wxSharp_GraphicsContext_SetAntialiasMode(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SetAntialiasMode(::wxSharp::AntialiasMode antialias)
overload0:
    {
        int32_t antialias;
        status = napi_get_value_int32(env, args[0], &antialias);
        auto __arg0 = (::wxSharp::AntialiasMode)antialias;

        bool __ret = instance->SetAntialiasMode(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::GraphicsContext::SetAntialiasMode: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::SetInterpolationQuality
static napi_value callback_method_wxSharp_GraphicsContext_SetInterpolationQuality(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SetInterpolationQuality(::wxSharp::InterpolationQuality interpolation)
overload0:
    {
        int32_t interpolation;
        status = napi_get_value_int32(env, args[0], &interpolation);
        auto __arg0 = (::wxSharp::InterpolationQuality)interpolation;

        bool __ret = instance->SetInterpolationQuality(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::GraphicsContext::SetInterpolationQuality: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::SetCompositionMode
static napi_value callback_method_wxSharp_GraphicsContext_SetCompositionMode(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SetCompositionMode(::wxSharp::CompositionMode op)
overload0:
    {
        int32_t op;
        status = napi_get_value_int32(env, args[0], &op);
        auto __arg0 = (::wxSharp::CompositionMode)op;

        bool __ret = instance->SetCompositionMode(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::GraphicsContext::SetCompositionMode: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::BeginLayer
static napi_value callback_method_wxSharp_GraphicsContext_BeginLayer(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void BeginLayer(double opacity)
overload0:
    {
        double opacity;
        status = napi_get_value_double(env, args[0], &opacity);
        auto __arg0 = opacity;

        instance->BeginLayer(__arg0);
    }
    printf("wxSharp::GraphicsContext::BeginLayer: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::EndLayer
static napi_value callback_method_wxSharp_GraphicsContext_EndLayer(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->EndLayer();
    printf("wxSharp::GraphicsContext::EndLayer: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::Translate
static napi_value callback_method_wxSharp_GraphicsContext_Translate(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Translate(double dx, double dy)
overload0:
    {
        double dx;
        status = napi_get_value_double(env, args[0], &dx);
        auto __arg0 = dx;

        double dy;
        status = napi_get_value_double(env, args[1], &dy);
        auto __arg1 = dy;

        instance->Translate(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsContext::Translate: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::Scale
static napi_value callback_method_wxSharp_GraphicsContext_Scale(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Scale(double xScale, double yScale)
overload0:
    {
        double xScale;
        status = napi_get_value_double(env, args[0], &xScale);
        auto __arg0 = xScale;

        double yScale;
        status = napi_get_value_double(env, args[1], &yScale);
        auto __arg1 = yScale;

        instance->Scale(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsContext::Scale: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::Rotate
static napi_value callback_method_wxSharp_GraphicsContext_Rotate(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Rotate(double angle)
overload0:
    {
        double angle;
        status = napi_get_value_double(env, args[0], &angle);
        auto __arg0 = angle;

        instance->Rotate(__arg0);
    }
    printf("wxSharp::GraphicsContext::Rotate: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::ConcatTransform
static napi_value callback_method_wxSharp_GraphicsContext_ConcatTransform(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void ConcatTransform(const ::wxSharp::GraphicsMatrix& matrix)
overload0:
    {
        wxSharp::GraphicsMatrix* matrix_instance;
        status = napi_unwrap(env, _this, (void**) &matrix_instance);
        auto &__arg0 = *matrix_instance;

        instance->ConcatTransform(__arg0);
    }
    printf("wxSharp::GraphicsContext::ConcatTransform: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::SetPen
static napi_value callback_method_wxSharp_GraphicsContext_SetPen(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetPen(const ::wxSharp::GraphicsPen& pen)
overload0:
    {
        wxSharp::GraphicsPen* pen_instance;
        status = napi_unwrap(env, _this, (void**) &pen_instance);
        auto &__arg0 = *pen_instance;

        instance->SetPen(__arg0);
    }

    // void SetPen(const ::wxSharp::Pen& pen)
overload1:
    {
        wxSharp::Pen* pen_instance;
        status = napi_unwrap(env, _this, (void**) &pen_instance);
        auto &__arg0 = *pen_instance;

        instance->SetPen(__arg0);
    }
    printf("wxSharp::GraphicsContext::SetPen: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::SetBrush
static napi_value callback_method_wxSharp_GraphicsContext_SetBrush(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetBrush(const ::wxSharp::GraphicsBrush& brush)
overload0:
    {
        wxSharp::GraphicsBrush* brush_instance;
        status = napi_unwrap(env, _this, (void**) &brush_instance);
        auto &__arg0 = *brush_instance;

        instance->SetBrush(__arg0);
    }

    // void SetBrush(const ::wxSharp::Brush& brush)
overload1:
    {
        wxSharp::Brush* brush_instance;
        status = napi_unwrap(env, _this, (void**) &brush_instance);
        auto &__arg0 = *brush_instance;

        instance->SetBrush(__arg0);
    }
    printf("wxSharp::GraphicsContext::SetBrush: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::SetFont
static napi_value callback_method_wxSharp_GraphicsContext_SetFont(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetFont(const ::wxSharp::GraphicsFont& font)
overload0:
    {
        wxSharp::GraphicsFont* font_instance;
        status = napi_unwrap(env, _this, (void**) &font_instance);
        auto &__arg0 = *font_instance;

        instance->SetFont(__arg0);
    }
    printf("wxSharp::GraphicsContext::SetFont: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::StrokePath
static napi_value callback_method_wxSharp_GraphicsContext_StrokePath(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void StrokePath(const ::wxSharp::GraphicsPath& path)
overload0:
    {
        wxSharp::GraphicsPath* path_instance;
        status = napi_unwrap(env, _this, (void**) &path_instance);
        auto &__arg0 = *path_instance;

        instance->StrokePath(__arg0);
    }
    printf("wxSharp::GraphicsContext::StrokePath: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::FillPath
static napi_value callback_method_wxSharp_GraphicsContext_FillPath(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void FillPath(const ::wxSharp::GraphicsPath& path, ::wxSharp::PolygonFillMode fillStyle)
overload0:
    {
        wxSharp::GraphicsPath* path_instance;
        status = napi_unwrap(env, _this, (void**) &path_instance);
        auto &__arg0 = *path_instance;

        int32_t fillStyle;
        status = napi_get_value_int32(env, args[1], &fillStyle);
        auto __arg1 = (::wxSharp::PolygonFillMode)fillStyle;

        instance->FillPath(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsContext::FillPath: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::DrawPath
static napi_value callback_method_wxSharp_GraphicsContext_DrawPath(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DrawPath(const ::wxSharp::GraphicsPath& path, ::wxSharp::PolygonFillMode fillStyle)
overload0:
    {
        wxSharp::GraphicsPath* path_instance;
        status = napi_unwrap(env, _this, (void**) &path_instance);
        auto &__arg0 = *path_instance;

        int32_t fillStyle;
        status = napi_get_value_int32(env, args[1], &fillStyle);
        auto __arg1 = (::wxSharp::PolygonFillMode)fillStyle;

        instance->DrawPath(__arg0, __arg1);
    }
    printf("wxSharp::GraphicsContext::DrawPath: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::ClearRectangle
static napi_value callback_method_wxSharp_GraphicsContext_ClearRectangle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void ClearRectangle(double x, double y, double w, double h)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double w;
        status = napi_get_value_double(env, args[2], &w);
        auto __arg2 = w;

        double h;
        status = napi_get_value_double(env, args[3], &h);
        auto __arg3 = h;

        instance->ClearRectangle(__arg0, __arg1, __arg2, __arg3);
    }
    printf("wxSharp::GraphicsContext::ClearRectangle: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::DrawText
static napi_value callback_method_wxSharp_GraphicsContext_DrawText(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 5)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DrawText(const char* str, double x, double y)
overload0:
    {
        size_t _str_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_str_size);

        char* str = (char*) malloc(_str_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_str_size);
        assert(status == napi_ok);
        auto __arg0 = str;

        double x;
        status = napi_get_value_double(env, args[1], &x);
        auto __arg1 = x;

        double y;
        status = napi_get_value_double(env, args[2], &y);
        auto __arg2 = y;

        instance->DrawText(__arg0, __arg1, __arg2);
    }

    // void DrawText(const char* str, double x, double y, double angle)
overload1:
    {
        size_t _str_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_str_size);

        char* str = (char*) malloc(_str_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_str_size);
        assert(status == napi_ok);
        auto __arg0 = str;

        double x;
        status = napi_get_value_double(env, args[1], &x);
        auto __arg1 = x;

        double y;
        status = napi_get_value_double(env, args[2], &y);
        auto __arg2 = y;

        double angle;
        status = napi_get_value_double(env, args[3], &angle);
        auto __arg3 = angle;

        instance->DrawText(__arg0, __arg1, __arg2, __arg3);
    }

    // void DrawText(const char* str, double x, double y, const ::wxSharp::GraphicsBrush& backgroundBrush)
overload2:
    {
        size_t _str_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_str_size);

        char* str = (char*) malloc(_str_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_str_size);
        assert(status == napi_ok);
        auto __arg0 = str;

        double x;
        status = napi_get_value_double(env, args[1], &x);
        auto __arg1 = x;

        double y;
        status = napi_get_value_double(env, args[2], &y);
        auto __arg2 = y;

        wxSharp::GraphicsBrush* backgroundBrush_instance;
        status = napi_unwrap(env, _this, (void**) &backgroundBrush_instance);
        auto &__arg3 = *backgroundBrush_instance;

        instance->DrawText(__arg0, __arg1, __arg2, __arg3);
    }

    // void DrawText(const char* str, double x, double y, double angle, const ::wxSharp::GraphicsBrush& backgroundBrush)
overload3:
    {
        size_t _str_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_str_size);

        char* str = (char*) malloc(_str_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_str_size);
        assert(status == napi_ok);
        auto __arg0 = str;

        double x;
        status = napi_get_value_double(env, args[1], &x);
        auto __arg1 = x;

        double y;
        status = napi_get_value_double(env, args[2], &y);
        auto __arg2 = y;

        double angle;
        status = napi_get_value_double(env, args[3], &angle);
        auto __arg3 = angle;

        wxSharp::GraphicsBrush* backgroundBrush_instance;
        status = napi_unwrap(env, _this, (void**) &backgroundBrush_instance);
        auto &__arg4 = *backgroundBrush_instance;

        instance->DrawText(__arg0, __arg1, __arg2, __arg3, __arg4);
    }
    printf("wxSharp::GraphicsContext::DrawText: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::DrawBitmap
static napi_value callback_method_wxSharp_GraphicsContext_DrawBitmap(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 5 || argc > 5)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DrawBitmap(const ::wxSharp::GraphicsBitmap& bmp, double x, double y, double w, double h)
overload0:
    {
        wxSharp::GraphicsBitmap* bmp_instance;
        status = napi_unwrap(env, _this, (void**) &bmp_instance);
        auto &__arg0 = *bmp_instance;

        double x;
        status = napi_get_value_double(env, args[1], &x);
        auto __arg1 = x;

        double y;
        status = napi_get_value_double(env, args[2], &y);
        auto __arg2 = y;

        double w;
        status = napi_get_value_double(env, args[3], &w);
        auto __arg3 = w;

        double h;
        status = napi_get_value_double(env, args[4], &h);
        auto __arg4 = h;

        instance->DrawBitmap(__arg0, __arg1, __arg2, __arg3, __arg4);
    }
    printf("wxSharp::GraphicsContext::DrawBitmap: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::StrokeLine
static napi_value callback_method_wxSharp_GraphicsContext_StrokeLine(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void StrokeLine(double x1, double y1, double x2, double y2)
overload0:
    {
        double x1;
        status = napi_get_value_double(env, args[0], &x1);
        auto __arg0 = x1;

        double y1;
        status = napi_get_value_double(env, args[1], &y1);
        auto __arg1 = y1;

        double x2;
        status = napi_get_value_double(env, args[2], &x2);
        auto __arg2 = x2;

        double y2;
        status = napi_get_value_double(env, args[3], &y2);
        auto __arg3 = y2;

        instance->StrokeLine(__arg0, __arg1, __arg2, __arg3);
    }
    printf("wxSharp::GraphicsContext::StrokeLine: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::DrawRectangle
static napi_value callback_method_wxSharp_GraphicsContext_DrawRectangle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DrawRectangle(double x, double y, double w, double h)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double w;
        status = napi_get_value_double(env, args[2], &w);
        auto __arg2 = w;

        double h;
        status = napi_get_value_double(env, args[3], &h);
        auto __arg3 = h;

        instance->DrawRectangle(__arg0, __arg1, __arg2, __arg3);
    }
    printf("wxSharp::GraphicsContext::DrawRectangle: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::DrawEllipse
static napi_value callback_method_wxSharp_GraphicsContext_DrawEllipse(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DrawEllipse(double x, double y, double w, double h)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double w;
        status = napi_get_value_double(env, args[2], &w);
        auto __arg2 = w;

        double h;
        status = napi_get_value_double(env, args[3], &h);
        auto __arg3 = h;

        instance->DrawEllipse(__arg0, __arg1, __arg2, __arg3);
    }
    printf("wxSharp::GraphicsContext::DrawEllipse: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::DrawRoundedRectangle
static napi_value callback_method_wxSharp_GraphicsContext_DrawRoundedRectangle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 5 || argc > 5)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DrawRoundedRectangle(double x, double y, double w, double h, double radius)
overload0:
    {
        double x;
        status = napi_get_value_double(env, args[0], &x);
        auto __arg0 = x;

        double y;
        status = napi_get_value_double(env, args[1], &y);
        auto __arg1 = y;

        double w;
        status = napi_get_value_double(env, args[2], &w);
        auto __arg2 = w;

        double h;
        status = napi_get_value_double(env, args[3], &h);
        auto __arg3 = h;

        double radius;
        status = napi_get_value_double(env, args[4], &radius);
        auto __arg4 = radius;

        instance->DrawRoundedRectangle(__arg0, __arg1, __arg2, __arg3, __arg4);
    }
    printf("wxSharp::GraphicsContext::DrawRoundedRectangle: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::ShouldOffset
static napi_value callback_method_wxSharp_GraphicsContext_ShouldOffset(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->ShouldOffset();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::GraphicsContext::ShouldOffset: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::EnableOffset
static napi_value callback_method_wxSharp_GraphicsContext_EnableOffset(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void EnableOffset(bool enable)
overload0:
    {
        bool enable;
        status = napi_get_value_bool(env, args[0], &enable);
        auto __arg0 = (bool)enable;

        instance->EnableOffset(__arg0);
    }
    printf("wxSharp::GraphicsContext::EnableOffset: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::DisableOffset
static napi_value callback_method_wxSharp_GraphicsContext_DisableOffset(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->DisableOffset();
    printf("wxSharp::GraphicsContext::DisableOffset: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::Create
static napi_value callback_method_wxSharp_GraphicsContext_Create(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsContext* Create(const ::wxSharp::WindowDC& dc)
overload0:
    {
        wxSharp::WindowDC* dc_instance;
        status = napi_unwrap(env, _this, (void**) &dc_instance);
        auto &__arg0 = *dc_instance;

        ::wxSharp::GraphicsContext* __ret = ::wxSharp::GraphicsContext::Create(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsContext_GraphicsContext, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::GraphicsContext* Create(::wxSharp::Window* window)
overload1:
    {
        wxSharp::Window* window_instance;
        status = napi_unwrap(env, _this, (void**) &window_instance);
        auto __arg0 = window_instance;

        ::wxSharp::GraphicsContext* __ret = ::wxSharp::GraphicsContext::Create(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsContext_GraphicsContext, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsContext::Create: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsContext::CreateFromUnknownDC
static napi_value callback_method_wxSharp_GraphicsContext_CreateFromUnknownDC(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsContext* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsContext* CreateFromUnknownDC(const ::wxSharp::DC& dc)
overload0:
    {
        wxSharp::DC* dc_instance;
        status = napi_unwrap(env, _this, (void**) &dc_instance);
        auto &__arg0 = *dc_instance;

        ::wxSharp::GraphicsContext* __ret = ::wxSharp::GraphicsContext::CreateFromUnknownDC(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsContext_GraphicsContext, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsContext::CreateFromUnknownDC: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsContext(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "StartDoc", nullptr, callback_method_wxSharp_GraphicsContext_StartDoc, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EndDoc", nullptr, callback_method_wxSharp_GraphicsContext_EndDoc, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "StartPage", nullptr, callback_method_wxSharp_GraphicsContext_StartPage, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EndPage", nullptr, callback_method_wxSharp_GraphicsContext_EndPage, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Flush", nullptr, callback_method_wxSharp_GraphicsContext_Flush, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreatePath", nullptr, callback_method_wxSharp_GraphicsContext_CreatePath, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreatePen", nullptr, callback_method_wxSharp_GraphicsContext_CreatePen, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateBrush", nullptr, callback_method_wxSharp_GraphicsContext_CreateBrush, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateLinearGradientBrush", nullptr, callback_method_wxSharp_GraphicsContext_CreateLinearGradientBrush, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateRadialGradientBrush", nullptr, callback_method_wxSharp_GraphicsContext_CreateRadialGradientBrush, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateFont", nullptr, callback_method_wxSharp_GraphicsContext_CreateFont, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateSubBitmap", nullptr, callback_method_wxSharp_GraphicsContext_CreateSubBitmap, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateMatrix", nullptr, callback_method_wxSharp_GraphicsContext_CreateMatrix, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "PushState", nullptr, callback_method_wxSharp_GraphicsContext_PushState, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "PopState", nullptr, callback_method_wxSharp_GraphicsContext_PopState, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Clip", nullptr, callback_method_wxSharp_GraphicsContext_Clip, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ResetClip", nullptr, callback_method_wxSharp_GraphicsContext_ResetClip, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetAntialiasMode", nullptr, callback_method_wxSharp_GraphicsContext_SetAntialiasMode, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetInterpolationQuality", nullptr, callback_method_wxSharp_GraphicsContext_SetInterpolationQuality, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetCompositionMode", nullptr, callback_method_wxSharp_GraphicsContext_SetCompositionMode, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "BeginLayer", nullptr, callback_method_wxSharp_GraphicsContext_BeginLayer, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EndLayer", nullptr, callback_method_wxSharp_GraphicsContext_EndLayer, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Translate", nullptr, callback_method_wxSharp_GraphicsContext_Translate, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Scale", nullptr, callback_method_wxSharp_GraphicsContext_Scale, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Rotate", nullptr, callback_method_wxSharp_GraphicsContext_Rotate, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ConcatTransform", nullptr, callback_method_wxSharp_GraphicsContext_ConcatTransform, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetPen", nullptr, callback_method_wxSharp_GraphicsContext_SetPen, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetBrush", nullptr, callback_method_wxSharp_GraphicsContext_SetBrush, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetFont", nullptr, callback_method_wxSharp_GraphicsContext_SetFont, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "StrokePath", nullptr, callback_method_wxSharp_GraphicsContext_StrokePath, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "FillPath", nullptr, callback_method_wxSharp_GraphicsContext_FillPath, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DrawPath", nullptr, callback_method_wxSharp_GraphicsContext_DrawPath, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ClearRectangle", nullptr, callback_method_wxSharp_GraphicsContext_ClearRectangle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DrawText", nullptr, callback_method_wxSharp_GraphicsContext_DrawText, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DrawBitmap", nullptr, callback_method_wxSharp_GraphicsContext_DrawBitmap, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "StrokeLine", nullptr, callback_method_wxSharp_GraphicsContext_StrokeLine, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DrawRectangle", nullptr, callback_method_wxSharp_GraphicsContext_DrawRectangle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DrawEllipse", nullptr, callback_method_wxSharp_GraphicsContext_DrawEllipse, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DrawRoundedRectangle", nullptr, callback_method_wxSharp_GraphicsContext_DrawRoundedRectangle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ShouldOffset", nullptr, callback_method_wxSharp_GraphicsContext_ShouldOffset, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EnableOffset", nullptr, callback_method_wxSharp_GraphicsContext_EnableOffset, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DisableOffset", nullptr, callback_method_wxSharp_GraphicsContext_DisableOffset, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Create", nullptr, callback_method_wxSharp_GraphicsContext_Create, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
        { "CreateFromUnknownDC", nullptr, callback_method_wxSharp_GraphicsContext_CreateFromUnknownDC, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsContext", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsContext_GraphicsContext, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsContext_GraphicsContext);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_GraphicsRenderer_GraphicsRenderer(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_GraphicsRenderer_GraphicsRenderer;

// wxSharp::GraphicsRenderer::GraphicsRenderer
static napi_value callback_method_wxSharp_GraphicsRenderer_GraphicsRenderer(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // GraphicsRenderer()
overload0:
    {
        instance = new wxSharp::GraphicsRenderer();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_GraphicsRenderer_GraphicsRenderer, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::GraphicsRenderer::GraphicsRenderer: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreateContext
static napi_value callback_method_wxSharp_GraphicsRenderer_CreateContext(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsContext* CreateContext(const ::wxSharp::WindowDC& dc)
overload0:
    {
        wxSharp::WindowDC* dc_instance;
        status = napi_unwrap(env, _this, (void**) &dc_instance);
        auto &__arg0 = *dc_instance;

        ::wxSharp::GraphicsContext* __ret = instance->CreateContext(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsContext_GraphicsContext, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::GraphicsContext* CreateContext(::wxSharp::Window* window)
overload1:
    {
        wxSharp::Window* window_instance;
        status = napi_unwrap(env, _this, (void**) &window_instance);
        auto __arg0 = window_instance;

        ::wxSharp::GraphicsContext* __ret = instance->CreateContext(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsContext_GraphicsContext, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsRenderer::CreateContext: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreateContextFromUnknownDC
static napi_value callback_method_wxSharp_GraphicsRenderer_CreateContextFromUnknownDC(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsContext* CreateContextFromUnknownDC(const ::wxSharp::DC& dc)
overload0:
    {
        wxSharp::DC* dc_instance;
        status = napi_unwrap(env, _this, (void**) &dc_instance);
        auto &__arg0 = *dc_instance;

        ::wxSharp::GraphicsContext* __ret = instance->CreateContextFromUnknownDC(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsContext_GraphicsContext, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsRenderer::CreateContextFromUnknownDC: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreateMeasuringContext
static napi_value callback_method_wxSharp_GraphicsRenderer_CreateMeasuringContext(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    ::wxSharp::GraphicsContext* __ret = instance->CreateMeasuringContext();

    napi_value ____ret_ctor;
    status = napi_get_reference_value(env, ctor_wxSharp_GraphicsContext_GraphicsContext, &____ret_ctor);
    assert(status == napi_ok);

    napi_value ____ret_instance;
    status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
    assert(status == napi_ok);


    return ____ret_instance;
    printf("wxSharp::GraphicsRenderer::CreateMeasuringContext: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreatePath
static napi_value callback_method_wxSharp_GraphicsRenderer_CreatePath(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    ::wxSharp::GraphicsPath __ret = instance->CreatePath();

    napi_value ____ret_ctor;
    status = napi_get_reference_value(env, ctor_wxSharp_GraphicsPath_GraphicsPath, &____ret_ctor);
    assert(status == napi_ok);

    napi_value ____ret_instance;
    status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
    assert(status == napi_ok);


    return ____ret_instance;
    printf("wxSharp::GraphicsRenderer::CreatePath: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreateMatrix
static napi_value callback_method_wxSharp_GraphicsRenderer_CreateMatrix(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 6 || argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_NUMBER(types[5]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsMatrix CreateMatrix(double a, double b, double c, double d, double tx, double ty)
overload0:
    {
        double a;
        status = napi_get_value_double(env, args[0], &a);
        auto __arg0 = a;

        double b;
        status = napi_get_value_double(env, args[1], &b);
        auto __arg1 = b;

        double c;
        status = napi_get_value_double(env, args[2], &c);
        auto __arg2 = c;

        double d;
        status = napi_get_value_double(env, args[3], &d);
        auto __arg3 = d;

        double tx;
        status = napi_get_value_double(env, args[4], &tx);
        auto __arg4 = tx;

        double ty;
        status = napi_get_value_double(env, args[5], &ty);
        auto __arg5 = ty;

        ::wxSharp::GraphicsMatrix __ret = instance->CreateMatrix(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsMatrix_GraphicsMatrix, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsRenderer::CreateMatrix: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreatePen
static napi_value callback_method_wxSharp_GraphicsRenderer_CreatePen(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsPen CreatePen(const ::wxSharp::GraphicsPenInfo& info)
overload0:
    {
        wxSharp::GraphicsPenInfo* info_instance;
        status = napi_unwrap(env, _this, (void**) &info_instance);
        auto &__arg0 = *info_instance;

        ::wxSharp::GraphicsPen __ret = instance->CreatePen(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsPen_GraphicsPen, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsRenderer::CreatePen: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreateBrush
static napi_value callback_method_wxSharp_GraphicsRenderer_CreateBrush(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsBrush CreateBrush(const ::wxSharp::Brush& brush)
overload0:
    {
        wxSharp::Brush* brush_instance;
        status = napi_unwrap(env, _this, (void**) &brush_instance);
        auto &__arg0 = *brush_instance;

        ::wxSharp::GraphicsBrush __ret = instance->CreateBrush(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBrush_GraphicsBrush, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsRenderer::CreateBrush: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreateLinearGradientBrush
static napi_value callback_method_wxSharp_GraphicsRenderer_CreateLinearGradientBrush(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 6 || argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_OBJECT(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_OBJECT(types[5]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, const ::wxSharp::GraphicsGradientStops& stops, const ::wxSharp::GraphicsMatrix& matrix)
overload0:
    {
        double x1;
        status = napi_get_value_double(env, args[0], &x1);
        auto __arg0 = x1;

        double y1;
        status = napi_get_value_double(env, args[1], &y1);
        auto __arg1 = y1;

        double x2;
        status = napi_get_value_double(env, args[2], &x2);
        auto __arg2 = x2;

        double y2;
        status = napi_get_value_double(env, args[3], &y2);
        auto __arg3 = y2;

        wxSharp::GraphicsGradientStops* stops_instance;
        status = napi_unwrap(env, _this, (void**) &stops_instance);
        auto &__arg4 = *stops_instance;

        wxSharp::GraphicsMatrix* matrix_instance;
        status = napi_unwrap(env, _this, (void**) &matrix_instance);
        auto &__arg5 = *matrix_instance;

        ::wxSharp::GraphicsBrush __ret = instance->CreateLinearGradientBrush(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBrush_GraphicsBrush, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsRenderer::CreateLinearGradientBrush: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreateRadialGradientBrush
static napi_value callback_method_wxSharp_GraphicsRenderer_CreateRadialGradientBrush(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 7 || argc > 7)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_OBJECT(types[5]))
        goto typecheck6;

    goto error;

typecheck6:
    if (NAPI_IS_OBJECT(types[6]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, const ::wxSharp::GraphicsGradientStops& stops, const ::wxSharp::GraphicsMatrix& matrix)
overload0:
    {
        double startX;
        status = napi_get_value_double(env, args[0], &startX);
        auto __arg0 = startX;

        double startY;
        status = napi_get_value_double(env, args[1], &startY);
        auto __arg1 = startY;

        double endX;
        status = napi_get_value_double(env, args[2], &endX);
        auto __arg2 = endX;

        double endY;
        status = napi_get_value_double(env, args[3], &endY);
        auto __arg3 = endY;

        double radius;
        status = napi_get_value_double(env, args[4], &radius);
        auto __arg4 = radius;

        wxSharp::GraphicsGradientStops* stops_instance;
        status = napi_unwrap(env, _this, (void**) &stops_instance);
        auto &__arg5 = *stops_instance;

        wxSharp::GraphicsMatrix* matrix_instance;
        status = napi_unwrap(env, _this, (void**) &matrix_instance);
        auto &__arg6 = *matrix_instance;

        ::wxSharp::GraphicsBrush __ret = instance->CreateRadialGradientBrush(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBrush_GraphicsBrush, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsRenderer::CreateRadialGradientBrush: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreateFont
static napi_value callback_method_wxSharp_GraphicsRenderer_CreateFont(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_NUMBER(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_OBJECT(types[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsFont CreateFont(double sizeInPixels, const char* facename, int flags, const ::wxSharp::Color& col)
overload0:
    {
        double sizeInPixels;
        status = napi_get_value_double(env, args[0], &sizeInPixels);
        auto __arg0 = sizeInPixels;

        size_t _facename_size;
        status = napi_get_value_string_utf8(env, args[1], nullptr, 0, &_facename_size);

        char* facename = (char*) malloc(_facename_size);
        status = napi_get_value_string_utf8(env, args[1], nullptr, 0, &_facename_size);
        assert(status == napi_ok);
        auto __arg1 = facename;

        int32_t flags;
        status = napi_get_value_int32(env, args[2], &flags);
        auto __arg2 = flags;

        wxSharp::Color* col_instance;
        status = napi_unwrap(env, _this, (void**) &col_instance);
        auto &__arg3 = *col_instance;

        ::wxSharp::GraphicsFont __ret = instance->CreateFont(__arg0, __arg1, __arg2, __arg3);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsFont_GraphicsFont, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsRenderer::CreateFont: %lu\n", argc);
    return _this;
}

// wxSharp::GraphicsRenderer::CreateSubBitmap
static napi_value callback_method_wxSharp_GraphicsRenderer_CreateSubBitmap(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 5 || argc > 5)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::GraphicsRenderer* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_NUMBER(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_NUMBER(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_NUMBER(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_NUMBER(types[4]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::GraphicsBitmap CreateSubBitmap(const ::wxSharp::GraphicsBitmap& bitmap, double x, double y, double w, double h)
overload0:
    {
        wxSharp::GraphicsBitmap* bitmap_instance;
        status = napi_unwrap(env, _this, (void**) &bitmap_instance);
        auto &__arg0 = *bitmap_instance;

        double x;
        status = napi_get_value_double(env, args[1], &x);
        auto __arg1 = x;

        double y;
        status = napi_get_value_double(env, args[2], &y);
        auto __arg2 = y;

        double w;
        status = napi_get_value_double(env, args[3], &w);
        auto __arg3 = w;

        double h;
        status = napi_get_value_double(env, args[4], &h);
        auto __arg4 = h;

        ::wxSharp::GraphicsBitmap __ret = instance->CreateSubBitmap(__arg0, __arg1, __arg2, __arg3, __arg4);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_GraphicsBitmap_GraphicsBitmap, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::GraphicsRenderer::CreateSubBitmap: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_GraphicsRenderer(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "CreateContext", nullptr, callback_method_wxSharp_GraphicsRenderer_CreateContext, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateContextFromUnknownDC", nullptr, callback_method_wxSharp_GraphicsRenderer_CreateContextFromUnknownDC, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateMeasuringContext", nullptr, callback_method_wxSharp_GraphicsRenderer_CreateMeasuringContext, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreatePath", nullptr, callback_method_wxSharp_GraphicsRenderer_CreatePath, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateMatrix", nullptr, callback_method_wxSharp_GraphicsRenderer_CreateMatrix, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreatePen", nullptr, callback_method_wxSharp_GraphicsRenderer_CreatePen, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateBrush", nullptr, callback_method_wxSharp_GraphicsRenderer_CreateBrush, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateLinearGradientBrush", nullptr, callback_method_wxSharp_GraphicsRenderer_CreateLinearGradientBrush, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateRadialGradientBrush", nullptr, callback_method_wxSharp_GraphicsRenderer_CreateRadialGradientBrush, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateFont", nullptr, callback_method_wxSharp_GraphicsRenderer_CreateFont, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CreateSubBitmap", nullptr, callback_method_wxSharp_GraphicsRenderer_CreateSubBitmap, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "GraphicsRenderer", NAPI_AUTO_LENGTH, callback_method_wxSharp_GraphicsRenderer_GraphicsRenderer, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_GraphicsRenderer_GraphicsRenderer);
    assert(status == napi_ok);

    return constructor;
}

void register_wxsharp_graphics(napi_env env, napi_value exports)
{
    napi_value value;

    value = register_enum_wxSharp_GradientType(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GradientType", value));

    value = register_enum_wxSharp_AntialiasMode(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "AntialiasMode", value));

    value = register_enum_wxSharp_InterpolationQuality(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "InterpolationQuality", value));

    value = register_enum_wxSharp_CompositionMode(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "CompositionMode", value));

    value = register_class_wxSharp_GraphicsObject(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsObject", value));

    value = register_class_wxSharp_GraphicsPen(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsPen", value));

    value = register_class_wxSharp_GraphicsBrush(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsBrush", value));

    value = register_class_wxSharp_GraphicsFont(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsFont", value));

    value = register_class_wxSharp_GraphicsBitmap(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsBitmap", value));

    value = register_class_wxSharp_GraphicsMatrix(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsMatrix", value));

    value = register_class_wxSharp_GraphicsGradientStop(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsGradientStop", value));

    value = register_class_wxSharp_GraphicsGradientStops(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsGradientStops", value));

    value = register_class_wxSharp_GraphicsPenInfo(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsPenInfo", value));

    value = register_class_wxSharp_GraphicsPath(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsPath", value));

    value = register_class_wxSharp_GraphicsContext(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsContext", value));

    value = register_class_wxSharp_GraphicsRenderer(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GraphicsRenderer", value));
}
