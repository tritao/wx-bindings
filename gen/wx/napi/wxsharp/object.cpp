// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <wxsharp/object.h>
#include <node/node_api.h>
#include <assert.h>
#include <stdio.h>
#include "NAPIHelpers.h"

static void dtor_wxSharp_RefCounter_RefCounter(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_RefCounter_RefCounter;

// wxSharp::RefCounter::RefCounter
static napi_value callback_method_wxSharp_RefCounter_RefCounter(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::RefCounter* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // RefCounter()
overload0:
    {
        instance = new wxSharp::RefCounter();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_RefCounter_RefCounter, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::RefCounter::RefCounter: %lu\n", argc);
    return _this;
}

// wxSharp::RefCounter::IncRef
static napi_value callback_method_wxSharp_RefCounter_IncRef(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::RefCounter* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->IncRef();
    printf("wxSharp::RefCounter::IncRef: %lu\n", argc);
    return _this;
}

// wxSharp::RefCounter::DecRef
static napi_value callback_method_wxSharp_RefCounter_DecRef(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::RefCounter* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->DecRef();
    printf("wxSharp::RefCounter::DecRef: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_RefCounter(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "IncRef", nullptr, callback_method_wxSharp_RefCounter_IncRef, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DecRef", nullptr, callback_method_wxSharp_RefCounter_DecRef, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "RefCounter", NAPI_AUTO_LENGTH, callback_method_wxSharp_RefCounter_RefCounter, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_RefCounter_RefCounter);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_Object_Object(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_Object_Object;

// wxSharp::Object::Object
static napi_value callback_method_wxSharp_Object_Object(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Object* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // Object()
overload0:
    {
        instance = new wxSharp::Object();
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_Object_Object, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::Object::Object: %lu\n", argc);
    return _this;
}

// wxSharp::Object::Ref
static napi_value callback_method_wxSharp_Object_Ref(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Object* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Ref(const ::wxSharp::Object& clone)
overload0:
    {
        wxSharp::Object* clone_instance;
        status = napi_unwrap(env, _this, (void**) &clone_instance);
        auto &__arg0 = *clone_instance;

        instance->Ref(__arg0);
    }
    printf("wxSharp::Object::Ref: %lu\n", argc);
    return _this;
}

// wxSharp::Object::UnRef
static napi_value callback_method_wxSharp_Object_UnRef(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Object* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->UnRef();
    printf("wxSharp::Object::UnRef: %lu\n", argc);
    return _this;
}

// wxSharp::Object::UnShare
static napi_value callback_method_wxSharp_Object_UnShare(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Object* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->UnShare();
    printf("wxSharp::Object::UnShare: %lu\n", argc);
    return _this;
}

// wxSharp::Object::IsSameAs
static napi_value callback_method_wxSharp_Object_IsSameAs(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Object* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool IsSameAs(const ::wxSharp::Object& o) const
overload0:
    {
        wxSharp::Object* o_instance;
        status = napi_unwrap(env, _this, (void**) &o_instance);
        auto &__arg0 = *o_instance;

        bool __ret = instance->IsSameAs(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Object::IsSameAs: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_Object(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "Ref", nullptr, callback_method_wxSharp_Object_Ref, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "UnRef", nullptr, callback_method_wxSharp_Object_UnRef, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "UnShare", nullptr, callback_method_wxSharp_Object_UnShare, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsSameAs", nullptr, callback_method_wxSharp_Object_IsSameAs, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "Object", NAPI_AUTO_LENGTH, callback_method_wxSharp_Object_Object, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_Object_Object);
    assert(status == napi_ok);

    return constructor;
}

void register_wxsharp_object(napi_env env, napi_value exports)
{
    napi_value value;

    value = register_class_wxSharp_RefCounter(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "RefCounter", value));

    value = register_class_wxSharp_Object(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "Object", value));
}
