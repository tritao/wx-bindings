// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <wxsharp/panel.h>
#include <node/node_api.h>
#include <assert.h>
#include <stdio.h>
#include "NAPIHelpers.h"

extern napi_ref ctor_wxSharp_Event_Event;
extern napi_ref ctor_wxSharp_GraphicsContext_GraphicsContext;
extern napi_ref ctor_wxSharp_GraphicsPath_GraphicsPath;
extern napi_ref ctor_wxSharp_GraphicsMatrix_GraphicsMatrix;
extern napi_ref ctor_wxSharp_GraphicsPen_GraphicsPen;
extern napi_ref ctor_wxSharp_GraphicsBrush_GraphicsBrush;
extern napi_ref ctor_wxSharp_GraphicsFont_GraphicsFont;
extern napi_ref ctor_wxSharp_GraphicsBitmap_GraphicsBitmap;
extern napi_ref ctor_wxSharp_Color_Color;
extern napi_ref ctor_wxSharp_Size_Size;
extern napi_ref ctor_wxSharp_Rect_Rect;
extern napi_ref ctor_wxSharp_Point_Point;
extern napi_ref ctor_wxSharp_SizerItem_SizerItem;
extern napi_ref ctor_wxSharp_Window_Window;
extern napi_ref ctor_wxSharp_EvtHandler_EvtHandler;
extern napi_ref ctor_wxSharp_VisualAttributes_VisualAttributes;

static void dtor_wxSharp_Panel_Panel(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_Panel_Panel;

// wxSharp::Panel::Panel
static napi_value callback_method_wxSharp_Panel_Panel(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Panel* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_OBJECT(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_OBJECT(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_INT32(types[4], args[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_INT32(types[5], args[5]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // Panel()
overload0:
    {
        instance = new wxSharp::Panel();
    }

    // Panel(::wxSharp::Window* parent, int winid, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name)
overload1:
    {
        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg0 = parent_instance;

        int32_t winid;
        status = napi_get_value_int32(env, args[1], &winid);
        auto __arg1 = winid;

        wxSharp::Point* pos_instance;
        status = napi_unwrap(env, _this, (void**) &pos_instance);
        auto &__arg2 = *pos_instance;

        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg3 = *size_instance;

        int32_t style;
        status = napi_get_value_int32(env, args[4], &style);
        auto __arg4 = style;

        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[5], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[5], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg5 = name;

        instance = new wxSharp::Panel(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_Panel_Panel, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::Panel::Panel: %lu\n", argc);
    return _this;
}

// wxSharp::Panel::Create
static napi_value callback_method_wxSharp_Panel_Create(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 6 || argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Panel* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_OBJECT(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_OBJECT(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_INT32(types[4], args[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_INT32(types[5], args[5]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Create(::wxSharp::Window* parent, int winid, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name)
overload0:
    {
        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg0 = parent_instance;

        int32_t winid;
        status = napi_get_value_int32(env, args[1], &winid);
        auto __arg1 = winid;

        wxSharp::Point* pos_instance;
        status = napi_unwrap(env, _this, (void**) &pos_instance);
        auto &__arg2 = *pos_instance;

        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg3 = *size_instance;

        int32_t style;
        status = napi_get_value_int32(env, args[4], &style);
        auto __arg4 = style;

        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[5], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[5], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg5 = name;

        bool __ret = instance->Create(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Panel::Create: %lu\n", argc);
    return _this;
}

// wxSharp::Panel::InitDialog
static napi_value callback_method_wxSharp_Panel_InitDialog(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Panel* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->InitDialog();
    printf("wxSharp::Panel::InitDialog: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_Panel(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "Create", nullptr, callback_method_wxSharp_Panel_Create, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "InitDialog", nullptr, callback_method_wxSharp_Panel_InitDialog, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "Panel", NAPI_AUTO_LENGTH, callback_method_wxSharp_Panel_Panel, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_Panel_Panel);
    assert(status == napi_ok);

    return constructor;
}

void register_wxsharp_panel(napi_env env, napi_value exports)
{
    napi_value value;

    value = register_class_wxSharp_Panel(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "Panel", value));
}
