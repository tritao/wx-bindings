// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <wxsharp/toplevel.h>
#include <node/node_api.h>
#include <assert.h>
#include <stdio.h>
#include "NAPIHelpers.h"

extern napi_ref ctor_wxSharp_Event_Event;
extern napi_ref ctor_wxSharp_GraphicsContext_GraphicsContext;
extern napi_ref ctor_wxSharp_GraphicsPath_GraphicsPath;
extern napi_ref ctor_wxSharp_GraphicsMatrix_GraphicsMatrix;
extern napi_ref ctor_wxSharp_GraphicsPen_GraphicsPen;
extern napi_ref ctor_wxSharp_GraphicsBrush_GraphicsBrush;
extern napi_ref ctor_wxSharp_GraphicsFont_GraphicsFont;
extern napi_ref ctor_wxSharp_GraphicsBitmap_GraphicsBitmap;
extern napi_ref ctor_wxSharp_Color_Color;
extern napi_ref ctor_wxSharp_Size_Size;
extern napi_ref ctor_wxSharp_Rect_Rect;
extern napi_ref ctor_wxSharp_Point_Point;
extern napi_ref ctor_wxSharp_SizerItem_SizerItem;
extern napi_ref ctor_wxSharp_Window_Window;
extern napi_ref ctor_wxSharp_EvtHandler_EvtHandler;
extern napi_ref ctor_wxSharp_VisualAttributes_VisualAttributes;

static napi_value register_enum_wxSharp_FrameStyle(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // CAPTION
    napi_value i_0;
    status = napi_create_int32(env, 536870912, &i_0);
    assert(status == napi_ok);

    // CLIP_CHILDREN
    napi_value i_1;
    status = napi_create_int32(env, 4194304, &i_1);
    assert(status == napi_ok);

    // FRAME_SHAPED
    napi_value i_2;
    status = napi_create_int32(env, 16, &i_2);
    assert(status == napi_ok);

    // STAY_ON_TOP
    napi_value i_3;
    status = napi_create_int32(env, 32768, &i_3);
    assert(status == napi_ok);

    // MINIMIZE
    napi_value i_4;
    status = napi_create_int32(env, 0, &i_4);
    assert(status == napi_ok);

    // MAXIMIZE
    napi_value i_5;
    status = napi_create_int32(env, 8192, &i_5);
    assert(status == napi_ok);

    // CLOSE_BOX
    napi_value i_6;
    status = napi_create_int32(env, 4096, &i_6);
    assert(status == napi_ok);

    // SYSTEM_MENU
    napi_value i_7;
    status = napi_create_int32(env, 2048, &i_7);
    assert(status == napi_ok);

    // MINIMIZE_BOX
    napi_value i_8;
    status = napi_create_int32(env, 1024, &i_8);
    assert(status == napi_ok);

    // MAXIMIZE_BOX
    napi_value i_9;
    status = napi_create_int32(env, 512, &i_9);
    assert(status == napi_ok);

    // RESIZE_BORDER
    napi_value i_10;
    status = napi_create_int32(env, 64, &i_10);
    assert(status == napi_ok);

    // DEFAULT_FRAME_STYLE
    napi_value i_11;
    status = napi_create_int32(env, 541072960, &i_11);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "CAPTION", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "CLIP_CHILDREN", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "FRAME_SHAPED", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "STAY_ON_TOP", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "MINIMIZE", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "MAXIMIZE", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "CLOSE_BOX", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "SYSTEM_MENU", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "MINIMIZE_BOX", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "MAXIMIZE_BOX", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr },
        { "RESIZE_BORDER", nullptr, nullptr, nullptr, nullptr, i_10, attributes, nullptr },
        { "DEFAULT_FRAME_STYLE", nullptr, nullptr, nullptr, nullptr, i_11, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_FullscreenMode(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NOMENUBAR
    napi_value i_0;
    status = napi_create_uint32(env, 0x1, &i_0);
    assert(status == napi_ok);

    // NOTOOLBAR
    napi_value i_1;
    status = napi_create_uint32(env, 0x2, &i_1);
    assert(status == napi_ok);

    // NOSTATUSBAR
    napi_value i_2;
    status = napi_create_uint32(env, 0x4, &i_2);
    assert(status == napi_ok);

    // NOBORDER
    napi_value i_3;
    status = napi_create_uint32(env, 0x8, &i_3);
    assert(status == napi_ok);

    // NOCAPTION
    napi_value i_4;
    status = napi_create_uint32(env, 0x10, &i_4);
    assert(status == napi_ok);

    // ALL
    napi_value i_5;
    status = napi_create_uint32(env, 31, &i_5);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NOMENUBAR", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "NOTOOLBAR", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "NOSTATUSBAR", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "NOBORDER", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "NOCAPTION", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "ALL", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_UserAttention(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // INFO
    napi_value i_0;
    status = napi_create_uint32(env, 1, &i_0);
    assert(status == napi_ok);

    // ERROR
    napi_value i_1;
    status = napi_create_uint32(env, 2, &i_1);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "INFO", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "ERROR", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static void dtor_wxSharp_TopLevelWindow_TopLevelWindow(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_TopLevelWindow_TopLevelWindow;

// wxSharp::TopLevelWindow::TopLevelWindow
static napi_value callback_method_wxSharp_TopLevelWindow_TopLevelWindow(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 7)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_OBJECT(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_OBJECT(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_INT32(types[5], args[5]))
        goto typecheck6;

    goto error;

typecheck6:
    if (NAPI_IS_INT32(types[6], args[6]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // TopLevelWindow()
overload0:
    {
        instance = new wxSharp::TopLevelWindow();
    }

    // TopLevelWindow(::wxSharp::Window* parent, int winid, const char* title, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name)
overload1:
    {
        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg0 = parent_instance;

        int32_t winid;
        status = napi_get_value_int32(env, args[1], &winid);
        auto __arg1 = winid;

        size_t _title_size;
        status = napi_get_value_string_utf8(env, args[2], nullptr, 0, &_title_size);

        char* title = (char*) malloc(_title_size);
        status = napi_get_value_string_utf8(env, args[2], nullptr, 0, &_title_size);
        assert(status == napi_ok);
        auto __arg2 = title;

        wxSharp::Point* pos_instance;
        status = napi_unwrap(env, _this, (void**) &pos_instance);
        auto &__arg3 = *pos_instance;

        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg4 = *size_instance;

        int32_t style;
        status = napi_get_value_int32(env, args[5], &style);
        auto __arg5 = style;

        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[6], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[6], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg6 = name;

        instance = new wxSharp::TopLevelWindow(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_TopLevelWindow_TopLevelWindow, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::TopLevelWindow::TopLevelWindow: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::Create
static napi_value callback_method_wxSharp_TopLevelWindow_Create(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 7 || argc > 7)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_OBJECT(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_OBJECT(types[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_INT32(types[5], args[5]))
        goto typecheck6;

    goto error;

typecheck6:
    if (NAPI_IS_INT32(types[6], args[6]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Create(::wxSharp::Window* parent, int id, const char* title, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name)
overload0:
    {
        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg0 = parent_instance;

        int32_t id;
        status = napi_get_value_int32(env, args[1], &id);
        auto __arg1 = id;

        size_t _title_size;
        status = napi_get_value_string_utf8(env, args[2], nullptr, 0, &_title_size);

        char* title = (char*) malloc(_title_size);
        status = napi_get_value_string_utf8(env, args[2], nullptr, 0, &_title_size);
        assert(status == napi_ok);
        auto __arg2 = title;

        wxSharp::Point* pos_instance;
        status = napi_unwrap(env, _this, (void**) &pos_instance);
        auto &__arg3 = *pos_instance;

        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg4 = *size_instance;

        int32_t style;
        status = napi_get_value_int32(env, args[5], &style);
        auto __arg5 = style;

        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[6], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[6], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg6 = name;

        bool __ret = instance->Create(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::TopLevelWindow::Create: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::Maximize
static napi_value callback_method_wxSharp_TopLevelWindow_Maximize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Maximize(bool maximize)
overload0:
    {
        bool maximize;
        status = napi_get_value_bool(env, args[0], &maximize);
        auto __arg0 = (bool)maximize;

        instance->Maximize(__arg0);
    }
    printf("wxSharp::TopLevelWindow::Maximize: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::Iconize
static napi_value callback_method_wxSharp_TopLevelWindow_Iconize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Iconize(bool iconize)
overload0:
    {
        bool iconize;
        status = napi_get_value_bool(env, args[0], &iconize);
        auto __arg0 = (bool)iconize;

        instance->Iconize(__arg0);
    }
    printf("wxSharp::TopLevelWindow::Iconize: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::Restore
static napi_value callback_method_wxSharp_TopLevelWindow_Restore(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Restore();
    printf("wxSharp::TopLevelWindow::Restore: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::EnableCloseButton
static napi_value callback_method_wxSharp_TopLevelWindow_EnableCloseButton(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool EnableCloseButton(bool enable)
overload0:
    {
        bool enable;
        status = napi_get_value_bool(env, args[0], &enable);
        auto __arg0 = (bool)enable;

        bool __ret = instance->EnableCloseButton(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::TopLevelWindow::EnableCloseButton: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::ShowWithoutActivating
static napi_value callback_method_wxSharp_TopLevelWindow_ShowWithoutActivating(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->ShowWithoutActivating();
    printf("wxSharp::TopLevelWindow::ShowWithoutActivating: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::ShowFullScreen
static napi_value callback_method_wxSharp_TopLevelWindow_ShowFullScreen(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool ShowFullScreen(bool show, long style)
overload0:
    {
        bool show;
        status = napi_get_value_bool(env, args[0], &show);
        auto __arg0 = (bool)show;

        int32_t style;
        status = napi_get_value_int32(env, args[1], &style);
        auto __arg1 = style;

        bool __ret = instance->ShowFullScreen(__arg0, __arg1);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::TopLevelWindow::ShowFullScreen: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::RequestUserAttention
static napi_value callback_method_wxSharp_TopLevelWindow_RequestUserAttention(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void RequestUserAttention(int flags)
overload0:
    {
        int32_t flags;
        status = napi_get_value_int32(env, args[0], &flags);
        auto __arg0 = flags;

        instance->RequestUserAttention(__arg0);
    }
    printf("wxSharp::TopLevelWindow::RequestUserAttention: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::SetWindowStyleFlag
static napi_value callback_method_wxSharp_TopLevelWindow_SetWindowStyleFlag(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetWindowStyleFlag(long style) override
overload0:
    {
        int32_t style;
        status = napi_get_value_int32(env, args[0], &style);
        auto __arg0 = style;

        instance->SetWindowStyleFlag(__arg0);
    }
    printf("wxSharp::TopLevelWindow::SetWindowStyleFlag: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::Show
static napi_value callback_method_wxSharp_TopLevelWindow_Show(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Show(bool show) override
overload0:
    {
        bool show;
        status = napi_get_value_bool(env, args[0], &show);
        auto __arg0 = (bool)show;

        bool __ret = instance->Show(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::TopLevelWindow::Show: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::Raise
static napi_value callback_method_wxSharp_TopLevelWindow_Raise(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Raise();
    printf("wxSharp::TopLevelWindow::Raise: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::SetLabel
static napi_value callback_method_wxSharp_TopLevelWindow_SetLabel(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetLabel(const char* label) override
overload0:
    {
        size_t _label_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_label_size);

        char* label = (char*) malloc(_label_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_label_size);
        assert(status == napi_ok);
        auto __arg0 = label;

        instance->SetLabel(__arg0);
    }
    printf("wxSharp::TopLevelWindow::SetLabel: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::GetDefaultAttributes
static napi_value callback_method_wxSharp_TopLevelWindow_GetDefaultAttributes(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    ::wxSharp::VisualAttributes __ret = instance->GetDefaultAttributes();

    napi_value ____ret_ctor;
    status = napi_get_reference_value(env, ctor_wxSharp_VisualAttributes_VisualAttributes, &____ret_ctor);
    assert(status == napi_ok);

    napi_value ____ret_instance;
    status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
    assert(status == napi_ok);


    return ____ret_instance;
    printf("wxSharp::TopLevelWindow::GetDefaultAttributes: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::SetTransparent
static napi_value callback_method_wxSharp_TopLevelWindow_SetTransparent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SetTransparent(unsigned char alpha) override
overload0:
    {
        uint32_t alpha;
        status = napi_get_value_uint32(env, args[0], &alpha);
        auto __arg0 = alpha;

        bool __ret = instance->SetTransparent(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::TopLevelWindow::SetTransparent: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::CanSetTransparent
static napi_value callback_method_wxSharp_TopLevelWindow_CanSetTransparent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->CanSetTransparent();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::TopLevelWindow::CanSetTransparent: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::AddGrab
static napi_value callback_method_wxSharp_TopLevelWindow_AddGrab(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->AddGrab();
    printf("wxSharp::TopLevelWindow::AddGrab: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::RemoveGrab
static napi_value callback_method_wxSharp_TopLevelWindow_RemoveGrab(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->RemoveGrab();
    printf("wxSharp::TopLevelWindow::RemoveGrab: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::Refresh
static napi_value callback_method_wxSharp_TopLevelWindow_Refresh(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_OBJECT(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Refresh(bool eraseBackground, const ::wxSharp::Rect* rect) override
overload0:
    {
        bool eraseBackground;
        status = napi_get_value_bool(env, args[0], &eraseBackground);
        auto __arg0 = (bool)eraseBackground;

        wxSharp::Rect* rect_instance;
        status = napi_unwrap(env, _this, (void**) &rect_instance);
        auto __arg1 = rect_instance;

        instance->Refresh(__arg0, __arg1);
    }
    printf("wxSharp::TopLevelWindow::Refresh: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::SetIconizeState
static napi_value callback_method_wxSharp_TopLevelWindow_SetIconizeState(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetIconizeState(bool iconic)
overload0:
    {
        bool iconic;
        status = napi_get_value_bool(env, args[0], &iconic);
        auto __arg0 = (bool)iconic;

        instance->SetIconizeState(__arg0);
    }
    printf("wxSharp::TopLevelWindow::SetIconizeState: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::EnableFullScreenView
static napi_value callback_method_wxSharp_TopLevelWindow_EnableFullScreenView(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool EnableFullScreenView(bool _0)
overload0:
    {
        bool _0;
        status = napi_get_value_bool(env, args[0], &_0);
        auto __arg0 = (bool)_0;

        bool __ret = instance->EnableFullScreenView(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::TopLevelWindow::EnableFullScreenView: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::EnableMaximizeButton
static napi_value callback_method_wxSharp_TopLevelWindow_EnableMaximizeButton(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool EnableMaximizeButton(bool _0)
overload0:
    {
        bool _0;
        status = napi_get_value_bool(env, args[0], &_0);
        auto __arg0 = (bool)_0;

        bool __ret = instance->EnableMaximizeButton(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::TopLevelWindow::EnableMaximizeButton: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::EnableMinimizeButton
static napi_value callback_method_wxSharp_TopLevelWindow_EnableMinimizeButton(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool EnableMinimizeButton(bool _0)
overload0:
    {
        bool _0;
        status = napi_get_value_bool(env, args[0], &_0);
        auto __arg0 = (bool)_0;

        bool __ret = instance->EnableMinimizeButton(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::TopLevelWindow::EnableMinimizeButton: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::ShouldPreventAppExit
static napi_value callback_method_wxSharp_TopLevelWindow_ShouldPreventAppExit(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->ShouldPreventAppExit();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::TopLevelWindow::ShouldPreventAppExit: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::CentreOnScreen
static napi_value callback_method_wxSharp_TopLevelWindow_CentreOnScreen(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void CentreOnScreen(int dir)
overload0:
    {
        int32_t dir;
        status = napi_get_value_int32(env, args[0], &dir);
        auto __arg0 = dir;

        instance->CentreOnScreen(__arg0);
    }
    printf("wxSharp::TopLevelWindow::CentreOnScreen: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::CenterOnScreen
static napi_value callback_method_wxSharp_TopLevelWindow_CenterOnScreen(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void CenterOnScreen(int dir)
overload0:
    {
        int32_t dir;
        status = napi_get_value_int32(env, args[0], &dir);
        auto __arg0 = dir;

        instance->CenterOnScreen(__arg0);
    }
    printf("wxSharp::TopLevelWindow::CenterOnScreen: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::SetDefaultItem
static napi_value callback_method_wxSharp_TopLevelWindow_SetDefaultItem(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Window* SetDefaultItem(::wxSharp::Window* win)
overload0:
    {
        wxSharp::Window* win_instance;
        status = napi_unwrap(env, _this, (void**) &win_instance);
        auto __arg0 = win_instance;

        ::wxSharp::Window* __ret = instance->SetDefaultItem(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::TopLevelWindow::SetDefaultItem: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::SetTmpDefaultItem
static napi_value callback_method_wxSharp_TopLevelWindow_SetTmpDefaultItem(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Window* SetTmpDefaultItem(::wxSharp::Window* win)
overload0:
    {
        wxSharp::Window* win_instance;
        status = napi_unwrap(env, _this, (void**) &win_instance);
        auto __arg0 = win_instance;

        ::wxSharp::Window* __ret = instance->SetTmpDefaultItem(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::TopLevelWindow::SetTmpDefaultItem: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::Destroy
static napi_value callback_method_wxSharp_TopLevelWindow_Destroy(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->Destroy();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::TopLevelWindow::Destroy: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::IsTopLevel
static napi_value callback_method_wxSharp_TopLevelWindow_IsTopLevel(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->IsTopLevel();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::TopLevelWindow::IsTopLevel: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::IsTopNavigationDomain
static napi_value callback_method_wxSharp_TopLevelWindow_IsTopNavigationDomain(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool IsTopNavigationDomain(::wxSharp::Window::NavigationKind kind) const override
overload0:
    {
        int32_t kind;
        status = napi_get_value_int32(env, args[0], &kind);
        auto __arg0 = (::wxSharp::Window::NavigationKind)kind;

        bool __ret = instance->IsTopNavigationDomain(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::TopLevelWindow::IsTopNavigationDomain: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::Layout
static napi_value callback_method_wxSharp_TopLevelWindow_Layout(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->Layout();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::TopLevelWindow::Layout: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::OnActivate
static napi_value callback_method_wxSharp_TopLevelWindow_OnActivate(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void OnActivate(::wxSharp::ActivateEvent& _0)
overload0:
    {
        wxSharp::ActivateEvent* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto &__arg0 = *_0_instance;

        instance->OnActivate(__arg0);
    }
    printf("wxSharp::TopLevelWindow::OnActivate: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::DoUpdateWindowUI
static napi_value callback_method_wxSharp_TopLevelWindow_DoUpdateWindowUI(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DoUpdateWindowUI(::wxSharp::UpdateUIEvent& event) override
overload0:
    {
        wxSharp::UpdateUIEvent* event_instance;
        status = napi_unwrap(env, _this, (void**) &event_instance);
        auto &__arg0 = *event_instance;

        instance->DoUpdateWindowUI(__arg0);
    }
    printf("wxSharp::TopLevelWindow::DoUpdateWindowUI: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::SetMinSize
static napi_value callback_method_wxSharp_TopLevelWindow_SetMinSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetMinSize(const ::wxSharp::Size& minSize) override
overload0:
    {
        wxSharp::Size* minSize_instance;
        status = napi_unwrap(env, _this, (void**) &minSize_instance);
        auto &__arg0 = *minSize_instance;

        instance->SetMinSize(__arg0);
    }
    printf("wxSharp::TopLevelWindow::SetMinSize: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::SetMaxSize
static napi_value callback_method_wxSharp_TopLevelWindow_SetMaxSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetMaxSize(const ::wxSharp::Size& maxSize) override
overload0:
    {
        wxSharp::Size* maxSize_instance;
        status = napi_unwrap(env, _this, (void**) &maxSize_instance);
        auto &__arg0 = *maxSize_instance;

        instance->SetMaxSize(__arg0);
    }
    printf("wxSharp::TopLevelWindow::SetMaxSize: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::SetRepresentedFilename
static napi_value callback_method_wxSharp_TopLevelWindow_SetRepresentedFilename(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetRepresentedFilename(const char* _0)
overload0:
    {
        size_t __0_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &__0_size);

        char* _0 = (char*) malloc(__0_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &__0_size);
        assert(status == napi_ok);
        auto __arg0 = _0;

        instance->SetRepresentedFilename(__arg0);
    }
    printf("wxSharp::TopLevelWindow::SetRepresentedFilename: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::set_m_fsIsShowing
static napi_value callback_method_wxSharp_TopLevelWindow_set_m_fsIsShowing(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_fsIsShowing(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_fsIsShowing(__arg0);
    }
    printf("wxSharp::TopLevelWindow::set_m_fsIsShowing: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::set_m_fsSaveGdkFunc
static napi_value callback_method_wxSharp_TopLevelWindow_set_m_fsSaveGdkFunc(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_fsSaveGdkFunc(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_fsSaveGdkFunc(__arg0);
    }
    printf("wxSharp::TopLevelWindow::set_m_fsSaveGdkFunc: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::set_m_fsSaveGdkDecor
static napi_value callback_method_wxSharp_TopLevelWindow_set_m_fsSaveGdkDecor(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_fsSaveGdkDecor(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_fsSaveGdkDecor(__arg0);
    }
    printf("wxSharp::TopLevelWindow::set_m_fsSaveGdkDecor: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::set_m_fsSaveFrame
static napi_value callback_method_wxSharp_TopLevelWindow_set_m_fsSaveFrame(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_fsSaveFrame(::wxSharp::Rect value)
overload0:
    {
        wxSharp::Rect* value_instance;
        status = napi_unwrap(env, _this, (void**) &value_instance);
        auto __arg0 = *value_instance;

        instance->set_m_fsSaveFrame(__arg0);
    }
    printf("wxSharp::TopLevelWindow::set_m_fsSaveFrame: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::set_m_gdkFunc
static napi_value callback_method_wxSharp_TopLevelWindow_set_m_gdkFunc(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_gdkFunc(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_gdkFunc(__arg0);
    }
    printf("wxSharp::TopLevelWindow::set_m_gdkFunc: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::set_m_gdkDecor
static napi_value callback_method_wxSharp_TopLevelWindow_set_m_gdkDecor(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_gdkDecor(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_gdkDecor(__arg0);
    }
    printf("wxSharp::TopLevelWindow::set_m_gdkDecor: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::set_m_urgency_hint
static napi_value callback_method_wxSharp_TopLevelWindow_set_m_urgency_hint(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_urgency_hint(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_urgency_hint(__arg0);
    }
    printf("wxSharp::TopLevelWindow::set_m_urgency_hint: %lu\n", argc);
    return _this;
}

// wxSharp::TopLevelWindow::set_m_netFrameExtentsTimerId
static napi_value callback_method_wxSharp_TopLevelWindow_set_m_netFrameExtentsTimerId(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::TopLevelWindow* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_UINT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_netFrameExtentsTimerId(unsigned int value)
overload0:
    {
        uint32_t value;
        status = napi_get_value_uint32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_netFrameExtentsTimerId(__arg0);
    }
    printf("wxSharp::TopLevelWindow::set_m_netFrameExtentsTimerId: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_TopLevelWindow(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "Create", nullptr, callback_method_wxSharp_TopLevelWindow_Create, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Maximize", nullptr, callback_method_wxSharp_TopLevelWindow_Maximize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Iconize", nullptr, callback_method_wxSharp_TopLevelWindow_Iconize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Restore", nullptr, callback_method_wxSharp_TopLevelWindow_Restore, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EnableCloseButton", nullptr, callback_method_wxSharp_TopLevelWindow_EnableCloseButton, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ShowWithoutActivating", nullptr, callback_method_wxSharp_TopLevelWindow_ShowWithoutActivating, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ShowFullScreen", nullptr, callback_method_wxSharp_TopLevelWindow_ShowFullScreen, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "RequestUserAttention", nullptr, callback_method_wxSharp_TopLevelWindow_RequestUserAttention, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetWindowStyleFlag", nullptr, callback_method_wxSharp_TopLevelWindow_SetWindowStyleFlag, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Show", nullptr, callback_method_wxSharp_TopLevelWindow_Show, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Raise", nullptr, callback_method_wxSharp_TopLevelWindow_Raise, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetLabel", nullptr, callback_method_wxSharp_TopLevelWindow_SetLabel, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "GetDefaultAttributes", nullptr, callback_method_wxSharp_TopLevelWindow_GetDefaultAttributes, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetTransparent", nullptr, callback_method_wxSharp_TopLevelWindow_SetTransparent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CanSetTransparent", nullptr, callback_method_wxSharp_TopLevelWindow_CanSetTransparent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AddGrab", nullptr, callback_method_wxSharp_TopLevelWindow_AddGrab, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "RemoveGrab", nullptr, callback_method_wxSharp_TopLevelWindow_RemoveGrab, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Refresh", nullptr, callback_method_wxSharp_TopLevelWindow_Refresh, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetIconizeState", nullptr, callback_method_wxSharp_TopLevelWindow_SetIconizeState, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EnableFullScreenView", nullptr, callback_method_wxSharp_TopLevelWindow_EnableFullScreenView, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EnableMaximizeButton", nullptr, callback_method_wxSharp_TopLevelWindow_EnableMaximizeButton, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EnableMinimizeButton", nullptr, callback_method_wxSharp_TopLevelWindow_EnableMinimizeButton, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ShouldPreventAppExit", nullptr, callback_method_wxSharp_TopLevelWindow_ShouldPreventAppExit, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CentreOnScreen", nullptr, callback_method_wxSharp_TopLevelWindow_CentreOnScreen, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CenterOnScreen", nullptr, callback_method_wxSharp_TopLevelWindow_CenterOnScreen, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetDefaultItem", nullptr, callback_method_wxSharp_TopLevelWindow_SetDefaultItem, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetTmpDefaultItem", nullptr, callback_method_wxSharp_TopLevelWindow_SetTmpDefaultItem, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Destroy", nullptr, callback_method_wxSharp_TopLevelWindow_Destroy, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsTopLevel", nullptr, callback_method_wxSharp_TopLevelWindow_IsTopLevel, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsTopNavigationDomain", nullptr, callback_method_wxSharp_TopLevelWindow_IsTopNavigationDomain, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Layout", nullptr, callback_method_wxSharp_TopLevelWindow_Layout, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnActivate", nullptr, callback_method_wxSharp_TopLevelWindow_OnActivate, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DoUpdateWindowUI", nullptr, callback_method_wxSharp_TopLevelWindow_DoUpdateWindowUI, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetMinSize", nullptr, callback_method_wxSharp_TopLevelWindow_SetMinSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetMaxSize", nullptr, callback_method_wxSharp_TopLevelWindow_SetMaxSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetRepresentedFilename", nullptr, callback_method_wxSharp_TopLevelWindow_SetRepresentedFilename, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_fsIsShowing", nullptr, callback_method_wxSharp_TopLevelWindow_set_m_fsIsShowing, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_fsSaveGdkFunc", nullptr, callback_method_wxSharp_TopLevelWindow_set_m_fsSaveGdkFunc, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_fsSaveGdkDecor", nullptr, callback_method_wxSharp_TopLevelWindow_set_m_fsSaveGdkDecor, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_fsSaveFrame", nullptr, callback_method_wxSharp_TopLevelWindow_set_m_fsSaveFrame, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_gdkFunc", nullptr, callback_method_wxSharp_TopLevelWindow_set_m_gdkFunc, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_gdkDecor", nullptr, callback_method_wxSharp_TopLevelWindow_set_m_gdkDecor, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_urgency_hint", nullptr, callback_method_wxSharp_TopLevelWindow_set_m_urgency_hint, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_netFrameExtentsTimerId", nullptr, callback_method_wxSharp_TopLevelWindow_set_m_netFrameExtentsTimerId, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "TopLevelWindow", NAPI_AUTO_LENGTH, callback_method_wxSharp_TopLevelWindow_TopLevelWindow, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_TopLevelWindow_TopLevelWindow);
    assert(status == napi_ok);

    return constructor;
}

void register_wxsharp_toplevel(napi_env env, napi_value exports)
{
    napi_value value;

    value = register_enum_wxSharp_FrameStyle(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "FrameStyle", value));

    value = register_enum_wxSharp_FullscreenMode(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "FullscreenMode", value));

    value = register_enum_wxSharp_UserAttention(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "UserAttention", value));

    value = register_class_wxSharp_TopLevelWindow(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "TopLevelWindow", value));
}
