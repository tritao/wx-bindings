// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <wxsharp/window.h>
#include <node/node_api.h>
#include <assert.h>
#include <stdio.h>
#include "NAPIHelpers.h"

extern napi_ref ctor_wxSharp_Color_Color;
extern napi_ref ctor_wxSharp_Event_Event;
extern napi_ref ctor_wxSharp_GraphicsContext_GraphicsContext;
extern napi_ref ctor_wxSharp_GraphicsPath_GraphicsPath;
extern napi_ref ctor_wxSharp_GraphicsMatrix_GraphicsMatrix;
extern napi_ref ctor_wxSharp_GraphicsPen_GraphicsPen;
extern napi_ref ctor_wxSharp_GraphicsBrush_GraphicsBrush;
extern napi_ref ctor_wxSharp_GraphicsFont_GraphicsFont;
extern napi_ref ctor_wxSharp_GraphicsBitmap_GraphicsBitmap;
extern napi_ref ctor_wxSharp_Size_Size;
extern napi_ref ctor_wxSharp_Rect_Rect;
extern napi_ref ctor_wxSharp_Point_Point;
extern napi_ref ctor_wxSharp_SizerItem_SizerItem;
extern napi_ref ctor_wxSharp_EvtHandler_EvtHandler;

static napi_value register_enum_wxSharp_WindowVariant(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NORMAL
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // SMALL
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    // MINI
    napi_value i_2;
    status = napi_create_uint32(env, 2, &i_2);
    assert(status == napi_ok);

    // LARGE
    napi_value i_3;
    status = napi_create_uint32(env, 3, &i_3);
    assert(status == napi_ok);

    // MAX
    napi_value i_4;
    status = napi_create_uint32(env, 4, &i_4);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NORMAL", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "SMALL", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "MINI", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "LARGE", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "MAX", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_ShowEffect(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NONE
    napi_value i_0;
    status = napi_create_uint32(env, 0, &i_0);
    assert(status == napi_ok);

    // ROLL_TO_LEFT
    napi_value i_1;
    status = napi_create_uint32(env, 1, &i_1);
    assert(status == napi_ok);

    // ROLL_TO_RIGHT
    napi_value i_2;
    status = napi_create_uint32(env, 2, &i_2);
    assert(status == napi_ok);

    // ROLL_TO_TOP
    napi_value i_3;
    status = napi_create_uint32(env, 3, &i_3);
    assert(status == napi_ok);

    // ROLL_TO_BOTTOM
    napi_value i_4;
    status = napi_create_uint32(env, 4, &i_4);
    assert(status == napi_ok);

    // SLIDE_TO_LEFT
    napi_value i_5;
    status = napi_create_uint32(env, 5, &i_5);
    assert(status == napi_ok);

    // SLIDE_TO_RIGHT
    napi_value i_6;
    status = napi_create_uint32(env, 6, &i_6);
    assert(status == napi_ok);

    // SLIDE_TO_TOP
    napi_value i_7;
    status = napi_create_uint32(env, 7, &i_7);
    assert(status == napi_ok);

    // SLIDE_TO_BOTTOM
    napi_value i_8;
    status = napi_create_uint32(env, 8, &i_8);
    assert(status == napi_ok);

    // BLEND
    napi_value i_9;
    status = napi_create_uint32(env, 9, &i_9);
    assert(status == napi_ok);

    // EXPAND
    napi_value i_10;
    status = napi_create_uint32(env, 10, &i_10);
    assert(status == napi_ok);

    // MAX
    napi_value i_11;
    status = napi_create_uint32(env, 11, &i_11);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "ROLL_TO_LEFT", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "ROLL_TO_RIGHT", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "ROLL_TO_TOP", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "ROLL_TO_BOTTOM", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "SLIDE_TO_LEFT", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "SLIDE_TO_RIGHT", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "SLIDE_TO_TOP", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr },
        { "SLIDE_TO_BOTTOM", nullptr, nullptr, nullptr, nullptr, i_8, attributes, nullptr },
        { "BLEND", nullptr, nullptr, nullptr, nullptr, i_9, attributes, nullptr },
        { "EXPAND", nullptr, nullptr, nullptr, nullptr, i_10, attributes, nullptr },
        { "MAX", nullptr, nullptr, nullptr, nullptr, i_11, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_SendEventFlags(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // POST
    napi_value i_0;
    status = napi_create_uint32(env, 1, &i_0);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "POST", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static napi_value register_enum_wxSharp_TouchMode(napi_env env, napi_value exports)
{
    napi_status status;
    napi_value result;
    NAPI_CALL(env, napi_create_object(env, &result));

    // NONE
    napi_value i_0;
    status = napi_create_uint32(env, 0x0, &i_0);
    assert(status == napi_ok);

    // VERTICAL_PAN_GESTURE
    napi_value i_1;
    status = napi_create_uint32(env, 0x1, &i_1);
    assert(status == napi_ok);

    // HORIZONTAL_PAN_GESTURE
    napi_value i_2;
    status = napi_create_uint32(env, 0x2, &i_2);
    assert(status == napi_ok);

    // PAN_GESTURES
    napi_value i_3;
    status = napi_create_uint32(env, 3, &i_3);
    assert(status == napi_ok);

    // ZOOM_GESTURE
    napi_value i_4;
    status = napi_create_uint32(env, 0x4, &i_4);
    assert(status == napi_ok);

    // ROTATE_GESTURE
    napi_value i_5;
    status = napi_create_uint32(env, 0x8, &i_5);
    assert(status == napi_ok);

    // PRESS_GESTURES
    napi_value i_6;
    status = napi_create_uint32(env, 0x10, &i_6);
    assert(status == napi_ok);

    // ALL_GESTURES
    napi_value i_7;
    status = napi_create_uint32(env, 0x1f, &i_7);
    assert(status == napi_ok);

    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "NONE", nullptr, nullptr, nullptr, nullptr, i_0, attributes, nullptr },
        { "VERTICAL_PAN_GESTURE", nullptr, nullptr, nullptr, nullptr, i_1, attributes, nullptr },
        { "HORIZONTAL_PAN_GESTURE", nullptr, nullptr, nullptr, nullptr, i_2, attributes, nullptr },
        { "PAN_GESTURES", nullptr, nullptr, nullptr, nullptr, i_3, attributes, nullptr },
        { "ZOOM_GESTURE", nullptr, nullptr, nullptr, nullptr, i_4, attributes, nullptr },
        { "ROTATE_GESTURE", nullptr, nullptr, nullptr, nullptr, i_5, attributes, nullptr },
        { "PRESS_GESTURES", nullptr, nullptr, nullptr, nullptr, i_6, attributes, nullptr },
        { "ALL_GESTURES", nullptr, nullptr, nullptr, nullptr, i_7, attributes, nullptr }
    };

    NAPI_CALL(env, napi_define_properties(env, result, sizeof(props) / sizeof(props[0]), props));

    return result;
}

static void dtor_wxSharp_VisualAttributes_VisualAttributes(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_VisualAttributes_VisualAttributes;

// wxSharp::VisualAttributes::VisualAttributes
static napi_value callback_method_wxSharp_VisualAttributes_VisualAttributes(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::VisualAttributes* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // VisualAttributes(const ::wxSharp::VisualAttributes& _0)
overload0:
    {
        wxSharp::VisualAttributes* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto &__arg0 = *_0_instance;

        instance = new wxSharp::VisualAttributes(__arg0);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_VisualAttributes_VisualAttributes, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::VisualAttributes::VisualAttributes: %lu\n", argc);
    return _this;
}

// wxSharp::VisualAttributes::set_colFg
static napi_value callback_method_wxSharp_VisualAttributes_set_colFg(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::VisualAttributes* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_colFg(::wxSharp::Color value)
overload0:
    {
        wxSharp::Color* value_instance;
        status = napi_unwrap(env, _this, (void**) &value_instance);
        auto __arg0 = *value_instance;

        instance->set_colFg(__arg0);
    }
    printf("wxSharp::VisualAttributes::set_colFg: %lu\n", argc);
    return _this;
}

// wxSharp::VisualAttributes::set_colBg
static napi_value callback_method_wxSharp_VisualAttributes_set_colBg(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::VisualAttributes* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_colBg(::wxSharp::Color value)
overload0:
    {
        wxSharp::Color* value_instance;
        status = napi_unwrap(env, _this, (void**) &value_instance);
        auto __arg0 = *value_instance;

        instance->set_colBg(__arg0);
    }
    printf("wxSharp::VisualAttributes::set_colBg: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_VisualAttributes(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "set_colFg", nullptr, callback_method_wxSharp_VisualAttributes_set_colFg, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_colBg", nullptr, callback_method_wxSharp_VisualAttributes_set_colBg, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "VisualAttributes", NAPI_AUTO_LENGTH, callback_method_wxSharp_VisualAttributes_VisualAttributes, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_VisualAttributes_VisualAttributes);
    assert(status == napi_ok);

    return constructor;
}

static void dtor_wxSharp_WindowListNode_WindowListNode(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_WindowListNode_WindowListNode;

// wxSharp::WindowListNode::WindowListNode
static napi_value callback_method_wxSharp_WindowListNode_WindowListNode(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::WindowListNode* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // WindowListNode
overload0:
    {
        wxSharp::WindowListNode* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto &__arg0 = *_0_instance;

        instance = new wxSharp::WindowListNode(__arg0);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_WindowListNode_WindowListNode, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::WindowListNode::WindowListNode: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_WindowListNode(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }

    };

    napi_value constructor;
    status = napi_define_class(env, "WindowListNode", NAPI_AUTO_LENGTH, callback_method_wxSharp_WindowListNode_WindowListNode, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_WindowListNode_WindowListNode);
    assert(status == napi_ok);

    return constructor;
}

enum class ScrollDir : unsigned int
{
    Horz = 0,
    Vert = 1,
    Max = 2
};

enum class NavigationKind : unsigned int
{
    Tab = 0,
    Accel = 1
};

static void dtor_wxSharp_Window_Window(napi_env env, void* finalize_data, void* finalize_hint)
{
}

static napi_ref ctor_wxSharp_Window_Window;

// wxSharp::Window::Window
static napi_value callback_method_wxSharp_Window_Window(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance = nullptr;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_OBJECT(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_OBJECT(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_INT32(types[4], args[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_INT32(types[5], args[5]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // Window()
overload0:
    {
        instance = new wxSharp::Window();
    }

    // Window(::wxSharp::Window* parent, int id, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name)
overload1:
    {
        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg0 = parent_instance;

        int32_t id;
        status = napi_get_value_int32(env, args[1], &id);
        auto __arg1 = id;

        wxSharp::Point* pos_instance;
        status = napi_unwrap(env, _this, (void**) &pos_instance);
        auto &__arg2 = *pos_instance;

        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg3 = *size_instance;

        int32_t style;
        status = napi_get_value_int32(env, args[4], &style);
        auto __arg4 = style;

        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[5], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[5], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg5 = name;

        instance = new wxSharp::Window(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
    }
    napi_ref result;
    status = napi_wrap(env, _this, instance, dtor_wxSharp_Window_Window, nullptr, &result);
    assert(status == napi_ok);

    printf("wxSharp::Window::Window: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Create
static napi_value callback_method_wxSharp_Window_Create(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 6 || argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_OBJECT(types[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_OBJECT(types[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_INT32(types[4], args[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (NAPI_IS_INT32(types[5], args[5]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Create(::wxSharp::Window* parent, int id, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name)
overload0:
    {
        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg0 = parent_instance;

        int32_t id;
        status = napi_get_value_int32(env, args[1], &id);
        auto __arg1 = id;

        wxSharp::Point* pos_instance;
        status = napi_unwrap(env, _this, (void**) &pos_instance);
        auto &__arg2 = *pos_instance;

        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg3 = *size_instance;

        int32_t style;
        status = napi_get_value_int32(env, args[4], &style);
        auto __arg4 = style;

        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[5], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[5], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg5 = name;

        bool __ret = instance->Create(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::Create: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Raise
static napi_value callback_method_wxSharp_Window_Raise(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Raise();
    printf("wxSharp::Window::Raise: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Lower
static napi_value callback_method_wxSharp_Window_Lower(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Lower();
    printf("wxSharp::Window::Lower: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Show
static napi_value callback_method_wxSharp_Window_Show(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Show(bool show)
overload0:
    {
        bool show;
        status = napi_get_value_bool(env, args[0], &show);
        auto __arg0 = (bool)show;

        bool __ret = instance->Show(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::Show: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetFocus
static napi_value callback_method_wxSharp_Window_SetFocus(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->SetFocus();
    printf("wxSharp::Window::SetFocus: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetCanFocus
static napi_value callback_method_wxSharp_Window_SetCanFocus(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetCanFocus(bool canFocus)
overload0:
    {
        bool canFocus;
        status = napi_get_value_bool(env, args[0], &canFocus);
        auto __arg0 = (bool)canFocus;

        instance->SetCanFocus(__arg0);
    }
    printf("wxSharp::Window::SetCanFocus: %lu\n", argc);
    return _this;
}

// wxSharp::Window::WarpPointer
static napi_value callback_method_wxSharp_Window_WarpPointer(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void WarpPointer(int x, int y)
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        instance->WarpPointer(__arg0, __arg1);
    }
    printf("wxSharp::Window::WarpPointer: %lu\n", argc);
    return _this;
}

// wxSharp::Window::EnableTouchEvents
static napi_value callback_method_wxSharp_Window_EnableTouchEvents(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool EnableTouchEvents(int eventsMask)
overload0:
    {
        int32_t eventsMask;
        status = napi_get_value_int32(env, args[0], &eventsMask);
        auto __arg0 = eventsMask;

        bool __ret = instance->EnableTouchEvents(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::EnableTouchEvents: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Refresh
static napi_value callback_method_wxSharp_Window_Refresh(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_OBJECT(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Refresh(bool eraseBackground, const ::wxSharp::Rect* rect)
overload0:
    {
        bool eraseBackground;
        status = napi_get_value_bool(env, args[0], &eraseBackground);
        auto __arg0 = (bool)eraseBackground;

        wxSharp::Rect* rect_instance;
        status = napi_unwrap(env, _this, (void**) &rect_instance);
        auto __arg1 = rect_instance;

        instance->Refresh(__arg0, __arg1);
    }
    printf("wxSharp::Window::Refresh: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Update
static napi_value callback_method_wxSharp_Window_Update(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Update();
    printf("wxSharp::Window::Update: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ClearBackground
static napi_value callback_method_wxSharp_Window_ClearBackground(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->ClearBackground();
    printf("wxSharp::Window::ClearBackground: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetBackgroundColour
static napi_value callback_method_wxSharp_Window_SetBackgroundColour(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SetBackgroundColour(const ::wxSharp::Color& colour)
overload0:
    {
        wxSharp::Color* colour_instance;
        status = napi_unwrap(env, _this, (void**) &colour_instance);
        auto &__arg0 = *colour_instance;

        bool __ret = instance->SetBackgroundColour(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::SetBackgroundColour: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetForegroundColour
static napi_value callback_method_wxSharp_Window_SetForegroundColour(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SetForegroundColour(const ::wxSharp::Color& colour)
overload0:
    {
        wxSharp::Color* colour_instance;
        status = napi_unwrap(env, _this, (void**) &colour_instance);
        auto &__arg0 = *colour_instance;

        bool __ret = instance->SetForegroundColour(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::SetForegroundColour: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetBackgroundStyle
static napi_value callback_method_wxSharp_Window_SetBackgroundStyle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SetBackgroundStyle(::wxSharp::BackgroundStyle style)
overload0:
    {
        int32_t style;
        status = napi_get_value_int32(env, args[0], &style);
        auto __arg0 = (::wxSharp::BackgroundStyle)style;

        bool __ret = instance->SetBackgroundStyle(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::SetBackgroundStyle: %lu\n", argc);
    return _this;
}

// wxSharp::Window::IsTransparentBackgroundSupported
static napi_value callback_method_wxSharp_Window_IsTransparentBackgroundSupported(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool IsTransparentBackgroundSupported(const char* reason) const
overload0:
    {
        size_t _reason_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_reason_size);

        char* reason = (char*) malloc(_reason_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_reason_size);
        assert(status == napi_ok);
        auto __arg0 = reason;

        bool __ret = instance->IsTransparentBackgroundSupported(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::IsTransparentBackgroundSupported: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetScrollbar
static napi_value callback_method_wxSharp_Window_SetScrollbar(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 5 || argc > 5)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_INT32(types[3], args[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_BOOL(types[4]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetScrollbar(int orient, int pos, int thumbVisible, int range, bool refresh)
overload0:
    {
        int32_t orient;
        status = napi_get_value_int32(env, args[0], &orient);
        auto __arg0 = orient;

        int32_t pos;
        status = napi_get_value_int32(env, args[1], &pos);
        auto __arg1 = pos;

        int32_t thumbVisible;
        status = napi_get_value_int32(env, args[2], &thumbVisible);
        auto __arg2 = thumbVisible;

        int32_t range;
        status = napi_get_value_int32(env, args[3], &range);
        auto __arg3 = range;

        bool refresh;
        status = napi_get_value_bool(env, args[4], &refresh);
        auto __arg4 = (bool)refresh;

        instance->SetScrollbar(__arg0, __arg1, __arg2, __arg3, __arg4);
    }
    printf("wxSharp::Window::SetScrollbar: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetScrollPos
static napi_value callback_method_wxSharp_Window_SetScrollPos(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_BOOL(types[2]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetScrollPos(int orient, int pos, bool refresh)
overload0:
    {
        int32_t orient;
        status = napi_get_value_int32(env, args[0], &orient);
        auto __arg0 = orient;

        int32_t pos;
        status = napi_get_value_int32(env, args[1], &pos);
        auto __arg1 = pos;

        bool refresh;
        status = napi_get_value_bool(env, args[2], &refresh);
        auto __arg2 = (bool)refresh;

        instance->SetScrollPos(__arg0, __arg1, __arg2);
    }
    printf("wxSharp::Window::SetScrollPos: %lu\n", argc);
    return _this;
}

// wxSharp::Window::GetScrollPos
static napi_value callback_method_wxSharp_Window_GetScrollPos(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // int GetScrollPos(int orient) const
overload0:
    {
        int32_t orient;
        status = napi_get_value_int32(env, args[0], &orient);
        auto __arg0 = orient;

        int __ret = instance->GetScrollPos(__arg0);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::GetScrollPos: %lu\n", argc);
    return _this;
}

// wxSharp::Window::GetScrollThumb
static napi_value callback_method_wxSharp_Window_GetScrollThumb(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // int GetScrollThumb(int orient) const
overload0:
    {
        int32_t orient;
        status = napi_get_value_int32(env, args[0], &orient);
        auto __arg0 = orient;

        int __ret = instance->GetScrollThumb(__arg0);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::GetScrollThumb: %lu\n", argc);
    return _this;
}

// wxSharp::Window::GetScrollRange
static napi_value callback_method_wxSharp_Window_GetScrollRange(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // int GetScrollRange(int orient) const
overload0:
    {
        int32_t orient;
        status = napi_get_value_int32(env, args[0], &orient);
        auto __arg0 = orient;

        int __ret = instance->GetScrollRange(__arg0);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::GetScrollRange: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ScrollWindow
static napi_value callback_method_wxSharp_Window_ScrollWindow(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_OBJECT(types[2]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void ScrollWindow(int dx, int dy, const ::wxSharp::Rect* rect)
overload0:
    {
        int32_t dx;
        status = napi_get_value_int32(env, args[0], &dx);
        auto __arg0 = dx;

        int32_t dy;
        status = napi_get_value_int32(env, args[1], &dy);
        auto __arg1 = dy;

        wxSharp::Rect* rect_instance;
        status = napi_unwrap(env, _this, (void**) &rect_instance);
        auto __arg2 = rect_instance;

        instance->ScrollWindow(__arg0, __arg1, __arg2);
    }
    printf("wxSharp::Window::ScrollWindow: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ScrollLines
static napi_value callback_method_wxSharp_Window_ScrollLines(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool ScrollLines(int lines)
overload0:
    {
        int32_t lines;
        status = napi_get_value_int32(env, args[0], &lines);
        auto __arg0 = lines;

        bool __ret = instance->ScrollLines(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::ScrollLines: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ScrollPages
static napi_value callback_method_wxSharp_Window_ScrollPages(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool ScrollPages(int pages)
overload0:
    {
        int32_t pages;
        status = napi_get_value_int32(env, args[0], &pages);
        auto __arg0 = pages;

        bool __ret = instance->ScrollPages(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::ScrollPages: %lu\n", argc);
    return _this;
}

// wxSharp::Window::AdjustForLayoutDirection
static napi_value callback_method_wxSharp_Window_AdjustForLayoutDirection(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // int AdjustForLayoutDirection(int x, int width, int widthTotal) const
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t width;
        status = napi_get_value_int32(env, args[1], &width);
        auto __arg1 = width;

        int32_t widthTotal;
        status = napi_get_value_int32(env, args[2], &widthTotal);
        auto __arg2 = widthTotal;

        int __ret = instance->AdjustForLayoutDirection(__arg0, __arg1, __arg2);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::AdjustForLayoutDirection: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DoIsExposed
static napi_value callback_method_wxSharp_Window_DoIsExposed(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[3], args[3]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool DoIsExposed(int x, int y) const
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        bool __ret = instance->DoIsExposed(__arg0, __arg1);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }

    // bool DoIsExposed(int x, int y, int w, int h) const
overload1:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        int32_t w;
        status = napi_get_value_int32(env, args[2], &w);
        auto __arg2 = w;

        int32_t h;
        status = napi_get_value_int32(env, args[3], &h);
        auto __arg3 = h;

        bool __ret = instance->DoIsExposed(__arg0, __arg1, __arg2, __arg3);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::DoIsExposed: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetDoubleBuffered
static napi_value callback_method_wxSharp_Window_SetDoubleBuffered(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetDoubleBuffered(bool on)
overload0:
    {
        bool on;
        status = napi_get_value_bool(env, args[0], &on);
        auto __arg0 = (bool)on;

        instance->SetDoubleBuffered(__arg0);
    }
    printf("wxSharp::Window::SetDoubleBuffered: %lu\n", argc);
    return _this;
}

// wxSharp::Window::OnInternalIdle
static napi_value callback_method_wxSharp_Window_OnInternalIdle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->OnInternalIdle();
    printf("wxSharp::Window::OnInternalIdle: %lu\n", argc);
    return _this;
}

// wxSharp::Window::PreCreation
static napi_value callback_method_wxSharp_Window_PreCreation(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_OBJECT(types[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_OBJECT(types[2]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool PreCreation(::wxSharp::Window* parent, const ::wxSharp::Point& pos, const ::wxSharp::Size& size)
overload0:
    {
        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg0 = parent_instance;

        wxSharp::Point* pos_instance;
        status = napi_unwrap(env, _this, (void**) &pos_instance);
        auto &__arg1 = *pos_instance;

        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg2 = *size_instance;

        bool __ret = instance->PreCreation(__arg0, __arg1, __arg2);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::PreCreation: %lu\n", argc);
    return _this;
}

// wxSharp::Window::PostCreation
static napi_value callback_method_wxSharp_Window_PostCreation(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->PostCreation();
    printf("wxSharp::Window::PostCreation: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DoAddChild
static napi_value callback_method_wxSharp_Window_DoAddChild(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DoAddChild(::wxSharp::Window* child)
overload0:
    {
        wxSharp::Window* child_instance;
        status = napi_unwrap(env, _this, (void**) &child_instance);
        auto __arg0 = child_instance;

        instance->DoAddChild(__arg0);
    }
    printf("wxSharp::Window::DoAddChild: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Close
static napi_value callback_method_wxSharp_Window_Close(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Close(bool force)
overload0:
    {
        bool force;
        status = napi_get_value_bool(env, args[0], &force);
        auto __arg0 = (bool)force;

        bool __ret = instance->Close(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::Close: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Destroy
static napi_value callback_method_wxSharp_Window_Destroy(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->Destroy();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::Destroy: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DestroyChildren
static napi_value callback_method_wxSharp_Window_DestroyChildren(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->DestroyChildren();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::DestroyChildren: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetSize
static napi_value callback_method_wxSharp_Window_SetSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 5)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck2;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload1;

    goto error;

typecheck3:
    if (NAPI_IS_INT32(types[3], args[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (NAPI_IS_INT32(types[4], args[4]))
        goto overload2;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetSize(int x, int y, int width, int height, int sizeFlags)
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        int32_t width;
        status = napi_get_value_int32(env, args[2], &width);
        auto __arg2 = width;

        int32_t height;
        status = napi_get_value_int32(env, args[3], &height);
        auto __arg3 = height;

        int32_t sizeFlags;
        status = napi_get_value_int32(env, args[4], &sizeFlags);
        auto __arg4 = sizeFlags;

        instance->SetSize(__arg0, __arg1, __arg2, __arg3, __arg4);
    }

    // void SetSize(int width, int height)
overload1:
    {
        int32_t width;
        status = napi_get_value_int32(env, args[0], &width);
        auto __arg0 = width;

        int32_t height;
        status = napi_get_value_int32(env, args[1], &height);
        auto __arg1 = height;

        instance->SetSize(__arg0, __arg1);
    }

    // void SetSize(const ::wxSharp::Rect& rect, int sizeFlags)
overload2:
    {
        wxSharp::Rect* rect_instance;
        status = napi_unwrap(env, _this, (void**) &rect_instance);
        auto &__arg0 = *rect_instance;

        int32_t sizeFlags;
        status = napi_get_value_int32(env, args[1], &sizeFlags);
        auto __arg1 = sizeFlags;

        instance->SetSize(__arg0, __arg1);
    }
    printf("wxSharp::Window::SetSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Move
static napi_value callback_method_wxSharp_Window_Move(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck2;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck3;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

typecheck3:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Move(int x, int y, int flags)
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        int32_t flags;
        status = napi_get_value_int32(env, args[2], &flags);
        auto __arg2 = flags;

        instance->Move(__arg0, __arg1, __arg2);
    }

    // void Move(const ::wxSharp::Point& pt, int flags)
overload1:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        int32_t flags;
        status = napi_get_value_int32(env, args[1], &flags);
        auto __arg1 = flags;

        instance->Move(__arg0, __arg1);
    }
    printf("wxSharp::Window::Move: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetClientSize
static napi_value callback_method_wxSharp_Window_SetClientSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetClientSize(int width, int height)
overload0:
    {
        int32_t width;
        status = napi_get_value_int32(env, args[0], &width);
        auto __arg0 = width;

        int32_t height;
        status = napi_get_value_int32(env, args[1], &height);
        auto __arg1 = height;

        instance->SetClientSize(__arg0, __arg1);
    }

    // void SetClientSize(const ::wxSharp::Rect& rect)
overload1:
    {
        wxSharp::Rect* rect_instance;
        status = napi_unwrap(env, _this, (void**) &rect_instance);
        auto &__arg0 = *rect_instance;

        instance->SetClientSize(__arg0);
    }
    printf("wxSharp::Window::SetClientSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ClientToWindowSize
static napi_value callback_method_wxSharp_Window_ClientToWindowSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Size ClientToWindowSize(const ::wxSharp::Size& size) const
overload0:
    {
        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg0 = *size_instance;

        ::wxSharp::Size __ret = instance->ClientToWindowSize(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Size_Size, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::ClientToWindowSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::WindowToClientSize
static napi_value callback_method_wxSharp_Window_WindowToClientSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Size WindowToClientSize(const ::wxSharp::Size& size) const
overload0:
    {
        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg0 = *size_instance;

        ::wxSharp::Size __ret = instance->WindowToClientSize(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Size_Size, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::WindowToClientSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::GetBestHeight
static napi_value callback_method_wxSharp_Window_GetBestHeight(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // int GetBestHeight(int width) const
overload0:
    {
        int32_t width;
        status = napi_get_value_int32(env, args[0], &width);
        auto __arg0 = width;

        int __ret = instance->GetBestHeight(__arg0);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::GetBestHeight: %lu\n", argc);
    return _this;
}

// wxSharp::Window::GetBestWidth
static napi_value callback_method_wxSharp_Window_GetBestWidth(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // int GetBestWidth(int height) const
overload0:
    {
        int32_t height;
        status = napi_get_value_int32(env, args[0], &height);
        auto __arg0 = height;

        int __ret = instance->GetBestWidth(__arg0);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::GetBestWidth: %lu\n", argc);
    return _this;
}

// wxSharp::Window::InvalidateBestSize
static napi_value callback_method_wxSharp_Window_InvalidateBestSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->InvalidateBestSize();
    printf("wxSharp::Window::InvalidateBestSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CacheBestSize
static napi_value callback_method_wxSharp_Window_CacheBestSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void CacheBestSize(const ::wxSharp::Size& size) const
overload0:
    {
        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg0 = *size_instance;

        instance->CacheBestSize(__arg0);
    }
    printf("wxSharp::Window::CacheBestSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetInitialSize
static napi_value callback_method_wxSharp_Window_SetInitialSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetInitialSize(const ::wxSharp::Size& size)
overload0:
    {
        wxSharp::Size* size_instance;
        status = napi_unwrap(env, _this, (void**) &size_instance);
        auto &__arg0 = *size_instance;

        instance->SetInitialSize(__arg0);
    }
    printf("wxSharp::Window::SetInitialSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Centre
static napi_value callback_method_wxSharp_Window_Centre(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Centre(int dir)
overload0:
    {
        int32_t dir;
        status = napi_get_value_int32(env, args[0], &dir);
        auto __arg0 = dir;

        instance->Centre(__arg0);
    }
    printf("wxSharp::Window::Centre: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Center
static napi_value callback_method_wxSharp_Window_Center(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void Center(int dir)
overload0:
    {
        int32_t dir;
        status = napi_get_value_int32(env, args[0], &dir);
        auto __arg0 = dir;

        instance->Center(__arg0);
    }
    printf("wxSharp::Window::Center: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CentreOnParent
static napi_value callback_method_wxSharp_Window_CentreOnParent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void CentreOnParent(int dir)
overload0:
    {
        int32_t dir;
        status = napi_get_value_int32(env, args[0], &dir);
        auto __arg0 = dir;

        instance->CentreOnParent(__arg0);
    }
    printf("wxSharp::Window::CentreOnParent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CenterOnParent
static napi_value callback_method_wxSharp_Window_CenterOnParent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void CenterOnParent(int dir)
overload0:
    {
        int32_t dir;
        status = napi_get_value_int32(env, args[0], &dir);
        auto __arg0 = dir;

        instance->CenterOnParent(__arg0);
    }
    printf("wxSharp::Window::CenterOnParent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Fit
static napi_value callback_method_wxSharp_Window_Fit(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Fit();
    printf("wxSharp::Window::Fit: %lu\n", argc);
    return _this;
}

// wxSharp::Window::FitInside
static napi_value callback_method_wxSharp_Window_FitInside(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->FitInside();
    printf("wxSharp::Window::FitInside: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetSizeHints
static napi_value callback_method_wxSharp_Window_SetSizeHints(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 6)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck2;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck3;

    goto error;

typecheck2:
    if (NAPI_IS_OBJECT(types[1]))
        goto typecheck4;

    goto error;

typecheck3:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto typecheck5;

    goto error;

typecheck4:
    if (NAPI_IS_OBJECT(types[2]))
        goto overload0;

    goto error;

typecheck5:
    if (NAPI_IS_INT32(types[3], args[3]))
        goto typecheck6;

    goto error;

typecheck6:
    if (NAPI_IS_INT32(types[4], args[4]))
        goto typecheck7;

    goto error;

typecheck7:
    if (NAPI_IS_INT32(types[5], args[5]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH)
overload0:
    {
        int32_t minW;
        status = napi_get_value_int32(env, args[0], &minW);
        auto __arg0 = minW;

        int32_t minH;
        status = napi_get_value_int32(env, args[1], &minH);
        auto __arg1 = minH;

        int32_t maxW;
        status = napi_get_value_int32(env, args[2], &maxW);
        auto __arg2 = maxW;

        int32_t maxH;
        status = napi_get_value_int32(env, args[3], &maxH);
        auto __arg3 = maxH;

        int32_t incW;
        status = napi_get_value_int32(env, args[4], &incW);
        auto __arg4 = incW;

        int32_t incH;
        status = napi_get_value_int32(env, args[5], &incH);
        auto __arg5 = incH;

        instance->SetSizeHints(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);
    }

    // void SetSizeHints(const ::wxSharp::Size& minSize, const ::wxSharp::Size& maxSize, const ::wxSharp::Size& incSize)
overload1:
    {
        wxSharp::Size* minSize_instance;
        status = napi_unwrap(env, _this, (void**) &minSize_instance);
        auto &__arg0 = *minSize_instance;

        wxSharp::Size* maxSize_instance;
        status = napi_unwrap(env, _this, (void**) &maxSize_instance);
        auto &__arg1 = *maxSize_instance;

        wxSharp::Size* incSize_instance;
        status = napi_unwrap(env, _this, (void**) &incSize_instance);
        auto &__arg2 = *incSize_instance;

        instance->SetSizeHints(__arg0, __arg1, __arg2);
    }
    printf("wxSharp::Window::SetSizeHints: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetVirtualSize
static napi_value callback_method_wxSharp_Window_SetVirtualSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetVirtualSize(int x, int y)
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        instance->SetVirtualSize(__arg0, __arg1);
    }
    printf("wxSharp::Window::SetVirtualSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DoSetVirtualSize
static napi_value callback_method_wxSharp_Window_DoSetVirtualSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DoSetVirtualSize(int x, int y)
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        instance->DoSetVirtualSize(__arg0, __arg1);
    }
    printf("wxSharp::Window::DoSetVirtualSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DoGetVirtualSize
static napi_value callback_method_wxSharp_Window_DoGetVirtualSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    ::wxSharp::Size __ret = instance->DoGetVirtualSize();

    napi_value ____ret_ctor;
    status = napi_get_reference_value(env, ctor_wxSharp_Size_Size, &____ret_ctor);
    assert(status == napi_ok);

    napi_value ____ret_instance;
    status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
    assert(status == napi_ok);


    return ____ret_instance;
    printf("wxSharp::Window::DoGetVirtualSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::InformFirstDirection
static napi_value callback_method_wxSharp_Window_InformFirstDirection(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool InformFirstDirection(int direction, int size, int availableOtherDir)
overload0:
    {
        int32_t direction;
        status = napi_get_value_int32(env, args[0], &direction);
        auto __arg0 = direction;

        int32_t size;
        status = napi_get_value_int32(env, args[1], &size);
        auto __arg1 = size;

        int32_t availableOtherDir;
        status = napi_get_value_int32(env, args[2], &availableOtherDir);
        auto __arg2 = availableOtherDir;

        bool __ret = instance->InformFirstDirection(__arg0, __arg1, __arg2);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::InformFirstDirection: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SendSizeEvent
static napi_value callback_method_wxSharp_Window_SendSizeEvent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SendSizeEvent(int flags)
overload0:
    {
        int32_t flags;
        status = napi_get_value_int32(env, args[0], &flags);
        auto __arg0 = flags;

        instance->SendSizeEvent(__arg0);
    }
    printf("wxSharp::Window::SendSizeEvent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SendSizeEventToParent
static napi_value callback_method_wxSharp_Window_SendSizeEventToParent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SendSizeEventToParent(int flags)
overload0:
    {
        int32_t flags;
        status = napi_get_value_int32(env, args[0], &flags);
        auto __arg0 = flags;

        instance->SendSizeEventToParent(__arg0);
    }
    printf("wxSharp::Window::SendSizeEventToParent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::PostSizeEvent
static napi_value callback_method_wxSharp_Window_PostSizeEvent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->PostSizeEvent();
    printf("wxSharp::Window::PostSizeEvent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::PostSizeEventToParent
static napi_value callback_method_wxSharp_Window_PostSizeEventToParent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->PostSizeEventToParent();
    printf("wxSharp::Window::PostSizeEventToParent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::BeginRepositioningChildren
static napi_value callback_method_wxSharp_Window_BeginRepositioningChildren(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->BeginRepositioningChildren();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::BeginRepositioningChildren: %lu\n", argc);
    return _this;
}

// wxSharp::Window::EndRepositioningChildren
static napi_value callback_method_wxSharp_Window_EndRepositioningChildren(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->EndRepositioningChildren();
    printf("wxSharp::Window::EndRepositioningChildren: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Hide
static napi_value callback_method_wxSharp_Window_Hide(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->Hide();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::Hide: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ShowWithEffect
static napi_value callback_method_wxSharp_Window_ShowWithEffect(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_UINT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool ShowWithEffect(::wxSharp::ShowEffect _0, unsigned int _1)
overload0:
    {
        int32_t _0;
        status = napi_get_value_int32(env, args[0], &_0);
        auto __arg0 = (::wxSharp::ShowEffect)_0;

        uint32_t _1;
        status = napi_get_value_uint32(env, args[1], &_1);
        auto __arg1 = _1;

        bool __ret = instance->ShowWithEffect(__arg0, __arg1);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::ShowWithEffect: %lu\n", argc);
    return _this;
}

// wxSharp::Window::HideWithEffect
static napi_value callback_method_wxSharp_Window_HideWithEffect(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_UINT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool HideWithEffect(::wxSharp::ShowEffect _0, unsigned int _1)
overload0:
    {
        int32_t _0;
        status = napi_get_value_int32(env, args[0], &_0);
        auto __arg0 = (::wxSharp::ShowEffect)_0;

        uint32_t _1;
        status = napi_get_value_uint32(env, args[1], &_1);
        auto __arg1 = _1;

        bool __ret = instance->HideWithEffect(__arg0, __arg1);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::HideWithEffect: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Enable
static napi_value callback_method_wxSharp_Window_Enable(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Enable(bool enable)
overload0:
    {
        bool enable;
        status = napi_get_value_bool(env, args[0], &enable);
        auto __arg0 = (bool)enable;

        bool __ret = instance->Enable(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::Enable: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Disable
static napi_value callback_method_wxSharp_Window_Disable(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->Disable();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::Disable: %lu\n", argc);
    return _this;
}

// wxSharp::Window::HasFlag
static napi_value callback_method_wxSharp_Window_HasFlag(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool HasFlag(int flag) const
overload0:
    {
        int32_t flag;
        status = napi_get_value_int32(env, args[0], &flag);
        auto __arg0 = flag;

        bool __ret = instance->HasFlag(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::HasFlag: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ToggleWindowStyle
static napi_value callback_method_wxSharp_Window_ToggleWindowStyle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool ToggleWindowStyle(int flag)
overload0:
    {
        int32_t flag;
        status = napi_get_value_int32(env, args[0], &flag);
        auto __arg0 = flag;

        bool __ret = instance->ToggleWindowStyle(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::ToggleWindowStyle: %lu\n", argc);
    return _this;
}

// wxSharp::Window::HasExtraStyle
static napi_value callback_method_wxSharp_Window_HasExtraStyle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool HasExtraStyle(int exFlag) const
overload0:
    {
        int32_t exFlag;
        status = napi_get_value_int32(env, args[0], &exFlag);
        auto __arg0 = exFlag;

        bool __ret = instance->HasExtraStyle(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::HasExtraStyle: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetFocusFromKbd
static napi_value callback_method_wxSharp_Window_SetFocusFromKbd(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->SetFocusFromKbd();
    printf("wxSharp::Window::SetFocusFromKbd: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DisableFocusFromKeyboard
static napi_value callback_method_wxSharp_Window_DisableFocusFromKeyboard(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->DisableFocusFromKeyboard();
    printf("wxSharp::Window::DisableFocusFromKeyboard: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CanBeFocused
static napi_value callback_method_wxSharp_Window_CanBeFocused(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->CanBeFocused();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::CanBeFocused: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CanAcceptFocus
static napi_value callback_method_wxSharp_Window_CanAcceptFocus(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->CanAcceptFocus();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::CanAcceptFocus: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CanAcceptFocusFromKeyboard
static napi_value callback_method_wxSharp_Window_CanAcceptFocusFromKeyboard(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->CanAcceptFocusFromKeyboard();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::CanAcceptFocusFromKeyboard: %lu\n", argc);
    return _this;
}

// wxSharp::Window::EnableVisibleFocus
static napi_value callback_method_wxSharp_Window_EnableVisibleFocus(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void EnableVisibleFocus(bool _0)
overload0:
    {
        bool _0;
        status = napi_get_value_bool(env, args[0], &_0);
        auto __arg0 = (bool)_0;

        instance->EnableVisibleFocus(__arg0);
    }
    printf("wxSharp::Window::EnableVisibleFocus: %lu\n", argc);
    return _this;
}

// wxSharp::Window::NavigateIn
static napi_value callback_method_wxSharp_Window_NavigateIn(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool NavigateIn(int flags)
overload0:
    {
        int32_t flags;
        status = napi_get_value_int32(env, args[0], &flags);
        auto __arg0 = flags;

        bool __ret = instance->NavigateIn(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::NavigateIn: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Navigate
static napi_value callback_method_wxSharp_Window_Navigate(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool Navigate(int flags)
overload0:
    {
        int32_t flags;
        status = napi_get_value_int32(env, args[0], &flags);
        auto __arg0 = flags;

        bool __ret = instance->Navigate(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::Navigate: %lu\n", argc);
    return _this;
}

// wxSharp::Window::HandleAsNavigationKey
static napi_value callback_method_wxSharp_Window_HandleAsNavigationKey(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool HandleAsNavigationKey(const ::wxSharp::KeyEvent& event)
overload0:
    {
        wxSharp::KeyEvent* event_instance;
        status = napi_unwrap(env, _this, (void**) &event_instance);
        auto &__arg0 = *event_instance;

        bool __ret = instance->HandleAsNavigationKey(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::HandleAsNavigationKey: %lu\n", argc);
    return _this;
}

// wxSharp::Window::MoveBeforeInTabOrder
static napi_value callback_method_wxSharp_Window_MoveBeforeInTabOrder(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void MoveBeforeInTabOrder(::wxSharp::Window* win)
overload0:
    {
        wxSharp::Window* win_instance;
        status = napi_unwrap(env, _this, (void**) &win_instance);
        auto __arg0 = win_instance;

        instance->MoveBeforeInTabOrder(__arg0);
    }
    printf("wxSharp::Window::MoveBeforeInTabOrder: %lu\n", argc);
    return _this;
}

// wxSharp::Window::MoveAfterInTabOrder
static napi_value callback_method_wxSharp_Window_MoveAfterInTabOrder(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void MoveAfterInTabOrder(::wxSharp::Window* win)
overload0:
    {
        wxSharp::Window* win_instance;
        status = napi_unwrap(env, _this, (void**) &win_instance);
        auto __arg0 = win_instance;

        instance->MoveAfterInTabOrder(__arg0);
    }
    printf("wxSharp::Window::MoveAfterInTabOrder: %lu\n", argc);
    return _this;
}

// wxSharp::Window::IsClientAreaChild
static napi_value callback_method_wxSharp_Window_IsClientAreaChild(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool IsClientAreaChild(const ::wxSharp::Window* _0) const
overload0:
    {
        wxSharp::Window* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto __arg0 = _0_instance;

        bool __ret = instance->IsClientAreaChild(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::IsClientAreaChild: %lu\n", argc);
    return _this;
}

// wxSharp::Window::FindWindow
static napi_value callback_method_wxSharp_Window_FindWindow(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Window* FindWindow(long winid) const
overload0:
    {
        int32_t winid;
        status = napi_get_value_int32(env, args[0], &winid);
        auto __arg0 = winid;

        ::wxSharp::Window* __ret = instance->FindWindow(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::Window* FindWindow(const char* name) const
overload1:
    {
        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg0 = name;

        ::wxSharp::Window* __ret = instance->FindWindow(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::FindWindow: %lu\n", argc);
    return _this;
}

// wxSharp::Window::PushEventHandler
static napi_value callback_method_wxSharp_Window_PushEventHandler(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void PushEventHandler(::wxSharp::EvtHandler* handler)
overload0:
    {
        wxSharp::EvtHandler* handler_instance;
        status = napi_unwrap(env, _this, (void**) &handler_instance);
        auto __arg0 = handler_instance;

        instance->PushEventHandler(__arg0);
    }
    printf("wxSharp::Window::PushEventHandler: %lu\n", argc);
    return _this;
}

// wxSharp::Window::PopEventHandler
static napi_value callback_method_wxSharp_Window_PopEventHandler(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::EvtHandler* PopEventHandler(bool deleteHandler)
overload0:
    {
        bool deleteHandler;
        status = napi_get_value_bool(env, args[0], &deleteHandler);
        auto __arg0 = (bool)deleteHandler;

        ::wxSharp::EvtHandler* __ret = instance->PopEventHandler(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_EvtHandler_EvtHandler, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::PopEventHandler: %lu\n", argc);
    return _this;
}

// wxSharp::Window::RemoveEventHandler
static napi_value callback_method_wxSharp_Window_RemoveEventHandler(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool RemoveEventHandler(::wxSharp::EvtHandler* handler)
overload0:
    {
        wxSharp::EvtHandler* handler_instance;
        status = napi_unwrap(env, _this, (void**) &handler_instance);
        auto __arg0 = handler_instance;

        bool __ret = instance->RemoveEventHandler(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::RemoveEventHandler: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ProcessWindowEvent
static napi_value callback_method_wxSharp_Window_ProcessWindowEvent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool ProcessWindowEvent(::wxSharp::Event& event)
overload0:
    {
        wxSharp::Event* event_instance;
        status = napi_unwrap(env, _this, (void**) &event_instance);
        auto &__arg0 = *event_instance;

        bool __ret = instance->ProcessWindowEvent(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::ProcessWindowEvent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ProcessWindowEventLocally
static napi_value callback_method_wxSharp_Window_ProcessWindowEventLocally(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool ProcessWindowEventLocally(::wxSharp::Event& event)
overload0:
    {
        wxSharp::Event* event_instance;
        status = napi_unwrap(env, _this, (void**) &event_instance);
        auto &__arg0 = *event_instance;

        bool __ret = instance->ProcessWindowEventLocally(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::ProcessWindowEventLocally: %lu\n", argc);
    return _this;
}

// wxSharp::Window::HandleWindowEvent
static napi_value callback_method_wxSharp_Window_HandleWindowEvent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool HandleWindowEvent(::wxSharp::Event& event) const
overload0:
    {
        wxSharp::Event* event_instance;
        status = napi_unwrap(env, _this, (void**) &event_instance);
        auto &__arg0 = *event_instance;

        bool __ret = instance->HandleWindowEvent(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::HandleWindowEvent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Validate
static napi_value callback_method_wxSharp_Window_Validate(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->Validate();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::Validate: %lu\n", argc);
    return _this;
}

// wxSharp::Window::InitDialog
static napi_value callback_method_wxSharp_Window_InitDialog(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->InitDialog();
    printf("wxSharp::Window::InitDialog: %lu\n", argc);
    return _this;
}

// wxSharp::Window::RegisterHotKey
static napi_value callback_method_wxSharp_Window_RegisterHotKey(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 3 || argc > 3)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool RegisterHotKey(int hotkeyId, int modifiers, int keycode)
overload0:
    {
        int32_t hotkeyId;
        status = napi_get_value_int32(env, args[0], &hotkeyId);
        auto __arg0 = hotkeyId;

        int32_t modifiers;
        status = napi_get_value_int32(env, args[1], &modifiers);
        auto __arg1 = modifiers;

        int32_t keycode;
        status = napi_get_value_int32(env, args[2], &keycode);
        auto __arg2 = keycode;

        bool __ret = instance->RegisterHotKey(__arg0, __arg1, __arg2);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::RegisterHotKey: %lu\n", argc);
    return _this;
}

// wxSharp::Window::UnregisterHotKey
static napi_value callback_method_wxSharp_Window_UnregisterHotKey(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool UnregisterHotKey(int hotkeyId)
overload0:
    {
        int32_t hotkeyId;
        status = napi_get_value_int32(env, args[0], &hotkeyId);
        auto __arg0 = hotkeyId;

        bool __ret = instance->UnregisterHotKey(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::UnregisterHotKey: %lu\n", argc);
    return _this;
}

// wxSharp::Window::FromDIP
static napi_value callback_method_wxSharp_Window_FromDIP(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload2;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Size FromDIP(const ::wxSharp::Size& sz) const
overload0:
    {
        wxSharp::Size* sz_instance;
        status = napi_unwrap(env, _this, (void**) &sz_instance);
        auto &__arg0 = *sz_instance;

        ::wxSharp::Size __ret = instance->FromDIP(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Size_Size, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::Point FromDIP(const ::wxSharp::Point& pt) const
overload1:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        ::wxSharp::Point __ret = instance->FromDIP(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Point_Point, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // int FromDIP(int d) const
overload2:
    {
        int32_t d;
        status = napi_get_value_int32(env, args[0], &d);
        auto __arg0 = d;

        int __ret = instance->FromDIP(__arg0);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::FromDIP: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ToDIP
static napi_value callback_method_wxSharp_Window_ToDIP(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload2;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Size ToDIP(const ::wxSharp::Size& sz) const
overload0:
    {
        wxSharp::Size* sz_instance;
        status = napi_unwrap(env, _this, (void**) &sz_instance);
        auto &__arg0 = *sz_instance;

        ::wxSharp::Size __ret = instance->ToDIP(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Size_Size, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::Point ToDIP(const ::wxSharp::Point& pt) const
overload1:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        ::wxSharp::Point __ret = instance->ToDIP(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Point_Point, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // int ToDIP(int d) const
overload2:
    {
        int32_t d;
        status = napi_get_value_int32(env, args[0], &d);
        auto __arg0 = d;

        int __ret = instance->ToDIP(__arg0);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::ToDIP: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ConvertPixelsToDialog
static napi_value callback_method_wxSharp_Window_ConvertPixelsToDialog(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Point ConvertPixelsToDialog(const ::wxSharp::Point& pt) const
overload0:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        ::wxSharp::Point __ret = instance->ConvertPixelsToDialog(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Point_Point, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::Size ConvertPixelsToDialog(const ::wxSharp::Size& sz) const
overload1:
    {
        wxSharp::Size* sz_instance;
        status = napi_unwrap(env, _this, (void**) &sz_instance);
        auto &__arg0 = *sz_instance;

        ::wxSharp::Size __ret = instance->ConvertPixelsToDialog(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Size_Size, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::ConvertPixelsToDialog: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ConvertDialogToPixels
static napi_value callback_method_wxSharp_Window_ConvertDialogToPixels(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Point ConvertDialogToPixels(const ::wxSharp::Point& pt) const
overload0:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        ::wxSharp::Point __ret = instance->ConvertDialogToPixels(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Point_Point, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    // ::wxSharp::Size ConvertDialogToPixels(const ::wxSharp::Size& sz) const
overload1:
    {
        wxSharp::Size* sz_instance;
        status = napi_unwrap(env, _this, (void**) &sz_instance);
        auto &__arg0 = *sz_instance;

        ::wxSharp::Size __ret = instance->ConvertDialogToPixels(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Size_Size, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::ConvertDialogToPixels: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CaptureMouse
static napi_value callback_method_wxSharp_Window_CaptureMouse(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->CaptureMouse();
    printf("wxSharp::Window::CaptureMouse: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ReleaseMouse
static napi_value callback_method_wxSharp_Window_ReleaseMouse(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->ReleaseMouse();
    printf("wxSharp::Window::ReleaseMouse: %lu\n", argc);
    return _this;
}

// wxSharp::Window::RefreshRect
static napi_value callback_method_wxSharp_Window_RefreshRect(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_BOOL(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void RefreshRect(const ::wxSharp::Rect& rect, bool eraseBackground)
overload0:
    {
        wxSharp::Rect* rect_instance;
        status = napi_unwrap(env, _this, (void**) &rect_instance);
        auto &__arg0 = *rect_instance;

        bool eraseBackground;
        status = napi_get_value_bool(env, args[1], &eraseBackground);
        auto __arg1 = (bool)eraseBackground;

        instance->RefreshRect(__arg0, __arg1);
    }
    printf("wxSharp::Window::RefreshRect: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Freeze
static napi_value callback_method_wxSharp_Window_Freeze(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Freeze();
    printf("wxSharp::Window::Freeze: %lu\n", argc);
    return _this;
}

// wxSharp::Window::Thaw
static napi_value callback_method_wxSharp_Window_Thaw(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->Thaw();
    printf("wxSharp::Window::Thaw: %lu\n", argc);
    return _this;
}

// wxSharp::Window::PrepareDC
static napi_value callback_method_wxSharp_Window_PrepareDC(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void PrepareDC(::wxSharp::DC& _0)
overload0:
    {
        wxSharp::DC* _0_instance;
        status = napi_unwrap(env, _this, (void**) &_0_instance);
        auto &__arg0 = *_0_instance;

        instance->PrepareDC(__arg0);
    }
    printf("wxSharp::Window::PrepareDC: %lu\n", argc);
    return _this;
}

// wxSharp::Window::IsExposed
static napi_value callback_method_wxSharp_Window_IsExposed(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[3], args[3]))
        goto overload3;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool IsExposed(int x, int y) const
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        bool __ret = instance->IsExposed(__arg0, __arg1);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }

    // bool IsExposed(int x, int y, int w, int h) const
overload1:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        int32_t w;
        status = napi_get_value_int32(env, args[2], &w);
        auto __arg2 = w;

        int32_t h;
        status = napi_get_value_int32(env, args[3], &h);
        auto __arg3 = h;

        bool __ret = instance->IsExposed(__arg0, __arg1, __arg2, __arg3);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }

    // bool IsExposed(const ::wxSharp::Point& pt) const
overload2:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        bool __ret = instance->IsExposed(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }

    // bool IsExposed(const ::wxSharp::Rect& rect) const
overload3:
    {
        wxSharp::Rect* rect_instance;
        status = napi_unwrap(env, _this, (void**) &rect_instance);
        auto &__arg0 = *rect_instance;

        bool __ret = instance->IsExposed(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::IsExposed: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetOwnBackgroundColour
static napi_value callback_method_wxSharp_Window_SetOwnBackgroundColour(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetOwnBackgroundColour(const ::wxSharp::Color& colour)
overload0:
    {
        wxSharp::Color* colour_instance;
        status = napi_unwrap(env, _this, (void**) &colour_instance);
        auto &__arg0 = *colour_instance;

        instance->SetOwnBackgroundColour(__arg0);
    }
    printf("wxSharp::Window::SetOwnBackgroundColour: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetOwnForegroundColour
static napi_value callback_method_wxSharp_Window_SetOwnForegroundColour(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetOwnForegroundColour(const ::wxSharp::Color& colour)
overload0:
    {
        wxSharp::Color* colour_instance;
        status = napi_unwrap(env, _this, (void**) &colour_instance);
        auto &__arg0 = *colour_instance;

        instance->SetOwnForegroundColour(__arg0);
    }
    printf("wxSharp::Window::SetOwnForegroundColour: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ClientToScreen
static napi_value callback_method_wxSharp_Window_ClientToScreen(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Point ClientToScreen(const ::wxSharp::Point& pt) const
overload0:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        ::wxSharp::Point __ret = instance->ClientToScreen(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Point_Point, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::ClientToScreen: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ScreenToClient
static napi_value callback_method_wxSharp_Window_ScreenToClient(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Point ScreenToClient(const ::wxSharp::Point& pt) const
overload0:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        ::wxSharp::Point __ret = instance->ScreenToClient(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Point_Point, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::ScreenToClient: %lu\n", argc);
    return _this;
}

// wxSharp::Window::HitTest
static napi_value callback_method_wxSharp_Window_HitTest(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload1;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::HitTest HitTest(int x, int y) const
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        ::wxSharp::HitTest __ret = instance->HitTest(__arg0, __arg1);

        napi_value __result;
        status = napi_create_int32(env, (int32_t) __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }

    // ::wxSharp::HitTest HitTest(const ::wxSharp::Point& pt) const
overload1:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        ::wxSharp::HitTest __ret = instance->HitTest(__arg0);

        napi_value __result;
        status = napi_create_int32(env, (int32_t) __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::HitTest: %lu\n", argc);
    return _this;
}

// wxSharp::Window::GetBorder
static napi_value callback_method_wxSharp_Window_GetBorder(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Border GetBorder(long flags) const
overload0:
    {
        int32_t flags;
        status = napi_get_value_int32(env, args[0], &flags);
        auto __arg0 = flags;

        ::wxSharp::Border __ret = instance->GetBorder(__arg0);

        napi_value __result;
        status = napi_create_int32(env, (int32_t) __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::GetBorder: %lu\n", argc);
    return _this;
}

// wxSharp::Window::UpdateWindowUI
static napi_value callback_method_wxSharp_Window_UpdateWindowUI(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void UpdateWindowUI(long flags)
overload0:
    {
        int32_t flags;
        status = napi_get_value_int32(env, args[0], &flags);
        auto __arg0 = flags;

        instance->UpdateWindowUI(__arg0);
    }
    printf("wxSharp::Window::UpdateWindowUI: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DoUpdateWindowUI
static napi_value callback_method_wxSharp_Window_DoUpdateWindowUI(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DoUpdateWindowUI(::wxSharp::UpdateUIEvent& event)
overload0:
    {
        wxSharp::UpdateUIEvent* event_instance;
        status = napi_unwrap(env, _this, (void**) &event_instance);
        auto &__arg0 = *event_instance;

        instance->DoUpdateWindowUI(__arg0);
    }
    printf("wxSharp::Window::DoUpdateWindowUI: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CanScroll
static napi_value callback_method_wxSharp_Window_CanScroll(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool CanScroll(int orient) const
overload0:
    {
        int32_t orient;
        status = napi_get_value_int32(env, args[0], &orient);
        auto __arg0 = orient;

        bool __ret = instance->CanScroll(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::CanScroll: %lu\n", argc);
    return _this;
}

// wxSharp::Window::HasScrollbar
static napi_value callback_method_wxSharp_Window_HasScrollbar(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool HasScrollbar(int orient) const
overload0:
    {
        int32_t orient;
        status = napi_get_value_int32(env, args[0], &orient);
        auto __arg0 = orient;

        bool __ret = instance->HasScrollbar(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::HasScrollbar: %lu\n", argc);
    return _this;
}

// wxSharp::Window::AlwaysShowScrollbars
static napi_value callback_method_wxSharp_Window_AlwaysShowScrollbars(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_BOOL(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void AlwaysShowScrollbars(bool _0, bool _1)
overload0:
    {
        bool _0;
        status = napi_get_value_bool(env, args[0], &_0);
        auto __arg0 = (bool)_0;

        bool _1;
        status = napi_get_value_bool(env, args[1], &_1);
        auto __arg1 = (bool)_1;

        instance->AlwaysShowScrollbars(__arg0, __arg1);
    }
    printf("wxSharp::Window::AlwaysShowScrollbars: %lu\n", argc);
    return _this;
}

// wxSharp::Window::IsScrollbarAlwaysShown
static napi_value callback_method_wxSharp_Window_IsScrollbarAlwaysShown(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool IsScrollbarAlwaysShown(int _0) const
overload0:
    {
        int32_t _0;
        status = napi_get_value_int32(env, args[0], &_0);
        auto __arg0 = _0;

        bool __ret = instance->IsScrollbarAlwaysShown(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::IsScrollbarAlwaysShown: %lu\n", argc);
    return _this;
}

// wxSharp::Window::GetHelpTextAtPoint
static napi_value callback_method_wxSharp_Window_GetHelpTextAtPoint(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // char* GetHelpTextAtPoint(const ::wxSharp::Point& pt, ::wxSharp::HelpEvent::Source origin) const
overload0:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        int32_t origin;
        status = napi_get_value_int32(env, args[1], &origin);
        auto __arg1 = (::wxSharp::HelpEvent::Source)origin;

        const char* __ret = instance->GetHelpTextAtPoint(__arg0, __arg1);

        napi_value __result;
        status = napi_create_string_latin1(env, __ret, NAPI_AUTO_LENGTH, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::GetHelpTextAtPoint: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetToolTip
static napi_value callback_method_wxSharp_Window_SetToolTip(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetToolTip(const char* tip)
overload0:
    {
        size_t _tip_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_tip_size);

        char* tip = (char*) malloc(_tip_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_tip_size);
        assert(status == napi_ok);
        auto __arg0 = tip;

        instance->SetToolTip(__arg0);
    }
    printf("wxSharp::Window::SetToolTip: %lu\n", argc);
    return _this;
}

// wxSharp::Window::UnsetToolTip
static napi_value callback_method_wxSharp_Window_UnsetToolTip(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->UnsetToolTip();
    printf("wxSharp::Window::UnsetToolTip: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DragAcceptFiles
static napi_value callback_method_wxSharp_Window_DragAcceptFiles(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void DragAcceptFiles(bool accept)
overload0:
    {
        bool accept;
        status = napi_get_value_bool(env, args[0], &accept);
        auto __arg0 = (bool)accept;

        instance->DragAcceptFiles(__arg0);
    }
    printf("wxSharp::Window::DragAcceptFiles: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DeleteRelatedConstraints
static napi_value callback_method_wxSharp_Window_DeleteRelatedConstraints(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->DeleteRelatedConstraints();
    printf("wxSharp::Window::DeleteRelatedConstraints: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ResetConstraints
static napi_value callback_method_wxSharp_Window_ResetConstraints(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->ResetConstraints();
    printf("wxSharp::Window::ResetConstraints: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetConstraintSizes
static napi_value callback_method_wxSharp_Window_SetConstraintSizes(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetConstraintSizes(bool recurse)
overload0:
    {
        bool recurse;
        status = napi_get_value_bool(env, args[0], &recurse);
        auto __arg0 = (bool)recurse;

        instance->SetConstraintSizes(__arg0);
    }
    printf("wxSharp::Window::SetConstraintSizes: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DoPhase
static napi_value callback_method_wxSharp_Window_DoPhase(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool DoPhase(int phase)
overload0:
    {
        int32_t phase;
        status = napi_get_value_int32(env, args[0], &phase);
        auto __arg0 = phase;

        bool __ret = instance->DoPhase(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::DoPhase: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetSizeConstraint
static napi_value callback_method_wxSharp_Window_SetSizeConstraint(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 4 || argc > 4)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (NAPI_IS_INT32(types[2], args[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (NAPI_IS_INT32(types[3], args[3]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetSizeConstraint(int x, int y, int w, int h)
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        int32_t w;
        status = napi_get_value_int32(env, args[2], &w);
        auto __arg2 = w;

        int32_t h;
        status = napi_get_value_int32(env, args[3], &h);
        auto __arg3 = h;

        instance->SetSizeConstraint(__arg0, __arg1, __arg2, __arg3);
    }
    printf("wxSharp::Window::SetSizeConstraint: %lu\n", argc);
    return _this;
}

// wxSharp::Window::MoveConstraint
static napi_value callback_method_wxSharp_Window_MoveConstraint(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void MoveConstraint(int x, int y)
overload0:
    {
        int32_t x;
        status = napi_get_value_int32(env, args[0], &x);
        auto __arg0 = x;

        int32_t y;
        status = napi_get_value_int32(env, args[1], &y);
        auto __arg1 = y;

        instance->MoveConstraint(__arg0, __arg1);
    }
    printf("wxSharp::Window::MoveConstraint: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetSizer
static napi_value callback_method_wxSharp_Window_SetSizer(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_BOOL(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetSizer(::wxSharp::Sizer* sizer, bool deleteOld)
overload0:
    {
        wxSharp::Sizer* sizer_instance;
        status = napi_unwrap(env, _this, (void**) &sizer_instance);
        auto __arg0 = sizer_instance;

        bool deleteOld;
        status = napi_get_value_bool(env, args[1], &deleteOld);
        auto __arg1 = (bool)deleteOld;

        instance->SetSizer(__arg0, __arg1);
    }
    printf("wxSharp::Window::SetSizer: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetSizerAndFit
static napi_value callback_method_wxSharp_Window_SetSizerAndFit(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_BOOL(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void SetSizerAndFit(::wxSharp::Sizer* sizer, bool deleteOld)
overload0:
    {
        wxSharp::Sizer* sizer_instance;
        status = napi_unwrap(env, _this, (void**) &sizer_instance);
        auto __arg0 = sizer_instance;

        bool deleteOld;
        status = napi_get_value_bool(env, args[1], &deleteOld);
        auto __arg1 = (bool)deleteOld;

        instance->SetSizerAndFit(__arg0, __arg1);
    }
    printf("wxSharp::Window::SetSizerAndFit: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SetTransparent
static napi_value callback_method_wxSharp_Window_SetTransparent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SetTransparent(unsigned char _0)
overload0:
    {
        uint32_t _0;
        status = napi_get_value_uint32(env, args[0], &_0);
        auto __arg0 = _0;

        bool __ret = instance->SetTransparent(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::SetTransparent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CanSetTransparent
static napi_value callback_method_wxSharp_Window_CanSetTransparent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->CanSetTransparent();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::CanSetTransparent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::OnInitDialog
static napi_value callback_method_wxSharp_Window_OnInitDialog(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void OnInitDialog(::wxSharp::InitDialogEvent& event)
overload0:
    {
        wxSharp::InitDialogEvent* event_instance;
        status = napi_unwrap(env, _this, (void**) &event_instance);
        auto &__arg0 = *event_instance;

        instance->OnInitDialog(__arg0);
    }
    printf("wxSharp::Window::OnInitDialog: %lu\n", argc);
    return _this;
}

// wxSharp::Window::OnMiddleClick
static napi_value callback_method_wxSharp_Window_OnMiddleClick(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void OnMiddleClick(::wxSharp::MouseEvent& event)
overload0:
    {
        wxSharp::MouseEvent* event_instance;
        status = napi_unwrap(env, _this, (void**) &event_instance);
        auto &__arg0 = *event_instance;

        instance->OnMiddleClick(__arg0);
    }
    printf("wxSharp::Window::OnMiddleClick: %lu\n", argc);
    return _this;
}

// wxSharp::Window::SendIdleEvents
static napi_value callback_method_wxSharp_Window_SendIdleEvents(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool SendIdleEvents(::wxSharp::IdleEvent& event)
overload0:
    {
        wxSharp::IdleEvent* event_instance;
        status = napi_unwrap(env, _this, (void**) &event_instance);
        auto &__arg0 = *event_instance;

        bool __ret = instance->SendIdleEvents(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::SendIdleEvents: %lu\n", argc);
    return _this;
}

// wxSharp::Window::WXSendContextMenuEvent
static napi_value callback_method_wxSharp_Window_WXSendContextMenuEvent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool WXSendContextMenuEvent(const ::wxSharp::Point& posInScreenCoords)
overload0:
    {
        wxSharp::Point* posInScreenCoords_instance;
        status = napi_unwrap(env, _this, (void**) &posInScreenCoords_instance);
        auto &__arg0 = *posInScreenCoords_instance;

        bool __ret = instance->WXSendContextMenuEvent(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::WXSendContextMenuEvent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DissociateHandle
static napi_value callback_method_wxSharp_Window_DissociateHandle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->DissociateHandle();
    printf("wxSharp::Window::DissociateHandle: %lu\n", argc);
    return _this;
}

// wxSharp::Window::InheritAttributes
static napi_value callback_method_wxSharp_Window_InheritAttributes(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    instance->InheritAttributes();
    printf("wxSharp::Window::InheritAttributes: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ShouldInheritColours
static napi_value callback_method_wxSharp_Window_ShouldInheritColours(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->ShouldInheritColours();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::ShouldInheritColours: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CanBeOutsideClientArea
static napi_value callback_method_wxSharp_Window_CanBeOutsideClientArea(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->CanBeOutsideClientArea();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::CanBeOutsideClientArea: %lu\n", argc);
    return _this;
}

// wxSharp::Window::CanApplyThemeBorder
static napi_value callback_method_wxSharp_Window_CanApplyThemeBorder(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    bool __ret = instance->CanApplyThemeBorder();

    napi_value __result;
    status = napi_get_boolean(env, __ret, &__result);
    assert(status == napi_ok);

    return __result;
    printf("wxSharp::Window::CanApplyThemeBorder: %lu\n", argc);
    return _this;
}

// wxSharp::Window::IsTopNavigationDomain
static napi_value callback_method_wxSharp_Window_IsTopNavigationDomain(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // bool IsTopNavigationDomain(::wxSharp::Window::NavigationKind _0) const
overload0:
    {
        int32_t _0;
        status = napi_get_value_int32(env, args[0], &_0);
        auto __arg0 = (::wxSharp::Window::NavigationKind)_0;

        bool __ret = instance->IsTopNavigationDomain(__arg0);

        napi_value __result;
        status = napi_get_boolean(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::IsTopNavigationDomain: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_x
static napi_value callback_method_wxSharp_Window_set_m_x(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_x(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_x(__arg0);
    }
    printf("wxSharp::Window::set_m_x: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_y
static napi_value callback_method_wxSharp_Window_set_m_y(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_y(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_y(__arg0);
    }
    printf("wxSharp::Window::set_m_y: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_width
static napi_value callback_method_wxSharp_Window_set_m_width(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_width(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_width(__arg0);
    }
    printf("wxSharp::Window::set_m_width: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_height
static napi_value callback_method_wxSharp_Window_set_m_height(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_height(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_height(__arg0);
    }
    printf("wxSharp::Window::set_m_height: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_clientWidth
static napi_value callback_method_wxSharp_Window_set_m_clientWidth(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_clientWidth(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_clientWidth(__arg0);
    }
    printf("wxSharp::Window::set_m_clientWidth: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_clientHeight
static napi_value callback_method_wxSharp_Window_set_m_clientHeight(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_clientHeight(int value)
overload0:
    {
        int32_t value;
        status = napi_get_value_int32(env, args[0], &value);
        auto __arg0 = value;

        instance->set_m_clientHeight(__arg0);
    }
    printf("wxSharp::Window::set_m_clientHeight: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_useCachedClientSize
static napi_value callback_method_wxSharp_Window_set_m_useCachedClientSize(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_useCachedClientSize(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_useCachedClientSize(__arg0);
    }
    printf("wxSharp::Window::set_m_useCachedClientSize: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_isGtkPositionValid
static napi_value callback_method_wxSharp_Window_set_m_isGtkPositionValid(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_isGtkPositionValid(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_isGtkPositionValid(__arg0);
    }
    printf("wxSharp::Window::set_m_isGtkPositionValid: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_gtkLabel
static napi_value callback_method_wxSharp_Window_set_m_gtkLabel(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_gtkLabel(const char* value)
overload0:
    {
        size_t _value_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_value_size);

        char* value = (char*) malloc(_value_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_value_size);
        assert(status == napi_ok);
        auto __arg0 = value;

        instance->set_m_gtkLabel(__arg0);
    }
    printf("wxSharp::Window::set_m_gtkLabel: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_noExpose
static napi_value callback_method_wxSharp_Window_set_m_noExpose(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_noExpose(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_noExpose(__arg0);
    }
    printf("wxSharp::Window::set_m_noExpose: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_nativeSizeEvent
static napi_value callback_method_wxSharp_Window_set_m_nativeSizeEvent(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_nativeSizeEvent(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_nativeSizeEvent(__arg0);
    }
    printf("wxSharp::Window::set_m_nativeSizeEvent: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_isScrolling
static napi_value callback_method_wxSharp_Window_set_m_isScrolling(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_isScrolling(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_isScrolling(__arg0);
    }
    printf("wxSharp::Window::set_m_isScrolling: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_clipPaintRegion
static napi_value callback_method_wxSharp_Window_set_m_clipPaintRegion(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_clipPaintRegion(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_clipPaintRegion(__arg0);
    }
    printf("wxSharp::Window::set_m_clipPaintRegion: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_dirtyTabOrder
static napi_value callback_method_wxSharp_Window_set_m_dirtyTabOrder(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_dirtyTabOrder(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_dirtyTabOrder(__arg0);
    }
    printf("wxSharp::Window::set_m_dirtyTabOrder: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_mouseButtonDown
static napi_value callback_method_wxSharp_Window_set_m_mouseButtonDown(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_mouseButtonDown(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_mouseButtonDown(__arg0);
    }
    printf("wxSharp::Window::set_m_mouseButtonDown: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_showOnIdle
static napi_value callback_method_wxSharp_Window_set_m_showOnIdle(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_showOnIdle(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_showOnIdle(__arg0);
    }
    printf("wxSharp::Window::set_m_showOnIdle: %lu\n", argc);
    return _this;
}

// wxSharp::Window::set_m_needCursorReset
static napi_value callback_method_wxSharp_Window_set_m_needCursorReset(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_BOOL(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void set_m_needCursorReset(bool value)
overload0:
    {
        bool value;
        status = napi_get_value_bool(env, args[0], &value);
        auto __arg0 = (bool)value;

        instance->set_m_needCursorReset(__arg0);
    }
    printf("wxSharp::Window::set_m_needCursorReset: %lu\n", argc);
    return _this;
}

// wxSharp::Window::ScrollDirFromOrient
static napi_value callback_method_wxSharp_Window_ScrollDirFromOrient(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Window::ScrollDir ScrollDirFromOrient(int orient)
overload0:
    {
        int32_t orient;
        status = napi_get_value_int32(env, args[0], &orient);
        auto __arg0 = orient;

        ::wxSharp::Window::ScrollDir __ret = ::wxSharp::Window::ScrollDirFromOrient(__arg0);

        napi_value __result;
        status = napi_create_int32(env, (int32_t) __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::ScrollDirFromOrient: %lu\n", argc);
    return _this;
}

// wxSharp::Window::OrientFromScrollDir
static napi_value callback_method_wxSharp_Window_OrientFromScrollDir(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // int OrientFromScrollDir(::wxSharp::Window::ScrollDir dir)
overload0:
    {
        int32_t dir;
        status = napi_get_value_int32(env, args[0], &dir);
        auto __arg0 = (::wxSharp::Window::ScrollDir)dir;

        int __ret = ::wxSharp::Window::OrientFromScrollDir(__arg0);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::OrientFromScrollDir: %lu\n", argc);
    return _this;
}

// wxSharp::Window::NewControlId
static napi_value callback_method_wxSharp_Window_NewControlId(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // int NewControlId(int count)
overload0:
    {
        int32_t count;
        status = napi_get_value_int32(env, args[0], &count);
        auto __arg0 = count;

        int __ret = ::wxSharp::Window::NewControlId(__arg0);

        napi_value __result;
        status = napi_create_int32(env, __ret, &__result);
        assert(status == napi_ok);

        return __result;
    }
    printf("wxSharp::Window::NewControlId: %lu\n", argc);
    return _this;
}

// wxSharp::Window::UnreserveControlId
static napi_value callback_method_wxSharp_Window_UnreserveControlId(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_INT32(types[1], args[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // void UnreserveControlId(int id, int count)
overload0:
    {
        int32_t id;
        status = napi_get_value_int32(env, args[0], &id);
        auto __arg0 = id;

        int32_t count;
        status = napi_get_value_int32(env, args[1], &count);
        auto __arg1 = count;

        ::wxSharp::Window::UnreserveControlId(__arg0, __arg1);
    }
    printf("wxSharp::Window::UnreserveControlId: %lu\n", argc);
    return _this;
}

// wxSharp::Window::DoFindFocus
static napi_value callback_method_wxSharp_Window_DoFindFocus(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    ::wxSharp::Window* __ret = ::wxSharp::Window::DoFindFocus();

    napi_value ____ret_ctor;
    status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
    assert(status == napi_ok);

    napi_value ____ret_instance;
    status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
    assert(status == napi_ok);


    return ____ret_instance;
    printf("wxSharp::Window::DoFindFocus: %lu\n", argc);
    return _this;
}

// wxSharp::Window::FindWindowById
static napi_value callback_method_wxSharp_Window_FindWindowById(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_OBJECT(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Window* FindWindowById(long winid, const ::wxSharp::Window* parent)
overload0:
    {
        int32_t winid;
        status = napi_get_value_int32(env, args[0], &winid);
        auto __arg0 = winid;

        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg1 = parent_instance;

        ::wxSharp::Window* __ret = ::wxSharp::Window::FindWindowById(__arg0, __arg1);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::FindWindowById: %lu\n", argc);
    return _this;
}

// wxSharp::Window::FindWindowByName
static napi_value callback_method_wxSharp_Window_FindWindowByName(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_OBJECT(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Window* FindWindowByName(const char* name, const ::wxSharp::Window* parent)
overload0:
    {
        size_t _name_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_name_size);

        char* name = (char*) malloc(_name_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_name_size);
        assert(status == napi_ok);
        auto __arg0 = name;

        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg1 = parent_instance;

        ::wxSharp::Window* __ret = ::wxSharp::Window::FindWindowByName(__arg0, __arg1);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::FindWindowByName: %lu\n", argc);
    return _this;
}

// wxSharp::Window::FindWindowByLabel
static napi_value callback_method_wxSharp_Window_FindWindowByLabel(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 2 || argc > 2)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (NAPI_IS_OBJECT(types[1]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Window* FindWindowByLabel(const char* label, const ::wxSharp::Window* parent)
overload0:
    {
        size_t _label_size;
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_label_size);

        char* label = (char*) malloc(_label_size);
        status = napi_get_value_string_utf8(env, args[0], nullptr, 0, &_label_size);
        assert(status == napi_ok);
        auto __arg0 = label;

        wxSharp::Window* parent_instance;
        status = napi_unwrap(env, _this, (void**) &parent_instance);
        auto __arg1 = parent_instance;

        ::wxSharp::Window* __ret = ::wxSharp::Window::FindWindowByLabel(__arg0, __arg1);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::FindWindowByLabel: %lu\n", argc);
    return _this;
}

// wxSharp::Window::GetClassDefaultAttributes
static napi_value callback_method_wxSharp_Window_GetClassDefaultAttributes(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    wxSharp::Window* instance;
    status = napi_unwrap(env, _this, (void**) &instance);

    if (NAPI_IS_INT32(types[0], args[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::VisualAttributes GetClassDefaultAttributes(::wxSharp::WindowVariant variant)
overload0:
    {
        int32_t variant;
        status = napi_get_value_int32(env, args[0], &variant);
        auto __arg0 = (::wxSharp::WindowVariant)variant;

        ::wxSharp::VisualAttributes __ret = ::wxSharp::Window::GetClassDefaultAttributes(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_VisualAttributes_VisualAttributes, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }
    printf("wxSharp::Window::GetClassDefaultAttributes: %lu\n", argc);
    return _this;
}

static napi_value register_class_wxSharp_Window(napi_env env)
{
    napi_status status;
    napi_property_attributes attributes = (napi_property_attributes) (napi_default | napi_enumerable);
    napi_property_descriptor props[] =
    {
        // { utf8name, name, method, getter, setter, value, attributes, data }
        { "Create", nullptr, callback_method_wxSharp_Window_Create, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Raise", nullptr, callback_method_wxSharp_Window_Raise, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Lower", nullptr, callback_method_wxSharp_Window_Lower, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Show", nullptr, callback_method_wxSharp_Window_Show, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetFocus", nullptr, callback_method_wxSharp_Window_SetFocus, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetCanFocus", nullptr, callback_method_wxSharp_Window_SetCanFocus, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "WarpPointer", nullptr, callback_method_wxSharp_Window_WarpPointer, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EnableTouchEvents", nullptr, callback_method_wxSharp_Window_EnableTouchEvents, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Refresh", nullptr, callback_method_wxSharp_Window_Refresh, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Update", nullptr, callback_method_wxSharp_Window_Update, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ClearBackground", nullptr, callback_method_wxSharp_Window_ClearBackground, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetBackgroundColour", nullptr, callback_method_wxSharp_Window_SetBackgroundColour, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetForegroundColour", nullptr, callback_method_wxSharp_Window_SetForegroundColour, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetBackgroundStyle", nullptr, callback_method_wxSharp_Window_SetBackgroundStyle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsTransparentBackgroundSupported", nullptr, callback_method_wxSharp_Window_IsTransparentBackgroundSupported, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetScrollbar", nullptr, callback_method_wxSharp_Window_SetScrollbar, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetScrollPos", nullptr, callback_method_wxSharp_Window_SetScrollPos, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "GetScrollPos", nullptr, callback_method_wxSharp_Window_GetScrollPos, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "GetScrollThumb", nullptr, callback_method_wxSharp_Window_GetScrollThumb, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "GetScrollRange", nullptr, callback_method_wxSharp_Window_GetScrollRange, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ScrollWindow", nullptr, callback_method_wxSharp_Window_ScrollWindow, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ScrollLines", nullptr, callback_method_wxSharp_Window_ScrollLines, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ScrollPages", nullptr, callback_method_wxSharp_Window_ScrollPages, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AdjustForLayoutDirection", nullptr, callback_method_wxSharp_Window_AdjustForLayoutDirection, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DoIsExposed", nullptr, callback_method_wxSharp_Window_DoIsExposed, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetDoubleBuffered", nullptr, callback_method_wxSharp_Window_SetDoubleBuffered, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnInternalIdle", nullptr, callback_method_wxSharp_Window_OnInternalIdle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "PreCreation", nullptr, callback_method_wxSharp_Window_PreCreation, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "PostCreation", nullptr, callback_method_wxSharp_Window_PostCreation, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DoAddChild", nullptr, callback_method_wxSharp_Window_DoAddChild, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Close", nullptr, callback_method_wxSharp_Window_Close, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Destroy", nullptr, callback_method_wxSharp_Window_Destroy, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DestroyChildren", nullptr, callback_method_wxSharp_Window_DestroyChildren, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetSize", nullptr, callback_method_wxSharp_Window_SetSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Move", nullptr, callback_method_wxSharp_Window_Move, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetClientSize", nullptr, callback_method_wxSharp_Window_SetClientSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ClientToWindowSize", nullptr, callback_method_wxSharp_Window_ClientToWindowSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "WindowToClientSize", nullptr, callback_method_wxSharp_Window_WindowToClientSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "GetBestHeight", nullptr, callback_method_wxSharp_Window_GetBestHeight, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "GetBestWidth", nullptr, callback_method_wxSharp_Window_GetBestWidth, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "InvalidateBestSize", nullptr, callback_method_wxSharp_Window_InvalidateBestSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CacheBestSize", nullptr, callback_method_wxSharp_Window_CacheBestSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetInitialSize", nullptr, callback_method_wxSharp_Window_SetInitialSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Centre", nullptr, callback_method_wxSharp_Window_Centre, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Center", nullptr, callback_method_wxSharp_Window_Center, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CentreOnParent", nullptr, callback_method_wxSharp_Window_CentreOnParent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CenterOnParent", nullptr, callback_method_wxSharp_Window_CenterOnParent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Fit", nullptr, callback_method_wxSharp_Window_Fit, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "FitInside", nullptr, callback_method_wxSharp_Window_FitInside, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetSizeHints", nullptr, callback_method_wxSharp_Window_SetSizeHints, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetVirtualSize", nullptr, callback_method_wxSharp_Window_SetVirtualSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DoSetVirtualSize", nullptr, callback_method_wxSharp_Window_DoSetVirtualSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DoGetVirtualSize", nullptr, callback_method_wxSharp_Window_DoGetVirtualSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "InformFirstDirection", nullptr, callback_method_wxSharp_Window_InformFirstDirection, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SendSizeEvent", nullptr, callback_method_wxSharp_Window_SendSizeEvent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SendSizeEventToParent", nullptr, callback_method_wxSharp_Window_SendSizeEventToParent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "PostSizeEvent", nullptr, callback_method_wxSharp_Window_PostSizeEvent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "PostSizeEventToParent", nullptr, callback_method_wxSharp_Window_PostSizeEventToParent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "BeginRepositioningChildren", nullptr, callback_method_wxSharp_Window_BeginRepositioningChildren, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EndRepositioningChildren", nullptr, callback_method_wxSharp_Window_EndRepositioningChildren, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Hide", nullptr, callback_method_wxSharp_Window_Hide, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ShowWithEffect", nullptr, callback_method_wxSharp_Window_ShowWithEffect, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "HideWithEffect", nullptr, callback_method_wxSharp_Window_HideWithEffect, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Enable", nullptr, callback_method_wxSharp_Window_Enable, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Disable", nullptr, callback_method_wxSharp_Window_Disable, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "HasFlag", nullptr, callback_method_wxSharp_Window_HasFlag, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ToggleWindowStyle", nullptr, callback_method_wxSharp_Window_ToggleWindowStyle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "HasExtraStyle", nullptr, callback_method_wxSharp_Window_HasExtraStyle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetFocusFromKbd", nullptr, callback_method_wxSharp_Window_SetFocusFromKbd, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DisableFocusFromKeyboard", nullptr, callback_method_wxSharp_Window_DisableFocusFromKeyboard, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CanBeFocused", nullptr, callback_method_wxSharp_Window_CanBeFocused, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CanAcceptFocus", nullptr, callback_method_wxSharp_Window_CanAcceptFocus, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CanAcceptFocusFromKeyboard", nullptr, callback_method_wxSharp_Window_CanAcceptFocusFromKeyboard, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "EnableVisibleFocus", nullptr, callback_method_wxSharp_Window_EnableVisibleFocus, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "NavigateIn", nullptr, callback_method_wxSharp_Window_NavigateIn, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Navigate", nullptr, callback_method_wxSharp_Window_Navigate, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "HandleAsNavigationKey", nullptr, callback_method_wxSharp_Window_HandleAsNavigationKey, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "MoveBeforeInTabOrder", nullptr, callback_method_wxSharp_Window_MoveBeforeInTabOrder, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "MoveAfterInTabOrder", nullptr, callback_method_wxSharp_Window_MoveAfterInTabOrder, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsClientAreaChild", nullptr, callback_method_wxSharp_Window_IsClientAreaChild, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "FindWindow", nullptr, callback_method_wxSharp_Window_FindWindow, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "PushEventHandler", nullptr, callback_method_wxSharp_Window_PushEventHandler, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "PopEventHandler", nullptr, callback_method_wxSharp_Window_PopEventHandler, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "RemoveEventHandler", nullptr, callback_method_wxSharp_Window_RemoveEventHandler, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ProcessWindowEvent", nullptr, callback_method_wxSharp_Window_ProcessWindowEvent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ProcessWindowEventLocally", nullptr, callback_method_wxSharp_Window_ProcessWindowEventLocally, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "HandleWindowEvent", nullptr, callback_method_wxSharp_Window_HandleWindowEvent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Validate", nullptr, callback_method_wxSharp_Window_Validate, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "InitDialog", nullptr, callback_method_wxSharp_Window_InitDialog, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "RegisterHotKey", nullptr, callback_method_wxSharp_Window_RegisterHotKey, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "UnregisterHotKey", nullptr, callback_method_wxSharp_Window_UnregisterHotKey, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "FromDIP", nullptr, callback_method_wxSharp_Window_FromDIP, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ToDIP", nullptr, callback_method_wxSharp_Window_ToDIP, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ConvertPixelsToDialog", nullptr, callback_method_wxSharp_Window_ConvertPixelsToDialog, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ConvertDialogToPixels", nullptr, callback_method_wxSharp_Window_ConvertDialogToPixels, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CaptureMouse", nullptr, callback_method_wxSharp_Window_CaptureMouse, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ReleaseMouse", nullptr, callback_method_wxSharp_Window_ReleaseMouse, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "RefreshRect", nullptr, callback_method_wxSharp_Window_RefreshRect, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Freeze", nullptr, callback_method_wxSharp_Window_Freeze, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "Thaw", nullptr, callback_method_wxSharp_Window_Thaw, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "PrepareDC", nullptr, callback_method_wxSharp_Window_PrepareDC, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsExposed", nullptr, callback_method_wxSharp_Window_IsExposed, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetOwnBackgroundColour", nullptr, callback_method_wxSharp_Window_SetOwnBackgroundColour, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetOwnForegroundColour", nullptr, callback_method_wxSharp_Window_SetOwnForegroundColour, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ClientToScreen", nullptr, callback_method_wxSharp_Window_ClientToScreen, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ScreenToClient", nullptr, callback_method_wxSharp_Window_ScreenToClient, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "HitTest", nullptr, callback_method_wxSharp_Window_HitTest, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "GetBorder", nullptr, callback_method_wxSharp_Window_GetBorder, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "UpdateWindowUI", nullptr, callback_method_wxSharp_Window_UpdateWindowUI, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DoUpdateWindowUI", nullptr, callback_method_wxSharp_Window_DoUpdateWindowUI, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CanScroll", nullptr, callback_method_wxSharp_Window_CanScroll, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "HasScrollbar", nullptr, callback_method_wxSharp_Window_HasScrollbar, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "AlwaysShowScrollbars", nullptr, callback_method_wxSharp_Window_AlwaysShowScrollbars, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsScrollbarAlwaysShown", nullptr, callback_method_wxSharp_Window_IsScrollbarAlwaysShown, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "GetHelpTextAtPoint", nullptr, callback_method_wxSharp_Window_GetHelpTextAtPoint, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetToolTip", nullptr, callback_method_wxSharp_Window_SetToolTip, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "UnsetToolTip", nullptr, callback_method_wxSharp_Window_UnsetToolTip, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DragAcceptFiles", nullptr, callback_method_wxSharp_Window_DragAcceptFiles, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DeleteRelatedConstraints", nullptr, callback_method_wxSharp_Window_DeleteRelatedConstraints, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ResetConstraints", nullptr, callback_method_wxSharp_Window_ResetConstraints, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetConstraintSizes", nullptr, callback_method_wxSharp_Window_SetConstraintSizes, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DoPhase", nullptr, callback_method_wxSharp_Window_DoPhase, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetSizeConstraint", nullptr, callback_method_wxSharp_Window_SetSizeConstraint, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "MoveConstraint", nullptr, callback_method_wxSharp_Window_MoveConstraint, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetSizer", nullptr, callback_method_wxSharp_Window_SetSizer, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetSizerAndFit", nullptr, callback_method_wxSharp_Window_SetSizerAndFit, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SetTransparent", nullptr, callback_method_wxSharp_Window_SetTransparent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CanSetTransparent", nullptr, callback_method_wxSharp_Window_CanSetTransparent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnInitDialog", nullptr, callback_method_wxSharp_Window_OnInitDialog, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "OnMiddleClick", nullptr, callback_method_wxSharp_Window_OnMiddleClick, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "SendIdleEvents", nullptr, callback_method_wxSharp_Window_SendIdleEvents, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "WXSendContextMenuEvent", nullptr, callback_method_wxSharp_Window_WXSendContextMenuEvent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "DissociateHandle", nullptr, callback_method_wxSharp_Window_DissociateHandle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "InheritAttributes", nullptr, callback_method_wxSharp_Window_InheritAttributes, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ShouldInheritColours", nullptr, callback_method_wxSharp_Window_ShouldInheritColours, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CanBeOutsideClientArea", nullptr, callback_method_wxSharp_Window_CanBeOutsideClientArea, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "CanApplyThemeBorder", nullptr, callback_method_wxSharp_Window_CanApplyThemeBorder, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "IsTopNavigationDomain", nullptr, callback_method_wxSharp_Window_IsTopNavigationDomain, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_x", nullptr, callback_method_wxSharp_Window_set_m_x, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_y", nullptr, callback_method_wxSharp_Window_set_m_y, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_width", nullptr, callback_method_wxSharp_Window_set_m_width, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_height", nullptr, callback_method_wxSharp_Window_set_m_height, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_clientWidth", nullptr, callback_method_wxSharp_Window_set_m_clientWidth, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_clientHeight", nullptr, callback_method_wxSharp_Window_set_m_clientHeight, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_useCachedClientSize", nullptr, callback_method_wxSharp_Window_set_m_useCachedClientSize, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_isGtkPositionValid", nullptr, callback_method_wxSharp_Window_set_m_isGtkPositionValid, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_gtkLabel", nullptr, callback_method_wxSharp_Window_set_m_gtkLabel, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_noExpose", nullptr, callback_method_wxSharp_Window_set_m_noExpose, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_nativeSizeEvent", nullptr, callback_method_wxSharp_Window_set_m_nativeSizeEvent, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_isScrolling", nullptr, callback_method_wxSharp_Window_set_m_isScrolling, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_clipPaintRegion", nullptr, callback_method_wxSharp_Window_set_m_clipPaintRegion, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_dirtyTabOrder", nullptr, callback_method_wxSharp_Window_set_m_dirtyTabOrder, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_mouseButtonDown", nullptr, callback_method_wxSharp_Window_set_m_mouseButtonDown, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_showOnIdle", nullptr, callback_method_wxSharp_Window_set_m_showOnIdle, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "set_m_needCursorReset", nullptr, callback_method_wxSharp_Window_set_m_needCursorReset, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes), nullptr },
        { "ScrollDirFromOrient", nullptr, callback_method_wxSharp_Window_ScrollDirFromOrient, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
        { "OrientFromScrollDir", nullptr, callback_method_wxSharp_Window_OrientFromScrollDir, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
        { "NewControlId", nullptr, callback_method_wxSharp_Window_NewControlId, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
        { "UnreserveControlId", nullptr, callback_method_wxSharp_Window_UnreserveControlId, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
        { "DoFindFocus", nullptr, callback_method_wxSharp_Window_DoFindFocus, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
        { "FindWindowById", nullptr, callback_method_wxSharp_Window_FindWindowById, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
        { "FindWindowByName", nullptr, callback_method_wxSharp_Window_FindWindowByName, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
        { "FindWindowByLabel", nullptr, callback_method_wxSharp_Window_FindWindowByLabel, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
        { "GetClassDefaultAttributes", nullptr, callback_method_wxSharp_Window_GetClassDefaultAttributes, nullptr, nullptr, nullptr, (napi_property_attributes)(attributes | napi_static), nullptr },
    };

    napi_value constructor;
    status = napi_define_class(env, "Window", NAPI_AUTO_LENGTH, callback_method_wxSharp_Window_Window, nullptr, sizeof(props) / sizeof(props[0]), props, &constructor);
    assert(status == napi_ok);

    status = napi_create_reference(env, constructor, 1, &ctor_wxSharp_Window_Window);
    assert(status == napi_ok);

    return constructor;
}

// wxSharp::FindWindowAtPointer
static napi_value callback_function_wxSharp_FindWindowAtPointer(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc < 1 || argc > 1)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    napi_value args[argc];
    status = napi_get_cb_info(env, info, &argc, args, nullptr, nullptr);
    assert(status == napi_ok);

    napi_valuetype types[argc];
    for (size_t i = 0; i < argc; i++)
    {
        status = napi_typeof(env, args[i], &types[i]);
        assert(status == napi_ok);
    }

    if (NAPI_IS_OBJECT(types[0]))
        goto overload0;

    goto error;

error:
    status = napi_throw_type_error(env, nullptr, "Unsupported argument type");
    assert(status == napi_ok);

    return nullptr;

    // ::wxSharp::Window* FindWindowAtPointer(::wxSharp::Point& pt)
overload0:
    {
        wxSharp::Point* pt_instance;
        status = napi_unwrap(env, _this, (void**) &pt_instance);
        auto &__arg0 = *pt_instance;

        ::wxSharp::Window* __ret = ::wxSharp::FindWindowAtPointer(__arg0);

        napi_value ____ret_ctor;
        status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
        assert(status == napi_ok);

        napi_value ____ret_instance;
        status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
        assert(status == napi_ok);


        return ____ret_instance;
    }

    return nullptr;
}

static napi_value register_function_wxSharp_FindWindowAtPointer(napi_env env)
{
    napi_status status;
    napi_value _wxSharp_FindWindowAtPointer;
    status = napi_create_function(env, "FindWindowAtPointer", NAPI_AUTO_LENGTH, callback_function_wxSharp_FindWindowAtPointer, 0, &_wxSharp_FindWindowAtPointer);
    assert(status == napi_ok);

    return _wxSharp_FindWindowAtPointer;
}

// wxSharp::GetMousePosition
static napi_value callback_function_wxSharp_GetMousePosition(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    ::wxSharp::Point __ret = ::wxSharp::GetMousePosition();

    napi_value ____ret_ctor;
    status = napi_get_reference_value(env, ctor_wxSharp_Point_Point, &____ret_ctor);
    assert(status == napi_ok);

    napi_value ____ret_instance;
    status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
    assert(status == napi_ok);


    return ____ret_instance;

    return nullptr;
}

static napi_value register_function_wxSharp_GetMousePosition(napi_env env)
{
    napi_status status;
    napi_value _wxSharp_GetMousePosition;
    status = napi_create_function(env, "GetMousePosition", NAPI_AUTO_LENGTH, callback_function_wxSharp_GetMousePosition, 0, &_wxSharp_GetMousePosition);
    assert(status == napi_ok);

    return _wxSharp_GetMousePosition;
}

// wxSharp::GetActiveWindow
static napi_value callback_function_wxSharp_GetActiveWindow(napi_env env, napi_callback_info info)
{
    napi_status status;
    napi_value _this;
    size_t argc;
    status = napi_get_cb_info(env, info, &argc, nullptr, &_this, nullptr);
    assert(status == napi_ok);

    if (argc > 0)
    {
        status = napi_throw_type_error(env, nullptr, "Unsupported number of arguments");
        assert(status == napi_ok);

        return nullptr;
    }

    ::wxSharp::Window* __ret = ::wxSharp::GetActiveWindow();

    napi_value ____ret_ctor;
    status = napi_get_reference_value(env, ctor_wxSharp_Window_Window, &____ret_ctor);
    assert(status == napi_ok);

    napi_value ____ret_instance;
    status = napi_new_instance(env, ____ret_ctor, 0, nullptr, &____ret_instance);
    assert(status == napi_ok);


    return ____ret_instance;

    return nullptr;
}

static napi_value register_function_wxSharp_GetActiveWindow(napi_env env)
{
    napi_status status;
    napi_value _wxSharp_GetActiveWindow;
    status = napi_create_function(env, "GetActiveWindow", NAPI_AUTO_LENGTH, callback_function_wxSharp_GetActiveWindow, 0, &_wxSharp_GetActiveWindow);
    assert(status == napi_ok);

    return _wxSharp_GetActiveWindow;
}

void register_wxsharp_window(napi_env env, napi_value exports)
{
    napi_value value;

    value = register_enum_wxSharp_WindowVariant(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "WindowVariant", value));

    value = register_enum_wxSharp_ShowEffect(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "ShowEffect", value));

    value = register_enum_wxSharp_SendEventFlags(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "SendEventFlags", value));

    value = register_enum_wxSharp_TouchMode(env, exports);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "TouchMode", value));

    value = register_class_wxSharp_VisualAttributes(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "VisualAttributes", value));

    value = register_class_wxSharp_WindowListNode(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "WindowListNode", value));

    value = register_class_wxSharp_Window(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "Window", value));

    value = register_function_wxSharp_FindWindowAtPointer(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "FindWindowAtPointer", value));

    value = register_function_wxSharp_GetMousePosition(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GetMousePosition", value));

    value = register_function_wxSharp_GetActiveWindow(env);
    NAPI_CALL_NORET(env, napi_set_named_property(env, exports, "GetActiveWindow", value));
}
