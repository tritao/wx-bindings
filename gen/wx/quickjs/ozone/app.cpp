// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <CppSharp_QuickJS.h>
#include <assert.h>
#include <ozone/app.h>

extern "C" {

extern JSClassID classId_Ozone_AppConsole;
extern JSClassID classId_Ozone_EvtHandler;
extern JSClassID classId_Ozone_Object;
extern JSClassID classId_Ozone_App;
extern JSClassID classId_Ozone_Window;
extern JSClassID classId__Signal;

JSClassID classId_Ozone_AppConsole;

// Ozone::AppConsole::AppConsole
static JSValue callback_method_Ozone_AppConsole_AppConsole(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance;

    instance = new Ozone::AppConsole();
    goto wrap;

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_AppConsole);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_AppConsole);
    JS_FreeValue(ctx, proto);

    JS_SetOpaque(__obj, instance);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::AppConsole::CheckSignal
static JSValue callback_method_Ozone_AppConsole_CheckSignal(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->CheckSignal();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::CallOnInit
static JSValue callback_method_Ozone_AppConsole_CallOnInit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->CallOnInit();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::OnInit
static JSValue callback_method_Ozone_AppConsole_OnInit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->OnInit();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::OnRun
static JSValue callback_method_Ozone_AppConsole_OnRun(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    int __ret = instance->OnRun();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::OnLaunched
static JSValue callback_method_Ozone_AppConsole_OnLaunched(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->OnLaunched();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::OnExit
static JSValue callback_method_Ozone_AppConsole_OnExit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    int __ret = instance->OnExit();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::CleanUp
static JSValue callback_method_Ozone_AppConsole_CleanUp(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->CleanUp();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::OnFatalException
static JSValue callback_method_Ozone_AppConsole_OnFatalException(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->OnFatalException();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::Exit
static JSValue callback_method_Ozone_AppConsole_Exit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->Exit();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::GetAppName
static JSValue callback_method_Ozone_AppConsole_GetAppName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetAppName();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::SetAppName
static JSValue callback_method_Ozone_AppConsole_SetAppName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetAppName(const char* name)
overload0:
    {
        const char* name;
        name = JS_ToCString(ctx, argv[0]);
        if (!name)
            return JS_EXCEPTION;

        auto __arg0 = name;
        instance->SetAppName(__arg0);

        JS_FreeCString(ctx, name);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::GetAppDisplayName
static JSValue callback_method_Ozone_AppConsole_GetAppDisplayName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetAppDisplayName();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::SetAppDisplayName
static JSValue callback_method_Ozone_AppConsole_SetAppDisplayName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetAppDisplayName(const char* name)
overload0:
    {
        const char* name;
        name = JS_ToCString(ctx, argv[0]);
        if (!name)
            return JS_EXCEPTION;

        auto __arg0 = name;
        instance->SetAppDisplayName(__arg0);

        JS_FreeCString(ctx, name);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::GetClassName
static JSValue callback_method_Ozone_AppConsole_GetClassName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetClassName();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::SetClassName
static JSValue callback_method_Ozone_AppConsole_SetClassName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetClassName(const char* name)
overload0:
    {
        const char* name;
        name = JS_ToCString(ctx, argv[0]);
        if (!name)
            return JS_EXCEPTION;

        auto __arg0 = name;
        instance->SetClassName(__arg0);

        JS_FreeCString(ctx, name);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::SetVendorName
static JSValue callback_method_Ozone_AppConsole_SetVendorName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetVendorName(const char* name)
overload0:
    {
        const char* name;
        name = JS_ToCString(ctx, argv[0]);
        if (!name)
            return JS_EXCEPTION;

        auto __arg0 = name;
        instance->SetVendorName(__arg0);

        JS_FreeCString(ctx, name);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::SetVendorDisplayName
static JSValue callback_method_Ozone_AppConsole_SetVendorDisplayName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetVendorDisplayName(const char* name)
overload0:
    {
        const char* name;
        name = JS_ToCString(ctx, argv[0]);
        if (!name)
            return JS_EXCEPTION;

        auto __arg0 = name;
        instance->SetVendorDisplayName(__arg0);

        JS_FreeCString(ctx, name);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::SetCLocale
static JSValue callback_method_Ozone_AppConsole_SetCLocale(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->SetCLocale();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::OnUnhandledException
static JSValue callback_method_Ozone_AppConsole_OnUnhandledException(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->OnUnhandledException();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::OnExceptionInMainLoop
static JSValue callback_method_Ozone_AppConsole_OnExceptionInMainLoop(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->OnExceptionInMainLoop();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::StoreCurrentException
static JSValue callback_method_Ozone_AppConsole_StoreCurrentException(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->StoreCurrentException();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::RethrowStoredException
static JSValue callback_method_Ozone_AppConsole_RethrowStoredException(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->RethrowStoredException();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::ProcessPendingEvents
static JSValue callback_method_Ozone_AppConsole_ProcessPendingEvents(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->ProcessPendingEvents();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::HasPendingEvents
static JSValue callback_method_Ozone_AppConsole_HasPendingEvents(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->HasPendingEvents();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::SuspendProcessingOfPendingEvents
static JSValue callback_method_Ozone_AppConsole_SuspendProcessingOfPendingEvents(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->SuspendProcessingOfPendingEvents();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::ResumeProcessingOfPendingEvents
static JSValue callback_method_Ozone_AppConsole_ResumeProcessingOfPendingEvents(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->ResumeProcessingOfPendingEvents();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::RemovePendingEventHandler
static JSValue callback_method_Ozone_AppConsole_RemovePendingEventHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void RemovePendingEventHandler(::Ozone::EvtHandler* toRemove)
overload0:
    {
        Ozone::EvtHandler* toRemove_instance = (Ozone::EvtHandler*) JS_GetOpaque(argv[0], classId_Ozone_EvtHandler);

        auto __arg0 = toRemove_instance;
        instance->RemovePendingEventHandler(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::AppendPendingEventHandler
static JSValue callback_method_Ozone_AppConsole_AppendPendingEventHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void AppendPendingEventHandler(::Ozone::EvtHandler* toAppend)
overload0:
    {
        Ozone::EvtHandler* toAppend_instance = (Ozone::EvtHandler*) JS_GetOpaque(argv[0], classId_Ozone_EvtHandler);

        auto __arg0 = toAppend_instance;
        instance->AppendPendingEventHandler(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::DelayPendingEventHandler
static JSValue callback_method_Ozone_AppConsole_DelayPendingEventHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void DelayPendingEventHandler(::Ozone::EvtHandler* toDelay)
overload0:
    {
        Ozone::EvtHandler* toDelay_instance = (Ozone::EvtHandler*) JS_GetOpaque(argv[0], classId_Ozone_EvtHandler);

        auto __arg0 = toDelay_instance;
        instance->DelayPendingEventHandler(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::DeletePendingEvents
static JSValue callback_method_Ozone_AppConsole_DeletePendingEvents(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->DeletePendingEvents();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::ScheduleForDestruction
static JSValue callback_method_Ozone_AppConsole_ScheduleForDestruction(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void ScheduleForDestruction(::Ozone::Object* object)
overload0:
    {
        Ozone::Object* object_instance = (Ozone::Object*) JS_GetOpaque(argv[0], classId_Ozone_Object);

        auto __arg0 = object_instance;
        instance->ScheduleForDestruction(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::IsScheduledForDestruction
static JSValue callback_method_Ozone_AppConsole_IsScheduledForDestruction(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool IsScheduledForDestruction(::Ozone::Object* object) const
overload0:
    {
        Ozone::Object* object_instance = (Ozone::Object*) JS_GetOpaque(argv[0], classId_Ozone_Object);

        auto __arg0 = object_instance;
        bool __ret = instance->IsScheduledForDestruction(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::AppConsole::Pending
static JSValue callback_method_Ozone_AppConsole_Pending(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->Pending();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::Dispatch
static JSValue callback_method_Ozone_AppConsole_Dispatch(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->Dispatch();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::MainLoop
static JSValue callback_method_Ozone_AppConsole_MainLoop(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    int __ret = instance->MainLoop();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::ExitMainLoop
static JSValue callback_method_Ozone_AppConsole_ExitMainLoop(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->ExitMainLoop();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::Yield
static JSValue callback_method_Ozone_AppConsole_Yield(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Yield(bool onlyIfNeeded)
overload0:
    {
        bool onlyIfNeeded;
        onlyIfNeeded = JS_ToBool(ctx, argv[0]);
        if (onlyIfNeeded == -1)
            return JS_EXCEPTION;

        auto __arg0 = onlyIfNeeded;
        bool __ret = instance->Yield(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::AppConsole::WakeUpIdle
static JSValue callback_method_Ozone_AppConsole_WakeUpIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    instance->WakeUpIdle();

    return JS_UNDEFINED;
}

// Ozone::AppConsole::ProcessIdle
static JSValue callback_method_Ozone_AppConsole_ProcessIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->ProcessIdle();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::UsesEventLoop
static JSValue callback_method_Ozone_AppConsole_UsesEventLoop(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->UsesEventLoop();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::get_argc
static JSValue callback_method_Ozone_AppConsole_get_argc(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    int __ret = instance->get_argc();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::set_argc
static JSValue callback_method_Ozone_AppConsole_set_argc(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(this_val, 0);

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_argc(int value)
overload0:
    {
        int value;
        if (JS_ToInt32(ctx, (int32_t*) &value, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = value;
        instance->set_argc(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::AppConsole::IsMainLoopRunning
static JSValue callback_method_Ozone_AppConsole_IsMainLoopRunning(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    bool __ret = ::Ozone::AppConsole::IsMainLoopRunning();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::AppConsole::CheckBuildOptions
static JSValue callback_method_Ozone_AppConsole_CheckBuildOptions(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 2 || argc > 2)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    if (JS_IsString(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsString(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool CheckBuildOptions(const char* optionsSignature, const char* componentName)
overload0:
    {
        const char* optionsSignature;
        optionsSignature = JS_ToCString(ctx, argv[0]);
        if (!optionsSignature)
            return JS_EXCEPTION;

        auto __arg0 = optionsSignature;
        const char* componentName;
        componentName = JS_ToCString(ctx, argv[1]);
        if (!componentName)
            return JS_EXCEPTION;

        auto __arg1 = componentName;
        bool __ret = ::Ozone::AppConsole::CheckBuildOptions(__arg0, __arg1);

        JS_FreeCString(ctx, optionsSignature);
        JS_FreeCString(ctx, componentName);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::AppConsole::GetInstance
static JSValue callback_method_Ozone_AppConsole_GetInstance(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    ::Ozone::AppConsole* __ret = ::Ozone::AppConsole::GetInstance();

    JSValue ____ret_instance = JS_NewObjectClass(ctx, 0);

    return ____ret_instance;
}

// Ozone::AppConsole::SetInstance
static JSValue callback_method_Ozone_AppConsole_SetInstance(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetInstance(::Ozone::AppConsole* app)
overload0:
    {
        Ozone::AppConsole* app_instance = (Ozone::AppConsole*) JS_GetOpaque(argv[0], classId_Ozone_AppConsole);

        auto __arg0 = app_instance;
        ::Ozone::AppConsole::SetInstance(__arg0);

        return JS_UNDEFINED;
    }
}

static JSValue callback_class_Ozone_AppConsole_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "AppConsole");
}

void finalizer_Ozone_AppConsole(JSRuntime *rt, JSValue val)
{
    Ozone::AppConsole* instance = (Ozone::AppConsole*) JS_GetOpaque(val, 0);
}

static JSClassDef classDef_Ozone_AppConsole
{
    "AppConsole",
    .finalizer = finalizer_Ozone_AppConsole
};

static JSCFunctionListEntry funcDef_Ozone_AppConsole[]
{
    JS_CFUNC_DEF("CheckSignal", 0, callback_method_Ozone_AppConsole_CheckSignal),
    JS_CFUNC_DEF("CallOnInit", 0, callback_method_Ozone_AppConsole_CallOnInit),
    JS_CFUNC_DEF("OnInit", 0, callback_method_Ozone_AppConsole_OnInit),
    JS_CFUNC_DEF("OnRun", 0, callback_method_Ozone_AppConsole_OnRun),
    JS_CFUNC_DEF("OnLaunched", 0, callback_method_Ozone_AppConsole_OnLaunched),
    JS_CFUNC_DEF("OnExit", 0, callback_method_Ozone_AppConsole_OnExit),
    JS_CFUNC_DEF("CleanUp", 0, callback_method_Ozone_AppConsole_CleanUp),
    JS_CFUNC_DEF("OnFatalException", 0, callback_method_Ozone_AppConsole_OnFatalException),
    JS_CFUNC_DEF("Exit", 0, callback_method_Ozone_AppConsole_Exit),
    JS_CFUNC_DEF("GetAppName", 0, callback_method_Ozone_AppConsole_GetAppName),
    JS_CFUNC_DEF("SetAppName", 1, callback_method_Ozone_AppConsole_SetAppName),
    JS_CFUNC_DEF("GetAppDisplayName", 0, callback_method_Ozone_AppConsole_GetAppDisplayName),
    JS_CFUNC_DEF("SetAppDisplayName", 1, callback_method_Ozone_AppConsole_SetAppDisplayName),
    JS_CFUNC_DEF("GetClassName", 0, callback_method_Ozone_AppConsole_GetClassName),
    JS_CFUNC_DEF("SetClassName", 1, callback_method_Ozone_AppConsole_SetClassName),
    JS_CFUNC_DEF("SetVendorName", 1, callback_method_Ozone_AppConsole_SetVendorName),
    JS_CFUNC_DEF("SetVendorDisplayName", 1, callback_method_Ozone_AppConsole_SetVendorDisplayName),
    JS_CFUNC_DEF("SetCLocale", 0, callback_method_Ozone_AppConsole_SetCLocale),
    JS_CFUNC_DEF("OnUnhandledException", 0, callback_method_Ozone_AppConsole_OnUnhandledException),
    JS_CFUNC_DEF("OnExceptionInMainLoop", 0, callback_method_Ozone_AppConsole_OnExceptionInMainLoop),
    JS_CFUNC_DEF("StoreCurrentException", 0, callback_method_Ozone_AppConsole_StoreCurrentException),
    JS_CFUNC_DEF("RethrowStoredException", 0, callback_method_Ozone_AppConsole_RethrowStoredException),
    JS_CFUNC_DEF("ProcessPendingEvents", 0, callback_method_Ozone_AppConsole_ProcessPendingEvents),
    JS_CFUNC_DEF("HasPendingEvents", 0, callback_method_Ozone_AppConsole_HasPendingEvents),
    JS_CFUNC_DEF("SuspendProcessingOfPendingEvents", 0, callback_method_Ozone_AppConsole_SuspendProcessingOfPendingEvents),
    JS_CFUNC_DEF("ResumeProcessingOfPendingEvents", 0, callback_method_Ozone_AppConsole_ResumeProcessingOfPendingEvents),
    JS_CFUNC_DEF("RemovePendingEventHandler", 1, callback_method_Ozone_AppConsole_RemovePendingEventHandler),
    JS_CFUNC_DEF("AppendPendingEventHandler", 1, callback_method_Ozone_AppConsole_AppendPendingEventHandler),
    JS_CFUNC_DEF("DelayPendingEventHandler", 1, callback_method_Ozone_AppConsole_DelayPendingEventHandler),
    JS_CFUNC_DEF("DeletePendingEvents", 0, callback_method_Ozone_AppConsole_DeletePendingEvents),
    JS_CFUNC_DEF("ScheduleForDestruction", 1, callback_method_Ozone_AppConsole_ScheduleForDestruction),
    JS_CFUNC_DEF("IsScheduledForDestruction", 1, callback_method_Ozone_AppConsole_IsScheduledForDestruction),
    JS_CFUNC_DEF("Pending", 0, callback_method_Ozone_AppConsole_Pending),
    JS_CFUNC_DEF("Dispatch", 0, callback_method_Ozone_AppConsole_Dispatch),
    JS_CFUNC_DEF("MainLoop", 0, callback_method_Ozone_AppConsole_MainLoop),
    JS_CFUNC_DEF("ExitMainLoop", 0, callback_method_Ozone_AppConsole_ExitMainLoop),
    JS_CFUNC_DEF("Yield", 1, callback_method_Ozone_AppConsole_Yield),
    JS_CFUNC_DEF("WakeUpIdle", 0, callback_method_Ozone_AppConsole_WakeUpIdle),
    JS_CFUNC_DEF("ProcessIdle", 0, callback_method_Ozone_AppConsole_ProcessIdle),
    JS_CFUNC_DEF("UsesEventLoop", 0, callback_method_Ozone_AppConsole_UsesEventLoop),
    JS_CFUNC_DEF("get_argc", 0, callback_method_Ozone_AppConsole_get_argc),
    JS_CFUNC_DEF("set_argc", 1, callback_method_Ozone_AppConsole_set_argc),
    JS_CFUNC_DEF("IsMainLoopRunning", 0, callback_method_Ozone_AppConsole_IsMainLoopRunning),
    JS_CFUNC_DEF("CheckBuildOptions", 2, callback_method_Ozone_AppConsole_CheckBuildOptions),
    JS_CFUNC_DEF("GetInstance", 0, callback_method_Ozone_AppConsole_GetInstance),
    JS_CFUNC_DEF("SetInstance", 1, callback_method_Ozone_AppConsole_SetInstance),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_AppConsole_toString),
};

static void register_class_Ozone_AppConsole(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "AppConsole");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_AppConsole);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_AppConsole, &classDef_Ozone_AppConsole);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_AppConsole, sizeof(funcDef_Ozone_AppConsole) / sizeof(funcDef_Ozone_AppConsole[0]));
        JS_SetClassProto(ctx, classId_Ozone_AppConsole, proto);

        JSValue ctor = JS_NewCFunction2(ctx, callback_method_Ozone_AppConsole_AppConsole, "AppConsole", 1, JS_CFUNC_constructor, 0);
        JS_SetConstructor(ctx, ctor, proto);

        JS_SetModuleExport(ctx, m, "AppConsole", ctor);
    }
    else if (phase == 1)
    {
        JSValue proto = JS_GetClassProto(ctx, classId_Ozone_AppConsole);
        JSValue baseProto = JS_GetClassProto(ctx, classId_Ozone_EvtHandler);
        int err = JS_SetPrototype(ctx, proto, baseProto);
        assert(err != -1);
        JS_FreeValue(ctx, baseProto);
        JS_FreeValue(ctx, proto);
    }
}

JSClassID classId_Ozone_App;

struct data_Ozone_App
{
    Ozone::App* instance;
    JSContext* ctx;
    JS_EventMap events;

    void event_invoke_OnQueryEndSession(::Ozone::CloseEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 50);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnEndSession(::Ozone::CloseEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 51);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnActivateApp(::Ozone::ActivateEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 52);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnHibernate(::Ozone::ActivateEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 53);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnIdle(::Ozone::IdleEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 54);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }
};

JSValue callback_event_getter_Ozone_App_OnQueryEndSession(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 50);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 50, JS_DupValue(ctx, __obj));

    data->instance->OnQueryEndSession.bind(data, &data_Ozone_App::event_invoke_OnQueryEndSession);

    return __obj;
}

JSValue callback_event_getter_Ozone_App_OnEndSession(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 51);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 51, JS_DupValue(ctx, __obj));

    data->instance->OnEndSession.bind(data, &data_Ozone_App::event_invoke_OnEndSession);

    return __obj;
}

JSValue callback_event_getter_Ozone_App_OnActivateApp(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 52);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 52, JS_DupValue(ctx, __obj));

    data->instance->OnActivateApp.bind(data, &data_Ozone_App::event_invoke_OnActivateApp);

    return __obj;
}

JSValue callback_event_getter_Ozone_App_OnHibernate(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 53);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 53, JS_DupValue(ctx, __obj));

    data->instance->OnHibernate.bind(data, &data_Ozone_App::event_invoke_OnHibernate);

    return __obj;
}

JSValue callback_event_getter_Ozone_App_OnIdle(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 54);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 54, JS_DupValue(ctx, __obj));

    data->instance->OnIdle.bind(data, &data_Ozone_App::event_invoke_OnIdle);

    return __obj;
}

// Ozone::App::App
static JSValue callback_method_Ozone_App_App(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::App* instance;

    instance = new Ozone::App();
    goto wrap;

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_App);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_App);
    JS_FreeValue(ctx, proto);

    data_Ozone_App* __data = new data_Ozone_App;

    JS_Interop_InitEventMap(&__data->events);

    __data->instance = instance;
    __data->ctx = ctx;

    JS_SetOpaque(__obj, __data);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::App::SetNativeTheme
static JSValue callback_method_Ozone_App_SetNativeTheme(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    if (JS_IsString(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool SetNativeTheme(const char* theme)
overload0:
    {
        const char* theme;
        theme = JS_ToCString(ctx, argv[0]);
        if (!theme)
            return JS_EXCEPTION;

        auto __arg0 = theme;
        bool __ret = instance->SetNativeTheme(__arg0);

        JS_FreeCString(ctx, theme);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::App::OnInitGui
static JSValue callback_method_Ozone_App_OnInitGui(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    bool __ret = instance->OnInitGui();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::App::WakeUpIdle
static JSValue callback_method_Ozone_App_WakeUpIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    instance->WakeUpIdle();

    return JS_UNDEFINED;
}

// Ozone::App::CleanUp
static JSValue callback_method_Ozone_App_CleanUp(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    instance->CleanUp();

    return JS_UNDEFINED;
}

// Ozone::App::EventsPending
static JSValue callback_method_Ozone_App_EventsPending(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    bool __ret = instance->EventsPending();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::App::DoIdle
static JSValue callback_method_Ozone_App_DoIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    bool __ret = instance->DoIdle();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::App::OnRun
static JSValue callback_method_Ozone_App_OnRun(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    int __ret = instance->OnRun();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::App::OnExit
static JSValue callback_method_Ozone_App_OnExit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    int __ret = instance->OnExit();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::App::SafeYield
static JSValue callback_method_Ozone_App_SafeYield(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 2 || argc > 2)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsBool(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool SafeYield(::Ozone::Window* win, bool onlyIfNeeded)
overload0:
    {
        Ozone::Window* win_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = win_instance;
        bool onlyIfNeeded;
        onlyIfNeeded = JS_ToBool(ctx, argv[1]);
        if (onlyIfNeeded == -1)
            return JS_EXCEPTION;

        auto __arg1 = onlyIfNeeded;
        bool __ret = instance->SafeYield(__arg0, __arg1);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::App::SafeYieldFor
static JSValue callback_method_Ozone_App_SafeYieldFor(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 2 || argc > 2)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsNumber(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool SafeYieldFor(::Ozone::Window* win, long eventsToProcess)
overload0:
    {
        Ozone::Window* win_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = win_instance;
        long eventsToProcess;
        if (JS_ToInt32(ctx, (int32_t*) &eventsToProcess, argv[1]))
            return JS_EXCEPTION;

        auto __arg1 = eventsToProcess;
        bool __ret = instance->SafeYieldFor(__arg0, __arg1);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::App::ProcessIdle
static JSValue callback_method_Ozone_App_ProcessIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    bool __ret = instance->ProcessIdle();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::App::UsesEventLoop
static JSValue callback_method_Ozone_App_UsesEventLoop(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    bool __ret = instance->UsesEventLoop();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::App::IsActive
static JSValue callback_method_Ozone_App_IsActive(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    bool __ret = instance->IsActive();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::App::SetTopWindow
static JSValue callback_method_Ozone_App_SetTopWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetTopWindow(::Ozone::Window* win)
overload0:
    {
        Ozone::Window* win_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = win_instance;
        instance->SetTopWindow(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::App::GetTopWindow
static JSValue callback_method_Ozone_App_GetTopWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    ::Ozone::Window* __ret = instance->GetTopWindow();

    JSValue ____ret_instance = JS_NewObjectClass(ctx, 0);

    return ____ret_instance;
}

// Ozone::App::SetExitOnFrameDelete
static JSValue callback_method_Ozone_App_SetExitOnFrameDelete(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetExitOnFrameDelete(bool flag)
overload0:
    {
        bool flag;
        flag = JS_ToBool(ctx, argv[0]);
        if (flag == -1)
            return JS_EXCEPTION;

        auto __arg0 = flag;
        instance->SetExitOnFrameDelete(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::App::GetExitOnFrameDelete
static JSValue callback_method_Ozone_App_GetExitOnFrameDelete(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    bool __ret = instance->GetExitOnFrameDelete();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::App::SetUseBestVisual
static JSValue callback_method_Ozone_App_SetUseBestVisual(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 2 || argc > 2)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsBool(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetUseBestVisual(bool flag, bool forceTrueColour)
overload0:
    {
        bool flag;
        flag = JS_ToBool(ctx, argv[0]);
        if (flag == -1)
            return JS_EXCEPTION;

        auto __arg0 = flag;
        bool forceTrueColour;
        forceTrueColour = JS_ToBool(ctx, argv[1]);
        if (forceTrueColour == -1)
            return JS_EXCEPTION;

        auto __arg1 = forceTrueColour;
        instance->SetUseBestVisual(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::App::GetUseBestVisual
static JSValue callback_method_Ozone_App_GetUseBestVisual(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    bool __ret = instance->GetUseBestVisual();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::App::SetPrintMode
static JSValue callback_method_Ozone_App_SetPrintMode(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetPrintMode(int _0)
overload0:
    {
        int _0;
        if (JS_ToInt32(ctx, (int32_t*) &_0, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = _0;
        instance->SetPrintMode(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::App::GetPrintMode
static JSValue callback_method_Ozone_App_GetPrintMode(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    int __ret = instance->GetPrintMode();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::App::SetActive
static JSValue callback_method_Ozone_App_SetActive(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 2 || argc > 2)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_App*) JS_GetOpaque(this_val, 0);
    Ozone::App* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsObject(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetActive(bool isActive, ::Ozone::Window* lastFocus)
overload0:
    {
        bool isActive;
        isActive = JS_ToBool(ctx, argv[0]);
        if (isActive == -1)
            return JS_EXCEPTION;

        auto __arg0 = isActive;
        Ozone::Window* lastFocus_instance = (Ozone::Window*) JS_GetOpaque(argv[1], classId_Ozone_Window);

        auto __arg1 = lastFocus_instance;
        instance->SetActive(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

static JSValue callback_class_Ozone_App_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "App");
}

void finalizer_Ozone_App(JSRuntime *rt, JSValue val)
{
    auto data = (data_Ozone_App*) JS_GetOpaque(val, 0);
    Ozone::App* instance = data->instance;
    JS_Interop_FreeEventMap(&data->events, data->ctx);
}

static JSClassDef classDef_Ozone_App
{
    "App",
    .finalizer = finalizer_Ozone_App
};

static JSCFunctionListEntry funcDef_Ozone_App[]
{
    JS_CGETSET_DEF("OnQueryEndSession", callback_event_getter_Ozone_App_OnQueryEndSession, NULL),
    JS_CGETSET_DEF("OnEndSession", callback_event_getter_Ozone_App_OnEndSession, NULL),
    JS_CGETSET_DEF("OnActivateApp", callback_event_getter_Ozone_App_OnActivateApp, NULL),
    JS_CGETSET_DEF("OnHibernate", callback_event_getter_Ozone_App_OnHibernate, NULL),
    JS_CGETSET_DEF("OnIdle", callback_event_getter_Ozone_App_OnIdle, NULL),
    JS_CFUNC_DEF("SetNativeTheme", 1, callback_method_Ozone_App_SetNativeTheme),
    JS_CFUNC_DEF("OnInitGui", 0, callback_method_Ozone_App_OnInitGui),
    JS_CFUNC_DEF("WakeUpIdle", 0, callback_method_Ozone_App_WakeUpIdle),
    JS_CFUNC_DEF("CleanUp", 0, callback_method_Ozone_App_CleanUp),
    JS_CFUNC_DEF("EventsPending", 0, callback_method_Ozone_App_EventsPending),
    JS_CFUNC_DEF("DoIdle", 0, callback_method_Ozone_App_DoIdle),
    JS_CFUNC_DEF("OnRun", 0, callback_method_Ozone_App_OnRun),
    JS_CFUNC_DEF("OnExit", 0, callback_method_Ozone_App_OnExit),
    JS_CFUNC_DEF("SafeYield", 2, callback_method_Ozone_App_SafeYield),
    JS_CFUNC_DEF("SafeYieldFor", 2, callback_method_Ozone_App_SafeYieldFor),
    JS_CFUNC_DEF("ProcessIdle", 0, callback_method_Ozone_App_ProcessIdle),
    JS_CFUNC_DEF("UsesEventLoop", 0, callback_method_Ozone_App_UsesEventLoop),
    JS_CFUNC_DEF("IsActive", 0, callback_method_Ozone_App_IsActive),
    JS_CFUNC_DEF("SetTopWindow", 1, callback_method_Ozone_App_SetTopWindow),
    JS_CFUNC_DEF("GetTopWindow", 0, callback_method_Ozone_App_GetTopWindow),
    JS_CFUNC_DEF("SetExitOnFrameDelete", 1, callback_method_Ozone_App_SetExitOnFrameDelete),
    JS_CFUNC_DEF("GetExitOnFrameDelete", 0, callback_method_Ozone_App_GetExitOnFrameDelete),
    JS_CFUNC_DEF("SetUseBestVisual", 2, callback_method_Ozone_App_SetUseBestVisual),
    JS_CFUNC_DEF("GetUseBestVisual", 0, callback_method_Ozone_App_GetUseBestVisual),
    JS_CFUNC_DEF("SetPrintMode", 1, callback_method_Ozone_App_SetPrintMode),
    JS_CFUNC_DEF("GetPrintMode", 0, callback_method_Ozone_App_GetPrintMode),
    JS_CFUNC_DEF("SetActive", 2, callback_method_Ozone_App_SetActive),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_App_toString),
};

static void register_class_Ozone_App(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "App");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_App);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_App, &classDef_Ozone_App);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_App, sizeof(funcDef_Ozone_App) / sizeof(funcDef_Ozone_App[0]));
        JS_SetClassProto(ctx, classId_Ozone_App, proto);

        JSValue ctor = JS_NewCFunction2(ctx, callback_method_Ozone_App_App, "App", 1, JS_CFUNC_constructor, 0);
        JS_SetConstructor(ctx, ctor, proto);

        JS_SetModuleExport(ctx, m, "App", ctor);
    }
    else if (phase == 1)
    {
        JSValue proto = JS_GetClassProto(ctx, classId_Ozone_App);
        JSValue baseProto = JS_GetClassProto(ctx, classId_Ozone_AppConsole);
        int err = JS_SetPrototype(ctx, proto, baseProto);
        assert(err != -1);
        JS_FreeValue(ctx, baseProto);
        JS_FreeValue(ctx, proto);
    }
}

// Ozone::Exit
static JSValue callback_function_Ozone_Exit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    ::Ozone::Exit();

    return JS_UNDEFINED;
}

static void register_function_Ozone_Exit(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "Exit");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewCFunction(ctx, callback_function_Ozone_Exit, "Exit", 0);
    int status = JS_SetModuleExport(ctx, m, "Exit", val);
    assert(status != -1);
}

// Ozone::WakeUpIdle
static JSValue callback_function_Ozone_WakeUpIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    ::Ozone::WakeUpIdle();

    return JS_UNDEFINED;
}

static void register_function_Ozone_WakeUpIdle(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "WakeUpIdle");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewCFunction(ctx, callback_function_Ozone_WakeUpIdle, "WakeUpIdle", 0);
    int status = JS_SetModuleExport(ctx, m, "WakeUpIdle", val);
    assert(status != -1);
}

void register_ozone_app(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (phase == 0)
    {
        register_function_Ozone_Exit(ctx, m, set);

        register_function_Ozone_WakeUpIdle(ctx, m, set);
    }

    register_class_Ozone_AppConsole(ctx, m, set, phase);

    register_class_Ozone_App(ctx, m, set, phase);
}

} // extern "C"
