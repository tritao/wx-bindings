// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include <quickjs.h>

class AppConsole : public Ozone::Ozone::EvtHandler
{
public:

    AppConsole(::Ozone::AppConsole* instance, bool ownNativeInstance = false);

    AppConsole();

    AppConsole(const ::Ozone::Ozone::AppConsole& _0);

    ~AppConsole();

    void CheckSignal();

    virtual bool CallOnInit();

    virtual bool OnInit();

    virtual int OnRun();

    virtual void OnLaunched();

    virtual int OnExit();

    virtual void CleanUp();

    virtual void OnFatalException();

    virtual void Exit();

    const char* GetAppName() const;

    void SetAppName(const char* name);

    const char* GetAppDisplayName() const;

    void SetAppDisplayName(const char* name);

    const char* GetClassName() const;

    void SetClassName(const char* name);

    void SetVendorName(const char* name);

    void SetVendorDisplayName(const char* name);

    virtual void SetCLocale();

    virtual void OnUnhandledException();

    virtual bool OnExceptionInMainLoop();

    virtual bool StoreCurrentException();

    virtual void RethrowStoredException();

    virtual void ProcessPendingEvents();

    bool HasPendingEvents() const;

    void SuspendProcessingOfPendingEvents();

    void ResumeProcessingOfPendingEvents();

    void RemovePendingEventHandler(::Ozone::Ozone::EvtHandler* toRemove);

    void AppendPendingEventHandler(::Ozone::Ozone::EvtHandler* toAppend);

    void DelayPendingEventHandler(::Ozone::Ozone::EvtHandler* toDelay);

    void DeletePendingEvents();

    void ScheduleForDestruction(::Ozone::Ozone::Object* object);

    bool IsScheduledForDestruction(::Ozone::Ozone::Object* object) const;

    virtual bool Pending();

    virtual bool Dispatch();

    virtual int MainLoop();

    virtual void ExitMainLoop();

    bool Yield(bool onlyIfNeeded);

    virtual void WakeUpIdle();

    virtual bool ProcessIdle();

    virtual bool UsesEventLoop() const;

    int get_argc();

    void set_argc(int value);

    static bool IsMainLoopRunning();

    static bool CheckBuildOptions(const char* optionsSignature, const char* componentName);

    static ::Ozone::Ozone::AppConsole* GetInstance();

    static void SetInstance(::Ozone::Ozone::AppConsole* app);
};

class App : public Ozone::Ozone::AppConsole
{
public:

    App(::Ozone::App* instance, bool ownNativeInstance = false);

    App();

    App(const ::Ozone::Ozone::App& _0);

    ~App();

    virtual bool SetNativeTheme(const char* theme);

    virtual bool OnInitGui();

    virtual void WakeUpIdle() override;

    virtual void CleanUp() override;

    bool EventsPending();

    bool DoIdle();

    virtual int OnRun() override;

    virtual int OnExit() override;

    virtual bool SafeYield(::Ozone::Ozone::Window* win, bool onlyIfNeeded);

    virtual bool SafeYieldFor(::Ozone::Ozone::Window* win, long eventsToProcess);

    virtual bool ProcessIdle() override;

    virtual bool UsesEventLoop() const override;

    virtual bool IsActive() const;

    void SetTopWindow(::Ozone::Ozone::Window* win);

    virtual ::Ozone::Ozone::Window* GetTopWindow() const;

    void SetExitOnFrameDelete(bool flag);

    bool GetExitOnFrameDelete() const;

    void SetUseBestVisual(bool flag, bool forceTrueColour);

    bool GetUseBestVisual() const;

    virtual void SetPrintMode(int _0);

    int GetPrintMode() const;

    virtual void SetActive(bool isActive, ::Ozone::Ozone::Window* lastFocus);
};

extern "C" JSValue js_Exit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_WakeUpIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_CreateApp(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
