// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <CppSharp_QuickJS.h>
#include <assert.h>
#include <ozone/containr.h>

extern "C" {

extern JSClassID classId_Ozone_NavigationEnabled;
extern JSClassID classId_Ozone_ControlContainer;
extern JSClassID classId_Ozone_Window;
extern JSClassID classId__Signal;

JSClassID classId_Ozone_ControlContainer;

// Ozone::ControlContainer::ControlContainer
static JSValue callback_method_Ozone_ControlContainer_ControlContainer(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::ControlContainer* instance;

    instance = new Ozone::ControlContainer();
    goto wrap;

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_ControlContainer);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_ControlContainer);
    JS_FreeValue(ctx, proto);

    JS_SetOpaque(__obj, instance);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::ControlContainer::SetContainerWindow
static JSValue callback_method_Ozone_ControlContainer_SetContainerWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::ControlContainer* instance = (Ozone::ControlContainer*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetContainerWindow(::Ozone::Window* winParent)
overload0:
    {
        Ozone::Window* winParent_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = winParent_instance;
        instance->SetContainerWindow(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::ControlContainer::DisableSelfFocus
static JSValue callback_method_Ozone_ControlContainer_DisableSelfFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::ControlContainer* instance = (Ozone::ControlContainer*) JS_GetOpaque(this_val, 0);

    instance->DisableSelfFocus();

    return JS_UNDEFINED;
}

// Ozone::ControlContainer::EnableSelfFocus
static JSValue callback_method_Ozone_ControlContainer_EnableSelfFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::ControlContainer* instance = (Ozone::ControlContainer*) JS_GetOpaque(this_val, 0);

    instance->EnableSelfFocus();

    return JS_UNDEFINED;
}

// Ozone::ControlContainer::DoSetFocus
static JSValue callback_method_Ozone_ControlContainer_DoSetFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::ControlContainer* instance = (Ozone::ControlContainer*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->DoSetFocus();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::ControlContainer::AcceptsFocus
static JSValue callback_method_Ozone_ControlContainer_AcceptsFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::ControlContainer* instance = (Ozone::ControlContainer*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->AcceptsFocus();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::ControlContainer::AcceptsFocusRecursively
static JSValue callback_method_Ozone_ControlContainer_AcceptsFocusRecursively(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::ControlContainer* instance = (Ozone::ControlContainer*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->AcceptsFocusRecursively();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::ControlContainer::AcceptsFocusFromKeyboard
static JSValue callback_method_Ozone_ControlContainer_AcceptsFocusFromKeyboard(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::ControlContainer* instance = (Ozone::ControlContainer*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->AcceptsFocusFromKeyboard();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::ControlContainer::UpdateCanFocusChildren
static JSValue callback_method_Ozone_ControlContainer_UpdateCanFocusChildren(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::ControlContainer* instance = (Ozone::ControlContainer*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->UpdateCanFocusChildren();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

static JSValue callback_class_Ozone_ControlContainer_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "ControlContainer");
}

void finalizer_Ozone_ControlContainer(JSRuntime *rt, JSValue val)
{
    Ozone::ControlContainer* instance = (Ozone::ControlContainer*) JS_GetOpaque(val, 0);
}

static JSClassDef classDef_Ozone_ControlContainer
{
    "ControlContainer",
    .finalizer = finalizer_Ozone_ControlContainer
};

static JSCFunctionListEntry funcDef_Ozone_ControlContainer[]
{
    JS_CFUNC_DEF("SetContainerWindow", 1, callback_method_Ozone_ControlContainer_SetContainerWindow),
    JS_CFUNC_DEF("DisableSelfFocus", 0, callback_method_Ozone_ControlContainer_DisableSelfFocus),
    JS_CFUNC_DEF("EnableSelfFocus", 0, callback_method_Ozone_ControlContainer_EnableSelfFocus),
    JS_CFUNC_DEF("DoSetFocus", 0, callback_method_Ozone_ControlContainer_DoSetFocus),
    JS_CFUNC_DEF("AcceptsFocus", 0, callback_method_Ozone_ControlContainer_AcceptsFocus),
    JS_CFUNC_DEF("AcceptsFocusRecursively", 0, callback_method_Ozone_ControlContainer_AcceptsFocusRecursively),
    JS_CFUNC_DEF("AcceptsFocusFromKeyboard", 0, callback_method_Ozone_ControlContainer_AcceptsFocusFromKeyboard),
    JS_CFUNC_DEF("UpdateCanFocusChildren", 0, callback_method_Ozone_ControlContainer_UpdateCanFocusChildren),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_ControlContainer_toString),
};

static void register_class_Ozone_ControlContainer(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "ControlContainer");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_ControlContainer);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_ControlContainer, &classDef_Ozone_ControlContainer);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_ControlContainer, sizeof(funcDef_Ozone_ControlContainer) / sizeof(funcDef_Ozone_ControlContainer[0]));
        JS_SetClassProto(ctx, classId_Ozone_ControlContainer, proto);

    }
}

void register_ozone_containr(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    register_class_Ozone_ControlContainer(ctx, m, set, phase);
}

} // extern "C"
