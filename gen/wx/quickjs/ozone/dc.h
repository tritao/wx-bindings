// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include <quickjs.h>

enum class RasterOperationMode : unsigned int
{
    CLEAR = 0,
    XOR = 1,
    INVERT = 2,
    OR_REVERSE = 3,
    AND_REVERSE = 4,
    COPY = 5,
    AND = 6,
    AND_INVERT = 7,
    NO_OP = 8,
    NOR = 9,
    EQUIV = 10,
    SRC_INVERT = 11,
    OR_INVERT = 12,
    NAND = 13,
    OR = 14,
    SET = 15
};

enum class MappingMode : unsigned int
{
    MM_TEXT = 1,
    MM_METRIC = 2,
    MM_LOMETRIC = 3,
    MM_TWIPS = 4,
    MM_POINTS = 5
};

enum class FloodFillStyle : unsigned int
{
    FLOOD_SURFACE = 1,
    FLOOD_BORDER = 2
};

class FontMetrics
{
public:

    FontMetrics(::Ozone::FontMetrics* instance, bool ownNativeInstance = false);

    FontMetrics();

    FontMetrics(const ::Ozone::Ozone::FontMetrics& _0);

    ~FontMetrics();

    int get_height();

    void set_height(int value);

    int get_ascent();

    void set_ascent(int value);

    int get_descent();

    void set_descent(int value);

    int get_internalLeading();

    void set_internalLeading(int value);

    int get_externalLeading();

    void set_externalLeading(int value);

    int get_averageWidth();

    void set_averageWidth(int value);

protected:

    bool __OwnsNativeInstance;
};

class DC : public ::Ozone::Ozone::Object
{
public:

    DC(::Ozone::DC* instance, bool ownNativeInstance = false);

    DC(const ::Ozone::Ozone::DC& _0);

    ~DC();

    virtual int GetResolution() const;

    virtual ::Ozone::Ozone::GraphicsContext* GetGraphicsContext() const;

    virtual void SetGraphicsContext(::Ozone::Ozone::GraphicsContext* ctx);

    void CopyAttributes(const ::Ozone::Ozone::DC& dc);

    ::Ozone::Ozone::Window* GetWindow() const;

    bool IsOk() const;

    bool CanDrawBitmap() const;

    bool CanGetTextExtent() const;

    ::Ozone::Ozone::Size GetSize() const;

    ::Ozone::Ozone::Size GetSizeMM() const;

    int GetDepth() const;

    ::Ozone::Ozone::Size GetPPI() const;

    double GetContentScaleFactor() const;

    bool StartDoc(const char* message);

    void EndDoc();

    void StartPage();

    void EndPage();

    void CalcBoundingBox(int x, int y);

    void ResetBoundingBox();

    int MinX() const;

    int MaxX() const;

    int MinY() const;

    int MaxY() const;

    void SetPen(const ::Ozone::Ozone::Pen& pen);

    void SetBrush(const ::Ozone::Ozone::Brush& brush);

    void SetBackground(const ::Ozone::Ozone::Brush& brush);

    void SetBackgroundMode(int mode);

    int GetBackgroundMode() const;

    void SetTextForeground(const ::Ozone::Ozone::Color& colour);

    void SetTextBackground(const ::Ozone::Ozone::Color& colour);

    void SetLogicalFunction(::Ozone::Ozone::RasterOperationMode function);

    ::Ozone::Ozone::RasterOperationMode GetLogicalFunction() const;

    int GetCharHeight() const;

    int GetCharWidth() const;

    ::Ozone::Ozone::FontMetrics GetFontMetrics() const;

    ::Ozone::Ozone::Size GetMultiLineTextExtent(const char* string) const;

    void Clear();

    void SetClippingRegion(int x, int y, int width, int height);

    void SetClippingRegion(const ::Ozone::Ozone::Point& pt, const ::Ozone::Ozone::Size& sz);

    void SetClippingRegion(const ::Ozone::Ozone::Rect& rect);

    void DestroyClippingRegion();

    bool GetClippingBox(::Ozone::Ozone::Rect& rect) const;

    int DeviceToLogicalX(int x) const;

    int DeviceToLogicalY(int y) const;

    int DeviceToLogicalXRel(int x) const;

    int DeviceToLogicalYRel(int y) const;

    ::Ozone::Ozone::Point DeviceToLogical(const ::Ozone::Ozone::Point& pt) const;

    ::Ozone::Ozone::Point DeviceToLogical(int x, int y) const;

    ::Ozone::Ozone::Size DeviceToLogicalRel(const ::Ozone::Ozone::Size& dim) const;

    ::Ozone::Ozone::Size DeviceToLogicalRel(int x, int y) const;

    int LogicalToDeviceX(int x) const;

    int LogicalToDeviceY(int y) const;

    int LogicalToDeviceXRel(int x) const;

    int LogicalToDeviceYRel(int y) const;

    ::Ozone::Ozone::Point LogicalToDevice(const ::Ozone::Ozone::Point& pt) const;

    ::Ozone::Ozone::Point LogicalToDevice(int x, int y) const;

    ::Ozone::Ozone::Size LogicalToDeviceRel(const ::Ozone::Ozone::Size& dim) const;

    ::Ozone::Ozone::Size LogicalToDeviceRel(int x, int y) const;

    void SetMapMode(::Ozone::Ozone::MappingMode mode);

    ::Ozone::Ozone::MappingMode GetMapMode() const;

    void SetUserScale(double x, double y);

    void SetLogicalScale(double x, double y);

    void SetLogicalOrigin(int x, int y);

    ::Ozone::Ozone::Point GetLogicalOrigin() const;

    void SetDeviceOrigin(int x, int y);

    ::Ozone::Ozone::Point GetDeviceOrigin() const;

    void SetAxisOrientation(bool xLeftRight, bool yBottomUp);

    bool CanUseTransformMatrix() const;

    void ResetTransformMatrix();

    void SetDeviceLocalOrigin(int x, int y);

    bool FloodFill(int x, int y, const ::Ozone::Ozone::Color& col, ::Ozone::Ozone::FloodFillStyle style);

    bool FloodFill(const ::Ozone::Ozone::Point& pt, const ::Ozone::Ozone::Color& col, ::Ozone::Ozone::FloodFillStyle style);

    void GradientFillConcentric(const ::Ozone::Ozone::Rect& rect, const ::Ozone::Ozone::Color& initialColour, const ::Ozone::Ozone::Color& destColour);

    void GradientFillConcentric(const ::Ozone::Ozone::Rect& rect, const ::Ozone::Ozone::Color& initialColour, const ::Ozone::Ozone::Color& destColour, const ::Ozone::Ozone::Point& circleCenter);

    void GradientFillLinear(const ::Ozone::Ozone::Rect& rect, const ::Ozone::Ozone::Color& initialColour, const ::Ozone::Ozone::Color& destColour, ::Ozone::Ozone::Direction nDirection);

    bool GetPixel(int x, int y, ::Ozone::Ozone::Color* col) const;

    bool GetPixel(const ::Ozone::Ozone::Point& pt, ::Ozone::Ozone::Color* col) const;

    void DrawLine(int x1, int y1, int x2, int y2);

    void DrawLine(const ::Ozone::Ozone::Point& pt1, const ::Ozone::Ozone::Point& pt2);

    void CrossHair(int x, int y);

    void CrossHair(const ::Ozone::Ozone::Point& pt);

    void DrawArc(int x1, int y1, int x2, int y2, int xc, int yc);

    void DrawArc(const ::Ozone::Ozone::Point& pt1, const ::Ozone::Ozone::Point& pt2, const ::Ozone::Ozone::Point& centre);

    void DrawCheckMark(int x, int y, int width, int height);

    void DrawCheckMark(const ::Ozone::Ozone::Rect& rect);

    void DrawEllipticArc(int x, int y, int w, int h, double sa, double ea);

    void DrawEllipticArc(const ::Ozone::Ozone::Point& pt, const ::Ozone::Ozone::Size& sz, double sa, double ea);

    void DrawPoint(int x, int y);

    void DrawPoint(const ::Ozone::Ozone::Point& pt);

    void DrawLines(int n, ::Ozone::Ozone::Point points[], int xoffset, int yoffset);

    void DrawPolygon(int n, ::Ozone::Ozone::Point points[], int xoffset, int yoffset, ::Ozone::Ozone::PolygonFillMode fillStyle);

    void DrawPolyPolygon(int n, int count[], ::Ozone::Ozone::Point points[], int xoffset, int yoffset, ::Ozone::Ozone::PolygonFillMode fillStyle);

    void DrawRectangle(int x, int y, int width, int height);

    void DrawRectangle(const ::Ozone::Ozone::Point& pt, const ::Ozone::Ozone::Size& sz);

    void DrawRectangle(const ::Ozone::Ozone::Rect& rect);

    void DrawRoundedRectangle(int x, int y, int width, int height, double radius);

    void DrawRoundedRectangle(const ::Ozone::Ozone::Point& pt, const ::Ozone::Ozone::Size& sz, double radius);

    void DrawRoundedRectangle(const ::Ozone::Ozone::Rect& r, double radius);

    void DrawCircle(int x, int y, int radius);

    void DrawCircle(const ::Ozone::Ozone::Point& pt, int radius);

    void DrawEllipse(int x, int y, int width, int height);

    void DrawEllipse(const ::Ozone::Ozone::Point& pt, const ::Ozone::Ozone::Size& sz);

    void DrawEllipse(const ::Ozone::Ozone::Rect& rect);

    void DrawText(const char* text, int x, int y);

    void DrawText(const char* text, const ::Ozone::Ozone::Point& pt);

    void DrawRotatedText(const char* text, int x, int y, double angle);

    void DrawRotatedText(const char* text, const ::Ozone::Ozone::Point& pt, double angle);

    void DrawLabel(const char* text, const ::Ozone::Ozone::Rect& rect, int alignment, int indexAccel);

    bool Blit(int xdest, int ydest, int width, int height, ::Ozone::Ozone::DC* source, int xsrc, int ysrc, ::Ozone::Ozone::RasterOperationMode rop, bool useMask, int xsrcMask, int ysrcMask);

    bool Blit(const ::Ozone::Ozone::Point& destPt, const ::Ozone::Ozone::Size& sz, ::Ozone::Ozone::DC* source, const ::Ozone::Ozone::Point& srcPt, ::Ozone::Ozone::RasterOperationMode rop, bool useMask, const ::Ozone::Ozone::Point& srcPtMask);

    bool StretchBlit(int dstX, int dstY, int dstWidth, int dstHeight, ::Ozone::Ozone::DC* source, int srcX, int srcY, int srcWidth, int srcHeight, ::Ozone::Ozone::RasterOperationMode rop, bool useMask, int srcMaskX, int srcMaskY);

    bool StretchBlit(const ::Ozone::Ozone::Point& dstPt, const ::Ozone::Ozone::Size& dstSize, ::Ozone::Ozone::DC* source, const ::Ozone::Ozone::Point& srcPt, const ::Ozone::Ozone::Size& srcSize, ::Ozone::Ozone::RasterOperationMode rop, bool useMask, const ::Ozone::Ozone::Point& srcMaskPt);

    void DrawSpline(int x1, int y1, int x2, int y2, int x3, int y3);

    void DrawSpline(int n, ::Ozone::Ozone::Point points[]);
};
