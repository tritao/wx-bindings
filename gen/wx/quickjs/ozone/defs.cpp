// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <CppSharp_QuickJS.h>
#include <assert.h>
#include <ozone/defs.h>

extern "C" {

extern JSClassID classId__Signal;

static void register_enum_Ozone_KeyType(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "KeyType");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // NONE
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "NONE", __item);
    }

    // INTEGER
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "INTEGER", __item);
    }

    // STRING
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "STRING", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "KeyType", val);
    assert(status != -1);
}

static void register_enum_Ozone_Direction(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "Direction");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // LEFT
    {
        JSValue __item = JS_NewUint32(ctx, 0x10);
        JS_SetPropertyStr(ctx, val, "LEFT", __item);
    }

    // RIGHT
    {
        JSValue __item = JS_NewUint32(ctx, 0x20);
        JS_SetPropertyStr(ctx, val, "RIGHT", __item);
    }

    // UP
    {
        JSValue __item = JS_NewUint32(ctx, 0x40);
        JS_SetPropertyStr(ctx, val, "UP", __item);
    }

    // DOWN
    {
        JSValue __item = JS_NewUint32(ctx, 0x80);
        JS_SetPropertyStr(ctx, val, "DOWN", __item);
    }

    // TOP
    {
        JSValue __item = JS_NewUint32(ctx, 64);
        JS_SetPropertyStr(ctx, val, "TOP", __item);
    }

    // BOTTOM
    {
        JSValue __item = JS_NewUint32(ctx, 128);
        JS_SetPropertyStr(ctx, val, "BOTTOM", __item);
    }

    // NORTH
    {
        JSValue __item = JS_NewUint32(ctx, 64);
        JS_SetPropertyStr(ctx, val, "NORTH", __item);
    }

    // SOUTH
    {
        JSValue __item = JS_NewUint32(ctx, 128);
        JS_SetPropertyStr(ctx, val, "SOUTH", __item);
    }

    // WEST
    {
        JSValue __item = JS_NewUint32(ctx, 16);
        JS_SetPropertyStr(ctx, val, "WEST", __item);
    }

    // EAST
    {
        JSValue __item = JS_NewUint32(ctx, 32);
        JS_SetPropertyStr(ctx, val, "EAST", __item);
    }

    // ALL
    {
        JSValue __item = JS_NewUint32(ctx, 240);
        JS_SetPropertyStr(ctx, val, "ALL", __item);
    }

    // DIRECTION_MASK
    {
        JSValue __item = JS_NewUint32(ctx, 240);
        JS_SetPropertyStr(ctx, val, "DIRECTION_MASK", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "Direction", val);
    assert(status != -1);
}

static void register_enum_Ozone_BackgroundStyle(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "BackgroundStyle");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // ERASE
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "ERASE", __item);
    }

    // SYSTEM
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "SYSTEM", __item);
    }

    // PAINT
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "PAINT", __item);
    }

    // TRANSPARENT
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "TRANSPARENT", __item);
    }

    // COLOUR
    {
        JSValue __item = JS_NewUint32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "COLOUR", __item);
    }

    // CUSTOM
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "CUSTOM", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "BackgroundStyle", val);
    assert(status != -1);
}

static void register_enum_Ozone_HitTest(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "HitTest");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // NOWHERE
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "NOWHERE", __item);
    }

    // SCROLLBAR_FIRST
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "SCROLLBAR_FIRST", __item);
    }

    // SCROLLBAR_ARROW_LINE_1
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "SCROLLBAR_ARROW_LINE_1", __item);
    }

    // SCROLLBAR_ARROW_LINE_2
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "SCROLLBAR_ARROW_LINE_2", __item);
    }

    // SCROLLBAR_ARROW_PAGE_1
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "SCROLLBAR_ARROW_PAGE_1", __item);
    }

    // SCROLLBAR_ARROW_PAGE_2
    {
        JSValue __item = JS_NewUint32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "SCROLLBAR_ARROW_PAGE_2", __item);
    }

    // SCROLLBAR_THUMB
    {
        JSValue __item = JS_NewUint32(ctx, 5);
        JS_SetPropertyStr(ctx, val, "SCROLLBAR_THUMB", __item);
    }

    // SCROLLBAR_BAR_1
    {
        JSValue __item = JS_NewUint32(ctx, 6);
        JS_SetPropertyStr(ctx, val, "SCROLLBAR_BAR_1", __item);
    }

    // SCROLLBAR_BAR_2
    {
        JSValue __item = JS_NewUint32(ctx, 7);
        JS_SetPropertyStr(ctx, val, "SCROLLBAR_BAR_2", __item);
    }

    // SCROLLBAR_LAST
    {
        JSValue __item = JS_NewUint32(ctx, 8);
        JS_SetPropertyStr(ctx, val, "SCROLLBAR_LAST", __item);
    }

    // WINDOW_OUTSIDE
    {
        JSValue __item = JS_NewUint32(ctx, 9);
        JS_SetPropertyStr(ctx, val, "WINDOW_OUTSIDE", __item);
    }

    // WINDOW_INSIDE
    {
        JSValue __item = JS_NewUint32(ctx, 10);
        JS_SetPropertyStr(ctx, val, "WINDOW_INSIDE", __item);
    }

    // WINDOW_VERT_SCROLLBAR
    {
        JSValue __item = JS_NewUint32(ctx, 11);
        JS_SetPropertyStr(ctx, val, "WINDOW_VERT_SCROLLBAR", __item);
    }

    // WINDOW_HORZ_SCROLLBAR
    {
        JSValue __item = JS_NewUint32(ctx, 12);
        JS_SetPropertyStr(ctx, val, "WINDOW_HORZ_SCROLLBAR", __item);
    }

    // WINDOW_CORNER
    {
        JSValue __item = JS_NewUint32(ctx, 13);
        JS_SetPropertyStr(ctx, val, "WINDOW_CORNER", __item);
    }

    // MAX
    {
        JSValue __item = JS_NewUint32(ctx, 14);
        JS_SetPropertyStr(ctx, val, "MAX", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "HitTest", val);
    assert(status != -1);
}

static void register_enum_Ozone_Border(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "Border");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // DEFAULT
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "DEFAULT", __item);
    }

    // NONE
    {
        JSValue __item = JS_NewUint32(ctx, 0x200000);
        JS_SetPropertyStr(ctx, val, "NONE", __item);
    }

    // STATIC
    {
        JSValue __item = JS_NewUint32(ctx, 0x1000000);
        JS_SetPropertyStr(ctx, val, "STATIC", __item);
    }

    // SIMPLE
    {
        JSValue __item = JS_NewUint32(ctx, 0x2000000);
        JS_SetPropertyStr(ctx, val, "SIMPLE", __item);
    }

    // RAISED
    {
        JSValue __item = JS_NewUint32(ctx, 0x4000000);
        JS_SetPropertyStr(ctx, val, "RAISED", __item);
    }

    // SUNKEN
    {
        JSValue __item = JS_NewUint32(ctx, 0x8000000);
        JS_SetPropertyStr(ctx, val, "SUNKEN", __item);
    }

    // DOUBLE
    {
        JSValue __item = JS_NewUint32(ctx, 0x10000000);
        JS_SetPropertyStr(ctx, val, "DOUBLE", __item);
    }

    // THEME
    {
        JSValue __item = JS_NewUint32(ctx, 268435456);
        JS_SetPropertyStr(ctx, val, "THEME", __item);
    }

    // MASK
    {
        JSValue __item = JS_NewUint32(ctx, 0x1f200000);
        JS_SetPropertyStr(ctx, val, "MASK", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "Border", val);
    assert(status != -1);
}

static void register_enum_Ozone_SizerOrientation(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "SizerOrientation");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // HORIZONTAL
    {
        JSValue __item = JS_NewUint32(ctx, 0x4);
        JS_SetPropertyStr(ctx, val, "HORIZONTAL", __item);
    }

    // VERTICAL
    {
        JSValue __item = JS_NewUint32(ctx, 0x8);
        JS_SetPropertyStr(ctx, val, "VERTICAL", __item);
    }

    // BOTH
    {
        JSValue __item = JS_NewUint32(ctx, 12);
        JS_SetPropertyStr(ctx, val, "BOTH", __item);
    }

    // ORIENTATION_MASK
    {
        JSValue __item = JS_NewUint32(ctx, 12);
        JS_SetPropertyStr(ctx, val, "ORIENTATION_MASK", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "SizerOrientation", val);
    assert(status != -1);
}

static void register_enum_Ozone_Alignment(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "Alignment");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // INVALID
    {
        JSValue __item = JS_NewInt32(ctx, -1);
        JS_SetPropertyStr(ctx, val, "INVALID", __item);
    }

    // NOT
    {
        JSValue __item = JS_NewInt32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "NOT", __item);
    }

    // CENTER_HORIZONTAL
    {
        JSValue __item = JS_NewInt32(ctx, 256);
        JS_SetPropertyStr(ctx, val, "CENTER_HORIZONTAL", __item);
    }

    // CENTRE_HORIZONTAL
    {
        JSValue __item = JS_NewInt32(ctx, 256);
        JS_SetPropertyStr(ctx, val, "CENTRE_HORIZONTAL", __item);
    }

    // LEFT
    {
        JSValue __item = JS_NewInt32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "LEFT", __item);
    }

    // TOP
    {
        JSValue __item = JS_NewInt32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "TOP", __item);
    }

    // RIGHT
    {
        JSValue __item = JS_NewInt32(ctx, 512);
        JS_SetPropertyStr(ctx, val, "RIGHT", __item);
    }

    // BOTTOM
    {
        JSValue __item = JS_NewInt32(ctx, 1024);
        JS_SetPropertyStr(ctx, val, "BOTTOM", __item);
    }

    // CENTER_VERTICAL
    {
        JSValue __item = JS_NewInt32(ctx, 2048);
        JS_SetPropertyStr(ctx, val, "CENTER_VERTICAL", __item);
    }

    // CENTRE_VERTICAL
    {
        JSValue __item = JS_NewInt32(ctx, 2048);
        JS_SetPropertyStr(ctx, val, "CENTRE_VERTICAL", __item);
    }

    // CENTER
    {
        JSValue __item = JS_NewInt32(ctx, 2304);
        JS_SetPropertyStr(ctx, val, "CENTER", __item);
    }

    // CENTRE
    {
        JSValue __item = JS_NewInt32(ctx, 2304);
        JS_SetPropertyStr(ctx, val, "CENTRE", __item);
    }

    // MASK
    {
        JSValue __item = JS_NewInt32(ctx, 3840);
        JS_SetPropertyStr(ctx, val, "MASK", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "Alignment", val);
    assert(status != -1);
}

static void register_enum_Ozone_CheckBoxState(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "CheckBoxState");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // UNCHECKED
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "UNCHECKED", __item);
    }

    // CHECKED
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "CHECKED", __item);
    }

    // UNDETERMINED
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "UNDETERMINED", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "CheckBoxState", val);
    assert(status != -1);
}

static void register_enum_Ozone_DataFormatId(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "DataFormatId");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // INVALID
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "INVALID", __item);
    }

    // TEXT
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "TEXT", __item);
    }

    // BITMAP
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "BITMAP", __item);
    }

    // METAFILE
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "METAFILE", __item);
    }

    // SYLK
    {
        JSValue __item = JS_NewUint32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "SYLK", __item);
    }

    // DIF
    {
        JSValue __item = JS_NewUint32(ctx, 5);
        JS_SetPropertyStr(ctx, val, "DIF", __item);
    }

    // TIFF
    {
        JSValue __item = JS_NewUint32(ctx, 6);
        JS_SetPropertyStr(ctx, val, "TIFF", __item);
    }

    // OEMTEXT
    {
        JSValue __item = JS_NewUint32(ctx, 7);
        JS_SetPropertyStr(ctx, val, "OEMTEXT", __item);
    }

    // DIB
    {
        JSValue __item = JS_NewUint32(ctx, 8);
        JS_SetPropertyStr(ctx, val, "DIB", __item);
    }

    // PALETTE
    {
        JSValue __item = JS_NewUint32(ctx, 9);
        JS_SetPropertyStr(ctx, val, "PALETTE", __item);
    }

    // PENDATA
    {
        JSValue __item = JS_NewUint32(ctx, 10);
        JS_SetPropertyStr(ctx, val, "PENDATA", __item);
    }

    // RIFF
    {
        JSValue __item = JS_NewUint32(ctx, 11);
        JS_SetPropertyStr(ctx, val, "RIFF", __item);
    }

    // WAVE
    {
        JSValue __item = JS_NewUint32(ctx, 12);
        JS_SetPropertyStr(ctx, val, "WAVE", __item);
    }

    // UNICODETEXT
    {
        JSValue __item = JS_NewUint32(ctx, 13);
        JS_SetPropertyStr(ctx, val, "UNICODETEXT", __item);
    }

    // ENHMETAFILE
    {
        JSValue __item = JS_NewUint32(ctx, 14);
        JS_SetPropertyStr(ctx, val, "ENHMETAFILE", __item);
    }

    // FILENAME
    {
        JSValue __item = JS_NewUint32(ctx, 15);
        JS_SetPropertyStr(ctx, val, "FILENAME", __item);
    }

    // LOCALE
    {
        JSValue __item = JS_NewUint32(ctx, 16);
        JS_SetPropertyStr(ctx, val, "LOCALE", __item);
    }

    // PRIVATE
    {
        JSValue __item = JS_NewUint32(ctx, 20);
        JS_SetPropertyStr(ctx, val, "PRIVATE", __item);
    }

    // HTML
    {
        JSValue __item = JS_NewUint32(ctx, 30);
        JS_SetPropertyStr(ctx, val, "HTML", __item);
    }

    // MAX
    {
        JSValue __item = JS_NewUint32(ctx, 31);
        JS_SetPropertyStr(ctx, val, "MAX", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "DataFormatId", val);
    assert(status != -1);
}

static void register_enum_Ozone_GeometryCentre(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "GeometryCentre");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // CENTRE
    {
        JSValue __item = JS_NewUint32(ctx, 0x1);
        JS_SetPropertyStr(ctx, val, "CENTRE", __item);
    }

    // CENTER
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "CENTER", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "GeometryCentre", val);
    assert(status != -1);
}

static void register_enum_Ozone_HatchStyle(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "HatchStyle");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // INVALID
    {
        JSValue __item = JS_NewInt32(ctx, -1);
        JS_SetPropertyStr(ctx, val, "INVALID", __item);
    }

    // FIRST
    {
        JSValue __item = JS_NewInt32(ctx, 111);
        JS_SetPropertyStr(ctx, val, "FIRST", __item);
    }

    // BDIAGONAL
    {
        JSValue __item = JS_NewInt32(ctx, 111);
        JS_SetPropertyStr(ctx, val, "BDIAGONAL", __item);
    }

    // CROSSDIAG
    {
        JSValue __item = JS_NewInt32(ctx, 112);
        JS_SetPropertyStr(ctx, val, "CROSSDIAG", __item);
    }

    // FDIAGONAL
    {
        JSValue __item = JS_NewInt32(ctx, 113);
        JS_SetPropertyStr(ctx, val, "FDIAGONAL", __item);
    }

    // CROSS
    {
        JSValue __item = JS_NewInt32(ctx, 114);
        JS_SetPropertyStr(ctx, val, "CROSS", __item);
    }

    // HORIZONTAL
    {
        JSValue __item = JS_NewInt32(ctx, 115);
        JS_SetPropertyStr(ctx, val, "HORIZONTAL", __item);
    }

    // VERTICAL
    {
        JSValue __item = JS_NewInt32(ctx, 116);
        JS_SetPropertyStr(ctx, val, "VERTICAL", __item);
    }

    // LAST
    {
        JSValue __item = JS_NewInt32(ctx, 116);
        JS_SetPropertyStr(ctx, val, "LAST", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "HatchStyle", val);
    assert(status != -1);
}

static void register_enum_Ozone_ItemKind(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "ItemKind");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // SEPARATOR
    {
        JSValue __item = JS_NewInt32(ctx, -1);
        JS_SetPropertyStr(ctx, val, "SEPARATOR", __item);
    }

    // NORMAL
    {
        JSValue __item = JS_NewInt32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "NORMAL", __item);
    }

    // CHECK
    {
        JSValue __item = JS_NewInt32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "CHECK", __item);
    }

    // RADIO
    {
        JSValue __item = JS_NewInt32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "RADIO", __item);
    }

    // DROPDOWN
    {
        JSValue __item = JS_NewInt32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "DROPDOWN", __item);
    }

    // MAX
    {
        JSValue __item = JS_NewInt32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "MAX", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "ItemKind", val);
    assert(status != -1);
}

static void register_enum_Ozone_KeyCode(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "KeyCode");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // NONE
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "NONE", __item);
    }

    // CONTROL_A
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "CONTROL_A", __item);
    }

    // CONTROL_B
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "CONTROL_B", __item);
    }

    // CONTROL_C
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "CONTROL_C", __item);
    }

    // CONTROL_D
    {
        JSValue __item = JS_NewUint32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "CONTROL_D", __item);
    }

    // CONTROL_E
    {
        JSValue __item = JS_NewUint32(ctx, 5);
        JS_SetPropertyStr(ctx, val, "CONTROL_E", __item);
    }

    // CONTROL_F
    {
        JSValue __item = JS_NewUint32(ctx, 6);
        JS_SetPropertyStr(ctx, val, "CONTROL_F", __item);
    }

    // CONTROL_G
    {
        JSValue __item = JS_NewUint32(ctx, 7);
        JS_SetPropertyStr(ctx, val, "CONTROL_G", __item);
    }

    // CONTROL_H
    {
        JSValue __item = JS_NewUint32(ctx, 8);
        JS_SetPropertyStr(ctx, val, "CONTROL_H", __item);
    }

    // CONTROL_I
    {
        JSValue __item = JS_NewUint32(ctx, 9);
        JS_SetPropertyStr(ctx, val, "CONTROL_I", __item);
    }

    // CONTROL_J
    {
        JSValue __item = JS_NewUint32(ctx, 10);
        JS_SetPropertyStr(ctx, val, "CONTROL_J", __item);
    }

    // CONTROL_K
    {
        JSValue __item = JS_NewUint32(ctx, 11);
        JS_SetPropertyStr(ctx, val, "CONTROL_K", __item);
    }

    // CONTROL_L
    {
        JSValue __item = JS_NewUint32(ctx, 12);
        JS_SetPropertyStr(ctx, val, "CONTROL_L", __item);
    }

    // CONTROL_M
    {
        JSValue __item = JS_NewUint32(ctx, 13);
        JS_SetPropertyStr(ctx, val, "CONTROL_M", __item);
    }

    // CONTROL_N
    {
        JSValue __item = JS_NewUint32(ctx, 14);
        JS_SetPropertyStr(ctx, val, "CONTROL_N", __item);
    }

    // CONTROL_O
    {
        JSValue __item = JS_NewUint32(ctx, 15);
        JS_SetPropertyStr(ctx, val, "CONTROL_O", __item);
    }

    // CONTROL_P
    {
        JSValue __item = JS_NewUint32(ctx, 16);
        JS_SetPropertyStr(ctx, val, "CONTROL_P", __item);
    }

    // CONTROL_Q
    {
        JSValue __item = JS_NewUint32(ctx, 17);
        JS_SetPropertyStr(ctx, val, "CONTROL_Q", __item);
    }

    // CONTROL_R
    {
        JSValue __item = JS_NewUint32(ctx, 18);
        JS_SetPropertyStr(ctx, val, "CONTROL_R", __item);
    }

    // CONTROL_S
    {
        JSValue __item = JS_NewUint32(ctx, 19);
        JS_SetPropertyStr(ctx, val, "CONTROL_S", __item);
    }

    // CONTROL_T
    {
        JSValue __item = JS_NewUint32(ctx, 20);
        JS_SetPropertyStr(ctx, val, "CONTROL_T", __item);
    }

    // CONTROL_U
    {
        JSValue __item = JS_NewUint32(ctx, 21);
        JS_SetPropertyStr(ctx, val, "CONTROL_U", __item);
    }

    // CONTROL_V
    {
        JSValue __item = JS_NewUint32(ctx, 22);
        JS_SetPropertyStr(ctx, val, "CONTROL_V", __item);
    }

    // CONTROL_W
    {
        JSValue __item = JS_NewUint32(ctx, 23);
        JS_SetPropertyStr(ctx, val, "CONTROL_W", __item);
    }

    // CONTROL_X
    {
        JSValue __item = JS_NewUint32(ctx, 24);
        JS_SetPropertyStr(ctx, val, "CONTROL_X", __item);
    }

    // CONTROL_Y
    {
        JSValue __item = JS_NewUint32(ctx, 25);
        JS_SetPropertyStr(ctx, val, "CONTROL_Y", __item);
    }

    // CONTROL_Z
    {
        JSValue __item = JS_NewUint32(ctx, 26);
        JS_SetPropertyStr(ctx, val, "CONTROL_Z", __item);
    }

    // BACK
    {
        JSValue __item = JS_NewUint32(ctx, 8);
        JS_SetPropertyStr(ctx, val, "BACK", __item);
    }

    // TAB
    {
        JSValue __item = JS_NewUint32(ctx, 9);
        JS_SetPropertyStr(ctx, val, "TAB", __item);
    }

    // RETURN
    {
        JSValue __item = JS_NewUint32(ctx, 13);
        JS_SetPropertyStr(ctx, val, "RETURN", __item);
    }

    // ESCAPE
    {
        JSValue __item = JS_NewUint32(ctx, 27);
        JS_SetPropertyStr(ctx, val, "ESCAPE", __item);
    }

    // SPACE
    {
        JSValue __item = JS_NewUint32(ctx, 32);
        JS_SetPropertyStr(ctx, val, "SPACE", __item);
    }

    // DELETE
    {
        JSValue __item = JS_NewUint32(ctx, 127);
        JS_SetPropertyStr(ctx, val, "DELETE", __item);
    }

    // START
    {
        JSValue __item = JS_NewUint32(ctx, 300);
        JS_SetPropertyStr(ctx, val, "START", __item);
    }

    // LBUTTON
    {
        JSValue __item = JS_NewUint32(ctx, 301);
        JS_SetPropertyStr(ctx, val, "LBUTTON", __item);
    }

    // RBUTTON
    {
        JSValue __item = JS_NewUint32(ctx, 302);
        JS_SetPropertyStr(ctx, val, "RBUTTON", __item);
    }

    // CANCEL
    {
        JSValue __item = JS_NewUint32(ctx, 303);
        JS_SetPropertyStr(ctx, val, "CANCEL", __item);
    }

    // MBUTTON
    {
        JSValue __item = JS_NewUint32(ctx, 304);
        JS_SetPropertyStr(ctx, val, "MBUTTON", __item);
    }

    // CLEAR
    {
        JSValue __item = JS_NewUint32(ctx, 305);
        JS_SetPropertyStr(ctx, val, "CLEAR", __item);
    }

    // SHIFT
    {
        JSValue __item = JS_NewUint32(ctx, 306);
        JS_SetPropertyStr(ctx, val, "SHIFT", __item);
    }

    // ALT
    {
        JSValue __item = JS_NewUint32(ctx, 307);
        JS_SetPropertyStr(ctx, val, "ALT", __item);
    }

    // CONTROL
    {
        JSValue __item = JS_NewUint32(ctx, 308);
        JS_SetPropertyStr(ctx, val, "CONTROL", __item);
    }

    // MENU
    {
        JSValue __item = JS_NewUint32(ctx, 309);
        JS_SetPropertyStr(ctx, val, "MENU", __item);
    }

    // PAUSE
    {
        JSValue __item = JS_NewUint32(ctx, 310);
        JS_SetPropertyStr(ctx, val, "PAUSE", __item);
    }

    // CAPITAL
    {
        JSValue __item = JS_NewUint32(ctx, 311);
        JS_SetPropertyStr(ctx, val, "CAPITAL", __item);
    }

    // END
    {
        JSValue __item = JS_NewUint32(ctx, 312);
        JS_SetPropertyStr(ctx, val, "END", __item);
    }

    // HOME
    {
        JSValue __item = JS_NewUint32(ctx, 313);
        JS_SetPropertyStr(ctx, val, "HOME", __item);
    }

    // LEFT
    {
        JSValue __item = JS_NewUint32(ctx, 314);
        JS_SetPropertyStr(ctx, val, "LEFT", __item);
    }

    // UP
    {
        JSValue __item = JS_NewUint32(ctx, 315);
        JS_SetPropertyStr(ctx, val, "UP", __item);
    }

    // RIGHT
    {
        JSValue __item = JS_NewUint32(ctx, 316);
        JS_SetPropertyStr(ctx, val, "RIGHT", __item);
    }

    // DOWN
    {
        JSValue __item = JS_NewUint32(ctx, 317);
        JS_SetPropertyStr(ctx, val, "DOWN", __item);
    }

    // SELECT
    {
        JSValue __item = JS_NewUint32(ctx, 318);
        JS_SetPropertyStr(ctx, val, "SELECT", __item);
    }

    // PRINT
    {
        JSValue __item = JS_NewUint32(ctx, 319);
        JS_SetPropertyStr(ctx, val, "PRINT", __item);
    }

    // EXECUTE
    {
        JSValue __item = JS_NewUint32(ctx, 320);
        JS_SetPropertyStr(ctx, val, "EXECUTE", __item);
    }

    // SNAPSHOT
    {
        JSValue __item = JS_NewUint32(ctx, 321);
        JS_SetPropertyStr(ctx, val, "SNAPSHOT", __item);
    }

    // INSERT
    {
        JSValue __item = JS_NewUint32(ctx, 322);
        JS_SetPropertyStr(ctx, val, "INSERT", __item);
    }

    // HELP
    {
        JSValue __item = JS_NewUint32(ctx, 323);
        JS_SetPropertyStr(ctx, val, "HELP", __item);
    }

    // NUMPAD0
    {
        JSValue __item = JS_NewUint32(ctx, 324);
        JS_SetPropertyStr(ctx, val, "NUMPAD0", __item);
    }

    // NUMPAD1
    {
        JSValue __item = JS_NewUint32(ctx, 325);
        JS_SetPropertyStr(ctx, val, "NUMPAD1", __item);
    }

    // NUMPAD2
    {
        JSValue __item = JS_NewUint32(ctx, 326);
        JS_SetPropertyStr(ctx, val, "NUMPAD2", __item);
    }

    // NUMPAD3
    {
        JSValue __item = JS_NewUint32(ctx, 327);
        JS_SetPropertyStr(ctx, val, "NUMPAD3", __item);
    }

    // NUMPAD4
    {
        JSValue __item = JS_NewUint32(ctx, 328);
        JS_SetPropertyStr(ctx, val, "NUMPAD4", __item);
    }

    // NUMPAD5
    {
        JSValue __item = JS_NewUint32(ctx, 329);
        JS_SetPropertyStr(ctx, val, "NUMPAD5", __item);
    }

    // NUMPAD6
    {
        JSValue __item = JS_NewUint32(ctx, 330);
        JS_SetPropertyStr(ctx, val, "NUMPAD6", __item);
    }

    // NUMPAD7
    {
        JSValue __item = JS_NewUint32(ctx, 331);
        JS_SetPropertyStr(ctx, val, "NUMPAD7", __item);
    }

    // NUMPAD8
    {
        JSValue __item = JS_NewUint32(ctx, 332);
        JS_SetPropertyStr(ctx, val, "NUMPAD8", __item);
    }

    // NUMPAD9
    {
        JSValue __item = JS_NewUint32(ctx, 333);
        JS_SetPropertyStr(ctx, val, "NUMPAD9", __item);
    }

    // MULTIPLY
    {
        JSValue __item = JS_NewUint32(ctx, 334);
        JS_SetPropertyStr(ctx, val, "MULTIPLY", __item);
    }

    // ADD
    {
        JSValue __item = JS_NewUint32(ctx, 335);
        JS_SetPropertyStr(ctx, val, "ADD", __item);
    }

    // SEPARATOR
    {
        JSValue __item = JS_NewUint32(ctx, 336);
        JS_SetPropertyStr(ctx, val, "SEPARATOR", __item);
    }

    // SUBTRACT
    {
        JSValue __item = JS_NewUint32(ctx, 337);
        JS_SetPropertyStr(ctx, val, "SUBTRACT", __item);
    }

    // DECIMAL
    {
        JSValue __item = JS_NewUint32(ctx, 338);
        JS_SetPropertyStr(ctx, val, "DECIMAL", __item);
    }

    // DIVIDE
    {
        JSValue __item = JS_NewUint32(ctx, 339);
        JS_SetPropertyStr(ctx, val, "DIVIDE", __item);
    }

    // F1
    {
        JSValue __item = JS_NewUint32(ctx, 340);
        JS_SetPropertyStr(ctx, val, "F1", __item);
    }

    // F2
    {
        JSValue __item = JS_NewUint32(ctx, 341);
        JS_SetPropertyStr(ctx, val, "F2", __item);
    }

    // F3
    {
        JSValue __item = JS_NewUint32(ctx, 342);
        JS_SetPropertyStr(ctx, val, "F3", __item);
    }

    // F4
    {
        JSValue __item = JS_NewUint32(ctx, 343);
        JS_SetPropertyStr(ctx, val, "F4", __item);
    }

    // F5
    {
        JSValue __item = JS_NewUint32(ctx, 344);
        JS_SetPropertyStr(ctx, val, "F5", __item);
    }

    // F6
    {
        JSValue __item = JS_NewUint32(ctx, 345);
        JS_SetPropertyStr(ctx, val, "F6", __item);
    }

    // F7
    {
        JSValue __item = JS_NewUint32(ctx, 346);
        JS_SetPropertyStr(ctx, val, "F7", __item);
    }

    // F8
    {
        JSValue __item = JS_NewUint32(ctx, 347);
        JS_SetPropertyStr(ctx, val, "F8", __item);
    }

    // F9
    {
        JSValue __item = JS_NewUint32(ctx, 348);
        JS_SetPropertyStr(ctx, val, "F9", __item);
    }

    // F10
    {
        JSValue __item = JS_NewUint32(ctx, 349);
        JS_SetPropertyStr(ctx, val, "F10", __item);
    }

    // F11
    {
        JSValue __item = JS_NewUint32(ctx, 350);
        JS_SetPropertyStr(ctx, val, "F11", __item);
    }

    // F12
    {
        JSValue __item = JS_NewUint32(ctx, 351);
        JS_SetPropertyStr(ctx, val, "F12", __item);
    }

    // F13
    {
        JSValue __item = JS_NewUint32(ctx, 352);
        JS_SetPropertyStr(ctx, val, "F13", __item);
    }

    // F14
    {
        JSValue __item = JS_NewUint32(ctx, 353);
        JS_SetPropertyStr(ctx, val, "F14", __item);
    }

    // F15
    {
        JSValue __item = JS_NewUint32(ctx, 354);
        JS_SetPropertyStr(ctx, val, "F15", __item);
    }

    // F16
    {
        JSValue __item = JS_NewUint32(ctx, 355);
        JS_SetPropertyStr(ctx, val, "F16", __item);
    }

    // F17
    {
        JSValue __item = JS_NewUint32(ctx, 356);
        JS_SetPropertyStr(ctx, val, "F17", __item);
    }

    // F18
    {
        JSValue __item = JS_NewUint32(ctx, 357);
        JS_SetPropertyStr(ctx, val, "F18", __item);
    }

    // F19
    {
        JSValue __item = JS_NewUint32(ctx, 358);
        JS_SetPropertyStr(ctx, val, "F19", __item);
    }

    // F20
    {
        JSValue __item = JS_NewUint32(ctx, 359);
        JS_SetPropertyStr(ctx, val, "F20", __item);
    }

    // F21
    {
        JSValue __item = JS_NewUint32(ctx, 360);
        JS_SetPropertyStr(ctx, val, "F21", __item);
    }

    // F22
    {
        JSValue __item = JS_NewUint32(ctx, 361);
        JS_SetPropertyStr(ctx, val, "F22", __item);
    }

    // F23
    {
        JSValue __item = JS_NewUint32(ctx, 362);
        JS_SetPropertyStr(ctx, val, "F23", __item);
    }

    // F24
    {
        JSValue __item = JS_NewUint32(ctx, 363);
        JS_SetPropertyStr(ctx, val, "F24", __item);
    }

    // NUMLOCK
    {
        JSValue __item = JS_NewUint32(ctx, 364);
        JS_SetPropertyStr(ctx, val, "NUMLOCK", __item);
    }

    // SCROLL
    {
        JSValue __item = JS_NewUint32(ctx, 365);
        JS_SetPropertyStr(ctx, val, "SCROLL", __item);
    }

    // PAGEUP
    {
        JSValue __item = JS_NewUint32(ctx, 366);
        JS_SetPropertyStr(ctx, val, "PAGEUP", __item);
    }

    // PAGEDOWN
    {
        JSValue __item = JS_NewUint32(ctx, 367);
        JS_SetPropertyStr(ctx, val, "PAGEDOWN", __item);
    }

    // NUMPAD_SPACE
    {
        JSValue __item = JS_NewUint32(ctx, 368);
        JS_SetPropertyStr(ctx, val, "NUMPAD_SPACE", __item);
    }

    // NUMPAD_TAB
    {
        JSValue __item = JS_NewUint32(ctx, 369);
        JS_SetPropertyStr(ctx, val, "NUMPAD_TAB", __item);
    }

    // NUMPAD_ENTER
    {
        JSValue __item = JS_NewUint32(ctx, 370);
        JS_SetPropertyStr(ctx, val, "NUMPAD_ENTER", __item);
    }

    // NUMPAD_F1
    {
        JSValue __item = JS_NewUint32(ctx, 371);
        JS_SetPropertyStr(ctx, val, "NUMPAD_F1", __item);
    }

    // NUMPAD_F2
    {
        JSValue __item = JS_NewUint32(ctx, 372);
        JS_SetPropertyStr(ctx, val, "NUMPAD_F2", __item);
    }

    // NUMPAD_F3
    {
        JSValue __item = JS_NewUint32(ctx, 373);
        JS_SetPropertyStr(ctx, val, "NUMPAD_F3", __item);
    }

    // NUMPAD_F4
    {
        JSValue __item = JS_NewUint32(ctx, 374);
        JS_SetPropertyStr(ctx, val, "NUMPAD_F4", __item);
    }

    // NUMPAD_HOME
    {
        JSValue __item = JS_NewUint32(ctx, 375);
        JS_SetPropertyStr(ctx, val, "NUMPAD_HOME", __item);
    }

    // NUMPAD_LEFT
    {
        JSValue __item = JS_NewUint32(ctx, 376);
        JS_SetPropertyStr(ctx, val, "NUMPAD_LEFT", __item);
    }

    // NUMPAD_UP
    {
        JSValue __item = JS_NewUint32(ctx, 377);
        JS_SetPropertyStr(ctx, val, "NUMPAD_UP", __item);
    }

    // NUMPAD_RIGHT
    {
        JSValue __item = JS_NewUint32(ctx, 378);
        JS_SetPropertyStr(ctx, val, "NUMPAD_RIGHT", __item);
    }

    // NUMPAD_DOWN
    {
        JSValue __item = JS_NewUint32(ctx, 379);
        JS_SetPropertyStr(ctx, val, "NUMPAD_DOWN", __item);
    }

    // NUMPAD_PAGEUP
    {
        JSValue __item = JS_NewUint32(ctx, 380);
        JS_SetPropertyStr(ctx, val, "NUMPAD_PAGEUP", __item);
    }

    // NUMPAD_PAGEDOWN
    {
        JSValue __item = JS_NewUint32(ctx, 381);
        JS_SetPropertyStr(ctx, val, "NUMPAD_PAGEDOWN", __item);
    }

    // NUMPAD_END
    {
        JSValue __item = JS_NewUint32(ctx, 382);
        JS_SetPropertyStr(ctx, val, "NUMPAD_END", __item);
    }

    // NUMPAD_BEGIN
    {
        JSValue __item = JS_NewUint32(ctx, 383);
        JS_SetPropertyStr(ctx, val, "NUMPAD_BEGIN", __item);
    }

    // NUMPAD_INSERT
    {
        JSValue __item = JS_NewUint32(ctx, 384);
        JS_SetPropertyStr(ctx, val, "NUMPAD_INSERT", __item);
    }

    // NUMPAD_DELETE
    {
        JSValue __item = JS_NewUint32(ctx, 385);
        JS_SetPropertyStr(ctx, val, "NUMPAD_DELETE", __item);
    }

    // NUMPAD_EQUAL
    {
        JSValue __item = JS_NewUint32(ctx, 386);
        JS_SetPropertyStr(ctx, val, "NUMPAD_EQUAL", __item);
    }

    // NUMPAD_MULTIPLY
    {
        JSValue __item = JS_NewUint32(ctx, 387);
        JS_SetPropertyStr(ctx, val, "NUMPAD_MULTIPLY", __item);
    }

    // NUMPAD_ADD
    {
        JSValue __item = JS_NewUint32(ctx, 388);
        JS_SetPropertyStr(ctx, val, "NUMPAD_ADD", __item);
    }

    // NUMPAD_SEPARATOR
    {
        JSValue __item = JS_NewUint32(ctx, 389);
        JS_SetPropertyStr(ctx, val, "NUMPAD_SEPARATOR", __item);
    }

    // NUMPAD_SUBTRACT
    {
        JSValue __item = JS_NewUint32(ctx, 390);
        JS_SetPropertyStr(ctx, val, "NUMPAD_SUBTRACT", __item);
    }

    // NUMPAD_DECIMAL
    {
        JSValue __item = JS_NewUint32(ctx, 391);
        JS_SetPropertyStr(ctx, val, "NUMPAD_DECIMAL", __item);
    }

    // NUMPAD_DIVIDE
    {
        JSValue __item = JS_NewUint32(ctx, 392);
        JS_SetPropertyStr(ctx, val, "NUMPAD_DIVIDE", __item);
    }

    // WINDOWS_LEFT
    {
        JSValue __item = JS_NewUint32(ctx, 393);
        JS_SetPropertyStr(ctx, val, "WINDOWS_LEFT", __item);
    }

    // WINDOWS_RIGHT
    {
        JSValue __item = JS_NewUint32(ctx, 394);
        JS_SetPropertyStr(ctx, val, "WINDOWS_RIGHT", __item);
    }

    // WINDOWS_MENU
    {
        JSValue __item = JS_NewUint32(ctx, 395);
        JS_SetPropertyStr(ctx, val, "WINDOWS_MENU", __item);
    }

    // RAW_CONTROL
    {
        JSValue __item = JS_NewUint32(ctx, 308);
        JS_SetPropertyStr(ctx, val, "RAW_CONTROL", __item);
    }

    // COMMAND
    {
        JSValue __item = JS_NewUint32(ctx, 308);
        JS_SetPropertyStr(ctx, val, "COMMAND", __item);
    }

    // SPECIAL1
    {
        JSValue __item = JS_NewUint32(ctx, 397);
        JS_SetPropertyStr(ctx, val, "SPECIAL1", __item);
    }

    // SPECIAL2
    {
        JSValue __item = JS_NewUint32(ctx, 398);
        JS_SetPropertyStr(ctx, val, "SPECIAL2", __item);
    }

    // SPECIAL3
    {
        JSValue __item = JS_NewUint32(ctx, 399);
        JS_SetPropertyStr(ctx, val, "SPECIAL3", __item);
    }

    // SPECIAL4
    {
        JSValue __item = JS_NewUint32(ctx, 400);
        JS_SetPropertyStr(ctx, val, "SPECIAL4", __item);
    }

    // SPECIAL5
    {
        JSValue __item = JS_NewUint32(ctx, 401);
        JS_SetPropertyStr(ctx, val, "SPECIAL5", __item);
    }

    // SPECIAL6
    {
        JSValue __item = JS_NewUint32(ctx, 402);
        JS_SetPropertyStr(ctx, val, "SPECIAL6", __item);
    }

    // SPECIAL7
    {
        JSValue __item = JS_NewUint32(ctx, 403);
        JS_SetPropertyStr(ctx, val, "SPECIAL7", __item);
    }

    // SPECIAL8
    {
        JSValue __item = JS_NewUint32(ctx, 404);
        JS_SetPropertyStr(ctx, val, "SPECIAL8", __item);
    }

    // SPECIAL9
    {
        JSValue __item = JS_NewUint32(ctx, 405);
        JS_SetPropertyStr(ctx, val, "SPECIAL9", __item);
    }

    // SPECIAL10
    {
        JSValue __item = JS_NewUint32(ctx, 406);
        JS_SetPropertyStr(ctx, val, "SPECIAL10", __item);
    }

    // SPECIAL11
    {
        JSValue __item = JS_NewUint32(ctx, 407);
        JS_SetPropertyStr(ctx, val, "SPECIAL11", __item);
    }

    // SPECIAL12
    {
        JSValue __item = JS_NewUint32(ctx, 408);
        JS_SetPropertyStr(ctx, val, "SPECIAL12", __item);
    }

    // SPECIAL13
    {
        JSValue __item = JS_NewUint32(ctx, 409);
        JS_SetPropertyStr(ctx, val, "SPECIAL13", __item);
    }

    // SPECIAL14
    {
        JSValue __item = JS_NewUint32(ctx, 410);
        JS_SetPropertyStr(ctx, val, "SPECIAL14", __item);
    }

    // SPECIAL15
    {
        JSValue __item = JS_NewUint32(ctx, 411);
        JS_SetPropertyStr(ctx, val, "SPECIAL15", __item);
    }

    // SPECIAL16
    {
        JSValue __item = JS_NewUint32(ctx, 412);
        JS_SetPropertyStr(ctx, val, "SPECIAL16", __item);
    }

    // SPECIAL17
    {
        JSValue __item = JS_NewUint32(ctx, 413);
        JS_SetPropertyStr(ctx, val, "SPECIAL17", __item);
    }

    // SPECIAL18
    {
        JSValue __item = JS_NewUint32(ctx, 414);
        JS_SetPropertyStr(ctx, val, "SPECIAL18", __item);
    }

    // SPECIAL19
    {
        JSValue __item = JS_NewUint32(ctx, 415);
        JS_SetPropertyStr(ctx, val, "SPECIAL19", __item);
    }

    // SPECIAL20
    {
        JSValue __item = JS_NewUint32(ctx, 416);
        JS_SetPropertyStr(ctx, val, "SPECIAL20", __item);
    }

    // BROWSER_BACK
    {
        JSValue __item = JS_NewUint32(ctx, 417);
        JS_SetPropertyStr(ctx, val, "BROWSER_BACK", __item);
    }

    // BROWSER_FORWARD
    {
        JSValue __item = JS_NewUint32(ctx, 418);
        JS_SetPropertyStr(ctx, val, "BROWSER_FORWARD", __item);
    }

    // BROWSER_REFRESH
    {
        JSValue __item = JS_NewUint32(ctx, 419);
        JS_SetPropertyStr(ctx, val, "BROWSER_REFRESH", __item);
    }

    // BROWSER_STOP
    {
        JSValue __item = JS_NewUint32(ctx, 420);
        JS_SetPropertyStr(ctx, val, "BROWSER_STOP", __item);
    }

    // BROWSER_SEARCH
    {
        JSValue __item = JS_NewUint32(ctx, 421);
        JS_SetPropertyStr(ctx, val, "BROWSER_SEARCH", __item);
    }

    // BROWSER_FAVORITES
    {
        JSValue __item = JS_NewUint32(ctx, 422);
        JS_SetPropertyStr(ctx, val, "BROWSER_FAVORITES", __item);
    }

    // BROWSER_HOME
    {
        JSValue __item = JS_NewUint32(ctx, 423);
        JS_SetPropertyStr(ctx, val, "BROWSER_HOME", __item);
    }

    // VOLUME_MUTE
    {
        JSValue __item = JS_NewUint32(ctx, 424);
        JS_SetPropertyStr(ctx, val, "VOLUME_MUTE", __item);
    }

    // VOLUME_DOWN
    {
        JSValue __item = JS_NewUint32(ctx, 425);
        JS_SetPropertyStr(ctx, val, "VOLUME_DOWN", __item);
    }

    // VOLUME_UP
    {
        JSValue __item = JS_NewUint32(ctx, 426);
        JS_SetPropertyStr(ctx, val, "VOLUME_UP", __item);
    }

    // MEDIA_NEXT_TRACK
    {
        JSValue __item = JS_NewUint32(ctx, 427);
        JS_SetPropertyStr(ctx, val, "MEDIA_NEXT_TRACK", __item);
    }

    // MEDIA_PREV_TRACK
    {
        JSValue __item = JS_NewUint32(ctx, 428);
        JS_SetPropertyStr(ctx, val, "MEDIA_PREV_TRACK", __item);
    }

    // MEDIA_STOP
    {
        JSValue __item = JS_NewUint32(ctx, 429);
        JS_SetPropertyStr(ctx, val, "MEDIA_STOP", __item);
    }

    // MEDIA_PLAY_PAUSE
    {
        JSValue __item = JS_NewUint32(ctx, 430);
        JS_SetPropertyStr(ctx, val, "MEDIA_PLAY_PAUSE", __item);
    }

    // LAUNCH_MAIL
    {
        JSValue __item = JS_NewUint32(ctx, 431);
        JS_SetPropertyStr(ctx, val, "LAUNCH_MAIL", __item);
    }

    // LAUNCH_APP1
    {
        JSValue __item = JS_NewUint32(ctx, 432);
        JS_SetPropertyStr(ctx, val, "LAUNCH_APP1", __item);
    }

    // LAUNCH_APP2
    {
        JSValue __item = JS_NewUint32(ctx, 433);
        JS_SetPropertyStr(ctx, val, "LAUNCH_APP2", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "KeyCode", val);
    assert(status != -1);
}

static void register_enum_Ozone_KeyModifier(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "KeyModifier");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // NONE
    {
        JSValue __item = JS_NewUint32(ctx, 0x0);
        JS_SetPropertyStr(ctx, val, "NONE", __item);
    }

    // ALT
    {
        JSValue __item = JS_NewUint32(ctx, 0x1);
        JS_SetPropertyStr(ctx, val, "ALT", __item);
    }

    // CONTROL
    {
        JSValue __item = JS_NewUint32(ctx, 0x2);
        JS_SetPropertyStr(ctx, val, "CONTROL", __item);
    }

    // ALTGR
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "ALTGR", __item);
    }

    // SHIFT
    {
        JSValue __item = JS_NewUint32(ctx, 0x4);
        JS_SetPropertyStr(ctx, val, "SHIFT", __item);
    }

    // META
    {
        JSValue __item = JS_NewUint32(ctx, 0x8);
        JS_SetPropertyStr(ctx, val, "META", __item);
    }

    // WIN
    {
        JSValue __item = JS_NewUint32(ctx, 8);
        JS_SetPropertyStr(ctx, val, "WIN", __item);
    }

    // RAW_CONTROL
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "RAW_CONTROL", __item);
    }

    // CMD
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "CMD", __item);
    }

    // ALL
    {
        JSValue __item = JS_NewUint32(ctx, 0xffff);
        JS_SetPropertyStr(ctx, val, "ALL", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "KeyModifier", val);
    assert(status != -1);
}

static void register_enum_Ozone_SizerFlagBits(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "SizerFlagBits");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // FIXED_MINSIZE
    {
        JSValue __item = JS_NewUint32(ctx, 0x8000);
        JS_SetPropertyStr(ctx, val, "FIXED_MINSIZE", __item);
    }

    // RESERVE_SPACE_EVEN_IF_HIDDEN
    {
        JSValue __item = JS_NewUint32(ctx, 0x2);
        JS_SetPropertyStr(ctx, val, "RESERVE_SPACE_EVEN_IF_HIDDEN", __item);
    }

    // SIZER_FLAG_BITS_MASK
    {
        JSValue __item = JS_NewUint32(ctx, 0x8002);
        JS_SetPropertyStr(ctx, val, "SIZER_FLAG_BITS_MASK", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "SizerFlagBits", val);
    assert(status != -1);
}

static void register_enum_Ozone_StandardID(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "StandardID");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // AUTO_LOWEST
    {
        JSValue __item = JS_NewInt32(ctx, -1000000);
        JS_SetPropertyStr(ctx, val, "AUTO_LOWEST", __item);
    }

    // AUTO_HIGHEST
    {
        JSValue __item = JS_NewInt32(ctx, -2000);
        JS_SetPropertyStr(ctx, val, "AUTO_HIGHEST", __item);
    }

    // NONE
    {
        JSValue __item = JS_NewInt32(ctx, -3);
        JS_SetPropertyStr(ctx, val, "NONE", __item);
    }

    // SEPARATOR
    {
        JSValue __item = JS_NewInt32(ctx, -2);
        JS_SetPropertyStr(ctx, val, "SEPARATOR", __item);
    }

    // ANY
    {
        JSValue __item = JS_NewInt32(ctx, -1);
        JS_SetPropertyStr(ctx, val, "ANY", __item);
    }

    // LOWEST
    {
        JSValue __item = JS_NewInt32(ctx, 4999);
        JS_SetPropertyStr(ctx, val, "LOWEST", __item);
    }

    // OPEN
    {
        JSValue __item = JS_NewInt32(ctx, 5000);
        JS_SetPropertyStr(ctx, val, "OPEN", __item);
    }

    // CLOSE
    {
        JSValue __item = JS_NewInt32(ctx, 5001);
        JS_SetPropertyStr(ctx, val, "CLOSE", __item);
    }

    // NEW
    {
        JSValue __item = JS_NewInt32(ctx, 5002);
        JS_SetPropertyStr(ctx, val, "NEW", __item);
    }

    // SAVE
    {
        JSValue __item = JS_NewInt32(ctx, 5003);
        JS_SetPropertyStr(ctx, val, "SAVE", __item);
    }

    // SAVEAS
    {
        JSValue __item = JS_NewInt32(ctx, 5004);
        JS_SetPropertyStr(ctx, val, "SAVEAS", __item);
    }

    // REVERT
    {
        JSValue __item = JS_NewInt32(ctx, 5005);
        JS_SetPropertyStr(ctx, val, "REVERT", __item);
    }

    // EXIT
    {
        JSValue __item = JS_NewInt32(ctx, 5006);
        JS_SetPropertyStr(ctx, val, "EXIT", __item);
    }

    // UNDO
    {
        JSValue __item = JS_NewInt32(ctx, 5007);
        JS_SetPropertyStr(ctx, val, "UNDO", __item);
    }

    // REDO
    {
        JSValue __item = JS_NewInt32(ctx, 5008);
        JS_SetPropertyStr(ctx, val, "REDO", __item);
    }

    // HELP
    {
        JSValue __item = JS_NewInt32(ctx, 5009);
        JS_SetPropertyStr(ctx, val, "HELP", __item);
    }

    // PRINT
    {
        JSValue __item = JS_NewInt32(ctx, 5010);
        JS_SetPropertyStr(ctx, val, "PRINT", __item);
    }

    // PRINT_SETUP
    {
        JSValue __item = JS_NewInt32(ctx, 5011);
        JS_SetPropertyStr(ctx, val, "PRINT_SETUP", __item);
    }

    // PAGE_SETUP
    {
        JSValue __item = JS_NewInt32(ctx, 5012);
        JS_SetPropertyStr(ctx, val, "PAGE_SETUP", __item);
    }

    // PREVIEW
    {
        JSValue __item = JS_NewInt32(ctx, 5013);
        JS_SetPropertyStr(ctx, val, "PREVIEW", __item);
    }

    // ABOUT
    {
        JSValue __item = JS_NewInt32(ctx, 5014);
        JS_SetPropertyStr(ctx, val, "ABOUT", __item);
    }

    // HELP_CONTENTS
    {
        JSValue __item = JS_NewInt32(ctx, 5015);
        JS_SetPropertyStr(ctx, val, "HELP_CONTENTS", __item);
    }

    // HELP_INDEX
    {
        JSValue __item = JS_NewInt32(ctx, 5016);
        JS_SetPropertyStr(ctx, val, "HELP_INDEX", __item);
    }

    // HELP_SEARCH
    {
        JSValue __item = JS_NewInt32(ctx, 5017);
        JS_SetPropertyStr(ctx, val, "HELP_SEARCH", __item);
    }

    // HELP_COMMANDS
    {
        JSValue __item = JS_NewInt32(ctx, 5018);
        JS_SetPropertyStr(ctx, val, "HELP_COMMANDS", __item);
    }

    // HELP_PROCEDURES
    {
        JSValue __item = JS_NewInt32(ctx, 5019);
        JS_SetPropertyStr(ctx, val, "HELP_PROCEDURES", __item);
    }

    // HELP_CONTEXT
    {
        JSValue __item = JS_NewInt32(ctx, 5020);
        JS_SetPropertyStr(ctx, val, "HELP_CONTEXT", __item);
    }

    // CLOSE_ALL
    {
        JSValue __item = JS_NewInt32(ctx, 5021);
        JS_SetPropertyStr(ctx, val, "CLOSE_ALL", __item);
    }

    // PREFERENCES
    {
        JSValue __item = JS_NewInt32(ctx, 5022);
        JS_SetPropertyStr(ctx, val, "PREFERENCES", __item);
    }

    // EDIT
    {
        JSValue __item = JS_NewInt32(ctx, 5030);
        JS_SetPropertyStr(ctx, val, "EDIT", __item);
    }

    // CUT
    {
        JSValue __item = JS_NewInt32(ctx, 5031);
        JS_SetPropertyStr(ctx, val, "CUT", __item);
    }

    // COPY
    {
        JSValue __item = JS_NewInt32(ctx, 5032);
        JS_SetPropertyStr(ctx, val, "COPY", __item);
    }

    // PASTE
    {
        JSValue __item = JS_NewInt32(ctx, 5033);
        JS_SetPropertyStr(ctx, val, "PASTE", __item);
    }

    // CLEAR
    {
        JSValue __item = JS_NewInt32(ctx, 5034);
        JS_SetPropertyStr(ctx, val, "CLEAR", __item);
    }

    // FIND
    {
        JSValue __item = JS_NewInt32(ctx, 5035);
        JS_SetPropertyStr(ctx, val, "FIND", __item);
    }

    // DUPLICATE
    {
        JSValue __item = JS_NewInt32(ctx, 5036);
        JS_SetPropertyStr(ctx, val, "DUPLICATE", __item);
    }

    // SELECTALL
    {
        JSValue __item = JS_NewInt32(ctx, 5037);
        JS_SetPropertyStr(ctx, val, "SELECTALL", __item);
    }

    // DELETE
    {
        JSValue __item = JS_NewInt32(ctx, 5038);
        JS_SetPropertyStr(ctx, val, "DELETE", __item);
    }

    // REPLACE
    {
        JSValue __item = JS_NewInt32(ctx, 5039);
        JS_SetPropertyStr(ctx, val, "REPLACE", __item);
    }

    // REPLACE_ALL
    {
        JSValue __item = JS_NewInt32(ctx, 5040);
        JS_SetPropertyStr(ctx, val, "REPLACE_ALL", __item);
    }

    // PROPERTIES
    {
        JSValue __item = JS_NewInt32(ctx, 5041);
        JS_SetPropertyStr(ctx, val, "PROPERTIES", __item);
    }

    // VIEW_DETAILS
    {
        JSValue __item = JS_NewInt32(ctx, 5042);
        JS_SetPropertyStr(ctx, val, "VIEW_DETAILS", __item);
    }

    // VIEW_LARGEICONS
    {
        JSValue __item = JS_NewInt32(ctx, 5043);
        JS_SetPropertyStr(ctx, val, "VIEW_LARGEICONS", __item);
    }

    // VIEW_SMALLICONS
    {
        JSValue __item = JS_NewInt32(ctx, 5044);
        JS_SetPropertyStr(ctx, val, "VIEW_SMALLICONS", __item);
    }

    // VIEW_LIST
    {
        JSValue __item = JS_NewInt32(ctx, 5045);
        JS_SetPropertyStr(ctx, val, "VIEW_LIST", __item);
    }

    // VIEW_SORTDATE
    {
        JSValue __item = JS_NewInt32(ctx, 5046);
        JS_SetPropertyStr(ctx, val, "VIEW_SORTDATE", __item);
    }

    // VIEW_SORTNAME
    {
        JSValue __item = JS_NewInt32(ctx, 5047);
        JS_SetPropertyStr(ctx, val, "VIEW_SORTNAME", __item);
    }

    // VIEW_SORTSIZE
    {
        JSValue __item = JS_NewInt32(ctx, 5048);
        JS_SetPropertyStr(ctx, val, "VIEW_SORTSIZE", __item);
    }

    // VIEW_SORTTYPE
    {
        JSValue __item = JS_NewInt32(ctx, 5049);
        JS_SetPropertyStr(ctx, val, "VIEW_SORTTYPE", __item);
    }

    // FILE
    {
        JSValue __item = JS_NewInt32(ctx, 5050);
        JS_SetPropertyStr(ctx, val, "FILE", __item);
    }

    // FILE1
    {
        JSValue __item = JS_NewInt32(ctx, 5051);
        JS_SetPropertyStr(ctx, val, "FILE1", __item);
    }

    // FILE2
    {
        JSValue __item = JS_NewInt32(ctx, 5052);
        JS_SetPropertyStr(ctx, val, "FILE2", __item);
    }

    // FILE3
    {
        JSValue __item = JS_NewInt32(ctx, 5053);
        JS_SetPropertyStr(ctx, val, "FILE3", __item);
    }

    // FILE4
    {
        JSValue __item = JS_NewInt32(ctx, 5054);
        JS_SetPropertyStr(ctx, val, "FILE4", __item);
    }

    // FILE5
    {
        JSValue __item = JS_NewInt32(ctx, 5055);
        JS_SetPropertyStr(ctx, val, "FILE5", __item);
    }

    // FILE6
    {
        JSValue __item = JS_NewInt32(ctx, 5056);
        JS_SetPropertyStr(ctx, val, "FILE6", __item);
    }

    // FILE7
    {
        JSValue __item = JS_NewInt32(ctx, 5057);
        JS_SetPropertyStr(ctx, val, "FILE7", __item);
    }

    // FILE8
    {
        JSValue __item = JS_NewInt32(ctx, 5058);
        JS_SetPropertyStr(ctx, val, "FILE8", __item);
    }

    // FILE9
    {
        JSValue __item = JS_NewInt32(ctx, 5059);
        JS_SetPropertyStr(ctx, val, "FILE9", __item);
    }

    // OK
    {
        JSValue __item = JS_NewInt32(ctx, 5100);
        JS_SetPropertyStr(ctx, val, "OK", __item);
    }

    // CANCEL
    {
        JSValue __item = JS_NewInt32(ctx, 5101);
        JS_SetPropertyStr(ctx, val, "CANCEL", __item);
    }

    // APPLY
    {
        JSValue __item = JS_NewInt32(ctx, 5102);
        JS_SetPropertyStr(ctx, val, "APPLY", __item);
    }

    // YES
    {
        JSValue __item = JS_NewInt32(ctx, 5103);
        JS_SetPropertyStr(ctx, val, "YES", __item);
    }

    // NO
    {
        JSValue __item = JS_NewInt32(ctx, 5104);
        JS_SetPropertyStr(ctx, val, "NO", __item);
    }

    // STATIC
    {
        JSValue __item = JS_NewInt32(ctx, 5105);
        JS_SetPropertyStr(ctx, val, "STATIC", __item);
    }

    // FORWARD
    {
        JSValue __item = JS_NewInt32(ctx, 5106);
        JS_SetPropertyStr(ctx, val, "FORWARD", __item);
    }

    // BACKWARD
    {
        JSValue __item = JS_NewInt32(ctx, 5107);
        JS_SetPropertyStr(ctx, val, "BACKWARD", __item);
    }

    // DEFAULT
    {
        JSValue __item = JS_NewInt32(ctx, 5108);
        JS_SetPropertyStr(ctx, val, "DEFAULT", __item);
    }

    // MORE
    {
        JSValue __item = JS_NewInt32(ctx, 5109);
        JS_SetPropertyStr(ctx, val, "MORE", __item);
    }

    // SETUP
    {
        JSValue __item = JS_NewInt32(ctx, 5110);
        JS_SetPropertyStr(ctx, val, "SETUP", __item);
    }

    // RESET
    {
        JSValue __item = JS_NewInt32(ctx, 5111);
        JS_SetPropertyStr(ctx, val, "RESET", __item);
    }

    // CONTEXT_HELP
    {
        JSValue __item = JS_NewInt32(ctx, 5112);
        JS_SetPropertyStr(ctx, val, "CONTEXT_HELP", __item);
    }

    // YESTOALL
    {
        JSValue __item = JS_NewInt32(ctx, 5113);
        JS_SetPropertyStr(ctx, val, "YESTOALL", __item);
    }

    // NOTOALL
    {
        JSValue __item = JS_NewInt32(ctx, 5114);
        JS_SetPropertyStr(ctx, val, "NOTOALL", __item);
    }

    // ABORT
    {
        JSValue __item = JS_NewInt32(ctx, 5115);
        JS_SetPropertyStr(ctx, val, "ABORT", __item);
    }

    // RETRY
    {
        JSValue __item = JS_NewInt32(ctx, 5116);
        JS_SetPropertyStr(ctx, val, "RETRY", __item);
    }

    // IGNORE
    {
        JSValue __item = JS_NewInt32(ctx, 5117);
        JS_SetPropertyStr(ctx, val, "IGNORE", __item);
    }

    // ADD
    {
        JSValue __item = JS_NewInt32(ctx, 5118);
        JS_SetPropertyStr(ctx, val, "ADD", __item);
    }

    // REMOVE
    {
        JSValue __item = JS_NewInt32(ctx, 5119);
        JS_SetPropertyStr(ctx, val, "REMOVE", __item);
    }

    // UP
    {
        JSValue __item = JS_NewInt32(ctx, 5120);
        JS_SetPropertyStr(ctx, val, "UP", __item);
    }

    // DOWN
    {
        JSValue __item = JS_NewInt32(ctx, 5121);
        JS_SetPropertyStr(ctx, val, "DOWN", __item);
    }

    // HOME
    {
        JSValue __item = JS_NewInt32(ctx, 5122);
        JS_SetPropertyStr(ctx, val, "HOME", __item);
    }

    // REFRESH
    {
        JSValue __item = JS_NewInt32(ctx, 5123);
        JS_SetPropertyStr(ctx, val, "REFRESH", __item);
    }

    // STOP
    {
        JSValue __item = JS_NewInt32(ctx, 5124);
        JS_SetPropertyStr(ctx, val, "STOP", __item);
    }

    // INDEX
    {
        JSValue __item = JS_NewInt32(ctx, 5125);
        JS_SetPropertyStr(ctx, val, "INDEX", __item);
    }

    // BOLD
    {
        JSValue __item = JS_NewInt32(ctx, 5126);
        JS_SetPropertyStr(ctx, val, "BOLD", __item);
    }

    // ITALIC
    {
        JSValue __item = JS_NewInt32(ctx, 5127);
        JS_SetPropertyStr(ctx, val, "ITALIC", __item);
    }

    // JUSTIFY_CENTER
    {
        JSValue __item = JS_NewInt32(ctx, 5128);
        JS_SetPropertyStr(ctx, val, "JUSTIFY_CENTER", __item);
    }

    // JUSTIFY_FILL
    {
        JSValue __item = JS_NewInt32(ctx, 5129);
        JS_SetPropertyStr(ctx, val, "JUSTIFY_FILL", __item);
    }

    // JUSTIFY_RIGHT
    {
        JSValue __item = JS_NewInt32(ctx, 5130);
        JS_SetPropertyStr(ctx, val, "JUSTIFY_RIGHT", __item);
    }

    // JUSTIFY_LEFT
    {
        JSValue __item = JS_NewInt32(ctx, 5131);
        JS_SetPropertyStr(ctx, val, "JUSTIFY_LEFT", __item);
    }

    // UNDERLINE
    {
        JSValue __item = JS_NewInt32(ctx, 5132);
        JS_SetPropertyStr(ctx, val, "UNDERLINE", __item);
    }

    // INDENT
    {
        JSValue __item = JS_NewInt32(ctx, 5133);
        JS_SetPropertyStr(ctx, val, "INDENT", __item);
    }

    // UNINDENT
    {
        JSValue __item = JS_NewInt32(ctx, 5134);
        JS_SetPropertyStr(ctx, val, "UNINDENT", __item);
    }

    // ZOOM_100
    {
        JSValue __item = JS_NewInt32(ctx, 5135);
        JS_SetPropertyStr(ctx, val, "ZOOM_100", __item);
    }

    // ZOOM_FIT
    {
        JSValue __item = JS_NewInt32(ctx, 5136);
        JS_SetPropertyStr(ctx, val, "ZOOM_FIT", __item);
    }

    // ZOOM_IN
    {
        JSValue __item = JS_NewInt32(ctx, 5137);
        JS_SetPropertyStr(ctx, val, "ZOOM_IN", __item);
    }

    // ZOOM_OUT
    {
        JSValue __item = JS_NewInt32(ctx, 5138);
        JS_SetPropertyStr(ctx, val, "ZOOM_OUT", __item);
    }

    // UNDELETE
    {
        JSValue __item = JS_NewInt32(ctx, 5139);
        JS_SetPropertyStr(ctx, val, "UNDELETE", __item);
    }

    // REVERT_TO_SAVED
    {
        JSValue __item = JS_NewInt32(ctx, 5140);
        JS_SetPropertyStr(ctx, val, "REVERT_TO_SAVED", __item);
    }

    // CDROM
    {
        JSValue __item = JS_NewInt32(ctx, 5141);
        JS_SetPropertyStr(ctx, val, "CDROM", __item);
    }

    // CONVERT
    {
        JSValue __item = JS_NewInt32(ctx, 5142);
        JS_SetPropertyStr(ctx, val, "CONVERT", __item);
    }

    // EXECUTE
    {
        JSValue __item = JS_NewInt32(ctx, 5143);
        JS_SetPropertyStr(ctx, val, "EXECUTE", __item);
    }

    // FLOPPY
    {
        JSValue __item = JS_NewInt32(ctx, 5144);
        JS_SetPropertyStr(ctx, val, "FLOPPY", __item);
    }

    // HARDDISK
    {
        JSValue __item = JS_NewInt32(ctx, 5145);
        JS_SetPropertyStr(ctx, val, "HARDDISK", __item);
    }

    // BOTTOM
    {
        JSValue __item = JS_NewInt32(ctx, 5146);
        JS_SetPropertyStr(ctx, val, "BOTTOM", __item);
    }

    // FIRST
    {
        JSValue __item = JS_NewInt32(ctx, 5147);
        JS_SetPropertyStr(ctx, val, "FIRST", __item);
    }

    // LAST
    {
        JSValue __item = JS_NewInt32(ctx, 5148);
        JS_SetPropertyStr(ctx, val, "LAST", __item);
    }

    // TOP
    {
        JSValue __item = JS_NewInt32(ctx, 5149);
        JS_SetPropertyStr(ctx, val, "TOP", __item);
    }

    // INFO
    {
        JSValue __item = JS_NewInt32(ctx, 5150);
        JS_SetPropertyStr(ctx, val, "INFO", __item);
    }

    // JUMP_TO
    {
        JSValue __item = JS_NewInt32(ctx, 5151);
        JS_SetPropertyStr(ctx, val, "JUMP_TO", __item);
    }

    // NETWORK
    {
        JSValue __item = JS_NewInt32(ctx, 5152);
        JS_SetPropertyStr(ctx, val, "NETWORK", __item);
    }

    // SELECT_COLOR
    {
        JSValue __item = JS_NewInt32(ctx, 5153);
        JS_SetPropertyStr(ctx, val, "SELECT_COLOR", __item);
    }

    // SELECT_FONT
    {
        JSValue __item = JS_NewInt32(ctx, 5154);
        JS_SetPropertyStr(ctx, val, "SELECT_FONT", __item);
    }

    // SORT_ASCENDING
    {
        JSValue __item = JS_NewInt32(ctx, 5155);
        JS_SetPropertyStr(ctx, val, "SORT_ASCENDING", __item);
    }

    // SORT_DESCENDING
    {
        JSValue __item = JS_NewInt32(ctx, 5156);
        JS_SetPropertyStr(ctx, val, "SORT_DESCENDING", __item);
    }

    // SPELL_CHECK
    {
        JSValue __item = JS_NewInt32(ctx, 5157);
        JS_SetPropertyStr(ctx, val, "SPELL_CHECK", __item);
    }

    // STRIKETHROUGH
    {
        JSValue __item = JS_NewInt32(ctx, 5158);
        JS_SetPropertyStr(ctx, val, "STRIKETHROUGH", __item);
    }

    // SYSTEM_MENU
    {
        JSValue __item = JS_NewInt32(ctx, 5200);
        JS_SetPropertyStr(ctx, val, "SYSTEM_MENU", __item);
    }

    // CLOSE_FRAME
    {
        JSValue __item = JS_NewInt32(ctx, 5201);
        JS_SetPropertyStr(ctx, val, "CLOSE_FRAME", __item);
    }

    // MOVE_FRAME
    {
        JSValue __item = JS_NewInt32(ctx, 5202);
        JS_SetPropertyStr(ctx, val, "MOVE_FRAME", __item);
    }

    // RESIZE_FRAME
    {
        JSValue __item = JS_NewInt32(ctx, 5203);
        JS_SetPropertyStr(ctx, val, "RESIZE_FRAME", __item);
    }

    // MAXIMIZE_FRAME
    {
        JSValue __item = JS_NewInt32(ctx, 5204);
        JS_SetPropertyStr(ctx, val, "MAXIMIZE_FRAME", __item);
    }

    // ICONIZE_FRAME
    {
        JSValue __item = JS_NewInt32(ctx, 5205);
        JS_SetPropertyStr(ctx, val, "ICONIZE_FRAME", __item);
    }

    // RESTORE_FRAME
    {
        JSValue __item = JS_NewInt32(ctx, 5206);
        JS_SetPropertyStr(ctx, val, "RESTORE_FRAME", __item);
    }

    // MDI_WINDOW_FIRST
    {
        JSValue __item = JS_NewInt32(ctx, 5230);
        JS_SetPropertyStr(ctx, val, "MDI_WINDOW_FIRST", __item);
    }

    // MDI_WINDOW_CASCADE
    {
        JSValue __item = JS_NewInt32(ctx, 5230);
        JS_SetPropertyStr(ctx, val, "MDI_WINDOW_CASCADE", __item);
    }

    // MDI_WINDOW_TILE_HORZ
    {
        JSValue __item = JS_NewInt32(ctx, 5231);
        JS_SetPropertyStr(ctx, val, "MDI_WINDOW_TILE_HORZ", __item);
    }

    // MDI_WINDOW_TILE_VERT
    {
        JSValue __item = JS_NewInt32(ctx, 5232);
        JS_SetPropertyStr(ctx, val, "MDI_WINDOW_TILE_VERT", __item);
    }

    // MDI_WINDOW_ARRANGE_ICONS
    {
        JSValue __item = JS_NewInt32(ctx, 5233);
        JS_SetPropertyStr(ctx, val, "MDI_WINDOW_ARRANGE_ICONS", __item);
    }

    // MDI_WINDOW_PREV
    {
        JSValue __item = JS_NewInt32(ctx, 5234);
        JS_SetPropertyStr(ctx, val, "MDI_WINDOW_PREV", __item);
    }

    // MDI_WINDOW_NEXT
    {
        JSValue __item = JS_NewInt32(ctx, 5235);
        JS_SetPropertyStr(ctx, val, "MDI_WINDOW_NEXT", __item);
    }

    // MDI_WINDOW_LAST
    {
        JSValue __item = JS_NewInt32(ctx, 5235);
        JS_SetPropertyStr(ctx, val, "MDI_WINDOW_LAST", __item);
    }

    // OSX_MENU_FIRST
    {
        JSValue __item = JS_NewInt32(ctx, 5250);
        JS_SetPropertyStr(ctx, val, "OSX_MENU_FIRST", __item);
    }

    // OSX_HIDE
    {
        JSValue __item = JS_NewInt32(ctx, 5250);
        JS_SetPropertyStr(ctx, val, "OSX_HIDE", __item);
    }

    // OSX_HIDEOTHERS
    {
        JSValue __item = JS_NewInt32(ctx, 5251);
        JS_SetPropertyStr(ctx, val, "OSX_HIDEOTHERS", __item);
    }

    // OSX_SHOWALL
    {
        JSValue __item = JS_NewInt32(ctx, 5252);
        JS_SetPropertyStr(ctx, val, "OSX_SHOWALL", __item);
    }

    // OSX_SERVICES
    {
        JSValue __item = JS_NewInt32(ctx, 5253);
        JS_SetPropertyStr(ctx, val, "OSX_SERVICES", __item);
    }

    // OSX_MENU_LAST
    {
        JSValue __item = JS_NewInt32(ctx, 5253);
        JS_SetPropertyStr(ctx, val, "OSX_MENU_LAST", __item);
    }

    // FILEDLGG
    {
        JSValue __item = JS_NewInt32(ctx, 5900);
        JS_SetPropertyStr(ctx, val, "FILEDLGG", __item);
    }

    // FILECTRL
    {
        JSValue __item = JS_NewInt32(ctx, 5950);
        JS_SetPropertyStr(ctx, val, "FILECTRL", __item);
    }

    // HIGHEST
    {
        JSValue __item = JS_NewInt32(ctx, 5999);
        JS_SetPropertyStr(ctx, val, "HIGHEST", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "StandardID", val);
    assert(status != -1);
}

static void register_enum_Ozone_Stretch(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "Stretch");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // STRETCH_NOT
    {
        JSValue __item = JS_NewUint32(ctx, 0x0);
        JS_SetPropertyStr(ctx, val, "STRETCH_NOT", __item);
    }

    // SHRINK
    {
        JSValue __item = JS_NewUint32(ctx, 0x1000);
        JS_SetPropertyStr(ctx, val, "SHRINK", __item);
    }

    // GROW
    {
        JSValue __item = JS_NewUint32(ctx, 0x2000);
        JS_SetPropertyStr(ctx, val, "GROW", __item);
    }

    // EXPAND
    {
        JSValue __item = JS_NewUint32(ctx, 8192);
        JS_SetPropertyStr(ctx, val, "EXPAND", __item);
    }

    // SHAPED
    {
        JSValue __item = JS_NewUint32(ctx, 0x4000);
        JS_SetPropertyStr(ctx, val, "SHAPED", __item);
    }

    // TILE
    {
        JSValue __item = JS_NewUint32(ctx, 49152);
        JS_SetPropertyStr(ctx, val, "TILE", __item);
    }

    // STRETCH_MASK
    {
        JSValue __item = JS_NewUint32(ctx, 0x7000);
        JS_SetPropertyStr(ctx, val, "STRETCH_MASK", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "Stretch", val);
    assert(status != -1);
}

static void register_enum_Ozone_TOOL(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "TOOL");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // TOP
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "TOP", __item);
    }

    // BOTTOM
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "BOTTOM", __item);
    }

    // LEFT
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "LEFT", __item);
    }

    // RIGHT
    {
        JSValue __item = JS_NewUint32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "RIGHT", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "TOOL", val);
    assert(status != -1);
}

void register_ozone_defs(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (phase == 0)
    {
        register_enum_Ozone_KeyType(ctx, m, set);

        register_enum_Ozone_Direction(ctx, m, set);

        register_enum_Ozone_BackgroundStyle(ctx, m, set);

        register_enum_Ozone_HitTest(ctx, m, set);

        register_enum_Ozone_Border(ctx, m, set);

        register_enum_Ozone_SizerOrientation(ctx, m, set);

        register_enum_Ozone_Alignment(ctx, m, set);

        register_enum_Ozone_CheckBoxState(ctx, m, set);

        register_enum_Ozone_DataFormatId(ctx, m, set);

        register_enum_Ozone_GeometryCentre(ctx, m, set);

        register_enum_Ozone_HatchStyle(ctx, m, set);

        register_enum_Ozone_ItemKind(ctx, m, set);

        register_enum_Ozone_KeyCode(ctx, m, set);

        register_enum_Ozone_KeyModifier(ctx, m, set);

        register_enum_Ozone_SizerFlagBits(ctx, m, set);

        register_enum_Ozone_StandardID(ctx, m, set);

        register_enum_Ozone_Stretch(ctx, m, set);

        register_enum_Ozone_TOOL(ctx, m, set);
    }
}

} // extern "C"
