// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include <quickjs.h>

enum class BitmapType : unsigned int
{
    INVALID = 0,
    BMP = 1,
    BMP_RESOURCE = 2,
    RESOURCE = 2,
    ICO = 3,
    ICO_RESOURCE = 4,
    CUR = 5,
    CUR_RESOURCE = 6,
    XBM = 7,
    XBM_DATA = 8,
    XPM = 9,
    XPM_DATA = 10,
    TIFF = 11,
    TIF = 11,
    TIFF_RESOURCE = 12,
    TIF_RESOURCE = 12,
    GIF = 13,
    GIF_RESOURCE = 14,
    PNG = 15,
    PNG_RESOURCE = 16,
    JPEG = 17,
    JPEG_RESOURCE = 18,
    PNM = 19,
    PNM_RESOURCE = 20,
    PCX = 21,
    PCX_RESOURCE = 22,
    PICT = 23,
    PICT_RESOURCE = 24,
    ICON = 25,
    ICON_RESOURCE = 26,
    ANI = 27,
    IFF = 28,
    TGA = 29,
    MACCURSOR = 30,
    MACCURSOR_RESOURCE = 31,
    MAX = 32,
    ANY = 50
};

enum class EllipsizeFlags : unsigned int
{
    NONE = 0,
    PROCESS_MNEMONICS = 1,
    EXPAND_TABS = 2,
    DEFAULT = 3
};

enum class EllipsizeMode : unsigned int
{
    NONE = 0,
    START = 1,
    MIDDLE = 2,
    END = 3
};

enum class PolygonFillMode : unsigned int
{
    ODDEVEN_RULE = 1,
    WINDING_RULE = 2
};

enum class StockCursor : unsigned int
{
    NONE = 0,
    ARROW = 1,
    RIGHT_ARROW = 2,
    BULLSEYE = 3,
    CHAR = 4,
    CROSS = 5,
    HAND = 6,
    IBEAM = 7,
    LEFT_BUTTON = 8,
    MAGNIFIER = 9,
    MIDDLE_BUTTON = 10,
    NO_ENTRY = 11,
    PAINT_BRUSH = 12,
    PENCIL = 13,
    POINT_LEFT = 14,
    POINT_RIGHT = 15,
    QUESTION_ARROW = 16,
    RIGHT_BUTTON = 17,
    SIZENESW = 18,
    SIZENS = 19,
    SIZENWSE = 20,
    SIZEWE = 21,
    SIZING = 22,
    SPRAYCAN = 23,
    WAIT = 24,
    WATCH = 25,
    BLANK = 26,
    DEFAULT = 27,
    ARROWWAIT = 28,
    MAX = 29
};

class Size
{
public:

    ::Ozone::Size* __Instance;

    Size(::Ozone::Size* instance, bool ownNativeInstance = false);

    Size();

    Size(int xx, int yy);

    Size(const ::Ozone::Ozone::Size& _0);

    ~Size();

    void IncTo(const ::Ozone::Ozone::Size& sz);

    void DecTo(const ::Ozone::Ozone::Size& sz);

    void DecToIfSpecified(const ::Ozone::Ozone::Size& sz);

    void IncBy(int dx, int dy);

    void IncBy(const ::Ozone::Ozone::Point& pt);

    void IncBy(const ::Ozone::Ozone::Size& sz);

    void IncBy(int d);

    void DecBy(int dx, int dy);

    void DecBy(const ::Ozone::Ozone::Point& pt);

    void DecBy(const ::Ozone::Ozone::Size& sz);

    void DecBy(int d);

    void Set(int xx, int yy);

    void SetWidth(int w);

    void SetHeight(int h);

    int GetWidth() const;

    int GetHeight() const;

    bool IsFullySpecified() const;

    void SetDefaults(const ::Ozone::Ozone::Size& size);

    int GetX() const;

    int GetY() const;

    int get_x();

    void set_x(int value);

    int get_y();

    void set_y(int value);

protected:

    bool __ownsNativeInstance;
};

class RealPoint
{
public:

    ::Ozone::RealPoint* __Instance;

    RealPoint(::Ozone::RealPoint* instance, bool ownNativeInstance = false);

    RealPoint();

    RealPoint(double xx, double yy);

    RealPoint(const ::Ozone::Ozone::Point& pt);

    RealPoint(const ::Ozone::Ozone::RealPoint& _0);

    ~RealPoint();

    double get_x();

    void set_x(double value);

    double get_y();

    void set_y(double value);

    operator ::Ozone::Ozone::RealPoint(const ::Ozone::Ozone::Point& pt);

protected:

    bool __ownsNativeInstance;
};

class Point
{
public:

    ::Ozone::Point* __Instance;

    Point(::Ozone::Point* instance, bool ownNativeInstance = false);

    Point();

    Point(int xx, int yy);

    Point(const ::Ozone::Ozone::RealPoint& pt);

    Point(const ::Ozone::Ozone::Point& _0);

    ~Point();

    bool IsFullySpecified() const;

    void SetDefaults(const ::Ozone::Ozone::Point& pt);

    int get_x();

    void set_x(int value);

    int get_y();

    void set_y(int value);

    operator ::Ozone::Ozone::Point(const ::Ozone::Ozone::RealPoint& pt);

protected:

    bool __ownsNativeInstance;
};

class wxPointListNode
{
public:

    ::Ozone::wxPointListNode* __Instance;

    wxPointListNode(::Ozone::wxPointListNode* instance, bool ownNativeInstance = false);

    wxPointListNode(const ::Ozone::Ozone::wxPointListNode& _0);

    ~wxPointListNode();

    ::Ozone::Ozone::wxPointListNode* GetNext() const;

    ::Ozone::Ozone::wxPointListNode* GetPrevious() const;

    ::Ozone::Ozone::Point* GetData() const;

    void SetData(::Ozone::Ozone::Point* data);

protected:

    bool __ownsNativeInstance;
};

class Rect
{
public:

    ::Ozone::Rect* __Instance;

    Rect(::Ozone::Rect* instance, bool ownNativeInstance = false);

    Rect();

    Rect(int xx, int yy, int ww, int hh);

    Rect(const ::Ozone::Ozone::Point& topLeft, const ::Ozone::Ozone::Point& bottomRight);

    Rect(const ::Ozone::Ozone::Point& pt, const ::Ozone::Ozone::Size& size);

    Rect(const ::Ozone::Ozone::Size& size);

    Rect(const ::Ozone::Ozone::Rect& _0);

    ~Rect();

    int GetX() const;

    void SetX(int xx);

    int GetY() const;

    void SetY(int yy);

    int GetWidth() const;

    void SetWidth(int w);

    int GetHeight() const;

    void SetHeight(int h);

    ::Ozone::Ozone::Point GetPosition() const;

    void SetPosition(const ::Ozone::Ozone::Point& p);

    ::Ozone::Ozone::Size GetSize() const;

    void SetSize(const ::Ozone::Ozone::Size& s);

    bool IsEmpty() const;

    int GetLeft() const;

    int GetTop() const;

    int GetBottom() const;

    int GetRight() const;

    void SetLeft(int left);

    void SetRight(int right);

    void SetTop(int top);

    void SetBottom(int bottom);

    ::Ozone::Ozone::Point GetTopLeft() const;

    ::Ozone::Ozone::Point GetLeftTop() const;

    void SetTopLeft(const ::Ozone::Ozone::Point& p);

    void SetLeftTop(const ::Ozone::Ozone::Point& p);

    ::Ozone::Ozone::Point GetBottomRight() const;

    ::Ozone::Ozone::Point GetRightBottom() const;

    void SetBottomRight(const ::Ozone::Ozone::Point& p);

    void SetRightBottom(const ::Ozone::Ozone::Point& p);

    ::Ozone::Ozone::Point GetTopRight() const;

    ::Ozone::Ozone::Point GetRightTop() const;

    void SetTopRight(const ::Ozone::Ozone::Point& p);

    void SetRightTop(const ::Ozone::Ozone::Point& p);

    ::Ozone::Ozone::Point GetBottomLeft() const;

    ::Ozone::Ozone::Point GetLeftBottom() const;

    void SetBottomLeft(const ::Ozone::Ozone::Point& p);

    void SetLeftBottom(const ::Ozone::Ozone::Point& p);

    ::Ozone::Ozone::Rect Inflate(int dx, int dy) const;

    ::Ozone::Ozone::Rect Deflate(int dx, int dy) const;

    void Offset(int dx, int dy);

    void Offset(const ::Ozone::Ozone::Point& pt);

    ::Ozone::Ozone::Rect Intersect(const ::Ozone::Ozone::Rect& rect) const;

    ::Ozone::Ozone::Rect Union(const ::Ozone::Ozone::Rect& rect) const;

    bool Contains(int x, int y) const;

    bool Contains(const ::Ozone::Ozone::Point& pt) const;

    bool Contains(const ::Ozone::Ozone::Rect& rect) const;

    bool Intersects(const ::Ozone::Ozone::Rect& rect) const;

    ::Ozone::Ozone::Rect CentreIn(const ::Ozone::Ozone::Rect& r, int dir) const;

    ::Ozone::Ozone::Rect CenterIn(const ::Ozone::Ozone::Rect& r, int dir) const;

    int get_x();

    void set_x(int value);

    int get_y();

    void set_y(int value);

    int get_width();

    void set_width(int value);

    int get_height();

    void set_height(int value);

    operator ::Ozone::Ozone::Rect(const ::Ozone::Ozone::Size& size);

protected:

    bool __ownsNativeInstance;
};

class GDIObjListBase
{
public:

    ::Ozone::GDIObjListBase* __Instance;

    GDIObjListBase(::Ozone::GDIObjListBase* instance, bool ownNativeInstance = false);

    GDIObjListBase();

    GDIObjListBase(const ::Ozone::Ozone::GDIObjListBase& _0);

    ~GDIObjListBase();

protected:

    bool __ownsNativeInstance;
};

class ColourDatabase
{
public:

    ::Ozone::ColourDatabase* __Instance;

    ColourDatabase(::Ozone::ColourDatabase* instance, bool ownNativeInstance = false);

    ColourDatabase();

    ColourDatabase(const ::Ozone::Ozone::ColourDatabase& _0);

    ~ColourDatabase();

    ::Ozone::Ozone::Color Find(const char* name) const;

    const char* FindName(const ::Ozone::Ozone::Color& colour) const;

    void AddColour(const char* name, const ::Ozone::Ozone::Color& colour);

protected:

    bool __ownsNativeInstance;
};

class ResourceCache
{
public:

    ::Ozone::ResourceCache* __Instance;

    ResourceCache(::Ozone::ResourceCache* instance, bool ownNativeInstance = false);

    ResourceCache();

    ResourceCache(unsigned int keyType);

    ResourceCache(const ::Ozone::Ozone::ResourceCache& _0);

    ~ResourceCache();

    operator ::Ozone::Ozone::ResourceCache(unsigned int keyType);

protected:

    bool __ownsNativeInstance;
};

class StockGDI
{
public:

    enum class Item : unsigned int
    {
        BRUSH_BLACK = 0,
        BRUSH_BLUE = 1,
        BRUSH_CYAN = 2,
        BRUSH_GREEN = 3,
        BRUSH_YELLOW = 4,
        BRUSH_GREY = 5,
        BRUSH_LIGHTGREY = 6,
        BRUSH_MEDIUMGREY = 7,
        BRUSH_RED = 8,
        BRUSH_TRANSPARENT = 9,
        BRUSH_WHITE = 10,
        COLOUR_BLACK = 11,
        COLOUR_BLUE = 12,
        COLOUR_CYAN = 13,
        COLOUR_GREEN = 14,
        COLOUR_YELLOW = 15,
        COLOUR_LIGHTGREY = 16,
        COLOUR_RED = 17,
        COLOUR_WHITE = 18,
        CURSOR_CROSS = 19,
        CURSOR_HOURGLASS = 20,
        CURSOR_STANDARD = 21,
        FONT_ITALIC = 22,
        FONT_NORMAL = 23,
        FONT_SMALL = 24,
        FONT_SWISS = 25,
        PEN_BLACK = 26,
        PEN_BLACKDASHED = 27,
        PEN_BLUE = 28,
        PEN_CYAN = 29,
        PEN_GREEN = 30,
        PEN_YELLOW = 31,
        PEN_GREY = 32,
        PEN_LIGHTGREY = 33,
        PEN_MEDIUMGREY = 34,
        PEN_RED = 35,
        PEN_TRANSPARENT = 36,
        PEN_WHITE = 37,
        ITEMCOUNT = 38
    };

    ::Ozone::StockGDI* __Instance;

    StockGDI(::Ozone::StockGDI* instance, bool ownNativeInstance = false);

    StockGDI();

    StockGDI(const ::Ozone::Ozone::StockGDI& _0);

    ~StockGDI();

    static void DeleteAll();

    static const ::Ozone::Ozone::Brush* GetBrush(::Ozone::Ozone::StockGDI::Item item);

    static const ::Ozone::Ozone::Color* GetColour(::Ozone::Ozone::StockGDI::Item item);

    static const ::Ozone::Ozone::Pen* GetPen(::Ozone::Ozone::StockGDI::Item item);

protected:

    bool __ownsNativeInstance;
};

extern "C" JSValue js_operator==(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator!=(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator+(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator-(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator==(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator!=(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator+(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator-(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator==(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator!=(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator+(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator-(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator+(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator-(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator+(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator-(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator-(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator/(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator==(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator!=(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator+(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_operator*(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_InitializeStockLists(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_DeleteStockLists(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_ColourDisplay(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_DisplayDepth(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_GetDisplaySize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_GetDisplaySizeMM(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_GetDisplayPPI(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_GetClientDisplayRect(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
