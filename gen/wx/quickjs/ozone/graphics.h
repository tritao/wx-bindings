// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include <quickjs.h>

enum class GradientType : unsigned int
{
    NONE = 0,
    LINEAR = 1,
    RADIAL = 2
};

enum class AntialiasMode : unsigned int
{
    NONE = 0,
    DEFAULT = 1
};

enum class InterpolationQuality : unsigned int
{
    DEFAULT = 0,
    NONE = 1,
    FAST = 2,
    GOOD = 3,
    BEST = 4
};

enum class CompositionMode
{
    INVALID = -1,
    CLEAR = 0,
    SOURCE = 1,
    OVER = 2,
    IN = 3,
    OUT = 4,
    ATOP = 5,
    DEST = 6,
    DEST_OVER = 7,
    DEST_IN = 8,
    DEST_OUT = 9,
    DEST_ATOP = 10,
    XOR = 11,
    ADD = 12
};

class GraphicsObject : public ::Ozone::Ozone::Object
{
public:

    GraphicsObject(::Ozone::GraphicsObject* instance, bool ownNativeInstance = false);

    GraphicsObject();

    GraphicsObject(::Ozone::Ozone::GraphicsRenderer* renderer);

    GraphicsObject(const ::Ozone::Ozone::GraphicsObject& _0);

    ~GraphicsObject();

    bool IsNull() const;

    ::Ozone::Ozone::GraphicsRenderer* GetRenderer() const;
};

class GraphicsPen : public ::Ozone::Ozone::GraphicsObject
{
public:

    GraphicsPen(::Ozone::GraphicsPen* instance, bool ownNativeInstance = false);

    GraphicsPen();

    GraphicsPen(const ::Ozone::Ozone::GraphicsPen& _0);

    ~GraphicsPen();
};

class GraphicsBrush : public ::Ozone::Ozone::GraphicsObject
{
public:

    GraphicsBrush(::Ozone::GraphicsBrush* instance, bool ownNativeInstance = false);

    GraphicsBrush();

    GraphicsBrush(const ::Ozone::Ozone::GraphicsBrush& _0);

    ~GraphicsBrush();
};

class GraphicsFont : public ::Ozone::Ozone::GraphicsObject
{
public:

    GraphicsFont(::Ozone::GraphicsFont* instance, bool ownNativeInstance = false);

    GraphicsFont();

    GraphicsFont(const ::Ozone::Ozone::GraphicsFont& _0);

    ~GraphicsFont();
};

class GraphicsBitmap : public ::Ozone::Ozone::GraphicsObject
{
public:

    GraphicsBitmap(::Ozone::GraphicsBitmap* instance, bool ownNativeInstance = false);

    GraphicsBitmap();

    GraphicsBitmap(const ::Ozone::Ozone::GraphicsBitmap& _0);

    ~GraphicsBitmap();
};

class GraphicsMatrix : public ::Ozone::Ozone::GraphicsObject
{
public:

    GraphicsMatrix(::Ozone::GraphicsMatrix* instance, bool ownNativeInstance = false);

    GraphicsMatrix();

    GraphicsMatrix(const ::Ozone::Ozone::GraphicsMatrix& _0);

    ~GraphicsMatrix();

    void Concat(const ::Ozone::Ozone::GraphicsMatrix& t);

    virtual void Set(double a, double b, double c, double d, double tx, double ty);

    virtual void Invert();

    bool IsEqual(const ::Ozone::Ozone::GraphicsMatrix& t) const;

    virtual bool IsIdentity() const;

    virtual void Translate(double dx, double dy);

    virtual void Scale(double xScale, double yScale);

    virtual void Rotate(double angle);
};

class GraphicsGradientStop
{
public:

    GraphicsGradientStop(::Ozone::GraphicsGradientStop* instance, bool ownNativeInstance = false);

    GraphicsGradientStop(::Ozone::Ozone::Color col, float pos);

    GraphicsGradientStop(const ::Ozone::Ozone::GraphicsGradientStop& _0);

    ~GraphicsGradientStop();

    void SetColour(const ::Ozone::Ozone::Color& col);

    float GetPosition() const;

    void SetPosition(float pos);

protected:

    bool __OwnsNativeInstance;
};

class GraphicsGradientStops
{
public:

    GraphicsGradientStops(::Ozone::GraphicsGradientStops* instance, bool ownNativeInstance = false);

    GraphicsGradientStops(::Ozone::Ozone::Color startCol, ::Ozone::Ozone::Color endCol);

    GraphicsGradientStops(const ::Ozone::Ozone::GraphicsGradientStops& _0);

    ~GraphicsGradientStops();

    void Add(const ::Ozone::Ozone::GraphicsGradientStop& stop);

    void Add(::Ozone::Ozone::Color col, float pos);

    unsigned long GetCount() const;

    ::Ozone::Ozone::GraphicsGradientStop Item(unsigned int n) const;

    void SetStartColour(::Ozone::Ozone::Color col);

    ::Ozone::Ozone::Color GetStartColour() const;

    void SetEndColour(::Ozone::Ozone::Color col);

    ::Ozone::Ozone::Color GetEndColour() const;

protected:

    bool __OwnsNativeInstance;
};

class GraphicsPenInfo
{
public:

    GraphicsPenInfo(::Ozone::GraphicsPenInfo* instance, bool ownNativeInstance = false);

    explicit GraphicsPenInfo(const ::Ozone::Ozone::Color& colour, double width, ::Ozone::Ozone::PenStyle style);

    GraphicsPenInfo(const ::Ozone::Ozone::GraphicsPenInfo& _0);

    ~GraphicsPenInfo();

    double GetWidth() const;

    ::Ozone::Ozone::GradientType GetGradientType() const;

    double GetX1() const;

    double GetY1() const;

    double GetX2() const;

    double GetY2() const;

    double GetStartX() const;

    double GetStartY() const;

    double GetEndX() const;

    double GetEndY() const;

    double GetRadius() const;

    ::Ozone::Ozone::Color GetColour() const;

    ::Ozone::Ozone::PenStyle GetStyle() const;

    ::Ozone::Ozone::PenJoin GetJoin() const;

    ::Ozone::Ozone::PenCap GetCap() const;

    int GetDashCount() const;

    bool IsTransparent() const;

protected:

    bool __OwnsNativeInstance;
};

class GraphicsPath : public ::Ozone::Ozone::GraphicsObject
{
public:

    GraphicsPath(::Ozone::GraphicsPath* instance, bool ownNativeInstance = false);

    GraphicsPath();

    GraphicsPath(const ::Ozone::Ozone::GraphicsPath& _0);

    ~GraphicsPath();

    virtual void MoveToPoint(double x, double y);

    virtual void AddLineToPoint(double x, double y);

    virtual void AddCurveToPoint(double cx1, double cy1, double cx2, double cy2, double x, double y);

    virtual void AddPath(const ::Ozone::Ozone::GraphicsPath& path);

    virtual void CloseSubpath();

    virtual void AddArc(double x, double y, double r, double startAngle, double endAngle, bool clockwise);

    virtual void AddQuadCurveToPoint(double cx, double cy, double x, double y);

    virtual void AddRectangle(double x, double y, double w, double h);

    virtual void AddCircle(double x, double y, double r);

    virtual void AddArcToPoint(double x1, double y1, double x2, double y2, double r);

    virtual void AddEllipse(double x, double y, double w, double h);

    virtual void AddRoundedRectangle(double x, double y, double w, double h, double radius);

    virtual void Transform(const ::Ozone::Ozone::GraphicsMatrix& matrix);

    virtual bool Contains(double x, double y, ::Ozone::Ozone::PolygonFillMode fillStyle) const;
};

class GraphicsContext : public ::Ozone::Ozone::GraphicsObject
{
public:

    GraphicsContext(::Ozone::GraphicsContext* instance, bool ownNativeInstance = false);

    GraphicsContext(::Ozone::Ozone::GraphicsRenderer* renderer, ::Ozone::Ozone::Window* window);

    GraphicsContext(const ::Ozone::Ozone::GraphicsContext& _0);

    ~GraphicsContext();

    ::Ozone::Ozone::Window* GetWindow() const;

    virtual bool StartDoc(const char* message);

    virtual void EndDoc();

    virtual void StartPage(double width, double height);

    virtual void EndPage();

    virtual void Flush();

    ::Ozone::Ozone::GraphicsPath CreatePath() const;

    ::Ozone::Ozone::GraphicsPen CreatePen(const ::Ozone::Ozone::Pen& pen) const;

    ::Ozone::Ozone::GraphicsPen CreatePen(const ::Ozone::Ozone::GraphicsPenInfo& info) const;

    virtual ::Ozone::Ozone::GraphicsBrush CreateBrush(const ::Ozone::Ozone::Brush& brush) const;

    ::Ozone::Ozone::GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, const ::Ozone::Ozone::Color& c1, const ::Ozone::Ozone::Color& c2, const ::Ozone::Ozone::GraphicsMatrix& matrix) const;

    ::Ozone::Ozone::GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, const ::Ozone::Ozone::GraphicsGradientStops& stops, const ::Ozone::Ozone::GraphicsMatrix& matrix) const;

    ::Ozone::Ozone::GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, const ::Ozone::Ozone::Color& oColor, const ::Ozone::Ozone::Color& cColor, const ::Ozone::Ozone::GraphicsMatrix& matrix) const;

    ::Ozone::Ozone::GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, const ::Ozone::Ozone::GraphicsGradientStops& stops, const ::Ozone::Ozone::GraphicsMatrix& matrix) const;

    virtual ::Ozone::Ozone::GraphicsFont CreateFont(double sizeInPixels, const char* facename, int flags, const ::Ozone::Ozone::Color& col) const;

    virtual ::Ozone::Ozone::GraphicsBitmap CreateSubBitmap(const ::Ozone::Ozone::GraphicsBitmap& bitmap, double x, double y, double w, double h) const;

    virtual ::Ozone::Ozone::GraphicsMatrix CreateMatrix(double a, double b, double c, double d, double tx, double ty) const;

    virtual void PushState();

    virtual void PopState();

    virtual void Clip(double x, double y, double w, double h);

    virtual void ResetClip();

    virtual ::Ozone::Ozone::AntialiasMode GetAntialiasMode() const;

    virtual bool SetAntialiasMode(::Ozone::Ozone::AntialiasMode antialias);

    virtual ::Ozone::Ozone::InterpolationQuality GetInterpolationQuality() const;

    virtual bool SetInterpolationQuality(::Ozone::Ozone::InterpolationQuality interpolation);

    virtual ::Ozone::Ozone::CompositionMode GetCompositionMode() const;

    virtual bool SetCompositionMode(::Ozone::Ozone::CompositionMode op);

    virtual void BeginLayer(double opacity);

    virtual void EndLayer();

    virtual void Translate(double dx, double dy);

    virtual void Scale(double xScale, double yScale);

    virtual void Rotate(double angle);

    virtual void ConcatTransform(const ::Ozone::Ozone::GraphicsMatrix& matrix);

    virtual void SetTransform(const ::Ozone::Ozone::GraphicsMatrix& matrix);

    virtual ::Ozone::Ozone::GraphicsMatrix GetTransform() const;

    virtual void SetPen(const ::Ozone::Ozone::GraphicsPen& pen);

    void SetPen(const ::Ozone::Ozone::Pen& pen);

    virtual void SetBrush(const ::Ozone::Ozone::GraphicsBrush& brush);

    void SetBrush(const ::Ozone::Ozone::Brush& brush);

    virtual void SetFont(const ::Ozone::Ozone::GraphicsFont& font);

    virtual void StrokePath(const ::Ozone::Ozone::GraphicsPath& path);

    virtual void FillPath(const ::Ozone::Ozone::GraphicsPath& path, ::Ozone::Ozone::PolygonFillMode fillStyle);

    virtual void DrawPath(const ::Ozone::Ozone::GraphicsPath& path, ::Ozone::Ozone::PolygonFillMode fillStyle);

    virtual void ClearRectangle(double x, double y, double w, double h);

    void DrawText(const char* str, double x, double y);

    void DrawText(const char* str, double x, double y, double angle);

    void DrawText(const char* str, double x, double y, const ::Ozone::Ozone::GraphicsBrush& backgroundBrush);

    void DrawText(const char* str, double x, double y, double angle, const ::Ozone::Ozone::GraphicsBrush& backgroundBrush);

    virtual void DrawBitmap(const ::Ozone::Ozone::GraphicsBitmap& bmp, double x, double y, double w, double h);

    virtual void StrokeLine(double x1, double y1, double x2, double y2);

    virtual void DrawRectangle(double x, double y, double w, double h);

    virtual void DrawEllipse(double x, double y, double w, double h);

    virtual void DrawRoundedRectangle(double x, double y, double w, double h, double radius);

    virtual bool ShouldOffset() const;

    virtual void EnableOffset(bool enable);

    void DisableOffset();

    bool OffsetEnabled();

    static ::Ozone::Ozone::GraphicsContext* Create(const ::Ozone::Ozone::WindowDC& dc);

    static ::Ozone::Ozone::GraphicsContext* CreateFromUnknownDC(const ::Ozone::Ozone::DC& dc);

    static ::Ozone::Ozone::GraphicsContext* Create(::Ozone::Ozone::Window* window);

    static ::Ozone::Ozone::GraphicsContext* Create();
};

class GraphicsRenderer : public ::Ozone::Ozone::Object
{
public:

    GraphicsRenderer(::Ozone::GraphicsRenderer* instance, bool ownNativeInstance = false);

    GraphicsRenderer();

    GraphicsRenderer(const ::Ozone::Ozone::GraphicsRenderer& _0);

    ~GraphicsRenderer();

    virtual ::Ozone::Ozone::GraphicsContext* CreateContext(const ::Ozone::Ozone::WindowDC& dc);

    ::Ozone::Ozone::GraphicsContext* CreateContextFromUnknownDC(const ::Ozone::Ozone::DC& dc);

    virtual ::Ozone::Ozone::GraphicsContext* CreateContext(::Ozone::Ozone::Window* window);

    virtual ::Ozone::Ozone::GraphicsContext* CreateMeasuringContext();

    virtual ::Ozone::Ozone::GraphicsPath CreatePath();

    virtual ::Ozone::Ozone::GraphicsMatrix CreateMatrix(double a, double b, double c, double d, double tx, double ty);

    virtual ::Ozone::Ozone::GraphicsPen CreatePen(const ::Ozone::Ozone::GraphicsPenInfo& info);

    virtual ::Ozone::Ozone::GraphicsBrush CreateBrush(const ::Ozone::Ozone::Brush& brush);

    virtual ::Ozone::Ozone::GraphicsBrush CreateLinearGradientBrush(double x1, double y1, double x2, double y2, const ::Ozone::Ozone::GraphicsGradientStops& stops, const ::Ozone::Ozone::GraphicsMatrix& matrix);

    virtual ::Ozone::Ozone::GraphicsBrush CreateRadialGradientBrush(double startX, double startY, double endX, double endY, double radius, const ::Ozone::Ozone::GraphicsGradientStops& stops, const ::Ozone::Ozone::GraphicsMatrix& matrix);

    virtual ::Ozone::Ozone::GraphicsFont CreateFont(double sizeInPixels, const char* facename, int flags, const ::Ozone::Ozone::Color& col);

    virtual ::Ozone::Ozone::GraphicsBitmap CreateSubBitmap(const ::Ozone::Ozone::GraphicsBitmap& bitmap, double x, double y, double w, double h);

    virtual const char* GetName() const;

    static ::Ozone::Ozone::GraphicsRenderer* GetDefaultRenderer();

    static ::Ozone::Ozone::GraphicsRenderer* GetCairoRenderer();
};
