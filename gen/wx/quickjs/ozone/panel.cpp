// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <CppSharp_QuickJS.h>
#include <assert.h>
#include <ozone/panel.h>

extern "C" {

extern JSClassID classId_Ozone_Panel;
extern JSClassID classId_Ozone_NavigationKeyEvent;
extern JSClassID classId_Ozone_Window;
extern JSClassID classId_Ozone_Point;
extern JSClassID classId_Ozone_Size;
extern JSClassID classId__Signal;

JSClassID classId_Ozone_Panel;

struct data_Ozone_Panel : public JS_Interop_ClassData
{
    void event_invoke_OnNavigationKey(::Ozone::NavigationKeyEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 49);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_NavigationKeyEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }
};

JSValue callback_event_getter_Ozone_Panel_OnNavigationKey(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Panel*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 49);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 49, JS_DupValue(ctx, __obj));

    ((Ozone::Panel*)data->instance)->OnNavigationKey.bind(data, &data_Ozone_Panel::event_invoke_OnNavigationKey);

    return __obj;
}

// Ozone::Panel::Panel
static JSValue callback_method_Ozone_Panel_Panel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 6)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::Panel* instance;

    if (argc == 0)
        goto overload0;

    if (JS_IsObject(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsNumber(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsObject(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsObject(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsNumber(argv[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (JS_IsString(argv[5]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // Panel()
overload0:
    {
        instance = new Ozone::Panel();

        goto wrap;
    }

    // Panel(::Ozone::Window* parent, int winid, const ::Ozone::Point& pos, const ::Ozone::Size& size, long style, const char* name)
overload1:
    {
        Ozone::Window* parent_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = parent_instance;
        int winid;
        if (JS_ToInt32(ctx, (int32_t*) &winid, argv[1]))
            return JS_EXCEPTION;

        auto __arg1 = winid;
        Ozone::Point* pos_instance = (Ozone::Point*) JS_GetOpaque(argv[2], classId_Ozone_Point);

        auto &__arg2 = *pos_instance;
        Ozone::Size* size_instance = (Ozone::Size*) JS_GetOpaque(argv[3], classId_Ozone_Size);

        auto &__arg3 = *size_instance;
        long style;
        if (JS_ToInt32(ctx, (int32_t*) &style, argv[4]))
            return JS_EXCEPTION;

        auto __arg4 = style;
        const char* name;
        name = JS_ToCString(ctx, argv[5]);
        if (!name)
            return JS_EXCEPTION;

        auto __arg5 = name;
        instance = new Ozone::Panel(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        JS_FreeCString(ctx, name);
        goto wrap;
    }

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_Panel);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_Panel);
    JS_FreeValue(ctx, proto);

    JS_Interop_InitObject(ctx, __obj, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, instance);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::Panel::Create
static JSValue callback_method_Ozone_Panel_Create(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 6 || argc > 6)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_Panel*) JS_GetOpaque(this_val, 0);
    Ozone::Panel* instance = (Ozone::Panel*) data->instance;

    if (JS_IsObject(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsNumber(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsObject(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsObject(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsNumber(argv[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (JS_IsString(argv[5]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Create(::Ozone::Window* parent, int winid, const ::Ozone::Point& pos, const ::Ozone::Size& size, long style, const char* name)
overload0:
    {
        Ozone::Window* parent_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = parent_instance;
        int winid;
        if (JS_ToInt32(ctx, (int32_t*) &winid, argv[1]))
            return JS_EXCEPTION;

        auto __arg1 = winid;
        Ozone::Point* pos_instance = (Ozone::Point*) JS_GetOpaque(argv[2], classId_Ozone_Point);

        auto &__arg2 = *pos_instance;
        Ozone::Size* size_instance = (Ozone::Size*) JS_GetOpaque(argv[3], classId_Ozone_Size);

        auto &__arg3 = *size_instance;
        long style;
        if (JS_ToInt32(ctx, (int32_t*) &style, argv[4]))
            return JS_EXCEPTION;

        auto __arg4 = style;
        const char* name;
        name = JS_ToCString(ctx, argv[5]);
        if (!name)
            return JS_EXCEPTION;

        auto __arg5 = name;
        bool __ret = instance->Create(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        JS_FreeCString(ctx, name);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Panel::InitDialog
static JSValue callback_method_Ozone_Panel_InitDialog(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_Panel*) JS_GetOpaque(this_val, 0);
    Ozone::Panel* instance = (Ozone::Panel*) data->instance;

    instance->InitDialog();

    return JS_UNDEFINED;
}

static JSValue callback_class_Ozone_Panel_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "Panel");
}

void finalizer_Ozone_Panel(JSRuntime *rt, JSValue val)
{
    auto data = (data_Ozone_Panel*) JS_GetOpaque(val, 0);
    Ozone::Panel* instance = (Ozone::Panel*) data->instance;
    JS_Interop_FreeEventMap(&data->events, data->ctx);
}

static JSClassDef classDef_Ozone_Panel
{
    "Panel",
    .finalizer = finalizer_Ozone_Panel
};

static JSCFunctionListEntry funcDef_Ozone_Panel[]
{
    JS_CGETSET_DEF("OnNavigationKey", callback_event_getter_Ozone_Panel_OnNavigationKey, NULL),
    JS_CFUNC_DEF("Create", 6, callback_method_Ozone_Panel_Create),
    JS_CFUNC_DEF("InitDialog", 0, callback_method_Ozone_Panel_InitDialog),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_Panel_toString),
};

static void register_class_Ozone_Panel(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "Panel");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_Panel);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_Panel, &classDef_Ozone_Panel);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_Panel, sizeof(funcDef_Ozone_Panel) / sizeof(funcDef_Ozone_Panel[0]));
        JS_SetClassProto(ctx, classId_Ozone_Panel, proto);

        JSValue ctor = JS_NewCFunction2(ctx, callback_method_Ozone_Panel_Panel, "Panel", 6, JS_CFUNC_constructor, 0);
        JS_SetConstructor(ctx, ctor, proto);

        JS_SetModuleExport(ctx, m, "Panel", ctor);
    }
    else if (phase == 1)
    {
        JSValue proto = JS_GetClassProto(ctx, classId_Ozone_Panel);
        JSValue baseProto = JS_GetClassProto(ctx, classId_Ozone_Window);
        int err = JS_SetPrototype(ctx, proto, baseProto);
        assert(err != -1);
        JS_FreeValue(ctx, baseProto);
        JS_FreeValue(ctx, proto);
    }
}

void register_ozone_panel(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    register_class_Ozone_Panel(ctx, m, set, phase);
}

} // extern "C"
