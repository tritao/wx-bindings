// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include <quickjs.h>

enum class PenStyle
{
    INVALID = -1,
    SOLID = 100,
    DOT = 101,
    LONG_DASH = 102,
    SHORT_DASH = 103,
    DOT_DASH = 104,
    USER_DASH = 105,
    TRANSPARENT = 106,
    STIPPLE_MASK_OPAQUE = 107,
    STIPPLE_MASK = 108,
    STIPPLE = 110,
    BDIAGONAL_HATCH = 111,
    CROSSDIAG_HATCH = 112,
    FDIAGONAL_HATCH = 113,
    CROSS_HATCH = 114,
    HORIZONTAL_HATCH = 115,
    VERTICAL_HATCH = 116,
    FIRST_HATCH = 111,
    LAST_HATCH = 116
};

enum class PenJoin
{
    INVALID = -1,
    BEVEL = 120,
    MITER = 121,
    ROUND = 122
};

enum class PenCap
{
    INVALID = -1,
    ROUND = 130,
    PROJECTING = 131,
    BUTT = 132
};

class PenInfo
{
public:

    PenInfo(::Ozone::PenInfo* instance, bool ownNativeInstance = false);

    explicit PenInfo(const ::Ozone::Ozone::Color& colour, int width, ::Ozone::Ozone::PenStyle style);

    PenInfo(const ::Ozone::Ozone::PenInfo& _0);

    ~PenInfo();

    int GetWidth() const;

    ::Ozone::Ozone::Color GetColour() const;

    ::Ozone::Ozone::PenStyle GetStyle() const;

    ::Ozone::Ozone::PenJoin GetJoin() const;

    ::Ozone::Ozone::PenCap GetCap() const;

    int GetDashCount() const;

    bool IsTransparent() const;

protected:

    bool __OwnsNativeInstance;
};

class Pen
{
public:

    Pen(::Ozone::Pen* instance, bool ownNativeInstance = false);

    Pen();

    Pen(const ::Ozone::Ozone::Color& colour, int width, ::Ozone::Ozone::PenStyle style);

    Pen(const ::Ozone::Ozone::PenInfo& info);

    Pen(const ::Ozone::Ozone::Pen& _0);

    ~Pen();

    bool operator==(const ::Ozone::Ozone::Pen& pen) const;

    bool operator!=(const ::Ozone::Ozone::Pen& pen) const;

    virtual void SetColour(const ::Ozone::Ozone::Color& colour);

    virtual void SetColour(unsigned char red, unsigned char green, unsigned char blue);

    virtual void SetCap(::Ozone::Ozone::PenCap capStyle);

    virtual void SetJoin(::Ozone::Ozone::PenJoin joinStyle);

    virtual void SetStyle(::Ozone::Ozone::PenStyle style);

    virtual void SetWidth(int width);

    virtual ::Ozone::Ozone::Color GetColour() const;

    virtual ::Ozone::Ozone::PenCap GetCap() const;

    virtual ::Ozone::Ozone::PenJoin GetJoin() const;

    virtual ::Ozone::Ozone::PenStyle GetStyle() const;

    virtual int GetWidth() const;

    int GetDashCount() const;

    bool IsTransparent() const;

    bool IsNonTransparent() const;

    operator ::Ozone::Ozone::Pen(const ::Ozone::Ozone::PenInfo& info);

protected:

    bool __OwnsNativeInstance;
};

class PenList : public ::Ozone::Ozone::GDIObjListBase
{
public:

    PenList(::Ozone::PenList* instance, bool ownNativeInstance = false);

    PenList(const ::Ozone::Ozone::PenList& _0);

    PenList();

    ~PenList();

    ::Ozone::Ozone::Pen* FindOrCreatePen(const ::Ozone::Ozone::Color& colour, int width, ::Ozone::Ozone::PenStyle style);
};
