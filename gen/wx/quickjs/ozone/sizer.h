// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include <quickjs.h>

enum class FlexSizerGrowMode : unsigned int
{
    NONE = 0,
    SPECIFIED = 1,
    ALL = 2
};

class SizerFlags
{
public:

    ::Ozone::SizerFlags* __Instance;

    SizerFlags(::Ozone::SizerFlags* instance, bool ownNativeInstance = false);

    SizerFlags(int proportion);

    SizerFlags(const ::Ozone::Ozone::SizerFlags& _0);

    ~SizerFlags();

    int GetProportion() const;

    int GetFlags() const;

    int GetBorderInPixels() const;

    operator ::Ozone::Ozone::SizerFlags(int proportion);

    static int GetDefaultBorder();

    static float GetDefaultBorderFractional();

protected:

    bool __ownsNativeInstance;
};

class SizerSpacer
{
public:

    ::Ozone::SizerSpacer* __Instance;

    SizerSpacer(::Ozone::SizerSpacer* instance, bool ownNativeInstance = false);

    SizerSpacer(const ::Ozone::Ozone::Size& size);

    SizerSpacer(const ::Ozone::Ozone::SizerSpacer& _0);

    ~SizerSpacer();

    void SetSize(const ::Ozone::Ozone::Size& size);

    void Show(bool show);

    bool IsShown() const;

    operator ::Ozone::Ozone::SizerSpacer(const ::Ozone::Ozone::Size& size);

protected:

    bool __ownsNativeInstance;
};

class SizerItem : public Ozone::Ozone::Object
{
public:

    SizerItem(::Ozone::SizerItem* instance, bool ownNativeInstance = false);

    SizerItem(::Ozone::Ozone::Window* window, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    SizerItem(::Ozone::Ozone::Window* window, const ::Ozone::Ozone::SizerFlags& flags);

    SizerItem(::Ozone::Ozone::Sizer* sizer, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    SizerItem(::Ozone::Ozone::Sizer* sizer, const ::Ozone::Ozone::SizerFlags& flags);

    SizerItem(int width, int height, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    SizerItem(int width, int height, const ::Ozone::Ozone::SizerFlags& flags);

    SizerItem();

    SizerItem(const ::Ozone::Ozone::SizerItem& _0);

    ~SizerItem();

    virtual void DeleteWindows();

    void DetachSizer();

    void DetachWindow();

    virtual ::Ozone::Ozone::Size GetSize() const;

    virtual ::Ozone::Ozone::Size CalcMin();

    virtual void SetDimension(const ::Ozone::Ozone::Point& pos, const ::Ozone::Ozone::Size& size);

    ::Ozone::Ozone::Size GetMinSize() const;

    ::Ozone::Ozone::Size GetMinSizeWithBorder() const;

    ::Ozone::Ozone::Size GetMaxSize() const;

    ::Ozone::Ozone::Size GetMaxSizeWithBorder() const;

    void SetMinSize(const ::Ozone::Ozone::Size& size);

    void SetMinSize(int x, int y);

    void SetInitSize(int x, int y);

    void SetRatio(int width, int height);

    void SetRatio(const ::Ozone::Ozone::Size& size);

    void SetRatio(float ratio);

    float GetRatio() const;

    virtual ::Ozone::Ozone::Rect GetRect();

    void SetId(int id);

    int GetId() const;

    bool IsWindow() const;

    bool IsSizer() const;

    bool IsSpacer() const;

    void SetProportion(int proportion);

    int GetProportion() const;

    void SetFlag(int flag);

    int GetFlag() const;

    void SetBorder(int border);

    int GetBorder() const;

    ::Ozone::Ozone::Window* GetWindow() const;

    ::Ozone::Ozone::Sizer* GetSizer() const;

    ::Ozone::Ozone::Size GetSpacer() const;

    bool IsShown() const;

    void Show(bool show);

    void SetUserData(::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::Object* GetUserData() const;

    ::Ozone::Ozone::Point GetPosition() const;

    bool InformFirstDirection(int direction, int size, int availableOtherDir);

    void AssignWindow(::Ozone::Ozone::Window* window);

    void AssignSizer(::Ozone::Ozone::Sizer* sizer);

    void AssignSpacer(const ::Ozone::Ozone::Size& size);

    void AssignSpacer(int w, int h);
};

class SizerItemList
{
public:

    ::Ozone::SizerItemList* __Instance;

    SizerItemList(::Ozone::SizerItemList* instance, bool ownNativeInstance = false);

    SizerItemList(::Ozone::Ozone::KeyType keyType);

    SizerItemList(const ::Ozone::Ozone::SizerItemList& list);

    explicit SizerItemList(unsigned long n, ::Ozone::Ozone::SizerItem* const& v);

    ~SizerItemList();

    ::Ozone::Ozone::SizerItem* operator[](unsigned long index) const;

    bool DeleteObject(::Ozone::Ozone::SizerItem* object);

    bool Member(const ::Ozone::Ozone::SizerItem* object) const;

    int IndexOf(::Ozone::Ozone::SizerItem* object) const;

    void resize(unsigned long n, ::Ozone::Ozone::SizerItem* v);

    unsigned long size() const;

    unsigned long max_size() const;

    bool empty() const;

    void push_front(::Ozone::Ozone::SizerItem* const& v);

    void pop_front();

    void push_back(::Ozone::Ozone::SizerItem* const& v);

    void pop_back();

    void assign(unsigned long n, ::Ozone::Ozone::SizerItem* const& v);

    void clear();

    void remove(::Ozone::Ozone::SizerItem* const& v);

    void reverse();

    operator ::Ozone::Ozone::SizerItemList(::Ozone::Ozone::KeyType keyType);

protected:

    bool __ownsNativeInstance;
};

class Sizer : public Ozone::Ozone::Object
{
public:

    Sizer(::Ozone::Sizer* instance, bool ownNativeInstance = false);

    Sizer();

    Sizer(const ::Ozone::Ozone::Sizer& _0);

    ~Sizer();

    ::Ozone::Ozone::SizerItem* Add(::Ozone::Ozone::Window* window, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::SizerItem* Add(::Ozone::Ozone::Sizer* sizer, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::SizerItem* Add(int width, int height, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::SizerItem* Add(::Ozone::Ozone::Window* window, const ::Ozone::Ozone::SizerFlags& flags);

    ::Ozone::Ozone::SizerItem* Add(::Ozone::Ozone::Sizer* sizer, const ::Ozone::Ozone::SizerFlags& flags);

    ::Ozone::Ozone::SizerItem* Add(int width, int height, const ::Ozone::Ozone::SizerFlags& flags);

    ::Ozone::Ozone::SizerItem* Add(::Ozone::Ozone::SizerItem* item);

    virtual ::Ozone::Ozone::SizerItem* AddSpacer(int size);

    ::Ozone::Ozone::SizerItem* AddStretchSpacer(int prop);

    ::Ozone::Ozone::SizerItem* Insert(unsigned long index, ::Ozone::Ozone::Window* window, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::SizerItem* Insert(unsigned long index, ::Ozone::Ozone::Sizer* sizer, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::SizerItem* Insert(unsigned long index, int width, int height, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::SizerItem* Insert(unsigned long index, ::Ozone::Ozone::Window* window, const ::Ozone::Ozone::SizerFlags& flags);

    ::Ozone::Ozone::SizerItem* Insert(unsigned long index, ::Ozone::Ozone::Sizer* sizer, const ::Ozone::Ozone::SizerFlags& flags);

    ::Ozone::Ozone::SizerItem* Insert(unsigned long index, int width, int height, const ::Ozone::Ozone::SizerFlags& flags);

    virtual ::Ozone::Ozone::SizerItem* Insert(unsigned long index, ::Ozone::Ozone::SizerItem* item);

    ::Ozone::Ozone::SizerItem* InsertSpacer(unsigned long index, int size);

    ::Ozone::Ozone::SizerItem* InsertStretchSpacer(unsigned long index, int prop);

    ::Ozone::Ozone::SizerItem* Prepend(::Ozone::Ozone::Window* window, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::SizerItem* Prepend(::Ozone::Ozone::Sizer* sizer, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::SizerItem* Prepend(int width, int height, int proportion, int flag, int border, ::Ozone::Ozone::Object* userData);

    ::Ozone::Ozone::SizerItem* Prepend(::Ozone::Ozone::Window* window, const ::Ozone::Ozone::SizerFlags& flags);

    ::Ozone::Ozone::SizerItem* Prepend(::Ozone::Ozone::Sizer* sizer, const ::Ozone::Ozone::SizerFlags& flags);

    ::Ozone::Ozone::SizerItem* Prepend(int width, int height, const ::Ozone::Ozone::SizerFlags& flags);

    ::Ozone::Ozone::SizerItem* Prepend(::Ozone::Ozone::SizerItem* item);

    ::Ozone::Ozone::SizerItem* PrependSpacer(int size);

    ::Ozone::Ozone::SizerItem* PrependStretchSpacer(int prop);

    void SetContainingWindow(::Ozone::Ozone::Window* window);

    ::Ozone::Ozone::Window* GetContainingWindow() const;

    virtual bool Remove(::Ozone::Ozone::Sizer* sizer);

    virtual bool Remove(int index);

    virtual bool Detach(::Ozone::Ozone::Window* window);

    virtual bool Detach(::Ozone::Ozone::Sizer* sizer);

    virtual bool Detach(int index);

    virtual bool Replace(::Ozone::Ozone::Window* oldwin, ::Ozone::Ozone::Window* newwin, bool recursive);

    virtual bool Replace(::Ozone::Ozone::Sizer* oldsz, ::Ozone::Ozone::Sizer* newsz, bool recursive);

    virtual bool Replace(unsigned long index, ::Ozone::Ozone::SizerItem* newitem);

    virtual void Clear(bool delete_windows);

    virtual void DeleteWindows();

    virtual bool InformFirstDirection(int _0, int _1, int _2);

    void SetMinSize(int width, int height);

    void SetMinSize(const ::Ozone::Ozone::Size& size);

    bool SetItemMinSize(::Ozone::Ozone::Window* window, int width, int height);

    bool SetItemMinSize(::Ozone::Ozone::Window* window, const ::Ozone::Ozone::Size& size);

    bool SetItemMinSize(::Ozone::Ozone::Sizer* sizer, int width, int height);

    bool SetItemMinSize(::Ozone::Ozone::Sizer* sizer, const ::Ozone::Ozone::Size& size);

    bool SetItemMinSize(unsigned long index, int width, int height);

    bool SetItemMinSize(unsigned long index, const ::Ozone::Ozone::Size& size);

    ::Ozone::Ozone::Size GetSize() const;

    ::Ozone::Ozone::Point GetPosition() const;

    ::Ozone::Ozone::Size GetMinSize();

    virtual ::Ozone::Ozone::Size CalcMin();

    virtual void RepositionChildren(const ::Ozone::Ozone::Size& _0);

    virtual void RecalcSizes();

    virtual void Layout();

    ::Ozone::Ozone::Size ComputeFittingClientSize(::Ozone::Ozone::Window* window);

    ::Ozone::Ozone::Size ComputeFittingWindowSize(::Ozone::Ozone::Window* window);

    ::Ozone::Ozone::Size Fit(::Ozone::Ozone::Window* window);

    void FitInside(::Ozone::Ozone::Window* window);

    void SetSizeHints(::Ozone::Ozone::Window* window);

    void SetDimension(const ::Ozone::Ozone::Point& pos, const ::Ozone::Ozone::Size& size);

    void SetDimension(int x, int y, int width, int height);

    unsigned long GetItemCount() const;

    bool IsEmpty() const;

    ::Ozone::Ozone::SizerItem* GetItem(::Ozone::Ozone::Window* window, bool recursive);

    ::Ozone::Ozone::SizerItem* GetItem(::Ozone::Ozone::Sizer* sizer, bool recursive);

    ::Ozone::Ozone::SizerItem* GetItem(unsigned long index);

    ::Ozone::Ozone::SizerItem* GetItemById(int id, bool recursive);

    bool Show(::Ozone::Ozone::Window* window, bool show, bool recursive);

    bool Show(::Ozone::Ozone::Sizer* sizer, bool show, bool recursive);

    bool Show(unsigned long index, bool show);

    bool Hide(::Ozone::Ozone::Sizer* sizer, bool recursive);

    bool Hide(::Ozone::Ozone::Window* window, bool recursive);

    bool Hide(unsigned long index);

    bool IsShown(::Ozone::Ozone::Window* window) const;

    bool IsShown(::Ozone::Ozone::Sizer* sizer) const;

    bool IsShown(unsigned long index) const;

    virtual void ShowItems(bool show);

    void Show(bool show);

    virtual bool AreAnyItemsShown() const;
};

class GridSizer : public Ozone::Ozone::Sizer
{
public:

    GridSizer(::Ozone::GridSizer* instance, bool ownNativeInstance = false);

    GridSizer(int cols, int vgap, int hgap);

    GridSizer(int cols, const ::Ozone::Ozone::Size& gap);

    GridSizer(int rows, int cols, int vgap, int hgap);

    GridSizer(int rows, int cols, const ::Ozone::Ozone::Size& gap);

    GridSizer(const ::Ozone::Ozone::GridSizer& _0);

    ~GridSizer();

    virtual void RepositionChildren(const ::Ozone::Ozone::Size& minSize) override;

    virtual ::Ozone::Ozone::Size CalcMin() override;

    void SetCols(int cols);

    void SetRows(int rows);

    void SetVGap(int gap);

    void SetHGap(int gap);

    int GetCols() const;

    int GetRows() const;

    int GetVGap() const;

    int GetHGap() const;

    int GetEffectiveColsCount() const;

    int GetEffectiveRowsCount() const;
};

class FlexGridSizer : public Ozone::Ozone::GridSizer
{
public:

    FlexGridSizer(::Ozone::FlexGridSizer* instance, bool ownNativeInstance = false);

    FlexGridSizer(int cols, int vgap, int hgap);

    FlexGridSizer(int cols, const ::Ozone::Ozone::Size& gap);

    FlexGridSizer(int rows, int cols, int vgap, int hgap);

    FlexGridSizer(int rows, int cols, const ::Ozone::Ozone::Size& gap);

    FlexGridSizer(const ::Ozone::Ozone::FlexGridSizer& _0);

    ~FlexGridSizer();

    void AddGrowableRow(unsigned long idx, int proportion);

    void RemoveGrowableRow(unsigned long idx);

    void AddGrowableCol(unsigned long idx, int proportion);

    void RemoveGrowableCol(unsigned long idx);

    bool IsRowGrowable(unsigned long idx);

    bool IsColGrowable(unsigned long idx);

    void SetFlexibleDirection(int direction);

    int GetFlexibleDirection() const;

    void SetNonFlexibleGrowMode(::Ozone::Ozone::FlexSizerGrowMode mode);

    ::Ozone::Ozone::FlexSizerGrowMode GetNonFlexibleGrowMode() const;

    virtual void RepositionChildren(const ::Ozone::Ozone::Size& minSize) override;

    virtual ::Ozone::Ozone::Size CalcMin() override;
};

class BoxSizer : public Ozone::Ozone::Sizer
{
public:

    BoxSizer(::Ozone::BoxSizer* instance, bool ownNativeInstance = false);

    BoxSizer(::Ozone::Ozone::SizerOrientation orient);

    BoxSizer(const ::Ozone::Ozone::BoxSizer& _0);

    ~BoxSizer();

    virtual ::Ozone::Ozone::SizerItem* AddSpacer(int size) override;

    ::Ozone::Ozone::SizerOrientation GetOrientation() const;

    bool IsVertical() const;

    void SetOrientation(::Ozone::Ozone::SizerOrientation orient);

    virtual ::Ozone::Ozone::Size CalcMin() override;

    virtual void RepositionChildren(const ::Ozone::Ozone::Size& minSize) override;

    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir) override;

    operator ::Ozone::Ozone::BoxSizer(::Ozone::Ozone::SizerOrientation orient);
};

class StaticBoxSizer : public Ozone::Ozone::BoxSizer
{
public:

    StaticBoxSizer(::Ozone::StaticBoxSizer* instance, bool ownNativeInstance = false);

    StaticBoxSizer(::Ozone::Ozone::SizerOrientation orient, ::Ozone::Ozone::Window* win, const char* label);

    StaticBoxSizer(const ::Ozone::Ozone::StaticBoxSizer& _0);

    ~StaticBoxSizer();

    virtual ::Ozone::Ozone::Size CalcMin() override;

    virtual void RepositionChildren(const ::Ozone::Ozone::Size& minSize) override;

    virtual void ShowItems(bool show) override;

    virtual bool AreAnyItemsShown() const override;

    virtual bool Detach(::Ozone::Ozone::Window* window) override;

    virtual bool Detach(::Ozone::Ozone::Sizer* sizer) override;

    virtual bool Detach(int index) override;
};

class StdDialogButtonSizer : public Ozone::Ozone::BoxSizer
{
public:

    StdDialogButtonSizer(::Ozone::StdDialogButtonSizer* instance, bool ownNativeInstance = false);

    StdDialogButtonSizer();

    StdDialogButtonSizer(const ::Ozone::Ozone::StdDialogButtonSizer& _0);

    ~StdDialogButtonSizer();

    void Realize();
};
