// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <CppSharp_QuickJS.h>
#include <assert.h>
#include <ozone/toplevel.h>

extern "C" {

extern JSClassID classId_Ozone_TopLevelWindow;
extern JSClassID classId_Ozone_NonOwnedWindow;
extern JSClassID classId_Ozone_Window;
extern JSClassID classId_Ozone_Point;
extern JSClassID classId_Ozone_Size;
extern JSClassID classId_Ozone_VisualAttributes;
extern JSClassID classId_Ozone_Rect;
extern JSClassID classId_Ozone_UpdateUIEvent;
extern JSClassID classId__Signal;

static void register_enum_Ozone_FrameStyle(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "FrameStyle");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // CAPTION
    {
        JSValue __item = JS_NewInt32(ctx, 536870912);
        JS_SetPropertyStr(ctx, val, "CAPTION", __item);
    }

    // CLIP_CHILDREN
    {
        JSValue __item = JS_NewInt32(ctx, 4194304);
        JS_SetPropertyStr(ctx, val, "CLIP_CHILDREN", __item);
    }

    // FRAME_SHAPED
    {
        JSValue __item = JS_NewInt32(ctx, 16);
        JS_SetPropertyStr(ctx, val, "FRAME_SHAPED", __item);
    }

    // STAY_ON_TOP
    {
        JSValue __item = JS_NewInt32(ctx, 32768);
        JS_SetPropertyStr(ctx, val, "STAY_ON_TOP", __item);
    }

    // MINIMIZE
    {
        JSValue __item = JS_NewInt32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "MINIMIZE", __item);
    }

    // MAXIMIZE
    {
        JSValue __item = JS_NewInt32(ctx, 8192);
        JS_SetPropertyStr(ctx, val, "MAXIMIZE", __item);
    }

    // CLOSE_BOX
    {
        JSValue __item = JS_NewInt32(ctx, 4096);
        JS_SetPropertyStr(ctx, val, "CLOSE_BOX", __item);
    }

    // SYSTEM_MENU
    {
        JSValue __item = JS_NewInt32(ctx, 2048);
        JS_SetPropertyStr(ctx, val, "SYSTEM_MENU", __item);
    }

    // MINIMIZE_BOX
    {
        JSValue __item = JS_NewInt32(ctx, 1024);
        JS_SetPropertyStr(ctx, val, "MINIMIZE_BOX", __item);
    }

    // MAXIMIZE_BOX
    {
        JSValue __item = JS_NewInt32(ctx, 512);
        JS_SetPropertyStr(ctx, val, "MAXIMIZE_BOX", __item);
    }

    // RESIZE_BORDER
    {
        JSValue __item = JS_NewInt32(ctx, 64);
        JS_SetPropertyStr(ctx, val, "RESIZE_BORDER", __item);
    }

    // DEFAULT_FRAME_STYLE
    {
        JSValue __item = JS_NewInt32(ctx, 541072960);
        JS_SetPropertyStr(ctx, val, "DEFAULT_FRAME_STYLE", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "FrameStyle", val);
    assert(status != -1);
}

static void register_enum_Ozone_FullscreenMode(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "FullscreenMode");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // NOMENUBAR
    {
        JSValue __item = JS_NewUint32(ctx, 0x1);
        JS_SetPropertyStr(ctx, val, "NOMENUBAR", __item);
    }

    // NOTOOLBAR
    {
        JSValue __item = JS_NewUint32(ctx, 0x2);
        JS_SetPropertyStr(ctx, val, "NOTOOLBAR", __item);
    }

    // NOSTATUSBAR
    {
        JSValue __item = JS_NewUint32(ctx, 0x4);
        JS_SetPropertyStr(ctx, val, "NOSTATUSBAR", __item);
    }

    // NOBORDER
    {
        JSValue __item = JS_NewUint32(ctx, 0x8);
        JS_SetPropertyStr(ctx, val, "NOBORDER", __item);
    }

    // NOCAPTION
    {
        JSValue __item = JS_NewUint32(ctx, 0x10);
        JS_SetPropertyStr(ctx, val, "NOCAPTION", __item);
    }

    // ALL
    {
        JSValue __item = JS_NewUint32(ctx, 31);
        JS_SetPropertyStr(ctx, val, "ALL", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "FullscreenMode", val);
    assert(status != -1);
}

static void register_enum_Ozone_UserAttention(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "UserAttention");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // INFO
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "INFO", __item);
    }

    // ERROR
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "ERROR", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "UserAttention", val);
    assert(status != -1);
}

JSClassID classId_Ozone_TopLevelWindow;

struct data_Ozone_TopLevelWindow
{
    Ozone::TopLevelWindow* instance;
    JSContext* ctx;
    JS_EventMap events;

    void event_invoke_OnMaximize(::Ozone::MaximizeEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 44);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMove(::Ozone::MoveEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 45);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMoveStart(::Ozone::MoveEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 46);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMoveEnd(::Ozone::MoveEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 47);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnShow(::Ozone::ShowEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 48);
        if (JS_IsUndefined(event))
            return;

        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 0, NULL);
        JS_FreeValue(ctx, ret);
    }
};

JSValue callback_event_getter_Ozone_TopLevelWindow_OnMaximize(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 44);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 44, JS_DupValue(ctx, __obj));

    data->instance->OnMaximize.bind(data, &data_Ozone_TopLevelWindow::event_invoke_OnMaximize);

    return __obj;
}

JSValue callback_event_getter_Ozone_TopLevelWindow_OnMove(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 45);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 45, JS_DupValue(ctx, __obj));

    data->instance->OnMove.bind(data, &data_Ozone_TopLevelWindow::event_invoke_OnMove);

    return __obj;
}

JSValue callback_event_getter_Ozone_TopLevelWindow_OnMoveStart(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 46);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 46, JS_DupValue(ctx, __obj));

    data->instance->OnMoveStart.bind(data, &data_Ozone_TopLevelWindow::event_invoke_OnMoveStart);

    return __obj;
}

JSValue callback_event_getter_Ozone_TopLevelWindow_OnMoveEnd(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 47);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 47, JS_DupValue(ctx, __obj));

    data->instance->OnMoveEnd.bind(data, &data_Ozone_TopLevelWindow::event_invoke_OnMoveEnd);

    return __obj;
}

JSValue callback_event_getter_Ozone_TopLevelWindow_OnShow(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 48);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 48, JS_DupValue(ctx, __obj));

    data->instance->OnShow.bind(data, &data_Ozone_TopLevelWindow::event_invoke_OnShow);

    return __obj;
}

// Ozone::TopLevelWindow::TopLevelWindow
static JSValue callback_method_Ozone_TopLevelWindow_TopLevelWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 7)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    Ozone::TopLevelWindow* instance;

    if (argc == 0)
        goto overload0;

    if (JS_IsObject(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsNumber(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsString(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsObject(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsObject(argv[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (JS_IsNumber(argv[5]))
        goto typecheck6;

    goto error;

typecheck6:
    if (JS_IsString(argv[6]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // TopLevelWindow()
overload0:
    {
        instance = new Ozone::TopLevelWindow();

        goto wrap;
    }

    // TopLevelWindow(::Ozone::Window* parent, int winid, const char* title, const ::Ozone::Point& pos, const ::Ozone::Size& size, long style, const char* name)
overload1:
    {
        Ozone::Window* parent_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = parent_instance;
        int winid;
        if (JS_ToInt32(ctx, (int32_t*) &winid, argv[1]))
            return JS_EXCEPTION;

        auto __arg1 = winid;
        const char* title;
        title = JS_ToCString(ctx, argv[2]);
        if (!title)
            return JS_EXCEPTION;

        auto __arg2 = title;
        Ozone::Point* pos_instance = (Ozone::Point*) JS_GetOpaque(argv[3], classId_Ozone_Point);

        auto &__arg3 = *pos_instance;
        Ozone::Size* size_instance = (Ozone::Size*) JS_GetOpaque(argv[4], classId_Ozone_Size);

        auto &__arg4 = *size_instance;
        long style;
        if (JS_ToInt32(ctx, (int32_t*) &style, argv[5]))
            return JS_EXCEPTION;

        auto __arg5 = style;
        const char* name;
        name = JS_ToCString(ctx, argv[6]);
        if (!name)
            return JS_EXCEPTION;

        auto __arg6 = name;
        instance = new Ozone::TopLevelWindow(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);

        JS_FreeCString(ctx, title);
        JS_FreeCString(ctx, name);
        goto wrap;
    }

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_TopLevelWindow);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_TopLevelWindow);
    JS_FreeValue(ctx, proto);

    data_Ozone_TopLevelWindow* __data = new data_Ozone_TopLevelWindow;

    JS_Interop_InitEventMap(&__data->events);

    __data->instance = instance;
    __data->ctx = ctx;

    JS_SetOpaque(__obj, __data);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::TopLevelWindow::Create
static JSValue callback_method_Ozone_TopLevelWindow_Create(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 7 || argc > 7)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsNumber(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsString(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsObject(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsObject(argv[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (JS_IsNumber(argv[5]))
        goto typecheck6;

    goto error;

typecheck6:
    if (JS_IsString(argv[6]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Create(::Ozone::Window* parent, int id, const char* title, const ::Ozone::Point& pos, const ::Ozone::Size& size, long style, const char* name)
overload0:
    {
        Ozone::Window* parent_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = parent_instance;
        int id;
        if (JS_ToInt32(ctx, (int32_t*) &id, argv[1]))
            return JS_EXCEPTION;

        auto __arg1 = id;
        const char* title;
        title = JS_ToCString(ctx, argv[2]);
        if (!title)
            return JS_EXCEPTION;

        auto __arg2 = title;
        Ozone::Point* pos_instance = (Ozone::Point*) JS_GetOpaque(argv[3], classId_Ozone_Point);

        auto &__arg3 = *pos_instance;
        Ozone::Size* size_instance = (Ozone::Size*) JS_GetOpaque(argv[4], classId_Ozone_Size);

        auto &__arg4 = *size_instance;
        long style;
        if (JS_ToInt32(ctx, (int32_t*) &style, argv[5]))
            return JS_EXCEPTION;

        auto __arg5 = style;
        const char* name;
        name = JS_ToCString(ctx, argv[6]);
        if (!name)
            return JS_EXCEPTION;

        auto __arg6 = name;
        bool __ret = instance->Create(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);

        JS_FreeCString(ctx, title);
        JS_FreeCString(ctx, name);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::TopLevelWindow::Maximize
static JSValue callback_method_Ozone_TopLevelWindow_Maximize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void Maximize(bool maximize)
overload0:
    {
        bool maximize;
        maximize = JS_ToBool(ctx, argv[0]);
        if (maximize == -1)
            return JS_EXCEPTION;

        auto __arg0 = maximize;
        instance->Maximize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::IsMaximized
static JSValue callback_method_Ozone_TopLevelWindow_IsMaximized(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->IsMaximized();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::Iconize
static JSValue callback_method_Ozone_TopLevelWindow_Iconize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void Iconize(bool iconize)
overload0:
    {
        bool iconize;
        iconize = JS_ToBool(ctx, argv[0]);
        if (iconize == -1)
            return JS_EXCEPTION;

        auto __arg0 = iconize;
        instance->Iconize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::IsIconized
static JSValue callback_method_Ozone_TopLevelWindow_IsIconized(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->IsIconized();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::Restore
static JSValue callback_method_Ozone_TopLevelWindow_Restore(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    instance->Restore();

    return JS_UNDEFINED;
}

// Ozone::TopLevelWindow::EnableCloseButton
static JSValue callback_method_Ozone_TopLevelWindow_EnableCloseButton(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool EnableCloseButton(bool enable)
overload0:
    {
        bool enable;
        enable = JS_ToBool(ctx, argv[0]);
        if (enable == -1)
            return JS_EXCEPTION;

        auto __arg0 = enable;
        bool __ret = instance->EnableCloseButton(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::TopLevelWindow::ShowWithoutActivating
static JSValue callback_method_Ozone_TopLevelWindow_ShowWithoutActivating(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    instance->ShowWithoutActivating();

    return JS_UNDEFINED;
}

// Ozone::TopLevelWindow::ShowFullScreen
static JSValue callback_method_Ozone_TopLevelWindow_ShowFullScreen(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 2 || argc > 2)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsNumber(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool ShowFullScreen(bool show, long style)
overload0:
    {
        bool show;
        show = JS_ToBool(ctx, argv[0]);
        if (show == -1)
            return JS_EXCEPTION;

        auto __arg0 = show;
        long style;
        if (JS_ToInt32(ctx, (int32_t*) &style, argv[1]))
            return JS_EXCEPTION;

        auto __arg1 = style;
        bool __ret = instance->ShowFullScreen(__arg0, __arg1);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::TopLevelWindow::IsFullScreen
static JSValue callback_method_Ozone_TopLevelWindow_IsFullScreen(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->IsFullScreen();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::RequestUserAttention
static JSValue callback_method_Ozone_TopLevelWindow_RequestUserAttention(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void RequestUserAttention(int flags)
overload0:
    {
        int flags;
        if (JS_ToInt32(ctx, (int32_t*) &flags, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = flags;
        instance->RequestUserAttention(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::SetWindowStyleFlag
static JSValue callback_method_Ozone_TopLevelWindow_SetWindowStyleFlag(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetWindowStyleFlag(long style) override
overload0:
    {
        long style;
        if (JS_ToInt32(ctx, (int32_t*) &style, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = style;
        instance->SetWindowStyleFlag(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::Show
static JSValue callback_method_Ozone_TopLevelWindow_Show(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Show(bool show) override
overload0:
    {
        bool show;
        show = JS_ToBool(ctx, argv[0]);
        if (show == -1)
            return JS_EXCEPTION;

        auto __arg0 = show;
        bool __ret = instance->Show(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::TopLevelWindow::Raise
static JSValue callback_method_Ozone_TopLevelWindow_Raise(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    instance->Raise();

    return JS_UNDEFINED;
}

// Ozone::TopLevelWindow::IsActive
static JSValue callback_method_Ozone_TopLevelWindow_IsActive(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->IsActive();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::SetTitle
static JSValue callback_method_Ozone_TopLevelWindow_SetTitle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsString(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetTitle(const char* title)
overload0:
    {
        const char* title;
        title = JS_ToCString(ctx, argv[0]);
        if (!title)
            return JS_EXCEPTION;

        auto __arg0 = title;
        instance->SetTitle(__arg0);

        JS_FreeCString(ctx, title);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::GetTitle
static JSValue callback_method_Ozone_TopLevelWindow_GetTitle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    const char* __ret = instance->GetTitle();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::SetLabel
static JSValue callback_method_Ozone_TopLevelWindow_SetLabel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsString(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetLabel(const char* label) override
overload0:
    {
        const char* label;
        label = JS_ToCString(ctx, argv[0]);
        if (!label)
            return JS_EXCEPTION;

        auto __arg0 = label;
        instance->SetLabel(__arg0);

        JS_FreeCString(ctx, label);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::GetLabel
static JSValue callback_method_Ozone_TopLevelWindow_GetLabel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    const char* __ret = instance->GetLabel();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::GetDefaultAttributes
static JSValue callback_method_Ozone_TopLevelWindow_GetDefaultAttributes(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    ::Ozone::VisualAttributes __ret = instance->GetDefaultAttributes();

    JSValue ____ret_instance = JS_NewObjectClass(ctx, 0);

    return ____ret_instance;
}

// Ozone::TopLevelWindow::SetTransparent
static JSValue callback_method_Ozone_TopLevelWindow_SetTransparent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool SetTransparent(unsigned char alpha) override
overload0:
    {
        unsigned char alpha;
        int32_t _alpha;
        if (JS_ToInt32(ctx, &_alpha, argv[0]))
            return JS_EXCEPTION;
        alpha = (unsigned char)_alpha;

        auto __arg0 = alpha;
        bool __ret = instance->SetTransparent(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::TopLevelWindow::CanSetTransparent
static JSValue callback_method_Ozone_TopLevelWindow_CanSetTransparent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->CanSetTransparent();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::AddGrab
static JSValue callback_method_Ozone_TopLevelWindow_AddGrab(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    instance->AddGrab();

    return JS_UNDEFINED;
}

// Ozone::TopLevelWindow::RemoveGrab
static JSValue callback_method_Ozone_TopLevelWindow_RemoveGrab(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    instance->RemoveGrab();

    return JS_UNDEFINED;
}

// Ozone::TopLevelWindow::IsGrabbed
static JSValue callback_method_Ozone_TopLevelWindow_IsGrabbed(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->IsGrabbed();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::Refresh
static JSValue callback_method_Ozone_TopLevelWindow_Refresh(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 2 || argc > 2)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsObject(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void Refresh(bool eraseBackground, const ::Ozone::Rect* rect) override
overload0:
    {
        bool eraseBackground;
        eraseBackground = JS_ToBool(ctx, argv[0]);
        if (eraseBackground == -1)
            return JS_EXCEPTION;

        auto __arg0 = eraseBackground;
        Ozone::Rect* rect_instance = (Ozone::Rect*) JS_GetOpaque(argv[1], classId_Ozone_Rect);

        auto __arg1 = rect_instance;
        instance->Refresh(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::SetIconizeState
static JSValue callback_method_Ozone_TopLevelWindow_SetIconizeState(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetIconizeState(bool iconic)
overload0:
    {
        bool iconic;
        iconic = JS_ToBool(ctx, argv[0]);
        if (iconic == -1)
            return JS_EXCEPTION;

        auto __arg0 = iconic;
        instance->SetIconizeState(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::IsAlwaysMaximized
static JSValue callback_method_Ozone_TopLevelWindow_IsAlwaysMaximized(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->IsAlwaysMaximized();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::EnableFullScreenView
static JSValue callback_method_Ozone_TopLevelWindow_EnableFullScreenView(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool EnableFullScreenView(bool _0)
overload0:
    {
        bool _0;
        _0 = JS_ToBool(ctx, argv[0]);
        if (_0 == -1)
            return JS_EXCEPTION;

        auto __arg0 = _0;
        bool __ret = instance->EnableFullScreenView(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::TopLevelWindow::EnableMaximizeButton
static JSValue callback_method_Ozone_TopLevelWindow_EnableMaximizeButton(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool EnableMaximizeButton(bool _0)
overload0:
    {
        bool _0;
        _0 = JS_ToBool(ctx, argv[0]);
        if (_0 == -1)
            return JS_EXCEPTION;

        auto __arg0 = _0;
        bool __ret = instance->EnableMaximizeButton(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::TopLevelWindow::EnableMinimizeButton
static JSValue callback_method_Ozone_TopLevelWindow_EnableMinimizeButton(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool EnableMinimizeButton(bool _0)
overload0:
    {
        bool _0;
        _0 = JS_ToBool(ctx, argv[0]);
        if (_0 == -1)
            return JS_EXCEPTION;

        auto __arg0 = _0;
        bool __ret = instance->EnableMinimizeButton(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::TopLevelWindow::ShouldPreventAppExit
static JSValue callback_method_Ozone_TopLevelWindow_ShouldPreventAppExit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->ShouldPreventAppExit();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::CentreOnScreen
static JSValue callback_method_Ozone_TopLevelWindow_CentreOnScreen(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void CentreOnScreen(int dir)
overload0:
    {
        int dir;
        if (JS_ToInt32(ctx, (int32_t*) &dir, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = dir;
        instance->CentreOnScreen(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::CenterOnScreen
static JSValue callback_method_Ozone_TopLevelWindow_CenterOnScreen(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void CenterOnScreen(int dir)
overload0:
    {
        int dir;
        if (JS_ToInt32(ctx, (int32_t*) &dir, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = dir;
        instance->CenterOnScreen(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::GetDefaultItem
static JSValue callback_method_Ozone_TopLevelWindow_GetDefaultItem(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    ::Ozone::Window* __ret = instance->GetDefaultItem();

    JSValue ____ret_instance = JS_NewObjectClass(ctx, 0);

    return ____ret_instance;
}

// Ozone::TopLevelWindow::SetDefaultItem
static JSValue callback_method_Ozone_TopLevelWindow_SetDefaultItem(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Window* SetDefaultItem(::Ozone::Window* win)
overload0:
    {
        Ozone::Window* win_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = win_instance;
        ::Ozone::Window* __ret = instance->SetDefaultItem(__arg0);

        JSValue ____ret_instance = JS_NewObjectClass(ctx, 0);

        return ____ret_instance;
    }
}

// Ozone::TopLevelWindow::GetTmpDefaultItem
static JSValue callback_method_Ozone_TopLevelWindow_GetTmpDefaultItem(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    ::Ozone::Window* __ret = instance->GetTmpDefaultItem();

    JSValue ____ret_instance = JS_NewObjectClass(ctx, 0);

    return ____ret_instance;
}

// Ozone::TopLevelWindow::SetTmpDefaultItem
static JSValue callback_method_Ozone_TopLevelWindow_SetTmpDefaultItem(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Window* SetTmpDefaultItem(::Ozone::Window* win)
overload0:
    {
        Ozone::Window* win_instance = (Ozone::Window*) JS_GetOpaque(argv[0], classId_Ozone_Window);

        auto __arg0 = win_instance;
        ::Ozone::Window* __ret = instance->SetTmpDefaultItem(__arg0);

        JSValue ____ret_instance = JS_NewObjectClass(ctx, 0);

        return ____ret_instance;
    }
}

// Ozone::TopLevelWindow::Destroy
static JSValue callback_method_Ozone_TopLevelWindow_Destroy(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->Destroy();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::IsTopLevel
static JSValue callback_method_Ozone_TopLevelWindow_IsTopLevel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->IsTopLevel();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::IsTopNavigationDomain
static JSValue callback_method_Ozone_TopLevelWindow_IsTopNavigationDomain(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool IsTopNavigationDomain(::Ozone::Window::NavigationKind kind) const override
overload0:
    {
        unsigned int kind;
        if (JS_ToUint32(ctx, (uint32_t*) &kind, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = (::Ozone::Window::NavigationKind)kind;
        bool __ret = instance->IsTopNavigationDomain(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::TopLevelWindow::IsVisible
static JSValue callback_method_Ozone_TopLevelWindow_IsVisible(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->IsVisible();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::Layout
static JSValue callback_method_Ozone_TopLevelWindow_Layout(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->Layout();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::DoUpdateWindowUI
static JSValue callback_method_Ozone_TopLevelWindow_DoUpdateWindowUI(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void DoUpdateWindowUI(::Ozone::UpdateUIEvent& event) override
overload0:
    {
        Ozone::UpdateUIEvent* event_instance = (Ozone::UpdateUIEvent*) JS_GetOpaque(argv[0], classId_Ozone_UpdateUIEvent);

        auto &__arg0 = *event_instance;
        instance->DoUpdateWindowUI(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::SetMinSize
static JSValue callback_method_Ozone_TopLevelWindow_SetMinSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetMinSize(const ::Ozone::Size& minSize) override
overload0:
    {
        Ozone::Size* minSize_instance = (Ozone::Size*) JS_GetOpaque(argv[0], classId_Ozone_Size);

        auto &__arg0 = *minSize_instance;
        instance->SetMinSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::SetMaxSize
static JSValue callback_method_Ozone_TopLevelWindow_SetMaxSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetMaxSize(const ::Ozone::Size& maxSize) override
overload0:
    {
        Ozone::Size* maxSize_instance = (Ozone::Size*) JS_GetOpaque(argv[0], classId_Ozone_Size);

        auto &__arg0 = *maxSize_instance;
        instance->SetMaxSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::SetRepresentedFilename
static JSValue callback_method_Ozone_TopLevelWindow_SetRepresentedFilename(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsString(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetRepresentedFilename(const char* _0)
overload0:
    {
        const char* _0;
        _0 = JS_ToCString(ctx, argv[0]);
        if (!_0)
            return JS_EXCEPTION;

        auto __arg0 = _0;
        instance->SetRepresentedFilename(__arg0);

        JS_FreeCString(ctx, _0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::get_m_fsIsShowing
static JSValue callback_method_Ozone_TopLevelWindow_get_m_fsIsShowing(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    bool __ret = instance->get_m_fsIsShowing();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::set_m_fsIsShowing
static JSValue callback_method_Ozone_TopLevelWindow_set_m_fsIsShowing(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_fsIsShowing(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;

        auto __arg0 = value;
        instance->set_m_fsIsShowing(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::get_m_fsSaveGdkFunc
static JSValue callback_method_Ozone_TopLevelWindow_get_m_fsSaveGdkFunc(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    int __ret = instance->get_m_fsSaveGdkFunc();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::set_m_fsSaveGdkFunc
static JSValue callback_method_Ozone_TopLevelWindow_set_m_fsSaveGdkFunc(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_fsSaveGdkFunc(int value)
overload0:
    {
        int value;
        if (JS_ToInt32(ctx, (int32_t*) &value, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = value;
        instance->set_m_fsSaveGdkFunc(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::get_m_fsSaveGdkDecor
static JSValue callback_method_Ozone_TopLevelWindow_get_m_fsSaveGdkDecor(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    int __ret = instance->get_m_fsSaveGdkDecor();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::set_m_fsSaveGdkDecor
static JSValue callback_method_Ozone_TopLevelWindow_set_m_fsSaveGdkDecor(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_fsSaveGdkDecor(int value)
overload0:
    {
        int value;
        if (JS_ToInt32(ctx, (int32_t*) &value, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = value;
        instance->set_m_fsSaveGdkDecor(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::get_m_fsSaveFrame
static JSValue callback_method_Ozone_TopLevelWindow_get_m_fsSaveFrame(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    ::Ozone::Rect __ret = instance->get_m_fsSaveFrame();

    JSValue ____ret_instance = JS_NewObjectClass(ctx, 0);

    return ____ret_instance;
}

// Ozone::TopLevelWindow::set_m_fsSaveFrame
static JSValue callback_method_Ozone_TopLevelWindow_set_m_fsSaveFrame(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsObject(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_fsSaveFrame(::Ozone::Rect value)
overload0:
    {
        Ozone::Rect* value_instance = (Ozone::Rect*) JS_GetOpaque(argv[0], classId_Ozone_Rect);

        auto __arg0 = *value_instance;
        instance->set_m_fsSaveFrame(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::get_m_gdkFunc
static JSValue callback_method_Ozone_TopLevelWindow_get_m_gdkFunc(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    int __ret = instance->get_m_gdkFunc();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::set_m_gdkFunc
static JSValue callback_method_Ozone_TopLevelWindow_set_m_gdkFunc(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_gdkFunc(int value)
overload0:
    {
        int value;
        if (JS_ToInt32(ctx, (int32_t*) &value, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = value;
        instance->set_m_gdkFunc(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::get_m_gdkDecor
static JSValue callback_method_Ozone_TopLevelWindow_get_m_gdkDecor(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    int __ret = instance->get_m_gdkDecor();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::set_m_gdkDecor
static JSValue callback_method_Ozone_TopLevelWindow_set_m_gdkDecor(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_gdkDecor(int value)
overload0:
    {
        int value;
        if (JS_ToInt32(ctx, (int32_t*) &value, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = value;
        instance->set_m_gdkDecor(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::get_m_urgency_hint
static JSValue callback_method_Ozone_TopLevelWindow_get_m_urgency_hint(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    int __ret = instance->get_m_urgency_hint();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::set_m_urgency_hint
static JSValue callback_method_Ozone_TopLevelWindow_set_m_urgency_hint(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_urgency_hint(int value)
overload0:
    {
        int value;
        if (JS_ToInt32(ctx, (int32_t*) &value, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = value;
        instance->set_m_urgency_hint(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::get_m_netFrameExtentsTimerId
static JSValue callback_method_Ozone_TopLevelWindow_get_m_netFrameExtentsTimerId(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    unsigned int __ret = instance->get_m_netFrameExtentsTimerId();

    JSValue ____ret = JS_NewUint32(ctx, __ret);

    return ____ret;
}

// Ozone::TopLevelWindow::set_m_netFrameExtentsTimerId
static JSValue callback_method_Ozone_TopLevelWindow_set_m_netFrameExtentsTimerId(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 1)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(this_val, 0);
    Ozone::TopLevelWindow* instance = data->instance;

    if (JS_IsNumber(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_netFrameExtentsTimerId(unsigned int value)
overload0:
    {
        unsigned int value;
        if (JS_ToUint32(ctx, (uint32_t*) &value, argv[0]))
            return JS_EXCEPTION;

        auto __arg0 = value;
        instance->set_m_netFrameExtentsTimerId(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::TopLevelWindow::GetDefaultSize
static JSValue callback_method_Ozone_TopLevelWindow_GetDefaultSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
    {
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");
    }

    ::Ozone::Size __ret = ::Ozone::TopLevelWindow::GetDefaultSize();

    JSValue ____ret_instance = JS_NewObjectClass(ctx, 0);

    return ____ret_instance;
}

static JSValue callback_class_Ozone_TopLevelWindow_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "TopLevelWindow");
}

void finalizer_Ozone_TopLevelWindow(JSRuntime *rt, JSValue val)
{
    auto data = (data_Ozone_TopLevelWindow*) JS_GetOpaque(val, 0);
    Ozone::TopLevelWindow* instance = data->instance;
    JS_Interop_FreeEventMap(&data->events, data->ctx);
}

static JSClassDef classDef_Ozone_TopLevelWindow
{
    "TopLevelWindow",
    .finalizer = finalizer_Ozone_TopLevelWindow
};

static JSCFunctionListEntry funcDef_Ozone_TopLevelWindow[]
{
    JS_CGETSET_DEF("OnMaximize", callback_event_getter_Ozone_TopLevelWindow_OnMaximize, NULL),
    JS_CGETSET_DEF("OnMove", callback_event_getter_Ozone_TopLevelWindow_OnMove, NULL),
    JS_CGETSET_DEF("OnMoveStart", callback_event_getter_Ozone_TopLevelWindow_OnMoveStart, NULL),
    JS_CGETSET_DEF("OnMoveEnd", callback_event_getter_Ozone_TopLevelWindow_OnMoveEnd, NULL),
    JS_CGETSET_DEF("OnShow", callback_event_getter_Ozone_TopLevelWindow_OnShow, NULL),
    JS_CFUNC_DEF("Create", 7, callback_method_Ozone_TopLevelWindow_Create),
    JS_CFUNC_DEF("Maximize", 1, callback_method_Ozone_TopLevelWindow_Maximize),
    JS_CFUNC_DEF("IsMaximized", 0, callback_method_Ozone_TopLevelWindow_IsMaximized),
    JS_CFUNC_DEF("Iconize", 1, callback_method_Ozone_TopLevelWindow_Iconize),
    JS_CFUNC_DEF("IsIconized", 0, callback_method_Ozone_TopLevelWindow_IsIconized),
    JS_CFUNC_DEF("Restore", 0, callback_method_Ozone_TopLevelWindow_Restore),
    JS_CFUNC_DEF("EnableCloseButton", 1, callback_method_Ozone_TopLevelWindow_EnableCloseButton),
    JS_CFUNC_DEF("ShowWithoutActivating", 0, callback_method_Ozone_TopLevelWindow_ShowWithoutActivating),
    JS_CFUNC_DEF("ShowFullScreen", 2, callback_method_Ozone_TopLevelWindow_ShowFullScreen),
    JS_CFUNC_DEF("IsFullScreen", 0, callback_method_Ozone_TopLevelWindow_IsFullScreen),
    JS_CFUNC_DEF("RequestUserAttention", 1, callback_method_Ozone_TopLevelWindow_RequestUserAttention),
    JS_CFUNC_DEF("SetWindowStyleFlag", 1, callback_method_Ozone_TopLevelWindow_SetWindowStyleFlag),
    JS_CFUNC_DEF("Show", 1, callback_method_Ozone_TopLevelWindow_Show),
    JS_CFUNC_DEF("Raise", 0, callback_method_Ozone_TopLevelWindow_Raise),
    JS_CFUNC_DEF("IsActive", 0, callback_method_Ozone_TopLevelWindow_IsActive),
    JS_CFUNC_DEF("SetTitle", 1, callback_method_Ozone_TopLevelWindow_SetTitle),
    JS_CFUNC_DEF("GetTitle", 0, callback_method_Ozone_TopLevelWindow_GetTitle),
    JS_CFUNC_DEF("SetLabel", 1, callback_method_Ozone_TopLevelWindow_SetLabel),
    JS_CFUNC_DEF("GetLabel", 0, callback_method_Ozone_TopLevelWindow_GetLabel),
    JS_CFUNC_DEF("GetDefaultAttributes", 0, callback_method_Ozone_TopLevelWindow_GetDefaultAttributes),
    JS_CFUNC_DEF("SetTransparent", 1, callback_method_Ozone_TopLevelWindow_SetTransparent),
    JS_CFUNC_DEF("CanSetTransparent", 0, callback_method_Ozone_TopLevelWindow_CanSetTransparent),
    JS_CFUNC_DEF("AddGrab", 0, callback_method_Ozone_TopLevelWindow_AddGrab),
    JS_CFUNC_DEF("RemoveGrab", 0, callback_method_Ozone_TopLevelWindow_RemoveGrab),
    JS_CFUNC_DEF("IsGrabbed", 0, callback_method_Ozone_TopLevelWindow_IsGrabbed),
    JS_CFUNC_DEF("Refresh", 2, callback_method_Ozone_TopLevelWindow_Refresh),
    JS_CFUNC_DEF("SetIconizeState", 1, callback_method_Ozone_TopLevelWindow_SetIconizeState),
    JS_CFUNC_DEF("IsAlwaysMaximized", 0, callback_method_Ozone_TopLevelWindow_IsAlwaysMaximized),
    JS_CFUNC_DEF("EnableFullScreenView", 1, callback_method_Ozone_TopLevelWindow_EnableFullScreenView),
    JS_CFUNC_DEF("EnableMaximizeButton", 1, callback_method_Ozone_TopLevelWindow_EnableMaximizeButton),
    JS_CFUNC_DEF("EnableMinimizeButton", 1, callback_method_Ozone_TopLevelWindow_EnableMinimizeButton),
    JS_CFUNC_DEF("ShouldPreventAppExit", 0, callback_method_Ozone_TopLevelWindow_ShouldPreventAppExit),
    JS_CFUNC_DEF("CentreOnScreen", 1, callback_method_Ozone_TopLevelWindow_CentreOnScreen),
    JS_CFUNC_DEF("CenterOnScreen", 1, callback_method_Ozone_TopLevelWindow_CenterOnScreen),
    JS_CFUNC_DEF("GetDefaultItem", 0, callback_method_Ozone_TopLevelWindow_GetDefaultItem),
    JS_CFUNC_DEF("SetDefaultItem", 1, callback_method_Ozone_TopLevelWindow_SetDefaultItem),
    JS_CFUNC_DEF("GetTmpDefaultItem", 0, callback_method_Ozone_TopLevelWindow_GetTmpDefaultItem),
    JS_CFUNC_DEF("SetTmpDefaultItem", 1, callback_method_Ozone_TopLevelWindow_SetTmpDefaultItem),
    JS_CFUNC_DEF("Destroy", 0, callback_method_Ozone_TopLevelWindow_Destroy),
    JS_CFUNC_DEF("IsTopLevel", 0, callback_method_Ozone_TopLevelWindow_IsTopLevel),
    JS_CFUNC_DEF("IsTopNavigationDomain", 1, callback_method_Ozone_TopLevelWindow_IsTopNavigationDomain),
    JS_CFUNC_DEF("IsVisible", 0, callback_method_Ozone_TopLevelWindow_IsVisible),
    JS_CFUNC_DEF("Layout", 0, callback_method_Ozone_TopLevelWindow_Layout),
    JS_CFUNC_DEF("DoUpdateWindowUI", 1, callback_method_Ozone_TopLevelWindow_DoUpdateWindowUI),
    JS_CFUNC_DEF("SetMinSize", 1, callback_method_Ozone_TopLevelWindow_SetMinSize),
    JS_CFUNC_DEF("SetMaxSize", 1, callback_method_Ozone_TopLevelWindow_SetMaxSize),
    JS_CFUNC_DEF("SetRepresentedFilename", 1, callback_method_Ozone_TopLevelWindow_SetRepresentedFilename),
    JS_CFUNC_DEF("get_m_fsIsShowing", 0, callback_method_Ozone_TopLevelWindow_get_m_fsIsShowing),
    JS_CFUNC_DEF("set_m_fsIsShowing", 1, callback_method_Ozone_TopLevelWindow_set_m_fsIsShowing),
    JS_CFUNC_DEF("get_m_fsSaveGdkFunc", 0, callback_method_Ozone_TopLevelWindow_get_m_fsSaveGdkFunc),
    JS_CFUNC_DEF("set_m_fsSaveGdkFunc", 1, callback_method_Ozone_TopLevelWindow_set_m_fsSaveGdkFunc),
    JS_CFUNC_DEF("get_m_fsSaveGdkDecor", 0, callback_method_Ozone_TopLevelWindow_get_m_fsSaveGdkDecor),
    JS_CFUNC_DEF("set_m_fsSaveGdkDecor", 1, callback_method_Ozone_TopLevelWindow_set_m_fsSaveGdkDecor),
    JS_CFUNC_DEF("get_m_fsSaveFrame", 0, callback_method_Ozone_TopLevelWindow_get_m_fsSaveFrame),
    JS_CFUNC_DEF("set_m_fsSaveFrame", 1, callback_method_Ozone_TopLevelWindow_set_m_fsSaveFrame),
    JS_CFUNC_DEF("get_m_gdkFunc", 0, callback_method_Ozone_TopLevelWindow_get_m_gdkFunc),
    JS_CFUNC_DEF("set_m_gdkFunc", 1, callback_method_Ozone_TopLevelWindow_set_m_gdkFunc),
    JS_CFUNC_DEF("get_m_gdkDecor", 0, callback_method_Ozone_TopLevelWindow_get_m_gdkDecor),
    JS_CFUNC_DEF("set_m_gdkDecor", 1, callback_method_Ozone_TopLevelWindow_set_m_gdkDecor),
    JS_CFUNC_DEF("get_m_urgency_hint", 0, callback_method_Ozone_TopLevelWindow_get_m_urgency_hint),
    JS_CFUNC_DEF("set_m_urgency_hint", 1, callback_method_Ozone_TopLevelWindow_set_m_urgency_hint),
    JS_CFUNC_DEF("get_m_netFrameExtentsTimerId", 0, callback_method_Ozone_TopLevelWindow_get_m_netFrameExtentsTimerId),
    JS_CFUNC_DEF("set_m_netFrameExtentsTimerId", 1, callback_method_Ozone_TopLevelWindow_set_m_netFrameExtentsTimerId),
    JS_CFUNC_DEF("GetDefaultSize", 0, callback_method_Ozone_TopLevelWindow_GetDefaultSize),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_TopLevelWindow_toString),
};

static void register_class_Ozone_TopLevelWindow(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "TopLevelWindow");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_TopLevelWindow);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_TopLevelWindow, &classDef_Ozone_TopLevelWindow);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_TopLevelWindow, sizeof(funcDef_Ozone_TopLevelWindow) / sizeof(funcDef_Ozone_TopLevelWindow[0]));
        JS_SetClassProto(ctx, classId_Ozone_TopLevelWindow, proto);

        JSValue ctor = JS_NewCFunction2(ctx, callback_method_Ozone_TopLevelWindow_TopLevelWindow, "TopLevelWindow", 7, JS_CFUNC_constructor, 0);
        JS_SetConstructor(ctx, ctor, proto);

        JS_SetModuleExport(ctx, m, "TopLevelWindow", ctor);
    }
    else if (phase == 1)
    {
        JSValue proto = JS_GetClassProto(ctx, classId_Ozone_TopLevelWindow);
        JSValue baseProto = JS_GetClassProto(ctx, classId_Ozone_NonOwnedWindow);
        int err = JS_SetPrototype(ctx, proto, baseProto);
        assert(err != -1);
        JS_FreeValue(ctx, baseProto);
        JS_FreeValue(ctx, proto);
    }
}

void register_ozone_toplevel(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (phase == 0)
    {
        register_enum_Ozone_FrameStyle(ctx, m, set);

        register_enum_Ozone_FullscreenMode(ctx, m, set);

        register_enum_Ozone_UserAttention(ctx, m, set);
    }

    register_class_Ozone_TopLevelWindow(ctx, m, set, phase);
}

} // extern "C"
