// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <CppSharp_QuickJS.h>
#include <assert.h>
#include <ozone/webview.h>

extern "C" {

extern JSClassID classId_Ozone_WebViewHandler;
extern JSClassID classId_Ozone_WebView;
extern JSClassID classId_Ozone_Window;
extern JSClassID classId_Ozone_Point;
extern JSClassID classId_Ozone_Size;
extern JSClassID classId_Ozone_WebViewEvent;
extern JSClassID classId_Ozone_NotifyEvent;
extern JSClassID classId_Ozone_Event;
extern JSClassID classId__Signal;

static void register_enum_Ozone_WebViewReloadFlags(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "WebViewReloadFlags");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // DEFAULT
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "DEFAULT", __item);
    }

    // NO_CACHE
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "NO_CACHE", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "WebViewReloadFlags", val);
    assert(status != -1);
}

static void register_enum_Ozone_WebViewZoomType(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "WebViewZoomType");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // LAYOUT
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "LAYOUT", __item);
    }

    // TEXT
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "TEXT", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "WebViewZoomType", val);
    assert(status != -1);
}

static void register_enum_Ozone_WebViewZoom(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "WebViewZoom");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // TINY
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "TINY", __item);
    }

    // SMALL
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "SMALL", __item);
    }

    // MEDIUM
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "MEDIUM", __item);
    }

    // LARGE
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "LARGE", __item);
    }

    // LARGEST
    {
        JSValue __item = JS_NewUint32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "LARGEST", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "WebViewZoom", val);
    assert(status != -1);
}

static void register_enum_Ozone_WebViewNavigationActionFlags(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "WebViewNavigationActionFlags");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // NONE
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "NONE", __item);
    }

    // USER
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "USER", __item);
    }

    // OTHER
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "OTHER", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "WebViewNavigationActionFlags", val);
    assert(status != -1);
}

static void register_enum_Ozone_WebViewFindFlags(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "WebViewFindFlags");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // WRAP
    {
        JSValue __item = JS_NewUint32(ctx, 0x1);
        JS_SetPropertyStr(ctx, val, "WRAP", __item);
    }

    // ENTIRE_WORD
    {
        JSValue __item = JS_NewUint32(ctx, 0x2);
        JS_SetPropertyStr(ctx, val, "ENTIRE_WORD", __item);
    }

    // MATCH_CASE
    {
        JSValue __item = JS_NewUint32(ctx, 0x4);
        JS_SetPropertyStr(ctx, val, "MATCH_CASE", __item);
    }

    // HIGHLIGHT_RESULT
    {
        JSValue __item = JS_NewUint32(ctx, 0x8);
        JS_SetPropertyStr(ctx, val, "HIGHLIGHT_RESULT", __item);
    }

    // BACKWARDS
    {
        JSValue __item = JS_NewUint32(ctx, 0x10);
        JS_SetPropertyStr(ctx, val, "BACKWARDS", __item);
    }

    // DEFAULT
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "DEFAULT", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "WebViewFindFlags", val);
    assert(status != -1);
}

static void register_enum_Ozone_WebViewNavigationError(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "WebViewNavigationError");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // CONNECTION
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "CONNECTION", __item);
    }

    // CERTIFICATE
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "CERTIFICATE", __item);
    }

    // AUTH
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "AUTH", __item);
    }

    // SECURITY
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "SECURITY", __item);
    }

    // NOT_FOUND
    {
        JSValue __item = JS_NewUint32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "NOT_FOUND", __item);
    }

    // REQUEST
    {
        JSValue __item = JS_NewUint32(ctx, 5);
        JS_SetPropertyStr(ctx, val, "REQUEST", __item);
    }

    // USER_CANCELLED
    {
        JSValue __item = JS_NewUint32(ctx, 6);
        JS_SetPropertyStr(ctx, val, "USER_CANCELLED", __item);
    }

    // OTHER
    {
        JSValue __item = JS_NewUint32(ctx, 7);
        JS_SetPropertyStr(ctx, val, "OTHER", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "WebViewNavigationError", val);
    assert(status != -1);
}

JSClassID classId_Ozone_WebViewHandler;

// Ozone::WebViewHandler::WebViewHandler
static JSValue callback_method_Ozone_WebViewHandler_WebViewHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebViewHandler* instance;

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // WebViewHandler(const char* scheme)
overload0:
    {
        const char* scheme;
        scheme = JS_ToCString(ctx, argv[0]);
        if (!scheme)
            return JS_EXCEPTION;
        auto __arg0 = scheme;

        instance = new Ozone::WebViewHandler(__arg0);

        JS_FreeCString(ctx, scheme);
        goto wrap;
    }

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_WebViewHandler);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_WebViewHandler);
    JS_FreeValue(ctx, proto);

    JS_Interop_InitObject(ctx, __obj, JS_INTEROP_INSTANCE_RAW_POINTER, instance);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::WebViewHandler::GetName
static JSValue callback_method_Ozone_WebViewHandler_GetName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebViewHandler* instance = (Ozone::WebViewHandler*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetName();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::WebViewHandler::SetSecurityURL
static JSValue callback_method_Ozone_WebViewHandler_SetSecurityURL(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebViewHandler* instance = (Ozone::WebViewHandler*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetSecurityURL(const char* url)
overload0:
    {
        const char* url;
        url = JS_ToCString(ctx, argv[0]);
        if (!url)
            return JS_EXCEPTION;
        auto __arg0 = url;

        instance->SetSecurityURL(__arg0);

        JS_FreeCString(ctx, url);

        return JS_UNDEFINED;
    }
}

// Ozone::WebViewHandler::GetSecurityURL
static JSValue callback_method_Ozone_WebViewHandler_GetSecurityURL(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebViewHandler* instance = (Ozone::WebViewHandler*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetSecurityURL();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

static JSValue callback_class_Ozone_WebViewHandler_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "WebViewHandler");
}

void finalizer_Ozone_WebViewHandler(JSRuntime *rt, JSValue val)
{
    Ozone::WebViewHandler* instance = (Ozone::WebViewHandler*) JS_GetOpaque(val, 0);
}

static JSClassDef classDef_Ozone_WebViewHandler
{
    "WebViewHandler",
    .finalizer = finalizer_Ozone_WebViewHandler
};

static JSCFunctionListEntry funcDef_Ozone_WebViewHandler[]
{
    JS_CFUNC_DEF("GetName", 0, callback_method_Ozone_WebViewHandler_GetName),
    JS_CFUNC_DEF("SetSecurityURL", 1, callback_method_Ozone_WebViewHandler_SetSecurityURL),
    JS_CFUNC_DEF("GetSecurityURL", 0, callback_method_Ozone_WebViewHandler_GetSecurityURL),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_WebViewHandler_toString),
};

static void register_class_Ozone_WebViewHandler(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "WebViewHandler");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_WebViewHandler);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_WebViewHandler, &classDef_Ozone_WebViewHandler);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_WebViewHandler, sizeof(funcDef_Ozone_WebViewHandler) / sizeof(funcDef_Ozone_WebViewHandler[0]));
        JS_SetClassProto(ctx, classId_Ozone_WebViewHandler, proto);

        JSValue ctor = JS_NewCFunction2(ctx, callback_method_Ozone_WebViewHandler_WebViewHandler, "WebViewHandler", 1, JS_CFUNC_constructor, 0);
        JS_SetConstructor(ctx, ctor, proto);

        JS_SetModuleExport(ctx, m, "WebViewHandler", ctor);
    }
}

JSClassID classId_Ozone_WebView;

// Ozone::WebView::WebView
static JSValue callback_method_Ozone_WebView_WebView(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance;

    instance = new Ozone::WebView();
    goto wrap;

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_WebView);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_WebView);
    JS_FreeValue(ctx, proto);

    JS_Interop_InitObject(ctx, __obj, JS_INTEROP_INSTANCE_RAW_POINTER, instance);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::WebView::Create
static JSValue callback_method_Ozone_WebView_Create(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 7)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsString(argv[2]) || JS_IsNull(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsObject(argv[3]) || JS_IsNull(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsObject(argv[4]) || JS_IsNull(argv[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (JS_IsInt32(argv[5]))
        goto typecheck6;

    goto error;

typecheck6:
    if (JS_IsString(argv[6]) || JS_IsNull(argv[6]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Create(::Ozone::Window* parent, int id, const char* url, const ::Ozone::Point& pos, const ::Ozone::Size& size, long style, const char* name)
overload0:
    {
        Ozone::Window* parent_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = parent_instance;

        int id;
        int32_t _id;
        if (JS_ToInt32(ctx, &_id, argv[1]))
            return JS_EXCEPTION;
        id = (int)_id;
        auto __arg1 = id;

        const char* url;
        url = JS_ToCString(ctx, argv[2]);
        if (!url)
            return JS_EXCEPTION;
        auto __arg2 = url;

        Ozone::Point* pos_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[3], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg3 = *pos_instance;

        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[4], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg4 = *size_instance;

        long style;
        int32_t _style;
        if (JS_ToInt32(ctx, &_style, argv[5]))
            return JS_EXCEPTION;
        style = (long)_style;
        auto __arg5 = style;

        const char* name;
        name = JS_ToCString(ctx, argv[6]);
        if (!name)
            return JS_EXCEPTION;
        auto __arg6 = name;

        bool __ret = instance->Create(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);

        JS_FreeCString(ctx, url);
        JS_FreeCString(ctx, name);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::WebView::EnableContextMenu
static JSValue callback_method_Ozone_WebView_EnableContextMenu(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void EnableContextMenu(bool enable)
overload0:
    {
        bool enable;
        enable = JS_ToBool(ctx, argv[0]);
        if (enable == -1)
            return JS_EXCEPTION;
        auto __arg0 = enable;

        instance->EnableContextMenu(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::EnableAccessToDevTools
static JSValue callback_method_Ozone_WebView_EnableAccessToDevTools(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void EnableAccessToDevTools(bool _0)
overload0:
    {
        bool _0;
        _0 = JS_ToBool(ctx, argv[0]);
        if (_0 == -1)
            return JS_EXCEPTION;
        auto __arg0 = _0;

        instance->EnableAccessToDevTools(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::GetCurrentTitle
static JSValue callback_method_Ozone_WebView_GetCurrentTitle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetCurrentTitle();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::GetCurrentURL
static JSValue callback_method_Ozone_WebView_GetCurrentURL(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetCurrentURL();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::GetPageSource
static JSValue callback_method_Ozone_WebView_GetPageSource(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetPageSource();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::GetPageText
static JSValue callback_method_Ozone_WebView_GetPageText(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetPageText();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::IsBusy
static JSValue callback_method_Ozone_WebView_IsBusy(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->IsBusy();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::IsContextMenuEnabled
static JSValue callback_method_Ozone_WebView_IsContextMenuEnabled(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->IsContextMenuEnabled();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::IsAccessToDevToolsEnabled
static JSValue callback_method_Ozone_WebView_IsAccessToDevToolsEnabled(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->IsAccessToDevToolsEnabled();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::IsEditable
static JSValue callback_method_Ozone_WebView_IsEditable(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->IsEditable();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::LoadURL
static JSValue callback_method_Ozone_WebView_LoadURL(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void LoadURL(const char* url)
overload0:
    {
        const char* url;
        url = JS_ToCString(ctx, argv[0]);
        if (!url)
            return JS_EXCEPTION;
        auto __arg0 = url;

        instance->LoadURL(__arg0);

        JS_FreeCString(ctx, url);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::Print
static JSValue callback_method_Ozone_WebView_Print(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->Print();

    return JS_UNDEFINED;
}

// Ozone::WebView::Reload
static JSValue callback_method_Ozone_WebView_Reload(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void Reload(::Ozone::WebViewReloadFlags flags)
overload0:
    {
        unsigned int flags;
        uint32_t _flags;
        if (JS_ToUint32(ctx, &_flags, argv[0]))
            return JS_EXCEPTION;
        flags = (unsigned int)_flags;
        auto __arg0 = (::Ozone::WebViewReloadFlags)flags;

        instance->Reload(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::RunScript
static JSValue callback_method_Ozone_WebView_RunScript(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsString(argv[1]) || JS_IsNull(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool RunScript(const char* javascript, const char* output) const
overload0:
    {
        const char* javascript;
        javascript = JS_ToCString(ctx, argv[0]);
        if (!javascript)
            return JS_EXCEPTION;
        auto __arg0 = javascript;

        const char* output;
        output = JS_ToCString(ctx, argv[1]);
        if (!output)
            return JS_EXCEPTION;
        auto __arg1 = output;

        bool __ret = instance->RunScript(__arg0, __arg1);

        JS_FreeCString(ctx, javascript);
        JS_FreeCString(ctx, output);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::WebView::SetEditable
static JSValue callback_method_Ozone_WebView_SetEditable(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetEditable(bool enable)
overload0:
    {
        bool enable;
        enable = JS_ToBool(ctx, argv[0]);
        if (enable == -1)
            return JS_EXCEPTION;
        auto __arg0 = enable;

        instance->SetEditable(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::SetPage
static JSValue callback_method_Ozone_WebView_SetPage(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsString(argv[1]) || JS_IsNull(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetPage(const char* html, const char* baseUrl)
overload0:
    {
        const char* html;
        html = JS_ToCString(ctx, argv[0]);
        if (!html)
            return JS_EXCEPTION;
        auto __arg0 = html;

        const char* baseUrl;
        baseUrl = JS_ToCString(ctx, argv[1]);
        if (!baseUrl)
            return JS_EXCEPTION;
        auto __arg1 = baseUrl;

        instance->SetPage(__arg0, __arg1);

        JS_FreeCString(ctx, html);
        JS_FreeCString(ctx, baseUrl);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::Stop
static JSValue callback_method_Ozone_WebView_Stop(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->Stop();

    return JS_UNDEFINED;
}

// Ozone::WebView::CanGoBack
static JSValue callback_method_Ozone_WebView_CanGoBack(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->CanGoBack();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::CanGoForward
static JSValue callback_method_Ozone_WebView_CanGoForward(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->CanGoForward();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::GoBack
static JSValue callback_method_Ozone_WebView_GoBack(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->GoBack();

    return JS_UNDEFINED;
}

// Ozone::WebView::GoForward
static JSValue callback_method_Ozone_WebView_GoForward(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->GoForward();

    return JS_UNDEFINED;
}

// Ozone::WebView::ClearHistory
static JSValue callback_method_Ozone_WebView_ClearHistory(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->ClearHistory();

    return JS_UNDEFINED;
}

// Ozone::WebView::EnableHistory
static JSValue callback_method_Ozone_WebView_EnableHistory(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void EnableHistory(bool enable)
overload0:
    {
        bool enable;
        enable = JS_ToBool(ctx, argv[0]);
        if (enable == -1)
            return JS_EXCEPTION;
        auto __arg0 = enable;

        instance->EnableHistory(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::CanSetZoomType
static JSValue callback_method_Ozone_WebView_CanSetZoomType(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool CanSetZoomType(::Ozone::WebViewZoomType type) const
overload0:
    {
        unsigned int type;
        uint32_t _type;
        if (JS_ToUint32(ctx, &_type, argv[0]))
            return JS_EXCEPTION;
        type = (unsigned int)_type;
        auto __arg0 = (::Ozone::WebViewZoomType)type;

        bool __ret = instance->CanSetZoomType(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::WebView::GetZoom
static JSValue callback_method_Ozone_WebView_GetZoom(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    ::Ozone::WebViewZoom __ret = instance->GetZoom();

    JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

    return ____ret;
}

// Ozone::WebView::GetZoomFactor
static JSValue callback_method_Ozone_WebView_GetZoomFactor(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    float __ret = instance->GetZoomFactor();

    JSValue ____ret = JS_NewFloat64(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::GetZoomType
static JSValue callback_method_Ozone_WebView_GetZoomType(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    ::Ozone::WebViewZoomType __ret = instance->GetZoomType();

    JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

    return ____ret;
}

// Ozone::WebView::SetZoom
static JSValue callback_method_Ozone_WebView_SetZoom(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetZoom(::Ozone::WebViewZoom zoom)
overload0:
    {
        unsigned int zoom;
        uint32_t _zoom;
        if (JS_ToUint32(ctx, &_zoom, argv[0]))
            return JS_EXCEPTION;
        zoom = (unsigned int)_zoom;
        auto __arg0 = (::Ozone::WebViewZoom)zoom;

        instance->SetZoom(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::SetZoomFactor
static JSValue callback_method_Ozone_WebView_SetZoomFactor(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsFloat(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetZoomFactor(float zoom)
overload0:
    {
        float zoom;
        double _zoom;
        if (JS_ToFloat64(ctx, &_zoom, argv[0]))
            return JS_EXCEPTION;
        zoom = (float)_zoom;
        auto __arg0 = zoom;

        instance->SetZoomFactor(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::SetZoomType
static JSValue callback_method_Ozone_WebView_SetZoomType(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetZoomType(::Ozone::WebViewZoomType zoomType)
overload0:
    {
        unsigned int zoomType;
        uint32_t _zoomType;
        if (JS_ToUint32(ctx, &_zoomType, argv[0]))
            return JS_EXCEPTION;
        zoomType = (unsigned int)_zoomType;
        auto __arg0 = (::Ozone::WebViewZoomType)zoomType;

        instance->SetZoomType(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::WebView::SelectAll
static JSValue callback_method_Ozone_WebView_SelectAll(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->SelectAll();

    return JS_UNDEFINED;
}

// Ozone::WebView::HasSelection
static JSValue callback_method_Ozone_WebView_HasSelection(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->HasSelection();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::DeleteSelection
static JSValue callback_method_Ozone_WebView_DeleteSelection(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->DeleteSelection();

    return JS_UNDEFINED;
}

// Ozone::WebView::GetSelectedText
static JSValue callback_method_Ozone_WebView_GetSelectedText(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetSelectedText();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::GetSelectedSource
static JSValue callback_method_Ozone_WebView_GetSelectedSource(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    const char* __ret = instance->GetSelectedSource();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::ClearSelection
static JSValue callback_method_Ozone_WebView_ClearSelection(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->ClearSelection();

    return JS_UNDEFINED;
}

// Ozone::WebView::CanCut
static JSValue callback_method_Ozone_WebView_CanCut(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->CanCut();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::CanCopy
static JSValue callback_method_Ozone_WebView_CanCopy(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->CanCopy();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::CanPaste
static JSValue callback_method_Ozone_WebView_CanPaste(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->CanPaste();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::Cut
static JSValue callback_method_Ozone_WebView_Cut(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->Cut();

    return JS_UNDEFINED;
}

// Ozone::WebView::Copy
static JSValue callback_method_Ozone_WebView_Copy(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->Copy();

    return JS_UNDEFINED;
}

// Ozone::WebView::Paste
static JSValue callback_method_Ozone_WebView_Paste(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->Paste();

    return JS_UNDEFINED;
}

// Ozone::WebView::CanUndo
static JSValue callback_method_Ozone_WebView_CanUndo(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->CanUndo();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::CanRedo
static JSValue callback_method_Ozone_WebView_CanRedo(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    bool __ret = instance->CanRedo();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::WebView::Undo
static JSValue callback_method_Ozone_WebView_Undo(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->Undo();

    return JS_UNDEFINED;
}

// Ozone::WebView::Redo
static JSValue callback_method_Ozone_WebView_Redo(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    instance->Redo();

    return JS_UNDEFINED;
}

// Ozone::WebView::GetNativeBackend
static JSValue callback_method_Ozone_WebView_GetNativeBackend(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    void* __ret = instance->GetNativeBackend();

    return JS_UNDEFINED;
}

// Ozone::WebView::Find
static JSValue callback_method_Ozone_WebView_Find(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(this_val, 0);

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // long Find(const char* text, int flags)
overload0:
    {
        const char* text;
        text = JS_ToCString(ctx, argv[0]);
        if (!text)
            return JS_EXCEPTION;
        auto __arg0 = text;

        int flags;
        int32_t _flags;
        if (JS_ToInt32(ctx, &_flags, argv[1]))
            return JS_EXCEPTION;
        flags = (int)_flags;
        auto __arg1 = flags;

        long __ret = instance->Find(__arg0, __arg1);

        JS_FreeCString(ctx, text);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::WebView::New
static JSValue callback_method_Ozone_WebView_New(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 8)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsString(argv[2]) || JS_IsNull(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsObject(argv[3]) || JS_IsNull(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsObject(argv[4]) || JS_IsNull(argv[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (JS_IsString(argv[5]) || JS_IsNull(argv[5]))
        goto typecheck6;

    goto error;

typecheck6:
    if (JS_IsInt32(argv[6]))
        goto typecheck7;

    goto error;

typecheck7:
    if (JS_IsString(argv[7]) || JS_IsNull(argv[7]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::WebView* New(const char* backend)
overload0:
    {
        const char* backend;
        backend = JS_ToCString(ctx, argv[0]);
        if (!backend)
            return JS_EXCEPTION;
        auto __arg0 = backend;

        ::Ozone::WebView* __ret = ::Ozone::WebView::New(__arg0);

        JS_FreeCString(ctx, backend);


        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_WebView, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) __ret);

        return ____ret;
    }

    // ::Ozone::WebView* New(::Ozone::Window* parent, int id, const char* url, const ::Ozone::Point& pos, const ::Ozone::Size& size, const char* backend, long style, const char* name)
overload1:
    {
        Ozone::Window* parent_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = parent_instance;

        int id;
        int32_t _id;
        if (JS_ToInt32(ctx, &_id, argv[1]))
            return JS_EXCEPTION;
        id = (int)_id;
        auto __arg1 = id;

        const char* url;
        url = JS_ToCString(ctx, argv[2]);
        if (!url)
            return JS_EXCEPTION;
        auto __arg2 = url;

        Ozone::Point* pos_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[3], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg3 = *pos_instance;

        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[4], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg4 = *size_instance;

        const char* backend;
        backend = JS_ToCString(ctx, argv[5]);
        if (!backend)
            return JS_EXCEPTION;
        auto __arg5 = backend;

        long style;
        int32_t _style;
        if (JS_ToInt32(ctx, &_style, argv[6]))
            return JS_EXCEPTION;
        style = (long)_style;
        auto __arg6 = style;

        const char* name;
        name = JS_ToCString(ctx, argv[7]);
        if (!name)
            return JS_EXCEPTION;
        auto __arg7 = name;

        ::Ozone::WebView* __ret = ::Ozone::WebView::New(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6, __arg7);

        JS_FreeCString(ctx, url);
        JS_FreeCString(ctx, backend);
        JS_FreeCString(ctx, name);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_WebView, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) __ret);

        return ____ret;
    }
}

// Ozone::WebView::IsBackendAvailable
static JSValue callback_method_Ozone_WebView_IsBackendAvailable(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool IsBackendAvailable(const char* backend)
overload0:
    {
        const char* backend;
        backend = JS_ToCString(ctx, argv[0]);
        if (!backend)
            return JS_EXCEPTION;
        auto __arg0 = backend;

        bool __ret = ::Ozone::WebView::IsBackendAvailable(__arg0);

        JS_FreeCString(ctx, backend);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

static JSValue callback_class_Ozone_WebView_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "WebView");
}

void finalizer_Ozone_WebView(JSRuntime *rt, JSValue val)
{
    Ozone::WebView* instance = (Ozone::WebView*) JS_GetOpaque(val, 0);
}

static JSClassDef classDef_Ozone_WebView
{
    "WebView",
    .finalizer = finalizer_Ozone_WebView
};

static JSCFunctionListEntry funcDef_Ozone_WebView[]
{
    JS_CFUNC_DEF("Create", 7, callback_method_Ozone_WebView_Create),
    JS_CFUNC_DEF("EnableContextMenu", 1, callback_method_Ozone_WebView_EnableContextMenu),
    JS_CFUNC_DEF("EnableAccessToDevTools", 1, callback_method_Ozone_WebView_EnableAccessToDevTools),
    JS_CFUNC_DEF("GetCurrentTitle", 0, callback_method_Ozone_WebView_GetCurrentTitle),
    JS_CFUNC_DEF("GetCurrentURL", 0, callback_method_Ozone_WebView_GetCurrentURL),
    JS_CFUNC_DEF("GetPageSource", 0, callback_method_Ozone_WebView_GetPageSource),
    JS_CFUNC_DEF("GetPageText", 0, callback_method_Ozone_WebView_GetPageText),
    JS_CFUNC_DEF("IsBusy", 0, callback_method_Ozone_WebView_IsBusy),
    JS_CFUNC_DEF("IsContextMenuEnabled", 0, callback_method_Ozone_WebView_IsContextMenuEnabled),
    JS_CFUNC_DEF("IsAccessToDevToolsEnabled", 0, callback_method_Ozone_WebView_IsAccessToDevToolsEnabled),
    JS_CFUNC_DEF("IsEditable", 0, callback_method_Ozone_WebView_IsEditable),
    JS_CFUNC_DEF("LoadURL", 1, callback_method_Ozone_WebView_LoadURL),
    JS_CFUNC_DEF("Print", 0, callback_method_Ozone_WebView_Print),
    JS_CFUNC_DEF("Reload", 1, callback_method_Ozone_WebView_Reload),
    JS_CFUNC_DEF("RunScript", 2, callback_method_Ozone_WebView_RunScript),
    JS_CFUNC_DEF("SetEditable", 1, callback_method_Ozone_WebView_SetEditable),
    JS_CFUNC_DEF("SetPage", 2, callback_method_Ozone_WebView_SetPage),
    JS_CFUNC_DEF("Stop", 0, callback_method_Ozone_WebView_Stop),
    JS_CFUNC_DEF("CanGoBack", 0, callback_method_Ozone_WebView_CanGoBack),
    JS_CFUNC_DEF("CanGoForward", 0, callback_method_Ozone_WebView_CanGoForward),
    JS_CFUNC_DEF("GoBack", 0, callback_method_Ozone_WebView_GoBack),
    JS_CFUNC_DEF("GoForward", 0, callback_method_Ozone_WebView_GoForward),
    JS_CFUNC_DEF("ClearHistory", 0, callback_method_Ozone_WebView_ClearHistory),
    JS_CFUNC_DEF("EnableHistory", 1, callback_method_Ozone_WebView_EnableHistory),
    JS_CFUNC_DEF("CanSetZoomType", 1, callback_method_Ozone_WebView_CanSetZoomType),
    JS_CFUNC_DEF("GetZoom", 0, callback_method_Ozone_WebView_GetZoom),
    JS_CFUNC_DEF("GetZoomFactor", 0, callback_method_Ozone_WebView_GetZoomFactor),
    JS_CFUNC_DEF("GetZoomType", 0, callback_method_Ozone_WebView_GetZoomType),
    JS_CFUNC_DEF("SetZoom", 1, callback_method_Ozone_WebView_SetZoom),
    JS_CFUNC_DEF("SetZoomFactor", 1, callback_method_Ozone_WebView_SetZoomFactor),
    JS_CFUNC_DEF("SetZoomType", 1, callback_method_Ozone_WebView_SetZoomType),
    JS_CFUNC_DEF("SelectAll", 0, callback_method_Ozone_WebView_SelectAll),
    JS_CFUNC_DEF("HasSelection", 0, callback_method_Ozone_WebView_HasSelection),
    JS_CFUNC_DEF("DeleteSelection", 0, callback_method_Ozone_WebView_DeleteSelection),
    JS_CFUNC_DEF("GetSelectedText", 0, callback_method_Ozone_WebView_GetSelectedText),
    JS_CFUNC_DEF("GetSelectedSource", 0, callback_method_Ozone_WebView_GetSelectedSource),
    JS_CFUNC_DEF("ClearSelection", 0, callback_method_Ozone_WebView_ClearSelection),
    JS_CFUNC_DEF("CanCut", 0, callback_method_Ozone_WebView_CanCut),
    JS_CFUNC_DEF("CanCopy", 0, callback_method_Ozone_WebView_CanCopy),
    JS_CFUNC_DEF("CanPaste", 0, callback_method_Ozone_WebView_CanPaste),
    JS_CFUNC_DEF("Cut", 0, callback_method_Ozone_WebView_Cut),
    JS_CFUNC_DEF("Copy", 0, callback_method_Ozone_WebView_Copy),
    JS_CFUNC_DEF("Paste", 0, callback_method_Ozone_WebView_Paste),
    JS_CFUNC_DEF("CanUndo", 0, callback_method_Ozone_WebView_CanUndo),
    JS_CFUNC_DEF("CanRedo", 0, callback_method_Ozone_WebView_CanRedo),
    JS_CFUNC_DEF("Undo", 0, callback_method_Ozone_WebView_Undo),
    JS_CFUNC_DEF("Redo", 0, callback_method_Ozone_WebView_Redo),
    JS_CFUNC_DEF("GetNativeBackend", 0, callback_method_Ozone_WebView_GetNativeBackend),
    JS_CFUNC_DEF("Find", 2, callback_method_Ozone_WebView_Find),
    JS_CFUNC_DEF("New", 8, callback_method_Ozone_WebView_New),
    JS_CFUNC_DEF("IsBackendAvailable", 1, callback_method_Ozone_WebView_IsBackendAvailable),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_WebView_toString),
};

static void register_class_Ozone_WebView(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "WebView");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_WebView);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_WebView, &classDef_Ozone_WebView);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_WebView, sizeof(funcDef_Ozone_WebView) / sizeof(funcDef_Ozone_WebView[0]));
        JS_SetClassProto(ctx, classId_Ozone_WebView, proto);

        JSValue ctor = JS_NewCFunction2(ctx, callback_method_Ozone_WebView_WebView, "WebView", 1, JS_CFUNC_constructor, 0);
        JS_SetConstructor(ctx, ctor, proto);

        JS_SetModuleExport(ctx, m, "WebView", ctor);
    }
}

JSClassID classId_Ozone_WebViewEvent;

// Ozone::WebViewEvent::WebViewEvent
static JSValue callback_method_Ozone_WebViewEvent_WebViewEvent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 5)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebViewEvent* instance;

    if (argc == 0)
        goto overload0;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsString(argv[2]) || JS_IsNull(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsString(argv[3]) || JS_IsNull(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsInt32(argv[4]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // WebViewEvent()
overload0:
    {
        instance = new Ozone::WebViewEvent();

        goto wrap;
    }

    // WebViewEvent(int type, int id, const char* url, const char* target, ::Ozone::WebViewNavigationActionFlags flags)
overload1:
    {
        int type;
        int32_t _type;
        if (JS_ToInt32(ctx, &_type, argv[0]))
            return JS_EXCEPTION;
        type = (int)_type;
        auto __arg0 = type;

        int id;
        int32_t _id;
        if (JS_ToInt32(ctx, &_id, argv[1]))
            return JS_EXCEPTION;
        id = (int)_id;
        auto __arg1 = id;

        const char* url;
        url = JS_ToCString(ctx, argv[2]);
        if (!url)
            return JS_EXCEPTION;
        auto __arg2 = url;

        const char* target;
        target = JS_ToCString(ctx, argv[3]);
        if (!target)
            return JS_EXCEPTION;
        auto __arg3 = target;

        unsigned int flags;
        uint32_t _flags;
        if (JS_ToUint32(ctx, &_flags, argv[4]))
            return JS_EXCEPTION;
        flags = (unsigned int)_flags;
        auto __arg4 = (::Ozone::WebViewNavigationActionFlags)flags;

        instance = new Ozone::WebViewEvent(__arg0, __arg1, __arg2, __arg3, __arg4);

        JS_FreeCString(ctx, url);
        JS_FreeCString(ctx, target);
        goto wrap;
    }

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_WebViewEvent);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_WebViewEvent);
    JS_FreeValue(ctx, proto);

    JS_Interop_InitObject(ctx, __obj, JS_INTEROP_INSTANCE_RAW_POINTER, instance);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::WebViewEvent::GetNavigationAction
static JSValue callback_method_Ozone_WebViewEvent_GetNavigationAction(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebViewEvent* instance = (Ozone::WebViewEvent*) JS_GetOpaque(this_val, 0);

    ::Ozone::WebViewNavigationActionFlags __ret = instance->GetNavigationAction();

    JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

    return ____ret;
}

// Ozone::WebViewEvent::Clone
static JSValue callback_method_Ozone_WebViewEvent_Clone(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WebViewEvent* instance = (Ozone::WebViewEvent*) JS_GetOpaque(this_val, 0);

    ::Ozone::Event* __ret = instance->Clone();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Event, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) __ret);

    return ____ret;
}

static JSValue callback_class_Ozone_WebViewEvent_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "WebViewEvent");
}

void finalizer_Ozone_WebViewEvent(JSRuntime *rt, JSValue val)
{
    Ozone::WebViewEvent* instance = (Ozone::WebViewEvent*) JS_GetOpaque(val, 0);
}

static JSClassDef classDef_Ozone_WebViewEvent
{
    "WebViewEvent",
    .finalizer = finalizer_Ozone_WebViewEvent
};

static JSCFunctionListEntry funcDef_Ozone_WebViewEvent[]
{
    JS_CFUNC_DEF("GetNavigationAction", 0, callback_method_Ozone_WebViewEvent_GetNavigationAction),
    JS_CFUNC_DEF("Clone", 0, callback_method_Ozone_WebViewEvent_Clone),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_WebViewEvent_toString),
};

static void register_class_Ozone_WebViewEvent(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "WebViewEvent");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_WebViewEvent);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_WebViewEvent, &classDef_Ozone_WebViewEvent);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_WebViewEvent, sizeof(funcDef_Ozone_WebViewEvent) / sizeof(funcDef_Ozone_WebViewEvent[0]));
        JS_SetClassProto(ctx, classId_Ozone_WebViewEvent, proto);

        JSValue ctor = JS_NewCFunction2(ctx, callback_method_Ozone_WebViewEvent_WebViewEvent, "WebViewEvent", 5, JS_CFUNC_constructor, 0);
        JS_SetConstructor(ctx, ctor, proto);

        JS_SetModuleExport(ctx, m, "WebViewEvent", ctor);
    }
    else if (phase == 1)
    {
        JSValue proto = JS_GetClassProto(ctx, classId_Ozone_WebViewEvent);
        JSValue baseProto = JS_GetClassProto(ctx, classId_Ozone_NotifyEvent);
        int err = JS_SetPrototype(ctx, proto, baseProto);
        assert(err != -1);
        JS_FreeValue(ctx, baseProto);
        JS_FreeValue(ctx, proto);
    }
}

void register_ozone_webview(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (phase == 0)
    {
        register_enum_Ozone_WebViewReloadFlags(ctx, m, set);

        register_enum_Ozone_WebViewZoomType(ctx, m, set);

        register_enum_Ozone_WebViewZoom(ctx, m, set);

        register_enum_Ozone_WebViewNavigationActionFlags(ctx, m, set);

        register_enum_Ozone_WebViewFindFlags(ctx, m, set);

        register_enum_Ozone_WebViewNavigationError(ctx, m, set);
    }

    register_class_Ozone_WebViewHandler(ctx, m, set, phase);

    register_class_Ozone_WebView(ctx, m, set, phase);

    register_class_Ozone_WebViewEvent(ctx, m, set, phase);
}

} // extern "C"
