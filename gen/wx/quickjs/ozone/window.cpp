// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include <CppSharp_QuickJS.h>
#include <assert.h>
#include <ozone/window.h>

extern "C" {

extern JSClassID classId_Ozone_VisualAttributes;
extern JSClassID classId_Ozone_Color;
extern JSClassID classId_Ozone_WindowListNode;
extern JSClassID classId_Ozone_Window;
extern JSClassID classId_Ozone_ActivateEvent;
extern JSClassID classId_Ozone_ChildFocusEvent;
extern JSClassID classId_Ozone_ContextMenuEvent;
extern JSClassID classId_Ozone_HelpEvent;
extern JSClassID classId_Ozone_EraseEvent;
extern JSClassID classId_Ozone_FocusEvent;
extern JSClassID classId_Ozone_IdleEvent;
extern JSClassID classId_Ozone_JoystickEvent;
extern JSClassID classId_Ozone_KeyEvent;
extern JSClassID classId_Ozone_MouseCaptureLostEvent;
extern JSClassID classId_Ozone_MouseCaptureChangedEvent;
extern JSClassID classId_Ozone_MouseEvent;
extern JSClassID classId_Ozone_PaintEvent;
extern JSClassID classId_Ozone_ScrollWinEvent;
extern JSClassID classId_Ozone_SetCursorEvent;
extern JSClassID classId_Ozone_SizeEvent;
extern JSClassID classId_Ozone_SysColourChangedEvent;
extern JSClassID classId_Ozone_EvtHandler;
extern JSClassID classId_Ozone_Point;
extern JSClassID classId_Ozone_Size;
extern JSClassID classId_Ozone_Rect;
extern JSClassID classId_Ozone_Event;
extern JSClassID classId_Ozone_DC;
extern JSClassID classId_Ozone_UpdateUIEvent;
extern JSClassID classId_Ozone_Sizer;
extern JSClassID classId_Ozone_InitDialogEvent;
extern JSClassID classId__Signal;

static void register_enum_Ozone_WindowVariant(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "WindowVariant");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // NORMAL
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "NORMAL", __item);
    }

    // SMALL
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "SMALL", __item);
    }

    // MINI
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "MINI", __item);
    }

    // LARGE
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "LARGE", __item);
    }

    // MAX
    {
        JSValue __item = JS_NewUint32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "MAX", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "WindowVariant", val);
    assert(status != -1);
}

static void register_enum_Ozone_ShowEffect(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "ShowEffect");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // NONE
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "NONE", __item);
    }

    // ROLL_TO_LEFT
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "ROLL_TO_LEFT", __item);
    }

    // ROLL_TO_RIGHT
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "ROLL_TO_RIGHT", __item);
    }

    // ROLL_TO_TOP
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "ROLL_TO_TOP", __item);
    }

    // ROLL_TO_BOTTOM
    {
        JSValue __item = JS_NewUint32(ctx, 4);
        JS_SetPropertyStr(ctx, val, "ROLL_TO_BOTTOM", __item);
    }

    // SLIDE_TO_LEFT
    {
        JSValue __item = JS_NewUint32(ctx, 5);
        JS_SetPropertyStr(ctx, val, "SLIDE_TO_LEFT", __item);
    }

    // SLIDE_TO_RIGHT
    {
        JSValue __item = JS_NewUint32(ctx, 6);
        JS_SetPropertyStr(ctx, val, "SLIDE_TO_RIGHT", __item);
    }

    // SLIDE_TO_TOP
    {
        JSValue __item = JS_NewUint32(ctx, 7);
        JS_SetPropertyStr(ctx, val, "SLIDE_TO_TOP", __item);
    }

    // SLIDE_TO_BOTTOM
    {
        JSValue __item = JS_NewUint32(ctx, 8);
        JS_SetPropertyStr(ctx, val, "SLIDE_TO_BOTTOM", __item);
    }

    // BLEND
    {
        JSValue __item = JS_NewUint32(ctx, 9);
        JS_SetPropertyStr(ctx, val, "BLEND", __item);
    }

    // EXPAND
    {
        JSValue __item = JS_NewUint32(ctx, 10);
        JS_SetPropertyStr(ctx, val, "EXPAND", __item);
    }

    // MAX
    {
        JSValue __item = JS_NewUint32(ctx, 11);
        JS_SetPropertyStr(ctx, val, "MAX", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "ShowEffect", val);
    assert(status != -1);
}

static void register_enum_Ozone_SendEventFlags(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "SendEventFlags");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // POST
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "POST", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "SendEventFlags", val);
    assert(status != -1);
}

static void register_enum_Ozone_TouchMode(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "TouchMode");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // NONE
    {
        JSValue __item = JS_NewUint32(ctx, 0x0);
        JS_SetPropertyStr(ctx, val, "NONE", __item);
    }

    // VERTICAL_PAN_GESTURE
    {
        JSValue __item = JS_NewUint32(ctx, 0x1);
        JS_SetPropertyStr(ctx, val, "VERTICAL_PAN_GESTURE", __item);
    }

    // HORIZONTAL_PAN_GESTURE
    {
        JSValue __item = JS_NewUint32(ctx, 0x2);
        JS_SetPropertyStr(ctx, val, "HORIZONTAL_PAN_GESTURE", __item);
    }

    // PAN_GESTURES
    {
        JSValue __item = JS_NewUint32(ctx, 3);
        JS_SetPropertyStr(ctx, val, "PAN_GESTURES", __item);
    }

    // ZOOM_GESTURE
    {
        JSValue __item = JS_NewUint32(ctx, 0x4);
        JS_SetPropertyStr(ctx, val, "ZOOM_GESTURE", __item);
    }

    // ROTATE_GESTURE
    {
        JSValue __item = JS_NewUint32(ctx, 0x8);
        JS_SetPropertyStr(ctx, val, "ROTATE_GESTURE", __item);
    }

    // PRESS_GESTURES
    {
        JSValue __item = JS_NewUint32(ctx, 0x10);
        JS_SetPropertyStr(ctx, val, "PRESS_GESTURES", __item);
    }

    // ALL_GESTURES
    {
        JSValue __item = JS_NewUint32(ctx, 0x1f);
        JS_SetPropertyStr(ctx, val, "ALL_GESTURES", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "TouchMode", val);
    assert(status != -1);
}

JSClassID classId_Ozone_VisualAttributes;

// Ozone::VisualAttributes::VisualAttributes
static JSValue callback_method_Ozone_VisualAttributes_VisualAttributes(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::VisualAttributes* instance;

    instance = new Ozone::VisualAttributes();
    goto wrap;

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_VisualAttributes);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_VisualAttributes);
    JS_FreeValue(ctx, proto);

    JS_Interop_InitObject(ctx, __obj, JS_INTEROP_INSTANCE_RAW_POINTER, instance);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::VisualAttributes::get_colFg
static JSValue callback_method_Ozone_VisualAttributes_get_colFg(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::VisualAttributes* instance = (Ozone::VisualAttributes*) JS_GetOpaque(this_val, 0);

    ::Ozone::Color __ret = instance->get_colFg();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::VisualAttributes::set_colFg
static JSValue callback_method_Ozone_VisualAttributes_set_colFg(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::VisualAttributes* instance = (Ozone::VisualAttributes*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_colFg(::Ozone::Color value)
overload0:
    {
        Ozone::Color* value_instance = (Ozone::Color*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = *value_instance;

        instance->set_colFg(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::VisualAttributes::get_colBg
static JSValue callback_method_Ozone_VisualAttributes_get_colBg(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::VisualAttributes* instance = (Ozone::VisualAttributes*) JS_GetOpaque(this_val, 0);

    ::Ozone::Color __ret = instance->get_colBg();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::VisualAttributes::set_colBg
static JSValue callback_method_Ozone_VisualAttributes_set_colBg(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::VisualAttributes* instance = (Ozone::VisualAttributes*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_colBg(::Ozone::Color value)
overload0:
    {
        Ozone::Color* value_instance = (Ozone::Color*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = *value_instance;

        instance->set_colBg(__arg0);

        return JS_UNDEFINED;
    }
}

static JSValue callback_class_Ozone_VisualAttributes_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "VisualAttributes");
}

void finalizer_Ozone_VisualAttributes(JSRuntime *rt, JSValue val)
{
    Ozone::VisualAttributes* instance = (Ozone::VisualAttributes*) JS_GetOpaque(val, 0);
}

static JSClassDef classDef_Ozone_VisualAttributes
{
    "VisualAttributes",
    .finalizer = finalizer_Ozone_VisualAttributes
};

static JSCFunctionListEntry funcDef_Ozone_VisualAttributes[]
{
    JS_CFUNC_DEF("get_colFg", 0, callback_method_Ozone_VisualAttributes_get_colFg),
    JS_CFUNC_DEF("set_colFg", 1, callback_method_Ozone_VisualAttributes_set_colFg),
    JS_CFUNC_DEF("get_colBg", 0, callback_method_Ozone_VisualAttributes_get_colBg),
    JS_CFUNC_DEF("set_colBg", 1, callback_method_Ozone_VisualAttributes_set_colBg),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_VisualAttributes_toString),
};

static void register_class_Ozone_VisualAttributes(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "VisualAttributes");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_VisualAttributes);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_VisualAttributes, &classDef_Ozone_VisualAttributes);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_VisualAttributes, sizeof(funcDef_Ozone_VisualAttributes) / sizeof(funcDef_Ozone_VisualAttributes[0]));
        JS_SetClassProto(ctx, classId_Ozone_VisualAttributes, proto);

    }
}

JSClassID classId_Ozone_WindowListNode;

// Ozone::WindowListNode::GetNext
static JSValue callback_method_Ozone_WindowListNode_GetNext(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WindowListNode* instance = (Ozone::WindowListNode*) JS_GetOpaque(this_val, 0);

    ::Ozone::WindowListNode* __ret = instance->GetNext();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_WindowListNode, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) __ret);

    return ____ret;
}

// Ozone::WindowListNode::GetPrevious
static JSValue callback_method_Ozone_WindowListNode_GetPrevious(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WindowListNode* instance = (Ozone::WindowListNode*) JS_GetOpaque(this_val, 0);

    ::Ozone::WindowListNode* __ret = instance->GetPrevious();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_WindowListNode, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) __ret);

    return ____ret;
}

// Ozone::WindowListNode::GetData
static JSValue callback_method_Ozone_WindowListNode_GetData(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WindowListNode* instance = (Ozone::WindowListNode*) JS_GetOpaque(this_val, 0);

    ::Ozone::Window* __ret = instance->GetData();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::WindowListNode::SetData
static JSValue callback_method_Ozone_WindowListNode_SetData(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::WindowListNode* instance = (Ozone::WindowListNode*) JS_GetOpaque(this_val, 0);

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetData(::Ozone::Window* data)
overload0:
    {
        Ozone::Window* data_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = data_instance;

        instance->SetData(__arg0);

        return JS_UNDEFINED;
    }
}

static JSValue callback_class_Ozone_WindowListNode_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "WindowListNode");
}

void finalizer_Ozone_WindowListNode(JSRuntime *rt, JSValue val)
{
    Ozone::WindowListNode* instance = (Ozone::WindowListNode*) JS_GetOpaque(val, 0);
}

static JSClassDef classDef_Ozone_WindowListNode
{
    "WindowListNode",
    .finalizer = finalizer_Ozone_WindowListNode
};

static JSCFunctionListEntry funcDef_Ozone_WindowListNode[]
{
    JS_CFUNC_DEF("GetNext", 0, callback_method_Ozone_WindowListNode_GetNext),
    JS_CFUNC_DEF("GetPrevious", 0, callback_method_Ozone_WindowListNode_GetPrevious),
    JS_CFUNC_DEF("GetData", 0, callback_method_Ozone_WindowListNode_GetData),
    JS_CFUNC_DEF("SetData", 1, callback_method_Ozone_WindowListNode_SetData),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_WindowListNode_toString),
};

static void register_class_Ozone_WindowListNode(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "WindowListNode");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_WindowListNode);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_WindowListNode, &classDef_Ozone_WindowListNode);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_WindowListNode, sizeof(funcDef_Ozone_WindowListNode) / sizeof(funcDef_Ozone_WindowListNode[0]));
        JS_SetClassProto(ctx, classId_Ozone_WindowListNode, proto);

    }
}

static void register_enum_Ozone_Window_ScrollDir(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "ScrollDir");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // Horz
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "Horz", __item);
    }

    // Vert
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "Vert", __item);
    }

    // Max
    {
        JSValue __item = JS_NewUint32(ctx, 2);
        JS_SetPropertyStr(ctx, val, "Max", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "ScrollDir", val);
    assert(status != -1);
}

static void register_enum_Ozone_Window_NavigationKind(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "NavigationKind");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewObject(ctx);

    // Tab
    {
        JSValue __item = JS_NewUint32(ctx, 0);
        JS_SetPropertyStr(ctx, val, "Tab", __item);
    }

    // Accel
    {
        JSValue __item = JS_NewUint32(ctx, 1);
        JS_SetPropertyStr(ctx, val, "Accel", __item);
    }

    int status = JS_SetModuleExport(ctx, m, "NavigationKind", val);
    assert(status != -1);
}

JSClassID classId_Ozone_Window;

struct data_Ozone_Window : public JS_Interop_ClassData
{
    void event_invoke_OnActivate(::Ozone::ActivateEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 1);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ActivateEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnChildFocus(::Ozone::ChildFocusEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 2);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ChildFocusEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnContextMenu(::Ozone::ContextMenuEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 3);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ContextMenuEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnHelp(::Ozone::HelpEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 4);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_HelpEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnHelpRange(::Ozone::HelpEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 5);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_HelpEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnEraseBackground(::Ozone::EraseEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 6);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_EraseEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnSetFocus(::Ozone::FocusEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 7);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_FocusEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnKillFocus(::Ozone::FocusEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 8);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_FocusEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnIdle(::Ozone::IdleEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 9);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_IdleEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnJoyButtonDown(::Ozone::JoystickEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 10);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_JoystickEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnJoyButtonUp(::Ozone::JoystickEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 11);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_JoystickEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnJoyMove(::Ozone::JoystickEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 12);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_JoystickEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnJoyZmove(::Ozone::JoystickEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 13);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_JoystickEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnKeyDown(::Ozone::KeyEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 14);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_KeyEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnKeyUp(::Ozone::KeyEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 15);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_KeyEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnChar(::Ozone::KeyEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 16);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_KeyEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnCharHook(::Ozone::KeyEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 17);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_KeyEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMouseCaptureLost(::Ozone::MouseCaptureLostEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 18);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_MouseCaptureLostEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMouseCaptureChanged(::Ozone::MouseCaptureChangedEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 19);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_MouseCaptureChangedEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMouseAux1Down(::Ozone::MouseEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 20);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_MouseEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMouseAux1Up(::Ozone::MouseEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 21);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_MouseEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMouseAux1Dclick(::Ozone::MouseEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 22);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_MouseEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMouseAux2Down(::Ozone::MouseEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 23);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_MouseEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMouseAux2Up(::Ozone::MouseEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 24);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_MouseEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnMouseAux2Dclick(::Ozone::MouseEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 25);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_MouseEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnPaint(::Ozone::PaintEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 26);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_PaintEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnScrollwinTop(::Ozone::ScrollWinEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 27);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ScrollWinEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnScrollwinBottom(::Ozone::ScrollWinEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 28);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ScrollWinEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnScrollwinLineup(::Ozone::ScrollWinEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 29);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ScrollWinEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnScrollwinLinedown(::Ozone::ScrollWinEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 30);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ScrollWinEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnScrollwinPageup(::Ozone::ScrollWinEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 31);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ScrollWinEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnScrollwinPagedown(::Ozone::ScrollWinEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 32);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ScrollWinEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnScrollwinThumbtrack(::Ozone::ScrollWinEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 33);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ScrollWinEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnScrollwinThumbrelease(::Ozone::ScrollWinEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 34);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_ScrollWinEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnSetCursor(::Ozone::SetCursorEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 35);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_SetCursorEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnSize(::Ozone::SizeEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 36);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_SizeEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }

    void event_invoke_OnSysColourChanged(::Ozone::SysColourChangedEvent& arg0)
    {
        JSValue event = JS_Interop_FindEvent(&events, 37);
        if (JS_IsUndefined(event))
            return;

        JSValue __arg0 = JS_Interop_CreateFromInstance(ctx, classId_Ozone_SysColourChangedEvent, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &arg0);
        JSValueConst argv[] = { __arg0 };
        auto data = (JS_SignalContext*) JS_GetOpaque(event, 0);
        JSValue ret = JS_Call(ctx, data->function, JS_UNDEFINED, 1, argv);
        JS_FreeValue(ctx, ret);
    }
};

enum class ScrollDir : unsigned int
{
    Horz = 0,
    Vert = 1,
    Max = 2
};

enum class NavigationKind : unsigned int
{
    Tab = 0,
    Accel = 1
};

JSValue callback_event_getter_Ozone_Window_OnActivate(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 1);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 1, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnActivate.bind(data, &data_Ozone_Window::event_invoke_OnActivate);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnChildFocus(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 2);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 2, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnChildFocus.bind(data, &data_Ozone_Window::event_invoke_OnChildFocus);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnContextMenu(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 3);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 3, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnContextMenu.bind(data, &data_Ozone_Window::event_invoke_OnContextMenu);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnHelp(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 4);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 4, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnHelp.bind(data, &data_Ozone_Window::event_invoke_OnHelp);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnHelpRange(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 5);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 5, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnHelpRange.bind(data, &data_Ozone_Window::event_invoke_OnHelpRange);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnEraseBackground(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 6);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 6, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnEraseBackground.bind(data, &data_Ozone_Window::event_invoke_OnEraseBackground);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnSetFocus(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 7);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 7, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnSetFocus.bind(data, &data_Ozone_Window::event_invoke_OnSetFocus);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnKillFocus(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 8);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 8, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnKillFocus.bind(data, &data_Ozone_Window::event_invoke_OnKillFocus);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnIdle(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 9);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 9, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnIdle.bind(data, &data_Ozone_Window::event_invoke_OnIdle);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnJoyButtonDown(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 10);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 10, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnJoyButtonDown.bind(data, &data_Ozone_Window::event_invoke_OnJoyButtonDown);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnJoyButtonUp(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 11);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 11, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnJoyButtonUp.bind(data, &data_Ozone_Window::event_invoke_OnJoyButtonUp);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnJoyMove(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 12);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 12, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnJoyMove.bind(data, &data_Ozone_Window::event_invoke_OnJoyMove);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnJoyZmove(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 13);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 13, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnJoyZmove.bind(data, &data_Ozone_Window::event_invoke_OnJoyZmove);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnKeyDown(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 14);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 14, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnKeyDown.bind(data, &data_Ozone_Window::event_invoke_OnKeyDown);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnKeyUp(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 15);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 15, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnKeyUp.bind(data, &data_Ozone_Window::event_invoke_OnKeyUp);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnChar(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 16);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 16, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnChar.bind(data, &data_Ozone_Window::event_invoke_OnChar);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnCharHook(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 17);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 17, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnCharHook.bind(data, &data_Ozone_Window::event_invoke_OnCharHook);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnMouseCaptureLost(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 18);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 18, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnMouseCaptureLost.bind(data, &data_Ozone_Window::event_invoke_OnMouseCaptureLost);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnMouseCaptureChanged(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 19);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 19, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnMouseCaptureChanged.bind(data, &data_Ozone_Window::event_invoke_OnMouseCaptureChanged);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnMouseAux1Down(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 20);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 20, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnMouseAux1Down.bind(data, &data_Ozone_Window::event_invoke_OnMouseAux1Down);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnMouseAux1Up(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 21);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 21, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnMouseAux1Up.bind(data, &data_Ozone_Window::event_invoke_OnMouseAux1Up);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnMouseAux1Dclick(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 22);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 22, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnMouseAux1Dclick.bind(data, &data_Ozone_Window::event_invoke_OnMouseAux1Dclick);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnMouseAux2Down(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 23);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 23, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnMouseAux2Down.bind(data, &data_Ozone_Window::event_invoke_OnMouseAux2Down);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnMouseAux2Up(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 24);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 24, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnMouseAux2Up.bind(data, &data_Ozone_Window::event_invoke_OnMouseAux2Up);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnMouseAux2Dclick(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 25);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 25, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnMouseAux2Dclick.bind(data, &data_Ozone_Window::event_invoke_OnMouseAux2Dclick);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnPaint(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 26);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 26, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnPaint.bind(data, &data_Ozone_Window::event_invoke_OnPaint);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnScrollwinTop(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 27);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 27, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnScrollwinTop.bind(data, &data_Ozone_Window::event_invoke_OnScrollwinTop);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnScrollwinBottom(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 28);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 28, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnScrollwinBottom.bind(data, &data_Ozone_Window::event_invoke_OnScrollwinBottom);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnScrollwinLineup(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 29);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 29, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnScrollwinLineup.bind(data, &data_Ozone_Window::event_invoke_OnScrollwinLineup);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnScrollwinLinedown(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 30);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 30, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnScrollwinLinedown.bind(data, &data_Ozone_Window::event_invoke_OnScrollwinLinedown);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnScrollwinPageup(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 31);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 31, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnScrollwinPageup.bind(data, &data_Ozone_Window::event_invoke_OnScrollwinPageup);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnScrollwinPagedown(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 32);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 32, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnScrollwinPagedown.bind(data, &data_Ozone_Window::event_invoke_OnScrollwinPagedown);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnScrollwinThumbtrack(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 33);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 33, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnScrollwinThumbtrack.bind(data, &data_Ozone_Window::event_invoke_OnScrollwinThumbtrack);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnScrollwinThumbrelease(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 34);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 34, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnScrollwinThumbrelease.bind(data, &data_Ozone_Window::event_invoke_OnScrollwinThumbrelease);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnSetCursor(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 35);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 35, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnSetCursor.bind(data, &data_Ozone_Window::event_invoke_OnSetCursor);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnSize(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 36);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 36, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnSize.bind(data, &data_Ozone_Window::event_invoke_OnSize);

    return __obj;
}

JSValue callback_event_getter_Ozone_Window_OnSysColourChanged(JSContext *ctx, JSValueConst this_val)
{
    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    if (data == nullptr)
        return JS_ThrowTypeError(ctx, "Could not find object instance");

    JSValue event = JS_Interop_FindEvent(&data->events, 37);
    if (!JS_IsUndefined(event))
        return JS_DupValue(ctx, event);

    JSValue signalProto = JS_GetClassProto(ctx, classId__Signal);
    JSValue signalCtor = JS_GetProperty(ctx, signalProto, JS_ATOM_constructor);
    JSValue argv[] = { this_val };
    JSValue __obj = JS_CallConstructor(ctx, signalCtor, 1, argv);
    JS_FreeValue(ctx, signalCtor);
    JS_FreeValue(ctx, signalProto);

    JS_Interop_InsertEvent(&data->events, 37, JS_DupValue(ctx, __obj));

    ((Ozone::Window*)data->instance)->OnSysColourChanged.bind(data, &data_Ozone_Window::event_invoke_OnSysColourChanged);

    return __obj;
}

// Ozone::Window::Window
static JSValue callback_method_Ozone_Window_Window(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 6)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    Ozone::Window* instance;

    if (argc == 0)
        goto overload0;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsObject(argv[2]) || JS_IsNull(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsObject(argv[3]) || JS_IsNull(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsInt32(argv[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (JS_IsString(argv[5]) || JS_IsNull(argv[5]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // Window()
overload0:
    {
        instance = new Ozone::Window();

        goto wrap;
    }

    // Window(::Ozone::Window* parent, int id, const ::Ozone::Point& pos, const ::Ozone::Size& size, long style, const char* name)
overload1:
    {
        Ozone::Window* parent_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = parent_instance;

        int id;
        int32_t _id;
        if (JS_ToInt32(ctx, &_id, argv[1]))
            return JS_EXCEPTION;
        id = (int)_id;
        auto __arg1 = id;

        Ozone::Point* pos_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[2], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg2 = *pos_instance;

        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[3], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg3 = *size_instance;

        long style;
        int32_t _style;
        if (JS_ToInt32(ctx, &_style, argv[4]))
            return JS_EXCEPTION;
        style = (long)_style;
        auto __arg4 = style;

        const char* name;
        name = JS_ToCString(ctx, argv[5]);
        if (!name)
            return JS_EXCEPTION;
        auto __arg5 = name;

        instance = new Ozone::Window(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        JS_FreeCString(ctx, name);
        goto wrap;
    }

wrap:
    JSValue proto;
    if (JS_IsUndefined(this_val))
        proto = JS_GetClassProto(ctx, classId_Ozone_Window);
    else
        proto = JS_GetProperty(ctx, this_val, JS_ATOM_prototype);

    if (JS_IsException(proto))
        return proto;

    JSValue __obj = JS_NewObjectProtoClass(ctx, proto, classId_Ozone_Window);
    JS_FreeValue(ctx, proto);

    JS_Interop_InitObject(ctx, __obj, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, instance);
    JSObject* __js_obj = JS_VALUE_GET_OBJ(__obj);
    instance->__ExternalInstance = (void*) __js_obj;


    return __obj;
}

// Ozone::Window::Create
static JSValue callback_method_Ozone_Window_Create(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 6)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsObject(argv[2]) || JS_IsNull(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsObject(argv[3]) || JS_IsNull(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsInt32(argv[4]))
        goto typecheck5;

    goto error;

typecheck5:
    if (JS_IsString(argv[5]) || JS_IsNull(argv[5]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Create(::Ozone::Window* parent, int id, const ::Ozone::Point& pos, const ::Ozone::Size& size, long style, const char* name)
overload0:
    {
        Ozone::Window* parent_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = parent_instance;

        int id;
        int32_t _id;
        if (JS_ToInt32(ctx, &_id, argv[1]))
            return JS_EXCEPTION;
        id = (int)_id;
        auto __arg1 = id;

        Ozone::Point* pos_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[2], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg2 = *pos_instance;

        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[3], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg3 = *size_instance;

        long style;
        int32_t _style;
        if (JS_ToInt32(ctx, &_style, argv[4]))
            return JS_EXCEPTION;
        style = (long)_style;
        auto __arg4 = style;

        const char* name;
        name = JS_ToCString(ctx, argv[5]);
        if (!name)
            return JS_EXCEPTION;
        auto __arg5 = name;

        bool __ret = instance->Create(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);

        JS_FreeCString(ctx, name);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::Raise
static JSValue callback_method_Ozone_Window_Raise(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->Raise();

    return JS_UNDEFINED;
}

// Ozone::Window::Lower
static JSValue callback_method_Ozone_Window_Lower(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->Lower();

    return JS_UNDEFINED;
}

// Ozone::Window::Show
static JSValue callback_method_Ozone_Window_Show(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Show(bool show)
overload0:
    {
        bool show;
        show = JS_ToBool(ctx, argv[0]);
        if (show == -1)
            return JS_EXCEPTION;
        auto __arg0 = show;

        bool __ret = instance->Show(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::IsShown
static JSValue callback_method_Ozone_Window_IsShown(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsShown();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::IsRetained
static JSValue callback_method_Ozone_Window_IsRetained(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsRetained();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetFocus
static JSValue callback_method_Ozone_Window_SetFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->SetFocus();

    return JS_UNDEFINED;
}

// Ozone::Window::SetCanFocus
static JSValue callback_method_Ozone_Window_SetCanFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetCanFocus(bool canFocus)
overload0:
    {
        bool canFocus;
        canFocus = JS_ToBool(ctx, argv[0]);
        if (canFocus == -1)
            return JS_EXCEPTION;
        auto __arg0 = canFocus;

        instance->SetCanFocus(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::WarpPointer
static JSValue callback_method_Ozone_Window_WarpPointer(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void WarpPointer(int x, int y)
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        instance->WarpPointer(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::EnableTouchEvents
static JSValue callback_method_Ozone_Window_EnableTouchEvents(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool EnableTouchEvents(int eventsMask)
overload0:
    {
        int eventsMask;
        int32_t _eventsMask;
        if (JS_ToInt32(ctx, &_eventsMask, argv[0]))
            return JS_EXCEPTION;
        eventsMask = (int)_eventsMask;
        auto __arg0 = eventsMask;

        bool __ret = instance->EnableTouchEvents(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::Refresh
static JSValue callback_method_Ozone_Window_Refresh(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsObject(argv[1]) || JS_IsNull(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void Refresh(bool eraseBackground, const ::Ozone::Rect* rect)
overload0:
    {
        bool eraseBackground;
        eraseBackground = JS_ToBool(ctx, argv[0]);
        if (eraseBackground == -1)
            return JS_EXCEPTION;
        auto __arg0 = eraseBackground;

        Ozone::Rect* rect_instance = (Ozone::Rect*) JS_Interop_GetInstance(argv[1], \
            classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg1 = rect_instance;

        instance->Refresh(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::Update
static JSValue callback_method_Ozone_Window_Update(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->Update();

    return JS_UNDEFINED;
}

// Ozone::Window::ClearBackground
static JSValue callback_method_Ozone_Window_ClearBackground(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->ClearBackground();

    return JS_UNDEFINED;
}

// Ozone::Window::SetBackgroundColour
static JSValue callback_method_Ozone_Window_SetBackgroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool SetBackgroundColour(const ::Ozone::Color& colour)
overload0:
    {
        Ozone::Color* colour_instance = (Ozone::Color*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *colour_instance;

        bool __ret = instance->SetBackgroundColour(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::SetForegroundColour
static JSValue callback_method_Ozone_Window_SetForegroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool SetForegroundColour(const ::Ozone::Color& colour)
overload0:
    {
        Ozone::Color* colour_instance = (Ozone::Color*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *colour_instance;

        bool __ret = instance->SetForegroundColour(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::SetBackgroundStyle
static JSValue callback_method_Ozone_Window_SetBackgroundStyle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool SetBackgroundStyle(::Ozone::BackgroundStyle style)
overload0:
    {
        unsigned int style;
        uint32_t _style;
        if (JS_ToUint32(ctx, &_style, argv[0]))
            return JS_EXCEPTION;
        style = (unsigned int)_style;
        auto __arg0 = (::Ozone::BackgroundStyle)style;

        bool __ret = instance->SetBackgroundStyle(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::IsTransparentBackgroundSupported
static JSValue callback_method_Ozone_Window_IsTransparentBackgroundSupported(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool IsTransparentBackgroundSupported(const char* reason) const
overload0:
    {
        const char* reason;
        reason = JS_ToCString(ctx, argv[0]);
        if (!reason)
            return JS_EXCEPTION;
        auto __arg0 = reason;

        bool __ret = instance->IsTransparentBackgroundSupported(__arg0);

        JS_FreeCString(ctx, reason);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::GetCharHeight
static JSValue callback_method_Ozone_Window_GetCharHeight(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->GetCharHeight();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::GetCharWidth
static JSValue callback_method_Ozone_Window_GetCharWidth(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->GetCharWidth();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::GetContentScaleFactor
static JSValue callback_method_Ozone_Window_GetContentScaleFactor(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    double __ret = instance->GetContentScaleFactor();

    JSValue ____ret = JS_NewFloat64(ctx, __ret);

    return ____ret;
}

// Ozone::Window::GetDPIScaleFactor
static JSValue callback_method_Ozone_Window_GetDPIScaleFactor(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    double __ret = instance->GetDPIScaleFactor();

    JSValue ____ret = JS_NewFloat64(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetScrollbar
static JSValue callback_method_Ozone_Window_SetScrollbar(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 5)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsInt32(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsInt32(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsBool(argv[4]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetScrollbar(int orient, int pos, int thumbVisible, int range, bool refresh)
overload0:
    {
        int orient;
        int32_t _orient;
        if (JS_ToInt32(ctx, &_orient, argv[0]))
            return JS_EXCEPTION;
        orient = (int)_orient;
        auto __arg0 = orient;

        int pos;
        int32_t _pos;
        if (JS_ToInt32(ctx, &_pos, argv[1]))
            return JS_EXCEPTION;
        pos = (int)_pos;
        auto __arg1 = pos;

        int thumbVisible;
        int32_t _thumbVisible;
        if (JS_ToInt32(ctx, &_thumbVisible, argv[2]))
            return JS_EXCEPTION;
        thumbVisible = (int)_thumbVisible;
        auto __arg2 = thumbVisible;

        int range;
        int32_t _range;
        if (JS_ToInt32(ctx, &_range, argv[3]))
            return JS_EXCEPTION;
        range = (int)_range;
        auto __arg3 = range;

        bool refresh;
        refresh = JS_ToBool(ctx, argv[4]);
        if (refresh == -1)
            return JS_EXCEPTION;
        auto __arg4 = refresh;

        instance->SetScrollbar(__arg0, __arg1, __arg2, __arg3, __arg4);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetScrollPos
static JSValue callback_method_Ozone_Window_SetScrollPos(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 3)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsBool(argv[2]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetScrollPos(int orient, int pos, bool refresh)
overload0:
    {
        int orient;
        int32_t _orient;
        if (JS_ToInt32(ctx, &_orient, argv[0]))
            return JS_EXCEPTION;
        orient = (int)_orient;
        auto __arg0 = orient;

        int pos;
        int32_t _pos;
        if (JS_ToInt32(ctx, &_pos, argv[1]))
            return JS_EXCEPTION;
        pos = (int)_pos;
        auto __arg1 = pos;

        bool refresh;
        refresh = JS_ToBool(ctx, argv[2]);
        if (refresh == -1)
            return JS_EXCEPTION;
        auto __arg2 = refresh;

        instance->SetScrollPos(__arg0, __arg1, __arg2);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetScrollPos
static JSValue callback_method_Ozone_Window_GetScrollPos(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // int GetScrollPos(int orient) const
overload0:
    {
        int orient;
        int32_t _orient;
        if (JS_ToInt32(ctx, &_orient, argv[0]))
            return JS_EXCEPTION;
        orient = (int)_orient;
        auto __arg0 = orient;

        int __ret = instance->GetScrollPos(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::GetScrollThumb
static JSValue callback_method_Ozone_Window_GetScrollThumb(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // int GetScrollThumb(int orient) const
overload0:
    {
        int orient;
        int32_t _orient;
        if (JS_ToInt32(ctx, &_orient, argv[0]))
            return JS_EXCEPTION;
        orient = (int)_orient;
        auto __arg0 = orient;

        int __ret = instance->GetScrollThumb(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::GetScrollRange
static JSValue callback_method_Ozone_Window_GetScrollRange(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // int GetScrollRange(int orient) const
overload0:
    {
        int orient;
        int32_t _orient;
        if (JS_ToInt32(ctx, &_orient, argv[0]))
            return JS_EXCEPTION;
        orient = (int)_orient;
        auto __arg0 = orient;

        int __ret = instance->GetScrollRange(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::ScrollWindow
static JSValue callback_method_Ozone_Window_ScrollWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 3)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsObject(argv[2]) || JS_IsNull(argv[2]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void ScrollWindow(int dx, int dy, const ::Ozone::Rect* rect)
overload0:
    {
        int dx;
        int32_t _dx;
        if (JS_ToInt32(ctx, &_dx, argv[0]))
            return JS_EXCEPTION;
        dx = (int)_dx;
        auto __arg0 = dx;

        int dy;
        int32_t _dy;
        if (JS_ToInt32(ctx, &_dy, argv[1]))
            return JS_EXCEPTION;
        dy = (int)_dy;
        auto __arg1 = dy;

        Ozone::Rect* rect_instance = (Ozone::Rect*) JS_Interop_GetInstance(argv[2], \
            classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg2 = rect_instance;

        instance->ScrollWindow(__arg0, __arg1, __arg2);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::ScrollLines
static JSValue callback_method_Ozone_Window_ScrollLines(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool ScrollLines(int lines)
overload0:
    {
        int lines;
        int32_t _lines;
        if (JS_ToInt32(ctx, &_lines, argv[0]))
            return JS_EXCEPTION;
        lines = (int)_lines;
        auto __arg0 = lines;

        bool __ret = instance->ScrollLines(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::ScrollPages
static JSValue callback_method_Ozone_Window_ScrollPages(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool ScrollPages(int pages)
overload0:
    {
        int pages;
        int32_t _pages;
        if (JS_ToInt32(ctx, &_pages, argv[0]))
            return JS_EXCEPTION;
        pages = (int)_pages;
        auto __arg0 = pages;

        bool __ret = instance->ScrollPages(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::AdjustForLayoutDirection
static JSValue callback_method_Ozone_Window_AdjustForLayoutDirection(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 3)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsInt32(argv[2]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // int AdjustForLayoutDirection(int x, int width, int widthTotal) const
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int width;
        int32_t _width;
        if (JS_ToInt32(ctx, &_width, argv[1]))
            return JS_EXCEPTION;
        width = (int)_width;
        auto __arg1 = width;

        int widthTotal;
        int32_t _widthTotal;
        if (JS_ToInt32(ctx, &_widthTotal, argv[2]))
            return JS_EXCEPTION;
        widthTotal = (int)_widthTotal;
        auto __arg2 = widthTotal;

        int __ret = instance->AdjustForLayoutDirection(__arg0, __arg1, __arg2);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::DoIsExposed
static JSValue callback_method_Ozone_Window_DoIsExposed(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 2 || argc > 4)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

typecheck2:
    if (JS_IsInt32(argv[3]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool DoIsExposed(int x, int y) const
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        bool __ret = instance->DoIsExposed(__arg0, __arg1);


        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }

    // bool DoIsExposed(int x, int y, int w, int h) const
overload1:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        int w;
        int32_t _w;
        if (JS_ToInt32(ctx, &_w, argv[2]))
            return JS_EXCEPTION;
        w = (int)_w;
        auto __arg2 = w;

        int h;
        int32_t _h;
        if (JS_ToInt32(ctx, &_h, argv[3]))
            return JS_EXCEPTION;
        h = (int)_h;
        auto __arg3 = h;

        bool __ret = instance->DoIsExposed(__arg0, __arg1, __arg2, __arg3);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::SetDoubleBuffered
static JSValue callback_method_Ozone_Window_SetDoubleBuffered(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetDoubleBuffered(bool on)
overload0:
    {
        bool on;
        on = JS_ToBool(ctx, argv[0]);
        if (on == -1)
            return JS_EXCEPTION;
        auto __arg0 = on;

        instance->SetDoubleBuffered(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::IsDoubleBuffered
static JSValue callback_method_Ozone_Window_IsDoubleBuffered(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsDoubleBuffered();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetLabel
static JSValue callback_method_Ozone_Window_SetLabel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetLabel(const char* label)
overload0:
    {
        const char* label;
        label = JS_ToCString(ctx, argv[0]);
        if (!label)
            return JS_EXCEPTION;
        auto __arg0 = label;

        instance->SetLabel(__arg0);

        JS_FreeCString(ctx, label);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetLabel
static JSValue callback_method_Ozone_Window_GetLabel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    const char* __ret = instance->GetLabel();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::Window::OnInternalIdle
static JSValue callback_method_Ozone_Window_OnInternalIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->OnInternalIdle();

    return JS_UNDEFINED;
}

// Ozone::Window::PreCreation
static JSValue callback_method_Ozone_Window_PreCreation(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 3)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsObject(argv[1]) || JS_IsNull(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsObject(argv[2]) || JS_IsNull(argv[2]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool PreCreation(::Ozone::Window* parent, const ::Ozone::Point& pos, const ::Ozone::Size& size)
overload0:
    {
        Ozone::Window* parent_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = parent_instance;

        Ozone::Point* pos_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[1], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg1 = *pos_instance;

        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[2], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg2 = *size_instance;

        bool __ret = instance->PreCreation(__arg0, __arg1, __arg2);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::PostCreation
static JSValue callback_method_Ozone_Window_PostCreation(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->PostCreation();

    return JS_UNDEFINED;
}

// Ozone::Window::DoAddChild
static JSValue callback_method_Ozone_Window_DoAddChild(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void DoAddChild(::Ozone::Window* child)
overload0:
    {
        Ozone::Window* child_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = child_instance;

        instance->DoAddChild(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::IsOfStandardClass
static JSValue callback_method_Ozone_Window_IsOfStandardClass(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsOfStandardClass();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::Close
static JSValue callback_method_Ozone_Window_Close(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Close(bool force)
overload0:
    {
        bool force;
        force = JS_ToBool(ctx, argv[0]);
        if (force == -1)
            return JS_EXCEPTION;
        auto __arg0 = force;

        bool __ret = instance->Close(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::Destroy
static JSValue callback_method_Ozone_Window_Destroy(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->Destroy();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::DestroyChildren
static JSValue callback_method_Ozone_Window_DestroyChildren(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->DestroyChildren();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::IsBeingDeleted
static JSValue callback_method_Ozone_Window_IsBeingDeleted(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsBeingDeleted();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetName
static JSValue callback_method_Ozone_Window_SetName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetName(const char* name)
overload0:
    {
        const char* name;
        name = JS_ToCString(ctx, argv[0]);
        if (!name)
            return JS_EXCEPTION;
        auto __arg0 = name;

        instance->SetName(__arg0);

        JS_FreeCString(ctx, name);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetName
static JSValue callback_method_Ozone_Window_GetName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    const char* __ret = instance->GetName();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetWindowVariant
static JSValue callback_method_Ozone_Window_SetWindowVariant(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetWindowVariant(::Ozone::WindowVariant variant)
overload0:
    {
        unsigned int variant;
        uint32_t _variant;
        if (JS_ToUint32(ctx, &_variant, argv[0]))
            return JS_EXCEPTION;
        variant = (unsigned int)_variant;
        auto __arg0 = (::Ozone::WindowVariant)variant;

        instance->SetWindowVariant(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetWindowVariant
static JSValue callback_method_Ozone_Window_GetWindowVariant(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::WindowVariant __ret = instance->GetWindowVariant();

    JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

    return ____ret;
}

// Ozone::Window::SetId
static JSValue callback_method_Ozone_Window_SetId(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetId(int winid)
overload0:
    {
        int winid;
        int32_t _winid;
        if (JS_ToInt32(ctx, &_winid, argv[0]))
            return JS_EXCEPTION;
        winid = (int)_winid;
        auto __arg0 = winid;

        instance->SetId(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetId
static JSValue callback_method_Ozone_Window_GetId(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->GetId();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetSize
static JSValue callback_method_Ozone_Window_SetSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 5)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload2;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck2;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

typecheck2:
    if (JS_IsInt32(argv[1]))
        goto overload3;

    goto error;

typecheck3:
    if (JS_IsInt32(argv[3]))
        goto typecheck4;

    goto error;

typecheck4:
    if (JS_IsInt32(argv[4]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetSize(int x, int y, int width, int height, int sizeFlags)
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        int width;
        int32_t _width;
        if (JS_ToInt32(ctx, &_width, argv[2]))
            return JS_EXCEPTION;
        width = (int)_width;
        auto __arg2 = width;

        int height;
        int32_t _height;
        if (JS_ToInt32(ctx, &_height, argv[3]))
            return JS_EXCEPTION;
        height = (int)_height;
        auto __arg3 = height;

        int sizeFlags;
        int32_t _sizeFlags;
        if (JS_ToInt32(ctx, &_sizeFlags, argv[4]))
            return JS_EXCEPTION;
        sizeFlags = (int)_sizeFlags;
        auto __arg4 = sizeFlags;

        instance->SetSize(__arg0, __arg1, __arg2, __arg3, __arg4);


        return JS_UNDEFINED;
    }

    // void SetSize(int width, int height)
overload1:
    {
        int width;
        int32_t _width;
        if (JS_ToInt32(ctx, &_width, argv[0]))
            return JS_EXCEPTION;
        width = (int)_width;
        auto __arg0 = width;

        int height;
        int32_t _height;
        if (JS_ToInt32(ctx, &_height, argv[1]))
            return JS_EXCEPTION;
        height = (int)_height;
        auto __arg1 = height;

        instance->SetSize(__arg0, __arg1);


        return JS_UNDEFINED;
    }

    // void SetSize(const ::Ozone::Size& size)
overload2:
    {
        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *size_instance;

        instance->SetSize(__arg0);


        return JS_UNDEFINED;
    }

    // void SetSize(const ::Ozone::Rect& rect, int sizeFlags)
overload3:
    {
        Ozone::Rect* rect_instance = (Ozone::Rect*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *rect_instance;

        int sizeFlags;
        int32_t _sizeFlags;
        if (JS_ToInt32(ctx, &_sizeFlags, argv[1]))
            return JS_EXCEPTION;
        sizeFlags = (int)_sizeFlags;
        auto __arg1 = sizeFlags;

        instance->SetSize(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::Move
static JSValue callback_method_Ozone_Window_Move(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 2 || argc > 3)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck2;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck3;

    goto error;

typecheck2:
    if (JS_IsInt32(argv[1]))
        goto overload1;

    goto error;

typecheck3:
    if (JS_IsInt32(argv[2]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void Move(int x, int y, int flags)
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        int flags;
        int32_t _flags;
        if (JS_ToInt32(ctx, &_flags, argv[2]))
            return JS_EXCEPTION;
        flags = (int)_flags;
        auto __arg2 = flags;

        instance->Move(__arg0, __arg1, __arg2);


        return JS_UNDEFINED;
    }

    // void Move(const ::Ozone::Point& pt, int flags)
overload1:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        int flags;
        int32_t _flags;
        if (JS_ToInt32(ctx, &_flags, argv[1]))
            return JS_EXCEPTION;
        flags = (int)_flags;
        auto __arg1 = flags;

        instance->Move(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetPosition
static JSValue callback_method_Ozone_Window_SetPosition(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetPosition(const ::Ozone::Point& pt)
overload0:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        instance->SetPosition(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetClientSize
static JSValue callback_method_Ozone_Window_SetClientSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload1;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload2;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetClientSize(int width, int height)
overload0:
    {
        int width;
        int32_t _width;
        if (JS_ToInt32(ctx, &_width, argv[0]))
            return JS_EXCEPTION;
        width = (int)_width;
        auto __arg0 = width;

        int height;
        int32_t _height;
        if (JS_ToInt32(ctx, &_height, argv[1]))
            return JS_EXCEPTION;
        height = (int)_height;
        auto __arg1 = height;

        instance->SetClientSize(__arg0, __arg1);


        return JS_UNDEFINED;
    }

    // void SetClientSize(const ::Ozone::Size& size)
overload1:
    {
        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *size_instance;

        instance->SetClientSize(__arg0);


        return JS_UNDEFINED;
    }

    // void SetClientSize(const ::Ozone::Rect& rect)
overload2:
    {
        Ozone::Rect* rect_instance = (Ozone::Rect*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *rect_instance;

        instance->SetClientSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetPosition
static JSValue callback_method_Ozone_Window_GetPosition(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Point __ret = instance->GetPosition();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetScreenPosition
static JSValue callback_method_Ozone_Window_GetScreenPosition(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Point __ret = instance->GetScreenPosition();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetSize
static JSValue callback_method_Ozone_Window_GetSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetClientSize
static JSValue callback_method_Ozone_Window_GetClientSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetClientSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetRect
static JSValue callback_method_Ozone_Window_GetRect(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Rect __ret = instance->GetRect();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetScreenRect
static JSValue callback_method_Ozone_Window_GetScreenRect(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Rect __ret = instance->GetScreenRect();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetClientAreaOrigin
static JSValue callback_method_Ozone_Window_GetClientAreaOrigin(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Point __ret = instance->GetClientAreaOrigin();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetClientRect
static JSValue callback_method_Ozone_Window_GetClientRect(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Rect __ret = instance->GetClientRect();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::ClientToWindowSize
static JSValue callback_method_Ozone_Window_ClientToWindowSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Size ClientToWindowSize(const ::Ozone::Size& size) const
overload0:
    {
        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *size_instance;

        ::Ozone::Size __ret = instance->ClientToWindowSize(__arg0);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }
}

// Ozone::Window::WindowToClientSize
static JSValue callback_method_Ozone_Window_WindowToClientSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Size WindowToClientSize(const ::Ozone::Size& size) const
overload0:
    {
        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *size_instance;

        ::Ozone::Size __ret = instance->WindowToClientSize(__arg0);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }
}

// Ozone::Window::GetBestSize
static JSValue callback_method_Ozone_Window_GetBestSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetBestSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetBestHeight
static JSValue callback_method_Ozone_Window_GetBestHeight(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // int GetBestHeight(int width) const
overload0:
    {
        int width;
        int32_t _width;
        if (JS_ToInt32(ctx, &_width, argv[0]))
            return JS_EXCEPTION;
        width = (int)_width;
        auto __arg0 = width;

        int __ret = instance->GetBestHeight(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::GetBestWidth
static JSValue callback_method_Ozone_Window_GetBestWidth(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // int GetBestWidth(int height) const
overload0:
    {
        int height;
        int32_t _height;
        if (JS_ToInt32(ctx, &_height, argv[0]))
            return JS_EXCEPTION;
        height = (int)_height;
        auto __arg0 = height;

        int __ret = instance->GetBestWidth(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::InvalidateBestSize
static JSValue callback_method_Ozone_Window_InvalidateBestSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->InvalidateBestSize();

    return JS_UNDEFINED;
}

// Ozone::Window::CacheBestSize
static JSValue callback_method_Ozone_Window_CacheBestSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void CacheBestSize(const ::Ozone::Size& size) const
overload0:
    {
        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *size_instance;

        instance->CacheBestSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetEffectiveMinSize
static JSValue callback_method_Ozone_Window_GetEffectiveMinSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetEffectiveMinSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::SetInitialSize
static JSValue callback_method_Ozone_Window_SetInitialSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetInitialSize(const ::Ozone::Size& size)
overload0:
    {
        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *size_instance;

        instance->SetInitialSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::Centre
static JSValue callback_method_Ozone_Window_Centre(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void Centre(int dir)
overload0:
    {
        int dir;
        int32_t _dir;
        if (JS_ToInt32(ctx, &_dir, argv[0]))
            return JS_EXCEPTION;
        dir = (int)_dir;
        auto __arg0 = dir;

        instance->Centre(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::Center
static JSValue callback_method_Ozone_Window_Center(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void Center(int dir)
overload0:
    {
        int dir;
        int32_t _dir;
        if (JS_ToInt32(ctx, &_dir, argv[0]))
            return JS_EXCEPTION;
        dir = (int)_dir;
        auto __arg0 = dir;

        instance->Center(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::CentreOnParent
static JSValue callback_method_Ozone_Window_CentreOnParent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void CentreOnParent(int dir)
overload0:
    {
        int dir;
        int32_t _dir;
        if (JS_ToInt32(ctx, &_dir, argv[0]))
            return JS_EXCEPTION;
        dir = (int)_dir;
        auto __arg0 = dir;

        instance->CentreOnParent(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::CenterOnParent
static JSValue callback_method_Ozone_Window_CenterOnParent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void CenterOnParent(int dir)
overload0:
    {
        int dir;
        int32_t _dir;
        if (JS_ToInt32(ctx, &_dir, argv[0]))
            return JS_EXCEPTION;
        dir = (int)_dir;
        auto __arg0 = dir;

        instance->CenterOnParent(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::Fit
static JSValue callback_method_Ozone_Window_Fit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->Fit();

    return JS_UNDEFINED;
}

// Ozone::Window::FitInside
static JSValue callback_method_Ozone_Window_FitInside(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->FitInside();

    return JS_UNDEFINED;
}

// Ozone::Window::SetSizeHints
static JSValue callback_method_Ozone_Window_SetSizeHints(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 3 || argc > 6)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck2;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck3;

    goto error;

typecheck2:
    if (JS_IsObject(argv[1]) || JS_IsNull(argv[1]))
        goto typecheck4;

    goto error;

typecheck3:
    if (JS_IsInt32(argv[2]))
        goto typecheck5;

    goto error;

typecheck4:
    if (JS_IsObject(argv[2]) || JS_IsNull(argv[2]))
        goto overload1;

    goto error;

typecheck5:
    if (JS_IsInt32(argv[3]))
        goto typecheck6;

    goto error;

typecheck6:
    if (JS_IsInt32(argv[4]))
        goto typecheck7;

    goto error;

typecheck7:
    if (JS_IsInt32(argv[5]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH)
overload0:
    {
        int minW;
        int32_t _minW;
        if (JS_ToInt32(ctx, &_minW, argv[0]))
            return JS_EXCEPTION;
        minW = (int)_minW;
        auto __arg0 = minW;

        int minH;
        int32_t _minH;
        if (JS_ToInt32(ctx, &_minH, argv[1]))
            return JS_EXCEPTION;
        minH = (int)_minH;
        auto __arg1 = minH;

        int maxW;
        int32_t _maxW;
        if (JS_ToInt32(ctx, &_maxW, argv[2]))
            return JS_EXCEPTION;
        maxW = (int)_maxW;
        auto __arg2 = maxW;

        int maxH;
        int32_t _maxH;
        if (JS_ToInt32(ctx, &_maxH, argv[3]))
            return JS_EXCEPTION;
        maxH = (int)_maxH;
        auto __arg3 = maxH;

        int incW;
        int32_t _incW;
        if (JS_ToInt32(ctx, &_incW, argv[4]))
            return JS_EXCEPTION;
        incW = (int)_incW;
        auto __arg4 = incW;

        int incH;
        int32_t _incH;
        if (JS_ToInt32(ctx, &_incH, argv[5]))
            return JS_EXCEPTION;
        incH = (int)_incH;
        auto __arg5 = incH;

        instance->SetSizeHints(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5);


        return JS_UNDEFINED;
    }

    // void SetSizeHints(const ::Ozone::Size& minSize, const ::Ozone::Size& maxSize, const ::Ozone::Size& incSize)
overload1:
    {
        Ozone::Size* minSize_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *minSize_instance;

        Ozone::Size* maxSize_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[1], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg1 = *maxSize_instance;

        Ozone::Size* incSize_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[2], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg2 = *incSize_instance;

        instance->SetSizeHints(__arg0, __arg1, __arg2);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetMinSize
static JSValue callback_method_Ozone_Window_SetMinSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetMinSize(const ::Ozone::Size& minSize)
overload0:
    {
        Ozone::Size* minSize_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *minSize_instance;

        instance->SetMinSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetMaxSize
static JSValue callback_method_Ozone_Window_SetMaxSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetMaxSize(const ::Ozone::Size& maxSize)
overload0:
    {
        Ozone::Size* maxSize_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *maxSize_instance;

        instance->SetMaxSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetMinClientSize
static JSValue callback_method_Ozone_Window_SetMinClientSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetMinClientSize(const ::Ozone::Size& size)
overload0:
    {
        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *size_instance;

        instance->SetMinClientSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetMaxClientSize
static JSValue callback_method_Ozone_Window_SetMaxClientSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetMaxClientSize(const ::Ozone::Size& size)
overload0:
    {
        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *size_instance;

        instance->SetMaxClientSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetMinSize
static JSValue callback_method_Ozone_Window_GetMinSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetMinSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetMaxSize
static JSValue callback_method_Ozone_Window_GetMaxSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetMaxSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetMinClientSize
static JSValue callback_method_Ozone_Window_GetMinClientSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetMinClientSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetMaxClientSize
static JSValue callback_method_Ozone_Window_GetMaxClientSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetMaxClientSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetMinWidth
static JSValue callback_method_Ozone_Window_GetMinWidth(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->GetMinWidth();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::GetMinHeight
static JSValue callback_method_Ozone_Window_GetMinHeight(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->GetMinHeight();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::GetMaxWidth
static JSValue callback_method_Ozone_Window_GetMaxWidth(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->GetMaxWidth();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::GetMaxHeight
static JSValue callback_method_Ozone_Window_GetMaxHeight(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->GetMaxHeight();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetVirtualSize
static JSValue callback_method_Ozone_Window_SetVirtualSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetVirtualSize(const ::Ozone::Size& size)
overload0:
    {
        Ozone::Size* size_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *size_instance;

        instance->SetVirtualSize(__arg0);


        return JS_UNDEFINED;
    }

    // void SetVirtualSize(int x, int y)
overload1:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        instance->SetVirtualSize(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetVirtualSize
static JSValue callback_method_Ozone_Window_GetVirtualSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetVirtualSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::DoSetVirtualSize
static JSValue callback_method_Ozone_Window_DoSetVirtualSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void DoSetVirtualSize(int x, int y)
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        instance->DoSetVirtualSize(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::DoGetVirtualSize
static JSValue callback_method_Ozone_Window_DoGetVirtualSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->DoGetVirtualSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetBestVirtualSize
static JSValue callback_method_Ozone_Window_GetBestVirtualSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetBestVirtualSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::GetWindowBorderSize
static JSValue callback_method_Ozone_Window_GetWindowBorderSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetWindowBorderSize();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::InformFirstDirection
static JSValue callback_method_Ozone_Window_InformFirstDirection(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 3)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsInt32(argv[2]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool InformFirstDirection(int direction, int size, int availableOtherDir)
overload0:
    {
        int direction;
        int32_t _direction;
        if (JS_ToInt32(ctx, &_direction, argv[0]))
            return JS_EXCEPTION;
        direction = (int)_direction;
        auto __arg0 = direction;

        int size;
        int32_t _size;
        if (JS_ToInt32(ctx, &_size, argv[1]))
            return JS_EXCEPTION;
        size = (int)_size;
        auto __arg1 = size;

        int availableOtherDir;
        int32_t _availableOtherDir;
        if (JS_ToInt32(ctx, &_availableOtherDir, argv[2]))
            return JS_EXCEPTION;
        availableOtherDir = (int)_availableOtherDir;
        auto __arg2 = availableOtherDir;

        bool __ret = instance->InformFirstDirection(__arg0, __arg1, __arg2);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::SendSizeEvent
static JSValue callback_method_Ozone_Window_SendSizeEvent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SendSizeEvent(int flags)
overload0:
    {
        int flags;
        int32_t _flags;
        if (JS_ToInt32(ctx, &_flags, argv[0]))
            return JS_EXCEPTION;
        flags = (int)_flags;
        auto __arg0 = flags;

        instance->SendSizeEvent(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SendSizeEventToParent
static JSValue callback_method_Ozone_Window_SendSizeEventToParent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SendSizeEventToParent(int flags)
overload0:
    {
        int flags;
        int32_t _flags;
        if (JS_ToInt32(ctx, &_flags, argv[0]))
            return JS_EXCEPTION;
        flags = (int)_flags;
        auto __arg0 = flags;

        instance->SendSizeEventToParent(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::PostSizeEvent
static JSValue callback_method_Ozone_Window_PostSizeEvent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->PostSizeEvent();

    return JS_UNDEFINED;
}

// Ozone::Window::PostSizeEventToParent
static JSValue callback_method_Ozone_Window_PostSizeEventToParent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->PostSizeEventToParent();

    return JS_UNDEFINED;
}

// Ozone::Window::BeginRepositioningChildren
static JSValue callback_method_Ozone_Window_BeginRepositioningChildren(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->BeginRepositioningChildren();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::EndRepositioningChildren
static JSValue callback_method_Ozone_Window_EndRepositioningChildren(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->EndRepositioningChildren();

    return JS_UNDEFINED;
}

// Ozone::Window::Hide
static JSValue callback_method_Ozone_Window_Hide(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->Hide();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::ShowWithEffect
static JSValue callback_method_Ozone_Window_ShowWithEffect(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsUInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool ShowWithEffect(::Ozone::ShowEffect _0, unsigned int _1)
overload0:
    {
        unsigned int _0;
        uint32_t __0;
        if (JS_ToUint32(ctx, &__0, argv[0]))
            return JS_EXCEPTION;
        _0 = (unsigned int)__0;
        auto __arg0 = (::Ozone::ShowEffect)_0;

        unsigned int _1;
        uint32_t __1;
        if (JS_ToUint32(ctx, &__1, argv[1]))
            return JS_EXCEPTION;
        _1 = (unsigned int)__1;
        auto __arg1 = _1;

        bool __ret = instance->ShowWithEffect(__arg0, __arg1);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::HideWithEffect
static JSValue callback_method_Ozone_Window_HideWithEffect(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsUInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool HideWithEffect(::Ozone::ShowEffect _0, unsigned int _1)
overload0:
    {
        unsigned int _0;
        uint32_t __0;
        if (JS_ToUint32(ctx, &__0, argv[0]))
            return JS_EXCEPTION;
        _0 = (unsigned int)__0;
        auto __arg0 = (::Ozone::ShowEffect)_0;

        unsigned int _1;
        uint32_t __1;
        if (JS_ToUint32(ctx, &__1, argv[1]))
            return JS_EXCEPTION;
        _1 = (unsigned int)__1;
        auto __arg1 = _1;

        bool __ret = instance->HideWithEffect(__arg0, __arg1);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::Enable
static JSValue callback_method_Ozone_Window_Enable(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Enable(bool enable)
overload0:
    {
        bool enable;
        enable = JS_ToBool(ctx, argv[0]);
        if (enable == -1)
            return JS_EXCEPTION;
        auto __arg0 = enable;

        bool __ret = instance->Enable(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::Disable
static JSValue callback_method_Ozone_Window_Disable(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->Disable();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::IsEnabled
static JSValue callback_method_Ozone_Window_IsEnabled(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsEnabled();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::IsThisEnabled
static JSValue callback_method_Ozone_Window_IsThisEnabled(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsThisEnabled();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::IsShownOnScreen
static JSValue callback_method_Ozone_Window_IsShownOnScreen(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsShownOnScreen();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetWindowStyleFlag
static JSValue callback_method_Ozone_Window_SetWindowStyleFlag(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetWindowStyleFlag(long style)
overload0:
    {
        long style;
        int32_t _style;
        if (JS_ToInt32(ctx, &_style, argv[0]))
            return JS_EXCEPTION;
        style = (long)_style;
        auto __arg0 = style;

        instance->SetWindowStyleFlag(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetWindowStyleFlag
static JSValue callback_method_Ozone_Window_GetWindowStyleFlag(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    long __ret = instance->GetWindowStyleFlag();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetWindowStyle
static JSValue callback_method_Ozone_Window_SetWindowStyle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetWindowStyle(long style)
overload0:
    {
        long style;
        int32_t _style;
        if (JS_ToInt32(ctx, &_style, argv[0]))
            return JS_EXCEPTION;
        style = (long)_style;
        auto __arg0 = style;

        instance->SetWindowStyle(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetWindowStyle
static JSValue callback_method_Ozone_Window_GetWindowStyle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    long __ret = instance->GetWindowStyle();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::HasFlag
static JSValue callback_method_Ozone_Window_HasFlag(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool HasFlag(int flag) const
overload0:
    {
        int flag;
        int32_t _flag;
        if (JS_ToInt32(ctx, &_flag, argv[0]))
            return JS_EXCEPTION;
        flag = (int)_flag;
        auto __arg0 = flag;

        bool __ret = instance->HasFlag(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::ToggleWindowStyle
static JSValue callback_method_Ozone_Window_ToggleWindowStyle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool ToggleWindowStyle(int flag)
overload0:
    {
        int flag;
        int32_t _flag;
        if (JS_ToInt32(ctx, &_flag, argv[0]))
            return JS_EXCEPTION;
        flag = (int)_flag;
        auto __arg0 = flag;

        bool __ret = instance->ToggleWindowStyle(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::SetExtraStyle
static JSValue callback_method_Ozone_Window_SetExtraStyle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetExtraStyle(long exStyle)
overload0:
    {
        long exStyle;
        int32_t _exStyle;
        if (JS_ToInt32(ctx, &_exStyle, argv[0]))
            return JS_EXCEPTION;
        exStyle = (long)_exStyle;
        auto __arg0 = exStyle;

        instance->SetExtraStyle(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetExtraStyle
static JSValue callback_method_Ozone_Window_GetExtraStyle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    long __ret = instance->GetExtraStyle();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::HasExtraStyle
static JSValue callback_method_Ozone_Window_HasExtraStyle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool HasExtraStyle(int exFlag) const
overload0:
    {
        int exFlag;
        int32_t _exFlag;
        if (JS_ToInt32(ctx, &_exFlag, argv[0]))
            return JS_EXCEPTION;
        exFlag = (int)_exFlag;
        auto __arg0 = exFlag;

        bool __ret = instance->HasExtraStyle(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::SetThemeEnabled
static JSValue callback_method_Ozone_Window_SetThemeEnabled(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetThemeEnabled(bool enableTheme)
overload0:
    {
        bool enableTheme;
        enableTheme = JS_ToBool(ctx, argv[0]);
        if (enableTheme == -1)
            return JS_EXCEPTION;
        auto __arg0 = enableTheme;

        instance->SetThemeEnabled(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetThemeEnabled
static JSValue callback_method_Ozone_Window_GetThemeEnabled(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->GetThemeEnabled();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetFocusFromKbd
static JSValue callback_method_Ozone_Window_SetFocusFromKbd(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->SetFocusFromKbd();

    return JS_UNDEFINED;
}

// Ozone::Window::HasFocus
static JSValue callback_method_Ozone_Window_HasFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->HasFocus();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::AcceptsFocus
static JSValue callback_method_Ozone_Window_AcceptsFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->AcceptsFocus();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::AcceptsFocusRecursively
static JSValue callback_method_Ozone_Window_AcceptsFocusRecursively(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->AcceptsFocusRecursively();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::AcceptsFocusFromKeyboard
static JSValue callback_method_Ozone_Window_AcceptsFocusFromKeyboard(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->AcceptsFocusFromKeyboard();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::DisableFocusFromKeyboard
static JSValue callback_method_Ozone_Window_DisableFocusFromKeyboard(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->DisableFocusFromKeyboard();

    return JS_UNDEFINED;
}

// Ozone::Window::CanBeFocused
static JSValue callback_method_Ozone_Window_CanBeFocused(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->CanBeFocused();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::IsFocusable
static JSValue callback_method_Ozone_Window_IsFocusable(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsFocusable();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::CanAcceptFocus
static JSValue callback_method_Ozone_Window_CanAcceptFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->CanAcceptFocus();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::CanAcceptFocusFromKeyboard
static JSValue callback_method_Ozone_Window_CanAcceptFocusFromKeyboard(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->CanAcceptFocusFromKeyboard();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::EnableVisibleFocus
static JSValue callback_method_Ozone_Window_EnableVisibleFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void EnableVisibleFocus(bool _0)
overload0:
    {
        bool _0;
        _0 = JS_ToBool(ctx, argv[0]);
        if (_0 == -1)
            return JS_EXCEPTION;
        auto __arg0 = _0;

        instance->EnableVisibleFocus(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::NavigateIn
static JSValue callback_method_Ozone_Window_NavigateIn(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool NavigateIn(int flags)
overload0:
    {
        int flags;
        int32_t _flags;
        if (JS_ToInt32(ctx, &_flags, argv[0]))
            return JS_EXCEPTION;
        flags = (int)_flags;
        auto __arg0 = flags;

        bool __ret = instance->NavigateIn(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::Navigate
static JSValue callback_method_Ozone_Window_Navigate(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool Navigate(int flags)
overload0:
    {
        int flags;
        int32_t _flags;
        if (JS_ToInt32(ctx, &_flags, argv[0]))
            return JS_EXCEPTION;
        flags = (int)_flags;
        auto __arg0 = flags;

        bool __ret = instance->Navigate(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::HandleAsNavigationKey
static JSValue callback_method_Ozone_Window_HandleAsNavigationKey(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool HandleAsNavigationKey(const ::Ozone::KeyEvent& event)
overload0:
    {
        Ozone::KeyEvent* event_instance = (Ozone::KeyEvent*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_KeyEvent, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *event_instance;

        bool __ret = instance->HandleAsNavigationKey(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::MoveBeforeInTabOrder
static JSValue callback_method_Ozone_Window_MoveBeforeInTabOrder(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void MoveBeforeInTabOrder(::Ozone::Window* win)
overload0:
    {
        Ozone::Window* win_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = win_instance;

        instance->MoveBeforeInTabOrder(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::MoveAfterInTabOrder
static JSValue callback_method_Ozone_Window_MoveAfterInTabOrder(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void MoveAfterInTabOrder(::Ozone::Window* win)
overload0:
    {
        Ozone::Window* win_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = win_instance;

        instance->MoveAfterInTabOrder(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetPrevSibling
static JSValue callback_method_Ozone_Window_GetPrevSibling(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Window* __ret = instance->GetPrevSibling();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::Window::GetNextSibling
static JSValue callback_method_Ozone_Window_GetNextSibling(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Window* __ret = instance->GetNextSibling();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::Window::GetParent
static JSValue callback_method_Ozone_Window_GetParent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Window* __ret = instance->GetParent();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::Window::GetGrandParent
static JSValue callback_method_Ozone_Window_GetGrandParent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Window* __ret = instance->GetGrandParent();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::Window::IsTopLevel
static JSValue callback_method_Ozone_Window_IsTopLevel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsTopLevel();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::IsClientAreaChild
static JSValue callback_method_Ozone_Window_IsClientAreaChild(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool IsClientAreaChild(const ::Ozone::Window* _0) const
overload0:
    {
        Ozone::Window* _0_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg0 = _0_instance;

        bool __ret = instance->IsClientAreaChild(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::FindWindow
static JSValue callback_method_Ozone_Window_FindWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Window* FindWindow(long winid) const
overload0:
    {
        long winid;
        int32_t _winid;
        if (JS_ToInt32(ctx, &_winid, argv[0]))
            return JS_EXCEPTION;
        winid = (long)_winid;
        auto __arg0 = winid;

        ::Ozone::Window* __ret = instance->FindWindow(__arg0);


        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

        return ____ret;
    }

    // ::Ozone::Window* FindWindow(const char* name) const
overload1:
    {
        const char* name;
        name = JS_ToCString(ctx, argv[0]);
        if (!name)
            return JS_EXCEPTION;
        auto __arg0 = name;

        ::Ozone::Window* __ret = instance->FindWindow(__arg0);

        JS_FreeCString(ctx, name);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

        return ____ret;
    }
}

// Ozone::Window::GetEventHandler
static JSValue callback_method_Ozone_Window_GetEventHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::EvtHandler* __ret = instance->GetEventHandler();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_EvtHandler, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) __ret);

    return ____ret;
}

// Ozone::Window::SetEventHandler
static JSValue callback_method_Ozone_Window_SetEventHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetEventHandler(::Ozone::EvtHandler* handler)
overload0:
    {
        Ozone::EvtHandler* handler_instance = (Ozone::EvtHandler*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_EvtHandler, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = handler_instance;

        instance->SetEventHandler(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::PushEventHandler
static JSValue callback_method_Ozone_Window_PushEventHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void PushEventHandler(::Ozone::EvtHandler* handler)
overload0:
    {
        Ozone::EvtHandler* handler_instance = (Ozone::EvtHandler*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_EvtHandler, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = handler_instance;

        instance->PushEventHandler(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::PopEventHandler
static JSValue callback_method_Ozone_Window_PopEventHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::EvtHandler* PopEventHandler(bool deleteHandler)
overload0:
    {
        bool deleteHandler;
        deleteHandler = JS_ToBool(ctx, argv[0]);
        if (deleteHandler == -1)
            return JS_EXCEPTION;
        auto __arg0 = deleteHandler;

        ::Ozone::EvtHandler* __ret = instance->PopEventHandler(__arg0);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_EvtHandler, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) __ret);

        return ____ret;
    }
}

// Ozone::Window::RemoveEventHandler
static JSValue callback_method_Ozone_Window_RemoveEventHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool RemoveEventHandler(::Ozone::EvtHandler* handler)
overload0:
    {
        Ozone::EvtHandler* handler_instance = (Ozone::EvtHandler*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_EvtHandler, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = handler_instance;

        bool __ret = instance->RemoveEventHandler(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::ProcessWindowEvent
static JSValue callback_method_Ozone_Window_ProcessWindowEvent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool ProcessWindowEvent(::Ozone::Event& event)
overload0:
    {
        Ozone::Event* event_instance = (Ozone::Event*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Event, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *event_instance;

        bool __ret = instance->ProcessWindowEvent(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::ProcessWindowEventLocally
static JSValue callback_method_Ozone_Window_ProcessWindowEventLocally(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool ProcessWindowEventLocally(::Ozone::Event& event)
overload0:
    {
        Ozone::Event* event_instance = (Ozone::Event*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Event, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *event_instance;

        bool __ret = instance->ProcessWindowEventLocally(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::HandleWindowEvent
static JSValue callback_method_Ozone_Window_HandleWindowEvent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool HandleWindowEvent(::Ozone::Event& event) const
overload0:
    {
        Ozone::Event* event_instance = (Ozone::Event*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Event, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *event_instance;

        bool __ret = instance->HandleWindowEvent(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::SetNextHandler
static JSValue callback_method_Ozone_Window_SetNextHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetNextHandler(::Ozone::EvtHandler* handler) override
overload0:
    {
        Ozone::EvtHandler* handler_instance = (Ozone::EvtHandler*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_EvtHandler, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = handler_instance;

        instance->SetNextHandler(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetPreviousHandler
static JSValue callback_method_Ozone_Window_SetPreviousHandler(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetPreviousHandler(::Ozone::EvtHandler* handler) override
overload0:
    {
        Ozone::EvtHandler* handler_instance = (Ozone::EvtHandler*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_EvtHandler, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = handler_instance;

        instance->SetPreviousHandler(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::Validate
static JSValue callback_method_Ozone_Window_Validate(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->Validate();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::TransferDataToWindow
static JSValue callback_method_Ozone_Window_TransferDataToWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->TransferDataToWindow();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::TransferDataFromWindow
static JSValue callback_method_Ozone_Window_TransferDataFromWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->TransferDataFromWindow();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::InitDialog
static JSValue callback_method_Ozone_Window_InitDialog(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->InitDialog();

    return JS_UNDEFINED;
}

// Ozone::Window::RegisterHotKey
static JSValue callback_method_Ozone_Window_RegisterHotKey(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 3)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsInt32(argv[2]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool RegisterHotKey(int hotkeyId, int modifiers, int keycode)
overload0:
    {
        int hotkeyId;
        int32_t _hotkeyId;
        if (JS_ToInt32(ctx, &_hotkeyId, argv[0]))
            return JS_EXCEPTION;
        hotkeyId = (int)_hotkeyId;
        auto __arg0 = hotkeyId;

        int modifiers;
        int32_t _modifiers;
        if (JS_ToInt32(ctx, &_modifiers, argv[1]))
            return JS_EXCEPTION;
        modifiers = (int)_modifiers;
        auto __arg1 = modifiers;

        int keycode;
        int32_t _keycode;
        if (JS_ToInt32(ctx, &_keycode, argv[2]))
            return JS_EXCEPTION;
        keycode = (int)_keycode;
        auto __arg2 = keycode;

        bool __ret = instance->RegisterHotKey(__arg0, __arg1, __arg2);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::UnregisterHotKey
static JSValue callback_method_Ozone_Window_UnregisterHotKey(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool UnregisterHotKey(int hotkeyId)
overload0:
    {
        int hotkeyId;
        int32_t _hotkeyId;
        if (JS_ToInt32(ctx, &_hotkeyId, argv[0]))
            return JS_EXCEPTION;
        hotkeyId = (int)_hotkeyId;
        auto __arg0 = hotkeyId;

        bool __ret = instance->UnregisterHotKey(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::GetDPI
static JSValue callback_method_Ozone_Window_GetDPI(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Size __ret = instance->GetDPI();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::FromDIP
static JSValue callback_method_Ozone_Window_FromDIP(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload1;

    if (JS_IsInt32(argv[0]))
        goto overload2;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Size FromDIP(const ::Ozone::Size& sz) const
overload0:
    {
        Ozone::Size* sz_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *sz_instance;

        ::Ozone::Size __ret = instance->FromDIP(__arg0);


        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }

    // ::Ozone::Point FromDIP(const ::Ozone::Point& pt) const
overload1:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        ::Ozone::Point __ret = instance->FromDIP(__arg0);


        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }

    // int FromDIP(int d) const
overload2:
    {
        int d;
        int32_t _d;
        if (JS_ToInt32(ctx, &_d, argv[0]))
            return JS_EXCEPTION;
        d = (int)_d;
        auto __arg0 = d;

        int __ret = instance->FromDIP(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::ToDIP
static JSValue callback_method_Ozone_Window_ToDIP(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload1;

    if (JS_IsInt32(argv[0]))
        goto overload2;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Size ToDIP(const ::Ozone::Size& sz) const
overload0:
    {
        Ozone::Size* sz_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *sz_instance;

        ::Ozone::Size __ret = instance->ToDIP(__arg0);


        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }

    // ::Ozone::Point ToDIP(const ::Ozone::Point& pt) const
overload1:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        ::Ozone::Point __ret = instance->ToDIP(__arg0);


        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }

    // int ToDIP(int d) const
overload2:
    {
        int d;
        int32_t _d;
        if (JS_ToInt32(ctx, &_d, argv[0]))
            return JS_EXCEPTION;
        d = (int)_d;
        auto __arg0 = d;

        int __ret = instance->ToDIP(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::ConvertPixelsToDialog
static JSValue callback_method_Ozone_Window_ConvertPixelsToDialog(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Point ConvertPixelsToDialog(const ::Ozone::Point& pt) const
overload0:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        ::Ozone::Point __ret = instance->ConvertPixelsToDialog(__arg0);


        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }

    // ::Ozone::Size ConvertPixelsToDialog(const ::Ozone::Size& sz) const
overload1:
    {
        Ozone::Size* sz_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *sz_instance;

        ::Ozone::Size __ret = instance->ConvertPixelsToDialog(__arg0);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }
}

// Ozone::Window::ConvertDialogToPixels
static JSValue callback_method_Ozone_Window_ConvertDialogToPixels(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Point ConvertDialogToPixels(const ::Ozone::Point& pt) const
overload0:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        ::Ozone::Point __ret = instance->ConvertDialogToPixels(__arg0);


        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }

    // ::Ozone::Size ConvertDialogToPixels(const ::Ozone::Size& sz) const
overload1:
    {
        Ozone::Size* sz_instance = (Ozone::Size*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *sz_instance;

        ::Ozone::Size __ret = instance->ConvertDialogToPixels(__arg0);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Size, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }
}

// Ozone::Window::CaptureMouse
static JSValue callback_method_Ozone_Window_CaptureMouse(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->CaptureMouse();

    return JS_UNDEFINED;
}

// Ozone::Window::ReleaseMouse
static JSValue callback_method_Ozone_Window_ReleaseMouse(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->ReleaseMouse();

    return JS_UNDEFINED;
}

// Ozone::Window::HasCapture
static JSValue callback_method_Ozone_Window_HasCapture(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->HasCapture();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::RefreshRect
static JSValue callback_method_Ozone_Window_RefreshRect(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsBool(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void RefreshRect(const ::Ozone::Rect& rect, bool eraseBackground)
overload0:
    {
        Ozone::Rect* rect_instance = (Ozone::Rect*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *rect_instance;

        bool eraseBackground;
        eraseBackground = JS_ToBool(ctx, argv[1]);
        if (eraseBackground == -1)
            return JS_EXCEPTION;
        auto __arg1 = eraseBackground;

        instance->RefreshRect(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::Freeze
static JSValue callback_method_Ozone_Window_Freeze(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->Freeze();

    return JS_UNDEFINED;
}

// Ozone::Window::Thaw
static JSValue callback_method_Ozone_Window_Thaw(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->Thaw();

    return JS_UNDEFINED;
}

// Ozone::Window::IsFrozen
static JSValue callback_method_Ozone_Window_IsFrozen(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->IsFrozen();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::PrepareDC
static JSValue callback_method_Ozone_Window_PrepareDC(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void PrepareDC(::Ozone::DC& _0)
overload0:
    {
        Ozone::DC* _0_instance = (Ozone::DC*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_DC, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *_0_instance;

        instance->PrepareDC(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetUpdateClientRect
static JSValue callback_method_Ozone_Window_GetUpdateClientRect(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Rect __ret = instance->GetUpdateClientRect();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::IsExposed
static JSValue callback_method_Ozone_Window_IsExposed(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 4)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload2;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload3;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

typecheck2:
    if (JS_IsInt32(argv[3]))
        goto overload1;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool IsExposed(int x, int y) const
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        bool __ret = instance->IsExposed(__arg0, __arg1);


        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }

    // bool IsExposed(int x, int y, int w, int h) const
overload1:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        int w;
        int32_t _w;
        if (JS_ToInt32(ctx, &_w, argv[2]))
            return JS_EXCEPTION;
        w = (int)_w;
        auto __arg2 = w;

        int h;
        int32_t _h;
        if (JS_ToInt32(ctx, &_h, argv[3]))
            return JS_EXCEPTION;
        h = (int)_h;
        auto __arg3 = h;

        bool __ret = instance->IsExposed(__arg0, __arg1, __arg2, __arg3);


        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }

    // bool IsExposed(const ::Ozone::Point& pt) const
overload2:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        bool __ret = instance->IsExposed(__arg0);


        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }

    // bool IsExposed(const ::Ozone::Rect& rect) const
overload3:
    {
        Ozone::Rect* rect_instance = (Ozone::Rect*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Rect, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *rect_instance;

        bool __ret = instance->IsExposed(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::GetDefaultAttributes
static JSValue callback_method_Ozone_Window_GetDefaultAttributes(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::VisualAttributes __ret = instance->GetDefaultAttributes();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_VisualAttributes, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::SetOwnBackgroundColour
static JSValue callback_method_Ozone_Window_SetOwnBackgroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetOwnBackgroundColour(const ::Ozone::Color& colour)
overload0:
    {
        Ozone::Color* colour_instance = (Ozone::Color*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *colour_instance;

        instance->SetOwnBackgroundColour(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetBackgroundColour
static JSValue callback_method_Ozone_Window_GetBackgroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Color __ret = instance->GetBackgroundColour();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::InheritsBackgroundColour
static JSValue callback_method_Ozone_Window_InheritsBackgroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->InheritsBackgroundColour();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::UseBgCol
static JSValue callback_method_Ozone_Window_UseBgCol(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->UseBgCol();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::UseBackgroundColour
static JSValue callback_method_Ozone_Window_UseBackgroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->UseBackgroundColour();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetOwnForegroundColour
static JSValue callback_method_Ozone_Window_SetOwnForegroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetOwnForegroundColour(const ::Ozone::Color& colour)
overload0:
    {
        Ozone::Color* colour_instance = (Ozone::Color*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *colour_instance;

        instance->SetOwnForegroundColour(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetForegroundColour
static JSValue callback_method_Ozone_Window_GetForegroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Color __ret = instance->GetForegroundColour();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Color, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

// Ozone::Window::UseForegroundColour
static JSValue callback_method_Ozone_Window_UseForegroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->UseForegroundColour();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::InheritsForegroundColour
static JSValue callback_method_Ozone_Window_InheritsForegroundColour(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->InheritsForegroundColour();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::GetBackgroundStyle
static JSValue callback_method_Ozone_Window_GetBackgroundStyle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::BackgroundStyle __ret = instance->GetBackgroundStyle();

    JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

    return ____ret;
}

// Ozone::Window::HasTransparentBackground
static JSValue callback_method_Ozone_Window_HasTransparentBackground(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->HasTransparentBackground();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::ClientToScreen
static JSValue callback_method_Ozone_Window_ClientToScreen(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Point ClientToScreen(const ::Ozone::Point& pt) const
overload0:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        ::Ozone::Point __ret = instance->ClientToScreen(__arg0);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }
}

// Ozone::Window::ScreenToClient
static JSValue callback_method_Ozone_Window_ScreenToClient(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Point ScreenToClient(const ::Ozone::Point& pt) const
overload0:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        ::Ozone::Point __ret = instance->ScreenToClient(__arg0);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }
}

// Ozone::Window::HitTest
static JSValue callback_method_Ozone_Window_HitTest(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc < 1 || argc > 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::HitTest HitTest(int x, int y) const
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        ::Ozone::HitTest __ret = instance->HitTest(__arg0, __arg1);


        JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

        return ____ret;
    }

    // ::Ozone::HitTest HitTest(const ::Ozone::Point& pt) const
overload1:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        ::Ozone::HitTest __ret = instance->HitTest(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

        return ____ret;
    }
}

// Ozone::Window::GetBorder
static JSValue callback_method_Ozone_Window_GetBorder(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (argc == 0)
        goto overload1;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Border GetBorder(long flags) const
overload0:
    {
        long flags;
        int32_t _flags;
        if (JS_ToInt32(ctx, &_flags, argv[0]))
            return JS_EXCEPTION;
        flags = (long)_flags;
        auto __arg0 = flags;

        ::Ozone::Border __ret = instance->GetBorder(__arg0);


        JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

        return ____ret;
    }

    // ::Ozone::Border GetBorder() const
overload1:
    {
        ::Ozone::Border __ret = instance->GetBorder();

        JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

        return ____ret;
    }
}

// Ozone::Window::UpdateWindowUI
static JSValue callback_method_Ozone_Window_UpdateWindowUI(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void UpdateWindowUI(long flags)
overload0:
    {
        long flags;
        int32_t _flags;
        if (JS_ToInt32(ctx, &_flags, argv[0]))
            return JS_EXCEPTION;
        flags = (long)_flags;
        auto __arg0 = flags;

        instance->UpdateWindowUI(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::DoUpdateWindowUI
static JSValue callback_method_Ozone_Window_DoUpdateWindowUI(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void DoUpdateWindowUI(::Ozone::UpdateUIEvent& event)
overload0:
    {
        Ozone::UpdateUIEvent* event_instance = (Ozone::UpdateUIEvent*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_UpdateUIEvent, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *event_instance;

        instance->DoUpdateWindowUI(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::HasMultiplePages
static JSValue callback_method_Ozone_Window_HasMultiplePages(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->HasMultiplePages();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::CanScroll
static JSValue callback_method_Ozone_Window_CanScroll(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool CanScroll(int orient) const
overload0:
    {
        int orient;
        int32_t _orient;
        if (JS_ToInt32(ctx, &_orient, argv[0]))
            return JS_EXCEPTION;
        orient = (int)_orient;
        auto __arg0 = orient;

        bool __ret = instance->CanScroll(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::HasScrollbar
static JSValue callback_method_Ozone_Window_HasScrollbar(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool HasScrollbar(int orient) const
overload0:
    {
        int orient;
        int32_t _orient;
        if (JS_ToInt32(ctx, &_orient, argv[0]))
            return JS_EXCEPTION;
        orient = (int)_orient;
        auto __arg0 = orient;

        bool __ret = instance->HasScrollbar(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::LineUp
static JSValue callback_method_Ozone_Window_LineUp(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->LineUp();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::LineDown
static JSValue callback_method_Ozone_Window_LineDown(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->LineDown();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::PageUp
static JSValue callback_method_Ozone_Window_PageUp(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->PageUp();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::PageDown
static JSValue callback_method_Ozone_Window_PageDown(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->PageDown();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::AlwaysShowScrollbars
static JSValue callback_method_Ozone_Window_AlwaysShowScrollbars(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsBool(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void AlwaysShowScrollbars(bool _0, bool _1)
overload0:
    {
        bool _0;
        _0 = JS_ToBool(ctx, argv[0]);
        if (_0 == -1)
            return JS_EXCEPTION;
        auto __arg0 = _0;

        bool _1;
        _1 = JS_ToBool(ctx, argv[1]);
        if (_1 == -1)
            return JS_EXCEPTION;
        auto __arg1 = _1;

        instance->AlwaysShowScrollbars(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::IsScrollbarAlwaysShown
static JSValue callback_method_Ozone_Window_IsScrollbarAlwaysShown(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool IsScrollbarAlwaysShown(int _0) const
overload0:
    {
        int _0;
        int32_t __0;
        if (JS_ToInt32(ctx, &__0, argv[0]))
            return JS_EXCEPTION;
        _0 = (int)__0;
        auto __arg0 = _0;

        bool __ret = instance->IsScrollbarAlwaysShown(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::SetHelpText
static JSValue callback_method_Ozone_Window_SetHelpText(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetHelpText(const char* text)
overload0:
    {
        const char* text;
        text = JS_ToCString(ctx, argv[0]);
        if (!text)
            return JS_EXCEPTION;
        auto __arg0 = text;

        instance->SetHelpText(__arg0);

        JS_FreeCString(ctx, text);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetHelpTextAtPoint
static JSValue callback_method_Ozone_Window_GetHelpTextAtPoint(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // char* GetHelpTextAtPoint(const ::Ozone::Point& pt, ::Ozone::HelpEvent::Source origin) const
overload0:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        unsigned int origin;
        uint32_t _origin;
        if (JS_ToUint32(ctx, &_origin, argv[1]))
            return JS_EXCEPTION;
        origin = (unsigned int)_origin;
        auto __arg1 = (::Ozone::HelpEvent::Source)origin;

        const char* __ret = instance->GetHelpTextAtPoint(__arg0, __arg1);

        JSValue ____ret = JS_NewString(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::GetHelpText
static JSValue callback_method_Ozone_Window_GetHelpText(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    const char* __ret = instance->GetHelpText();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetToolTip
static JSValue callback_method_Ozone_Window_SetToolTip(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetToolTip(const char* tip)
overload0:
    {
        const char* tip;
        tip = JS_ToCString(ctx, argv[0]);
        if (!tip)
            return JS_EXCEPTION;
        auto __arg0 = tip;

        instance->SetToolTip(__arg0);

        JS_FreeCString(ctx, tip);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::UnsetToolTip
static JSValue callback_method_Ozone_Window_UnsetToolTip(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->UnsetToolTip();

    return JS_UNDEFINED;
}

// Ozone::Window::GetToolTipText
static JSValue callback_method_Ozone_Window_GetToolTipText(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    const char* __ret = instance->GetToolTipText();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::Window::DragAcceptFiles
static JSValue callback_method_Ozone_Window_DragAcceptFiles(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void DragAcceptFiles(bool accept)
overload0:
    {
        bool accept;
        accept = JS_ToBool(ctx, argv[0]);
        if (accept == -1)
            return JS_EXCEPTION;
        auto __arg0 = accept;

        instance->DragAcceptFiles(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::DeleteRelatedConstraints
static JSValue callback_method_Ozone_Window_DeleteRelatedConstraints(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->DeleteRelatedConstraints();

    return JS_UNDEFINED;
}

// Ozone::Window::ResetConstraints
static JSValue callback_method_Ozone_Window_ResetConstraints(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->ResetConstraints();

    return JS_UNDEFINED;
}

// Ozone::Window::SetConstraintSizes
static JSValue callback_method_Ozone_Window_SetConstraintSizes(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetConstraintSizes(bool recurse)
overload0:
    {
        bool recurse;
        recurse = JS_ToBool(ctx, argv[0]);
        if (recurse == -1)
            return JS_EXCEPTION;
        auto __arg0 = recurse;

        instance->SetConstraintSizes(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::DoPhase
static JSValue callback_method_Ozone_Window_DoPhase(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool DoPhase(int phase)
overload0:
    {
        int phase;
        int32_t _phase;
        if (JS_ToInt32(ctx, &_phase, argv[0]))
            return JS_EXCEPTION;
        phase = (int)_phase;
        auto __arg0 = phase;

        bool __ret = instance->DoPhase(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::SetSizeConstraint
static JSValue callback_method_Ozone_Window_SetSizeConstraint(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 4)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto typecheck2;

    goto error;

typecheck2:
    if (JS_IsInt32(argv[2]))
        goto typecheck3;

    goto error;

typecheck3:
    if (JS_IsInt32(argv[3]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetSizeConstraint(int x, int y, int w, int h)
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        int w;
        int32_t _w;
        if (JS_ToInt32(ctx, &_w, argv[2]))
            return JS_EXCEPTION;
        w = (int)_w;
        auto __arg2 = w;

        int h;
        int32_t _h;
        if (JS_ToInt32(ctx, &_h, argv[3]))
            return JS_EXCEPTION;
        h = (int)_h;
        auto __arg3 = h;

        instance->SetSizeConstraint(__arg0, __arg1, __arg2, __arg3);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::MoveConstraint
static JSValue callback_method_Ozone_Window_MoveConstraint(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void MoveConstraint(int x, int y)
overload0:
    {
        int x;
        int32_t _x;
        if (JS_ToInt32(ctx, &_x, argv[0]))
            return JS_EXCEPTION;
        x = (int)_x;
        auto __arg0 = x;

        int y;
        int32_t _y;
        if (JS_ToInt32(ctx, &_y, argv[1]))
            return JS_EXCEPTION;
        y = (int)_y;
        auto __arg1 = y;

        instance->MoveConstraint(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetAutoLayout
static JSValue callback_method_Ozone_Window_SetAutoLayout(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetAutoLayout(bool autoLayout)
overload0:
    {
        bool autoLayout;
        autoLayout = JS_ToBool(ctx, argv[0]);
        if (autoLayout == -1)
            return JS_EXCEPTION;
        auto __arg0 = autoLayout;

        instance->SetAutoLayout(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetAutoLayout
static JSValue callback_method_Ozone_Window_GetAutoLayout(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->GetAutoLayout();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::Layout
static JSValue callback_method_Ozone_Window_Layout(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->Layout();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::SetSizer
static JSValue callback_method_Ozone_Window_SetSizer(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsBool(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetSizer(::Ozone::Sizer* sizer, bool deleteOld)
overload0:
    {
        Ozone::Sizer* sizer_instance = (Ozone::Sizer*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Sizer, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = sizer_instance;

        bool deleteOld;
        deleteOld = JS_ToBool(ctx, argv[1]);
        if (deleteOld == -1)
            return JS_EXCEPTION;
        auto __arg1 = deleteOld;

        instance->SetSizer(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SetSizerAndFit
static JSValue callback_method_Ozone_Window_SetSizerAndFit(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsBool(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetSizerAndFit(::Ozone::Sizer* sizer, bool deleteOld)
overload0:
    {
        Ozone::Sizer* sizer_instance = (Ozone::Sizer*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Sizer, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = sizer_instance;

        bool deleteOld;
        deleteOld = JS_ToBool(ctx, argv[1]);
        if (deleteOld == -1)
            return JS_EXCEPTION;
        auto __arg1 = deleteOld;

        instance->SetSizerAndFit(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetSizer
static JSValue callback_method_Ozone_Window_GetSizer(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Sizer* __ret = instance->GetSizer();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Sizer, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) __ret);

    return ____ret;
}

// Ozone::Window::SetContainingSizer
static JSValue callback_method_Ozone_Window_SetContainingSizer(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void SetContainingSizer(::Ozone::Sizer* sizer)
overload0:
    {
        Ozone::Sizer* sizer_instance = (Ozone::Sizer*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Sizer, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto __arg0 = sizer_instance;

        instance->SetContainingSizer(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::GetContainingSizer
static JSValue callback_method_Ozone_Window_GetContainingSizer(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Sizer* __ret = instance->GetContainingSizer();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Sizer, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) __ret);

    return ____ret;
}

// Ozone::Window::SetTransparent
static JSValue callback_method_Ozone_Window_SetTransparent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsUInt8(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool SetTransparent(unsigned char _0)
overload0:
    {
        unsigned char _0;
        int32_t __0;
        if (JS_ToInt32(ctx, &__0, argv[0]))
            return JS_EXCEPTION;
        _0 = (unsigned char)__0;
        auto __arg0 = _0;

        bool __ret = instance->SetTransparent(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::CanSetTransparent
static JSValue callback_method_Ozone_Window_CanSetTransparent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->CanSetTransparent();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::OnInitDialog
static JSValue callback_method_Ozone_Window_OnInitDialog(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void OnInitDialog(::Ozone::InitDialogEvent& event)
overload0:
    {
        Ozone::InitDialogEvent* event_instance = (Ozone::InitDialogEvent*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_InitDialogEvent, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *event_instance;

        instance->OnInitDialog(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::OnMiddleClick
static JSValue callback_method_Ozone_Window_OnMiddleClick(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void OnMiddleClick(::Ozone::MouseEvent& event)
overload0:
    {
        Ozone::MouseEvent* event_instance = (Ozone::MouseEvent*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_MouseEvent, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *event_instance;

        instance->OnMiddleClick(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::SendIdleEvents
static JSValue callback_method_Ozone_Window_SendIdleEvents(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool SendIdleEvents(::Ozone::IdleEvent& event)
overload0:
    {
        Ozone::IdleEvent* event_instance = (Ozone::IdleEvent*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_IdleEvent, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *event_instance;

        bool __ret = instance->SendIdleEvents(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::WXSendContextMenuEvent
static JSValue callback_method_Ozone_Window_WXSendContextMenuEvent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool WXSendContextMenuEvent(const ::Ozone::Point& posInScreenCoords)
overload0:
    {
        Ozone::Point* posInScreenCoords_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *posInScreenCoords_instance;

        bool __ret = instance->WXSendContextMenuEvent(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::DissociateHandle
static JSValue callback_method_Ozone_Window_DissociateHandle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->DissociateHandle();

    return JS_UNDEFINED;
}

// Ozone::Window::HasCustomPalette
static JSValue callback_method_Ozone_Window_HasCustomPalette(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->HasCustomPalette();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::GetAncestorWithCustomPalette
static JSValue callback_method_Ozone_Window_GetAncestorWithCustomPalette(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Window* __ret = instance->GetAncestorWithCustomPalette();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::Window::InheritAttributes
static JSValue callback_method_Ozone_Window_InheritAttributes(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    instance->InheritAttributes();

    return JS_UNDEFINED;
}

// Ozone::Window::ShouldInheritColours
static JSValue callback_method_Ozone_Window_ShouldInheritColours(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->ShouldInheritColours();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::CanBeOutsideClientArea
static JSValue callback_method_Ozone_Window_CanBeOutsideClientArea(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->CanBeOutsideClientArea();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::CanApplyThemeBorder
static JSValue callback_method_Ozone_Window_CanApplyThemeBorder(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->CanApplyThemeBorder();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::GetMainWindowOfCompositeControl
static JSValue callback_method_Ozone_Window_GetMainWindowOfCompositeControl(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    ::Ozone::Window* __ret = instance->GetMainWindowOfCompositeControl();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::Window::IsTopNavigationDomain
static JSValue callback_method_Ozone_Window_IsTopNavigationDomain(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // bool IsTopNavigationDomain(::Ozone::Window::NavigationKind _0) const
overload0:
    {
        unsigned int _0;
        uint32_t __0;
        if (JS_ToUint32(ctx, &__0, argv[0]))
            return JS_EXCEPTION;
        _0 = (unsigned int)__0;
        auto __arg0 = (::Ozone::Window::NavigationKind)_0;

        bool __ret = instance->IsTopNavigationDomain(__arg0);

        JSValue ____ret = JS_NewBool(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::get_m_x
static JSValue callback_method_Ozone_Window_get_m_x(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->get_m_x();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_x
static JSValue callback_method_Ozone_Window_set_m_x(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_x(int value)
overload0:
    {
        int value;
        int32_t _value;
        if (JS_ToInt32(ctx, &_value, argv[0]))
            return JS_EXCEPTION;
        value = (int)_value;
        auto __arg0 = value;

        instance->set_m_x(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_y
static JSValue callback_method_Ozone_Window_get_m_y(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->get_m_y();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_y
static JSValue callback_method_Ozone_Window_set_m_y(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_y(int value)
overload0:
    {
        int value;
        int32_t _value;
        if (JS_ToInt32(ctx, &_value, argv[0]))
            return JS_EXCEPTION;
        value = (int)_value;
        auto __arg0 = value;

        instance->set_m_y(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_width
static JSValue callback_method_Ozone_Window_get_m_width(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->get_m_width();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_width
static JSValue callback_method_Ozone_Window_set_m_width(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_width(int value)
overload0:
    {
        int value;
        int32_t _value;
        if (JS_ToInt32(ctx, &_value, argv[0]))
            return JS_EXCEPTION;
        value = (int)_value;
        auto __arg0 = value;

        instance->set_m_width(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_height
static JSValue callback_method_Ozone_Window_get_m_height(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->get_m_height();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_height
static JSValue callback_method_Ozone_Window_set_m_height(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_height(int value)
overload0:
    {
        int value;
        int32_t _value;
        if (JS_ToInt32(ctx, &_value, argv[0]))
            return JS_EXCEPTION;
        value = (int)_value;
        auto __arg0 = value;

        instance->set_m_height(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_clientWidth
static JSValue callback_method_Ozone_Window_get_m_clientWidth(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->get_m_clientWidth();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_clientWidth
static JSValue callback_method_Ozone_Window_set_m_clientWidth(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_clientWidth(int value)
overload0:
    {
        int value;
        int32_t _value;
        if (JS_ToInt32(ctx, &_value, argv[0]))
            return JS_EXCEPTION;
        value = (int)_value;
        auto __arg0 = value;

        instance->set_m_clientWidth(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_clientHeight
static JSValue callback_method_Ozone_Window_get_m_clientHeight(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    int __ret = instance->get_m_clientHeight();

    JSValue ____ret = JS_NewInt32(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_clientHeight
static JSValue callback_method_Ozone_Window_set_m_clientHeight(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_clientHeight(int value)
overload0:
    {
        int value;
        int32_t _value;
        if (JS_ToInt32(ctx, &_value, argv[0]))
            return JS_EXCEPTION;
        value = (int)_value;
        auto __arg0 = value;

        instance->set_m_clientHeight(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_useCachedClientSize
static JSValue callback_method_Ozone_Window_get_m_useCachedClientSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_useCachedClientSize();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_useCachedClientSize
static JSValue callback_method_Ozone_Window_set_m_useCachedClientSize(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_useCachedClientSize(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_useCachedClientSize(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_isGtkPositionValid
static JSValue callback_method_Ozone_Window_get_m_isGtkPositionValid(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_isGtkPositionValid();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_isGtkPositionValid
static JSValue callback_method_Ozone_Window_set_m_isGtkPositionValid(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_isGtkPositionValid(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_isGtkPositionValid(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_gtkLabel
static JSValue callback_method_Ozone_Window_get_m_gtkLabel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    const char* __ret = instance->get_m_gtkLabel();

    JSValue ____ret = JS_NewString(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_gtkLabel
static JSValue callback_method_Ozone_Window_set_m_gtkLabel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_gtkLabel(const char* value)
overload0:
    {
        const char* value;
        value = JS_ToCString(ctx, argv[0]);
        if (!value)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_gtkLabel(__arg0);

        JS_FreeCString(ctx, value);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_noExpose
static JSValue callback_method_Ozone_Window_get_m_noExpose(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_noExpose();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_noExpose
static JSValue callback_method_Ozone_Window_set_m_noExpose(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_noExpose(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_noExpose(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_nativeSizeEvent
static JSValue callback_method_Ozone_Window_get_m_nativeSizeEvent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_nativeSizeEvent();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_nativeSizeEvent
static JSValue callback_method_Ozone_Window_set_m_nativeSizeEvent(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_nativeSizeEvent(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_nativeSizeEvent(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_isScrolling
static JSValue callback_method_Ozone_Window_get_m_isScrolling(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_isScrolling();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_isScrolling
static JSValue callback_method_Ozone_Window_set_m_isScrolling(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_isScrolling(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_isScrolling(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_clipPaintRegion
static JSValue callback_method_Ozone_Window_get_m_clipPaintRegion(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_clipPaintRegion();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_clipPaintRegion
static JSValue callback_method_Ozone_Window_set_m_clipPaintRegion(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_clipPaintRegion(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_clipPaintRegion(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_dirtyTabOrder
static JSValue callback_method_Ozone_Window_get_m_dirtyTabOrder(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_dirtyTabOrder();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_dirtyTabOrder
static JSValue callback_method_Ozone_Window_set_m_dirtyTabOrder(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_dirtyTabOrder(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_dirtyTabOrder(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_mouseButtonDown
static JSValue callback_method_Ozone_Window_get_m_mouseButtonDown(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_mouseButtonDown();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_mouseButtonDown
static JSValue callback_method_Ozone_Window_set_m_mouseButtonDown(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_mouseButtonDown(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_mouseButtonDown(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_showOnIdle
static JSValue callback_method_Ozone_Window_get_m_showOnIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_showOnIdle();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_showOnIdle
static JSValue callback_method_Ozone_Window_set_m_showOnIdle(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_showOnIdle(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_showOnIdle(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::get_m_needCursorReset
static JSValue callback_method_Ozone_Window_get_m_needCursorReset(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    bool __ret = instance->get_m_needCursorReset();

    JSValue ____ret = JS_NewBool(ctx, __ret);

    return ____ret;
}

// Ozone::Window::set_m_needCursorReset
static JSValue callback_method_Ozone_Window_set_m_needCursorReset(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    auto data = (data_Ozone_Window*) JS_GetOpaque(this_val, 0);
    Ozone::Window* instance = (Ozone::Window*) data->instance;

    if (JS_IsBool(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void set_m_needCursorReset(bool value)
overload0:
    {
        bool value;
        value = JS_ToBool(ctx, argv[0]);
        if (value == -1)
            return JS_EXCEPTION;
        auto __arg0 = value;

        instance->set_m_needCursorReset(__arg0);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::ScrollDirFromOrient
static JSValue callback_method_Ozone_Window_ScrollDirFromOrient(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Window::ScrollDir ScrollDirFromOrient(int orient)
overload0:
    {
        int orient;
        int32_t _orient;
        if (JS_ToInt32(ctx, &_orient, argv[0]))
            return JS_EXCEPTION;
        orient = (int)_orient;
        auto __arg0 = orient;

        ::Ozone::Window::ScrollDir __ret = ::Ozone::Window::ScrollDirFromOrient(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, (int32_t) __ret);

        return ____ret;
    }
}

// Ozone::Window::OrientFromScrollDir
static JSValue callback_method_Ozone_Window_OrientFromScrollDir(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // int OrientFromScrollDir(::Ozone::Window::ScrollDir dir)
overload0:
    {
        unsigned int dir;
        uint32_t _dir;
        if (JS_ToUint32(ctx, &_dir, argv[0]))
            return JS_EXCEPTION;
        dir = (unsigned int)_dir;
        auto __arg0 = (::Ozone::Window::ScrollDir)dir;

        int __ret = ::Ozone::Window::OrientFromScrollDir(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::NewControlId
static JSValue callback_method_Ozone_Window_NewControlId(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // int NewControlId(int count)
overload0:
    {
        int count;
        int32_t _count;
        if (JS_ToInt32(ctx, &_count, argv[0]))
            return JS_EXCEPTION;
        count = (int)_count;
        auto __arg0 = count;

        int __ret = ::Ozone::Window::NewControlId(__arg0);

        JSValue ____ret = JS_NewInt32(ctx, __ret);

        return ____ret;
    }
}

// Ozone::Window::UnreserveControlId
static JSValue callback_method_Ozone_Window_UnreserveControlId(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsInt32(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // void UnreserveControlId(int id, int count)
overload0:
    {
        int id;
        int32_t _id;
        if (JS_ToInt32(ctx, &_id, argv[0]))
            return JS_EXCEPTION;
        id = (int)_id;
        auto __arg0 = id;

        int count;
        int32_t _count;
        if (JS_ToInt32(ctx, &_count, argv[1]))
            return JS_EXCEPTION;
        count = (int)_count;
        auto __arg1 = count;

        ::Ozone::Window::UnreserveControlId(__arg0, __arg1);

        return JS_UNDEFINED;
    }
}

// Ozone::Window::FindFocus
static JSValue callback_method_Ozone_Window_FindFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    ::Ozone::Window* __ret = ::Ozone::Window::FindFocus();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::Window::DoFindFocus
static JSValue callback_method_Ozone_Window_DoFindFocus(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    ::Ozone::Window* __ret = ::Ozone::Window::DoFindFocus();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::Window::FindWindowById
static JSValue callback_method_Ozone_Window_FindWindowById(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsInt32(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsObject(argv[1]) || JS_IsNull(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Window* FindWindowById(long winid, const ::Ozone::Window* parent)
overload0:
    {
        long winid;
        int32_t _winid;
        if (JS_ToInt32(ctx, &_winid, argv[0]))
            return JS_EXCEPTION;
        winid = (long)_winid;
        auto __arg0 = winid;

        Ozone::Window* parent_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[1], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg1 = parent_instance;

        ::Ozone::Window* __ret = ::Ozone::Window::FindWindowById(__arg0, __arg1);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

        return ____ret;
    }
}

// Ozone::Window::FindWindowByName
static JSValue callback_method_Ozone_Window_FindWindowByName(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsObject(argv[1]) || JS_IsNull(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Window* FindWindowByName(const char* name, const ::Ozone::Window* parent)
overload0:
    {
        const char* name;
        name = JS_ToCString(ctx, argv[0]);
        if (!name)
            return JS_EXCEPTION;
        auto __arg0 = name;

        Ozone::Window* parent_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[1], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg1 = parent_instance;

        ::Ozone::Window* __ret = ::Ozone::Window::FindWindowByName(__arg0, __arg1);

        JS_FreeCString(ctx, name);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

        return ____ret;
    }
}

// Ozone::Window::FindWindowByLabel
static JSValue callback_method_Ozone_Window_FindWindowByLabel(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 2)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsString(argv[0]) || JS_IsNull(argv[0]))
        goto typecheck1;

    goto error;

typecheck1:
    if (JS_IsObject(argv[1]) || JS_IsNull(argv[1]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Window* FindWindowByLabel(const char* label, const ::Ozone::Window* parent)
overload0:
    {
        const char* label;
        label = JS_ToCString(ctx, argv[0]);
        if (!label)
            return JS_EXCEPTION;
        auto __arg0 = label;

        Ozone::Window* parent_instance = (Ozone::Window*) JS_Interop_GetInstance(argv[1], \
            classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
        auto __arg1 = parent_instance;

        ::Ozone::Window* __ret = ::Ozone::Window::FindWindowByLabel(__arg0, __arg1);

        JS_FreeCString(ctx, label);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

        return ____ret;
    }
}

// Ozone::Window::GetCapture
static JSValue callback_method_Ozone_Window_GetCapture(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    ::Ozone::Window* __ret = ::Ozone::Window::GetCapture();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

// Ozone::Window::GetClassDefaultAttributes
static JSValue callback_method_Ozone_Window_GetClassDefaultAttributes(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsInt32(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::VisualAttributes GetClassDefaultAttributes(::Ozone::WindowVariant variant)
overload0:
    {
        unsigned int variant;
        uint32_t _variant;
        if (JS_ToUint32(ctx, &_variant, argv[0]))
            return JS_EXCEPTION;
        variant = (unsigned int)_variant;
        auto __arg0 = (::Ozone::WindowVariant)variant;

        ::Ozone::VisualAttributes __ret = ::Ozone::Window::GetClassDefaultAttributes(__arg0);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_VisualAttributes, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

        return ____ret;
    }
}

static JSValue callback_class_Ozone_Window_toString(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    return JS_NewString(ctx, "Window");
}

void finalizer_Ozone_Window(JSRuntime *rt, JSValue val)
{
    JS_Interop_CleanupObject(val, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT);
}

static JSClassDef classDef_Ozone_Window
{
    "Window",
    .finalizer = finalizer_Ozone_Window
};

static JSCFunctionListEntry funcDef_Ozone_Window[]
{
    JS_CGETSET_DEF("OnActivate", callback_event_getter_Ozone_Window_OnActivate, NULL),
    JS_CGETSET_DEF("OnChildFocus", callback_event_getter_Ozone_Window_OnChildFocus, NULL),
    JS_CGETSET_DEF("OnContextMenu", callback_event_getter_Ozone_Window_OnContextMenu, NULL),
    JS_CGETSET_DEF("OnHelp", callback_event_getter_Ozone_Window_OnHelp, NULL),
    JS_CGETSET_DEF("OnHelpRange", callback_event_getter_Ozone_Window_OnHelpRange, NULL),
    JS_CGETSET_DEF("OnEraseBackground", callback_event_getter_Ozone_Window_OnEraseBackground, NULL),
    JS_CGETSET_DEF("OnSetFocus", callback_event_getter_Ozone_Window_OnSetFocus, NULL),
    JS_CGETSET_DEF("OnKillFocus", callback_event_getter_Ozone_Window_OnKillFocus, NULL),
    JS_CGETSET_DEF("OnIdle", callback_event_getter_Ozone_Window_OnIdle, NULL),
    JS_CGETSET_DEF("OnJoyButtonDown", callback_event_getter_Ozone_Window_OnJoyButtonDown, NULL),
    JS_CGETSET_DEF("OnJoyButtonUp", callback_event_getter_Ozone_Window_OnJoyButtonUp, NULL),
    JS_CGETSET_DEF("OnJoyMove", callback_event_getter_Ozone_Window_OnJoyMove, NULL),
    JS_CGETSET_DEF("OnJoyZmove", callback_event_getter_Ozone_Window_OnJoyZmove, NULL),
    JS_CGETSET_DEF("OnKeyDown", callback_event_getter_Ozone_Window_OnKeyDown, NULL),
    JS_CGETSET_DEF("OnKeyUp", callback_event_getter_Ozone_Window_OnKeyUp, NULL),
    JS_CGETSET_DEF("OnChar", callback_event_getter_Ozone_Window_OnChar, NULL),
    JS_CGETSET_DEF("OnCharHook", callback_event_getter_Ozone_Window_OnCharHook, NULL),
    JS_CGETSET_DEF("OnMouseCaptureLost", callback_event_getter_Ozone_Window_OnMouseCaptureLost, NULL),
    JS_CGETSET_DEF("OnMouseCaptureChanged", callback_event_getter_Ozone_Window_OnMouseCaptureChanged, NULL),
    JS_CGETSET_DEF("OnMouseAux1Down", callback_event_getter_Ozone_Window_OnMouseAux1Down, NULL),
    JS_CGETSET_DEF("OnMouseAux1Up", callback_event_getter_Ozone_Window_OnMouseAux1Up, NULL),
    JS_CGETSET_DEF("OnMouseAux1Dclick", callback_event_getter_Ozone_Window_OnMouseAux1Dclick, NULL),
    JS_CGETSET_DEF("OnMouseAux2Down", callback_event_getter_Ozone_Window_OnMouseAux2Down, NULL),
    JS_CGETSET_DEF("OnMouseAux2Up", callback_event_getter_Ozone_Window_OnMouseAux2Up, NULL),
    JS_CGETSET_DEF("OnMouseAux2Dclick", callback_event_getter_Ozone_Window_OnMouseAux2Dclick, NULL),
    JS_CGETSET_DEF("OnPaint", callback_event_getter_Ozone_Window_OnPaint, NULL),
    JS_CGETSET_DEF("OnScrollwinTop", callback_event_getter_Ozone_Window_OnScrollwinTop, NULL),
    JS_CGETSET_DEF("OnScrollwinBottom", callback_event_getter_Ozone_Window_OnScrollwinBottom, NULL),
    JS_CGETSET_DEF("OnScrollwinLineup", callback_event_getter_Ozone_Window_OnScrollwinLineup, NULL),
    JS_CGETSET_DEF("OnScrollwinLinedown", callback_event_getter_Ozone_Window_OnScrollwinLinedown, NULL),
    JS_CGETSET_DEF("OnScrollwinPageup", callback_event_getter_Ozone_Window_OnScrollwinPageup, NULL),
    JS_CGETSET_DEF("OnScrollwinPagedown", callback_event_getter_Ozone_Window_OnScrollwinPagedown, NULL),
    JS_CGETSET_DEF("OnScrollwinThumbtrack", callback_event_getter_Ozone_Window_OnScrollwinThumbtrack, NULL),
    JS_CGETSET_DEF("OnScrollwinThumbrelease", callback_event_getter_Ozone_Window_OnScrollwinThumbrelease, NULL),
    JS_CGETSET_DEF("OnSetCursor", callback_event_getter_Ozone_Window_OnSetCursor, NULL),
    JS_CGETSET_DEF("OnSize", callback_event_getter_Ozone_Window_OnSize, NULL),
    JS_CGETSET_DEF("OnSysColourChanged", callback_event_getter_Ozone_Window_OnSysColourChanged, NULL),
    JS_CFUNC_DEF("Create", 6, callback_method_Ozone_Window_Create),
    JS_CFUNC_DEF("Raise", 0, callback_method_Ozone_Window_Raise),
    JS_CFUNC_DEF("Lower", 0, callback_method_Ozone_Window_Lower),
    JS_CFUNC_DEF("Show", 1, callback_method_Ozone_Window_Show),
    JS_CFUNC_DEF("IsShown", 0, callback_method_Ozone_Window_IsShown),
    JS_CFUNC_DEF("IsRetained", 0, callback_method_Ozone_Window_IsRetained),
    JS_CFUNC_DEF("SetFocus", 0, callback_method_Ozone_Window_SetFocus),
    JS_CFUNC_DEF("SetCanFocus", 1, callback_method_Ozone_Window_SetCanFocus),
    JS_CFUNC_DEF("WarpPointer", 2, callback_method_Ozone_Window_WarpPointer),
    JS_CFUNC_DEF("EnableTouchEvents", 1, callback_method_Ozone_Window_EnableTouchEvents),
    JS_CFUNC_DEF("Refresh", 2, callback_method_Ozone_Window_Refresh),
    JS_CFUNC_DEF("Update", 0, callback_method_Ozone_Window_Update),
    JS_CFUNC_DEF("ClearBackground", 0, callback_method_Ozone_Window_ClearBackground),
    JS_CFUNC_DEF("SetBackgroundColour", 1, callback_method_Ozone_Window_SetBackgroundColour),
    JS_CFUNC_DEF("SetForegroundColour", 1, callback_method_Ozone_Window_SetForegroundColour),
    JS_CFUNC_DEF("SetBackgroundStyle", 1, callback_method_Ozone_Window_SetBackgroundStyle),
    JS_CFUNC_DEF("IsTransparentBackgroundSupported", 1, callback_method_Ozone_Window_IsTransparentBackgroundSupported),
    JS_CFUNC_DEF("GetCharHeight", 0, callback_method_Ozone_Window_GetCharHeight),
    JS_CFUNC_DEF("GetCharWidth", 0, callback_method_Ozone_Window_GetCharWidth),
    JS_CFUNC_DEF("GetContentScaleFactor", 0, callback_method_Ozone_Window_GetContentScaleFactor),
    JS_CFUNC_DEF("GetDPIScaleFactor", 0, callback_method_Ozone_Window_GetDPIScaleFactor),
    JS_CFUNC_DEF("SetScrollbar", 5, callback_method_Ozone_Window_SetScrollbar),
    JS_CFUNC_DEF("SetScrollPos", 3, callback_method_Ozone_Window_SetScrollPos),
    JS_CFUNC_DEF("GetScrollPos", 1, callback_method_Ozone_Window_GetScrollPos),
    JS_CFUNC_DEF("GetScrollThumb", 1, callback_method_Ozone_Window_GetScrollThumb),
    JS_CFUNC_DEF("GetScrollRange", 1, callback_method_Ozone_Window_GetScrollRange),
    JS_CFUNC_DEF("ScrollWindow", 3, callback_method_Ozone_Window_ScrollWindow),
    JS_CFUNC_DEF("ScrollLines", 1, callback_method_Ozone_Window_ScrollLines),
    JS_CFUNC_DEF("ScrollPages", 1, callback_method_Ozone_Window_ScrollPages),
    JS_CFUNC_DEF("AdjustForLayoutDirection", 3, callback_method_Ozone_Window_AdjustForLayoutDirection),
    JS_CFUNC_DEF("DoIsExposed", 4, callback_method_Ozone_Window_DoIsExposed),
    JS_CFUNC_DEF("SetDoubleBuffered", 1, callback_method_Ozone_Window_SetDoubleBuffered),
    JS_CFUNC_DEF("IsDoubleBuffered", 0, callback_method_Ozone_Window_IsDoubleBuffered),
    JS_CFUNC_DEF("SetLabel", 1, callback_method_Ozone_Window_SetLabel),
    JS_CFUNC_DEF("GetLabel", 0, callback_method_Ozone_Window_GetLabel),
    JS_CFUNC_DEF("OnInternalIdle", 0, callback_method_Ozone_Window_OnInternalIdle),
    JS_CFUNC_DEF("PreCreation", 3, callback_method_Ozone_Window_PreCreation),
    JS_CFUNC_DEF("PostCreation", 0, callback_method_Ozone_Window_PostCreation),
    JS_CFUNC_DEF("DoAddChild", 1, callback_method_Ozone_Window_DoAddChild),
    JS_CFUNC_DEF("IsOfStandardClass", 0, callback_method_Ozone_Window_IsOfStandardClass),
    JS_CFUNC_DEF("Close", 1, callback_method_Ozone_Window_Close),
    JS_CFUNC_DEF("Destroy", 0, callback_method_Ozone_Window_Destroy),
    JS_CFUNC_DEF("DestroyChildren", 0, callback_method_Ozone_Window_DestroyChildren),
    JS_CFUNC_DEF("IsBeingDeleted", 0, callback_method_Ozone_Window_IsBeingDeleted),
    JS_CFUNC_DEF("SetName", 1, callback_method_Ozone_Window_SetName),
    JS_CFUNC_DEF("GetName", 0, callback_method_Ozone_Window_GetName),
    JS_CFUNC_DEF("SetWindowVariant", 1, callback_method_Ozone_Window_SetWindowVariant),
    JS_CFUNC_DEF("GetWindowVariant", 0, callback_method_Ozone_Window_GetWindowVariant),
    JS_CFUNC_DEF("SetId", 1, callback_method_Ozone_Window_SetId),
    JS_CFUNC_DEF("GetId", 0, callback_method_Ozone_Window_GetId),
    JS_CFUNC_DEF("SetSize", 5, callback_method_Ozone_Window_SetSize),
    JS_CFUNC_DEF("Move", 3, callback_method_Ozone_Window_Move),
    JS_CFUNC_DEF("SetPosition", 1, callback_method_Ozone_Window_SetPosition),
    JS_CFUNC_DEF("SetClientSize", 2, callback_method_Ozone_Window_SetClientSize),
    JS_CFUNC_DEF("GetPosition", 0, callback_method_Ozone_Window_GetPosition),
    JS_CFUNC_DEF("GetScreenPosition", 0, callback_method_Ozone_Window_GetScreenPosition),
    JS_CFUNC_DEF("GetSize", 0, callback_method_Ozone_Window_GetSize),
    JS_CFUNC_DEF("GetClientSize", 0, callback_method_Ozone_Window_GetClientSize),
    JS_CFUNC_DEF("GetRect", 0, callback_method_Ozone_Window_GetRect),
    JS_CFUNC_DEF("GetScreenRect", 0, callback_method_Ozone_Window_GetScreenRect),
    JS_CFUNC_DEF("GetClientAreaOrigin", 0, callback_method_Ozone_Window_GetClientAreaOrigin),
    JS_CFUNC_DEF("GetClientRect", 0, callback_method_Ozone_Window_GetClientRect),
    JS_CFUNC_DEF("ClientToWindowSize", 1, callback_method_Ozone_Window_ClientToWindowSize),
    JS_CFUNC_DEF("WindowToClientSize", 1, callback_method_Ozone_Window_WindowToClientSize),
    JS_CFUNC_DEF("GetBestSize", 0, callback_method_Ozone_Window_GetBestSize),
    JS_CFUNC_DEF("GetBestHeight", 1, callback_method_Ozone_Window_GetBestHeight),
    JS_CFUNC_DEF("GetBestWidth", 1, callback_method_Ozone_Window_GetBestWidth),
    JS_CFUNC_DEF("InvalidateBestSize", 0, callback_method_Ozone_Window_InvalidateBestSize),
    JS_CFUNC_DEF("CacheBestSize", 1, callback_method_Ozone_Window_CacheBestSize),
    JS_CFUNC_DEF("GetEffectiveMinSize", 0, callback_method_Ozone_Window_GetEffectiveMinSize),
    JS_CFUNC_DEF("SetInitialSize", 1, callback_method_Ozone_Window_SetInitialSize),
    JS_CFUNC_DEF("Centre", 1, callback_method_Ozone_Window_Centre),
    JS_CFUNC_DEF("Center", 1, callback_method_Ozone_Window_Center),
    JS_CFUNC_DEF("CentreOnParent", 1, callback_method_Ozone_Window_CentreOnParent),
    JS_CFUNC_DEF("CenterOnParent", 1, callback_method_Ozone_Window_CenterOnParent),
    JS_CFUNC_DEF("Fit", 0, callback_method_Ozone_Window_Fit),
    JS_CFUNC_DEF("FitInside", 0, callback_method_Ozone_Window_FitInside),
    JS_CFUNC_DEF("SetSizeHints", 6, callback_method_Ozone_Window_SetSizeHints),
    JS_CFUNC_DEF("SetMinSize", 1, callback_method_Ozone_Window_SetMinSize),
    JS_CFUNC_DEF("SetMaxSize", 1, callback_method_Ozone_Window_SetMaxSize),
    JS_CFUNC_DEF("SetMinClientSize", 1, callback_method_Ozone_Window_SetMinClientSize),
    JS_CFUNC_DEF("SetMaxClientSize", 1, callback_method_Ozone_Window_SetMaxClientSize),
    JS_CFUNC_DEF("GetMinSize", 0, callback_method_Ozone_Window_GetMinSize),
    JS_CFUNC_DEF("GetMaxSize", 0, callback_method_Ozone_Window_GetMaxSize),
    JS_CFUNC_DEF("GetMinClientSize", 0, callback_method_Ozone_Window_GetMinClientSize),
    JS_CFUNC_DEF("GetMaxClientSize", 0, callback_method_Ozone_Window_GetMaxClientSize),
    JS_CFUNC_DEF("GetMinWidth", 0, callback_method_Ozone_Window_GetMinWidth),
    JS_CFUNC_DEF("GetMinHeight", 0, callback_method_Ozone_Window_GetMinHeight),
    JS_CFUNC_DEF("GetMaxWidth", 0, callback_method_Ozone_Window_GetMaxWidth),
    JS_CFUNC_DEF("GetMaxHeight", 0, callback_method_Ozone_Window_GetMaxHeight),
    JS_CFUNC_DEF("SetVirtualSize", 2, callback_method_Ozone_Window_SetVirtualSize),
    JS_CFUNC_DEF("GetVirtualSize", 0, callback_method_Ozone_Window_GetVirtualSize),
    JS_CFUNC_DEF("DoSetVirtualSize", 2, callback_method_Ozone_Window_DoSetVirtualSize),
    JS_CFUNC_DEF("DoGetVirtualSize", 0, callback_method_Ozone_Window_DoGetVirtualSize),
    JS_CFUNC_DEF("GetBestVirtualSize", 0, callback_method_Ozone_Window_GetBestVirtualSize),
    JS_CFUNC_DEF("GetWindowBorderSize", 0, callback_method_Ozone_Window_GetWindowBorderSize),
    JS_CFUNC_DEF("InformFirstDirection", 3, callback_method_Ozone_Window_InformFirstDirection),
    JS_CFUNC_DEF("SendSizeEvent", 1, callback_method_Ozone_Window_SendSizeEvent),
    JS_CFUNC_DEF("SendSizeEventToParent", 1, callback_method_Ozone_Window_SendSizeEventToParent),
    JS_CFUNC_DEF("PostSizeEvent", 0, callback_method_Ozone_Window_PostSizeEvent),
    JS_CFUNC_DEF("PostSizeEventToParent", 0, callback_method_Ozone_Window_PostSizeEventToParent),
    JS_CFUNC_DEF("BeginRepositioningChildren", 0, callback_method_Ozone_Window_BeginRepositioningChildren),
    JS_CFUNC_DEF("EndRepositioningChildren", 0, callback_method_Ozone_Window_EndRepositioningChildren),
    JS_CFUNC_DEF("Hide", 0, callback_method_Ozone_Window_Hide),
    JS_CFUNC_DEF("ShowWithEffect", 2, callback_method_Ozone_Window_ShowWithEffect),
    JS_CFUNC_DEF("HideWithEffect", 2, callback_method_Ozone_Window_HideWithEffect),
    JS_CFUNC_DEF("Enable", 1, callback_method_Ozone_Window_Enable),
    JS_CFUNC_DEF("Disable", 0, callback_method_Ozone_Window_Disable),
    JS_CFUNC_DEF("IsEnabled", 0, callback_method_Ozone_Window_IsEnabled),
    JS_CFUNC_DEF("IsThisEnabled", 0, callback_method_Ozone_Window_IsThisEnabled),
    JS_CFUNC_DEF("IsShownOnScreen", 0, callback_method_Ozone_Window_IsShownOnScreen),
    JS_CFUNC_DEF("SetWindowStyleFlag", 1, callback_method_Ozone_Window_SetWindowStyleFlag),
    JS_CFUNC_DEF("GetWindowStyleFlag", 0, callback_method_Ozone_Window_GetWindowStyleFlag),
    JS_CFUNC_DEF("SetWindowStyle", 1, callback_method_Ozone_Window_SetWindowStyle),
    JS_CFUNC_DEF("GetWindowStyle", 0, callback_method_Ozone_Window_GetWindowStyle),
    JS_CFUNC_DEF("HasFlag", 1, callback_method_Ozone_Window_HasFlag),
    JS_CFUNC_DEF("ToggleWindowStyle", 1, callback_method_Ozone_Window_ToggleWindowStyle),
    JS_CFUNC_DEF("SetExtraStyle", 1, callback_method_Ozone_Window_SetExtraStyle),
    JS_CFUNC_DEF("GetExtraStyle", 0, callback_method_Ozone_Window_GetExtraStyle),
    JS_CFUNC_DEF("HasExtraStyle", 1, callback_method_Ozone_Window_HasExtraStyle),
    JS_CFUNC_DEF("SetThemeEnabled", 1, callback_method_Ozone_Window_SetThemeEnabled),
    JS_CFUNC_DEF("GetThemeEnabled", 0, callback_method_Ozone_Window_GetThemeEnabled),
    JS_CFUNC_DEF("SetFocusFromKbd", 0, callback_method_Ozone_Window_SetFocusFromKbd),
    JS_CFUNC_DEF("HasFocus", 0, callback_method_Ozone_Window_HasFocus),
    JS_CFUNC_DEF("AcceptsFocus", 0, callback_method_Ozone_Window_AcceptsFocus),
    JS_CFUNC_DEF("AcceptsFocusRecursively", 0, callback_method_Ozone_Window_AcceptsFocusRecursively),
    JS_CFUNC_DEF("AcceptsFocusFromKeyboard", 0, callback_method_Ozone_Window_AcceptsFocusFromKeyboard),
    JS_CFUNC_DEF("DisableFocusFromKeyboard", 0, callback_method_Ozone_Window_DisableFocusFromKeyboard),
    JS_CFUNC_DEF("CanBeFocused", 0, callback_method_Ozone_Window_CanBeFocused),
    JS_CFUNC_DEF("IsFocusable", 0, callback_method_Ozone_Window_IsFocusable),
    JS_CFUNC_DEF("CanAcceptFocus", 0, callback_method_Ozone_Window_CanAcceptFocus),
    JS_CFUNC_DEF("CanAcceptFocusFromKeyboard", 0, callback_method_Ozone_Window_CanAcceptFocusFromKeyboard),
    JS_CFUNC_DEF("EnableVisibleFocus", 1, callback_method_Ozone_Window_EnableVisibleFocus),
    JS_CFUNC_DEF("NavigateIn", 1, callback_method_Ozone_Window_NavigateIn),
    JS_CFUNC_DEF("Navigate", 1, callback_method_Ozone_Window_Navigate),
    JS_CFUNC_DEF("HandleAsNavigationKey", 1, callback_method_Ozone_Window_HandleAsNavigationKey),
    JS_CFUNC_DEF("MoveBeforeInTabOrder", 1, callback_method_Ozone_Window_MoveBeforeInTabOrder),
    JS_CFUNC_DEF("MoveAfterInTabOrder", 1, callback_method_Ozone_Window_MoveAfterInTabOrder),
    JS_CFUNC_DEF("GetPrevSibling", 0, callback_method_Ozone_Window_GetPrevSibling),
    JS_CFUNC_DEF("GetNextSibling", 0, callback_method_Ozone_Window_GetNextSibling),
    JS_CFUNC_DEF("GetParent", 0, callback_method_Ozone_Window_GetParent),
    JS_CFUNC_DEF("GetGrandParent", 0, callback_method_Ozone_Window_GetGrandParent),
    JS_CFUNC_DEF("IsTopLevel", 0, callback_method_Ozone_Window_IsTopLevel),
    JS_CFUNC_DEF("IsClientAreaChild", 1, callback_method_Ozone_Window_IsClientAreaChild),
    JS_CFUNC_DEF("FindWindow", 1, callback_method_Ozone_Window_FindWindow),
    JS_CFUNC_DEF("GetEventHandler", 0, callback_method_Ozone_Window_GetEventHandler),
    JS_CFUNC_DEF("SetEventHandler", 1, callback_method_Ozone_Window_SetEventHandler),
    JS_CFUNC_DEF("PushEventHandler", 1, callback_method_Ozone_Window_PushEventHandler),
    JS_CFUNC_DEF("PopEventHandler", 1, callback_method_Ozone_Window_PopEventHandler),
    JS_CFUNC_DEF("RemoveEventHandler", 1, callback_method_Ozone_Window_RemoveEventHandler),
    JS_CFUNC_DEF("ProcessWindowEvent", 1, callback_method_Ozone_Window_ProcessWindowEvent),
    JS_CFUNC_DEF("ProcessWindowEventLocally", 1, callback_method_Ozone_Window_ProcessWindowEventLocally),
    JS_CFUNC_DEF("HandleWindowEvent", 1, callback_method_Ozone_Window_HandleWindowEvent),
    JS_CFUNC_DEF("SetNextHandler", 1, callback_method_Ozone_Window_SetNextHandler),
    JS_CFUNC_DEF("SetPreviousHandler", 1, callback_method_Ozone_Window_SetPreviousHandler),
    JS_CFUNC_DEF("Validate", 0, callback_method_Ozone_Window_Validate),
    JS_CFUNC_DEF("TransferDataToWindow", 0, callback_method_Ozone_Window_TransferDataToWindow),
    JS_CFUNC_DEF("TransferDataFromWindow", 0, callback_method_Ozone_Window_TransferDataFromWindow),
    JS_CFUNC_DEF("InitDialog", 0, callback_method_Ozone_Window_InitDialog),
    JS_CFUNC_DEF("RegisterHotKey", 3, callback_method_Ozone_Window_RegisterHotKey),
    JS_CFUNC_DEF("UnregisterHotKey", 1, callback_method_Ozone_Window_UnregisterHotKey),
    JS_CFUNC_DEF("GetDPI", 0, callback_method_Ozone_Window_GetDPI),
    JS_CFUNC_DEF("FromDIP", 1, callback_method_Ozone_Window_FromDIP),
    JS_CFUNC_DEF("ToDIP", 1, callback_method_Ozone_Window_ToDIP),
    JS_CFUNC_DEF("ConvertPixelsToDialog", 1, callback_method_Ozone_Window_ConvertPixelsToDialog),
    JS_CFUNC_DEF("ConvertDialogToPixels", 1, callback_method_Ozone_Window_ConvertDialogToPixels),
    JS_CFUNC_DEF("CaptureMouse", 0, callback_method_Ozone_Window_CaptureMouse),
    JS_CFUNC_DEF("ReleaseMouse", 0, callback_method_Ozone_Window_ReleaseMouse),
    JS_CFUNC_DEF("HasCapture", 0, callback_method_Ozone_Window_HasCapture),
    JS_CFUNC_DEF("RefreshRect", 2, callback_method_Ozone_Window_RefreshRect),
    JS_CFUNC_DEF("Freeze", 0, callback_method_Ozone_Window_Freeze),
    JS_CFUNC_DEF("Thaw", 0, callback_method_Ozone_Window_Thaw),
    JS_CFUNC_DEF("IsFrozen", 0, callback_method_Ozone_Window_IsFrozen),
    JS_CFUNC_DEF("PrepareDC", 1, callback_method_Ozone_Window_PrepareDC),
    JS_CFUNC_DEF("GetUpdateClientRect", 0, callback_method_Ozone_Window_GetUpdateClientRect),
    JS_CFUNC_DEF("IsExposed", 4, callback_method_Ozone_Window_IsExposed),
    JS_CFUNC_DEF("GetDefaultAttributes", 0, callback_method_Ozone_Window_GetDefaultAttributes),
    JS_CFUNC_DEF("SetOwnBackgroundColour", 1, callback_method_Ozone_Window_SetOwnBackgroundColour),
    JS_CFUNC_DEF("GetBackgroundColour", 0, callback_method_Ozone_Window_GetBackgroundColour),
    JS_CFUNC_DEF("InheritsBackgroundColour", 0, callback_method_Ozone_Window_InheritsBackgroundColour),
    JS_CFUNC_DEF("UseBgCol", 0, callback_method_Ozone_Window_UseBgCol),
    JS_CFUNC_DEF("UseBackgroundColour", 0, callback_method_Ozone_Window_UseBackgroundColour),
    JS_CFUNC_DEF("SetOwnForegroundColour", 1, callback_method_Ozone_Window_SetOwnForegroundColour),
    JS_CFUNC_DEF("GetForegroundColour", 0, callback_method_Ozone_Window_GetForegroundColour),
    JS_CFUNC_DEF("UseForegroundColour", 0, callback_method_Ozone_Window_UseForegroundColour),
    JS_CFUNC_DEF("InheritsForegroundColour", 0, callback_method_Ozone_Window_InheritsForegroundColour),
    JS_CFUNC_DEF("GetBackgroundStyle", 0, callback_method_Ozone_Window_GetBackgroundStyle),
    JS_CFUNC_DEF("HasTransparentBackground", 0, callback_method_Ozone_Window_HasTransparentBackground),
    JS_CFUNC_DEF("ClientToScreen", 1, callback_method_Ozone_Window_ClientToScreen),
    JS_CFUNC_DEF("ScreenToClient", 1, callback_method_Ozone_Window_ScreenToClient),
    JS_CFUNC_DEF("HitTest", 2, callback_method_Ozone_Window_HitTest),
    JS_CFUNC_DEF("GetBorder", 1, callback_method_Ozone_Window_GetBorder),
    JS_CFUNC_DEF("UpdateWindowUI", 1, callback_method_Ozone_Window_UpdateWindowUI),
    JS_CFUNC_DEF("DoUpdateWindowUI", 1, callback_method_Ozone_Window_DoUpdateWindowUI),
    JS_CFUNC_DEF("HasMultiplePages", 0, callback_method_Ozone_Window_HasMultiplePages),
    JS_CFUNC_DEF("CanScroll", 1, callback_method_Ozone_Window_CanScroll),
    JS_CFUNC_DEF("HasScrollbar", 1, callback_method_Ozone_Window_HasScrollbar),
    JS_CFUNC_DEF("LineUp", 0, callback_method_Ozone_Window_LineUp),
    JS_CFUNC_DEF("LineDown", 0, callback_method_Ozone_Window_LineDown),
    JS_CFUNC_DEF("PageUp", 0, callback_method_Ozone_Window_PageUp),
    JS_CFUNC_DEF("PageDown", 0, callback_method_Ozone_Window_PageDown),
    JS_CFUNC_DEF("AlwaysShowScrollbars", 2, callback_method_Ozone_Window_AlwaysShowScrollbars),
    JS_CFUNC_DEF("IsScrollbarAlwaysShown", 1, callback_method_Ozone_Window_IsScrollbarAlwaysShown),
    JS_CFUNC_DEF("SetHelpText", 1, callback_method_Ozone_Window_SetHelpText),
    JS_CFUNC_DEF("GetHelpTextAtPoint", 2, callback_method_Ozone_Window_GetHelpTextAtPoint),
    JS_CFUNC_DEF("GetHelpText", 0, callback_method_Ozone_Window_GetHelpText),
    JS_CFUNC_DEF("SetToolTip", 1, callback_method_Ozone_Window_SetToolTip),
    JS_CFUNC_DEF("UnsetToolTip", 0, callback_method_Ozone_Window_UnsetToolTip),
    JS_CFUNC_DEF("GetToolTipText", 0, callback_method_Ozone_Window_GetToolTipText),
    JS_CFUNC_DEF("DragAcceptFiles", 1, callback_method_Ozone_Window_DragAcceptFiles),
    JS_CFUNC_DEF("DeleteRelatedConstraints", 0, callback_method_Ozone_Window_DeleteRelatedConstraints),
    JS_CFUNC_DEF("ResetConstraints", 0, callback_method_Ozone_Window_ResetConstraints),
    JS_CFUNC_DEF("SetConstraintSizes", 1, callback_method_Ozone_Window_SetConstraintSizes),
    JS_CFUNC_DEF("DoPhase", 1, callback_method_Ozone_Window_DoPhase),
    JS_CFUNC_DEF("SetSizeConstraint", 4, callback_method_Ozone_Window_SetSizeConstraint),
    JS_CFUNC_DEF("MoveConstraint", 2, callback_method_Ozone_Window_MoveConstraint),
    JS_CFUNC_DEF("SetAutoLayout", 1, callback_method_Ozone_Window_SetAutoLayout),
    JS_CFUNC_DEF("GetAutoLayout", 0, callback_method_Ozone_Window_GetAutoLayout),
    JS_CFUNC_DEF("Layout", 0, callback_method_Ozone_Window_Layout),
    JS_CFUNC_DEF("SetSizer", 2, callback_method_Ozone_Window_SetSizer),
    JS_CFUNC_DEF("SetSizerAndFit", 2, callback_method_Ozone_Window_SetSizerAndFit),
    JS_CFUNC_DEF("GetSizer", 0, callback_method_Ozone_Window_GetSizer),
    JS_CFUNC_DEF("SetContainingSizer", 1, callback_method_Ozone_Window_SetContainingSizer),
    JS_CFUNC_DEF("GetContainingSizer", 0, callback_method_Ozone_Window_GetContainingSizer),
    JS_CFUNC_DEF("SetTransparent", 1, callback_method_Ozone_Window_SetTransparent),
    JS_CFUNC_DEF("CanSetTransparent", 0, callback_method_Ozone_Window_CanSetTransparent),
    JS_CFUNC_DEF("OnInitDialog", 1, callback_method_Ozone_Window_OnInitDialog),
    JS_CFUNC_DEF("OnMiddleClick", 1, callback_method_Ozone_Window_OnMiddleClick),
    JS_CFUNC_DEF("SendIdleEvents", 1, callback_method_Ozone_Window_SendIdleEvents),
    JS_CFUNC_DEF("WXSendContextMenuEvent", 1, callback_method_Ozone_Window_WXSendContextMenuEvent),
    JS_CFUNC_DEF("DissociateHandle", 0, callback_method_Ozone_Window_DissociateHandle),
    JS_CFUNC_DEF("HasCustomPalette", 0, callback_method_Ozone_Window_HasCustomPalette),
    JS_CFUNC_DEF("GetAncestorWithCustomPalette", 0, callback_method_Ozone_Window_GetAncestorWithCustomPalette),
    JS_CFUNC_DEF("InheritAttributes", 0, callback_method_Ozone_Window_InheritAttributes),
    JS_CFUNC_DEF("ShouldInheritColours", 0, callback_method_Ozone_Window_ShouldInheritColours),
    JS_CFUNC_DEF("CanBeOutsideClientArea", 0, callback_method_Ozone_Window_CanBeOutsideClientArea),
    JS_CFUNC_DEF("CanApplyThemeBorder", 0, callback_method_Ozone_Window_CanApplyThemeBorder),
    JS_CFUNC_DEF("GetMainWindowOfCompositeControl", 0, callback_method_Ozone_Window_GetMainWindowOfCompositeControl),
    JS_CFUNC_DEF("IsTopNavigationDomain", 1, callback_method_Ozone_Window_IsTopNavigationDomain),
    JS_CFUNC_DEF("get_m_x", 0, callback_method_Ozone_Window_get_m_x),
    JS_CFUNC_DEF("set_m_x", 1, callback_method_Ozone_Window_set_m_x),
    JS_CFUNC_DEF("get_m_y", 0, callback_method_Ozone_Window_get_m_y),
    JS_CFUNC_DEF("set_m_y", 1, callback_method_Ozone_Window_set_m_y),
    JS_CFUNC_DEF("get_m_width", 0, callback_method_Ozone_Window_get_m_width),
    JS_CFUNC_DEF("set_m_width", 1, callback_method_Ozone_Window_set_m_width),
    JS_CFUNC_DEF("get_m_height", 0, callback_method_Ozone_Window_get_m_height),
    JS_CFUNC_DEF("set_m_height", 1, callback_method_Ozone_Window_set_m_height),
    JS_CFUNC_DEF("get_m_clientWidth", 0, callback_method_Ozone_Window_get_m_clientWidth),
    JS_CFUNC_DEF("set_m_clientWidth", 1, callback_method_Ozone_Window_set_m_clientWidth),
    JS_CFUNC_DEF("get_m_clientHeight", 0, callback_method_Ozone_Window_get_m_clientHeight),
    JS_CFUNC_DEF("set_m_clientHeight", 1, callback_method_Ozone_Window_set_m_clientHeight),
    JS_CFUNC_DEF("get_m_useCachedClientSize", 0, callback_method_Ozone_Window_get_m_useCachedClientSize),
    JS_CFUNC_DEF("set_m_useCachedClientSize", 1, callback_method_Ozone_Window_set_m_useCachedClientSize),
    JS_CFUNC_DEF("get_m_isGtkPositionValid", 0, callback_method_Ozone_Window_get_m_isGtkPositionValid),
    JS_CFUNC_DEF("set_m_isGtkPositionValid", 1, callback_method_Ozone_Window_set_m_isGtkPositionValid),
    JS_CFUNC_DEF("get_m_gtkLabel", 0, callback_method_Ozone_Window_get_m_gtkLabel),
    JS_CFUNC_DEF("set_m_gtkLabel", 1, callback_method_Ozone_Window_set_m_gtkLabel),
    JS_CFUNC_DEF("get_m_noExpose", 0, callback_method_Ozone_Window_get_m_noExpose),
    JS_CFUNC_DEF("set_m_noExpose", 1, callback_method_Ozone_Window_set_m_noExpose),
    JS_CFUNC_DEF("get_m_nativeSizeEvent", 0, callback_method_Ozone_Window_get_m_nativeSizeEvent),
    JS_CFUNC_DEF("set_m_nativeSizeEvent", 1, callback_method_Ozone_Window_set_m_nativeSizeEvent),
    JS_CFUNC_DEF("get_m_isScrolling", 0, callback_method_Ozone_Window_get_m_isScrolling),
    JS_CFUNC_DEF("set_m_isScrolling", 1, callback_method_Ozone_Window_set_m_isScrolling),
    JS_CFUNC_DEF("get_m_clipPaintRegion", 0, callback_method_Ozone_Window_get_m_clipPaintRegion),
    JS_CFUNC_DEF("set_m_clipPaintRegion", 1, callback_method_Ozone_Window_set_m_clipPaintRegion),
    JS_CFUNC_DEF("get_m_dirtyTabOrder", 0, callback_method_Ozone_Window_get_m_dirtyTabOrder),
    JS_CFUNC_DEF("set_m_dirtyTabOrder", 1, callback_method_Ozone_Window_set_m_dirtyTabOrder),
    JS_CFUNC_DEF("get_m_mouseButtonDown", 0, callback_method_Ozone_Window_get_m_mouseButtonDown),
    JS_CFUNC_DEF("set_m_mouseButtonDown", 1, callback_method_Ozone_Window_set_m_mouseButtonDown),
    JS_CFUNC_DEF("get_m_showOnIdle", 0, callback_method_Ozone_Window_get_m_showOnIdle),
    JS_CFUNC_DEF("set_m_showOnIdle", 1, callback_method_Ozone_Window_set_m_showOnIdle),
    JS_CFUNC_DEF("get_m_needCursorReset", 0, callback_method_Ozone_Window_get_m_needCursorReset),
    JS_CFUNC_DEF("set_m_needCursorReset", 1, callback_method_Ozone_Window_set_m_needCursorReset),
    JS_CFUNC_DEF("ScrollDirFromOrient", 1, callback_method_Ozone_Window_ScrollDirFromOrient),
    JS_CFUNC_DEF("OrientFromScrollDir", 1, callback_method_Ozone_Window_OrientFromScrollDir),
    JS_CFUNC_DEF("NewControlId", 1, callback_method_Ozone_Window_NewControlId),
    JS_CFUNC_DEF("UnreserveControlId", 2, callback_method_Ozone_Window_UnreserveControlId),
    JS_CFUNC_DEF("FindFocus", 0, callback_method_Ozone_Window_FindFocus),
    JS_CFUNC_DEF("DoFindFocus", 0, callback_method_Ozone_Window_DoFindFocus),
    JS_CFUNC_DEF("FindWindowById", 2, callback_method_Ozone_Window_FindWindowById),
    JS_CFUNC_DEF("FindWindowByName", 2, callback_method_Ozone_Window_FindWindowByName),
    JS_CFUNC_DEF("FindWindowByLabel", 2, callback_method_Ozone_Window_FindWindowByLabel),
    JS_CFUNC_DEF("GetCapture", 0, callback_method_Ozone_Window_GetCapture),
    JS_CFUNC_DEF("GetClassDefaultAttributes", 1, callback_method_Ozone_Window_GetClassDefaultAttributes),
    JS_CFUNC_DEF("toString", 0, callback_class_Ozone_Window_toString),
};

static void register_class_Ozone_Window(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (!set)
    {
        JS_AddModuleExport(ctx, m, "Window");
        return;
    }

    if (phase == 0)
    {
        JS_NewClassID(&classId_Ozone_Window);

        JS_NewClass(JS_GetRuntime(ctx), classId_Ozone_Window, &classDef_Ozone_Window);

        JSValue proto = JS_NewObject(ctx);
        JS_SetPropertyFunctionList(ctx, proto, funcDef_Ozone_Window, sizeof(funcDef_Ozone_Window) / sizeof(funcDef_Ozone_Window[0]));
        JS_SetClassProto(ctx, classId_Ozone_Window, proto);

        JSValue ctor = JS_NewCFunction2(ctx, callback_method_Ozone_Window_Window, "Window", 6, JS_CFUNC_constructor, 0);
        JS_SetConstructor(ctx, ctor, proto);

        JS_SetModuleExport(ctx, m, "Window", ctor);
    }
    else if (phase == 1)
    {
        JSValue proto = JS_GetClassProto(ctx, classId_Ozone_Window);
        JSValue baseProto = JS_GetClassProto(ctx, classId_Ozone_EvtHandler);
        int err = JS_SetPrototype(ctx, proto, baseProto);
        assert(err != -1);
        JS_FreeValue(ctx, baseProto);
        JS_FreeValue(ctx, proto);
    }
}

// Ozone::FindWindowAtPointer
static JSValue callback_function_Ozone_FindWindowAtPointer(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc != 1)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    if (JS_IsObject(argv[0]) || JS_IsNull(argv[0]))
        goto overload0;

    goto error;

error:
    return JS_ThrowTypeError(ctx, "Unsupported argument type");

    // ::Ozone::Window* FindWindowAtPointer(::Ozone::Point& pt)
overload0:
    {
        Ozone::Point* pt_instance = (Ozone::Point*) JS_Interop_GetInstance(argv[0], \
            classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER);
        auto &__arg0 = *pt_instance;

        ::Ozone::Window* __ret = ::Ozone::FindWindowAtPointer(__arg0);

        JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

        return ____ret;
    }
}

static void register_function_Ozone_FindWindowAtPointer(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "FindWindowAtPointer");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewCFunction(ctx, callback_function_Ozone_FindWindowAtPointer, "FindWindowAtPointer", 1);
    int status = JS_SetModuleExport(ctx, m, "FindWindowAtPointer", val);
    assert(status != -1);
}

// Ozone::GetMousePosition
static JSValue callback_function_Ozone_GetMousePosition(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    ::Ozone::Point __ret = ::Ozone::GetMousePosition();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Point, JS_INTEROP_INSTANCE_RAW_POINTER, (void*) &__ret);

    return ____ret;
}

static void register_function_Ozone_GetMousePosition(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "GetMousePosition");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewCFunction(ctx, callback_function_Ozone_GetMousePosition, "GetMousePosition", 0);
    int status = JS_SetModuleExport(ctx, m, "GetMousePosition", val);
    assert(status != -1);
}

// Ozone::GetActiveWindow
static JSValue callback_function_Ozone_GetActiveWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv)
{
    if (argc > 0)
        return JS_ThrowRangeError(ctx, "Unsupported number of arguments");

    ::Ozone::Window* __ret = ::Ozone::GetActiveWindow();

    JSValue ____ret = JS_Interop_CreateFromInstance(ctx, classId_Ozone_Window, JS_INTEROP_INSTANCE_SIGNAL_CONTEXT, (void*) __ret);

    return ____ret;
}

static void register_function_Ozone_GetActiveWindow(JSContext *ctx, JSModuleDef *m, bool set)
{
    if (!set)
    {
        int status = JS_AddModuleExport(ctx, m, "GetActiveWindow");
        assert(status != -1);
        return;
    }

    JSValue val = JS_NewCFunction(ctx, callback_function_Ozone_GetActiveWindow, "GetActiveWindow", 0);
    int status = JS_SetModuleExport(ctx, m, "GetActiveWindow", val);
    assert(status != -1);
}

void register_ozone_window(JSContext *ctx, JSModuleDef *m, bool set, int phase)
{
    if (phase == 0)
    {
        register_enum_Ozone_WindowVariant(ctx, m, set);

        register_enum_Ozone_ShowEffect(ctx, m, set);

        register_enum_Ozone_SendEventFlags(ctx, m, set);

        register_enum_Ozone_TouchMode(ctx, m, set);

        register_function_Ozone_FindWindowAtPointer(ctx, m, set);

        register_function_Ozone_GetMousePosition(ctx, m, set);

        register_function_Ozone_GetActiveWindow(ctx, m, set);
    }

    register_class_Ozone_VisualAttributes(ctx, m, set, phase);

    register_class_Ozone_WindowListNode(ctx, m, set, phase);

    register_class_Ozone_Window(ctx, m, set, phase);
}

} // extern "C"
