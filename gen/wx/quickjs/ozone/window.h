// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#pragma once

#include <quickjs.h>

enum class WindowVariant : unsigned int
{
    NORMAL = 0,
    SMALL = 1,
    MINI = 2,
    LARGE = 3,
    MAX = 4
};

enum class ShowEffect : unsigned int
{
    NONE = 0,
    ROLL_TO_LEFT = 1,
    ROLL_TO_RIGHT = 2,
    ROLL_TO_TOP = 3,
    ROLL_TO_BOTTOM = 4,
    SLIDE_TO_LEFT = 5,
    SLIDE_TO_RIGHT = 6,
    SLIDE_TO_TOP = 7,
    SLIDE_TO_BOTTOM = 8,
    BLEND = 9,
    EXPAND = 10,
    MAX = 11
};

enum class SendEventFlags : unsigned int
{
    POST = 1
};

enum class TouchMode : unsigned int
{
    NONE = 0x0,
    VERTICAL_PAN_GESTURE = 0x1,
    HORIZONTAL_PAN_GESTURE = 0x2,
    PAN_GESTURES = 3,
    ZOOM_GESTURE = 0x4,
    ROTATE_GESTURE = 0x8,
    PRESS_GESTURES = 0x10,
    ALL_GESTURES = 0x1f
};

class VisualAttributes
{
public:

    ::Ozone::VisualAttributes* __Instance;

    VisualAttributes(::Ozone::VisualAttributes* instance, bool ownNativeInstance = false);

    VisualAttributes(const ::Ozone::Ozone::VisualAttributes& _0);

    VisualAttributes();

    ~VisualAttributes();

    ::Ozone::Ozone::Color get_colFg();

    void set_colFg(::Ozone::Ozone::Color value);

    ::Ozone::Ozone::Color get_colBg();

    void set_colBg(::Ozone::Ozone::Color value);

protected:

    bool __ownsNativeInstance;
};

class WindowListNode
{
public:

    ::Ozone::WindowListNode* __Instance;

    WindowListNode(::Ozone::WindowListNode* instance, bool ownNativeInstance = false);

    WindowListNode(const ::Ozone::Ozone::WindowListNode& _0);

    ~WindowListNode();

    ::Ozone::Ozone::WindowListNode* GetNext() const;

    ::Ozone::Ozone::WindowListNode* GetPrevious() const;

    ::Ozone::Ozone::Window* GetData() const;

    void SetData(::Ozone::Ozone::Window* data);

protected:

    bool __ownsNativeInstance;
};

class Window : public Ozone::Ozone::EvtHandler
{
public:

    enum class ScrollDir : unsigned int
    {
        Horz = 0,
        Vert = 1,
        Max = 2
    };

    enum class NavigationKind : unsigned int
    {
        Tab = 0,
        Accel = 1
    };

    Window(::Ozone::Window* instance, bool ownNativeInstance = false);

    Window();

    Window(::Ozone::Ozone::Window* parent, int id, const ::Ozone::Ozone::Point& pos, const ::Ozone::Ozone::Size& size, long style, const char* name);

    Window(const ::Ozone::Ozone::Window& _0);

    ~Window();

    bool Create(::Ozone::Ozone::Window* parent, int id, const ::Ozone::Ozone::Point& pos, const ::Ozone::Ozone::Size& size, long style, const char* name);

    virtual void Raise();

    virtual void Lower();

    virtual bool Show(bool show);

    virtual bool IsShown() const;

    virtual bool IsRetained() const;

    virtual void SetFocus();

    virtual void SetCanFocus(bool canFocus);

    virtual void WarpPointer(int x, int y);

    virtual bool EnableTouchEvents(int eventsMask);

    virtual void Refresh(bool eraseBackground, const ::Ozone::Ozone::Rect* rect);

    virtual void Update();

    virtual void ClearBackground();

    virtual bool SetBackgroundColour(const ::Ozone::Ozone::Color& colour);

    virtual bool SetForegroundColour(const ::Ozone::Ozone::Color& colour);

    virtual bool SetBackgroundStyle(::Ozone::Ozone::BackgroundStyle style);

    virtual bool IsTransparentBackgroundSupported(const char* reason) const;

    virtual int GetCharHeight() const;

    virtual int GetCharWidth() const;

    virtual double GetContentScaleFactor() const;

    virtual double GetDPIScaleFactor() const;

    virtual void SetScrollbar(int orient, int pos, int thumbVisible, int range, bool refresh);

    virtual void SetScrollPos(int orient, int pos, bool refresh);

    virtual int GetScrollPos(int orient) const;

    virtual int GetScrollThumb(int orient) const;

    virtual int GetScrollRange(int orient) const;

    virtual void ScrollWindow(int dx, int dy, const ::Ozone::Ozone::Rect* rect);

    virtual bool ScrollLines(int lines);

    virtual bool ScrollPages(int pages);

    virtual int AdjustForLayoutDirection(int x, int width, int widthTotal) const;

    virtual bool DoIsExposed(int x, int y) const;

    virtual bool DoIsExposed(int x, int y, int w, int h) const;

    virtual void SetDoubleBuffered(bool on);

    virtual bool IsDoubleBuffered() const;

    virtual void SetLabel(const char* label);

    virtual const char* GetLabel() const;

    virtual void OnInternalIdle();

    bool PreCreation(::Ozone::Ozone::Window* parent, const ::Ozone::Ozone::Point& pos, const ::Ozone::Ozone::Size& size);

    void PostCreation();

    void DoAddChild(::Ozone::Ozone::Window* child);

    bool IsOfStandardClass() const;

    bool Close(bool force);

    virtual bool Destroy();

    bool DestroyChildren();

    bool IsBeingDeleted() const;

    virtual void SetName(const char* name);

    virtual const char* GetName() const;

    void SetWindowVariant(::Ozone::Ozone::WindowVariant variant);

    ::Ozone::Ozone::WindowVariant GetWindowVariant() const;

    virtual void SetId(int winid);

    int GetId() const;

    void SetSize(int x, int y, int width, int height, int sizeFlags);

    void SetSize(int width, int height);

    void SetSize(const ::Ozone::Ozone::Size& size);

    void SetSize(const ::Ozone::Ozone::Rect& rect, int sizeFlags);

    void Move(int x, int y, int flags);

    void Move(const ::Ozone::Ozone::Point& pt, int flags);

    void SetPosition(const ::Ozone::Ozone::Point& pt);

    void SetClientSize(int width, int height);

    void SetClientSize(const ::Ozone::Ozone::Size& size);

    void SetClientSize(const ::Ozone::Ozone::Rect& rect);

    ::Ozone::Ozone::Point GetPosition() const;

    ::Ozone::Ozone::Point GetScreenPosition() const;

    ::Ozone::Ozone::Size GetSize() const;

    ::Ozone::Ozone::Size GetClientSize() const;

    ::Ozone::Ozone::Rect GetRect() const;

    ::Ozone::Ozone::Rect GetScreenRect() const;

    virtual ::Ozone::Ozone::Point GetClientAreaOrigin() const;

    ::Ozone::Ozone::Rect GetClientRect() const;

    virtual ::Ozone::Ozone::Size ClientToWindowSize(const ::Ozone::Ozone::Size& size) const;

    virtual ::Ozone::Ozone::Size WindowToClientSize(const ::Ozone::Ozone::Size& size) const;

    ::Ozone::Ozone::Size GetBestSize() const;

    int GetBestHeight(int width) const;

    int GetBestWidth(int height) const;

    void InvalidateBestSize();

    void CacheBestSize(const ::Ozone::Ozone::Size& size) const;

    virtual ::Ozone::Ozone::Size GetEffectiveMinSize() const;

    void SetInitialSize(const ::Ozone::Ozone::Size& size);

    void Centre(int dir);

    void Center(int dir);

    void CentreOnParent(int dir);

    void CenterOnParent(int dir);

    virtual void Fit();

    virtual void FitInside();

    virtual void SetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH);

    void SetSizeHints(const ::Ozone::Ozone::Size& minSize, const ::Ozone::Ozone::Size& maxSize, const ::Ozone::Ozone::Size& incSize);

    virtual void SetMinSize(const ::Ozone::Ozone::Size& minSize);

    virtual void SetMaxSize(const ::Ozone::Ozone::Size& maxSize);

    virtual void SetMinClientSize(const ::Ozone::Ozone::Size& size);

    virtual void SetMaxClientSize(const ::Ozone::Ozone::Size& size);

    virtual ::Ozone::Ozone::Size GetMinSize() const;

    virtual ::Ozone::Ozone::Size GetMaxSize() const;

    virtual ::Ozone::Ozone::Size GetMinClientSize() const;

    virtual ::Ozone::Ozone::Size GetMaxClientSize() const;

    int GetMinWidth() const;

    int GetMinHeight() const;

    int GetMaxWidth() const;

    int GetMaxHeight() const;

    void SetVirtualSize(const ::Ozone::Ozone::Size& size);

    void SetVirtualSize(int x, int y);

    ::Ozone::Ozone::Size GetVirtualSize() const;

    virtual void DoSetVirtualSize(int x, int y);

    virtual ::Ozone::Ozone::Size DoGetVirtualSize() const;

    virtual ::Ozone::Ozone::Size GetBestVirtualSize() const;

    virtual ::Ozone::Ozone::Size GetWindowBorderSize() const;

    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);

    virtual void SendSizeEvent(int flags);

    void SendSizeEventToParent(int flags);

    void PostSizeEvent();

    void PostSizeEventToParent();

    virtual bool BeginRepositioningChildren();

    virtual void EndRepositioningChildren();

    bool Hide();

    virtual bool ShowWithEffect(::Ozone::Ozone::ShowEffect _0, unsigned int _1);

    virtual bool HideWithEffect(::Ozone::Ozone::ShowEffect _0, unsigned int _1);

    virtual bool Enable(bool enable);

    bool Disable();

    bool IsEnabled() const;

    virtual bool IsThisEnabled() const;

    virtual bool IsShownOnScreen() const;

    virtual void SetWindowStyleFlag(long style);

    virtual long GetWindowStyleFlag() const;

    void SetWindowStyle(long style);

    long GetWindowStyle() const;

    bool HasFlag(int flag) const;

    bool ToggleWindowStyle(int flag);

    virtual void SetExtraStyle(long exStyle);

    long GetExtraStyle() const;

    bool HasExtraStyle(int exFlag) const;

    virtual void SetThemeEnabled(bool enableTheme);

    virtual bool GetThemeEnabled() const;

    virtual void SetFocusFromKbd();

    virtual bool HasFocus() const;

    virtual bool AcceptsFocus() const;

    virtual bool AcceptsFocusRecursively() const;

    virtual bool AcceptsFocusFromKeyboard() const;

    void DisableFocusFromKeyboard();

    virtual bool CanBeFocused() const;

    bool IsFocusable() const;

    bool CanAcceptFocus() const;

    bool CanAcceptFocusFromKeyboard() const;

    virtual void EnableVisibleFocus(bool _0);

    bool NavigateIn(int flags);

    bool Navigate(int flags);

    bool HandleAsNavigationKey(const ::Ozone::Ozone::KeyEvent& event);

    void MoveBeforeInTabOrder(::Ozone::Ozone::Window* win);

    void MoveAfterInTabOrder(::Ozone::Ozone::Window* win);

    ::Ozone::Ozone::Window* GetPrevSibling() const;

    ::Ozone::Ozone::Window* GetNextSibling() const;

    ::Ozone::Ozone::Window* GetParent() const;

    ::Ozone::Ozone::Window* GetGrandParent() const;

    virtual bool IsTopLevel() const;

    virtual bool IsClientAreaChild(const ::Ozone::Ozone::Window* _0) const;

    ::Ozone::Ozone::Window* FindWindow(long winid) const;

    ::Ozone::Ozone::Window* FindWindow(const char* name) const;

    ::Ozone::Ozone::EvtHandler* GetEventHandler() const;

    void SetEventHandler(::Ozone::Ozone::EvtHandler* handler);

    void PushEventHandler(::Ozone::Ozone::EvtHandler* handler);

    ::Ozone::Ozone::EvtHandler* PopEventHandler(bool deleteHandler);

    bool RemoveEventHandler(::Ozone::Ozone::EvtHandler* handler);

    bool ProcessWindowEvent(::Ozone::Ozone::Event& event);

    bool ProcessWindowEventLocally(::Ozone::Ozone::Event& event);

    bool HandleWindowEvent(::Ozone::Ozone::Event& event) const;

    virtual void SetNextHandler(::Ozone::Ozone::EvtHandler* handler) override;

    virtual void SetPreviousHandler(::Ozone::Ozone::EvtHandler* handler) override;

    virtual bool Validate();

    virtual bool TransferDataToWindow();

    virtual bool TransferDataFromWindow();

    virtual void InitDialog();

    virtual bool RegisterHotKey(int hotkeyId, int modifiers, int keycode);

    virtual bool UnregisterHotKey(int hotkeyId);

    virtual ::Ozone::Ozone::Size GetDPI() const;

    ::Ozone::Ozone::Size FromDIP(const ::Ozone::Ozone::Size& sz) const;

    ::Ozone::Ozone::Point FromDIP(const ::Ozone::Ozone::Point& pt) const;

    int FromDIP(int d) const;

    ::Ozone::Ozone::Size ToDIP(const ::Ozone::Ozone::Size& sz) const;

    ::Ozone::Ozone::Point ToDIP(const ::Ozone::Ozone::Point& pt) const;

    int ToDIP(int d) const;

    ::Ozone::Ozone::Point ConvertPixelsToDialog(const ::Ozone::Ozone::Point& pt) const;

    ::Ozone::Ozone::Point ConvertDialogToPixels(const ::Ozone::Ozone::Point& pt) const;

    ::Ozone::Ozone::Size ConvertPixelsToDialog(const ::Ozone::Ozone::Size& sz) const;

    ::Ozone::Ozone::Size ConvertDialogToPixels(const ::Ozone::Ozone::Size& sz) const;

    void CaptureMouse();

    void ReleaseMouse();

    virtual bool HasCapture() const;

    void RefreshRect(const ::Ozone::Ozone::Rect& rect, bool eraseBackground);

    void Freeze();

    void Thaw();

    bool IsFrozen() const;

    virtual void PrepareDC(::Ozone::Ozone::DC& _0);

    ::Ozone::Ozone::Rect GetUpdateClientRect() const;

    bool IsExposed(int x, int y) const;

    bool IsExposed(int x, int y, int w, int h) const;

    bool IsExposed(const ::Ozone::Ozone::Point& pt) const;

    bool IsExposed(const ::Ozone::Ozone::Rect& rect) const;

    virtual ::Ozone::Ozone::VisualAttributes GetDefaultAttributes() const;

    void SetOwnBackgroundColour(const ::Ozone::Ozone::Color& colour);

    ::Ozone::Ozone::Color GetBackgroundColour() const;

    bool InheritsBackgroundColour() const;

    bool UseBgCol() const;

    bool UseBackgroundColour() const;

    void SetOwnForegroundColour(const ::Ozone::Ozone::Color& colour);

    ::Ozone::Ozone::Color GetForegroundColour() const;

    bool UseForegroundColour() const;

    bool InheritsForegroundColour() const;

    ::Ozone::Ozone::BackgroundStyle GetBackgroundStyle() const;

    virtual bool HasTransparentBackground();

    ::Ozone::Ozone::Point ClientToScreen(const ::Ozone::Ozone::Point& pt) const;

    ::Ozone::Ozone::Point ScreenToClient(const ::Ozone::Ozone::Point& pt) const;

    ::Ozone::Ozone::HitTest HitTest(int x, int y) const;

    ::Ozone::Ozone::HitTest HitTest(const ::Ozone::Ozone::Point& pt) const;

    ::Ozone::Ozone::Border GetBorder(long flags) const;

    ::Ozone::Ozone::Border GetBorder() const;

    virtual void UpdateWindowUI(long flags);

    virtual void DoUpdateWindowUI(::Ozone::Ozone::UpdateUIEvent& event);

    virtual bool HasMultiplePages() const;

    virtual bool CanScroll(int orient) const;

    bool HasScrollbar(int orient) const;

    bool LineUp();

    bool LineDown();

    bool PageUp();

    bool PageDown();

    virtual void AlwaysShowScrollbars(bool _0, bool _1);

    virtual bool IsScrollbarAlwaysShown(int _0) const;

    void SetHelpText(const char* text);

    virtual const char* GetHelpTextAtPoint(const ::Ozone::Ozone::Point& pt, ::Ozone::Ozone::HelpEvent::Source origin) const;

    const char* GetHelpText() const;

    void SetToolTip(const char* tip);

    void UnsetToolTip();

    const char* GetToolTipText() const;

    virtual void DragAcceptFiles(bool accept);

    void DeleteRelatedConstraints();

    void ResetConstraints();

    virtual void SetConstraintSizes(bool recurse);

    virtual bool DoPhase(int phase);

    virtual void SetSizeConstraint(int x, int y, int w, int h);

    virtual void MoveConstraint(int x, int y);

    void SetAutoLayout(bool autoLayout);

    bool GetAutoLayout() const;

    virtual bool Layout();

    void SetSizer(::Ozone::Ozone::Sizer* sizer, bool deleteOld);

    void SetSizerAndFit(::Ozone::Ozone::Sizer* sizer, bool deleteOld);

    ::Ozone::Ozone::Sizer* GetSizer() const;

    void SetContainingSizer(::Ozone::Ozone::Sizer* sizer);

    ::Ozone::Ozone::Sizer* GetContainingSizer() const;

    virtual bool SetTransparent(unsigned char _0);

    virtual bool CanSetTransparent();

    void OnInitDialog(::Ozone::Ozone::InitDialogEvent& event);

    void OnMiddleClick(::Ozone::Ozone::MouseEvent& event);

    virtual bool SendIdleEvents(::Ozone::Ozone::IdleEvent& event);

    bool WXSendContextMenuEvent(const ::Ozone::Ozone::Point& posInScreenCoords);

    virtual void DissociateHandle();

    bool HasCustomPalette() const;

    ::Ozone::Ozone::Window* GetAncestorWithCustomPalette() const;

    virtual void InheritAttributes();

    virtual bool ShouldInheritColours() const;

    virtual bool CanBeOutsideClientArea() const;

    virtual bool CanApplyThemeBorder() const;

    virtual ::Ozone::Ozone::Window* GetMainWindowOfCompositeControl();

    virtual bool IsTopNavigationDomain(::Ozone::Ozone::Window::NavigationKind _0) const;

    int get_m_x();

    void set_m_x(int value);

    int get_m_y();

    void set_m_y(int value);

    int get_m_width();

    void set_m_width(int value);

    int get_m_height();

    void set_m_height(int value);

    int get_m_clientWidth();

    void set_m_clientWidth(int value);

    int get_m_clientHeight();

    void set_m_clientHeight(int value);

    bool get_m_useCachedClientSize();

    void set_m_useCachedClientSize(bool value);

    bool get_m_isGtkPositionValid();

    void set_m_isGtkPositionValid(bool value);

    const char* get_m_gtkLabel();

    void set_m_gtkLabel(const char* value);

    bool get_m_noExpose();

    void set_m_noExpose(bool value);

    bool get_m_nativeSizeEvent();

    void set_m_nativeSizeEvent(bool value);

    bool get_m_isScrolling();

    void set_m_isScrolling(bool value);

    bool get_m_clipPaintRegion();

    void set_m_clipPaintRegion(bool value);

    bool get_m_dirtyTabOrder();

    void set_m_dirtyTabOrder(bool value);

    bool get_m_mouseButtonDown();

    void set_m_mouseButtonDown(bool value);

    bool get_m_showOnIdle();

    void set_m_showOnIdle(bool value);

    bool get_m_needCursorReset();

    void set_m_needCursorReset(bool value);

    static ::Ozone::Ozone::Window::ScrollDir ScrollDirFromOrient(int orient);

    static int OrientFromScrollDir(::Ozone::Ozone::Window::ScrollDir dir);

    static int NewControlId(int count);

    static void UnreserveControlId(int id, int count);

    static ::Ozone::Ozone::Window* FindFocus();

    static ::Ozone::Ozone::Window* DoFindFocus();

    static ::Ozone::Ozone::Window* FindWindowById(long winid, const ::Ozone::Ozone::Window* parent);

    static ::Ozone::Ozone::Window* FindWindowByName(const char* name, const ::Ozone::Ozone::Window* parent);

    static ::Ozone::Ozone::Window* FindWindowByLabel(const char* label, const ::Ozone::Ozone::Window* parent);

    static ::Ozone::Ozone::Window* GetCapture();

    static ::Ozone::Ozone::VisualAttributes GetClassDefaultAttributes(::Ozone::Ozone::WindowVariant variant);
};

extern "C" JSValue js_FindWindowAtPointer(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_GetMousePosition(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
extern "C" JSValue js_GetActiveWindow(JSContext* ctx, JSValueConst this_val,
    int argc, JSValueConst* argv);
