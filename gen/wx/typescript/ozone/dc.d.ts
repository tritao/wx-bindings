// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
import * as Ozone from "Ozone";
declare module "Ozone"
{
    namespace Ozone
    {
        enum RasterOperationMode
        {
            CLEAR = 0,
            XOR = 1,
            INVERT = 2,
            OR_REVERSE = 3,
            AND_REVERSE = 4,
            COPY = 5,
            AND = 6,
            AND_INVERT = 7,
            NO_OP = 8,
            NOR = 9,
            EQUIV = 10,
            SRC_INVERT = 11,
            OR_INVERT = 12,
            NAND = 13,
            OR = 14,
            SET = 15
        }

        enum MappingMode
        {
            MM_TEXT = 1,
            MM_METRIC = 2,
            MM_LOMETRIC = 3,
            MM_TWIPS = 4,
            MM_POINTS = 5
        }

        enum FloodFillStyle
        {
            FLOOD_SURFACE = 1,
            FLOOD_BORDER = 2
        }

        enum Direction
        {
        }

        enum PolygonFillMode
        {
        }

        class FontMetrics
        {

            constructor();

            constructor(_0: Ozone.FontMetrics);

            get_height(): number;

            set_height(value: number): void;

            get_ascent(): number;

            set_ascent(value: number): void;

            get_descent(): number;

            set_descent(value: number): void;

            get_internalLeading(): number;

            set_internalLeading(value: number): void;

            get_externalLeading(): number;

            set_externalLeading(value: number): void;

            get_averageWidth(): number;

            set_averageWidth(value: number): void;
        }

        class DC extends Ozone.Ozone.Object
        {

            constructor(_0: Ozone.DC);

            GetResolution(): number;

            GetGraphicsContext(): Ozone.GraphicsContext;

            SetGraphicsContext(ctx: Ozone.GraphicsContext): void;

            CopyAttributes(dc: Ozone.DC): void;

            GetWindow(): Ozone.Window;

            IsOk(): boolean;

            CanDrawBitmap(): boolean;

            CanGetTextExtent(): boolean;

            GetSize(): Ozone.Size;

            GetSizeMM(): Ozone.Size;

            GetDepth(): number;

            GetPPI(): Ozone.Size;

            GetContentScaleFactor(): number;

            StartDoc(message: string): boolean;

            EndDoc(): void;

            StartPage(): void;

            EndPage(): void;

            CalcBoundingBox(x: number, y: number): void;

            ResetBoundingBox(): void;

            MinX(): number;

            MaxX(): number;

            MinY(): number;

            MaxY(): number;

            SetPen(pen: Ozone.Pen): void;

            SetBrush(brush: Ozone.Brush): void;

            SetBackground(brush: Ozone.Brush): void;

            SetBackgroundMode(mode: number): void;

            GetBackgroundMode(): number;

            SetTextForeground(colour: Ozone.Color): void;

            SetTextBackground(colour: Ozone.Color): void;

            SetLogicalFunction(function: Ozone.RasterOperationMode): void;

            GetLogicalFunction(): Ozone.RasterOperationMode;

            GetCharHeight(): number;

            GetCharWidth(): number;

            GetFontMetrics(): Ozone.FontMetrics;

            GetMultiLineTextExtent(string: string): Ozone.Size;

            Clear(): void;

            SetClippingRegion(x: number, y: number, width: number, height: number): void;

            SetClippingRegion(pt: Ozone.Point, sz: Ozone.Size): void;

            SetClippingRegion(rect: Ozone.Rect): void;

            DestroyClippingRegion(): void;

            GetClippingBox(rect: Ozone.Rect): boolean;

            DeviceToLogicalX(x: number): number;

            DeviceToLogicalY(y: number): number;

            DeviceToLogicalXRel(x: number): number;

            DeviceToLogicalYRel(y: number): number;

            DeviceToLogical(pt: Ozone.Point): Ozone.Point;

            DeviceToLogical(x: number, y: number): Ozone.Point;

            DeviceToLogicalRel(dim: Ozone.Size): Ozone.Size;

            DeviceToLogicalRel(x: number, y: number): Ozone.Size;

            LogicalToDeviceX(x: number): number;

            LogicalToDeviceY(y: number): number;

            LogicalToDeviceXRel(x: number): number;

            LogicalToDeviceYRel(y: number): number;

            LogicalToDevice(pt: Ozone.Point): Ozone.Point;

            LogicalToDevice(x: number, y: number): Ozone.Point;

            LogicalToDeviceRel(dim: Ozone.Size): Ozone.Size;

            LogicalToDeviceRel(x: number, y: number): Ozone.Size;

            SetMapMode(mode: Ozone.MappingMode): void;

            GetMapMode(): Ozone.MappingMode;

            SetUserScale(x: number, y: number): void;

            SetLogicalScale(x: number, y: number): void;

            SetLogicalOrigin(x: number, y: number): void;

            GetLogicalOrigin(): Ozone.Point;

            SetDeviceOrigin(x: number, y: number): void;

            GetDeviceOrigin(): Ozone.Point;

            SetAxisOrientation(xLeftRight: boolean, yBottomUp: boolean): void;

            CanUseTransformMatrix(): boolean;

            ResetTransformMatrix(): void;

            SetDeviceLocalOrigin(x: number, y: number): void;

            FloodFill(x: number, y: number, col: Ozone.Color, style: Ozone.FloodFillStyle): boolean;

            FloodFill(pt: Ozone.Point, col: Ozone.Color, style: Ozone.FloodFillStyle): boolean;

            GradientFillConcentric(rect: Ozone.Rect, initialColour: Ozone.Color, destColour: Ozone.Color): void;

            GradientFillConcentric(rect: Ozone.Rect, initialColour: Ozone.Color, destColour: Ozone.Color, circleCenter: Ozone.Point): void;

            GradientFillLinear(rect: Ozone.Rect, initialColour: Ozone.Color, destColour: Ozone.Color, nDirection: Ozone.Direction): void;

            GetPixel(x: number, y: number, col: Ozone.Color): boolean;

            GetPixel(pt: Ozone.Point, col: Ozone.Color): boolean;

            DrawLine(x1: number, y1: number, x2: number, y2: number): void;

            DrawLine(pt1: Ozone.Point, pt2: Ozone.Point): void;

            CrossHair(x: number, y: number): void;

            CrossHair(pt: Ozone.Point): void;

            DrawArc(x1: number, y1: number, x2: number, y2: number, xc: number, yc: number): void;

            DrawArc(pt1: Ozone.Point, pt2: Ozone.Point, centre: Ozone.Point): void;

            DrawCheckMark(x: number, y: number, width: number, height: number): void;

            DrawCheckMark(rect: Ozone.Rect): void;

            DrawEllipticArc(x: number, y: number, w: number, h: number, sa: number, ea: number): void;

            DrawEllipticArc(pt: Ozone.Point, sz: Ozone.Size, sa: number, ea: number): void;

            DrawPoint(x: number, y: number): void;

            DrawPoint(pt: Ozone.Point): void;

            DrawLines(n: number, points: Ozone.Point[], xoffset: number, yoffset: number): void;

            DrawPolygon(n: number, points: Ozone.Point[], xoffset: number, yoffset: number, fillStyle: Ozone.PolygonFillMode): void;

            DrawPolyPolygon(n: number, count: number[], points: Ozone.Point[], xoffset: number, yoffset: number, fillStyle: Ozone.PolygonFillMode): void;

            DrawRectangle(x: number, y: number, width: number, height: number): void;

            DrawRectangle(pt: Ozone.Point, sz: Ozone.Size): void;

            DrawRectangle(rect: Ozone.Rect): void;

            DrawRoundedRectangle(x: number, y: number, width: number, height: number, radius: number): void;

            DrawRoundedRectangle(pt: Ozone.Point, sz: Ozone.Size, radius: number): void;

            DrawRoundedRectangle(r: Ozone.Rect, radius: number): void;

            DrawCircle(x: number, y: number, radius: number): void;

            DrawCircle(pt: Ozone.Point, radius: number): void;

            DrawEllipse(x: number, y: number, width: number, height: number): void;

            DrawEllipse(pt: Ozone.Point, sz: Ozone.Size): void;

            DrawEllipse(rect: Ozone.Rect): void;

            DrawText(text: string, x: number, y: number): void;

            DrawText(text: string, pt: Ozone.Point): void;

            DrawRotatedText(text: string, x: number, y: number, angle: number): void;

            DrawRotatedText(text: string, pt: Ozone.Point, angle: number): void;

            DrawLabel(text: string, rect: Ozone.Rect, alignment: number, indexAccel: number): void;

            Blit(xdest: number, ydest: number, width: number, height: number, source: Ozone.DC, xsrc: number, ysrc: number, rop: Ozone.RasterOperationMode, useMask: boolean, xsrcMask: number, ysrcMask: number): boolean;

            Blit(destPt: Ozone.Point, sz: Ozone.Size, source: Ozone.DC, srcPt: Ozone.Point, rop: Ozone.RasterOperationMode, useMask: boolean, srcPtMask: Ozone.Point): boolean;

            StretchBlit(dstX: number, dstY: number, dstWidth: number, dstHeight: number, source: Ozone.DC, srcX: number, srcY: number, srcWidth: number, srcHeight: number, rop: Ozone.RasterOperationMode, useMask: boolean, srcMaskX: number, srcMaskY: number): boolean;

            StretchBlit(dstPt: Ozone.Point, dstSize: Ozone.Size, source: Ozone.DC, srcPt: Ozone.Point, srcSize: Ozone.Size, rop: Ozone.RasterOperationMode, useMask: boolean, srcMaskPt: Ozone.Point): boolean;

            DrawSpline(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): void;

            DrawSpline(n: number, points: Ozone.Point[]): void;
        }
    }
}
