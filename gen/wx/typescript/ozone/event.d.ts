// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
import * as Ozone from "Ozone";
declare module "Ozone"
{
    namespace Ozone
    {
        namespace Private
        {
        }

        enum EventCategory
        {
            UI = 1,
            USER_INPUT = 2,
            SOCKET = 4,
            TIMER = 8,
            THREAD = 16,
            UNKNOWN = 32,
            CLIPBOARD = 64,
            NATIVE_EVENTS = 3,
            ALL = 127
        }

        enum IdleMode
        {
            PROCESS_ALL = 0,
            PROCESS_SPECIFIED = 1
        }

        enum MouseWheelAxis
        {
            VERTICAL = 0,
            HORIZONTAL = 1
        }

        enum UpdateUIMode
        {
            PROCESS_ALL = 0,
            PROCESS_SPECIFIED = 1
        }

        enum EventPropagation
        {
            NONE = 0,
            MAX = 2147483647
        }

        enum JoystickButton
        {
            BUTTON_ANY = -1,
            BUTTON1 = 1,
            BUTTON2 = 2,
            BUTTON3 = 4,
            BUTTON4 = 8
        }

        enum JoystickId
        {
            JOYSTICK1 = 0,
            JOYSTICK2 = 1
        }

        enum KeyCategoryFlags
        {
            CATEGORY_ARROW = 1,
            CATEGORY_PAGING = 2,
            CATEGORY_JUMP = 4,
            CATEGORY_TAB = 8,
            CATEGORY_CUT = 16,
            CATEGORY_NAVIGATION = 7
        }

        class Event extends Ozone.Ozone.Object
        {

            constructor(winid: number, commandType: number);

            constructor(_0: Ozone.Event);

            SetEventType(typ: number): void;

            GetEventType(): number;

            GetEventObject(): Ozone.Object;

            SetEventObject(obj: Ozone.Object): void;

            GetTimestamp(): number;

            SetTimestamp(ts: number): void;

            GetId(): number;

            SetId(Id: number): void;

            GetEventUserData(): Ozone.Object;

            Skip(skip: boolean): void;

            GetSkipped(): boolean;

            Clone(): Ozone.Event;

            GetEventCategory(): Ozone.EventCategory;

            IsCommandEvent(): boolean;

            ShouldPropagate(): boolean;

            StopPropagation(): number;

            ResumePropagation(propagationLevel: number): void;

            GetPropagatedFrom(): Ozone.EvtHandler;

            WasProcessed(): boolean;

            SetWillBeProcessedAgain(): void;

            WillBeProcessedAgain(): boolean;

            ShouldProcessOnlyIn(h: Ozone.EvtHandler): boolean;

            DidntHonourProcessOnlyIn(): void;

            get_m_callbackUserData(): Ozone.Object;

            set_m_callbackUserData(value: Ozone.Object): void;
        }

        class PropagateOnce
        {

            constructor(event: Ozone.Event, handler: Ozone.EvtHandler);

            constructor(_0: Ozone.PropagateOnce);
        }

        class IdleEvent extends Event
        {

            constructor();

            constructor(_0: Ozone.IdleEvent);

            RequestMore(needMore: boolean): void;

            MoreRequested(): boolean;

            Clone(): Ozone.Event;

            SetMode(mode: Ozone.IdleMode): void;

            GetMode(): Ozone.IdleMode;
        }

        class ThreadEvent extends Event
        {

            constructor(eventType: number, id: number);

            constructor(_0: Ozone.ThreadEvent);

            Clone(): Ozone.Event;

            GetEventCategory(): Ozone.EventCategory;
        }

        class AsyncMethodCallEvent extends Event
        {

            constructor(object: Ozone.Object);

            constructor(_0: Ozone.AsyncMethodCallEvent);

            Execute(): void;
        }

        class CommandEvent extends Event
        {

            constructor(commandType: number, winid: number);

            constructor(_0: Ozone.CommandEvent);

            GetString(): string;

            GetSelection(): number;

            IsChecked(): boolean;

            IsSelection(): boolean;

            Clone(): Ozone.Event;

            GetEventCategory(): Ozone.EventCategory;
        }

        class NotifyEvent extends CommandEvent
        {

            constructor(commandType: number, winid: number);

            constructor(_0: Ozone.NotifyEvent);

            Veto(): void;

            Allow(): void;

            IsAllowed(): boolean;

            Clone(): Ozone.Event;
        }

        class ScrollEvent extends CommandEvent
        {

            constructor(commandType: number, winid: number, pos: number, orient: number);

            constructor(_0: Ozone.ScrollEvent);

            GetOrientation(): number;

            GetPosition(): number;

            SetOrientation(orient: number): void;

            SetPosition(pos: number): void;

            Clone(): Ozone.Event;
        }

        class ScrollWinEvent extends Event
        {

            constructor(commandType: number, pos: number, orient: number);

            constructor(_0: Ozone.ScrollWinEvent);

            GetOrientation(): number;

            GetPosition(): number;

            SetOrientation(orient: number): void;

            SetPosition(pos: number): void;

            Clone(): Ozone.Event;
        }

        class MouseEvent extends Event
        {

            constructor(mouseType: number);

            constructor(_0: Ozone.MouseEvent);

            IsButton(): boolean;

            ButtonDown(but: number): boolean;

            ButtonDClick(but: number): boolean;

            ButtonUp(but: number): boolean;

            Button(but: number): boolean;

            GetButton(): number;

            LeftDown(): boolean;

            MiddleDown(): boolean;

            RightDown(): boolean;

            Aux1Down(): boolean;

            Aux2Down(): boolean;

            LeftUp(): boolean;

            MiddleUp(): boolean;

            RightUp(): boolean;

            Aux1Up(): boolean;

            Aux2Up(): boolean;

            LeftDClick(): boolean;

            MiddleDClick(): boolean;

            RightDClick(): boolean;

            Aux1DClick(): boolean;

            Aux2DClick(): boolean;

            Magnify(): boolean;

            Dragging(): boolean;

            Moving(): boolean;

            Entering(): boolean;

            Leaving(): boolean;

            GetClickCount(): number;

            GetLogicalPosition(dc: Ozone.DC): Ozone.Point;

            GetWheelRotation(): number;

            GetWheelDelta(): number;

            IsWheelInverted(): boolean;

            GetWheelAxis(): Ozone.MouseWheelAxis;

            GetLinesPerAction(): number;

            GetColumnsPerAction(): number;

            IsPageScroll(): boolean;

            GetMagnification(): number;

            Clone(): Ozone.Event;

            GetEventCategory(): Ozone.EventCategory;

            get_m_clickCount(): number;

            set_m_clickCount(value: number): void;

            get_m_wheelAxis(): Ozone.MouseWheelAxis;

            set_m_wheelAxis(value: Ozone.MouseWheelAxis): void;

            get_m_wheelRotation(): number;

            set_m_wheelRotation(value: number): void;

            get_m_wheelDelta(): number;

            set_m_wheelDelta(value: number): void;

            get_m_wheelInverted(): boolean;

            set_m_wheelInverted(value: boolean): void;

            get_m_linesPerAction(): number;

            set_m_linesPerAction(value: number): void;

            get_m_columnsPerAction(): number;

            set_m_columnsPerAction(value: number): void;

            get_m_magnification(): number;

            set_m_magnification(value: number): void;
        }

        class SetCursorEvent extends Event
        {

            constructor(x: number, y: number);

            constructor(_0: Ozone.SetCursorEvent);

            GetX(): number;

            GetY(): number;

            HasCursor(): boolean;

            Clone(): Ozone.Event;
        }

        class GestureEvent extends Event
        {

            constructor(winid: number, type: number);

            constructor(_0: Ozone.GestureEvent);

            SetPosition(pos: Ozone.Point): void;

            IsGestureStart(): boolean;

            SetGestureStart(isStart: boolean): void;

            IsGestureEnd(): boolean;

            SetGestureEnd(isEnd: boolean): void;

            Clone(): Ozone.Event;
        }

        class PanGestureEvent extends GestureEvent
        {

            constructor(winid: number);

            constructor(_0: Ozone.PanGestureEvent);

            GetDelta(): Ozone.Point;

            SetDelta(delta: Ozone.Point): void;

            Clone(): Ozone.Event;
        }

        class ZoomGestureEvent extends GestureEvent
        {

            constructor(winid: number);

            constructor(_0: Ozone.ZoomGestureEvent);

            GetZoomFactor(): number;

            SetZoomFactor(zoomFactor: number): void;

            Clone(): Ozone.Event;
        }

        class RotateGestureEvent extends GestureEvent
        {

            constructor(winid: number);

            constructor(_0: Ozone.RotateGestureEvent);

            GetRotationAngle(): number;

            SetRotationAngle(rotationAngle: number): void;

            Clone(): Ozone.Event;
        }

        class TwoFingerTapEvent extends GestureEvent
        {

            constructor(winid: number);

            constructor(_0: Ozone.TwoFingerTapEvent);

            Clone(): Ozone.Event;
        }

        class LongPressEvent extends GestureEvent
        {

            constructor(winid: number);

            constructor(_0: Ozone.LongPressEvent);

            Clone(): Ozone.Event;
        }

        class PressAndTapEvent extends GestureEvent
        {

            constructor(winid: number);

            constructor(_0: Ozone.PressAndTapEvent);

            Clone(): Ozone.Event;
        }

        class KeyEvent extends Event
        {

            constructor(keyType: number);

            constructor(eventType: number, evt: Ozone.KeyEvent);

            constructor(_0: Ozone.KeyEvent);

            GetKeyCode(): number;

            IsKeyInCategory(category: number): boolean;

            GetUnicodeKey(): number;

            GetRawKeyCode(): number;

            GetRawKeyFlags(): number;

            GetPosition(): Ozone.Point;

            GetX(): number;

            GetY(): number;

            DoAllowNextEvent(): void;

            IsNextEventAllowed(): boolean;

            Clone(): Ozone.Event;

            GetEventCategory(): Ozone.EventCategory;

            get_m_x(): number;

            set_m_x(value: number): void;

            get_m_y(): number;

            set_m_y(value: number): void;

            get_m_keyCode(): number;

            set_m_keyCode(value: number): void;

            get_m_uniChar(): number;

            set_m_uniChar(value: number): void;

            get_m_rawCode(): number;

            set_m_rawCode(value: number): void;

            get_m_rawFlags(): number;

            set_m_rawFlags(value: number): void;
        }

        class SizeEvent extends Event
        {

            constructor();

            constructor(sz: Ozone.Size, winid: number);

            constructor(rect: Ozone.Rect, id: number);

            constructor(_0: Ozone.SizeEvent);

            GetSize(): Ozone.Size;

            SetSize(size: Ozone.Size): void;

            GetRect(): Ozone.Rect;

            SetRect(rect: Ozone.Rect): void;

            Clone(): Ozone.Event;

            get_m_size(): Ozone.Size;

            set_m_size(value: Ozone.Size): void;

            get_m_rect(): Ozone.Rect;

            set_m_rect(value: Ozone.Rect): void;
        }

        class MoveEvent extends Event
        {

            constructor();

            constructor(pos: Ozone.Point, winid: number);

            constructor(rect: Ozone.Rect, id: number);

            constructor(_0: Ozone.MoveEvent);

            GetPosition(): Ozone.Point;

            SetPosition(pos: Ozone.Point): void;

            GetRect(): Ozone.Rect;

            SetRect(rect: Ozone.Rect): void;

            Clone(): Ozone.Event;
        }

        class PaintEvent extends Event
        {

            constructor(_0: Ozone.PaintEvent);

            Clone(): Ozone.Event;
        }

        class NcPaintEvent extends Event
        {

            constructor(_0: Ozone.NcPaintEvent);

            Clone(): Ozone.Event;
        }

        class EraseEvent extends Event
        {

            constructor(Id: number, dc: Ozone.DC);

            constructor(_0: Ozone.EraseEvent);

            GetDC(): Ozone.DC;

            Clone(): Ozone.Event;
        }

        class FocusEvent extends Event
        {

            constructor(type: number, winid: number);

            constructor(_0: Ozone.FocusEvent);

            GetWindow(): Ozone.Window;

            SetWindow(win: Ozone.Window): void;

            Clone(): Ozone.Event;
        }

        class ChildFocusEvent extends CommandEvent
        {

            constructor(win: Ozone.Window);

            constructor(_0: Ozone.ChildFocusEvent);

            GetWindow(): Ozone.Window;

            Clone(): Ozone.Event;
        }

        class ActivateEvent extends Event
        {

            enum Reason
            {
                Mouse = 0,
                Unknown = 1
            }

            constructor(type: number, active: boolean, Id: number, activationReason: Ozone.ActivateEvent.Reason);

            constructor(_0: Ozone.ActivateEvent);

            GetActive(): boolean;

            GetActivationReason(): Ozone.ActivateEvent.Reason;

            Clone(): Ozone.Event;
        }

        class InitDialogEvent extends Event
        {

            constructor(Id: number);

            constructor(_0: Ozone.InitDialogEvent);

            Clone(): Ozone.Event;
        }

        class MenuEvent extends Event
        {

            constructor(_0: Ozone.MenuEvent);

            GetMenuId(): number;

            IsPopup(): boolean;

            Clone(): Ozone.Event;
        }

        class CloseEvent extends Event
        {

            constructor(type: number, winid: number);

            constructor(_0: Ozone.CloseEvent);

            SetLoggingOff(logOff: boolean): void;

            GetLoggingOff(): boolean;

            Veto(veto: boolean): void;

            SetCanVeto(canVeto: boolean): void;

            CanVeto(): boolean;

            GetVeto(): boolean;

            Clone(): Ozone.Event;
        }

        class ShowEvent extends Event
        {

            constructor(winid: number, show: boolean);

            constructor(_0: Ozone.ShowEvent);

            SetShow(show: boolean): void;

            IsShown(): boolean;

            Clone(): Ozone.Event;
        }

        class IconizeEvent extends Event
        {

            constructor(winid: number, iconized: boolean);

            constructor(_0: Ozone.IconizeEvent);

            IsIconized(): boolean;

            Clone(): Ozone.Event;
        }

        class MaximizeEvent extends Event
        {

            constructor(winid: number);

            constructor(_0: Ozone.MaximizeEvent);

            Clone(): Ozone.Event;
        }

        class JoystickEvent extends Event
        {

            constructor(type: number, state: number, joystick: number, change: number);

            constructor(_0: Ozone.JoystickEvent);

            GetPosition(): Ozone.Point;

            GetZPosition(): number;

            GetButtonState(): number;

            GetButtonChange(): number;

            GetButtonOrdinal(): number;

            GetJoystick(): number;

            SetJoystick(stick: number): void;

            SetButtonState(state: number): void;

            SetButtonChange(change: number): void;

            SetPosition(pos: Ozone.Point): void;

            SetZPosition(zPos: number): void;

            IsButton(): boolean;

            IsMove(): boolean;

            IsZMove(): boolean;

            ButtonDown(but: number): boolean;

            ButtonUp(but: number): boolean;

            ButtonIsDown(but: number): boolean;

            Clone(): Ozone.Event;
        }

        class UpdateUIEvent extends CommandEvent
        {

            constructor(commandId: number);

            constructor(_0: Ozone.UpdateUIEvent);

            GetChecked(): boolean;

            GetEnabled(): boolean;

            GetShown(): boolean;

            GetText(): string;

            GetSetText(): boolean;

            GetSetChecked(): boolean;

            GetSetEnabled(): boolean;

            GetSetShown(): boolean;

            Check(check: boolean): void;

            Enable(enable: boolean): void;

            Show(show: boolean): void;

            SetText(text: string): void;

            IsCheckable(): boolean;

            DisallowCheck(): void;

            Clone(): Ozone.Event;

            SetUpdateInterval(updateInterval: number): void;

            GetUpdateInterval(): number;

            ResetUpdateTime(): void;

            SetMode(mode: Ozone.UpdateUIMode): void;

            GetMode(): Ozone.UpdateUIMode;
        }

        class SysColourChangedEvent extends Event
        {

            constructor();

            constructor(_0: Ozone.SysColourChangedEvent);

            Clone(): Ozone.Event;
        }

        class MouseCaptureChangedEvent extends Event
        {

            constructor(winid: number, gainedCapture: Ozone.Window);

            constructor(_0: Ozone.MouseCaptureChangedEvent);

            Clone(): Ozone.Event;

            GetCapturedWindow(): Ozone.Window;
        }

        class MouseCaptureLostEvent extends Event
        {

            constructor(winid: number);

            constructor(_0: Ozone.MouseCaptureLostEvent);

            Clone(): Ozone.Event;
        }

        class DisplayChangedEvent extends Event
        {

            constructor();

            constructor(_0: Ozone.DisplayChangedEvent);

            Clone(): Ozone.Event;
        }

        class DPIChangedEvent extends Event
        {

            constructor(oldDPI: Ozone.Size, newDPI: Ozone.Size);

            constructor(_0: Ozone.DPIChangedEvent);

            GetOldDPI(): Ozone.Size;

            GetNewDPI(): Ozone.Size;

            Clone(): Ozone.Event;
        }

        class PaletteChangedEvent extends Event
        {

            constructor(winid: number);

            constructor(_0: Ozone.PaletteChangedEvent);

            SetChangedWindow(win: Ozone.Window): void;

            GetChangedWindow(): Ozone.Window;

            Clone(): Ozone.Event;
        }

        class QueryNewPaletteEvent extends Event
        {

            constructor(winid: number);

            constructor(_0: Ozone.QueryNewPaletteEvent);

            SetPaletteRealized(realized: boolean): void;

            GetPaletteRealized(): boolean;

            Clone(): Ozone.Event;
        }

        class NavigationKeyEvent extends Event
        {

            enum NavigationKeyEventFlags
            {
                IsBackward = 0x0,
                IsForward = 0x1,
                WinChange = 0x2,
                FromTab = 0x4
            }

            constructor();

            constructor(_0: Ozone.NavigationKeyEvent);

            GetDirection(): boolean;

            SetDirection(bForward: boolean): void;

            IsWindowChange(): boolean;

            SetWindowChange(bIs: boolean): void;

            IsFromTab(): boolean;

            SetFromTab(bIs: boolean): void;

            GetCurrentFocus(): Ozone.Window;

            SetCurrentFocus(win: Ozone.Window): void;

            SetFlags(flags: number): void;

            Clone(): Ozone.Event;

            get_m_flags(): number;

            set_m_flags(value: number): void;

            get_m_focus(): Ozone.Window;

            set_m_focus(value: Ozone.Window): void;
        }

        class WindowCreateEvent extends CommandEvent
        {

            constructor(win: Ozone.Window);

            constructor(_0: Ozone.WindowCreateEvent);

            GetWindow(): Ozone.Window;

            Clone(): Ozone.Event;
        }

        class WindowDestroyEvent extends CommandEvent
        {

            constructor(win: Ozone.Window);

            constructor(_0: Ozone.WindowDestroyEvent);

            GetWindow(): Ozone.Window;

            Clone(): Ozone.Event;
        }

        class HelpEvent extends CommandEvent
        {

            enum Source
            {
                Unknown = 0,
                Keyboard = 1,
                HelpButton = 2
            }

            constructor(type: number, winid: number, pt: Ozone.Point, origin: Ozone.HelpEvent.Source);

            constructor(_0: Ozone.HelpEvent);

            SetPosition(pos: Ozone.Point): void;

            SetLink(link: string): void;

            SetTarget(target: string): void;

            Clone(): Ozone.Event;

            GetOrigin(): Ozone.HelpEvent.Source;

            SetOrigin(origin: Ozone.HelpEvent.Source): void;
        }

        class ClipboardTextEvent extends CommandEvent
        {

            constructor(type: number, winid: number);

            constructor(_0: Ozone.ClipboardTextEvent);

            Clone(): Ozone.Event;
        }

        class ContextMenuEvent extends CommandEvent
        {

            constructor(type: number, winid: number, pt: Ozone.Point);

            constructor(_0: Ozone.ContextMenuEvent);

            SetPosition(pos: Ozone.Point): void;

            Clone(): Ozone.Event;
        }

        class EvtHandler extends Ozone.Ozone.Object
        {

            constructor();

            constructor(_0: Ozone.EvtHandler);

            GetNextHandler(): Ozone.EvtHandler;

            GetPreviousHandler(): Ozone.EvtHandler;

            SetNextHandler(handler: Ozone.EvtHandler): void;

            SetPreviousHandler(handler: Ozone.EvtHandler): void;

            SetEvtHandlerEnabled(enabled: boolean): void;

            GetEvtHandlerEnabled(): boolean;

            Unlink(): void;

            IsUnlinked(): boolean;

            ProcessEvent(event: Ozone.Event): boolean;

            SafelyProcessEvent(event: Ozone.Event): boolean;

            ProcessEventLocally(event: Ozone.Event): boolean;

            QueueEvent(event: Ozone.Event): void;

            AddPendingEvent(event: Ozone.Event): void;

            ProcessPendingEvents(): void;

            DeletePendingEvents(): void;

            ProcessThreadEvent(event: Ozone.Event): boolean;

            SearchDynamicEventTable(event: Ozone.Event): boolean;

            ClearEventHashTable(): void;

            OnSinkDestroyed(sink: Ozone.EvtHandler): void;

            WXConsumeException(): void;
        }

        export function NewEventType(): number;
        export function PostEvent(dest: Ozone.EvtHandler, event: Ozone.Event): void;
        export function QueueEvent(dest: Ozone.EvtHandler, event: Ozone.Event): void;
        export function FindFocusDescendant(ancestor: Ozone.Window): Ozone.Window;
    }
}
