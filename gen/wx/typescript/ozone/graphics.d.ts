// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
import * as Ozone from "Ozone";
declare module "Ozone"
{
    namespace Ozone
    {
        enum GradientType
        {
            NONE = 0,
            LINEAR = 1,
            RADIAL = 2
        }

        enum AntialiasMode
        {
            NONE = 0,
            DEFAULT = 1
        }

        enum InterpolationQuality
        {
            DEFAULT = 0,
            NONE = 1,
            FAST = 2,
            GOOD = 3,
            BEST = 4
        }

        enum CompositionMode
        {
            INVALID = -1,
            CLEAR = 0,
            SOURCE = 1,
            OVER = 2,
            IN = 3,
            OUT = 4,
            ATOP = 5,
            DEST = 6,
            DEST_OVER = 7,
            DEST_IN = 8,
            DEST_OUT = 9,
            DEST_ATOP = 10,
            XOR = 11,
            ADD = 12
        }

        enum PenCap
        {
        }

        enum PenJoin
        {
        }

        enum PenStyle
        {
        }

        enum PolygonFillMode
        {
        }

        class GraphicsObject extends Ozone.Ozone.Object
        {

            constructor();

            constructor(renderer: Ozone.GraphicsRenderer);

            constructor(_0: Ozone.GraphicsObject);

            IsNull(): boolean;

            GetRenderer(): Ozone.GraphicsRenderer;
        }

        class GraphicsPen extends GraphicsObject
        {

            constructor();

            constructor(_0: Ozone.GraphicsPen);
        }

        class GraphicsBrush extends GraphicsObject
        {

            constructor();

            constructor(_0: Ozone.GraphicsBrush);
        }

        class GraphicsFont extends GraphicsObject
        {

            constructor();

            constructor(_0: Ozone.GraphicsFont);
        }

        class GraphicsBitmap extends GraphicsObject
        {

            constructor();

            constructor(_0: Ozone.GraphicsBitmap);
        }

        class GraphicsMatrix extends GraphicsObject
        {

            constructor();

            constructor(_0: Ozone.GraphicsMatrix);

            Concat(t: Ozone.GraphicsMatrix): void;

            Set(a: number, b: number, c: number, d: number, tx: number, ty: number): void;

            Invert(): void;

            IsEqual(t: Ozone.GraphicsMatrix): boolean;

            IsIdentity(): boolean;

            Translate(dx: number, dy: number): void;

            Scale(xScale: number, yScale: number): void;

            Rotate(angle: number): void;
        }

        class GraphicsGradientStop
        {

            constructor(col: Ozone.Color, pos: number);

            constructor(_0: Ozone.GraphicsGradientStop);

            SetColour(col: Ozone.Color): void;

            GetPosition(): number;

            SetPosition(pos: number): void;
        }

        class GraphicsGradientStops
        {

            constructor(startCol: Ozone.Color, endCol: Ozone.Color);

            constructor(_0: Ozone.GraphicsGradientStops);

            Add(stop: Ozone.GraphicsGradientStop): void;

            Add(col: Ozone.Color, pos: number): void;

            GetCount(): number;

            Item(n: number): Ozone.GraphicsGradientStop;

            SetStartColour(col: Ozone.Color): void;

            GetStartColour(): Ozone.Color;

            SetEndColour(col: Ozone.Color): void;

            GetEndColour(): Ozone.Color;
        }

        class GraphicsPenInfo
        {

            constructor(colour: Ozone.Color, width: number, style: Ozone.PenStyle);

            constructor(_0: Ozone.GraphicsPenInfo);

            GetWidth(): number;

            GetGradientType(): Ozone.GradientType;

            GetX1(): number;

            GetY1(): number;

            GetX2(): number;

            GetY2(): number;

            GetStartX(): number;

            GetStartY(): number;

            GetEndX(): number;

            GetEndY(): number;

            GetRadius(): number;

            GetColour(): Ozone.Color;

            GetStyle(): Ozone.PenStyle;

            GetJoin(): Ozone.PenJoin;

            GetCap(): Ozone.PenCap;

            GetDashCount(): number;

            IsTransparent(): boolean;
        }

        class GraphicsPath extends GraphicsObject
        {

            constructor();

            constructor(_0: Ozone.GraphicsPath);

            MoveToPoint(x: number, y: number): void;

            AddLineToPoint(x: number, y: number): void;

            AddCurveToPoint(cx1: number, cy1: number, cx2: number, cy2: number, x: number, y: number): void;

            AddPath(path: Ozone.GraphicsPath): void;

            CloseSubpath(): void;

            AddArc(x: number, y: number, r: number, startAngle: number, endAngle: number, clockwise: boolean): void;

            AddQuadCurveToPoint(cx: number, cy: number, x: number, y: number): void;

            AddRectangle(x: number, y: number, w: number, h: number): void;

            AddCircle(x: number, y: number, r: number): void;

            AddArcToPoint(x1: number, y1: number, x2: number, y2: number, r: number): void;

            AddEllipse(x: number, y: number, w: number, h: number): void;

            AddRoundedRectangle(x: number, y: number, w: number, h: number, radius: number): void;

            Transform(matrix: Ozone.GraphicsMatrix): void;

            Contains(x: number, y: number, fillStyle: Ozone.PolygonFillMode): boolean;
        }

        class GraphicsContext extends GraphicsObject
        {

            constructor(renderer: Ozone.GraphicsRenderer, window: Ozone.Window);

            constructor(_0: Ozone.GraphicsContext);

            GetWindow(): Ozone.Window;

            StartDoc(message: string): boolean;

            EndDoc(): void;

            StartPage(width: number, height: number): void;

            EndPage(): void;

            Flush(): void;

            CreatePath(): Ozone.GraphicsPath;

            CreatePen(pen: Ozone.Pen): Ozone.GraphicsPen;

            CreatePen(info: Ozone.GraphicsPenInfo): Ozone.GraphicsPen;

            CreateBrush(brush: Ozone.Brush): Ozone.GraphicsBrush;

            CreateLinearGradientBrush(x1: number, y1: number, x2: number, y2: number, c1: Ozone.Color, c2: Ozone.Color, matrix: Ozone.GraphicsMatrix): Ozone.GraphicsBrush;

            CreateLinearGradientBrush(x1: number, y1: number, x2: number, y2: number, stops: Ozone.GraphicsGradientStops, matrix: Ozone.GraphicsMatrix): Ozone.GraphicsBrush;

            CreateRadialGradientBrush(startX: number, startY: number, endX: number, endY: number, radius: number, oColor: Ozone.Color, cColor: Ozone.Color, matrix: Ozone.GraphicsMatrix): Ozone.GraphicsBrush;

            CreateRadialGradientBrush(startX: number, startY: number, endX: number, endY: number, radius: number, stops: Ozone.GraphicsGradientStops, matrix: Ozone.GraphicsMatrix): Ozone.GraphicsBrush;

            CreateFont(sizeInPixels: number, facename: string, flags: number, col: Ozone.Color): Ozone.GraphicsFont;

            CreateSubBitmap(bitmap: Ozone.GraphicsBitmap, x: number, y: number, w: number, h: number): Ozone.GraphicsBitmap;

            CreateMatrix(a: number, b: number, c: number, d: number, tx: number, ty: number): Ozone.GraphicsMatrix;

            PushState(): void;

            PopState(): void;

            Clip(x: number, y: number, w: number, h: number): void;

            ResetClip(): void;

            GetAntialiasMode(): Ozone.AntialiasMode;

            SetAntialiasMode(antialias: Ozone.AntialiasMode): boolean;

            GetInterpolationQuality(): Ozone.InterpolationQuality;

            SetInterpolationQuality(interpolation: Ozone.InterpolationQuality): boolean;

            GetCompositionMode(): Ozone.CompositionMode;

            SetCompositionMode(op: Ozone.CompositionMode): boolean;

            BeginLayer(opacity: number): void;

            EndLayer(): void;

            Translate(dx: number, dy: number): void;

            Scale(xScale: number, yScale: number): void;

            Rotate(angle: number): void;

            ConcatTransform(matrix: Ozone.GraphicsMatrix): void;

            SetTransform(matrix: Ozone.GraphicsMatrix): void;

            GetTransform(): Ozone.GraphicsMatrix;

            SetPen(pen: Ozone.GraphicsPen): void;

            SetPen(pen: Ozone.Pen): void;

            SetBrush(brush: Ozone.GraphicsBrush): void;

            SetBrush(brush: Ozone.Brush): void;

            SetFont(font: Ozone.GraphicsFont): void;

            StrokePath(path: Ozone.GraphicsPath): void;

            FillPath(path: Ozone.GraphicsPath, fillStyle: Ozone.PolygonFillMode): void;

            DrawPath(path: Ozone.GraphicsPath, fillStyle: Ozone.PolygonFillMode): void;

            ClearRectangle(x: number, y: number, w: number, h: number): void;

            DrawText(str: string, x: number, y: number): void;

            DrawText(str: string, x: number, y: number, angle: number): void;

            DrawText(str: string, x: number, y: number, backgroundBrush: Ozone.GraphicsBrush): void;

            DrawText(str: string, x: number, y: number, angle: number, backgroundBrush: Ozone.GraphicsBrush): void;

            DrawBitmap(bmp: Ozone.GraphicsBitmap, x: number, y: number, w: number, h: number): void;

            StrokeLine(x1: number, y1: number, x2: number, y2: number): void;

            DrawRectangle(x: number, y: number, w: number, h: number): void;

            DrawEllipse(x: number, y: number, w: number, h: number): void;

            DrawRoundedRectangle(x: number, y: number, w: number, h: number, radius: number): void;

            ShouldOffset(): boolean;

            EnableOffset(enable: boolean): void;

            DisableOffset(): void;

            OffsetEnabled(): boolean;

            Create(dc: Ozone.WindowDC): Ozone.GraphicsContext;

            CreateFromUnknownDC(dc: Ozone.DC): Ozone.GraphicsContext;

            Create(window: Ozone.Window): Ozone.GraphicsContext;

            Create(): Ozone.GraphicsContext;
        }

        class GraphicsRenderer extends Ozone.Ozone.Object
        {

            constructor();

            constructor(_0: Ozone.GraphicsRenderer);

            CreateContext(dc: Ozone.WindowDC): Ozone.GraphicsContext;

            CreateContextFromUnknownDC(dc: Ozone.DC): Ozone.GraphicsContext;

            CreateContext(window: Ozone.Window): Ozone.GraphicsContext;

            CreateMeasuringContext(): Ozone.GraphicsContext;

            CreatePath(): Ozone.GraphicsPath;

            CreateMatrix(a: number, b: number, c: number, d: number, tx: number, ty: number): Ozone.GraphicsMatrix;

            CreatePen(info: Ozone.GraphicsPenInfo): Ozone.GraphicsPen;

            CreateBrush(brush: Ozone.Brush): Ozone.GraphicsBrush;

            CreateLinearGradientBrush(x1: number, y1: number, x2: number, y2: number, stops: Ozone.GraphicsGradientStops, matrix: Ozone.GraphicsMatrix): Ozone.GraphicsBrush;

            CreateRadialGradientBrush(startX: number, startY: number, endX: number, endY: number, radius: number, stops: Ozone.GraphicsGradientStops, matrix: Ozone.GraphicsMatrix): Ozone.GraphicsBrush;

            CreateFont(sizeInPixels: number, facename: string, flags: number, col: Ozone.Color): Ozone.GraphicsFont;

            CreateSubBitmap(bitmap: Ozone.GraphicsBitmap, x: number, y: number, w: number, h: number): Ozone.GraphicsBitmap;

            GetName(): string;

            GetDefaultRenderer(): Ozone.GraphicsRenderer;

            GetCairoRenderer(): Ozone.GraphicsRenderer;
        }
    }
}
