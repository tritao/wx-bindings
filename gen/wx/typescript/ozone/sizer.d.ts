// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
import * as Ozone from "Ozone";
declare module "Ozone"
{
    namespace Ozone
    {
        enum FlexSizerGrowMode
        {
            NONE = 0,
            SPECIFIED = 1,
            ALL = 2
        }

        enum KeyType
        {
        }

        enum SizerOrientation
        {
        }

        class SizerFlags
        {

            constructor(proportion: number);

            constructor(_0: Ozone.SizerFlags);

            GetProportion(): number;

            GetFlags(): number;

            GetBorderInPixels(): number;

            GetDefaultBorder(): number;

            GetDefaultBorderFractional(): number;
        }

        class SizerSpacer
        {

            constructor(size: Ozone.Size);

            constructor(_0: Ozone.SizerSpacer);

            SetSize(size: Ozone.Size): void;

            Show(show: boolean): void;

            IsShown(): boolean;
        }

        class SizerItem extends Ozone.Ozone.Object
        {

            constructor(window: Ozone.Window, proportion: number, flag: number, border: number, userData: Ozone.Object);

            constructor(window: Ozone.Window, flags: Ozone.SizerFlags);

            constructor(sizer: Ozone.Sizer, proportion: number, flag: number, border: number, userData: Ozone.Object);

            constructor(sizer: Ozone.Sizer, flags: Ozone.SizerFlags);

            constructor(width: number, height: number, proportion: number, flag: number, border: number, userData: Ozone.Object);

            constructor(width: number, height: number, flags: Ozone.SizerFlags);

            constructor();

            constructor(_0: Ozone.SizerItem);

            DeleteWindows(): void;

            DetachSizer(): void;

            DetachWindow(): void;

            GetSize(): Ozone.Size;

            CalcMin(): Ozone.Size;

            SetDimension(pos: Ozone.Point, size: Ozone.Size): void;

            GetMinSize(): Ozone.Size;

            GetMinSizeWithBorder(): Ozone.Size;

            GetMaxSize(): Ozone.Size;

            GetMaxSizeWithBorder(): Ozone.Size;

            SetMinSize(size: Ozone.Size): void;

            SetMinSize(x: number, y: number): void;

            SetInitSize(x: number, y: number): void;

            SetRatio(width: number, height: number): void;

            SetRatio(size: Ozone.Size): void;

            SetRatio(ratio: number): void;

            GetRatio(): number;

            GetRect(): Ozone.Rect;

            SetId(id: number): void;

            GetId(): number;

            IsWindow(): boolean;

            IsSizer(): boolean;

            IsSpacer(): boolean;

            SetProportion(proportion: number): void;

            GetProportion(): number;

            SetFlag(flag: number): void;

            GetFlag(): number;

            SetBorder(border: number): void;

            GetBorder(): number;

            GetWindow(): Ozone.Window;

            GetSizer(): Ozone.Sizer;

            GetSpacer(): Ozone.Size;

            IsShown(): boolean;

            Show(show: boolean): void;

            SetUserData(userData: Ozone.Object): void;

            GetUserData(): Ozone.Object;

            GetPosition(): Ozone.Point;

            InformFirstDirection(direction: number, size: number, availableOtherDir: number): boolean;

            AssignWindow(window: Ozone.Window): void;

            AssignSizer(sizer: Ozone.Sizer): void;

            AssignSpacer(size: Ozone.Size): void;

            AssignSpacer(w: number, h: number): void;
        }

        class SizerItemList
        {

            constructor(keyType: Ozone.KeyType);

            constructor(list: Ozone.SizerItemList);

            constructor(n: number, v: Ozone.SizerItem);

            DeleteObject(object: Ozone.SizerItem): boolean;

            Member(object: Ozone.SizerItem): boolean;

            IndexOf(object: Ozone.SizerItem): number;

            resize(n: number, v: Ozone.SizerItem): void;

            size(): number;

            max_size(): number;

            empty(): boolean;

            push_front(v: Ozone.SizerItem): void;

            pop_front(): void;

            push_back(v: Ozone.SizerItem): void;

            pop_back(): void;

            assign(n: number, v: Ozone.SizerItem): void;

            clear(): void;

            remove(v: Ozone.SizerItem): void;

            reverse(): void;
        }

        class Sizer extends Ozone.Ozone.Object
        {

            constructor();

            constructor(_0: Ozone.Sizer);

            Add(window: Ozone.Window, proportion: number, flag: number, border: number, userData: Ozone.Object): Ozone.SizerItem;

            Add(sizer: Ozone.Sizer, proportion: number, flag: number, border: number, userData: Ozone.Object): Ozone.SizerItem;

            Add(width: number, height: number, proportion: number, flag: number, border: number, userData: Ozone.Object): Ozone.SizerItem;

            Add(window: Ozone.Window, flags: Ozone.SizerFlags): Ozone.SizerItem;

            Add(sizer: Ozone.Sizer, flags: Ozone.SizerFlags): Ozone.SizerItem;

            Add(width: number, height: number, flags: Ozone.SizerFlags): Ozone.SizerItem;

            Add(item: Ozone.SizerItem): Ozone.SizerItem;

            AddSpacer(size: number): Ozone.SizerItem;

            AddStretchSpacer(prop: number): Ozone.SizerItem;

            Insert(index: number, window: Ozone.Window, proportion: number, flag: number, border: number, userData: Ozone.Object): Ozone.SizerItem;

            Insert(index: number, sizer: Ozone.Sizer, proportion: number, flag: number, border: number, userData: Ozone.Object): Ozone.SizerItem;

            Insert(index: number, width: number, height: number, proportion: number, flag: number, border: number, userData: Ozone.Object): Ozone.SizerItem;

            Insert(index: number, window: Ozone.Window, flags: Ozone.SizerFlags): Ozone.SizerItem;

            Insert(index: number, sizer: Ozone.Sizer, flags: Ozone.SizerFlags): Ozone.SizerItem;

            Insert(index: number, width: number, height: number, flags: Ozone.SizerFlags): Ozone.SizerItem;

            Insert(index: number, item: Ozone.SizerItem): Ozone.SizerItem;

            InsertSpacer(index: number, size: number): Ozone.SizerItem;

            InsertStretchSpacer(index: number, prop: number): Ozone.SizerItem;

            Prepend(window: Ozone.Window, proportion: number, flag: number, border: number, userData: Ozone.Object): Ozone.SizerItem;

            Prepend(sizer: Ozone.Sizer, proportion: number, flag: number, border: number, userData: Ozone.Object): Ozone.SizerItem;

            Prepend(width: number, height: number, proportion: number, flag: number, border: number, userData: Ozone.Object): Ozone.SizerItem;

            Prepend(window: Ozone.Window, flags: Ozone.SizerFlags): Ozone.SizerItem;

            Prepend(sizer: Ozone.Sizer, flags: Ozone.SizerFlags): Ozone.SizerItem;

            Prepend(width: number, height: number, flags: Ozone.SizerFlags): Ozone.SizerItem;

            Prepend(item: Ozone.SizerItem): Ozone.SizerItem;

            PrependSpacer(size: number): Ozone.SizerItem;

            PrependStretchSpacer(prop: number): Ozone.SizerItem;

            SetContainingWindow(window: Ozone.Window): void;

            GetContainingWindow(): Ozone.Window;

            Remove(sizer: Ozone.Sizer): boolean;

            Remove(index: number): boolean;

            Detach(window: Ozone.Window): boolean;

            Detach(sizer: Ozone.Sizer): boolean;

            Detach(index: number): boolean;

            Replace(oldwin: Ozone.Window, newwin: Ozone.Window, recursive: boolean): boolean;

            Replace(oldsz: Ozone.Sizer, newsz: Ozone.Sizer, recursive: boolean): boolean;

            Replace(index: number, newitem: Ozone.SizerItem): boolean;

            Clear(delete_windows: boolean): void;

            DeleteWindows(): void;

            InformFirstDirection(_0: number, _1: number, _2: number): boolean;

            SetMinSize(width: number, height: number): void;

            SetMinSize(size: Ozone.Size): void;

            SetItemMinSize(window: Ozone.Window, width: number, height: number): boolean;

            SetItemMinSize(window: Ozone.Window, size: Ozone.Size): boolean;

            SetItemMinSize(sizer: Ozone.Sizer, width: number, height: number): boolean;

            SetItemMinSize(sizer: Ozone.Sizer, size: Ozone.Size): boolean;

            SetItemMinSize(index: number, width: number, height: number): boolean;

            SetItemMinSize(index: number, size: Ozone.Size): boolean;

            GetSize(): Ozone.Size;

            GetPosition(): Ozone.Point;

            GetMinSize(): Ozone.Size;

            CalcMin(): Ozone.Size;

            RepositionChildren(_0: Ozone.Size): void;

            RecalcSizes(): void;

            Layout(): void;

            ComputeFittingClientSize(window: Ozone.Window): Ozone.Size;

            ComputeFittingWindowSize(window: Ozone.Window): Ozone.Size;

            Fit(window: Ozone.Window): Ozone.Size;

            FitInside(window: Ozone.Window): void;

            SetSizeHints(window: Ozone.Window): void;

            SetDimension(pos: Ozone.Point, size: Ozone.Size): void;

            SetDimension(x: number, y: number, width: number, height: number): void;

            GetItemCount(): number;

            IsEmpty(): boolean;

            GetItem(window: Ozone.Window, recursive: boolean): Ozone.SizerItem;

            GetItem(sizer: Ozone.Sizer, recursive: boolean): Ozone.SizerItem;

            GetItem(index: number): Ozone.SizerItem;

            GetItemById(id: number, recursive: boolean): Ozone.SizerItem;

            Show(window: Ozone.Window, show: boolean, recursive: boolean): boolean;

            Show(sizer: Ozone.Sizer, show: boolean, recursive: boolean): boolean;

            Show(index: number, show: boolean): boolean;

            Hide(sizer: Ozone.Sizer, recursive: boolean): boolean;

            Hide(window: Ozone.Window, recursive: boolean): boolean;

            Hide(index: number): boolean;

            IsShown(window: Ozone.Window): boolean;

            IsShown(sizer: Ozone.Sizer): boolean;

            IsShown(index: number): boolean;

            ShowItems(show: boolean): void;

            Show(show: boolean): void;

            AreAnyItemsShown(): boolean;
        }

        class GridSizer extends Sizer
        {

            constructor(cols: number, vgap: number, hgap: number);

            constructor(cols: number, gap: Ozone.Size);

            constructor(rows: number, cols: number, vgap: number, hgap: number);

            constructor(rows: number, cols: number, gap: Ozone.Size);

            constructor(_0: Ozone.GridSizer);

            RepositionChildren(minSize: Ozone.Size): void;

            CalcMin(): Ozone.Size;

            SetCols(cols: number): void;

            SetRows(rows: number): void;

            SetVGap(gap: number): void;

            SetHGap(gap: number): void;

            GetCols(): number;

            GetRows(): number;

            GetVGap(): number;

            GetHGap(): number;

            GetEffectiveColsCount(): number;

            GetEffectiveRowsCount(): number;
        }

        class FlexGridSizer extends GridSizer
        {

            constructor(cols: number, vgap: number, hgap: number);

            constructor(cols: number, gap: Ozone.Size);

            constructor(rows: number, cols: number, vgap: number, hgap: number);

            constructor(rows: number, cols: number, gap: Ozone.Size);

            constructor(_0: Ozone.FlexGridSizer);

            AddGrowableRow(idx: number, proportion: number): void;

            RemoveGrowableRow(idx: number): void;

            AddGrowableCol(idx: number, proportion: number): void;

            RemoveGrowableCol(idx: number): void;

            IsRowGrowable(idx: number): boolean;

            IsColGrowable(idx: number): boolean;

            SetFlexibleDirection(direction: number): void;

            GetFlexibleDirection(): number;

            SetNonFlexibleGrowMode(mode: Ozone.FlexSizerGrowMode): void;

            GetNonFlexibleGrowMode(): Ozone.FlexSizerGrowMode;

            RepositionChildren(minSize: Ozone.Size): void;

            CalcMin(): Ozone.Size;
        }

        class BoxSizer extends Sizer
        {

            constructor(orient: Ozone.SizerOrientation);

            constructor(_0: Ozone.BoxSizer);

            AddSpacer(size: number): Ozone.SizerItem;

            GetOrientation(): Ozone.SizerOrientation;

            IsVertical(): boolean;

            SetOrientation(orient: Ozone.SizerOrientation): void;

            CalcMin(): Ozone.Size;

            RepositionChildren(minSize: Ozone.Size): void;

            InformFirstDirection(direction: number, size: number, availableOtherDir: number): boolean;
        }

        class StaticBoxSizer extends BoxSizer
        {

            constructor(orient: Ozone.SizerOrientation, win: Ozone.Window, label: string);

            constructor(_0: Ozone.StaticBoxSizer);

            CalcMin(): Ozone.Size;

            RepositionChildren(minSize: Ozone.Size): void;

            ShowItems(show: boolean): void;

            AreAnyItemsShown(): boolean;

            Detach(window: Ozone.Window): boolean;

            Detach(sizer: Ozone.Sizer): boolean;

            Detach(index: number): boolean;
        }

        class StdDialogButtonSizer extends BoxSizer
        {

            constructor();

            constructor(_0: Ozone.StdDialogButtonSizer);

            Realize(): void;
        }
    }
}
