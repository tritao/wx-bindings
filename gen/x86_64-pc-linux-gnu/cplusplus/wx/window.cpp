// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "window.h"
#include "wx/colour.h"
#include "wx/dc.h"
#include "wx/defs.h"
#include "wx/event.h"
#include "wx/gdicmn.h"
#include "wx/object.h"
#include "wx/sizer.h"
#include "wx/window.h"

#include <wx/eventfilter.h>

wxSharp::VisualAttributes::VisualAttributes(::wxVisualAttributes* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

wxSharp::VisualAttributes::~VisualAttributes()
{
}

wxSharp::VisualAttributes::VisualAttributes(const ::wxSharp::VisualAttributes& _0)
{
    __ownsNativeInstance = true;
    auto &__arg0 = *(::wxVisualAttributes*)_0.__Instance;
    __Instance = new ::wxVisualAttributes(__arg0);
}

wxSharp::VisualAttributes::VisualAttributes()
{
    __ownsNativeInstance = true;
    __Instance = new ::wxVisualAttributes();
}

::wxSharp::Color wxSharp::VisualAttributes::get_colFg()
{
    ::wxColour __ret = ((::wxVisualAttributes*)__Instance)->colFg;
    auto ____ret = new ::wxColour(__ret);
    return ____ret;
}


void wxSharp::VisualAttributes::set_colFg(::wxSharp::Color value)
{
    auto __arg0 = *(::wxColour*)value.__Instance;
    ((::wxVisualAttributes*)__Instance)->colFg = __arg0;
}

::wxSharp::Color wxSharp::VisualAttributes::get_colBg()
{
    ::wxColour __ret = ((::wxVisualAttributes*)__Instance)->colBg;
    auto ____ret = new ::wxColour(__ret);
    return ____ret;
}


void wxSharp::VisualAttributes::set_colBg(::wxSharp::Color value)
{
    auto __arg0 = *(::wxColour*)value.__Instance;
    ((::wxVisualAttributes*)__Instance)->colBg = __arg0;
}

wxSharp::WindowListNode::WindowListNode(::wxWindowListNode* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

wxSharp::WindowListNode::~WindowListNode()
{
}

::wxSharp::WindowListNode* wxSharp::WindowListNode::GetNext() const
{
    ::wxWindowListNode* __ret = ((::wxWindowListNode*)__Instance)->GetNext();
    return (__ret == nullptr) ? nullptr : new wxSharp::WindowListNode((::wxWindowListNode*)__ret);
}

::wxSharp::WindowListNode* wxSharp::WindowListNode::GetPrevious() const
{
    ::wxWindowListNode* __ret = ((::wxWindowListNode*)__Instance)->GetPrevious();
    return (__ret == nullptr) ? nullptr : new wxSharp::WindowListNode((::wxWindowListNode*)__ret);
}

::wxSharp::Window* wxSharp::WindowListNode::GetData() const
{
    ::wxWindow* __ret = ((::wxWindowListNode*)__Instance)->GetData();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

void wxSharp::WindowListNode::SetData(::wxSharp::Window* data)
{
    auto __arg0 = data ? (::wxWindow*)data->__Instance : nullptr;
    ((::wxWindowListNode*)__Instance)->SetData(__arg0);
}

wxSharp::WindowList::WindowList(::wxWindowList* instance, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    __Instance = instance;
}

wxSharp::WindowList::~WindowList()
{
}

wxSharp::WindowList::WindowList(::wxSharp::KeyType keyType)
{
    __ownsNativeInstance = true;
    auto __arg0 = (::wxKeyType)keyType;
    __Instance = new ::wxWindowList(__arg0);
}

wxSharp::WindowList::WindowList(const ::wxSharp::WindowList& list)
{
    __ownsNativeInstance = true;
    auto &__arg0 = *(::wxWindowList*)list.__Instance;
    __Instance = new ::wxWindowList(__arg0);
}

::wxSharp::WindowListNode* wxSharp::WindowList::GetFirst() const
{
    ::wxWindowListNode* __ret = ((::wxWindowList*)__Instance)->GetFirst();
    return (__ret == nullptr) ? nullptr : new wxSharp::WindowListNode((::wxWindowListNode*)__ret);
}

::wxSharp::WindowListNode* wxSharp::WindowList::GetLast() const
{
    ::wxWindowListNode* __ret = ((::wxWindowList*)__Instance)->GetLast();
    return (__ret == nullptr) ? nullptr : new wxSharp::WindowListNode((::wxWindowListNode*)__ret);
}

::wxSharp::WindowListNode* wxSharp::WindowList::Item(unsigned long index) const
{
    auto __arg0 = (::size_t)index;
    ::wxWindowListNode* __ret = ((::wxWindowList*)__Instance)->Item(__arg0);
    return (__ret == nullptr) ? nullptr : new wxSharp::WindowListNode((::wxWindowListNode*)__ret);
}

::wxSharp::WindowListNode* wxSharp::WindowList::Append(long key, void* object)
{
    auto __arg1 = (void*)object;
    ::wxWindowListNode* __ret = ((::wxWindowList*)__Instance)->Append(key, __arg1);
    return (__ret == nullptr) ? nullptr : new wxSharp::WindowListNode((::wxWindowListNode*)__ret);
}

::wxSharp::WindowListNode* wxSharp::WindowList::Append(wchar_t* key, void* object)
{
    auto __arg0 = (::wxChar*)key;
    auto __arg1 = (void*)object;
    ::wxWindowListNode* __ret = ((::wxWindowList*)__Instance)->Append(__arg0, __arg1);
    return (__ret == nullptr) ? nullptr : new wxSharp::WindowListNode((::wxWindowListNode*)__ret);
}

::wxSharp::WindowListNode* wxSharp::WindowList::DetachNode(::wxSharp::WindowListNode* node)
{
    auto __arg0 = node ? (::wxWindowListNode*)node->__Instance : nullptr;
    ::wxWindowListNode* __ret = ((::wxWindowList*)__Instance)->DetachNode(__arg0);
    return (__ret == nullptr) ? nullptr : new wxSharp::WindowListNode((::wxWindowListNode*)__ret);
}

bool wxSharp::WindowList::DeleteNode(::wxSharp::WindowListNode* node)
{
    auto __arg0 = node ? (::wxWindowListNode*)node->__Instance : nullptr;
    bool __ret = ((::wxWindowList*)__Instance)->DeleteNode(__arg0);
    return __ret;
}

void wxSharp::WindowList::Erase(::wxSharp::WindowListNode* it)
{
    auto __arg0 = it ? (::wxWindowListNode*)it->__Instance : nullptr;
    ((::wxWindowList*)__Instance)->Erase(__arg0);
}

wxSharp::WindowList::WindowList(unsigned long n, ::wxSharp::Window*const & v)
{
    __ownsNativeInstance = true;
    auto __arg0 = (::wxWindowList::size_type)(::size_t)n;
    auto __arg1 = v ? (::wxWindow*)v->__Instance : nullptr;
    __Instance = new ::wxWindowList(__arg0, __arg1);
}

void wxSharp::WindowList::resize(unsigned long n, ::wxSharp::Window* v)
{
    auto __arg0 = (::wxWindowList::size_type)(::size_t)n;
    auto __arg1 = v ? (::wxWindow*)v->__Instance : nullptr;
    ((::wxWindowList*)__Instance)->resize(__arg0, __arg1);
}

unsigned long wxSharp::WindowList::size() const
{
    ::wxWindowList::size_type __ret = ((::wxWindowList*)__Instance)->size();
    return __ret;
}

unsigned long wxSharp::WindowList::max_size() const
{
    ::wxWindowList::size_type __ret = ((::wxWindowList*)__Instance)->max_size();
    return __ret;
}

bool wxSharp::WindowList::empty() const
{
    bool __ret = ((::wxWindowList*)__Instance)->empty();
    return __ret;
}

void wxSharp::WindowList::push_front(::wxSharp::Window*const & v)
{
    auto __arg0 = v ? (::wxWindow*)v->__Instance : nullptr;
    ((::wxWindowList*)__Instance)->push_front(__arg0);
}

void wxSharp::WindowList::pop_front()
{
    ((::wxWindowList*)__Instance)->pop_front();
}

void wxSharp::WindowList::push_back(::wxSharp::Window*const & v)
{
    auto __arg0 = v ? (::wxWindow*)v->__Instance : nullptr;
    ((::wxWindowList*)__Instance)->push_back(__arg0);
}

void wxSharp::WindowList::pop_back()
{
    ((::wxWindowList*)__Instance)->pop_back();
}

void wxSharp::WindowList::assign(unsigned long n, ::wxSharp::Window*const & v)
{
    auto __arg0 = (::wxWindowList::size_type)(::size_t)n;
    auto __arg1 = v ? (::wxWindow*)v->__Instance : nullptr;
    ((::wxWindowList*)__Instance)->assign(__arg0, __arg1);
}

void wxSharp::WindowList::clear()
{
    ((::wxWindowList*)__Instance)->clear();
}

void wxSharp::WindowList::remove(::wxSharp::Window*const & v)
{
    auto __arg0 = v ? (::wxWindow*)v->__Instance : nullptr;
    ((::wxWindowList*)__Instance)->remove(__arg0);
}

void wxSharp::WindowList::reverse()
{
    ((::wxWindowList*)__Instance)->reverse();
}

wxSharp::Window::Window(::wxWindow* instance, bool ownNativeInstance)
    : wxSharp::EvtHandler((::wxEvtHandler*)instance, ownNativeInstance)
{
    __Instance = instance;

    auto __instance = (wxWindow*) __Instance;
    if (__instance && __instance->GetClientData() == nullptr)
        __instance->SetClientData(this);
}

wxSharp::Window::~Window()
{
}

wxSharp::Window::Window()
    : wxSharp::EvtHandler((::wxEvtHandler*)nullptr)
{
    __ownsNativeInstance = true;
    __Instance = new ::wxWindow();

    auto __instance = (wxWindow*) __Instance;
    if (__instance && __instance->GetClientData() == nullptr)
        __instance->SetClientData(this);
}

wxSharp::Window::Window(::wxSharp::Window* parent, int id, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name)
    : wxSharp::EvtHandler((::wxEvtHandler*)nullptr)
{
    __ownsNativeInstance = true;
    auto __arg0 = parent ? (::wxWindow*)parent->__Instance : nullptr;
    auto __arg1 = (::wxWindowID)id;
    auto &__arg2 = *(::wxPoint*)pos.__Instance;
    auto &__arg3 = *(::wxSize*)size.__Instance;
    auto __arg5 = name;
    __Instance = new ::wxWindow(__arg0, __arg1, __arg2, __arg3, style, __arg5);

    auto __instance = (wxWindow*) __Instance;
    if (__instance && __instance->GetClientData() == nullptr)
        __instance->SetClientData(this);
}

bool wxSharp::Window::Create(::wxSharp::Window* parent, int id, const ::wxSharp::Point& pos, const ::wxSharp::Size& size, long style, const char* name)
{
    auto __arg0 = parent ? (::wxWindow*)parent->__Instance : nullptr;
    auto __arg1 = (::wxWindowID)id;
    auto &__arg2 = *(::wxPoint*)pos.__Instance;
    auto &__arg3 = *(::wxSize*)size.__Instance;
    auto __arg5 = name;
    bool __ret = ((::wxWindow*)__Instance)->Create(__arg0, __arg1, __arg2, __arg3, style, __arg5);
    return __ret;
}

void wxSharp::Window::Raise()
{
    ((::wxWindow*)__Instance)->Raise();
}

void wxSharp::Window::Lower()
{
    ((::wxWindow*)__Instance)->Lower();
}

bool wxSharp::Window::Show(bool show)
{
    bool __ret = ((::wxWindow*)__Instance)->Show(show);
    return __ret;
}

bool wxSharp::Window::IsShown() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsShown();
    return __ret;
}

bool wxSharp::Window::IsRetained() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsRetained();
    return __ret;
}

void wxSharp::Window::SetFocus()
{
    ((::wxWindow*)__Instance)->SetFocus();
}

void wxSharp::Window::SetCanFocus(bool canFocus)
{
    ((::wxWindow*)__Instance)->SetCanFocus(canFocus);
}

void wxSharp::Window::WarpPointer(int x, int y)
{
    ((::wxWindow*)__Instance)->WarpPointer(x, y);
}

bool wxSharp::Window::EnableTouchEvents(int eventsMask)
{
    bool __ret = ((::wxWindow*)__Instance)->EnableTouchEvents(eventsMask);
    return __ret;
}

void wxSharp::Window::Refresh(bool eraseBackground, const ::wxSharp::Rect* rect)
{
    auto __arg1 = rect ? (::wxRect*)rect->__Instance : nullptr;
    ((::wxWindow*)__Instance)->Refresh(eraseBackground, __arg1);
}

void wxSharp::Window::Update()
{
    ((::wxWindow*)__Instance)->Update();
}

void wxSharp::Window::ClearBackground()
{
    ((::wxWindow*)__Instance)->ClearBackground();
}

bool wxSharp::Window::SetBackgroundColour(const ::wxSharp::Color& colour)
{
    auto &__arg0 = *(::wxColour*)colour.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->SetBackgroundColour(__arg0);
    return __ret;
}

bool wxSharp::Window::SetForegroundColour(const ::wxSharp::Color& colour)
{
    auto &__arg0 = *(::wxColour*)colour.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->SetForegroundColour(__arg0);
    return __ret;
}

bool wxSharp::Window::SetBackgroundStyle(::wxSharp::BackgroundStyle style)
{
    auto __arg0 = (::wxBackgroundStyle)style;
    bool __ret = ((::wxWindow*)__Instance)->SetBackgroundStyle(__arg0);
    return __ret;
}

bool wxSharp::Window::IsTransparentBackgroundSupported(const char* reason) const
{
    auto __arg0_str = new wxString(reason);
    auto __arg0 = __arg0_str;
    bool __ret = ((::wxWindow*)__Instance)->IsTransparentBackgroundSupported(__arg0);
    return __ret;
}

int wxSharp::Window::GetCharHeight() const
{
    int __ret = ((::wxWindow*)__Instance)->GetCharHeight();
    return __ret;
}

int wxSharp::Window::GetCharWidth() const
{
    int __ret = ((::wxWindow*)__Instance)->GetCharWidth();
    return __ret;
}

double wxSharp::Window::GetContentScaleFactor() const
{
    double __ret = ((::wxWindow*)__Instance)->GetContentScaleFactor();
    return __ret;
}

double wxSharp::Window::GetDPIScaleFactor() const
{
    double __ret = ((::wxWindow*)__Instance)->GetDPIScaleFactor();
    return __ret;
}

void wxSharp::Window::SetScrollbar(int orient, int pos, int thumbVisible, int range, bool refresh)
{
    ((::wxWindow*)__Instance)->SetScrollbar(orient, pos, thumbVisible, range, refresh);
}

void wxSharp::Window::SetScrollPos(int orient, int pos, bool refresh)
{
    ((::wxWindow*)__Instance)->SetScrollPos(orient, pos, refresh);
}

int wxSharp::Window::GetScrollPos(int orient) const
{
    int __ret = ((::wxWindow*)__Instance)->GetScrollPos(orient);
    return __ret;
}

int wxSharp::Window::GetScrollThumb(int orient) const
{
    int __ret = ((::wxWindow*)__Instance)->GetScrollThumb(orient);
    return __ret;
}

int wxSharp::Window::GetScrollRange(int orient) const
{
    int __ret = ((::wxWindow*)__Instance)->GetScrollRange(orient);
    return __ret;
}

void wxSharp::Window::ScrollWindow(int dx, int dy, const ::wxSharp::Rect* rect)
{
    auto __arg2 = rect ? (::wxRect*)rect->__Instance : nullptr;
    ((::wxWindow*)__Instance)->ScrollWindow(dx, dy, __arg2);
}

bool wxSharp::Window::ScrollLines(int lines)
{
    bool __ret = ((::wxWindow*)__Instance)->ScrollLines(lines);
    return __ret;
}

bool wxSharp::Window::ScrollPages(int pages)
{
    bool __ret = ((::wxWindow*)__Instance)->ScrollPages(pages);
    return __ret;
}

int wxSharp::Window::AdjustForLayoutDirection(int x, int width, int widthTotal) const
{
    auto __arg0 = (::wxCoord)x;
    auto __arg1 = (::wxCoord)width;
    auto __arg2 = (::wxCoord)widthTotal;
    ::wxCoord __ret = ((::wxWindow*)__Instance)->AdjustForLayoutDirection(__arg0, __arg1, __arg2);
    return __ret;
}

bool wxSharp::Window::DoIsExposed(int x, int y) const
{
    bool __ret = ((::wxWindow*)__Instance)->DoIsExposed(x, y);
    return __ret;
}

bool wxSharp::Window::DoIsExposed(int x, int y, int w, int h) const
{
    bool __ret = ((::wxWindow*)__Instance)->DoIsExposed(x, y, w, h);
    return __ret;
}

void wxSharp::Window::SetDoubleBuffered(bool on)
{
    ((::wxWindow*)__Instance)->SetDoubleBuffered(on);
}

bool wxSharp::Window::IsDoubleBuffered() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsDoubleBuffered();
    return __ret;
}

void wxSharp::Window::SetLabel(const char* label)
{
    auto __arg0 = label;
    ((::wxWindow*)__Instance)->SetLabel(__arg0);
}

const char* wxSharp::Window::GetLabel() const
{
    ::wxString __ret = ((::wxWindow*)__Instance)->GetLabel();
    return __ret.c_str();
}

void wxSharp::Window::OnInternalIdle()
{
    ((::wxWindow*)__Instance)->OnInternalIdle();
}

bool wxSharp::Window::PreCreation(::wxSharp::Window* parent, const ::wxSharp::Point& pos, const ::wxSharp::Size& size)
{
    auto __arg0 = parent ? (::wxWindow*)parent->__Instance : nullptr;
    auto &__arg1 = *(::wxPoint*)pos.__Instance;
    auto &__arg2 = *(::wxSize*)size.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->PreCreation(__arg0, __arg1, __arg2);
    return __ret;
}

void wxSharp::Window::PostCreation()
{
    ((::wxWindow*)__Instance)->PostCreation();
}

void wxSharp::Window::DoAddChild(::wxSharp::Window* child)
{
    auto __arg0 = child ? (::wxWindow*)child->__Instance : nullptr;
    ((::wxWindow*)__Instance)->DoAddChild(__arg0);
}

bool wxSharp::Window::IsOfStandardClass() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsOfStandardClass();
    return __ret;
}

::wxSharp::Window::ScrollDir wxSharp::Window::ScrollDirFromOrient(int orient)
{
    ::wxWindow::ScrollDir __ret = ::wxWindow::ScrollDirFromOrient(orient);
    return (::wxSharp::Window::ScrollDir)__ret;
}

int wxSharp::Window::OrientFromScrollDir(::wxSharp::Window::ScrollDir dir)
{
    auto __arg0 = (::wxWindow::ScrollDir)dir;
    int __ret = ::wxWindow::OrientFromScrollDir(__arg0);
    return __ret;
}

bool wxSharp::Window::Close(bool force)
{
    bool __ret = ((::wxWindow*)__Instance)->Close(force);
    return __ret;
}

bool wxSharp::Window::Destroy()
{
    bool __ret = ((::wxWindow*)__Instance)->Destroy();
    return __ret;
}

bool wxSharp::Window::DestroyChildren()
{
    bool __ret = ((::wxWindow*)__Instance)->DestroyChildren();
    return __ret;
}

bool wxSharp::Window::IsBeingDeleted() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsBeingDeleted();
    return __ret;
}

void wxSharp::Window::SetName(const char* name)
{
    auto __arg0 = name;
    ((::wxWindow*)__Instance)->SetName(__arg0);
}

const char* wxSharp::Window::GetName() const
{
    ::wxString __ret = ((::wxWindow*)__Instance)->GetName();
    return __ret.c_str();
}

void wxSharp::Window::SetWindowVariant(::wxSharp::WindowVariant variant)
{
    auto __arg0 = (::wxWindowVariant)variant;
    ((::wxWindow*)__Instance)->SetWindowVariant(__arg0);
}

::wxSharp::WindowVariant wxSharp::Window::GetWindowVariant() const
{
    ::wxWindowVariant __ret = ((::wxWindow*)__Instance)->GetWindowVariant();
    return (::wxSharp::WindowVariant)__ret;
}

void wxSharp::Window::SetId(int winid)
{
    auto __arg0 = (::wxWindowID)winid;
    ((::wxWindow*)__Instance)->SetId(__arg0);
}

int wxSharp::Window::GetId() const
{
    ::wxWindowID __ret = ((::wxWindow*)__Instance)->GetId();
    return __ret;
}

int wxSharp::Window::NewControlId(int count)
{
    ::wxWindowID __ret = ::wxWindowBase::NewControlId(count);
    return __ret;
}

void wxSharp::Window::UnreserveControlId(int id, int count)
{
    auto __arg0 = (::wxWindowID)id;
    ::wxWindowBase::UnreserveControlId(__arg0, count);
}

void wxSharp::Window::SetSize(int x, int y, int width, int height, int sizeFlags)
{
    ((::wxWindow*)__Instance)->SetSize(x, y, width, height, sizeFlags);
}

void wxSharp::Window::SetSize(int width, int height)
{
    ((::wxWindow*)__Instance)->SetSize(width, height);
}

void wxSharp::Window::SetSize(const ::wxSharp::Size& size)
{
    auto &__arg0 = *(::wxSize*)size.__Instance;
    ((::wxWindow*)__Instance)->SetSize(__arg0);
}

void wxSharp::Window::SetSize(const ::wxSharp::Rect& rect, int sizeFlags)
{
    auto &__arg0 = *(::wxRect*)rect.__Instance;
    ((::wxWindow*)__Instance)->SetSize(__arg0, sizeFlags);
}

void wxSharp::Window::Move(int x, int y, int flags)
{
    ((::wxWindow*)__Instance)->Move(x, y, flags);
}

void wxSharp::Window::Move(const ::wxSharp::Point& pt, int flags)
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ((::wxWindow*)__Instance)->Move(__arg0, flags);
}

void wxSharp::Window::SetPosition(const ::wxSharp::Point& pt)
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ((::wxWindow*)__Instance)->SetPosition(__arg0);
}

void wxSharp::Window::SetClientSize(int width, int height)
{
    ((::wxWindow*)__Instance)->SetClientSize(width, height);
}

void wxSharp::Window::SetClientSize(const ::wxSharp::Size& size)
{
    auto &__arg0 = *(::wxSize*)size.__Instance;
    ((::wxWindow*)__Instance)->SetClientSize(__arg0);
}

void wxSharp::Window::SetClientSize(const ::wxSharp::Rect& rect)
{
    auto &__arg0 = *(::wxRect*)rect.__Instance;
    ((::wxWindow*)__Instance)->SetClientSize(__arg0);
}

void wxSharp::Window::GetPosition(int* x, int* y) const
{
    int* __arg0 = (int*)x;
    int* __arg1 = (int*)y;
    ((::wxWindow*)__Instance)->GetPosition(__arg0, __arg1);
    x = __arg0;
    y = __arg1;
}

::wxSharp::Point wxSharp::Window::GetPosition() const
{
    ::wxPoint __ret = ((::wxWindow*)__Instance)->GetPosition();
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

void wxSharp::Window::GetScreenPosition(int* x, int* y) const
{
    int* __arg0 = (int*)x;
    int* __arg1 = (int*)y;
    ((::wxWindow*)__Instance)->GetScreenPosition(__arg0, __arg1);
    x = __arg0;
    y = __arg1;
}

::wxSharp::Point wxSharp::Window::GetScreenPosition() const
{
    ::wxPoint __ret = ((::wxWindow*)__Instance)->GetScreenPosition();
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

void wxSharp::Window::GetSize(int* w, int* h) const
{
    int* __arg0 = (int*)w;
    int* __arg1 = (int*)h;
    ((::wxWindow*)__Instance)->GetSize(__arg0, __arg1);
    w = __arg0;
    h = __arg1;
}

::wxSharp::Size wxSharp::Window::GetSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

void wxSharp::Window::GetClientSize(int* w, int* h) const
{
    int* __arg0 = (int*)w;
    int* __arg1 = (int*)h;
    ((::wxWindow*)__Instance)->GetClientSize(__arg0, __arg1);
    w = __arg0;
    h = __arg1;
}

::wxSharp::Size wxSharp::Window::GetClientSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetClientSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Rect wxSharp::Window::GetRect() const
{
    ::wxRect __ret = ((::wxWindow*)__Instance)->GetRect();
    auto ____ret = new ::wxRect(__ret);
    return ____ret;
}

::wxSharp::Rect wxSharp::Window::GetScreenRect() const
{
    ::wxRect __ret = ((::wxWindow*)__Instance)->GetScreenRect();
    auto ____ret = new ::wxRect(__ret);
    return ____ret;
}

::wxSharp::Point wxSharp::Window::GetClientAreaOrigin() const
{
    ::wxPoint __ret = ((::wxWindow*)__Instance)->GetClientAreaOrigin();
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

::wxSharp::Rect wxSharp::Window::GetClientRect() const
{
    ::wxRect __ret = ((::wxWindow*)__Instance)->GetClientRect();
    auto ____ret = new ::wxRect(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::ClientToWindowSize(const ::wxSharp::Size& size) const
{
    auto &__arg0 = *(::wxSize*)size.__Instance;
    ::wxSize __ret = ((::wxWindow*)__Instance)->ClientToWindowSize(__arg0);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::WindowToClientSize(const ::wxSharp::Size& size) const
{
    auto &__arg0 = *(::wxSize*)size.__Instance;
    ::wxSize __ret = ((::wxWindow*)__Instance)->WindowToClientSize(__arg0);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::GetBestSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetBestSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

void wxSharp::Window::GetBestSize(int* w, int* h) const
{
    int* __arg0 = (int*)w;
    int* __arg1 = (int*)h;
    ((::wxWindow*)__Instance)->GetBestSize(__arg0, __arg1);
    w = __arg0;
    h = __arg1;
}

int wxSharp::Window::GetBestHeight(int width) const
{
    int __ret = ((::wxWindow*)__Instance)->GetBestHeight(width);
    return __ret;
}

int wxSharp::Window::GetBestWidth(int height) const
{
    int __ret = ((::wxWindow*)__Instance)->GetBestWidth(height);
    return __ret;
}

void wxSharp::Window::InvalidateBestSize()
{
    ((::wxWindow*)__Instance)->InvalidateBestSize();
}

void wxSharp::Window::CacheBestSize(const ::wxSharp::Size& size) const
{
    auto &__arg0 = *(::wxSize*)size.__Instance;
    ((::wxWindow*)__Instance)->CacheBestSize(__arg0);
}

::wxSharp::Size wxSharp::Window::GetEffectiveMinSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetEffectiveMinSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

void wxSharp::Window::SetInitialSize(const ::wxSharp::Size& size)
{
    auto &__arg0 = *(::wxSize*)size.__Instance;
    ((::wxWindow*)__Instance)->SetInitialSize(__arg0);
}

void wxSharp::Window::Centre(int dir)
{
    ((::wxWindow*)__Instance)->Centre(dir);
}

void wxSharp::Window::Center(int dir)
{
    ((::wxWindow*)__Instance)->Center(dir);
}

void wxSharp::Window::CentreOnParent(int dir)
{
    ((::wxWindow*)__Instance)->CentreOnParent(dir);
}

void wxSharp::Window::CenterOnParent(int dir)
{
    ((::wxWindow*)__Instance)->CenterOnParent(dir);
}

void wxSharp::Window::Fit()
{
    ((::wxWindow*)__Instance)->Fit();
}

void wxSharp::Window::FitInside()
{
    ((::wxWindow*)__Instance)->FitInside();
}

void wxSharp::Window::SetSizeHints(int minW, int minH, int maxW, int maxH, int incW, int incH)
{
    ((::wxWindow*)__Instance)->SetSizeHints(minW, minH, maxW, maxH, incW, incH);
}

void wxSharp::Window::SetSizeHints(const ::wxSharp::Size& minSize, const ::wxSharp::Size& maxSize, const ::wxSharp::Size& incSize)
{
    auto &__arg0 = *(::wxSize*)minSize.__Instance;
    auto &__arg1 = *(::wxSize*)maxSize.__Instance;
    auto &__arg2 = *(::wxSize*)incSize.__Instance;
    ((::wxWindow*)__Instance)->SetSizeHints(__arg0, __arg1, __arg2);
}

void wxSharp::Window::SetMinSize(const ::wxSharp::Size& minSize)
{
    auto &__arg0 = *(::wxSize*)minSize.__Instance;
    ((::wxWindow*)__Instance)->SetMinSize(__arg0);
}

void wxSharp::Window::SetMaxSize(const ::wxSharp::Size& maxSize)
{
    auto &__arg0 = *(::wxSize*)maxSize.__Instance;
    ((::wxWindow*)__Instance)->SetMaxSize(__arg0);
}

void wxSharp::Window::SetMinClientSize(const ::wxSharp::Size& size)
{
    auto &__arg0 = *(::wxSize*)size.__Instance;
    ((::wxWindow*)__Instance)->SetMinClientSize(__arg0);
}

void wxSharp::Window::SetMaxClientSize(const ::wxSharp::Size& size)
{
    auto &__arg0 = *(::wxSize*)size.__Instance;
    ((::wxWindow*)__Instance)->SetMaxClientSize(__arg0);
}

::wxSharp::Size wxSharp::Window::GetMinSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetMinSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::GetMaxSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetMaxSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::GetMinClientSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetMinClientSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::GetMaxClientSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetMaxClientSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

int wxSharp::Window::GetMinWidth() const
{
    int __ret = ((::wxWindow*)__Instance)->GetMinWidth();
    return __ret;
}

int wxSharp::Window::GetMinHeight() const
{
    int __ret = ((::wxWindow*)__Instance)->GetMinHeight();
    return __ret;
}

int wxSharp::Window::GetMaxWidth() const
{
    int __ret = ((::wxWindow*)__Instance)->GetMaxWidth();
    return __ret;
}

int wxSharp::Window::GetMaxHeight() const
{
    int __ret = ((::wxWindow*)__Instance)->GetMaxHeight();
    return __ret;
}

void wxSharp::Window::SetVirtualSize(const ::wxSharp::Size& size)
{
    auto &__arg0 = *(::wxSize*)size.__Instance;
    ((::wxWindow*)__Instance)->SetVirtualSize(__arg0);
}

void wxSharp::Window::SetVirtualSize(int x, int y)
{
    ((::wxWindow*)__Instance)->SetVirtualSize(x, y);
}

::wxSharp::Size wxSharp::Window::GetVirtualSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetVirtualSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

void wxSharp::Window::GetVirtualSize(int* x, int* y) const
{
    int* __arg0 = (int*)x;
    int* __arg1 = (int*)y;
    ((::wxWindow*)__Instance)->GetVirtualSize(__arg0, __arg1);
    x = __arg0;
    y = __arg1;
}

void wxSharp::Window::DoSetVirtualSize(int x, int y)
{
    ((::wxWindow*)__Instance)->DoSetVirtualSize(x, y);
}

::wxSharp::Size wxSharp::Window::DoGetVirtualSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->DoGetVirtualSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::GetBestVirtualSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetBestVirtualSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::GetWindowBorderSize() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetWindowBorderSize();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

bool wxSharp::Window::InformFirstDirection(int direction, int size, int availableOtherDir)
{
    bool __ret = ((::wxWindow*)__Instance)->InformFirstDirection(direction, size, availableOtherDir);
    return __ret;
}

void wxSharp::Window::SendSizeEvent(int flags)
{
    ((::wxWindow*)__Instance)->SendSizeEvent(flags);
}

void wxSharp::Window::SendSizeEventToParent(int flags)
{
    ((::wxWindow*)__Instance)->SendSizeEventToParent(flags);
}

void wxSharp::Window::PostSizeEvent()
{
    ((::wxWindow*)__Instance)->PostSizeEvent();
}

void wxSharp::Window::PostSizeEventToParent()
{
    ((::wxWindow*)__Instance)->PostSizeEventToParent();
}

bool wxSharp::Window::BeginRepositioningChildren()
{
    bool __ret = ((::wxWindow*)__Instance)->BeginRepositioningChildren();
    return __ret;
}

void wxSharp::Window::EndRepositioningChildren()
{
    ((::wxWindow*)__Instance)->EndRepositioningChildren();
}

bool wxSharp::Window::Hide()
{
    bool __ret = ((::wxWindow*)__Instance)->Hide();
    return __ret;
}

bool wxSharp::Window::ShowWithEffect(::wxSharp::ShowEffect _0, unsigned int _1)
{
    auto __arg0 = (::wxShowEffect)_0;
    bool __ret = ((::wxWindow*)__Instance)->ShowWithEffect(__arg0, _1);
    return __ret;
}

bool wxSharp::Window::HideWithEffect(::wxSharp::ShowEffect _0, unsigned int _1)
{
    auto __arg0 = (::wxShowEffect)_0;
    bool __ret = ((::wxWindow*)__Instance)->HideWithEffect(__arg0, _1);
    return __ret;
}

bool wxSharp::Window::Enable(bool enable)
{
    bool __ret = ((::wxWindow*)__Instance)->Enable(enable);
    return __ret;
}

bool wxSharp::Window::Disable()
{
    bool __ret = ((::wxWindow*)__Instance)->Disable();
    return __ret;
}

bool wxSharp::Window::IsEnabled() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsEnabled();
    return __ret;
}

bool wxSharp::Window::IsThisEnabled() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsThisEnabled();
    return __ret;
}

bool wxSharp::Window::IsShownOnScreen() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsShownOnScreen();
    return __ret;
}

void wxSharp::Window::SetWindowStyleFlag(long style)
{
    ((::wxWindow*)__Instance)->SetWindowStyleFlag(style);
}

long wxSharp::Window::GetWindowStyleFlag() const
{
    long __ret = ((::wxWindow*)__Instance)->GetWindowStyleFlag();
    return __ret;
}

void wxSharp::Window::SetWindowStyle(long style)
{
    ((::wxWindow*)__Instance)->SetWindowStyle(style);
}

long wxSharp::Window::GetWindowStyle() const
{
    long __ret = ((::wxWindow*)__Instance)->GetWindowStyle();
    return __ret;
}

bool wxSharp::Window::HasFlag(int flag) const
{
    bool __ret = ((::wxWindow*)__Instance)->HasFlag(flag);
    return __ret;
}

bool wxSharp::Window::ToggleWindowStyle(int flag)
{
    bool __ret = ((::wxWindow*)__Instance)->ToggleWindowStyle(flag);
    return __ret;
}

void wxSharp::Window::SetExtraStyle(long exStyle)
{
    ((::wxWindow*)__Instance)->SetExtraStyle(exStyle);
}

long wxSharp::Window::GetExtraStyle() const
{
    long __ret = ((::wxWindow*)__Instance)->GetExtraStyle();
    return __ret;
}

bool wxSharp::Window::HasExtraStyle(int exFlag) const
{
    bool __ret = ((::wxWindow*)__Instance)->HasExtraStyle(exFlag);
    return __ret;
}

void wxSharp::Window::SetThemeEnabled(bool enableTheme)
{
    ((::wxWindow*)__Instance)->SetThemeEnabled(enableTheme);
}

bool wxSharp::Window::GetThemeEnabled() const
{
    bool __ret = ((::wxWindow*)__Instance)->GetThemeEnabled();
    return __ret;
}

void wxSharp::Window::SetFocusFromKbd()
{
    ((::wxWindow*)__Instance)->SetFocusFromKbd();
}

::wxSharp::Window* wxSharp::Window::FindFocus()
{
    ::wxWindow* __ret = ::wxWindowBase::FindFocus();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::Window* wxSharp::Window::DoFindFocus()
{
    ::wxWindow* __ret = ::wxWindowBase::DoFindFocus();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

bool wxSharp::Window::HasFocus() const
{
    bool __ret = ((::wxWindow*)__Instance)->HasFocus();
    return __ret;
}

bool wxSharp::Window::AcceptsFocus() const
{
    bool __ret = ((::wxWindow*)__Instance)->AcceptsFocus();
    return __ret;
}

bool wxSharp::Window::AcceptsFocusRecursively() const
{
    bool __ret = ((::wxWindow*)__Instance)->AcceptsFocusRecursively();
    return __ret;
}

bool wxSharp::Window::AcceptsFocusFromKeyboard() const
{
    bool __ret = ((::wxWindow*)__Instance)->AcceptsFocusFromKeyboard();
    return __ret;
}

void wxSharp::Window::DisableFocusFromKeyboard()
{
    ((::wxWindow*)__Instance)->DisableFocusFromKeyboard();
}

bool wxSharp::Window::CanBeFocused() const
{
    bool __ret = ((::wxWindow*)__Instance)->CanBeFocused();
    return __ret;
}

bool wxSharp::Window::IsFocusable() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsFocusable();
    return __ret;
}

bool wxSharp::Window::CanAcceptFocus() const
{
    bool __ret = ((::wxWindow*)__Instance)->CanAcceptFocus();
    return __ret;
}

bool wxSharp::Window::CanAcceptFocusFromKeyboard() const
{
    bool __ret = ((::wxWindow*)__Instance)->CanAcceptFocusFromKeyboard();
    return __ret;
}

void wxSharp::Window::EnableVisibleFocus(bool _0)
{
    ((::wxWindow*)__Instance)->EnableVisibleFocus(_0);
}

bool wxSharp::Window::NavigateIn(int flags)
{
    bool __ret = ((::wxWindow*)__Instance)->NavigateIn(flags);
    return __ret;
}

bool wxSharp::Window::Navigate(int flags)
{
    bool __ret = ((::wxWindow*)__Instance)->Navigate(flags);
    return __ret;
}

bool wxSharp::Window::HandleAsNavigationKey(const ::wxSharp::KeyEvent& event)
{
    auto &__arg0 = *(::wxKeyEvent*)event.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->HandleAsNavigationKey(__arg0);
    return __ret;
}

void wxSharp::Window::MoveBeforeInTabOrder(::wxSharp::Window* win)
{
    auto __arg0 = win ? (::wxWindow*)win->__Instance : nullptr;
    ((::wxWindow*)__Instance)->MoveBeforeInTabOrder(__arg0);
}

void wxSharp::Window::MoveAfterInTabOrder(::wxSharp::Window* win)
{
    auto __arg0 = win ? (::wxWindow*)win->__Instance : nullptr;
    ((::wxWindow*)__Instance)->MoveAfterInTabOrder(__arg0);
}

::wxSharp::Window* wxSharp::Window::GetPrevSibling() const
{
    ::wxWindow* __ret = ((::wxWindow*)__Instance)->GetPrevSibling();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::Window* wxSharp::Window::GetNextSibling() const
{
    ::wxWindow* __ret = ((::wxWindow*)__Instance)->GetNextSibling();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::Window* wxSharp::Window::GetParent() const
{
    ::wxWindow* __ret = ((::wxWindow*)__Instance)->GetParent();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::Window* wxSharp::Window::GetGrandParent() const
{
    ::wxWindow* __ret = ((::wxWindow*)__Instance)->GetGrandParent();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

bool wxSharp::Window::IsTopLevel() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsTopLevel();
    return __ret;
}

bool wxSharp::Window::IsClientAreaChild(const ::wxSharp::Window* _0) const
{
    auto __arg0 = _0 ? (::wxWindow*)_0->__Instance : nullptr;
    bool __ret = ((::wxWindow*)__Instance)->IsClientAreaChild(__arg0);
    return __ret;
}

::wxSharp::Window* wxSharp::Window::FindWindow(long winid) const
{
    ::wxWindow* __ret = ((::wxWindow*)__Instance)->FindWindow(winid);
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::Window* wxSharp::Window::FindWindow(const char* name) const
{
    auto __arg0 = name;
    ::wxWindow* __ret = ((::wxWindow*)__Instance)->FindWindow(__arg0);
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::Window* wxSharp::Window::FindWindowById(long winid, const ::wxSharp::Window* parent)
{
    auto __arg1 = parent ? (::wxWindow*)parent->__Instance : nullptr;
    ::wxWindow* __ret = ::wxWindowBase::FindWindowById(winid, __arg1);
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::Window* wxSharp::Window::FindWindowByName(const char* name, const ::wxSharp::Window* parent)
{
    auto __arg0 = name;
    auto __arg1 = parent ? (::wxWindow*)parent->__Instance : nullptr;
    ::wxWindow* __ret = ::wxWindowBase::FindWindowByName(__arg0, __arg1);
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::Window* wxSharp::Window::FindWindowByLabel(const char* label, const ::wxSharp::Window* parent)
{
    auto __arg0 = label;
    auto __arg1 = parent ? (::wxWindow*)parent->__Instance : nullptr;
    ::wxWindow* __ret = ::wxWindowBase::FindWindowByLabel(__arg0, __arg1);
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::EvtHandler* wxSharp::Window::GetEventHandler() const
{
    ::wxEvtHandler* __ret = ((::wxWindow*)__Instance)->GetEventHandler();
    return (__ret == nullptr) ? nullptr : new wxSharp::EvtHandler((::wxEvtHandler*)__ret);
}

void wxSharp::Window::SetEventHandler(::wxSharp::EvtHandler* handler)
{
    auto __arg0 = handler ? (::wxEvtHandler*)handler->__Instance : nullptr;
    ((::wxWindow*)__Instance)->SetEventHandler(__arg0);
}

void wxSharp::Window::PushEventHandler(::wxSharp::EvtHandler* handler)
{
    auto __arg0 = handler ? (::wxEvtHandler*)handler->__Instance : nullptr;
    ((::wxWindow*)__Instance)->PushEventHandler(__arg0);
}

::wxSharp::EvtHandler* wxSharp::Window::PopEventHandler(bool deleteHandler)
{
    ::wxEvtHandler* __ret = ((::wxWindow*)__Instance)->PopEventHandler(deleteHandler);
    return (__ret == nullptr) ? nullptr : new wxSharp::EvtHandler((::wxEvtHandler*)__ret);
}

bool wxSharp::Window::RemoveEventHandler(::wxSharp::EvtHandler* handler)
{
    auto __arg0 = handler ? (::wxEvtHandler*)handler->__Instance : nullptr;
    bool __ret = ((::wxWindow*)__Instance)->RemoveEventHandler(__arg0);
    return __ret;
}

bool wxSharp::Window::ProcessWindowEvent(::wxSharp::Event& event)
{
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->ProcessWindowEvent(__arg0);
    return __ret;
}

bool wxSharp::Window::ProcessWindowEventLocally(::wxSharp::Event& event)
{
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->ProcessWindowEventLocally(__arg0);
    return __ret;
}

bool wxSharp::Window::HandleWindowEvent(::wxSharp::Event& event) const
{
    auto &__arg0 = *(::wxEvent*)event.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->HandleWindowEvent(__arg0);
    return __ret;
}

void wxSharp::Window::SetNextHandler(::wxSharp::EvtHandler* handler)
{
    auto __arg0 = handler ? (::wxEvtHandler*)handler->__Instance : nullptr;
    ((::wxWindow*)__Instance)->SetNextHandler(__arg0);
}

void wxSharp::Window::SetPreviousHandler(::wxSharp::EvtHandler* handler)
{
    auto __arg0 = handler ? (::wxEvtHandler*)handler->__Instance : nullptr;
    ((::wxWindow*)__Instance)->SetPreviousHandler(__arg0);
}

bool wxSharp::Window::Validate()
{
    bool __ret = ((::wxWindow*)__Instance)->Validate();
    return __ret;
}

bool wxSharp::Window::TransferDataToWindow()
{
    bool __ret = ((::wxWindow*)__Instance)->TransferDataToWindow();
    return __ret;
}

bool wxSharp::Window::TransferDataFromWindow()
{
    bool __ret = ((::wxWindow*)__Instance)->TransferDataFromWindow();
    return __ret;
}

void wxSharp::Window::InitDialog()
{
    ((::wxWindow*)__Instance)->InitDialog();
}

bool wxSharp::Window::RegisterHotKey(int hotkeyId, int modifiers, int keycode)
{
    bool __ret = ((::wxWindow*)__Instance)->RegisterHotKey(hotkeyId, modifiers, keycode);
    return __ret;
}

bool wxSharp::Window::UnregisterHotKey(int hotkeyId)
{
    bool __ret = ((::wxWindow*)__Instance)->UnregisterHotKey(hotkeyId);
    return __ret;
}

::wxSharp::Size wxSharp::Window::GetDPI() const
{
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetDPI();
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::FromDIP(const ::wxSharp::Size& sz) const
{
    auto &__arg0 = *(::wxSize*)sz.__Instance;
    ::wxSize __ret = ((::wxWindow*)__Instance)->FromDIP(__arg0);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Point wxSharp::Window::FromDIP(const ::wxSharp::Point& pt) const
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ::wxPoint __ret = ((::wxWindow*)__Instance)->FromDIP(__arg0);
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

int wxSharp::Window::FromDIP(int d) const
{
    int __ret = ((::wxWindow*)__Instance)->FromDIP(d);
    return __ret;
}

::wxSharp::Size wxSharp::Window::ToDIP(const ::wxSharp::Size& sz) const
{
    auto &__arg0 = *(::wxSize*)sz.__Instance;
    ::wxSize __ret = ((::wxWindow*)__Instance)->ToDIP(__arg0);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Point wxSharp::Window::ToDIP(const ::wxSharp::Point& pt) const
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ::wxPoint __ret = ((::wxWindow*)__Instance)->ToDIP(__arg0);
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

int wxSharp::Window::ToDIP(int d) const
{
    int __ret = ((::wxWindow*)__Instance)->ToDIP(d);
    return __ret;
}

::wxSharp::Point wxSharp::Window::ConvertPixelsToDialog(const ::wxSharp::Point& pt) const
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ::wxPoint __ret = ((::wxWindow*)__Instance)->ConvertPixelsToDialog(__arg0);
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

::wxSharp::Point wxSharp::Window::ConvertDialogToPixels(const ::wxSharp::Point& pt) const
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ::wxPoint __ret = ((::wxWindow*)__Instance)->ConvertDialogToPixels(__arg0);
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::ConvertPixelsToDialog(const ::wxSharp::Size& sz) const
{
    auto &__arg0 = *(::wxSize*)sz.__Instance;
    ::wxSize __ret = ((::wxWindow*)__Instance)->ConvertPixelsToDialog(__arg0);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

::wxSharp::Size wxSharp::Window::ConvertDialogToPixels(const ::wxSharp::Size& sz) const
{
    auto &__arg0 = *(::wxSize*)sz.__Instance;
    ::wxSize __ret = ((::wxWindow*)__Instance)->ConvertDialogToPixels(__arg0);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

void wxSharp::Window::CaptureMouse()
{
    ((::wxWindow*)__Instance)->CaptureMouse();
}

void wxSharp::Window::ReleaseMouse()
{
    ((::wxWindow*)__Instance)->ReleaseMouse();
}

::wxSharp::Window* wxSharp::Window::GetCapture()
{
    ::wxWindow* __ret = ::wxWindowBase::GetCapture();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

bool wxSharp::Window::HasCapture() const
{
    bool __ret = ((::wxWindow*)__Instance)->HasCapture();
    return __ret;
}

void wxSharp::Window::RefreshRect(const ::wxSharp::Rect& rect, bool eraseBackground)
{
    auto &__arg0 = *(::wxRect*)rect.__Instance;
    ((::wxWindow*)__Instance)->RefreshRect(__arg0, eraseBackground);
}

void wxSharp::Window::Freeze()
{
    ((::wxWindow*)__Instance)->Freeze();
}

void wxSharp::Window::Thaw()
{
    ((::wxWindow*)__Instance)->Thaw();
}

bool wxSharp::Window::IsFrozen() const
{
    bool __ret = ((::wxWindow*)__Instance)->IsFrozen();
    return __ret;
}

void wxSharp::Window::PrepareDC(::wxSharp::DC& _0)
{
    auto &__arg0 = *(::wxDC*)_0.__Instance;
    ((::wxWindow*)__Instance)->PrepareDC(__arg0);
}

::wxSharp::Rect wxSharp::Window::GetUpdateClientRect() const
{
    ::wxRect __ret = ((::wxWindow*)__Instance)->GetUpdateClientRect();
    auto ____ret = new ::wxRect(__ret);
    return ____ret;
}

bool wxSharp::Window::IsExposed(int x, int y) const
{
    bool __ret = ((::wxWindow*)__Instance)->IsExposed(x, y);
    return __ret;
}

bool wxSharp::Window::IsExposed(int x, int y, int w, int h) const
{
    bool __ret = ((::wxWindow*)__Instance)->IsExposed(x, y, w, h);
    return __ret;
}

bool wxSharp::Window::IsExposed(const ::wxSharp::Point& pt) const
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->IsExposed(__arg0);
    return __ret;
}

bool wxSharp::Window::IsExposed(const ::wxSharp::Rect& rect) const
{
    auto &__arg0 = *(::wxRect*)rect.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->IsExposed(__arg0);
    return __ret;
}

::wxSharp::VisualAttributes wxSharp::Window::GetDefaultAttributes() const
{
    ::wxVisualAttributes __ret = ((::wxWindow*)__Instance)->GetDefaultAttributes();
    auto ____ret = new ::wxVisualAttributes(__ret);
    return ____ret;
}

::wxSharp::VisualAttributes wxSharp::Window::GetClassDefaultAttributes(::wxSharp::WindowVariant variant)
{
    auto __arg0 = (::wxWindowVariant)variant;
    ::wxVisualAttributes __ret = ::wxWindowBase::GetClassDefaultAttributes(__arg0);
    auto ____ret = new ::wxVisualAttributes(__ret);
    return ____ret;
}

void wxSharp::Window::SetOwnBackgroundColour(const ::wxSharp::Color& colour)
{
    auto &__arg0 = *(::wxColour*)colour.__Instance;
    ((::wxWindow*)__Instance)->SetOwnBackgroundColour(__arg0);
}

::wxSharp::Color wxSharp::Window::GetBackgroundColour() const
{
    ::wxColour __ret = ((::wxWindow*)__Instance)->GetBackgroundColour();
    auto ____ret = new ::wxColour(__ret);
    return ____ret;
}

bool wxSharp::Window::InheritsBackgroundColour() const
{
    bool __ret = ((::wxWindow*)__Instance)->InheritsBackgroundColour();
    return __ret;
}

bool wxSharp::Window::UseBgCol() const
{
    bool __ret = ((::wxWindow*)__Instance)->UseBgCol();
    return __ret;
}

bool wxSharp::Window::UseBackgroundColour() const
{
    bool __ret = ((::wxWindow*)__Instance)->UseBackgroundColour();
    return __ret;
}

void wxSharp::Window::SetOwnForegroundColour(const ::wxSharp::Color& colour)
{
    auto &__arg0 = *(::wxColour*)colour.__Instance;
    ((::wxWindow*)__Instance)->SetOwnForegroundColour(__arg0);
}

::wxSharp::Color wxSharp::Window::GetForegroundColour() const
{
    ::wxColour __ret = ((::wxWindow*)__Instance)->GetForegroundColour();
    auto ____ret = new ::wxColour(__ret);
    return ____ret;
}

bool wxSharp::Window::UseForegroundColour() const
{
    bool __ret = ((::wxWindow*)__Instance)->UseForegroundColour();
    return __ret;
}

bool wxSharp::Window::InheritsForegroundColour() const
{
    bool __ret = ((::wxWindow*)__Instance)->InheritsForegroundColour();
    return __ret;
}

::wxSharp::BackgroundStyle wxSharp::Window::GetBackgroundStyle() const
{
    ::wxBackgroundStyle __ret = ((::wxWindow*)__Instance)->GetBackgroundStyle();
    return (::wxSharp::BackgroundStyle)__ret;
}

bool wxSharp::Window::HasTransparentBackground()
{
    bool __ret = ((::wxWindow*)__Instance)->HasTransparentBackground();
    return __ret;
}

::wxSharp::Size wxSharp::Window::GetTextExtent(const char* string) const
{
    auto __arg0 = string;
    ::wxSize __ret = ((::wxWindow*)__Instance)->GetTextExtent(__arg0);
    auto ____ret = new ::wxSize(__ret);
    return ____ret;
}

void wxSharp::Window::ClientToScreen(int* x, int* y) const
{
    int* __arg0 = (int*)x;
    int* __arg1 = (int*)y;
    ((::wxWindow*)__Instance)->ClientToScreen(__arg0, __arg1);
    x = __arg0;
    y = __arg1;
}

void wxSharp::Window::ScreenToClient(int* x, int* y) const
{
    int* __arg0 = (int*)x;
    int* __arg1 = (int*)y;
    ((::wxWindow*)__Instance)->ScreenToClient(__arg0, __arg1);
    x = __arg0;
    y = __arg1;
}

::wxSharp::Point wxSharp::Window::ClientToScreen(const ::wxSharp::Point& pt) const
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ::wxPoint __ret = ((::wxWindow*)__Instance)->ClientToScreen(__arg0);
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

::wxSharp::Point wxSharp::Window::ScreenToClient(const ::wxSharp::Point& pt) const
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ::wxPoint __ret = ((::wxWindow*)__Instance)->ScreenToClient(__arg0);
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

::wxSharp::HitTest wxSharp::Window::HitTest(int x, int y) const
{
    auto __arg0 = (::wxCoord)x;
    auto __arg1 = (::wxCoord)y;
    ::wxHitTest __ret = ((::wxWindow*)__Instance)->HitTest(__arg0, __arg1);
    return (::wxSharp::HitTest)__ret;
}

::wxSharp::HitTest wxSharp::Window::HitTest(const ::wxSharp::Point& pt) const
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ::wxHitTest __ret = ((::wxWindow*)__Instance)->HitTest(__arg0);
    return (::wxSharp::HitTest)__ret;
}

::wxSharp::Border wxSharp::Window::GetBorder(long flags) const
{
    ::wxBorder __ret = ((::wxWindow*)__Instance)->GetBorder(flags);
    return (::wxSharp::Border)__ret;
}

::wxSharp::Border wxSharp::Window::GetBorder() const
{
    ::wxBorder __ret = ((::wxWindow*)__Instance)->GetBorder();
    return (::wxSharp::Border)__ret;
}

void wxSharp::Window::UpdateWindowUI(long flags)
{
    ((::wxWindow*)__Instance)->UpdateWindowUI(flags);
}

void wxSharp::Window::DoUpdateWindowUI(::wxSharp::UpdateUIEvent& event)
{
    auto &__arg0 = *(::wxUpdateUIEvent*)event.__Instance;
    ((::wxWindow*)__Instance)->DoUpdateWindowUI(__arg0);
}

bool wxSharp::Window::HasMultiplePages() const
{
    bool __ret = ((::wxWindow*)__Instance)->HasMultiplePages();
    return __ret;
}

bool wxSharp::Window::CanScroll(int orient) const
{
    bool __ret = ((::wxWindow*)__Instance)->CanScroll(orient);
    return __ret;
}

bool wxSharp::Window::HasScrollbar(int orient) const
{
    bool __ret = ((::wxWindow*)__Instance)->HasScrollbar(orient);
    return __ret;
}

bool wxSharp::Window::LineUp()
{
    bool __ret = ((::wxWindow*)__Instance)->LineUp();
    return __ret;
}

bool wxSharp::Window::LineDown()
{
    bool __ret = ((::wxWindow*)__Instance)->LineDown();
    return __ret;
}

bool wxSharp::Window::PageUp()
{
    bool __ret = ((::wxWindow*)__Instance)->PageUp();
    return __ret;
}

bool wxSharp::Window::PageDown()
{
    bool __ret = ((::wxWindow*)__Instance)->PageDown();
    return __ret;
}

void wxSharp::Window::AlwaysShowScrollbars(bool _0, bool _1)
{
    ((::wxWindow*)__Instance)->AlwaysShowScrollbars(_0, _1);
}

bool wxSharp::Window::IsScrollbarAlwaysShown(int _0) const
{
    bool __ret = ((::wxWindow*)__Instance)->IsScrollbarAlwaysShown(_0);
    return __ret;
}

void wxSharp::Window::SetHelpText(const char* text)
{
    auto __arg0 = text;
    ((::wxWindow*)__Instance)->SetHelpText(__arg0);
}

const char* wxSharp::Window::GetHelpTextAtPoint(const ::wxSharp::Point& pt, ::wxSharp::HelpEvent::Source origin) const
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    auto __arg1 = (::wxHelpEvent::Origin)origin;
    ::wxString __ret = ((::wxWindow*)__Instance)->GetHelpTextAtPoint(__arg0, __arg1);
    return __ret.c_str();
}

const char* wxSharp::Window::GetHelpText() const
{
    ::wxString __ret = ((::wxWindow*)__Instance)->GetHelpText();
    return __ret.c_str();
}

void wxSharp::Window::SetToolTip(const char* tip)
{
    auto __arg0 = tip;
    ((::wxWindow*)__Instance)->SetToolTip(__arg0);
}

void wxSharp::Window::UnsetToolTip()
{
    ((::wxWindow*)__Instance)->UnsetToolTip();
}

const char* wxSharp::Window::GetToolTipText() const
{
    ::wxString __ret = ((::wxWindow*)__Instance)->GetToolTipText();
    return __ret.c_str();
}

void wxSharp::Window::DragAcceptFiles(bool accept)
{
    ((::wxWindow*)__Instance)->DragAcceptFiles(accept);
}

::wxSharp::WindowList* wxSharp::Window::GetConstraintsInvolvedIn() const
{
    ::wxWindowList* __ret = ((::wxWindow*)__Instance)->GetConstraintsInvolvedIn();
    return (__ret == nullptr) ? nullptr : new wxSharp::WindowList((::wxWindowList*)__ret);
}

void wxSharp::Window::DeleteRelatedConstraints()
{
    ((::wxWindow*)__Instance)->DeleteRelatedConstraints();
}

void wxSharp::Window::ResetConstraints()
{
    ((::wxWindow*)__Instance)->ResetConstraints();
}

void wxSharp::Window::SetConstraintSizes(bool recurse)
{
    ((::wxWindow*)__Instance)->SetConstraintSizes(recurse);
}

bool wxSharp::Window::LayoutPhase1(int* noChanges)
{
    int* __arg0 = (int*)noChanges;
    bool __ret = ((::wxWindow*)__Instance)->LayoutPhase1(__arg0);
    noChanges = __arg0;
    return __ret;
}

bool wxSharp::Window::LayoutPhase2(int* noChanges)
{
    int* __arg0 = (int*)noChanges;
    bool __ret = ((::wxWindow*)__Instance)->LayoutPhase2(__arg0);
    noChanges = __arg0;
    return __ret;
}

bool wxSharp::Window::DoPhase(int phase)
{
    bool __ret = ((::wxWindow*)__Instance)->DoPhase(phase);
    return __ret;
}

void wxSharp::Window::SetSizeConstraint(int x, int y, int w, int h)
{
    ((::wxWindow*)__Instance)->SetSizeConstraint(x, y, w, h);
}

void wxSharp::Window::MoveConstraint(int x, int y)
{
    ((::wxWindow*)__Instance)->MoveConstraint(x, y);
}

void wxSharp::Window::GetSizeConstraint(int* w, int* h) const
{
    int* __arg0 = (int*)w;
    int* __arg1 = (int*)h;
    ((::wxWindow*)__Instance)->GetSizeConstraint(__arg0, __arg1);
    w = __arg0;
    h = __arg1;
}

void wxSharp::Window::GetClientSizeConstraint(int* w, int* h) const
{
    int* __arg0 = (int*)w;
    int* __arg1 = (int*)h;
    ((::wxWindow*)__Instance)->GetClientSizeConstraint(__arg0, __arg1);
    w = __arg0;
    h = __arg1;
}

void wxSharp::Window::GetPositionConstraint(int* x, int* y) const
{
    int* __arg0 = (int*)x;
    int* __arg1 = (int*)y;
    ((::wxWindow*)__Instance)->GetPositionConstraint(__arg0, __arg1);
    x = __arg0;
    y = __arg1;
}

void wxSharp::Window::SetAutoLayout(bool autoLayout)
{
    ((::wxWindow*)__Instance)->SetAutoLayout(autoLayout);
}

bool wxSharp::Window::GetAutoLayout() const
{
    bool __ret = ((::wxWindow*)__Instance)->GetAutoLayout();
    return __ret;
}

bool wxSharp::Window::Layout()
{
    bool __ret = ((::wxWindow*)__Instance)->Layout();
    return __ret;
}

void wxSharp::Window::SetSizer(::wxSharp::Sizer* sizer, bool deleteOld)
{
    auto __arg0 = sizer ? (::wxSizer*)sizer->__Instance : nullptr;
    ((::wxWindow*)__Instance)->SetSizer(__arg0, deleteOld);
}

void wxSharp::Window::SetSizerAndFit(::wxSharp::Sizer* sizer, bool deleteOld)
{
    auto __arg0 = sizer ? (::wxSizer*)sizer->__Instance : nullptr;
    ((::wxWindow*)__Instance)->SetSizerAndFit(__arg0, deleteOld);
}

::wxSharp::Sizer* wxSharp::Window::GetSizer() const
{
    ::wxSizer* __ret = ((::wxWindow*)__Instance)->GetSizer();
    return (__ret == nullptr) ? nullptr : new wxSharp::Sizer((::wxSizer*)__ret);
}

void wxSharp::Window::SetContainingSizer(::wxSharp::Sizer* sizer)
{
    auto __arg0 = sizer ? (::wxSizer*)sizer->__Instance : nullptr;
    ((::wxWindow*)__Instance)->SetContainingSizer(__arg0);
}

::wxSharp::Sizer* wxSharp::Window::GetContainingSizer() const
{
    ::wxSizer* __ret = ((::wxWindow*)__Instance)->GetContainingSizer();
    return (__ret == nullptr) ? nullptr : new wxSharp::Sizer((::wxSizer*)__ret);
}

bool wxSharp::Window::SetTransparent(unsigned char _0)
{
    auto __arg0 = (::wxByte)(::wxUint8)_0;
    bool __ret = ((::wxWindow*)__Instance)->SetTransparent(__arg0);
    return __ret;
}

bool wxSharp::Window::CanSetTransparent()
{
    bool __ret = ((::wxWindow*)__Instance)->CanSetTransparent();
    return __ret;
}

void wxSharp::Window::OnInitDialog(::wxSharp::InitDialogEvent& event)
{
    auto &__arg0 = *(::wxInitDialogEvent*)event.__Instance;
    ((::wxWindow*)__Instance)->OnInitDialog(__arg0);
}

void wxSharp::Window::OnMiddleClick(::wxSharp::MouseEvent& event)
{
    auto &__arg0 = *(::wxMouseEvent*)event.__Instance;
    ((::wxWindow*)__Instance)->OnMiddleClick(__arg0);
}

bool wxSharp::Window::SendIdleEvents(::wxSharp::IdleEvent& event)
{
    auto &__arg0 = *(::wxIdleEvent*)event.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->SendIdleEvents(__arg0);
    return __ret;
}

bool wxSharp::Window::WXSendContextMenuEvent(const ::wxSharp::Point& posInScreenCoords)
{
    auto &__arg0 = *(::wxPoint*)posInScreenCoords.__Instance;
    bool __ret = ((::wxWindow*)__Instance)->WXSendContextMenuEvent(__arg0);
    return __ret;
}

void wxSharp::Window::DissociateHandle()
{
    ((::wxWindow*)__Instance)->DissociateHandle();
}

bool wxSharp::Window::HasCustomPalette() const
{
    bool __ret = ((::wxWindow*)__Instance)->HasCustomPalette();
    return __ret;
}

::wxSharp::Window* wxSharp::Window::GetAncestorWithCustomPalette() const
{
    ::wxWindow* __ret = ((::wxWindow*)__Instance)->GetAncestorWithCustomPalette();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

void wxSharp::Window::InheritAttributes()
{
    ((::wxWindow*)__Instance)->InheritAttributes();
}

bool wxSharp::Window::ShouldInheritColours() const
{
    bool __ret = ((::wxWindow*)__Instance)->ShouldInheritColours();
    return __ret;
}

bool wxSharp::Window::CanBeOutsideClientArea() const
{
    bool __ret = ((::wxWindow*)__Instance)->CanBeOutsideClientArea();
    return __ret;
}

bool wxSharp::Window::CanApplyThemeBorder() const
{
    bool __ret = ((::wxWindow*)__Instance)->CanApplyThemeBorder();
    return __ret;
}

::wxSharp::Window* wxSharp::Window::GetMainWindowOfCompositeControl()
{
    ::wxWindow* __ret = ((::wxWindow*)__Instance)->GetMainWindowOfCompositeControl();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

bool wxSharp::Window::IsTopNavigationDomain(::wxSharp::Window::NavigationKind _0) const
{
    auto __arg0 = (::wxWindowBase::NavigationKind)_0;
    bool __ret = ((::wxWindow*)__Instance)->IsTopNavigationDomain(__arg0);
    return __ret;
}

int wxSharp::Window::HandleEvent(::wxEvent& event)
{
    wxEventType eventType = event.GetEventType();

    if(eventType == wxEVT_ACTIVATE)
    {
        if (!OnActivate.empty())
        {
            wxActivateEvent* _event = wxStaticCast(&event, wxActivateEvent);
            wxSharp::ActivateEvent _e(_event);
            OnActivate(_e);
        }
    }
    else if(eventType == wxEVT_CHILD_FOCUS)
    {
        if (!OnChildFocus.empty())
        {
            wxChildFocusEvent* _event = wxStaticCast(&event, wxChildFocusEvent);
            wxSharp::ChildFocusEvent _e(_event);
            OnChildFocus(_e);
        }
    }
    else if(eventType == wxEVT_CONTEXT_MENU)
    {
        if (!OnContextMenu.empty())
        {
            wxContextMenuEvent* _event = wxStaticCast(&event, wxContextMenuEvent);
            wxSharp::ContextMenuEvent _e(_event);
            OnContextMenu(_e);
        }
    }
    else if(eventType == wxEVT_HELP)
    {
        if (!OnHelp.empty())
        {
            wxHelpEvent* _event = wxStaticCast(&event, wxHelpEvent);
            wxSharp::HelpEvent _e(_event);
            OnHelp(_e);
        }
    }
    else if(eventType == wxEVT_HELP)
    {
        if (!OnHelpRange.empty())
        {
            wxHelpEvent* _event = wxStaticCast(&event, wxHelpEvent);
            wxSharp::HelpEvent _e(_event);
            OnHelpRange(_e);
        }
    }
    else if(eventType == wxEVT_ERASE_BACKGROUND)
    {
        if (!OnEraseBackground.empty())
        {
            wxEraseEvent* _event = wxStaticCast(&event, wxEraseEvent);
            wxSharp::EraseEvent _e(_event);
            OnEraseBackground(_e);
        }
    }
    else if(eventType == wxEVT_SET_FOCUS)
    {
        if (!OnSetFocus.empty())
        {
            wxFocusEvent* _event = wxStaticCast(&event, wxFocusEvent);
            wxSharp::FocusEvent _e(_event);
            OnSetFocus(_e);
        }
    }
    else if(eventType == wxEVT_KILL_FOCUS)
    {
        if (!OnKillFocus.empty())
        {
            wxFocusEvent* _event = wxStaticCast(&event, wxFocusEvent);
            wxSharp::FocusEvent _e(_event);
            OnKillFocus(_e);
        }
    }
    else if(eventType == wxEVT_IDLE)
    {
        if (!OnIdle.empty())
        {
            wxIdleEvent* _event = wxStaticCast(&event, wxIdleEvent);
            wxSharp::IdleEvent _e(_event);
            OnIdle(_e);
        }
    }
    else if(eventType == wxEVT_JOY_BUTTON_DOWN)
    {
        if (!OnJoyButtonDown.empty())
        {
            wxJoystickEvent* _event = wxStaticCast(&event, wxJoystickEvent);
            wxSharp::JoystickEvent _e(_event);
            OnJoyButtonDown(_e);
        }
    }
    else if(eventType == wxEVT_JOY_BUTTON_UP)
    {
        if (!OnJoyButtonUp.empty())
        {
            wxJoystickEvent* _event = wxStaticCast(&event, wxJoystickEvent);
            wxSharp::JoystickEvent _e(_event);
            OnJoyButtonUp(_e);
        }
    }
    else if(eventType == wxEVT_JOY_MOVE)
    {
        if (!OnJoyMove.empty())
        {
            wxJoystickEvent* _event = wxStaticCast(&event, wxJoystickEvent);
            wxSharp::JoystickEvent _e(_event);
            OnJoyMove(_e);
        }
    }
    else if(eventType == wxEVT_JOY_ZMOVE)
    {
        if (!OnJoyZmove.empty())
        {
            wxJoystickEvent* _event = wxStaticCast(&event, wxJoystickEvent);
            wxSharp::JoystickEvent _e(_event);
            OnJoyZmove(_e);
        }
    }
    else if(eventType == wxEVT_KEY_DOWN)
    {
        if (!OnKeyDown.empty())
        {
            wxKeyEvent* _event = wxStaticCast(&event, wxKeyEvent);
            wxSharp::KeyEvent _e(_event);
            OnKeyDown(_e);
        }
    }
    else if(eventType == wxEVT_KEY_UP)
    {
        if (!OnKeyUp.empty())
        {
            wxKeyEvent* _event = wxStaticCast(&event, wxKeyEvent);
            wxSharp::KeyEvent _e(_event);
            OnKeyUp(_e);
        }
    }
    else if(eventType == wxEVT_CHAR)
    {
        if (!OnChar.empty())
        {
            wxKeyEvent* _event = wxStaticCast(&event, wxKeyEvent);
            wxSharp::KeyEvent _e(_event);
            OnChar(_e);
        }
    }
    else if(eventType == wxEVT_CHAR_HOOK)
    {
        if (!OnCharHook.empty())
        {
            wxKeyEvent* _event = wxStaticCast(&event, wxKeyEvent);
            wxSharp::KeyEvent _e(_event);
            OnCharHook(_e);
        }
    }
    else if(eventType == wxEVT_MOUSE_CAPTURE_LOST)
    {
        if (!OnMouseCaptureLost.empty())
        {
            wxMouseCaptureLostEvent* _event = wxStaticCast(&event, wxMouseCaptureLostEvent);
            wxSharp::MouseCaptureLostEvent _e(_event);
            OnMouseCaptureLost(_e);
        }
    }
    else if(eventType == wxEVT_MOUSE_CAPTURE_CHANGED)
    {
        if (!OnMouseCaptureChanged.empty())
        {
            wxMouseCaptureChangedEvent* _event = wxStaticCast(&event, wxMouseCaptureChangedEvent);
            wxSharp::MouseCaptureChangedEvent _e(_event);
            OnMouseCaptureChanged(_e);
        }
    }
    else if(eventType == wxEVT_AUX1_DOWN)
    {
        if (!OnMouseAux1Down.empty())
        {
            wxMouseEvent* _event = wxStaticCast(&event, wxMouseEvent);
            wxSharp::MouseEvent _e(_event);
            OnMouseAux1Down(_e);
        }
    }
    else if(eventType == wxEVT_AUX1_UP)
    {
        if (!OnMouseAux1Up.empty())
        {
            wxMouseEvent* _event = wxStaticCast(&event, wxMouseEvent);
            wxSharp::MouseEvent _e(_event);
            OnMouseAux1Up(_e);
        }
    }
    else if(eventType == wxEVT_AUX1_DCLICK)
    {
        if (!OnMouseAux1Dclick.empty())
        {
            wxMouseEvent* _event = wxStaticCast(&event, wxMouseEvent);
            wxSharp::MouseEvent _e(_event);
            OnMouseAux1Dclick(_e);
        }
    }
    else if(eventType == wxEVT_AUX2_DOWN)
    {
        if (!OnMouseAux2Down.empty())
        {
            wxMouseEvent* _event = wxStaticCast(&event, wxMouseEvent);
            wxSharp::MouseEvent _e(_event);
            OnMouseAux2Down(_e);
        }
    }
    else if(eventType == wxEVT_AUX2_UP)
    {
        if (!OnMouseAux2Up.empty())
        {
            wxMouseEvent* _event = wxStaticCast(&event, wxMouseEvent);
            wxSharp::MouseEvent _e(_event);
            OnMouseAux2Up(_e);
        }
    }
    else if(eventType == wxEVT_AUX2_DCLICK)
    {
        if (!OnMouseAux2Dclick.empty())
        {
            wxMouseEvent* _event = wxStaticCast(&event, wxMouseEvent);
            wxSharp::MouseEvent _e(_event);
            OnMouseAux2Dclick(_e);
        }
    }
    else if(eventType == wxEVT_PAINT)
    {
        if (!OnPaint.empty())
        {
            wxPaintEvent* _event = wxStaticCast(&event, wxPaintEvent);
            wxSharp::PaintEvent _e(_event);
            OnPaint(_e);
        }
    }
    else if(eventType == wxEVT_SCROLLWIN_TOP)
    {
        if (!OnScrollwinTop.empty())
        {
            wxScrollWinEvent* _event = wxStaticCast(&event, wxScrollWinEvent);
            wxSharp::ScrollWinEvent _e(_event);
            OnScrollwinTop(_e);
        }
    }
    else if(eventType == wxEVT_SCROLLWIN_BOTTOM)
    {
        if (!OnScrollwinBottom.empty())
        {
            wxScrollWinEvent* _event = wxStaticCast(&event, wxScrollWinEvent);
            wxSharp::ScrollWinEvent _e(_event);
            OnScrollwinBottom(_e);
        }
    }
    else if(eventType == wxEVT_SCROLLWIN_LINEUP)
    {
        if (!OnScrollwinLineup.empty())
        {
            wxScrollWinEvent* _event = wxStaticCast(&event, wxScrollWinEvent);
            wxSharp::ScrollWinEvent _e(_event);
            OnScrollwinLineup(_e);
        }
    }
    else if(eventType == wxEVT_SCROLLWIN_LINEDOWN)
    {
        if (!OnScrollwinLinedown.empty())
        {
            wxScrollWinEvent* _event = wxStaticCast(&event, wxScrollWinEvent);
            wxSharp::ScrollWinEvent _e(_event);
            OnScrollwinLinedown(_e);
        }
    }
    else if(eventType == wxEVT_SCROLLWIN_PAGEUP)
    {
        if (!OnScrollwinPageup.empty())
        {
            wxScrollWinEvent* _event = wxStaticCast(&event, wxScrollWinEvent);
            wxSharp::ScrollWinEvent _e(_event);
            OnScrollwinPageup(_e);
        }
    }
    else if(eventType == wxEVT_SCROLLWIN_PAGEDOWN)
    {
        if (!OnScrollwinPagedown.empty())
        {
            wxScrollWinEvent* _event = wxStaticCast(&event, wxScrollWinEvent);
            wxSharp::ScrollWinEvent _e(_event);
            OnScrollwinPagedown(_e);
        }
    }
    else if(eventType == wxEVT_SCROLLWIN_THUMBTRACK)
    {
        if (!OnScrollwinThumbtrack.empty())
        {
            wxScrollWinEvent* _event = wxStaticCast(&event, wxScrollWinEvent);
            wxSharp::ScrollWinEvent _e(_event);
            OnScrollwinThumbtrack(_e);
        }
    }
    else if(eventType == wxEVT_SCROLLWIN_THUMBRELEASE)
    {
        if (!OnScrollwinThumbrelease.empty())
        {
            wxScrollWinEvent* _event = wxStaticCast(&event, wxScrollWinEvent);
            wxSharp::ScrollWinEvent _e(_event);
            OnScrollwinThumbrelease(_e);
        }
    }
    else if(eventType == wxEVT_SET_CURSOR)
    {
        if (!OnSetCursor.empty())
        {
            wxSetCursorEvent* _event = wxStaticCast(&event, wxSetCursorEvent);
            wxSharp::SetCursorEvent _e(_event);
            OnSetCursor(_e);
        }
    }
    else if(eventType == wxEVT_SIZE)
    {
        if (!OnSize.empty())
        {
            wxSizeEvent* _event = wxStaticCast(&event, wxSizeEvent);
            wxSharp::SizeEvent _e(_event);
            OnSize(_e);
        }
    }
    else if(eventType == wxEVT_SYS_COLOUR_CHANGED)
    {
        if (!OnSysColourChanged.empty())
        {
            wxSysColourChangedEvent* _event = wxStaticCast(&event, wxSysColourChangedEvent);
            wxSharp::SysColourChangedEvent _e(_event);
            OnSysColourChanged(_e);
        }
    }

    return EvtHandler::HandleEvent(event);
}

int wxSharp::Window::get_m_x()
{
    int __ret = ((::wxWindow*)__Instance)->m_x;
    return __ret;
}


void wxSharp::Window::set_m_x(int value)
{
    ((::wxWindow*)__Instance)->m_x = value;
}

int wxSharp::Window::get_m_y()
{
    int __ret = ((::wxWindow*)__Instance)->m_y;
    return __ret;
}


void wxSharp::Window::set_m_y(int value)
{
    ((::wxWindow*)__Instance)->m_y = value;
}

int wxSharp::Window::get_m_width()
{
    int __ret = ((::wxWindow*)__Instance)->m_width;
    return __ret;
}


void wxSharp::Window::set_m_width(int value)
{
    ((::wxWindow*)__Instance)->m_width = value;
}

int wxSharp::Window::get_m_height()
{
    int __ret = ((::wxWindow*)__Instance)->m_height;
    return __ret;
}


void wxSharp::Window::set_m_height(int value)
{
    ((::wxWindow*)__Instance)->m_height = value;
}

int wxSharp::Window::get_m_clientWidth()
{
    int __ret = ((::wxWindow*)__Instance)->m_clientWidth;
    return __ret;
}


void wxSharp::Window::set_m_clientWidth(int value)
{
    ((::wxWindow*)__Instance)->m_clientWidth = value;
}

int wxSharp::Window::get_m_clientHeight()
{
    int __ret = ((::wxWindow*)__Instance)->m_clientHeight;
    return __ret;
}


void wxSharp::Window::set_m_clientHeight(int value)
{
    ((::wxWindow*)__Instance)->m_clientHeight = value;
}

bool wxSharp::Window::get_m_useCachedClientSize()
{
    bool __ret = ((::wxWindow*)__Instance)->m_useCachedClientSize;
    return __ret;
}


void wxSharp::Window::set_m_useCachedClientSize(bool value)
{
    ((::wxWindow*)__Instance)->m_useCachedClientSize = value;
}

bool wxSharp::Window::get_m_isGtkPositionValid()
{
    bool __ret = ((::wxWindow*)__Instance)->m_isGtkPositionValid;
    return __ret;
}


void wxSharp::Window::set_m_isGtkPositionValid(bool value)
{
    ((::wxWindow*)__Instance)->m_isGtkPositionValid = value;
}

const char* wxSharp::Window::get_m_gtkLabel()
{
    ::wxString __ret = ((::wxWindow*)__Instance)->m_gtkLabel;
    return __ret.c_str();
}


void wxSharp::Window::set_m_gtkLabel(const char* value)
{
    auto __arg0 = value;
    ((::wxWindow*)__Instance)->m_gtkLabel = __arg0;
}

bool wxSharp::Window::get_m_noExpose()
{
    bool __ret = ((::wxWindow*)__Instance)->m_noExpose;
    return __ret;
}


void wxSharp::Window::set_m_noExpose(bool value)
{
    ((::wxWindow*)__Instance)->m_noExpose = value;
}

bool wxSharp::Window::get_m_nativeSizeEvent()
{
    bool __ret = ((::wxWindow*)__Instance)->m_nativeSizeEvent;
    return __ret;
}


void wxSharp::Window::set_m_nativeSizeEvent(bool value)
{
    ((::wxWindow*)__Instance)->m_nativeSizeEvent = value;
}

bool wxSharp::Window::get_m_isScrolling()
{
    bool __ret = ((::wxWindow*)__Instance)->m_isScrolling;
    return __ret;
}


void wxSharp::Window::set_m_isScrolling(bool value)
{
    ((::wxWindow*)__Instance)->m_isScrolling = value;
}

bool wxSharp::Window::get_m_clipPaintRegion()
{
    bool __ret = ((::wxWindow*)__Instance)->m_clipPaintRegion;
    return __ret;
}


void wxSharp::Window::set_m_clipPaintRegion(bool value)
{
    ((::wxWindow*)__Instance)->m_clipPaintRegion = value;
}

bool wxSharp::Window::get_m_dirtyTabOrder()
{
    bool __ret = ((::wxWindow*)__Instance)->m_dirtyTabOrder;
    return __ret;
}


void wxSharp::Window::set_m_dirtyTabOrder(bool value)
{
    ((::wxWindow*)__Instance)->m_dirtyTabOrder = value;
}

bool wxSharp::Window::get_m_mouseButtonDown()
{
    bool __ret = ((::wxWindow*)__Instance)->m_mouseButtonDown;
    return __ret;
}


void wxSharp::Window::set_m_mouseButtonDown(bool value)
{
    ((::wxWindow*)__Instance)->m_mouseButtonDown = value;
}

bool wxSharp::Window::get_m_showOnIdle()
{
    bool __ret = ((::wxWindow*)__Instance)->m_showOnIdle;
    return __ret;
}


void wxSharp::Window::set_m_showOnIdle(bool value)
{
    ((::wxWindow*)__Instance)->m_showOnIdle = value;
}

bool wxSharp::Window::get_m_needCursorReset()
{
    bool __ret = ((::wxWindow*)__Instance)->m_needCursorReset;
    return __ret;
}


void wxSharp::Window::set_m_needCursorReset(bool value)
{
    ((::wxWindow*)__Instance)->m_needCursorReset = value;
}

::wxSharp::Window* (::wxSharp::FindWindowAtPointer)(::wxSharp::Point& pt)
{
    auto &__arg0 = *(::wxPoint*)pt.__Instance;
    ::wxWindow* __ret = ::wxFindWindowAtPointer(__arg0);
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}

::wxSharp::Point (::wxSharp::GetMousePosition)()
{
    ::wxPoint __ret = ::wxGetMousePosition();
    auto ____ret = new ::wxPoint(__ret);
    return ____ret;
}

::wxSharp::Window* (::wxSharp::GetActiveWindow)()
{
    ::wxWindow* __ret = ::wxGetActiveWindow();
    return (__ret == nullptr) ? nullptr : new wxSharp::Window((::wxWindow*)__ret);
}
