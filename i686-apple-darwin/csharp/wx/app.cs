// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum PrintBackend : uint
    {
        PRINT_WINDOWS = 1,
        PRINT_POSTSCRIPT = 2
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr AppInitializerFunction();

    public unsafe partial class AppTraits
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.AppTraits> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.AppTraits>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.AppTraits __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.AppTraits(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.AppTraits __CreateInstance(global::wxSharp.AppTraits.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.AppTraits(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.AppTraits.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.AppTraits.__Internal));
            *(global::wxSharp.AppTraits.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AppTraits(global::wxSharp.AppTraits.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AppTraits(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class EventLoopBase
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.EventLoopBase> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.EventLoopBase>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.EventLoopBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.EventLoopBase(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.EventLoopBase __CreateInstance(global::wxSharp.EventLoopBase.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.EventLoopBase(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.EventLoopBase.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventLoopBase.__Internal));
            *(global::wxSharp.EventLoopBase.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EventLoopBase(global::wxSharp.EventLoopBase.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EventLoopBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CmdLineParser
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CmdLineParser> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CmdLineParser>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.CmdLineParser __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.CmdLineParser(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.CmdLineParser __CreateInstance(global::wxSharp.CmdLineParser.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.CmdLineParser(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.CmdLineParser.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.CmdLineParser.__Internal));
            *(global::wxSharp.CmdLineParser.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CmdLineParser(global::wxSharp.CmdLineParser.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CmdLineParser(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class VideoMode
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.VideoMode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.VideoMode>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.VideoMode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.VideoMode(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.VideoMode __CreateInstance(global::wxSharp.VideoMode.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.VideoMode(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.VideoMode.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.VideoMode.__Internal));
            *(global::wxSharp.VideoMode.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private VideoMode(global::wxSharp.VideoMode.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected VideoMode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class WakeUpPipe
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WakeUpPipe> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WakeUpPipe>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.WakeUpPipe __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.WakeUpPipe(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.WakeUpPipe __CreateInstance(global::wxSharp.WakeUpPipe.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.WakeUpPipe(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.WakeUpPipe.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WakeUpPipe.__Internal));
            *(global::wxSharp.WakeUpPipe.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WakeUpPipe(global::wxSharp.WakeUpPipe.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WakeUpPipe(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FDIOHandler
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.FDIOHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.FDIOHandler>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.FDIOHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.FDIOHandler(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.FDIOHandler __CreateInstance(global::wxSharp.FDIOHandler.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.FDIOHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.FDIOHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.FDIOHandler.__Internal));
            *(global::wxSharp.FDIOHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FDIOHandler(global::wxSharp.FDIOHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FDIOHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class FDIODispatcher
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.FDIODispatcher> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.FDIODispatcher>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.FDIODispatcher __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.FDIODispatcher(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.FDIODispatcher __CreateInstance(global::wxSharp.FDIODispatcher.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.FDIODispatcher(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.FDIODispatcher.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.FDIODispatcher.__Internal));
            *(global::wxSharp.FDIODispatcher.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FDIODispatcher(global::wxSharp.FDIODispatcher.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FDIODispatcher(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class WindowMac
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowMac> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WindowMac>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.WindowMac __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowMac(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.WindowMac __CreateInstance(global::wxSharp.WindowMac.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowMac(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.WindowMac.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowMac.__Internal));
            *(global::wxSharp.WindowMac.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WindowMac(global::wxSharp.WindowMac.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WindowMac(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class MacAutoreleasePool
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.MacAutoreleasePool> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.MacAutoreleasePool>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.MacAutoreleasePool __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.MacAutoreleasePool(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.MacAutoreleasePool __CreateInstance(global::wxSharp.MacAutoreleasePool.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.MacAutoreleasePool(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.MacAutoreleasePool.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.MacAutoreleasePool.__Internal));
            *(global::wxSharp.MacAutoreleasePool.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private MacAutoreleasePool(global::wxSharp.MacAutoreleasePool.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MacAutoreleasePool(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial interface IwxAppConsoleBase : global::wxSharp.IwxEvtHandler
    {
        bool CallOnInit();

        bool OnInit();

        int OnRun();

        void OnLaunched();

        void OnEventLoopEnter(global::wxSharp.EventLoopBase _0);

        int OnExit();

        void OnEventLoopExit(global::wxSharp.EventLoopBase _0);

        void CleanUp();

        void OnFatalException();

        void Exit();

        global::wxSharp.AppTraits GetTraits();

        global::wxSharp.EventLoopBase GetMainLoop();

        void SetCLocale();

        int FilterEvent(global::wxSharp.Event @event);

        void OnUnhandledException();

        bool OnExceptionInMainLoop();

        bool StoreCurrentException();

        void RethrowStoredException();

        void ProcessPendingEvents();

        bool HasPendingEvents();

        void SuspendProcessingOfPendingEvents();

        void ResumeProcessingOfPendingEvents();

        void RemovePendingEventHandler(global::wxSharp.IwxEvtHandler toRemove);

        void AppendPendingEventHandler(global::wxSharp.IwxEvtHandler toAppend);

        void DelayPendingEventHandler(global::wxSharp.IwxEvtHandler toDelay);

        void DeletePendingEvents();

        void ScheduleForDestruction(global::wxSharp.IwxObject @object);

        bool IsScheduledForDestruction(global::wxSharp.IwxObject @object);

        bool Pending();

        bool Dispatch();

        int MainLoop();

        void ExitMainLoop();

        bool Yield(bool onlyIfNeeded);

        void WakeUpIdle();

        bool ProcessIdle();

        bool UsesEventLoop();

        void OnAssertFailure(string file, int line, string func, string cond, string msg);

        void OnAssert(string file, int line, string cond, string msg);

        global::System.IntPtr __PointerTowxAppConsoleBase { get; }
    }

    public unsafe partial interface IwxAppConsole : global::wxSharp.IwxAppConsoleBase, global::wxSharp.IwxEvtHandler
    {
        bool Initialize(ref int argc, char** argv);

        bool SetSignalHandler(int signal, global::wxSharp.AppConsole.SignalHandler handler);

        void CheckSignal();

        bool CallOnInit();

        bool OnInit();

        int OnRun();

        void OnLaunched();

        void OnEventLoopEnter(global::wxSharp.EventLoopBase _0);

        int OnExit();

        void OnEventLoopExit(global::wxSharp.EventLoopBase _0);

        void CleanUp();

        void OnFatalException();

        void Exit();

        global::wxSharp.AppTraits GetTraits();

        global::wxSharp.EventLoopBase GetMainLoop();

        void SetCLocale();

        int FilterEvent(global::wxSharp.Event @event);

        void OnUnhandledException();

        bool OnExceptionInMainLoop();

        bool StoreCurrentException();

        void RethrowStoredException();

        void ProcessPendingEvents();

        bool HasPendingEvents();

        void SuspendProcessingOfPendingEvents();

        void ResumeProcessingOfPendingEvents();

        void RemovePendingEventHandler(global::wxSharp.IwxEvtHandler toRemove);

        void AppendPendingEventHandler(global::wxSharp.IwxEvtHandler toAppend);

        void DelayPendingEventHandler(global::wxSharp.IwxEvtHandler toDelay);

        void DeletePendingEvents();

        void ScheduleForDestruction(global::wxSharp.IwxObject @object);

        bool IsScheduledForDestruction(global::wxSharp.IwxObject @object);

        bool Pending();

        bool Dispatch();

        int MainLoop();

        void ExitMainLoop();

        bool Yield(bool onlyIfNeeded);

        void WakeUpIdle();

        bool ProcessIdle();

        bool UsesEventLoop();

        void OnAssertFailure(string file, int line, string func, string cond, string msg);

        void OnAssert(string file, int line, string cond, string msg);

        int argc { get; set; }

        global::System.IntPtr __PointerTowxAppConsole { get; }
    }

    public unsafe partial class AppConsole : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 248)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_first;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nextHandler;

            [FieldOffset(16)]
            internal global::System.IntPtr m_previousHandler;

            [FieldOffset(20)]
            internal global::System.IntPtr m_dynamicEvents;

            [FieldOffset(24)]
            internal global::System.IntPtr m_pendingEvents;

            [FieldOffset(28)]
            internal global::wxSharp.CriticalSection.__Internal m_pendingEventsLock;

            [FieldOffset(32)]
            internal byte m_enabled;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(40)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(44)]
            internal global::System.IntPtr vptr_wxEventFilter;

            [FieldOffset(48)]
            internal global::System.IntPtr m_next;

            [FieldOffset(52)]
            internal int argc;

            [FieldOffset(56)]
            internal global::wxSharp.CmdLineArgsArray.__Internal argv;

            [FieldOffset(84)]
            internal global::wxSharp.String.__Internal m_vendorName;

            [FieldOffset(104)]
            internal global::wxSharp.String.__Internal m_vendorDisplayName;

            [FieldOffset(124)]
            internal global::wxSharp.String.__Internal m_appName;

            [FieldOffset(144)]
            internal global::wxSharp.String.__Internal m_appDisplayName;

            [FieldOffset(164)]
            internal global::wxSharp.String.__Internal m_className;

            [FieldOffset(184)]
            internal global::System.IntPtr m_traits;

            [FieldOffset(188)]
            internal global::System.IntPtr m_mainLoop;

            [FieldOffset(192)]
            internal global::wxSharp.EvtHandlerArray.__Internal m_handlersWithPendingEvents;

            [FieldOffset(204)]
            internal global::wxSharp.EvtHandlerArray.__Internal m_handlersWithPendingDelayedEvents;

            [FieldOffset(216)]
            internal global::wxSharp.CriticalSection.__Internal m_handlersWithPendingEventsLocker;

            [FieldOffset(220)]
            internal byte m_bDoPendingEventProcessing;

            [FieldOffset(224)]
            internal uint m_signalsCaught;

            [FieldOffset(228)]
            internal global::wxSharp.AppConsole.SignalHandlerHash.__Internal m_signalHandlerHash;

            [FieldOffset(244)]
            internal global::System.IntPtr m_signalWakeUpPipe;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxAppConsoleC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxAppConsole16SetSignalHandlerEiPFviE")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSignalHandler(global::System.IntPtr __instance, int signal, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxAppConsole11CheckSignalEv")]
            internal static extern void CheckSignal(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase9GetTraitsEv")]
            internal static extern global::System.IntPtr GetTraits(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase17GetTraitsIfExistsEv")]
            internal static extern global::System.IntPtr GetTraitsIfExists();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxAppConsoleBase11GetMainLoopEv")]
            internal static extern global::System.IntPtr GetMainLoop(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase17IsMainLoopRunningEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMainLoopRunning();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxAppConsoleBase16HasPendingEventsEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasPendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase32SuspendProcessingOfPendingEventsEv")]
            internal static extern void SuspendProcessingOfPendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase31ResumeProcessingOfPendingEventsEv")]
            internal static extern void ResumeProcessingOfPendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase25RemovePendingEventHandlerEP12wxEvtHandler")]
            internal static extern void RemovePendingEventHandler(global::System.IntPtr __instance, global::System.IntPtr toRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase25AppendPendingEventHandlerEP12wxEvtHandler")]
            internal static extern void AppendPendingEventHandler(global::System.IntPtr __instance, global::System.IntPtr toAppend);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase24DelayPendingEventHandlerEP12wxEvtHandler")]
            internal static extern void DelayPendingEventHandler(global::System.IntPtr __instance, global::System.IntPtr toDelay);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase19DeletePendingEventsEv")]
            internal static extern void DeletePendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase22ScheduleForDestructionEP8wxObject")]
            internal static extern void ScheduleForDestruction(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxAppConsoleBase25IsScheduledForDestructionEP8wxObject")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsScheduledForDestruction(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase5YieldEb")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Yield(global::System.IntPtr __instance, bool onlyIfNeeded);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase17CheckBuildOptionsEPKcS1_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckBuildOptions([MarshalAs(UnmanagedType.LPUTF8Str)] string optionsSignature, [MarshalAs(UnmanagedType.LPUTF8Str)] string componentName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase11GetInstanceEv")]
            internal static extern global::System.IntPtr GetInstance();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase11SetInstanceEP12wxAppConsole")]
            internal static extern void SetInstance(global::System.IntPtr app);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase20DeletePendingObjectsEv")]
            internal static extern void DeletePendingObjects(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase14CreateMainLoopEv")]
            internal static extern global::System.IntPtr CreateMainLoop(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler14GetNextHandlerEv")]
            internal static extern global::System.IntPtr GetNextHandler(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler18GetPreviousHandlerEv")]
            internal static extern global::System.IntPtr GetPreviousHandler(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler20SetEvtHandlerEnabledEb")]
            internal static extern void SetEvtHandlerEnabled(global::System.IntPtr __instance, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler20GetEvtHandlerEnabledEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetEvtHandlerEnabled(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler6UnlinkEv")]
            internal static extern void Unlink(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler10IsUnlinkedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUnlinked(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18SafelyProcessEventER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SafelyProcessEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ProcessEventLocallyER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessEventLocally(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18ProcessThreadEventERK7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessThreadEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler13SetClientDataEPv")]
            internal static extern void SetClientData(global::System.IntPtr __instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler13GetClientDataEv")]
            internal static extern global::System.IntPtr GetClientData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler23SearchDynamicEventTableER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SearchDynamicEventTable(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ClearEventHashTableEv")]
            internal static extern void ClearEventHashTable(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler15OnSinkDestroyedEPS_")]
            internal static extern void OnSinkDestroyed(global::System.IntPtr __instance, global::System.IntPtr sink);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler11TryHereOnlyER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TryHereOnly(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler16TryBeforeAndHereER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TryBeforeAndHere(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxObject10GetRefDataEv")]
            internal static extern global::System.IntPtr GetRefData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject10SetRefDataEP12wxRefCounter")]
            internal static extern void SetRefData(global::System.IntPtr __instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject3RefERKS_")]
            internal static extern void Ref(global::System.IntPtr __instance, global::System.IntPtr clone);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject5UnRefEv")]
            internal static extern void UnRef(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject7UnShareEv")]
            internal static extern void UnShare(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxObject8IsSameAsERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSameAs(global::System.IntPtr __instance, global::System.IntPtr o);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject14AllocExclusiveEv")]
            internal static extern void AllocExclusive(global::System.IntPtr __instance);
        }

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void SignalHandler(int _0);

        public unsafe partial class SignalHandlerHash
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_table;

                [FieldOffset(4)]
                internal uint m_tableBuckets;

                [FieldOffset(8)]
                internal uint m_items;

                [FieldOffset(12)]
                internal global::wxSharp.IntegerHash.__Internal m_hasher;

                [FieldOffset(13)]
                internal global::wxSharp.IntegerEqual.__Internal m_equals;

                [FieldOffset(14)]
                internal global::wxSharp.AppConsole.SignalHandlerHash_wxImplementation_KeyEx.__Internal m_getKey;
            }
        }

        public unsafe partial class SignalHandlerHash_wxImplementation_KeyEx
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct __Internal
            {
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.IwxAppConsole> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.IwxAppConsole>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.AppConsole __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.AppConsole(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.AppConsole __CreateInstance(global::wxSharp.AppConsole.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.AppConsole(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.AppConsole.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.AppConsole.__Internal));
            *(global::wxSharp.AppConsole.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private AppConsole(global::wxSharp.AppConsole.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AppConsole(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public AppConsole()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.AppConsole.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.AppConsole");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.IwxAppConsole __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.AppConsole.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public virtual bool Initialize(ref int argc, char** argv)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___InitializeDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_intPtr_charPtrPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_intPtr_charPtrPtr));
            fixed (int* __argc0 = &argc)
            {
                var __arg0 = __argc0;
                var __ret = ___InitializeDelegate(__Instance, __arg0, argv);
                return __ret;
            }
        }

        public bool SetSignalHandler(int signal, global::wxSharp.AppConsole.SignalHandler handler)
        {
            var __arg1 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            var __ret = __Internal.SetSignalHandler(__Instance, signal, __arg1);
            return __ret;
        }

        public void CheckSignal()
        {
            __Internal.CheckSignal(__Instance);
        }

        public virtual bool CallOnInit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___CallOnInitDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___CallOnInitDelegate(__Instance);
            return __ret;
        }

        public virtual bool OnInit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 4);
            var ___OnInitDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___OnInitDelegate(__Instance);
            return __ret;
        }

        public virtual int OnRun()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 23 * 4);
            var ___OnRunDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___OnRunDelegate(__Instance);
            return __ret;
        }

        public virtual void OnLaunched()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 24 * 4);
            var ___OnLaunchedDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___OnLaunchedDelegate(__Instance);
        }

        public virtual void OnEventLoopEnter(global::wxSharp.EventLoopBase _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 4);
            var ___OnEventLoopEnterDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            ___OnEventLoopEnterDelegate(__Instance, __arg0);
        }

        public virtual int OnExit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 26 * 4);
            var ___OnExitDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___OnExitDelegate(__Instance);
            return __ret;
        }

        public virtual void OnEventLoopExit(global::wxSharp.EventLoopBase _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 4);
            var ___OnEventLoopExitDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            ___OnEventLoopExitDelegate(__Instance, __arg0);
        }

        public virtual void CleanUp()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 4);
            var ___CleanUpDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___CleanUpDelegate(__Instance);
        }

        public virtual void OnFatalException()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 29 * 4);
            var ___OnFatalExceptionDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___OnFatalExceptionDelegate(__Instance);
        }

        public virtual void Exit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 30 * 4);
            var ___ExitDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___ExitDelegate(__Instance);
        }

        public global::wxSharp.AppTraits GetTraits()
        {
            var __ret = __Internal.GetTraits(__Instance);
            global::wxSharp.AppTraits __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.AppTraits.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.AppTraits) global::wxSharp.AppTraits.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.AppTraits.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.EventLoopBase GetMainLoop()
        {
            var __ret = __Internal.GetMainLoop(__Instance);
            global::wxSharp.EventLoopBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void SetCLocale()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 35 * 4);
            var ___SetCLocaleDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___SetCLocaleDelegate(__Instance);
        }

        public virtual int FilterEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 36 * 4);
            var ___FilterEventDelegate = (global::wxSharp.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___FilterEventDelegate(__Instance, __arg0);
            return __ret;
        }

        public virtual void OnUnhandledException()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 39 * 4);
            var ___OnUnhandledExceptionDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___OnUnhandledExceptionDelegate(__Instance);
        }

        public virtual bool OnExceptionInMainLoop()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 40 * 4);
            var ___OnExceptionInMainLoopDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___OnExceptionInMainLoopDelegate(__Instance);
            return __ret;
        }

        public virtual bool StoreCurrentException()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 41 * 4);
            var ___StoreCurrentExceptionDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___StoreCurrentExceptionDelegate(__Instance);
            return __ret;
        }

        public virtual void RethrowStoredException()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 42 * 4);
            var ___RethrowStoredExceptionDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___RethrowStoredExceptionDelegate(__Instance);
        }

        public virtual void ProcessPendingEvents()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 43 * 4);
            var ___ProcessPendingEventsDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___ProcessPendingEventsDelegate(__Instance);
        }

        public bool HasPendingEvents()
        {
            var __ret = __Internal.HasPendingEvents(__Instance);
            return __ret;
        }

        public void SuspendProcessingOfPendingEvents()
        {
            __Internal.SuspendProcessingOfPendingEvents(__Instance);
        }

        public void ResumeProcessingOfPendingEvents()
        {
            __Internal.ResumeProcessingOfPendingEvents(__Instance);
        }

        public void RemovePendingEventHandler(global::wxSharp.IwxEvtHandler toRemove)
        {
            var __arg0 = ReferenceEquals(toRemove, null) ? global::System.IntPtr.Zero : toRemove.__PointerToEvtHandler;
            __Internal.RemovePendingEventHandler(__Instance, __arg0);
        }

        public void AppendPendingEventHandler(global::wxSharp.IwxEvtHandler toAppend)
        {
            var __arg0 = ReferenceEquals(toAppend, null) ? global::System.IntPtr.Zero : toAppend.__PointerToEvtHandler;
            __Internal.AppendPendingEventHandler(__Instance, __arg0);
        }

        public void DelayPendingEventHandler(global::wxSharp.IwxEvtHandler toDelay)
        {
            var __arg0 = ReferenceEquals(toDelay, null) ? global::System.IntPtr.Zero : toDelay.__PointerToEvtHandler;
            __Internal.DelayPendingEventHandler(__Instance, __arg0);
        }

        public void DeletePendingEvents()
        {
            __Internal.DeletePendingEvents(__Instance);
        }

        public void ScheduleForDestruction(global::wxSharp.IwxObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__PointerToObject;
            __Internal.ScheduleForDestruction(__Instance, __arg0);
        }

        public bool IsScheduledForDestruction(global::wxSharp.IwxObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__PointerToObject;
            var __ret = __Internal.IsScheduledForDestruction(__Instance, __arg0);
            return __ret;
        }

        public virtual bool Pending()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 44 * 4);
            var ___PendingDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___PendingDelegate(__Instance);
            return __ret;
        }

        public virtual bool Dispatch()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 45 * 4);
            var ___DispatchDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___DispatchDelegate(__Instance);
            return __ret;
        }

        public virtual int MainLoop()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 46 * 4);
            var ___MainLoopDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___MainLoopDelegate(__Instance);
            return __ret;
        }

        public virtual void ExitMainLoop()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 47 * 4);
            var ___ExitMainLoopDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___ExitMainLoopDelegate(__Instance);
        }

        public bool Yield(bool onlyIfNeeded)
        {
            var __ret = __Internal.Yield(__Instance, onlyIfNeeded);
            return __ret;
        }

        public virtual void WakeUpIdle()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 48 * 4);
            var ___WakeUpIdleDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___WakeUpIdleDelegate(__Instance);
        }

        public virtual bool ProcessIdle()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 49 * 4);
            var ___ProcessIdleDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___ProcessIdleDelegate(__Instance);
            return __ret;
        }

        public virtual bool UsesEventLoop()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 50 * 4);
            var ___UsesEventLoopDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___UsesEventLoopDelegate(__Instance);
            return __ret;
        }

        public virtual void OnAssertFailure(string file, int line, string func, string cond, string msg)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 51 * 4);
            var ___OnAssertFailureDelegate = (global::wxSharp.Delegates.Action_IntPtr_string_int_string_string_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_string_int_string_string_string));
            ___OnAssertFailureDelegate(__Instance, file, line, func, cond, msg);
        }

        public virtual void OnAssert(string file, int line, string cond, string msg)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 52 * 4);
            var ___OnAssertDelegate = (global::wxSharp.Delegates.Action_IntPtr_string_int_string_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_string_int_string_string));
            ___OnAssertDelegate(__Instance, file, line, cond, msg);
        }

        protected void DeletePendingObjects()
        {
            __Internal.DeletePendingObjects(__Instance);
        }

        protected virtual global::wxSharp.AppTraits CreateTraits()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 53 * 4);
            var ___CreateTraitsDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CreateTraitsDelegate(__Instance);
            global::wxSharp.AppTraits __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.AppTraits.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.AppTraits) global::wxSharp.AppTraits.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.AppTraits.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.EventLoopBase CreateMainLoop()
        {
            var __ret = __Internal.CreateMainLoop(__Instance);
            global::wxSharp.EventLoopBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.IwxEvtHandler GetNextHandler()
        {
            var __ret = __Internal.GetNextHandler(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.IwxEvtHandler GetPreviousHandler()
        {
            var __ret = __Internal.GetPreviousHandler(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void SetNextHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___SetNextHandlerDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            ___SetNextHandlerDelegate(__Instance, __arg0);
        }

        public virtual void SetPreviousHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___SetPreviousHandlerDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            ___SetPreviousHandlerDelegate(__Instance, __arg0);
        }

        public void SetEvtHandlerEnabled(bool enabled)
        {
            __Internal.SetEvtHandlerEnabled(__Instance, enabled);
        }

        public bool GetEvtHandlerEnabled()
        {
            var __ret = __Internal.GetEvtHandlerEnabled(__Instance);
            return __ret;
        }

        public void Unlink()
        {
            __Internal.Unlink(__Instance);
        }

        public bool IsUnlinked()
        {
            var __ret = __Internal.IsUnlinked(__Instance);
            return __ret;
        }

        public virtual bool ProcessEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___ProcessEventDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___ProcessEventDelegate(__Instance, __arg0);
            return __ret;
        }

        public bool SafelyProcessEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.SafelyProcessEvent(__Instance, __arg0);
            return __ret;
        }

        public bool ProcessEventLocally(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessEventLocally(__Instance, __arg0);
            return __ret;
        }

        public virtual void QueueEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___QueueEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            ___QueueEventDelegate(__Instance, __arg0);
        }

        public virtual void AddPendingEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___AddPendingEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            ___AddPendingEventDelegate(__Instance, __arg0);
        }

        public bool ProcessThreadEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessThreadEvent(__Instance, __arg0);
            return __ret;
        }

        public void SetClientData(global::System.IntPtr data)
        {
            __Internal.SetClientData(__Instance, data);
        }

        public global::System.IntPtr GetClientData()
        {
            var __ret = __Internal.GetClientData(__Instance);
            return __ret;
        }

        public bool SearchDynamicEventTable(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.SearchDynamicEventTable(__Instance, __arg0);
            return __ret;
        }

        public void ClearEventHashTable()
        {
            __Internal.ClearEventHashTable(__Instance);
        }

        public void OnSinkDestroyed(global::wxSharp.IwxEvtHandler sink)
        {
            var __arg0 = ReferenceEquals(sink, null) ? global::System.IntPtr.Zero : sink.__PointerToEvtHandler;
            __Internal.OnSinkDestroyed(__Instance, __arg0);
        }

        protected bool TryHereOnly(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.TryHereOnly(__Instance, __arg0);
            return __ret;
        }

        protected bool TryBeforeAndHere(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.TryBeforeAndHere(__Instance, __arg0);
            return __ret;
        }

        protected virtual bool TryAfter(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___TryAfterDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___TryAfterDelegate(__Instance, __arg0);
            return __ret;
        }

        protected virtual void DoSetClientData(global::System.IntPtr data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___DoSetClientDataDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            ___DoSetClientDataDelegate(__Instance, data);
        }

        protected virtual global::System.IntPtr DoGetClientData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___DoGetClientDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___DoGetClientDataDelegate(__Instance);
            return __ret;
        }

        public global::wxSharp.RefCounter GetRefData()
        {
            var __ret = __Internal.GetRefData(__Instance);
            global::wxSharp.RefCounter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[__ret];
            else global::wxSharp.RefCounter.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(__ret);
            return __result0;
        }

        public void SetRefData(global::wxSharp.RefCounter data)
        {
            var __arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            __Internal.SetRefData(__Instance, __arg0);
        }

        public void Ref(global::wxSharp.IwxObject clone)
        {
            if (ReferenceEquals(clone, null))
                throw new global::System.ArgumentNullException("clone", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = clone.__PointerToObject;
            __Internal.Ref(__Instance, __arg0);
        }

        public void UnRef()
        {
            __Internal.UnRef(__Instance);
        }

        public void UnShare()
        {
            __Internal.UnShare(__Instance);
        }

        public bool IsSameAs(global::wxSharp.IwxObject o)
        {
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__PointerToObject;
            var __ret = __Internal.IsSameAs(__Instance, __arg0);
            return __ret;
        }

        protected void AllocExclusive()
        {
            __Internal.AllocExclusive(__Instance);
        }

        protected virtual global::wxSharp.RefCounter CreateRefData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___CreateRefDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CreateRefDataDelegate(__Instance);
            global::wxSharp.RefCounter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[__ret];
            else global::wxSharp.RefCounter.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual global::wxSharp.RefCounter CloneRefData(global::wxSharp.RefCounter data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___CloneRefDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            var __ret = ___CloneRefDataDelegate(__Instance, __arg0);
            global::wxSharp.RefCounter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[__ret];
            else global::wxSharp.RefCounter.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.AppTraits GetTraitsIfExists()
        {
            var __ret = __Internal.GetTraitsIfExists();
            global::wxSharp.AppTraits __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.AppTraits.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.AppTraits) global::wxSharp.AppTraits.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.AppTraits.__CreateInstance(__ret);
            return __result0;
        }

        public static bool IsMainLoopRunning()
        {
            var __ret = __Internal.IsMainLoopRunning();
            return __ret;
        }

        public static bool CheckBuildOptions(string optionsSignature, string componentName)
        {
            var __ret = __Internal.CheckBuildOptions(optionsSignature, componentName);
            return __ret;
        }

        public static global::wxSharp.IwxAppConsole GetInstance()
        {
            var __ret = __Internal.GetInstance();
            global::wxSharp.IwxAppConsole __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.AppConsole.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxAppConsole) global::wxSharp.AppConsole.NativeToManagedMap[__ret];
            else global::wxSharp.AppConsole.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxAppConsole) global::wxSharp.AppConsole.__CreateInstance(__ret);
            return __result0;
        }

        public static void SetInstance(global::wxSharp.IwxAppConsole app)
        {
            var __arg0 = ReferenceEquals(app, null) ? global::System.IntPtr.Zero : app.__PointerToAppConsole;
            __Internal.SetInstance(__arg0);
        }

        public int argc
        {
            get
            {
                return ((global::wxSharp.AppConsole.__Internal*) __Instance)->argc;
            }

            set
            {
                ((global::wxSharp.AppConsole.__Internal*)__Instance)->argc = value;
            }
        }

        protected global::wxSharp.AppTraits m_traits
        {
            get
            {
                global::wxSharp.AppTraits __result0;
                if (((global::wxSharp.AppConsole.__Internal*) __Instance)->m_traits == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.AppTraits.NativeToManagedMap.ContainsKey(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_traits))
                    __result0 = (global::wxSharp.AppTraits) global::wxSharp.AppTraits.NativeToManagedMap[((global::wxSharp.AppConsole.__Internal*) __Instance)->m_traits];
                else __result0 = global::wxSharp.AppTraits.__CreateInstance(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_traits);
                return __result0;
            }

            set
            {
                ((global::wxSharp.AppConsole.__Internal*)__Instance)->m_traits = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.EventLoopBase m_mainLoop
        {
            get
            {
                global::wxSharp.EventLoopBase __result0;
                if (((global::wxSharp.AppConsole.__Internal*) __Instance)->m_mainLoop == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_mainLoop))
                    __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[((global::wxSharp.AppConsole.__Internal*) __Instance)->m_mainLoop];
                else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_mainLoop);
                return __result0;
            }

            set
            {
                ((global::wxSharp.AppConsole.__Internal*)__Instance)->m_mainLoop = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_bDoPendingEventProcessing
        {
            get
            {
                return ((global::wxSharp.AppConsole.__Internal*) __Instance)->m_bDoPendingEventProcessing != 0;
            }

            set
            {
                ((global::wxSharp.AppConsole.__Internal*)__Instance)->m_bDoPendingEventProcessing = (byte) (value ? 1 : 0);
            }
        }

        public global::System.IntPtr __PointerTowxAppConsole
        {
            get
            {
                return __Instance + 0;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_nextHandler
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.AppConsole.__Internal*) __Instance)->m_nextHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_nextHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.AppConsole.__Internal*) __Instance)->m_nextHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.AppConsole.__Internal*) __Instance)->m_nextHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_nextHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.AppConsole.__Internal*)__Instance)->m_nextHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_previousHandler
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.AppConsole.__Internal*) __Instance)->m_previousHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_previousHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.AppConsole.__Internal*) __Instance)->m_previousHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.AppConsole.__Internal*) __Instance)->m_previousHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_previousHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.AppConsole.__Internal*)__Instance)->m_previousHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_enabled
        {
            get
            {
                return ((global::wxSharp.AppConsole.__Internal*) __Instance)->m_enabled != 0;
            }

            set
            {
                ((global::wxSharp.AppConsole.__Internal*)__Instance)->m_enabled = (byte) (value ? 1 : 0);
            }
        }

        public global::System.IntPtr __PointerTowxEvtHandler
        {
            get
            {
                return __Instance + 0;
            }
        }

        protected global::wxSharp.RefCounter m_refData
        {
            get
            {
                global::wxSharp.RefCounter __result0;
                if (((global::wxSharp.AppConsole.__Internal*) __Instance)->m_refData == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_refData))
                    __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[((global::wxSharp.AppConsole.__Internal*) __Instance)->m_refData];
                else global::wxSharp.RefCounter.NativeToManagedMap[((global::wxSharp.AppConsole.__Internal*) __Instance)->m_refData] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(((global::wxSharp.AppConsole.__Internal*) __Instance)->m_refData);
                return __result0;
            }

            set
            {
                ((global::wxSharp.AppConsole.__Internal*)__Instance)->m_refData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr __PointerTowxObject
        {
            get
            {
                return __Instance + 0;
            }
        }

        public global::System.IntPtr __PointerTowxTrackable
        {
            get
            {
                return __Instance + 8;
            }
        }

        public global::System.IntPtr __PointerTowxEventFilter
        {
            get
            {
                return __Instance + 44;
            }
        }

        #region Virtual table interop

        // virtual ~wxAppConsole()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetNextHandler(wxEvtHandler *handler) { m_nextHandler = handler; }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetNextHandlerDelegateInstance;

        private static void _SetNextHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetNextHandler(__result0);
        }

        // void SetPreviousHandler(wxEvtHandler *handler) { m_previousHandler = handler; }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetPreviousHandlerDelegateInstance;

        private static void _SetPreviousHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetPreviousHandler(__result0);
        }

        // bool ProcessEvent(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _ProcessEventDelegateInstance;

        private static bool _ProcessEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.ProcessEvent(__result0);
        }

        // void QueueEvent(wxEvent *event)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _QueueEventDelegateInstance;

        private static void _QueueEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.QueueEvent(__result0);
        }

        // void AddPendingEvent(const wxEvent& event) { // notice that the thread-safety problem comes from the fact that // Clone() doesn't make deep copies of wxString fields of wxEvent // object and so the same wxString could be used from both threads when // the event object is destroyed in this one -- QueueEvent() avoids // this problem as the event pointer is not used any more in this // thread at all after it is called. QueueEvent(event.Clone()); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AddPendingEventDelegateInstance;

        private static void _AddPendingEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.AddPendingEvent(__result0);
        }

        // bool TryBefore(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryBeforeDelegateInstance;

        private static bool _TryBeforeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryBefore(__result0);
        }

        // bool TryAfter(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryAfterDelegateInstance;

        private static bool _TryAfterDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryAfter(__result0);
        }

        // void DoSetClientData( void *data )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoSetClientDataDelegateInstance;

        private static void _DoSetClientDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        // bool Initialize(int& argc, wxChar** argv) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_intPtr_charPtrPtr _InitializeDelegateInstance;

        private static bool _InitializeDelegateHook(global::System.IntPtr __instance, int* argc, char** argv)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Initialize(ref *argc, argv);
        }

        // bool CallOnInit() { return OnInit(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CallOnInitDelegateInstance;

        private static bool _CallOnInitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CallOnInit();
        }

        // bool OnInit()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _OnInitDelegateInstance;

        private static bool _OnInitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.OnInit();
        }

        // int OnRun()
        private static global::wxSharp.Delegates.Func_int_IntPtr _OnRunDelegateInstance;

        private static int _OnRunDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.OnRun();
        }

        // void OnLaunched()
        private static global::wxSharp.Delegates.Action_IntPtr _OnLaunchedDelegateInstance;

        private static void _OnLaunchedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnLaunched();
        }

        // void OnEventLoopEnter(wxEventLoopBase* WXUNUSED(loop)) {}
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _OnEventLoopEnterDelegateInstance;

        private static void _OnEventLoopEnterDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.EventLoopBase __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[_0];
            else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(_0);
            __target.OnEventLoopEnter(__result0);
        }

        // int OnExit()
        private static global::wxSharp.Delegates.Func_int_IntPtr _OnExitDelegateInstance;

        private static int _OnExitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.OnExit();
        }

        // void OnEventLoopExit(wxEventLoopBase* WXUNUSED(loop)) {}
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _OnEventLoopExitDelegateInstance;

        private static void _OnEventLoopExitDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.EventLoopBase __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[_0];
            else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(_0);
            __target.OnEventLoopExit(__result0);
        }

        // void CleanUp()
        private static global::wxSharp.Delegates.Action_IntPtr _CleanUpDelegateInstance;

        private static void _CleanUpDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.CleanUp();
        }

        // void OnFatalException() { }
        private static global::wxSharp.Delegates.Action_IntPtr _OnFatalExceptionDelegateInstance;

        private static void _OnFatalExceptionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnFatalException();
        }

        // void Exit()
        private static global::wxSharp.Delegates.Action_IntPtr _ExitDelegateInstance;

        private static void _ExitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Exit();
        }

        // void SetCLocale()
        private static global::wxSharp.Delegates.Action_IntPtr _SetCLocaleDelegateInstance;

        private static void _SetCLocaleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetCLocale();
        }

        // int FilterEvent(wxEvent& event) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_IntPtr _FilterEventDelegateInstance;

        private static int _FilterEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.FilterEvent(__result0);
        }

        // void OnUnhandledException()
        private static global::wxSharp.Delegates.Action_IntPtr _OnUnhandledExceptionDelegateInstance;

        private static void _OnUnhandledExceptionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnUnhandledException();
        }

        // bool OnExceptionInMainLoop()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _OnExceptionInMainLoopDelegateInstance;

        private static bool _OnExceptionInMainLoopDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.OnExceptionInMainLoop();
        }

        // bool StoreCurrentException()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _StoreCurrentExceptionDelegateInstance;

        private static bool _StoreCurrentExceptionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.StoreCurrentException();
        }

        // void RethrowStoredException()
        private static global::wxSharp.Delegates.Action_IntPtr _RethrowStoredExceptionDelegateInstance;

        private static void _RethrowStoredExceptionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RethrowStoredException();
        }

        // void ProcessPendingEvents()
        private static global::wxSharp.Delegates.Action_IntPtr _ProcessPendingEventsDelegateInstance;

        private static void _ProcessPendingEventsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ProcessPendingEvents();
        }

        // bool Pending()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _PendingDelegateInstance;

        private static bool _PendingDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Pending();
        }

        // bool Dispatch()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _DispatchDelegateInstance;

        private static bool _DispatchDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Dispatch();
        }

        // int MainLoop()
        private static global::wxSharp.Delegates.Func_int_IntPtr _MainLoopDelegateInstance;

        private static int _MainLoopDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.MainLoop();
        }

        // void ExitMainLoop()
        private static global::wxSharp.Delegates.Action_IntPtr _ExitMainLoopDelegateInstance;

        private static void _ExitMainLoopDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ExitMainLoop();
        }

        // void WakeUpIdle()
        private static global::wxSharp.Delegates.Action_IntPtr _WakeUpIdleDelegateInstance;

        private static void _WakeUpIdleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.WakeUpIdle();
        }

        // bool ProcessIdle()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _ProcessIdleDelegateInstance;

        private static bool _ProcessIdleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ProcessIdle();
        }

        // bool UsesEventLoop() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _UsesEventLoopDelegateInstance;

        private static bool _UsesEventLoopDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.UsesEventLoop();
        }

        // void OnAssertFailure(const wxChar *file, int line, const wxChar *func, const wxChar *cond, const wxChar *msg)
        private static global::wxSharp.Delegates.Action_IntPtr_string_int_string_string_string _OnAssertFailureDelegateInstance;

        private static void _OnAssertFailureDelegateHook(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string file, int line, [MarshalAs(UnmanagedType.LPUTF8Str)] string func, [MarshalAs(UnmanagedType.LPUTF8Str)] string cond, [MarshalAs(UnmanagedType.LPUTF8Str)] string msg)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnAssertFailure(file, line, func, cond, msg);
        }

        // void OnAssert(const wxChar *file, int line, const wxChar *cond, const wxChar *msg)
        private static global::wxSharp.Delegates.Action_IntPtr_string_int_string_string _OnAssertDelegateInstance;

        private static void _OnAssertDelegateHook(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string file, int line, [MarshalAs(UnmanagedType.LPUTF8Str)] string cond, [MarshalAs(UnmanagedType.LPUTF8Str)] string msg)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnAssert(file, line, cond, msg);
        }

        // wxAppTraits *CreateTraits()
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateTraitsDelegateInstance;

        private static global::System.IntPtr _CreateTraitsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AppConsole) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateTraits();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[40];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _SetNextHandlerDelegateInstance += _SetNextHandlerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetNextHandlerDelegateInstance).ToPointer();
                _SetPreviousHandlerDelegateInstance += _SetPreviousHandlerDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_SetPreviousHandlerDelegateInstance).ToPointer();
                _ProcessEventDelegateInstance += _ProcessEventDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_ProcessEventDelegateInstance).ToPointer();
                _QueueEventDelegateInstance += _QueueEventDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_QueueEventDelegateInstance).ToPointer();
                _AddPendingEventDelegateInstance += _AddPendingEventDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_AddPendingEventDelegateInstance).ToPointer();
                _TryBeforeDelegateInstance += _TryBeforeDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_TryBeforeDelegateInstance).ToPointer();
                _TryAfterDelegateInstance += _TryAfterDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_TryAfterDelegateInstance).ToPointer();
                _DoSetClientDataDelegateInstance += _DoSetClientDataDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_DoSetClientDataDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
                _InitializeDelegateInstance += _InitializeDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_InitializeDelegateInstance).ToPointer();
                _CallOnInitDelegateInstance += _CallOnInitDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_CallOnInitDelegateInstance).ToPointer();
                _OnInitDelegateInstance += _OnInitDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_OnInitDelegateInstance).ToPointer();
                _OnRunDelegateInstance += _OnRunDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_OnRunDelegateInstance).ToPointer();
                _OnLaunchedDelegateInstance += _OnLaunchedDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_OnLaunchedDelegateInstance).ToPointer();
                _OnEventLoopEnterDelegateInstance += _OnEventLoopEnterDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_OnEventLoopEnterDelegateInstance).ToPointer();
                _OnExitDelegateInstance += _OnExitDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_OnExitDelegateInstance).ToPointer();
                _OnEventLoopExitDelegateInstance += _OnEventLoopExitDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_OnEventLoopExitDelegateInstance).ToPointer();
                _CleanUpDelegateInstance += _CleanUpDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_CleanUpDelegateInstance).ToPointer();
                _OnFatalExceptionDelegateInstance += _OnFatalExceptionDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_OnFatalExceptionDelegateInstance).ToPointer();
                _ExitDelegateInstance += _ExitDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_ExitDelegateInstance).ToPointer();
                _SetCLocaleDelegateInstance += _SetCLocaleDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_SetCLocaleDelegateInstance).ToPointer();
                _FilterEventDelegateInstance += _FilterEventDelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_FilterEventDelegateInstance).ToPointer();
                _OnUnhandledExceptionDelegateInstance += _OnUnhandledExceptionDelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_OnUnhandledExceptionDelegateInstance).ToPointer();
                _OnExceptionInMainLoopDelegateInstance += _OnExceptionInMainLoopDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_OnExceptionInMainLoopDelegateInstance).ToPointer();
                _StoreCurrentExceptionDelegateInstance += _StoreCurrentExceptionDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_StoreCurrentExceptionDelegateInstance).ToPointer();
                _RethrowStoredExceptionDelegateInstance += _RethrowStoredExceptionDelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_RethrowStoredExceptionDelegateInstance).ToPointer();
                _ProcessPendingEventsDelegateInstance += _ProcessPendingEventsDelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_ProcessPendingEventsDelegateInstance).ToPointer();
                _PendingDelegateInstance += _PendingDelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_PendingDelegateInstance).ToPointer();
                _DispatchDelegateInstance += _DispatchDelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_DispatchDelegateInstance).ToPointer();
                _MainLoopDelegateInstance += _MainLoopDelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_MainLoopDelegateInstance).ToPointer();
                _ExitMainLoopDelegateInstance += _ExitMainLoopDelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_ExitMainLoopDelegateInstance).ToPointer();
                _WakeUpIdleDelegateInstance += _WakeUpIdleDelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_WakeUpIdleDelegateInstance).ToPointer();
                _ProcessIdleDelegateInstance += _ProcessIdleDelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_ProcessIdleDelegateInstance).ToPointer();
                _UsesEventLoopDelegateInstance += _UsesEventLoopDelegateHook;
                _Thunks[36] = Marshal.GetFunctionPointerForDelegate(_UsesEventLoopDelegateInstance).ToPointer();
                _OnAssertFailureDelegateInstance += _OnAssertFailureDelegateHook;
                _Thunks[37] = Marshal.GetFunctionPointerForDelegate(_OnAssertFailureDelegateInstance).ToPointer();
                _OnAssertDelegateInstance += _OnAssertDelegateHook;
                _Thunks[38] = Marshal.GetFunctionPointerForDelegate(_OnAssertDelegateInstance).ToPointer();
                _CreateTraitsDelegateInstance += _CreateTraitsDelegateHook;
                _Thunks[39] = Marshal.GetFunctionPointerForDelegate(_CreateTraitsDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(61 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 128);
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                    *(void**) (vfptr0 + 148) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 148);
                    *(void**) (vfptr0 + 152) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 152);
                    *(void**) (vfptr0 + 156) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 156);
                    *(void**) (vfptr0 + 160) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 160);
                    *(void**) (vfptr0 + 164) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 164);
                    *(void**) (vfptr0 + 168) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 168);
                    *(void**) (vfptr0 + 172) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 172);
                    *(void**) (vfptr0 + 176) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 176);
                    *(void**) (vfptr0 + 180) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 180);
                    *(void**) (vfptr0 + 184) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 184);
                    *(void**) (vfptr0 + 188) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 188);
                    *(void**) (vfptr0 + 192) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 192);
                    *(void**) (vfptr0 + 196) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 196);
                    *(void**) (vfptr0 + 200) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 200);
                    *(void**) (vfptr0 + 204) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 204);
                    *(void**) (vfptr0 + 208) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 208);
                    *(void**) (vfptr0 + 212) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 212);
                    *(void**) (vfptr0 + 216) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 216);
                    *(void**) (vfptr0 + 220) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 220);
                    *(void**) (vfptr0 + 224) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 224);
                    *(void**) (vfptr0 + 228) = _Thunks[0];
                    *(void**) (vfptr0 + 232) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 232);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(61 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = _Thunks[8];
                    *(void**) (vfptr0 + 48) = _Thunks[9];
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = _Thunks[10];
                    *(void**) (vfptr0 + 76) = _Thunks[11];
                    *(void**) (vfptr0 + 80) = _Thunks[12];
                    *(void**) (vfptr0 + 84) = _Thunks[13];
                    *(void**) (vfptr0 + 88) = _Thunks[14];
                    *(void**) (vfptr0 + 92) = _Thunks[15];
                    *(void**) (vfptr0 + 96) = _Thunks[16];
                    *(void**) (vfptr0 + 100) = _Thunks[17];
                    *(void**) (vfptr0 + 104) = _Thunks[18];
                    *(void**) (vfptr0 + 108) = _Thunks[19];
                    *(void**) (vfptr0 + 112) = _Thunks[20];
                    *(void**) (vfptr0 + 116) = _Thunks[21];
                    *(void**) (vfptr0 + 120) = _Thunks[22];
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 128);
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = _Thunks[23];
                    *(void**) (vfptr0 + 144) = _Thunks[24];
                    *(void**) (vfptr0 + 148) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 148);
                    *(void**) (vfptr0 + 152) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 152);
                    *(void**) (vfptr0 + 156) = _Thunks[25];
                    *(void**) (vfptr0 + 160) = _Thunks[26];
                    *(void**) (vfptr0 + 164) = _Thunks[27];
                    *(void**) (vfptr0 + 168) = _Thunks[28];
                    *(void**) (vfptr0 + 172) = _Thunks[29];
                    *(void**) (vfptr0 + 176) = _Thunks[30];
                    *(void**) (vfptr0 + 180) = _Thunks[31];
                    *(void**) (vfptr0 + 184) = _Thunks[32];
                    *(void**) (vfptr0 + 188) = _Thunks[33];
                    *(void**) (vfptr0 + 192) = _Thunks[34];
                    *(void**) (vfptr0 + 196) = _Thunks[35];
                    *(void**) (vfptr0 + 200) = _Thunks[36];
                    *(void**) (vfptr0 + 204) = _Thunks[37];
                    *(void**) (vfptr0 + 208) = _Thunks[38];
                    *(void**) (vfptr0 + 212) = _Thunks[39];
                    *(void**) (vfptr0 + 216) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 216);
                    *(void**) (vfptr0 + 220) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 220);
                    *(void**) (vfptr0 + 224) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 224);
                    *(void**) (vfptr0 + 228) = _Thunks[0];
                    *(void**) (vfptr0 + 232) = _Thunks[24];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class App : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 348)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_first;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nextHandler;

            [FieldOffset(16)]
            internal global::System.IntPtr m_previousHandler;

            [FieldOffset(20)]
            internal global::System.IntPtr m_dynamicEvents;

            [FieldOffset(24)]
            internal global::System.IntPtr m_pendingEvents;

            [FieldOffset(28)]
            internal global::wxSharp.CriticalSection.__Internal m_pendingEventsLock;

            [FieldOffset(32)]
            internal byte m_enabled;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(40)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(44)]
            internal global::System.IntPtr vptr_wxEventFilter;

            [FieldOffset(48)]
            internal global::System.IntPtr m_next;

            [FieldOffset(52)]
            internal int argc;

            [FieldOffset(56)]
            internal global::wxSharp.CmdLineArgsArray.__Internal argv;

            [FieldOffset(84)]
            internal global::wxSharp.String.__Internal m_vendorName;

            [FieldOffset(104)]
            internal global::wxSharp.String.__Internal m_vendorDisplayName;

            [FieldOffset(124)]
            internal global::wxSharp.String.__Internal m_appName;

            [FieldOffset(144)]
            internal global::wxSharp.String.__Internal m_appDisplayName;

            [FieldOffset(164)]
            internal global::wxSharp.String.__Internal m_className;

            [FieldOffset(184)]
            internal global::System.IntPtr m_traits;

            [FieldOffset(188)]
            internal global::System.IntPtr m_mainLoop;

            [FieldOffset(192)]
            internal global::wxSharp.EvtHandlerArray.__Internal m_handlersWithPendingEvents;

            [FieldOffset(204)]
            internal global::wxSharp.EvtHandlerArray.__Internal m_handlersWithPendingDelayedEvents;

            [FieldOffset(216)]
            internal global::wxSharp.CriticalSection.__Internal m_handlersWithPendingEventsLocker;

            [FieldOffset(220)]
            internal byte m_bDoPendingEventProcessing;

            [FieldOffset(224)]
            internal uint m_signalsCaught;

            [FieldOffset(228)]
            internal global::wxSharp.AppConsole.SignalHandlerHash.__Internal m_signalHandlerHash;

            [FieldOffset(244)]
            internal global::System.IntPtr m_signalWakeUpPipe;

            [FieldOffset(248)]
            internal global::System.IntPtr m_topWindow;

            [FieldOffset(252)]
            internal global::wxSharp.App._0 m_exitOnFrameDelete;

            [FieldOffset(256)]
            internal byte m_useBestVisual;

            [FieldOffset(257)]
            internal byte m_forceTrueColour;

            [FieldOffset(258)]
            internal byte m_isActive;

            [FieldOffset(260)]
            internal int m_printMode;

            [FieldOffset(264)]
            internal global::System.IntPtr m_macPool;

            [FieldOffset(268)]
            internal int m_nCmdShow;

            [FieldOffset(272)]
            internal global::System.IntPtr m_macEventHandler;

            [FieldOffset(276)]
            internal global::System.IntPtr m_macCurrentEventHandlerCallRef;

            [FieldOffset(280)]
            internal global::System.IntPtr m_macCurrentEvent;

            [FieldOffset(284)]
            internal byte m_onInitResult;

            [FieldOffset(285)]
            internal byte m_inited;

            [FieldOffset(288)]
            internal global::wxSharp.ArrayString.__Internal m_openFiles;

            [FieldOffset(308)]
            internal global::wxSharp.ArrayString.__Internal m_printFiles;

            [FieldOffset(328)]
            internal global::wxSharp.String.__Internal m_getURL;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxAppC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp6OnIdleER11wxIdleEvent")]
            internal static extern void OnIdle(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp12OnEndSessionER12wxCloseEvent")]
            internal static extern void OnEndSession(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp17OnQueryEndSessionER12wxCloseEvent")]
            internal static extern void OnQueryEndSession(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxAppBase12SetTopWindowEP8wxWindow")]
            internal static extern void SetTopWindow(global::System.IntPtr __instance, global::System.IntPtr win);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxAppBase20SetExitOnFrameDeleteEb")]
            internal static extern void SetExitOnFrameDelete(global::System.IntPtr __instance, bool flag);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxAppBase20GetExitOnFrameDeleteEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetExitOnFrameDelete(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxAppBase16SetUseBestVisualEbb")]
            internal static extern void SetUseBestVisual(global::System.IntPtr __instance, bool flag, bool forceTrueColour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK9wxAppBase16GetUseBestVisualEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetUseBestVisual(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxAppBase13DeleteAllTLWsEv")]
            internal static extern void DeleteAllTLWs(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxAppConsole16SetSignalHandlerEiPFviE")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetSignalHandler(global::System.IntPtr __instance, int signal, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxAppConsole11CheckSignalEv")]
            internal static extern void CheckSignal(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase9GetTraitsEv")]
            internal static extern global::System.IntPtr GetTraits(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxAppConsoleBase11GetMainLoopEv")]
            internal static extern global::System.IntPtr GetMainLoop(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxAppConsoleBase16HasPendingEventsEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasPendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase32SuspendProcessingOfPendingEventsEv")]
            internal static extern void SuspendProcessingOfPendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase31ResumeProcessingOfPendingEventsEv")]
            internal static extern void ResumeProcessingOfPendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase25RemovePendingEventHandlerEP12wxEvtHandler")]
            internal static extern void RemovePendingEventHandler(global::System.IntPtr __instance, global::System.IntPtr toRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase25AppendPendingEventHandlerEP12wxEvtHandler")]
            internal static extern void AppendPendingEventHandler(global::System.IntPtr __instance, global::System.IntPtr toAppend);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase24DelayPendingEventHandlerEP12wxEvtHandler")]
            internal static extern void DelayPendingEventHandler(global::System.IntPtr __instance, global::System.IntPtr toDelay);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase19DeletePendingEventsEv")]
            internal static extern void DeletePendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase22ScheduleForDestructionEP8wxObject")]
            internal static extern void ScheduleForDestruction(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxAppConsoleBase25IsScheduledForDestructionEP8wxObject")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsScheduledForDestruction(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase5YieldEb")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Yield(global::System.IntPtr __instance, bool onlyIfNeeded);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase20DeletePendingObjectsEv")]
            internal static extern void DeletePendingObjects(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxAppConsoleBase14CreateMainLoopEv")]
            internal static extern global::System.IntPtr CreateMainLoop(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler14GetNextHandlerEv")]
            internal static extern global::System.IntPtr GetNextHandler(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler18GetPreviousHandlerEv")]
            internal static extern global::System.IntPtr GetPreviousHandler(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler20SetEvtHandlerEnabledEb")]
            internal static extern void SetEvtHandlerEnabled(global::System.IntPtr __instance, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler20GetEvtHandlerEnabledEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetEvtHandlerEnabled(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler6UnlinkEv")]
            internal static extern void Unlink(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler10IsUnlinkedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUnlinked(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18SafelyProcessEventER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SafelyProcessEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ProcessEventLocallyER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessEventLocally(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18ProcessThreadEventERK7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessThreadEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler13SetClientDataEPv")]
            internal static extern void SetClientData(global::System.IntPtr __instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler13GetClientDataEv")]
            internal static extern global::System.IntPtr GetClientData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler23SearchDynamicEventTableER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SearchDynamicEventTable(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ClearEventHashTableEv")]
            internal static extern void ClearEventHashTable(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler15OnSinkDestroyedEPS_")]
            internal static extern void OnSinkDestroyed(global::System.IntPtr __instance, global::System.IntPtr sink);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler11TryHereOnlyER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TryHereOnly(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler16TryBeforeAndHereER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TryBeforeAndHere(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxObject10GetRefDataEv")]
            internal static extern global::System.IntPtr GetRefData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject10SetRefDataEP12wxRefCounter")]
            internal static extern void SetRefData(global::System.IntPtr __instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject3RefERKS_")]
            internal static extern void Ref(global::System.IntPtr __instance, global::System.IntPtr clone);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject5UnRefEv")]
            internal static extern void UnRef(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject7UnShareEv")]
            internal static extern void UnShare(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxObject8IsSameAsERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSameAs(global::System.IntPtr __instance, global::System.IntPtr o);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxObject14AllocExclusiveEv")]
            internal static extern void AllocExclusive(global::System.IntPtr __instance);
        }

        public enum _0
        {
            Later = -1,
            No = 0,
            Yes = 1
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.App> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.App>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.App __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.App(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.App __CreateInstance(global::wxSharp.App.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.App(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.App.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.App.__Internal));
            *(global::wxSharp.App.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private App(global::wxSharp.App.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected App(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public App()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.App.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.App");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.App __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.App.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public virtual void WakeUpIdle()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 48 * 4);
            var ___WakeUpIdleDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___WakeUpIdleDelegate(__Instance);
        }

        public virtual void SetPrintMode(int mode)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 61 * 4);
            var ___SetPrintModeDelegate = (global::wxSharp.Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_int));
            ___SetPrintModeDelegate(__Instance, mode);
        }

        public virtual int GetPrintMode()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 65 * 4);
            var ___GetPrintModeDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___GetPrintModeDelegate(__Instance);
            return __ret;
        }

        public virtual bool CallOnInit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___CallOnInitDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___CallOnInitDelegate(__Instance);
            return __ret;
        }

        public virtual bool OnInitGui()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 54 * 4);
            var ___OnInitGuiDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___OnInitGuiDelegate(__Instance);
            return __ret;
        }

        public virtual int OnRun()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 23 * 4);
            var ___OnRunDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___OnRunDelegate(__Instance);
            return __ret;
        }

        public virtual bool ProcessIdle()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 49 * 4);
            var ___ProcessIdleDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___ProcessIdleDelegate(__Instance);
            return __ret;
        }

        public void OnIdle(global::wxSharp.IdleEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnIdle(__Instance, __arg0);
        }

        public void OnEndSession(global::wxSharp.CloseEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnEndSession(__Instance, __arg0);
        }

        public void OnQueryEndSession(global::wxSharp.CloseEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnQueryEndSession(__Instance, __arg0);
        }

        public virtual bool Initialize(ref int argc, char** argv)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___InitializeDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_intPtr_charPtrPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_intPtr_charPtrPtr));
            fixed (int* __argc0 = &argc)
            {
                var __arg0 = __argc0;
                var __ret = ___InitializeDelegate(__Instance, __arg0, argv);
                return __ret;
            }
        }

        public virtual void CleanUp()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 4);
            var ___CleanUpDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___CleanUpDelegate(__Instance);
        }

        public virtual int OnExit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 26 * 4);
            var ___OnExitDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___OnExitDelegate(__Instance);
            return __ret;
        }

        public virtual bool SafeYield(global::wxSharp.Window win, bool onlyIfNeeded)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 55 * 4);
            var ___SafeYieldDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_bool));
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            var __ret = ___SafeYieldDelegate(__Instance, __arg0, onlyIfNeeded);
            return __ret;
        }

        public virtual bool SafeYieldFor(global::wxSharp.Window win, int eventsToProcess)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 56 * 4);
            var ___SafeYieldForDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int));
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            var __ret = ___SafeYieldForDelegate(__Instance, __arg0, eventsToProcess);
            return __ret;
        }

        public virtual bool UsesEventLoop()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 50 * 4);
            var ___UsesEventLoopDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___UsesEventLoopDelegate(__Instance);
            return __ret;
        }

        public virtual bool IsActive()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 57 * 4);
            var ___IsActiveDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___IsActiveDelegate(__Instance);
            return __ret;
        }

        public void SetTopWindow(global::wxSharp.Window win)
        {
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.SetTopWindow(__Instance, __arg0);
        }

        public virtual global::wxSharp.Window GetTopWindow()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 58 * 4);
            var ___GetTopWindowDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetTopWindowDelegate(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public void SetExitOnFrameDelete(bool flag)
        {
            __Internal.SetExitOnFrameDelete(__Instance, flag);
        }

        public bool GetExitOnFrameDelete()
        {
            var __ret = __Internal.GetExitOnFrameDelete(__Instance);
            return __ret;
        }

        public void SetUseBestVisual(bool flag, bool forceTrueColour)
        {
            __Internal.SetUseBestVisual(__Instance, flag, forceTrueColour);
        }

        public bool GetUseBestVisual()
        {
            var __ret = __Internal.GetUseBestVisual(__Instance);
            return __ret;
        }

        public virtual void SetActive(bool isActive, global::wxSharp.Window lastFocus)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 64 * 4);
            var ___SetActiveDelegate = (global::wxSharp.Delegates.Action_IntPtr_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_bool_IntPtr));
            var __arg1 = ReferenceEquals(lastFocus, null) ? global::System.IntPtr.Zero : lastFocus.__Instance;
            ___SetActiveDelegate(__Instance, isActive, __arg1);
        }

        protected virtual global::wxSharp.AppTraits CreateTraits()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 53 * 4);
            var ___CreateTraitsDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CreateTraitsDelegate(__Instance);
            global::wxSharp.AppTraits __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.AppTraits.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.AppTraits) global::wxSharp.AppTraits.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.AppTraits.__CreateInstance(__ret);
            return __result0;
        }

        protected void DeleteAllTLWs()
        {
            __Internal.DeleteAllTLWs(__Instance);
        }

        public bool SetSignalHandler(int signal, global::wxSharp.AppConsole.SignalHandler handler)
        {
            var __arg1 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            var __ret = __Internal.SetSignalHandler(__Instance, signal, __arg1);
            return __ret;
        }

        public void CheckSignal()
        {
            __Internal.CheckSignal(__Instance);
        }

        public virtual bool OnInit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 4);
            var ___OnInitDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___OnInitDelegate(__Instance);
            return __ret;
        }

        public virtual void OnLaunched()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 24 * 4);
            var ___OnLaunchedDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___OnLaunchedDelegate(__Instance);
        }

        public virtual void OnEventLoopEnter(global::wxSharp.EventLoopBase _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 4);
            var ___OnEventLoopEnterDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            ___OnEventLoopEnterDelegate(__Instance, __arg0);
        }

        public virtual void OnEventLoopExit(global::wxSharp.EventLoopBase _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 4);
            var ___OnEventLoopExitDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            ___OnEventLoopExitDelegate(__Instance, __arg0);
        }

        public virtual void OnFatalException()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 29 * 4);
            var ___OnFatalExceptionDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___OnFatalExceptionDelegate(__Instance);
        }

        public virtual void Exit()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 30 * 4);
            var ___ExitDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___ExitDelegate(__Instance);
        }

        public global::wxSharp.AppTraits GetTraits()
        {
            var __ret = __Internal.GetTraits(__Instance);
            global::wxSharp.AppTraits __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.AppTraits.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.AppTraits) global::wxSharp.AppTraits.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.AppTraits.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.EventLoopBase GetMainLoop()
        {
            var __ret = __Internal.GetMainLoop(__Instance);
            global::wxSharp.EventLoopBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void SetCLocale()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 35 * 4);
            var ___SetCLocaleDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___SetCLocaleDelegate(__Instance);
        }

        public virtual int FilterEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 36 * 4);
            var ___FilterEventDelegate = (global::wxSharp.Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___FilterEventDelegate(__Instance, __arg0);
            return __ret;
        }

        public virtual void OnUnhandledException()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 39 * 4);
            var ___OnUnhandledExceptionDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___OnUnhandledExceptionDelegate(__Instance);
        }

        public virtual bool OnExceptionInMainLoop()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 40 * 4);
            var ___OnExceptionInMainLoopDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___OnExceptionInMainLoopDelegate(__Instance);
            return __ret;
        }

        public virtual bool StoreCurrentException()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 41 * 4);
            var ___StoreCurrentExceptionDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___StoreCurrentExceptionDelegate(__Instance);
            return __ret;
        }

        public virtual void RethrowStoredException()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 42 * 4);
            var ___RethrowStoredExceptionDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___RethrowStoredExceptionDelegate(__Instance);
        }

        public virtual void ProcessPendingEvents()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 43 * 4);
            var ___ProcessPendingEventsDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___ProcessPendingEventsDelegate(__Instance);
        }

        public bool HasPendingEvents()
        {
            var __ret = __Internal.HasPendingEvents(__Instance);
            return __ret;
        }

        public void SuspendProcessingOfPendingEvents()
        {
            __Internal.SuspendProcessingOfPendingEvents(__Instance);
        }

        public void ResumeProcessingOfPendingEvents()
        {
            __Internal.ResumeProcessingOfPendingEvents(__Instance);
        }

        public void RemovePendingEventHandler(global::wxSharp.IwxEvtHandler toRemove)
        {
            var __arg0 = ReferenceEquals(toRemove, null) ? global::System.IntPtr.Zero : toRemove.__PointerToEvtHandler;
            __Internal.RemovePendingEventHandler(__Instance, __arg0);
        }

        public void AppendPendingEventHandler(global::wxSharp.IwxEvtHandler toAppend)
        {
            var __arg0 = ReferenceEquals(toAppend, null) ? global::System.IntPtr.Zero : toAppend.__PointerToEvtHandler;
            __Internal.AppendPendingEventHandler(__Instance, __arg0);
        }

        public void DelayPendingEventHandler(global::wxSharp.IwxEvtHandler toDelay)
        {
            var __arg0 = ReferenceEquals(toDelay, null) ? global::System.IntPtr.Zero : toDelay.__PointerToEvtHandler;
            __Internal.DelayPendingEventHandler(__Instance, __arg0);
        }

        public void DeletePendingEvents()
        {
            __Internal.DeletePendingEvents(__Instance);
        }

        public void ScheduleForDestruction(global::wxSharp.IwxObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__PointerToObject;
            __Internal.ScheduleForDestruction(__Instance, __arg0);
        }

        public bool IsScheduledForDestruction(global::wxSharp.IwxObject @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__PointerToObject;
            var __ret = __Internal.IsScheduledForDestruction(__Instance, __arg0);
            return __ret;
        }

        public virtual bool Pending()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 44 * 4);
            var ___PendingDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___PendingDelegate(__Instance);
            return __ret;
        }

        public virtual bool Dispatch()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 45 * 4);
            var ___DispatchDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___DispatchDelegate(__Instance);
            return __ret;
        }

        public virtual int MainLoop()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 46 * 4);
            var ___MainLoopDelegate = (global::wxSharp.Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_int_IntPtr));
            var __ret = ___MainLoopDelegate(__Instance);
            return __ret;
        }

        public virtual void ExitMainLoop()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 47 * 4);
            var ___ExitMainLoopDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___ExitMainLoopDelegate(__Instance);
        }

        public bool Yield(bool onlyIfNeeded)
        {
            var __ret = __Internal.Yield(__Instance, onlyIfNeeded);
            return __ret;
        }

        public virtual void OnAssertFailure(string file, int line, string func, string cond, string msg)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 51 * 4);
            var ___OnAssertFailureDelegate = (global::wxSharp.Delegates.Action_IntPtr_string_int_string_string_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_string_int_string_string_string));
            ___OnAssertFailureDelegate(__Instance, file, line, func, cond, msg);
        }

        public virtual void OnAssert(string file, int line, string cond, string msg)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 52 * 4);
            var ___OnAssertDelegate = (global::wxSharp.Delegates.Action_IntPtr_string_int_string_string) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_string_int_string_string));
            ___OnAssertDelegate(__Instance, file, line, cond, msg);
        }

        protected void DeletePendingObjects()
        {
            __Internal.DeletePendingObjects(__Instance);
        }

        protected global::wxSharp.EventLoopBase CreateMainLoop()
        {
            var __ret = __Internal.CreateMainLoop(__Instance);
            global::wxSharp.EventLoopBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.IwxEvtHandler GetNextHandler()
        {
            var __ret = __Internal.GetNextHandler(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.IwxEvtHandler GetPreviousHandler()
        {
            var __ret = __Internal.GetPreviousHandler(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void SetNextHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___SetNextHandlerDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            ___SetNextHandlerDelegate(__Instance, __arg0);
        }

        public virtual void SetPreviousHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___SetPreviousHandlerDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            ___SetPreviousHandlerDelegate(__Instance, __arg0);
        }

        public void SetEvtHandlerEnabled(bool enabled)
        {
            __Internal.SetEvtHandlerEnabled(__Instance, enabled);
        }

        public bool GetEvtHandlerEnabled()
        {
            var __ret = __Internal.GetEvtHandlerEnabled(__Instance);
            return __ret;
        }

        public void Unlink()
        {
            __Internal.Unlink(__Instance);
        }

        public bool IsUnlinked()
        {
            var __ret = __Internal.IsUnlinked(__Instance);
            return __ret;
        }

        public virtual bool ProcessEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___ProcessEventDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___ProcessEventDelegate(__Instance, __arg0);
            return __ret;
        }

        public bool SafelyProcessEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.SafelyProcessEvent(__Instance, __arg0);
            return __ret;
        }

        public bool ProcessEventLocally(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessEventLocally(__Instance, __arg0);
            return __ret;
        }

        public virtual void QueueEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___QueueEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            ___QueueEventDelegate(__Instance, __arg0);
        }

        public virtual void AddPendingEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___AddPendingEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            ___AddPendingEventDelegate(__Instance, __arg0);
        }

        public bool ProcessThreadEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessThreadEvent(__Instance, __arg0);
            return __ret;
        }

        public void SetClientData(global::System.IntPtr data)
        {
            __Internal.SetClientData(__Instance, data);
        }

        public global::System.IntPtr GetClientData()
        {
            var __ret = __Internal.GetClientData(__Instance);
            return __ret;
        }

        public bool SearchDynamicEventTable(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.SearchDynamicEventTable(__Instance, __arg0);
            return __ret;
        }

        public void ClearEventHashTable()
        {
            __Internal.ClearEventHashTable(__Instance);
        }

        public void OnSinkDestroyed(global::wxSharp.IwxEvtHandler sink)
        {
            var __arg0 = ReferenceEquals(sink, null) ? global::System.IntPtr.Zero : sink.__PointerToEvtHandler;
            __Internal.OnSinkDestroyed(__Instance, __arg0);
        }

        protected bool TryHereOnly(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.TryHereOnly(__Instance, __arg0);
            return __ret;
        }

        protected bool TryBeforeAndHere(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.TryBeforeAndHere(__Instance, __arg0);
            return __ret;
        }

        protected virtual bool TryAfter(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___TryAfterDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___TryAfterDelegate(__Instance, __arg0);
            return __ret;
        }

        protected virtual void DoSetClientData(global::System.IntPtr data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___DoSetClientDataDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            ___DoSetClientDataDelegate(__Instance, data);
        }

        protected virtual global::System.IntPtr DoGetClientData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___DoGetClientDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___DoGetClientDataDelegate(__Instance);
            return __ret;
        }

        public global::wxSharp.RefCounter GetRefData()
        {
            var __ret = __Internal.GetRefData(__Instance);
            global::wxSharp.RefCounter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[__ret];
            else global::wxSharp.RefCounter.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(__ret);
            return __result0;
        }

        public void SetRefData(global::wxSharp.RefCounter data)
        {
            var __arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            __Internal.SetRefData(__Instance, __arg0);
        }

        public void Ref(global::wxSharp.IwxObject clone)
        {
            if (ReferenceEquals(clone, null))
                throw new global::System.ArgumentNullException("clone", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = clone.__PointerToObject;
            __Internal.Ref(__Instance, __arg0);
        }

        public void UnRef()
        {
            __Internal.UnRef(__Instance);
        }

        public void UnShare()
        {
            __Internal.UnShare(__Instance);
        }

        public bool IsSameAs(global::wxSharp.IwxObject o)
        {
            if (ReferenceEquals(o, null))
                throw new global::System.ArgumentNullException("o", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = o.__PointerToObject;
            var __ret = __Internal.IsSameAs(__Instance, __arg0);
            return __ret;
        }

        protected void AllocExclusive()
        {
            __Internal.AllocExclusive(__Instance);
        }

        protected virtual global::wxSharp.RefCounter CreateRefData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___CreateRefDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CreateRefDataDelegate(__Instance);
            global::wxSharp.RefCounter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[__ret];
            else global::wxSharp.RefCounter.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual global::wxSharp.RefCounter CloneRefData(global::wxSharp.RefCounter data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___CloneRefDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            var __ret = ___CloneRefDataDelegate(__Instance, __arg0);
            global::wxSharp.RefCounter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[__ret];
            else global::wxSharp.RefCounter.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public static bool sm_isEmbedded
        {
            get
            {
                var __ptr = (bool*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp13sm_isEmbeddedE");
                return *__ptr;
            }

            set
            {
                var __ptr = (bool*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp13sm_isEmbeddedE");
                *__ptr = value;
            }
        }

        public static global::wxSharp.Window s_captureWindow
        {
            get
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp15s_captureWindowE");
                global::wxSharp.Window __result0;
                if (*__ptr == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(*__ptr))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[*__ptr];
                else global::wxSharp.Window.NativeToManagedMap[*__ptr] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(*__ptr);
                return __result0;
            }

            set
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp15s_captureWindowE");
                *__ptr = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public static int s_lastModifiers
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp15s_lastModifiersE");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp15s_lastModifiersE");
                *__ptr = value;
            }
        }

        public static int s_macAboutMenuItemId
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp20s_macAboutMenuItemIdE");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp20s_macAboutMenuItemIdE");
                *__ptr = value;
            }
        }

        public static int s_macPreferencesMenuItemId
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp26s_macPreferencesMenuItemIdE");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp26s_macPreferencesMenuItemIdE");
                *__ptr = value;
            }
        }

        public static int s_macExitMenuItemId
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp19s_macExitMenuItemIdE");
                return *__ptr;
            }

            set
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp19s_macExitMenuItemIdE");
                *__ptr = value;
            }
        }

        protected global::wxSharp.Window m_topWindow
        {
            get
            {
                global::wxSharp.Window __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_topWindow == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_topWindow))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_topWindow];
                else global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_topWindow] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_topWindow);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_topWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.App._0 m_exitOnFrameDelete
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->m_exitOnFrameDelete;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_exitOnFrameDelete = value;
            }
        }

        protected bool m_useBestVisual
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->m_useBestVisual != 0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_useBestVisual = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_forceTrueColour
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->m_forceTrueColour != 0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_forceTrueColour = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_isActive
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->m_isActive != 0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_isActive = (byte) (value ? 1 : 0);
            }
        }

        protected int m_printMode
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->m_printMode;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_printMode = value;
            }
        }

        protected global::wxSharp.MacAutoreleasePool m_macPool
        {
            get
            {
                global::wxSharp.MacAutoreleasePool __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_macPool == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.MacAutoreleasePool.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_macPool))
                    __result0 = (global::wxSharp.MacAutoreleasePool) global::wxSharp.MacAutoreleasePool.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_macPool];
                else __result0 = global::wxSharp.MacAutoreleasePool.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_macPool);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_macPool = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int m_nCmdShow
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->m_nCmdShow;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_nCmdShow = value;
            }
        }

        public int argc
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->argc;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->argc = value;
            }
        }

        protected global::wxSharp.AppTraits m_traits
        {
            get
            {
                global::wxSharp.AppTraits __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_traits == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.AppTraits.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_traits))
                    __result0 = (global::wxSharp.AppTraits) global::wxSharp.AppTraits.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_traits];
                else __result0 = global::wxSharp.AppTraits.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_traits);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_traits = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.EventLoopBase m_mainLoop
        {
            get
            {
                global::wxSharp.EventLoopBase __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_mainLoop == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_mainLoop))
                    __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_mainLoop];
                else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_mainLoop);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_mainLoop = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_bDoPendingEventProcessing
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->m_bDoPendingEventProcessing != 0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_bDoPendingEventProcessing = (byte) (value ? 1 : 0);
            }
        }

        public global::System.IntPtr __PointerTowxAppConsole
        {
            get
            {
                return __Instance + 0;
            }
        }

        public global::System.IntPtr __PointerTowxAppConsoleBase
        {
            get
            {
                return __Instance + 0;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_nextHandler
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_nextHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_previousHandler
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_previousHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_enabled
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->m_enabled != 0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_enabled = (byte) (value ? 1 : 0);
            }
        }

        public global::System.IntPtr __PointerTowxEvtHandler
        {
            get
            {
                return __Instance + 0;
            }
        }

        protected global::wxSharp.RefCounter m_refData
        {
            get
            {
                global::wxSharp.RefCounter __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_refData == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_refData))
                    __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_refData];
                else global::wxSharp.RefCounter.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_refData] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_refData);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_refData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr __PointerTowxObject
        {
            get
            {
                return __Instance + 0;
            }
        }

        public global::System.IntPtr __PointerTowxTrackable
        {
            get
            {
                return __Instance + 8;
            }
        }

        public global::System.IntPtr __PointerTowxEventFilter
        {
            get
            {
                return __Instance + 44;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_nextHandler1
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_nextHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_nextHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_previousHandler1
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_previousHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_previousHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_enabled1
        {
            get
            {
                return ((global::wxSharp.App.__Internal*) __Instance)->m_enabled != 0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_enabled = (byte) (value ? 1 : 0);
            }
        }

        public global::System.IntPtr __PointerTowxEvtHandler
        {
            get
            {
                return __Instance + 0;
            }
        }

        protected global::wxSharp.RefCounter m_refData1
        {
            get
            {
                global::wxSharp.RefCounter __result0;
                if (((global::wxSharp.App.__Internal*) __Instance)->m_refData == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(((global::wxSharp.App.__Internal*) __Instance)->m_refData))
                    __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_refData];
                else global::wxSharp.RefCounter.NativeToManagedMap[((global::wxSharp.App.__Internal*) __Instance)->m_refData] = __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(((global::wxSharp.App.__Internal*) __Instance)->m_refData);
                return __result0;
            }

            set
            {
                ((global::wxSharp.App.__Internal*)__Instance)->m_refData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::System.IntPtr __PointerTowxObject
        {
            get
            {
                return __Instance + 0;
            }
        }

        public global::System.IntPtr __PointerTowxTrackable
        {
            get
            {
                return __Instance + 8;
            }
        }

        public global::System.IntPtr __PointerTowxEventFilter
        {
            get
            {
                return __Instance + 44;
            }
        }

        #region Virtual table interop

        // virtual ~wxApp()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetNextHandler(wxEvtHandler *handler) { m_nextHandler = handler; }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetNextHandlerDelegateInstance;

        private static void _SetNextHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetNextHandler(__result0);
        }

        // void SetPreviousHandler(wxEvtHandler *handler) { m_previousHandler = handler; }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetPreviousHandlerDelegateInstance;

        private static void _SetPreviousHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetPreviousHandler(__result0);
        }

        // bool ProcessEvent(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _ProcessEventDelegateInstance;

        private static bool _ProcessEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.ProcessEvent(__result0);
        }

        // void QueueEvent(wxEvent *event)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _QueueEventDelegateInstance;

        private static void _QueueEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.QueueEvent(__result0);
        }

        // void AddPendingEvent(const wxEvent& event) { // notice that the thread-safety problem comes from the fact that // Clone() doesn't make deep copies of wxString fields of wxEvent // object and so the same wxString could be used from both threads when // the event object is destroyed in this one -- QueueEvent() avoids // this problem as the event pointer is not used any more in this // thread at all after it is called. QueueEvent(event.Clone()); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AddPendingEventDelegateInstance;

        private static void _AddPendingEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.AddPendingEvent(__result0);
        }

        // bool TryBefore(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryBeforeDelegateInstance;

        private static bool _TryBeforeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryBefore(__result0);
        }

        // bool TryAfter(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryAfterDelegateInstance;

        private static bool _TryAfterDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryAfter(__result0);
        }

        // void DoSetClientData( void *data )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoSetClientDataDelegateInstance;

        private static void _DoSetClientDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        // bool Initialize(int& argc, wxChar **argv) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_intPtr_charPtrPtr _InitializeDelegateInstance;

        private static bool _InitializeDelegateHook(global::System.IntPtr __instance, int* argc, char** argv)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Initialize(ref *argc, argv);
        }

        // bool CallOnInit() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CallOnInitDelegateInstance;

        private static bool _CallOnInitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CallOnInit();
        }

        // bool OnInit()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _OnInitDelegateInstance;

        private static bool _OnInitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.OnInit();
        }

        // int OnRun() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr _OnRunDelegateInstance;

        private static int _OnRunDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.OnRun();
        }

        // void OnLaunched()
        private static global::wxSharp.Delegates.Action_IntPtr _OnLaunchedDelegateInstance;

        private static void _OnLaunchedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnLaunched();
        }

        // void OnEventLoopEnter(wxEventLoopBase* WXUNUSED(loop)) {}
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _OnEventLoopEnterDelegateInstance;

        private static void _OnEventLoopEnterDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.EventLoopBase __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[_0];
            else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(_0);
            __target.OnEventLoopEnter(__result0);
        }

        // int OnExit() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr _OnExitDelegateInstance;

        private static int _OnExitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.OnExit();
        }

        // void OnEventLoopExit(wxEventLoopBase* WXUNUSED(loop)) {}
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _OnEventLoopExitDelegateInstance;

        private static void _OnEventLoopExitDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.EventLoopBase __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EventLoopBase.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.EventLoopBase) global::wxSharp.EventLoopBase.NativeToManagedMap[_0];
            else __result0 = global::wxSharp.EventLoopBase.__CreateInstance(_0);
            __target.OnEventLoopExit(__result0);
        }

        // void CleanUp() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _CleanUpDelegateInstance;

        private static void _CleanUpDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.CleanUp();
        }

        // void OnFatalException() { }
        private static global::wxSharp.Delegates.Action_IntPtr _OnFatalExceptionDelegateInstance;

        private static void _OnFatalExceptionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnFatalException();
        }

        // void Exit()
        private static global::wxSharp.Delegates.Action_IntPtr _ExitDelegateInstance;

        private static void _ExitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Exit();
        }

        // void SetCLocale()
        private static global::wxSharp.Delegates.Action_IntPtr _SetCLocaleDelegateInstance;

        private static void _SetCLocaleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetCLocale();
        }

        // int FilterEvent(wxEvent& event) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_IntPtr _FilterEventDelegateInstance;

        private static int _FilterEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.FilterEvent(__result0);
        }

        // void OnUnhandledException()
        private static global::wxSharp.Delegates.Action_IntPtr _OnUnhandledExceptionDelegateInstance;

        private static void _OnUnhandledExceptionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnUnhandledException();
        }

        // bool OnExceptionInMainLoop()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _OnExceptionInMainLoopDelegateInstance;

        private static bool _OnExceptionInMainLoopDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.OnExceptionInMainLoop();
        }

        // bool StoreCurrentException()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _StoreCurrentExceptionDelegateInstance;

        private static bool _StoreCurrentExceptionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.StoreCurrentException();
        }

        // void RethrowStoredException()
        private static global::wxSharp.Delegates.Action_IntPtr _RethrowStoredExceptionDelegateInstance;

        private static void _RethrowStoredExceptionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RethrowStoredException();
        }

        // void ProcessPendingEvents()
        private static global::wxSharp.Delegates.Action_IntPtr _ProcessPendingEventsDelegateInstance;

        private static void _ProcessPendingEventsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ProcessPendingEvents();
        }

        // bool Pending()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _PendingDelegateInstance;

        private static bool _PendingDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Pending();
        }

        // bool Dispatch()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _DispatchDelegateInstance;

        private static bool _DispatchDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Dispatch();
        }

        // int MainLoop()
        private static global::wxSharp.Delegates.Func_int_IntPtr _MainLoopDelegateInstance;

        private static int _MainLoopDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.MainLoop();
        }

        // void ExitMainLoop()
        private static global::wxSharp.Delegates.Action_IntPtr _ExitMainLoopDelegateInstance;

        private static void _ExitMainLoopDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ExitMainLoop();
        }

        // void WakeUpIdle() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _WakeUpIdleDelegateInstance;

        private static void _WakeUpIdleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.WakeUpIdle();
        }

        // bool ProcessIdle() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _ProcessIdleDelegateInstance;

        private static bool _ProcessIdleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ProcessIdle();
        }

        // bool UsesEventLoop() const wxOVERRIDE { return true; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _UsesEventLoopDelegateInstance;

        private static bool _UsesEventLoopDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.UsesEventLoop();
        }

        // void OnAssertFailure(const wxChar *file, int line, const wxChar *func, const wxChar *cond, const wxChar *msg)
        private static global::wxSharp.Delegates.Action_IntPtr_string_int_string_string_string _OnAssertFailureDelegateInstance;

        private static void _OnAssertFailureDelegateHook(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string file, int line, [MarshalAs(UnmanagedType.LPUTF8Str)] string func, [MarshalAs(UnmanagedType.LPUTF8Str)] string cond, [MarshalAs(UnmanagedType.LPUTF8Str)] string msg)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnAssertFailure(file, line, func, cond, msg);
        }

        // void OnAssert(const wxChar *file, int line, const wxChar *cond, const wxChar *msg)
        private static global::wxSharp.Delegates.Action_IntPtr_string_int_string_string _OnAssertDelegateInstance;

        private static void _OnAssertDelegateHook(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string file, int line, [MarshalAs(UnmanagedType.LPUTF8Str)] string cond, [MarshalAs(UnmanagedType.LPUTF8Str)] string msg)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnAssert(file, line, cond, msg);
        }

        // wxAppTraits *CreateTraits() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateTraitsDelegateInstance;

        private static global::System.IntPtr _CreateTraitsDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateTraits();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool OnInitGui() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _OnInitGuiDelegateInstance;

        private static bool _OnInitGuiDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.OnInitGui();
        }

        // bool SafeYield(wxWindow *win, bool onlyIfNeeded)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_bool _SafeYieldDelegateInstance;

        private static bool _SafeYieldDelegateHook(global::System.IntPtr __instance, global::System.IntPtr win, bool onlyIfNeeded)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (win == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(win))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[win];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(win, skipVTables: true);
            return __target.SafeYield(__result0, onlyIfNeeded);
        }

        // bool SafeYieldFor(wxWindow *win, long eventsToProcess)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int _SafeYieldForDelegateInstance;

        private static bool _SafeYieldForDelegateHook(global::System.IntPtr __instance, global::System.IntPtr win, int eventsToProcess)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (win == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(win))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[win];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(win, skipVTables: true);
            return __target.SafeYieldFor(__result0, eventsToProcess);
        }

        // bool IsActive() const { return m_isActive; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsActiveDelegateInstance;

        private static bool _IsActiveDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsActive();
        }

        // wxWindow *GetTopWindow() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetTopWindowDelegateInstance;

        private static global::System.IntPtr _GetTopWindowDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetTopWindow();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetPrintMode(int mode) wxOVERRIDE { m_printMode = mode; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetPrintModeDelegateInstance;

        private static void _SetPrintModeDelegateHook(global::System.IntPtr __instance, int mode)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetPrintMode(mode);
        }

        // void SetActive(bool isActive, wxWindow *lastFocus)
        private static global::wxSharp.Delegates.Action_IntPtr_bool_IntPtr _SetActiveDelegateInstance;

        private static void _SetActiveDelegateHook(global::System.IntPtr __instance, bool isActive, global::System.IntPtr lastFocus)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result1;
            if (lastFocus == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(lastFocus))
                __result1 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[lastFocus];
            else __result1 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(lastFocus, skipVTables: true);
            __target.SetActive(isActive, __result1);
        }

        // int GetPrintMode() const { return m_printMode; }
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetPrintModeDelegateInstance;

        private static int _GetPrintModeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.App) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetPrintMode();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[48];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _SetNextHandlerDelegateInstance += _SetNextHandlerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetNextHandlerDelegateInstance).ToPointer();
                _SetPreviousHandlerDelegateInstance += _SetPreviousHandlerDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_SetPreviousHandlerDelegateInstance).ToPointer();
                _ProcessEventDelegateInstance += _ProcessEventDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_ProcessEventDelegateInstance).ToPointer();
                _QueueEventDelegateInstance += _QueueEventDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_QueueEventDelegateInstance).ToPointer();
                _AddPendingEventDelegateInstance += _AddPendingEventDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_AddPendingEventDelegateInstance).ToPointer();
                _TryBeforeDelegateInstance += _TryBeforeDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_TryBeforeDelegateInstance).ToPointer();
                _TryAfterDelegateInstance += _TryAfterDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_TryAfterDelegateInstance).ToPointer();
                _DoSetClientDataDelegateInstance += _DoSetClientDataDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_DoSetClientDataDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
                _InitializeDelegateInstance += _InitializeDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_InitializeDelegateInstance).ToPointer();
                _CallOnInitDelegateInstance += _CallOnInitDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_CallOnInitDelegateInstance).ToPointer();
                _OnInitDelegateInstance += _OnInitDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_OnInitDelegateInstance).ToPointer();
                _OnRunDelegateInstance += _OnRunDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_OnRunDelegateInstance).ToPointer();
                _OnLaunchedDelegateInstance += _OnLaunchedDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_OnLaunchedDelegateInstance).ToPointer();
                _OnEventLoopEnterDelegateInstance += _OnEventLoopEnterDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_OnEventLoopEnterDelegateInstance).ToPointer();
                _OnExitDelegateInstance += _OnExitDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_OnExitDelegateInstance).ToPointer();
                _OnEventLoopExitDelegateInstance += _OnEventLoopExitDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_OnEventLoopExitDelegateInstance).ToPointer();
                _CleanUpDelegateInstance += _CleanUpDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_CleanUpDelegateInstance).ToPointer();
                _OnFatalExceptionDelegateInstance += _OnFatalExceptionDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_OnFatalExceptionDelegateInstance).ToPointer();
                _ExitDelegateInstance += _ExitDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_ExitDelegateInstance).ToPointer();
                _SetCLocaleDelegateInstance += _SetCLocaleDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_SetCLocaleDelegateInstance).ToPointer();
                _FilterEventDelegateInstance += _FilterEventDelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_FilterEventDelegateInstance).ToPointer();
                _OnUnhandledExceptionDelegateInstance += _OnUnhandledExceptionDelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_OnUnhandledExceptionDelegateInstance).ToPointer();
                _OnExceptionInMainLoopDelegateInstance += _OnExceptionInMainLoopDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_OnExceptionInMainLoopDelegateInstance).ToPointer();
                _StoreCurrentExceptionDelegateInstance += _StoreCurrentExceptionDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_StoreCurrentExceptionDelegateInstance).ToPointer();
                _RethrowStoredExceptionDelegateInstance += _RethrowStoredExceptionDelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_RethrowStoredExceptionDelegateInstance).ToPointer();
                _ProcessPendingEventsDelegateInstance += _ProcessPendingEventsDelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_ProcessPendingEventsDelegateInstance).ToPointer();
                _PendingDelegateInstance += _PendingDelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_PendingDelegateInstance).ToPointer();
                _DispatchDelegateInstance += _DispatchDelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_DispatchDelegateInstance).ToPointer();
                _MainLoopDelegateInstance += _MainLoopDelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_MainLoopDelegateInstance).ToPointer();
                _ExitMainLoopDelegateInstance += _ExitMainLoopDelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_ExitMainLoopDelegateInstance).ToPointer();
                _WakeUpIdleDelegateInstance += _WakeUpIdleDelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_WakeUpIdleDelegateInstance).ToPointer();
                _ProcessIdleDelegateInstance += _ProcessIdleDelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_ProcessIdleDelegateInstance).ToPointer();
                _UsesEventLoopDelegateInstance += _UsesEventLoopDelegateHook;
                _Thunks[36] = Marshal.GetFunctionPointerForDelegate(_UsesEventLoopDelegateInstance).ToPointer();
                _OnAssertFailureDelegateInstance += _OnAssertFailureDelegateHook;
                _Thunks[37] = Marshal.GetFunctionPointerForDelegate(_OnAssertFailureDelegateInstance).ToPointer();
                _OnAssertDelegateInstance += _OnAssertDelegateHook;
                _Thunks[38] = Marshal.GetFunctionPointerForDelegate(_OnAssertDelegateInstance).ToPointer();
                _CreateTraitsDelegateInstance += _CreateTraitsDelegateHook;
                _Thunks[39] = Marshal.GetFunctionPointerForDelegate(_CreateTraitsDelegateInstance).ToPointer();
                _OnInitGuiDelegateInstance += _OnInitGuiDelegateHook;
                _Thunks[40] = Marshal.GetFunctionPointerForDelegate(_OnInitGuiDelegateInstance).ToPointer();
                _SafeYieldDelegateInstance += _SafeYieldDelegateHook;
                _Thunks[41] = Marshal.GetFunctionPointerForDelegate(_SafeYieldDelegateInstance).ToPointer();
                _SafeYieldForDelegateInstance += _SafeYieldForDelegateHook;
                _Thunks[42] = Marshal.GetFunctionPointerForDelegate(_SafeYieldForDelegateInstance).ToPointer();
                _IsActiveDelegateInstance += _IsActiveDelegateHook;
                _Thunks[43] = Marshal.GetFunctionPointerForDelegate(_IsActiveDelegateInstance).ToPointer();
                _GetTopWindowDelegateInstance += _GetTopWindowDelegateHook;
                _Thunks[44] = Marshal.GetFunctionPointerForDelegate(_GetTopWindowDelegateInstance).ToPointer();
                _SetPrintModeDelegateInstance += _SetPrintModeDelegateHook;
                _Thunks[45] = Marshal.GetFunctionPointerForDelegate(_SetPrintModeDelegateInstance).ToPointer();
                _SetActiveDelegateInstance += _SetActiveDelegateHook;
                _Thunks[46] = Marshal.GetFunctionPointerForDelegate(_SetActiveDelegateInstance).ToPointer();
                _GetPrintModeDelegateInstance += _GetPrintModeDelegateHook;
                _Thunks[47] = Marshal.GetFunctionPointerForDelegate(_GetPrintModeDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(89 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 128);
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                    *(void**) (vfptr0 + 148) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 148);
                    *(void**) (vfptr0 + 152) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 152);
                    *(void**) (vfptr0 + 156) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 156);
                    *(void**) (vfptr0 + 160) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 160);
                    *(void**) (vfptr0 + 164) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 164);
                    *(void**) (vfptr0 + 168) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 168);
                    *(void**) (vfptr0 + 172) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 172);
                    *(void**) (vfptr0 + 176) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 176);
                    *(void**) (vfptr0 + 180) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 180);
                    *(void**) (vfptr0 + 184) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 184);
                    *(void**) (vfptr0 + 188) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 188);
                    *(void**) (vfptr0 + 192) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 192);
                    *(void**) (vfptr0 + 196) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 196);
                    *(void**) (vfptr0 + 200) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 200);
                    *(void**) (vfptr0 + 204) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 204);
                    *(void**) (vfptr0 + 208) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 208);
                    *(void**) (vfptr0 + 212) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 212);
                    *(void**) (vfptr0 + 216) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 216);
                    *(void**) (vfptr0 + 220) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 220);
                    *(void**) (vfptr0 + 224) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 224);
                    *(void**) (vfptr0 + 228) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 228);
                    *(void**) (vfptr0 + 232) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 232);
                    *(void**) (vfptr0 + 236) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 236);
                    *(void**) (vfptr0 + 240) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 240);
                    *(void**) (vfptr0 + 244) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 244);
                    *(void**) (vfptr0 + 248) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 248);
                    *(void**) (vfptr0 + 252) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 252);
                    *(void**) (vfptr0 + 256) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 256);
                    *(void**) (vfptr0 + 260) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 260);
                    *(void**) (vfptr0 + 264) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 264);
                    *(void**) (vfptr0 + 268) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 268);
                    *(void**) (vfptr0 + 272) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 272);
                    *(void**) (vfptr0 + 276) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 276);
                    *(void**) (vfptr0 + 280) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 280);
                    *(void**) (vfptr0 + 284) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 284);
                    *(void**) (vfptr0 + 288) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 288);
                    *(void**) (vfptr0 + 292) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 292);
                    *(void**) (vfptr0 + 296) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 296);
                    *(void**) (vfptr0 + 300) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 300);
                    *(void**) (vfptr0 + 304) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 304);
                    *(void**) (vfptr0 + 308) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 308);
                    *(void**) (vfptr0 + 312) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 312);
                    *(void**) (vfptr0 + 316) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 316);
                    *(void**) (vfptr0 + 320) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 320);
                    *(void**) (vfptr0 + 324) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 324);
                    *(void**) (vfptr0 + 328) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 328);
                    *(void**) (vfptr0 + 332) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 332);
                    *(void**) (vfptr0 + 336) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 336);
                    *(void**) (vfptr0 + 340) = _Thunks[0];
                    *(void**) (vfptr0 + 344) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 344);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(89 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = _Thunks[8];
                    *(void**) (vfptr0 + 48) = _Thunks[9];
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = _Thunks[10];
                    *(void**) (vfptr0 + 76) = _Thunks[11];
                    *(void**) (vfptr0 + 80) = _Thunks[12];
                    *(void**) (vfptr0 + 84) = _Thunks[13];
                    *(void**) (vfptr0 + 88) = _Thunks[14];
                    *(void**) (vfptr0 + 92) = _Thunks[15];
                    *(void**) (vfptr0 + 96) = _Thunks[16];
                    *(void**) (vfptr0 + 100) = _Thunks[17];
                    *(void**) (vfptr0 + 104) = _Thunks[18];
                    *(void**) (vfptr0 + 108) = _Thunks[19];
                    *(void**) (vfptr0 + 112) = _Thunks[20];
                    *(void**) (vfptr0 + 116) = _Thunks[21];
                    *(void**) (vfptr0 + 120) = _Thunks[22];
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 128);
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = _Thunks[23];
                    *(void**) (vfptr0 + 144) = _Thunks[24];
                    *(void**) (vfptr0 + 148) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 148);
                    *(void**) (vfptr0 + 152) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 152);
                    *(void**) (vfptr0 + 156) = _Thunks[25];
                    *(void**) (vfptr0 + 160) = _Thunks[26];
                    *(void**) (vfptr0 + 164) = _Thunks[27];
                    *(void**) (vfptr0 + 168) = _Thunks[28];
                    *(void**) (vfptr0 + 172) = _Thunks[29];
                    *(void**) (vfptr0 + 176) = _Thunks[30];
                    *(void**) (vfptr0 + 180) = _Thunks[31];
                    *(void**) (vfptr0 + 184) = _Thunks[32];
                    *(void**) (vfptr0 + 188) = _Thunks[33];
                    *(void**) (vfptr0 + 192) = _Thunks[34];
                    *(void**) (vfptr0 + 196) = _Thunks[35];
                    *(void**) (vfptr0 + 200) = _Thunks[36];
                    *(void**) (vfptr0 + 204) = _Thunks[37];
                    *(void**) (vfptr0 + 208) = _Thunks[38];
                    *(void**) (vfptr0 + 212) = _Thunks[39];
                    *(void**) (vfptr0 + 216) = _Thunks[40];
                    *(void**) (vfptr0 + 220) = _Thunks[41];
                    *(void**) (vfptr0 + 224) = _Thunks[42];
                    *(void**) (vfptr0 + 228) = _Thunks[43];
                    *(void**) (vfptr0 + 232) = _Thunks[44];
                    *(void**) (vfptr0 + 236) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 236);
                    *(void**) (vfptr0 + 240) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 240);
                    *(void**) (vfptr0 + 244) = _Thunks[45];
                    *(void**) (vfptr0 + 248) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 248);
                    *(void**) (vfptr0 + 252) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 252);
                    *(void**) (vfptr0 + 256) = _Thunks[46];
                    *(void**) (vfptr0 + 260) = _Thunks[47];
                    *(void**) (vfptr0 + 264) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 264);
                    *(void**) (vfptr0 + 268) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 268);
                    *(void**) (vfptr0 + 272) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 272);
                    *(void**) (vfptr0 + 276) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 276);
                    *(void**) (vfptr0 + 280) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 280);
                    *(void**) (vfptr0 + 284) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 284);
                    *(void**) (vfptr0 + 288) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 288);
                    *(void**) (vfptr0 + 292) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 292);
                    *(void**) (vfptr0 + 296) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 296);
                    *(void**) (vfptr0 + 300) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 300);
                    *(void**) (vfptr0 + 304) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 304);
                    *(void**) (vfptr0 + 308) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 308);
                    *(void**) (vfptr0 + 312) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 312);
                    *(void**) (vfptr0 + 316) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 316);
                    *(void**) (vfptr0 + 320) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 320);
                    *(void**) (vfptr0 + 324) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 324);
                    *(void**) (vfptr0 + 328) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 328);
                    *(void**) (vfptr0 + 332) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 332);
                    *(void**) (vfptr0 + 336) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 336);
                    *(void**) (vfptr0 + 340) = _Thunks[0];
                    *(void**) (vfptr0 + 344) = _Thunks[24];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class app
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxWakeUpIdlev")]
            internal static extern void WakeUpIdle();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxCreateAppv")]
            internal static extern global::System.IntPtr CreateApp();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z6wxExitv")]
            internal static extern void Exit();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxYieldv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Yield();
        }

        public static void WakeUpIdle()
        {
            __Internal.WakeUpIdle();
        }

        public static global::wxSharp.IwxAppConsole CreateApp()
        {
            var __ret = __Internal.CreateApp();
            global::wxSharp.IwxAppConsole __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.AppConsole.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxAppConsole) global::wxSharp.AppConsole.NativeToManagedMap[__ret];
            else global::wxSharp.AppConsole.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxAppConsole) global::wxSharp.AppConsole.__CreateInstance(__ret);
            return __result0;
        }

        public static void Exit()
        {
            __Internal.Exit();
        }

        public static bool Yield()
        {
            var __ret = __Internal.Yield();
            return __ret;
        }
    }
}
