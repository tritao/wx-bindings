// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class ControlContainerBase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxControlContainerBase;

            [FieldOffset(4)]
            internal global::System.IntPtr m_winParent;

            [FieldOffset(8)]
            internal global::System.IntPtr m_winLastFocused;

            [FieldOffset(12)]
            internal byte m_acceptsFocusSelf;

            [FieldOffset(13)]
            internal byte m_inSetFocus;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxControlContainerBaseC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxControlContainerBaseC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxControlContainerBase18SetContainerWindowEP8wxWindow")]
            internal static extern void SetContainerWindow(global::System.IntPtr __instance, global::System.IntPtr winParent);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxControlContainerBase16DisableSelfFocusEv")]
            internal static extern void DisableSelfFocus(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxControlContainerBase15EnableSelfFocusEv")]
            internal static extern void EnableSelfFocus(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxControlContainerBase10DoSetFocusEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DoSetFocus(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxControlContainerBase12AcceptsFocusEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool AcceptsFocus(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxControlContainerBase23AcceptsFocusRecursivelyEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool AcceptsFocusRecursively(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxControlContainerBase24AcceptsFocusFromKeyboardEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool AcceptsFocusFromKeyboard(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxControlContainerBase22UpdateCanFocusChildrenEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool UpdateCanFocusChildren(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxControlContainerBase23HasAnyFocusableChildrenEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasAnyFocusableChildren(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxControlContainerBase28HasAnyChildrenAcceptingFocusEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasAnyChildrenAcceptingFocus(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ControlContainerBase> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ControlContainerBase>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.ControlContainerBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ControlContainerBase(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ControlContainerBase __CreateInstance(global::wxSharp.ControlContainerBase.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ControlContainerBase(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ControlContainerBase.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ControlContainerBase.__Internal));
            global::wxSharp.ControlContainerBase.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ControlContainerBase(global::wxSharp.ControlContainerBase.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ControlContainerBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ControlContainerBase()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ControlContainerBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.ControlContainerBase");
        }

        public ControlContainerBase(global::wxSharp.ControlContainerBase _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ControlContainerBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ControlContainerBase");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.ControlContainerBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->vptr_wxControlContainerBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetContainerWindow(global::wxSharp.Window winParent)
        {
            var __arg0 = ReferenceEquals(winParent, null) ? global::System.IntPtr.Zero : winParent.__Instance;
            __Internal.SetContainerWindow(__Instance, __arg0);
        }

        public void DisableSelfFocus()
        {
            __Internal.DisableSelfFocus(__Instance);
        }

        public void EnableSelfFocus()
        {
            __Internal.EnableSelfFocus(__Instance);
        }

        public bool DoSetFocus()
        {
            var __ret = __Internal.DoSetFocus(__Instance);
            return __ret;
        }

        public bool AcceptsFocus()
        {
            var __ret = __Internal.AcceptsFocus(__Instance);
            return __ret;
        }

        public bool AcceptsFocusRecursively()
        {
            var __ret = __Internal.AcceptsFocusRecursively(__Instance);
            return __ret;
        }

        public bool AcceptsFocusFromKeyboard()
        {
            var __ret = __Internal.AcceptsFocusFromKeyboard(__Instance);
            return __ret;
        }

        public bool UpdateCanFocusChildren()
        {
            var __ret = __Internal.UpdateCanFocusChildren(__Instance);
            return __ret;
        }

        protected virtual bool SetFocusToChild()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___SetFocusToChildDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr));
            var __ret = ___SetFocusToChildDelegate(__Instance);
            return __ret;
        }

        protected bool HasAnyFocusableChildren()
        {
            var __ret = __Internal.HasAnyFocusableChildren(__Instance);
            return __ret;
        }

        protected bool HasAnyChildrenAcceptingFocus()
        {
            var __ret = __Internal.HasAnyChildrenAcceptingFocus(__Instance);
            return __ret;
        }

        protected global::wxSharp.Window m_winParent
        {
            get
            {
                global::wxSharp.Window __result0;
                if (((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winParent == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winParent))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winParent];
                else global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winParent] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winParent);
                return __result0;
            }

            set
            {
                ((global::wxSharp.ControlContainerBase.__Internal*)__Instance)->m_winParent = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.Window m_winLastFocused
        {
            get
            {
                global::wxSharp.Window __result0;
                if (((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winLastFocused == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winLastFocused))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winLastFocused];
                else global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winLastFocused] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(((global::wxSharp.ControlContainerBase.__Internal*) __Instance)->m_winLastFocused);
                return __result0;
            }

            set
            {
                ((global::wxSharp.ControlContainerBase.__Internal*)__Instance)->m_winLastFocused = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // virtual ~wxControlContainerBase() {}
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ControlContainerBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // bool SetFocusToChild()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _SetFocusToChildDelegateInstance;

        private static bool _SetFocusToChildDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ControlContainerBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetFocusToChild();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _SetFocusToChildDelegateInstance += _SetFocusToChildDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SetFocusToChildDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ControlContainer : global::wxSharp.ControlContainerBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxControlContainerBase;

            [FieldOffset(4)]
            internal global::System.IntPtr m_winParent;

            [FieldOffset(8)]
            internal global::System.IntPtr m_winLastFocused;

            [FieldOffset(12)]
            internal byte m_acceptsFocusSelf;

            [FieldOffset(13)]
            internal byte m_inSetFocus;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxControlContainerC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxControlContainer21HandleOnNavigationKeyER20wxNavigationKeyEvent")]
            internal static extern void HandleOnNavigationKey(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxControlContainer13HandleOnFocusER12wxFocusEvent")]
            internal static extern void HandleOnFocus(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxControlContainer12SetLastFocusEP8wxWindow")]
            internal static extern void SetLastFocus(global::System.IntPtr __instance, global::System.IntPtr win);
        }

        internal static new global::wxSharp.ControlContainer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ControlContainer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ControlContainer __CreateInstance(global::wxSharp.ControlContainer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ControlContainer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ControlContainer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ControlContainer.__Internal));
            *(global::wxSharp.ControlContainer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ControlContainer(global::wxSharp.ControlContainer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ControlContainer(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ControlContainer()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ControlContainer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.ControlContainer");
        }

        public void HandleOnNavigationKey(global::wxSharp.NavigationKeyEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.HandleOnNavigationKey(__Instance, __arg0);
        }

        public void HandleOnFocus(global::wxSharp.FocusEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.HandleOnFocus(__Instance, __arg0);
        }

        public void SetLastFocus(global::wxSharp.Window win)
        {
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.SetLastFocus(__Instance, __arg0);
        }

        #region Virtual table interop

        // wxControlContainer
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ControlContainer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // bool SetFocusToChild()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _SetFocusToChildDelegateInstance;

        private static bool _SetFocusToChildDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ControlContainer) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetFocusToChild();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _SetFocusToChildDelegateInstance += _SetFocusToChildDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SetFocusToChildDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}
