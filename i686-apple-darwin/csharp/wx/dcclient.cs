// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class WindowDC : global::wxSharp.DC, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_pimpl;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxWindowDCC2EP8wxWindow")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr win);
        }

        internal static new global::wxSharp.WindowDC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowDC(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.WindowDC __CreateInstance(global::wxSharp.WindowDC.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowDC(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.WindowDC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowDC.__Internal));
            *(global::wxSharp.WindowDC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WindowDC(global::wxSharp.WindowDC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WindowDC(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public WindowDC(global::wxSharp.Window win)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowDC.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.ctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.WindowDC");
        }

        #region Virtual table interop

        // wxWindowDC
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // int GetResolution() const { return m_pimpl->GetResolution(); }
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetResolutionDelegateInstance;

        private static int _GetResolutionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetResolution();
        }

        // wxGraphicsContext* GetGraphicsContext() const { return m_pimpl->GetGraphicsContext(); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetGraphicsContextDelegateInstance;

        private static global::System.IntPtr _GetGraphicsContextDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetGraphicsContext();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetGraphicsContext( wxGraphicsContext* ctx ) { m_pimpl->SetGraphicsContext(ctx); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetGraphicsContextDelegateInstance;

        private static void _SetGraphicsContextDelegateHook(global::System.IntPtr __instance, global::System.IntPtr ctx)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsContext __result0;
            if (ctx == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(ctx))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[ctx];
            else __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(ctx, skipVTables: true);
            __target.SetGraphicsContext(__result0);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _GetResolutionDelegateInstance += _GetResolutionDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetResolutionDelegateInstance).ToPointer();
                _GetGraphicsContextDelegateInstance += _GetGraphicsContextDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetGraphicsContextDelegateInstance).ToPointer();
                _SetGraphicsContextDelegateInstance += _SetGraphicsContextDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetGraphicsContextDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ClientDC : global::wxSharp.WindowDC, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_pimpl;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxClientDCC2EP8wxWindow")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr win);
        }

        internal static new global::wxSharp.ClientDC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ClientDC(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ClientDC __CreateInstance(global::wxSharp.ClientDC.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ClientDC(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ClientDC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ClientDC.__Internal));
            *(global::wxSharp.ClientDC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ClientDC(global::wxSharp.ClientDC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClientDC(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ClientDC(global::wxSharp.Window win)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ClientDC.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.ctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ClientDC");
        }

        #region Virtual table interop

        // wxClientDC
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClientDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClientDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClientDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // int GetResolution() const { return m_pimpl->GetResolution(); }
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetResolutionDelegateInstance;

        private static int _GetResolutionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClientDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetResolution();
        }

        // wxGraphicsContext* GetGraphicsContext() const { return m_pimpl->GetGraphicsContext(); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetGraphicsContextDelegateInstance;

        private static global::System.IntPtr _GetGraphicsContextDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClientDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetGraphicsContext();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetGraphicsContext( wxGraphicsContext* ctx ) { m_pimpl->SetGraphicsContext(ctx); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetGraphicsContextDelegateInstance;

        private static void _SetGraphicsContextDelegateHook(global::System.IntPtr __instance, global::System.IntPtr ctx)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClientDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsContext __result0;
            if (ctx == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(ctx))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[ctx];
            else __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(ctx, skipVTables: true);
            __target.SetGraphicsContext(__result0);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _GetResolutionDelegateInstance += _GetResolutionDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetResolutionDelegateInstance).ToPointer();
                _GetGraphicsContextDelegateInstance += _GetGraphicsContextDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetGraphicsContextDelegateInstance).ToPointer();
                _SetGraphicsContextDelegateInstance += _SetGraphicsContextDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetGraphicsContextDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class PaintDC : global::wxSharp.ClientDC, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_pimpl;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN9wxPaintDCC2EP8wxWindow")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr win);
        }

        internal static new global::wxSharp.PaintDC __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PaintDC(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PaintDC __CreateInstance(global::wxSharp.PaintDC.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PaintDC(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PaintDC.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PaintDC.__Internal));
            *(global::wxSharp.PaintDC.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PaintDC(global::wxSharp.PaintDC.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PaintDC(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public PaintDC(global::wxSharp.Window win)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PaintDC.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.ctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.PaintDC");
        }

        #region Virtual table interop

        // wxPaintDC
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // int GetResolution() const { return m_pimpl->GetResolution(); }
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetResolutionDelegateInstance;

        private static int _GetResolutionDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetResolution();
        }

        // wxGraphicsContext* GetGraphicsContext() const { return m_pimpl->GetGraphicsContext(); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetGraphicsContextDelegateInstance;

        private static global::System.IntPtr _GetGraphicsContextDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetGraphicsContext();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetGraphicsContext( wxGraphicsContext* ctx ) { m_pimpl->SetGraphicsContext(ctx); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetGraphicsContextDelegateInstance;

        private static void _SetGraphicsContextDelegateHook(global::System.IntPtr __instance, global::System.IntPtr ctx)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintDC) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.GraphicsContext __result0;
            if (ctx == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.GraphicsContext.NativeToManagedMap.ContainsKey(ctx))
                __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.NativeToManagedMap[ctx];
            else __result0 = (global::wxSharp.GraphicsContext) global::wxSharp.GraphicsContext.__CreateInstance(ctx, skipVTables: true);
            __target.SetGraphicsContext(__result0);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _GetResolutionDelegateInstance += _GetResolutionDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetResolutionDelegateInstance).ToPointer();
                _GetGraphicsContextDelegateInstance += _GetGraphicsContextDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetGraphicsContextDelegateInstance).ToPointer();
                _SetGraphicsContextDelegateInstance += _SetGraphicsContextDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetGraphicsContextDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }
}
