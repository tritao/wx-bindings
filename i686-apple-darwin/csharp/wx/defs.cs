// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum GeometryCentre : uint
    {
        CENTRE = 0x1,
        CENTER = 1
    }

    public enum SizerOrientation : uint
    {
        HORIZONTAL = 0x4,
        VERTICAL = 0x8,
        BOTH = 12,
        ORIENTATION_MASK = 12
    }

    public enum Direction : uint
    {
        LEFT = 0x10,
        RIGHT = 0x20,
        UP = 0x40,
        DOWN = 0x80,
        TOP = 64,
        BOTTOM = 128,
        NORTH = 64,
        SOUTH = 128,
        WEST = 16,
        EAST = 32,
        ALL = 240,
        DIRECTION_MASK = 240
    }

    public enum Alignment
    {
        ALIGN_INVALID = -1,
        ALIGN_NOT = 0,
        ALIGN_CENTER_HORIZONTAL = 256,
        ALIGN_CENTRE_HORIZONTAL = 256,
        ALIGN_LEFT = 0,
        ALIGN_TOP = 0,
        ALIGN_RIGHT = 512,
        ALIGN_BOTTOM = 1024,
        ALIGN_CENTER_VERTICAL = 2048,
        ALIGN_CENTRE_VERTICAL = 2048,
        ALIGN_CENTER = 2304,
        ALIGN_CENTRE = 2304,
        ALIGN_MASK = 3840
    }

    public enum SizerFlagBits : uint
    {
        FIXED_MINSIZE = 0x8000,
        RESERVE_SPACE_EVEN_IF_HIDDEN = 0x2,
        SIZER_FLAG_BITS_MASK = 0x8002
    }

    public enum Stretch : uint
    {
        STRETCH_NOT = 0x0,
        SHRINK = 0x1000,
        GROW = 0x2000,
        EXPAND = 8192,
        SHAPED = 0x4000,
        TILE = 49152,
        STRETCH_MASK = 0x7000
    }

    public enum Border : uint
    {
        BORDER_DEFAULT = 0,
        BORDER_NONE = 0x200000,
        BORDER_STATIC = 0x1000000,
        BORDER_SIMPLE = 0x2000000,
        BORDER_RAISED = 0x4000000,
        BORDER_SUNKEN = 0x8000000,
        BORDER_DOUBLE = 0x10000000,
        BORDER_THEME = 268435456,
        BORDER_MASK = 0x1f200000
    }

    public enum BackgroundStyle : uint
    {
        BG_STYLE_ERASE = 0,
        BG_STYLE_SYSTEM = 1,
        BG_STYLE_PAINT = 2,
        BG_STYLE_TRANSPARENT = 3,
        BG_STYLE_COLOUR = 4,
        BG_STYLE_CUSTOM = 2
    }

    public enum KeyType : uint
    {
        KEY_NONE = 0,
        KEY_INTEGER = 1,
        KEY_STRING = 2
    }

    public enum StandardID
    {
        ID_AUTO_LOWEST = -1000000,
        ID_AUTO_HIGHEST = -2000,
        ID_NONE = -3,
        ID_SEPARATOR = -2,
        ID_ANY = -1,
        ID_LOWEST = 4999,
        ID_OPEN = 5000,
        ID_CLOSE = 5001,
        ID_NEW = 5002,
        ID_SAVE = 5003,
        ID_SAVEAS = 5004,
        ID_REVERT = 5005,
        ID_EXIT = 5006,
        ID_UNDO = 5007,
        ID_REDO = 5008,
        ID_HELP = 5009,
        ID_PRINT = 5010,
        ID_PRINT_SETUP = 5011,
        ID_PAGE_SETUP = 5012,
        ID_PREVIEW = 5013,
        ID_ABOUT = 5014,
        ID_HELP_CONTENTS = 5015,
        ID_HELP_INDEX = 5016,
        ID_HELP_SEARCH = 5017,
        ID_HELP_COMMANDS = 5018,
        ID_HELP_PROCEDURES = 5019,
        ID_HELP_CONTEXT = 5020,
        ID_CLOSE_ALL = 5021,
        ID_PREFERENCES = 5022,
        ID_EDIT = 5030,
        ID_CUT = 5031,
        ID_COPY = 5032,
        ID_PASTE = 5033,
        ID_CLEAR = 5034,
        ID_FIND = 5035,
        ID_DUPLICATE = 5036,
        ID_SELECTALL = 5037,
        ID_DELETE = 5038,
        ID_REPLACE = 5039,
        ID_REPLACE_ALL = 5040,
        ID_PROPERTIES = 5041,
        ID_VIEW_DETAILS = 5042,
        ID_VIEW_LARGEICONS = 5043,
        ID_VIEW_SMALLICONS = 5044,
        ID_VIEW_LIST = 5045,
        ID_VIEW_SORTDATE = 5046,
        ID_VIEW_SORTNAME = 5047,
        ID_VIEW_SORTSIZE = 5048,
        ID_VIEW_SORTTYPE = 5049,
        ID_FILE = 5050,
        ID_FILE1 = 5051,
        ID_FILE2 = 5052,
        ID_FILE3 = 5053,
        ID_FILE4 = 5054,
        ID_FILE5 = 5055,
        ID_FILE6 = 5056,
        ID_FILE7 = 5057,
        ID_FILE8 = 5058,
        ID_FILE9 = 5059,
        ID_OK = 5100,
        ID_CANCEL = 5101,
        ID_APPLY = 5102,
        ID_YES = 5103,
        ID_NO = 5104,
        ID_STATIC = 5105,
        ID_FORWARD = 5106,
        ID_BACKWARD = 5107,
        ID_DEFAULT = 5108,
        ID_MORE = 5109,
        ID_SETUP = 5110,
        ID_RESET = 5111,
        ID_CONTEXT_HELP = 5112,
        ID_YESTOALL = 5113,
        ID_NOTOALL = 5114,
        ID_ABORT = 5115,
        ID_RETRY = 5116,
        ID_IGNORE = 5117,
        ID_ADD = 5118,
        ID_REMOVE = 5119,
        ID_UP = 5120,
        ID_DOWN = 5121,
        ID_HOME = 5122,
        ID_REFRESH = 5123,
        ID_STOP = 5124,
        ID_INDEX = 5125,
        ID_BOLD = 5126,
        ID_ITALIC = 5127,
        ID_JUSTIFY_CENTER = 5128,
        ID_JUSTIFY_FILL = 5129,
        ID_JUSTIFY_RIGHT = 5130,
        ID_JUSTIFY_LEFT = 5131,
        ID_UNDERLINE = 5132,
        ID_INDENT = 5133,
        ID_UNINDENT = 5134,
        ID_ZOOM_100 = 5135,
        ID_ZOOM_FIT = 5136,
        ID_ZOOM_IN = 5137,
        ID_ZOOM_OUT = 5138,
        ID_UNDELETE = 5139,
        ID_REVERT_TO_SAVED = 5140,
        ID_CDROM = 5141,
        ID_CONVERT = 5142,
        ID_EXECUTE = 5143,
        ID_FLOPPY = 5144,
        ID_HARDDISK = 5145,
        ID_BOTTOM = 5146,
        ID_FIRST = 5147,
        ID_LAST = 5148,
        ID_TOP = 5149,
        ID_INFO = 5150,
        ID_JUMP_TO = 5151,
        ID_NETWORK = 5152,
        ID_SELECT_COLOR = 5153,
        ID_SELECT_FONT = 5154,
        ID_SORT_ASCENDING = 5155,
        ID_SORT_DESCENDING = 5156,
        ID_SPELL_CHECK = 5157,
        ID_STRIKETHROUGH = 5158,
        ID_SYSTEM_MENU = 5200,
        ID_CLOSE_FRAME = 5201,
        ID_MOVE_FRAME = 5202,
        ID_RESIZE_FRAME = 5203,
        ID_MAXIMIZE_FRAME = 5204,
        ID_ICONIZE_FRAME = 5205,
        ID_RESTORE_FRAME = 5206,
        ID_MDI_WINDOW_FIRST = 5230,
        ID_MDI_WINDOW_CASCADE = 5230,
        ID_MDI_WINDOW_TILE_HORZ = 5231,
        ID_MDI_WINDOW_TILE_VERT = 5232,
        ID_MDI_WINDOW_ARRANGE_ICONS = 5233,
        ID_MDI_WINDOW_PREV = 5234,
        ID_MDI_WINDOW_NEXT = 5235,
        ID_MDI_WINDOW_LAST = 5235,
        ID_OSX_MENU_FIRST = 5250,
        ID_OSX_HIDE = 5250,
        ID_OSX_HIDEOTHERS = 5251,
        ID_OSX_SHOWALL = 5252,
        ID_OSX_SERVICES = 5253,
        ID_OSX_MENU_LAST = 5253,
        ID_FILEDLGG = 5900,
        ID_FILECTRL = 5950,
        ID_HIGHEST = 5999
    }

    public enum ItemKind
    {
        ITEM_SEPARATOR = -1,
        ITEM_NORMAL = 0,
        ITEM_CHECK = 1,
        ITEM_RADIO = 2,
        ITEM_DROPDOWN = 3,
        ITEM_MAX = 4
    }

    public enum CheckBoxState : uint
    {
        CHK_UNCHECKED = 0,
        CHK_CHECKED = 1,
        CHK_UNDETERMINED = 2
    }

    public enum HitTest : uint
    {
        HT_NOWHERE = 0,
        HT_SCROLLBAR_FIRST = 0,
        HT_SCROLLBAR_ARROW_LINE_1 = 1,
        HT_SCROLLBAR_ARROW_LINE_2 = 2,
        HT_SCROLLBAR_ARROW_PAGE_1 = 3,
        HT_SCROLLBAR_ARROW_PAGE_2 = 4,
        HT_SCROLLBAR_THUMB = 5,
        HT_SCROLLBAR_BAR_1 = 6,
        HT_SCROLLBAR_BAR_2 = 7,
        HT_SCROLLBAR_LAST = 8,
        HT_WINDOW_OUTSIDE = 9,
        HT_WINDOW_INSIDE = 10,
        HT_WINDOW_VERT_SCROLLBAR = 11,
        HT_WINDOW_HORZ_SCROLLBAR = 12,
        HT_WINDOW_CORNER = 13,
        HT_MAX = 14
    }

    public enum HatchStyle
    {
        HATCHSTYLE_INVALID = -1,
        HATCHSTYLE_FIRST = 111,
        HATCHSTYLE_BDIAGONAL = 111,
        HATCHSTYLE_CROSSDIAG = 112,
        HATCHSTYLE_FDIAGONAL = 113,
        HATCHSTYLE_CROSS = 114,
        HATCHSTYLE_HORIZONTAL = 115,
        HATCHSTYLE_VERTICAL = 116,
        HATCHSTYLE_LAST = 116
    }

    public enum DeprecatedGUIConstants : uint
    {
        DEFAULT = 70,
        DECORATIVE = 71,
        ROMAN = 72,
        SCRIPT = 73,
        SWISS = 74,
        MODERN = 75,
        TELETYPE = 76,
        VARIABLE = 80,
        FIXED = 81,
        NORMAL = 90,
        LIGHT = 91,
        BOLD = 92,
        ITALIC = 93,
        SLANT = 94,
        SOLID = 100,
        DOT = 101,
        LONG_DASH = 102,
        SHORT_DASH = 103,
        DOT_DASH = 104,
        USER_DASH = 105,
        TRANSPARENT = 106,
        STIPPLE_MASK_OPAQUE = 107,
        STIPPLE_MASK = 108,
        STIPPLE = 110,
        BDIAGONAL_HATCH = 111,
        CROSSDIAG_HATCH = 112,
        FDIAGONAL_HATCH = 113,
        CROSS_HATCH = 114,
        HORIZONTAL_HATCH = 115,
        VERTICAL_HATCH = 116,
        FIRST_HATCH = 111,
        LAST_HATCH = 116
    }

    public enum TOOL : uint
    {
        TOOL_TOP = 1,
        TOOL_BOTTOM = 2,
        TOOL_LEFT = 3,
        TOOL_RIGHT = 4
    }

    public enum DataFormatId : uint
    {
        DF_INVALID = 0,
        DF_TEXT = 1,
        DF_BITMAP = 2,
        DF_METAFILE = 3,
        DF_SYLK = 4,
        DF_DIF = 5,
        DF_TIFF = 6,
        DF_OEMTEXT = 7,
        DF_DIB = 8,
        DF_PALETTE = 9,
        DF_PENDATA = 10,
        DF_RIFF = 11,
        DF_WAVE = 12,
        DF_UNICODETEXT = 13,
        DF_ENHMETAFILE = 14,
        DF_FILENAME = 15,
        DF_LOCALE = 16,
        DF_PRIVATE = 20,
        DF_HTML = 30,
        DF_MAX = 31
    }

    public enum KeyCode : uint
    {
        WXK_NONE = 0,
        WXK_CONTROL_A = 1,
        WXK_CONTROL_B = 2,
        WXK_CONTROL_C = 3,
        WXK_CONTROL_D = 4,
        WXK_CONTROL_E = 5,
        WXK_CONTROL_F = 6,
        WXK_CONTROL_G = 7,
        WXK_CONTROL_H = 8,
        WXK_CONTROL_I = 9,
        WXK_CONTROL_J = 10,
        WXK_CONTROL_K = 11,
        WXK_CONTROL_L = 12,
        WXK_CONTROL_M = 13,
        WXK_CONTROL_N = 14,
        WXK_CONTROL_O = 15,
        WXK_CONTROL_P = 16,
        WXK_CONTROL_Q = 17,
        WXK_CONTROL_R = 18,
        WXK_CONTROL_S = 19,
        WXK_CONTROL_T = 20,
        WXK_CONTROL_U = 21,
        WXK_CONTROL_V = 22,
        WXK_CONTROL_W = 23,
        WXK_CONTROL_X = 24,
        WXK_CONTROL_Y = 25,
        WXK_CONTROL_Z = 26,
        WXK_BACK = 8,
        WXK_TAB = 9,
        WXK_RETURN = 13,
        WXK_ESCAPE = 27,
        WXK_SPACE = 32,
        WXK_DELETE = 127,
        WXK_START = 300,
        WXK_LBUTTON = 301,
        WXK_RBUTTON = 302,
        WXK_CANCEL = 303,
        WXK_MBUTTON = 304,
        WXK_CLEAR = 305,
        WXK_SHIFT = 306,
        WXK_ALT = 307,
        WXK_CONTROL = 308,
        WXK_MENU = 309,
        WXK_PAUSE = 310,
        WXK_CAPITAL = 311,
        WXK_END = 312,
        WXK_HOME = 313,
        WXK_LEFT = 314,
        WXK_UP = 315,
        WXK_RIGHT = 316,
        WXK_DOWN = 317,
        WXK_SELECT = 318,
        WXK_PRINT = 319,
        WXK_EXECUTE = 320,
        WXK_SNAPSHOT = 321,
        WXK_INSERT = 322,
        WXK_HELP = 323,
        WXK_NUMPAD0 = 324,
        WXK_NUMPAD1 = 325,
        WXK_NUMPAD2 = 326,
        WXK_NUMPAD3 = 327,
        WXK_NUMPAD4 = 328,
        WXK_NUMPAD5 = 329,
        WXK_NUMPAD6 = 330,
        WXK_NUMPAD7 = 331,
        WXK_NUMPAD8 = 332,
        WXK_NUMPAD9 = 333,
        WXK_MULTIPLY = 334,
        WXK_ADD = 335,
        WXK_SEPARATOR = 336,
        WXK_SUBTRACT = 337,
        WXK_DECIMAL = 338,
        WXK_DIVIDE = 339,
        WXK_F1 = 340,
        WXK_F2 = 341,
        WXK_F3 = 342,
        WXK_F4 = 343,
        WXK_F5 = 344,
        WXK_F6 = 345,
        WXK_F7 = 346,
        WXK_F8 = 347,
        WXK_F9 = 348,
        WXK_F10 = 349,
        WXK_F11 = 350,
        WXK_F12 = 351,
        WXK_F13 = 352,
        WXK_F14 = 353,
        WXK_F15 = 354,
        WXK_F16 = 355,
        WXK_F17 = 356,
        WXK_F18 = 357,
        WXK_F19 = 358,
        WXK_F20 = 359,
        WXK_F21 = 360,
        WXK_F22 = 361,
        WXK_F23 = 362,
        WXK_F24 = 363,
        WXK_NUMLOCK = 364,
        WXK_SCROLL = 365,
        WXK_PAGEUP = 366,
        WXK_PAGEDOWN = 367,
        WXK_NUMPAD_SPACE = 368,
        WXK_NUMPAD_TAB = 369,
        WXK_NUMPAD_ENTER = 370,
        WXK_NUMPAD_F1 = 371,
        WXK_NUMPAD_F2 = 372,
        WXK_NUMPAD_F3 = 373,
        WXK_NUMPAD_F4 = 374,
        WXK_NUMPAD_HOME = 375,
        WXK_NUMPAD_LEFT = 376,
        WXK_NUMPAD_UP = 377,
        WXK_NUMPAD_RIGHT = 378,
        WXK_NUMPAD_DOWN = 379,
        WXK_NUMPAD_PAGEUP = 380,
        WXK_NUMPAD_PAGEDOWN = 381,
        WXK_NUMPAD_END = 382,
        WXK_NUMPAD_BEGIN = 383,
        WXK_NUMPAD_INSERT = 384,
        WXK_NUMPAD_DELETE = 385,
        WXK_NUMPAD_EQUAL = 386,
        WXK_NUMPAD_MULTIPLY = 387,
        WXK_NUMPAD_ADD = 388,
        WXK_NUMPAD_SEPARATOR = 389,
        WXK_NUMPAD_SUBTRACT = 390,
        WXK_NUMPAD_DECIMAL = 391,
        WXK_NUMPAD_DIVIDE = 392,
        WXK_WINDOWS_LEFT = 393,
        WXK_WINDOWS_RIGHT = 394,
        WXK_WINDOWS_MENU = 395,
        WXK_RAW_CONTROL = 396,
        WXK_COMMAND = 308,
        WXK_SPECIAL1 = 397,
        WXK_SPECIAL2 = 398,
        WXK_SPECIAL3 = 399,
        WXK_SPECIAL4 = 400,
        WXK_SPECIAL5 = 401,
        WXK_SPECIAL6 = 402,
        WXK_SPECIAL7 = 403,
        WXK_SPECIAL8 = 404,
        WXK_SPECIAL9 = 405,
        WXK_SPECIAL10 = 406,
        WXK_SPECIAL11 = 407,
        WXK_SPECIAL12 = 408,
        WXK_SPECIAL13 = 409,
        WXK_SPECIAL14 = 410,
        WXK_SPECIAL15 = 411,
        WXK_SPECIAL16 = 412,
        WXK_SPECIAL17 = 413,
        WXK_SPECIAL18 = 414,
        WXK_SPECIAL19 = 415,
        WXK_SPECIAL20 = 416,
        WXK_BROWSER_BACK = 417,
        WXK_BROWSER_FORWARD = 418,
        WXK_BROWSER_REFRESH = 419,
        WXK_BROWSER_STOP = 420,
        WXK_BROWSER_SEARCH = 421,
        WXK_BROWSER_FAVORITES = 422,
        WXK_BROWSER_HOME = 423,
        WXK_VOLUME_MUTE = 424,
        WXK_VOLUME_DOWN = 425,
        WXK_VOLUME_UP = 426,
        WXK_MEDIA_NEXT_TRACK = 427,
        WXK_MEDIA_PREV_TRACK = 428,
        WXK_MEDIA_STOP = 429,
        WXK_MEDIA_PLAY_PAUSE = 430,
        WXK_LAUNCH_MAIL = 431,
        WXK_LAUNCH_APP1 = 432,
        WXK_LAUNCH_APP2 = 433
    }

    public enum KeyModifier : uint
    {
        MOD_NONE = 0x0,
        MOD_ALT = 0x1,
        MOD_CONTROL = 0x2,
        MOD_ALTGR = 3,
        MOD_SHIFT = 0x4,
        MOD_META = 0x8,
        MOD_WIN = 8,
        MOD_RAW_CONTROL = 0x10,
        MOD_CMD = 2,
        MOD_ALL = 0xffff
    }

    public enum PaperSize : uint
    {
        PAPER_NONE = 0,
        PAPER_LETTER = 1,
        PAPER_LEGAL = 2,
        PAPER_A4 = 3,
        PAPER_CSHEET = 4,
        PAPER_DSHEET = 5,
        PAPER_ESHEET = 6,
        PAPER_LETTERSMALL = 7,
        PAPER_TABLOID = 8,
        PAPER_LEDGER = 9,
        PAPER_STATEMENT = 10,
        PAPER_EXECUTIVE = 11,
        PAPER_A3 = 12,
        PAPER_A4SMALL = 13,
        PAPER_A5 = 14,
        PAPER_B4 = 15,
        PAPER_B5 = 16,
        PAPER_FOLIO = 17,
        PAPER_QUARTO = 18,
        PAPER_10X14 = 0x13,
        PAPER_11X17 = 20,
        PAPER_NOTE = 21,
        PAPER_ENV_9 = 22,
        PAPER_ENV_10 = 23,
        PAPER_ENV_11 = 24,
        PAPER_ENV_12 = 25,
        PAPER_ENV_14 = 26,
        PAPER_ENV_DL = 27,
        PAPER_ENV_C5 = 28,
        PAPER_ENV_C3 = 29,
        PAPER_ENV_C4 = 30,
        PAPER_ENV_C6 = 31,
        PAPER_ENV_C65 = 32,
        PAPER_ENV_B4 = 33,
        PAPER_ENV_B5 = 34,
        PAPER_ENV_B6 = 35,
        PAPER_ENV_ITALY = 36,
        PAPER_ENV_MONARCH = 37,
        PAPER_ENV_PERSONAL = 38,
        PAPER_FANFOLD_US = 39,
        PAPER_FANFOLD_STD_GERMAN = 40,
        PAPER_FANFOLD_LGL_GERMAN = 41,
        PAPER_ISO_B4 = 42,
        PAPER_JAPANESE_POSTCARD = 43,
        PAPER_9X11 = 44,
        PAPER_10X11 = 0x2d,
        PAPER_15X11 = 46,
        PAPER_ENV_INVITE = 47,
        PAPER_LETTER_EXTRA = 48,
        PAPER_LEGAL_EXTRA = 49,
        PAPER_TABLOID_EXTRA = 50,
        PAPER_A4_EXTRA = 51,
        PAPER_LETTER_TRANSVERSE = 52,
        PAPER_A4_TRANSVERSE = 53,
        PAPER_LETTER_EXTRA_TRANSVERSE = 54,
        PAPER_A_PLUS = 55,
        PAPER_B_PLUS = 56,
        PAPER_LETTER_PLUS = 57,
        PAPER_A4_PLUS = 58,
        PAPER_A5_TRANSVERSE = 59,
        PAPER_B5_TRANSVERSE = 60,
        PAPER_A3_EXTRA = 61,
        PAPER_A5_EXTRA = 62,
        PAPER_B5_EXTRA = 63,
        PAPER_A2 = 64,
        PAPER_A3_TRANSVERSE = 65,
        PAPER_A3_EXTRA_TRANSVERSE = 66,
        PAPER_DBL_JAPANESE_POSTCARD = 67,
        PAPER_A6 = 68,
        PAPER_JENV_KAKU2 = 69,
        PAPER_JENV_KAKU3 = 70,
        PAPER_JENV_CHOU3 = 71,
        PAPER_JENV_CHOU4 = 72,
        PAPER_LETTER_ROTATED = 73,
        PAPER_A3_ROTATED = 74,
        PAPER_A4_ROTATED = 75,
        PAPER_A5_ROTATED = 76,
        PAPER_B4_JIS_ROTATED = 77,
        PAPER_B5_JIS_ROTATED = 78,
        PAPER_JAPANESE_POSTCARD_ROTATED = 79,
        PAPER_DBL_JAPANESE_POSTCARD_ROTATED = 80,
        PAPER_A6_ROTATED = 81,
        PAPER_JENV_KAKU2_ROTATED = 82,
        PAPER_JENV_KAKU3_ROTATED = 83,
        PAPER_JENV_CHOU3_ROTATED = 84,
        PAPER_JENV_CHOU4_ROTATED = 85,
        PAPER_B6_JIS = 86,
        PAPER_B6_JIS_ROTATED = 87,
        PAPER_12X11 = 88,
        PAPER_JENV_YOU4 = 89,
        PAPER_JENV_YOU4_ROTATED = 90,
        PAPER_P16K = 91,
        PAPER_P32K = 92,
        PAPER_P32KBIG = 93,
        PAPER_PENV_1 = 94,
        PAPER_PENV_2 = 95,
        PAPER_PENV_3 = 96,
        PAPER_PENV_4 = 97,
        PAPER_PENV_5 = 98,
        PAPER_PENV_6 = 99,
        PAPER_PENV_7 = 100,
        PAPER_PENV_8 = 101,
        PAPER_PENV_9 = 102,
        PAPER_PENV_10 = 103,
        PAPER_P16K_ROTATED = 104,
        PAPER_P32K_ROTATED = 105,
        PAPER_P32KBIG_ROTATED = 106,
        PAPER_PENV_1_ROTATED = 107,
        PAPER_PENV_2_ROTATED = 108,
        PAPER_PENV_3_ROTATED = 109,
        PAPER_PENV_4_ROTATED = 110,
        PAPER_PENV_5_ROTATED = 111,
        PAPER_PENV_6_ROTATED = 112,
        PAPER_PENV_7_ROTATED = 113,
        PAPER_PENV_8_ROTATED = 114,
        PAPER_PENV_9_ROTATED = 115,
        PAPER_PENV_10_ROTATED = 116,
        PAPER_A0 = 117,
        PAPER_A1 = 118
    }

    public enum PrintOrientation : uint
    {
        PORTRAIT = 1,
        LANDSCAPE = 2
    }

    public enum DuplexMode : uint
    {
        DUPLEX_SIMPLEX = 0,
        DUPLEX_HORIZONTAL = 1,
        DUPLEX_VERTICAL = 2
    }

    public enum PrintMode : uint
    {
        PRINT_MODE_NONE = 0,
        PRINT_MODE_PREVIEW = 1,
        PRINT_MODE_FILE = 2,
        PRINT_MODE_PRINTER = 3,
        PRINT_MODE_STREAM = 4
    }

    public enum UpdateUI : uint
    {
        UPDATE_UI_NONE = 0x0,
        UPDATE_UI_RECURSE = 0x1,
        UPDATE_UI_FROMIDLE = 0x2
    }

    public enum PRIORITY : uint
    {
        PRIORITY_MIN = 0,
        PRIORITY_DEFAULT = 50,
        PRIORITY_MAX = 100
    }

    public unsafe partial class OpaquePicHandle
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.OpaquePicHandle> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.OpaquePicHandle>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.OpaquePicHandle __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.OpaquePicHandle(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.OpaquePicHandle __CreateInstance(global::wxSharp.OpaquePicHandle.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.OpaquePicHandle(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.OpaquePicHandle.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.OpaquePicHandle.__Internal));
            *(global::wxSharp.OpaquePicHandle.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OpaquePicHandle(global::wxSharp.OpaquePicHandle.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OpaquePicHandle(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class __CFData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.__CFData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFData(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.__CFData __CreateInstance(global::wxSharp.__CFData.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFData(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.__CFData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.__CFData.__Internal));
            *(global::wxSharp.__CFData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private __CFData(global::wxSharp.__CFData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected __CFData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class __CFString
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFString> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFString>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.__CFString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFString(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.__CFString __CreateInstance(global::wxSharp.__CFString.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFString(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.__CFString.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.__CFString.__Internal));
            *(global::wxSharp.__CFString.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private __CFString(global::wxSharp.__CFString.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected __CFString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class __CFDictionary
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFDictionary> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFDictionary>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.__CFDictionary __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFDictionary(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.__CFDictionary __CreateInstance(global::wxSharp.__CFDictionary.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFDictionary(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.__CFDictionary.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.__CFDictionary.__Internal));
            *(global::wxSharp.__CFDictionary.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private __CFDictionary(global::wxSharp.__CFDictionary.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected __CFDictionary(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class __CFArray
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFArray>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.__CFArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFArray(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.__CFArray __CreateInstance(global::wxSharp.__CFArray.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFArray(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.__CFArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.__CFArray.__Internal));
            *(global::wxSharp.__CFArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private __CFArray(global::wxSharp.__CFArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected __CFArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class __CFRunLoopSource
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFRunLoopSource> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CFRunLoopSource>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.__CFRunLoopSource __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFRunLoopSource(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.__CFRunLoopSource __CreateInstance(global::wxSharp.__CFRunLoopSource.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.__CFRunLoopSource(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.__CFRunLoopSource.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.__CFRunLoopSource.__Internal));
            *(global::wxSharp.__CFRunLoopSource.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private __CFRunLoopSource(global::wxSharp.__CFRunLoopSource.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected __CFRunLoopSource(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class __CTFont
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CTFont> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CTFont>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.__CTFont __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.__CTFont(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.__CTFont __CreateInstance(global::wxSharp.__CTFont.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.__CTFont(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.__CTFont.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.__CTFont.__Internal));
            *(global::wxSharp.__CTFont.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private __CTFont(global::wxSharp.__CTFont.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected __CTFont(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class __CTFontDescriptor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CTFontDescriptor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__CTFontDescriptor>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.__CTFontDescriptor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.__CTFontDescriptor(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.__CTFontDescriptor __CreateInstance(global::wxSharp.__CTFontDescriptor.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.__CTFontDescriptor(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.__CTFontDescriptor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.__CTFontDescriptor.__Internal));
            *(global::wxSharp.__CTFontDescriptor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private __CTFontDescriptor(global::wxSharp.__CTFontDescriptor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected __CTFontDescriptor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CGColor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CGColor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CGColor>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.CGColor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.CGColor(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.CGColor __CreateInstance(global::wxSharp.CGColor.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.CGColor(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.CGColor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.CGColor.__Internal));
            *(global::wxSharp.CGColor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CGColor(global::wxSharp.CGColor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CGColor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CGImage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CGImage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CGImage>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.CGImage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.CGImage(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.CGImage __CreateInstance(global::wxSharp.CGImage.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.CGImage(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.CGImage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.CGImage.__Internal));
            *(global::wxSharp.CGImage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CGImage(global::wxSharp.CGImage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CGImage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CGContext
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CGContext> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CGContext>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.CGContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.CGContext(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.CGContext __CreateInstance(global::wxSharp.CGContext.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.CGContext(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.CGContext.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.CGContext.__Internal));
            *(global::wxSharp.CGContext.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CGContext(global::wxSharp.CGContext.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CGContext(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class CGFont
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CGFont> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.CGFont>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.CGFont __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.CGFont(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.CGFont __CreateInstance(global::wxSharp.CGFont.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.CGFont(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.CGFont.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.CGFont.__Internal));
            *(global::wxSharp.CGFont.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CGFont(global::wxSharp.CGFont.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CGFont(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class __HIShape
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__HIShape> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.__HIShape>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.__HIShape __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.__HIShape(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.__HIShape __CreateInstance(global::wxSharp.__HIShape.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.__HIShape(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.__HIShape.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.__HIShape.__Internal));
            *(global::wxSharp.__HIShape.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private __HIShape(global::wxSharp.__HIShape.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected __HIShape(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OpaquePasteboardRef
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.OpaquePasteboardRef> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.OpaquePasteboardRef>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.OpaquePasteboardRef __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.OpaquePasteboardRef(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.OpaquePasteboardRef __CreateInstance(global::wxSharp.OpaquePasteboardRef.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.OpaquePasteboardRef(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.OpaquePasteboardRef.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.OpaquePasteboardRef.__Internal));
            *(global::wxSharp.OpaquePasteboardRef.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OpaquePasteboardRef(global::wxSharp.OpaquePasteboardRef.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OpaquePasteboardRef(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OpaqueIconRef
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.OpaqueIconRef> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.OpaqueIconRef>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.OpaqueIconRef __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.OpaqueIconRef(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.OpaqueIconRef __CreateInstance(global::wxSharp.OpaqueIconRef.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.OpaqueIconRef(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.OpaqueIconRef.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.OpaqueIconRef.__Internal));
            *(global::wxSharp.OpaqueIconRef.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OpaqueIconRef(global::wxSharp.OpaqueIconRef.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OpaqueIconRef(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class OpaqueMenuRef
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.OpaqueMenuRef> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.OpaqueMenuRef>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.OpaqueMenuRef __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.OpaqueMenuRef(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.OpaqueMenuRef __CreateInstance(global::wxSharp.OpaqueMenuRef.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.OpaqueMenuRef(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.OpaqueMenuRef.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.OpaqueMenuRef.__Internal));
            *(global::wxSharp.OpaqueMenuRef.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private OpaqueMenuRef(global::wxSharp.OpaqueMenuRef.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected OpaqueMenuRef(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSArray
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSArray>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSArray(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSArray __CreateInstance(global::wxSharp.NSArray.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSArray(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSArray.__Internal));
            *(global::wxSharp.NSArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSArray(global::wxSharp.NSArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSData
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSData>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSData(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSData __CreateInstance(global::wxSharp.NSData.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSData(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSData.__Internal));
            *(global::wxSharp.NSData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSData(global::wxSharp.NSData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSMutableArray
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMutableArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMutableArray>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSMutableArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMutableArray(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSMutableArray __CreateInstance(global::wxSharp.NSMutableArray.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMutableArray(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSMutableArray.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSMutableArray.__Internal));
            *(global::wxSharp.NSMutableArray.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSMutableArray(global::wxSharp.NSMutableArray.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSMutableArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSString
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSString> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSString>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSString(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSString __CreateInstance(global::wxSharp.NSString.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSString(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSString.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSString.__Internal));
            *(global::wxSharp.NSString.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSString(global::wxSharp.NSString.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSObject
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSObject>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSObject(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSObject __CreateInstance(global::wxSharp.NSObject.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSObject(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSObject.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSObject.__Internal));
            *(global::wxSharp.NSObject.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSObject(global::wxSharp.NSObject.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSApplication
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSApplication> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSApplication>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSApplication __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSApplication(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSApplication __CreateInstance(global::wxSharp.NSApplication.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSApplication(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSApplication.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSApplication.__Internal));
            *(global::wxSharp.NSApplication.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSApplication(global::wxSharp.NSApplication.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSApplication(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSBitmapImageRep
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSBitmapImageRep> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSBitmapImageRep>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSBitmapImageRep __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSBitmapImageRep(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSBitmapImageRep __CreateInstance(global::wxSharp.NSBitmapImageRep.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSBitmapImageRep(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSBitmapImageRep.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSBitmapImageRep.__Internal));
            *(global::wxSharp.NSBitmapImageRep.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSBitmapImageRep(global::wxSharp.NSBitmapImageRep.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSBitmapImageRep(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSBox
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSBox> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSBox>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSBox __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSBox(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSBox __CreateInstance(global::wxSharp.NSBox.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSBox(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSBox.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSBox.__Internal));
            *(global::wxSharp.NSBox.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSBox(global::wxSharp.NSBox.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSBox(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSButton
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSButton> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSButton>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSButton __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSButton(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSButton __CreateInstance(global::wxSharp.NSButton.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSButton(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSButton.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSButton.__Internal));
            *(global::wxSharp.NSButton.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSButton(global::wxSharp.NSButton.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSButton(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSColor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSColor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSColor>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSColor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSColor(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSColor __CreateInstance(global::wxSharp.NSColor.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSColor(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSColor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSColor.__Internal));
            *(global::wxSharp.NSColor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSColor(global::wxSharp.NSColor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSColor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSColorPanel
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSColorPanel> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSColorPanel>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSColorPanel __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSColorPanel(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSColorPanel __CreateInstance(global::wxSharp.NSColorPanel.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSColorPanel(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSColorPanel.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSColorPanel.__Internal));
            *(global::wxSharp.NSColorPanel.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSColorPanel(global::wxSharp.NSColorPanel.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSColorPanel(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSControl
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSControl> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSControl>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSControl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSControl(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSControl __CreateInstance(global::wxSharp.NSControl.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSControl(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSControl.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSControl.__Internal));
            *(global::wxSharp.NSControl.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSControl(global::wxSharp.NSControl.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSControl(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSCursor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSCursor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSCursor>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSCursor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSCursor(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSCursor __CreateInstance(global::wxSharp.NSCursor.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSCursor(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSCursor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSCursor.__Internal));
            *(global::wxSharp.NSCursor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSCursor(global::wxSharp.NSCursor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSCursor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSEvent
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSEvent __CreateInstance(global::wxSharp.NSEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSEvent.__Internal));
            *(global::wxSharp.NSEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSEvent(global::wxSharp.NSEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSFont
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSFont> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSFont>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSFont __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSFont(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSFont __CreateInstance(global::wxSharp.NSFont.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSFont(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSFont.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSFont.__Internal));
            *(global::wxSharp.NSFont.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSFont(global::wxSharp.NSFont.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSFont(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSFontDescriptor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSFontDescriptor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSFontDescriptor>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSFontDescriptor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSFontDescriptor(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSFontDescriptor __CreateInstance(global::wxSharp.NSFontDescriptor.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSFontDescriptor(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSFontDescriptor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSFontDescriptor.__Internal));
            *(global::wxSharp.NSFontDescriptor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSFontDescriptor(global::wxSharp.NSFontDescriptor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSFontDescriptor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSFontPanel
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSFontPanel> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSFontPanel>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSFontPanel __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSFontPanel(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSFontPanel __CreateInstance(global::wxSharp.NSFontPanel.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSFontPanel(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSFontPanel.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSFontPanel.__Internal));
            *(global::wxSharp.NSFontPanel.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSFontPanel(global::wxSharp.NSFontPanel.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSFontPanel(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSImage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSImage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSImage>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSImage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSImage(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSImage __CreateInstance(global::wxSharp.NSImage.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSImage(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSImage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSImage.__Internal));
            *(global::wxSharp.NSImage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSImage(global::wxSharp.NSImage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSImage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSLayoutManager
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSLayoutManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSLayoutManager>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSLayoutManager __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSLayoutManager(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSLayoutManager __CreateInstance(global::wxSharp.NSLayoutManager.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSLayoutManager(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSLayoutManager.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSLayoutManager.__Internal));
            *(global::wxSharp.NSLayoutManager.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSLayoutManager(global::wxSharp.NSLayoutManager.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSLayoutManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSMenu
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMenu> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMenu>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSMenu __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMenu(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSMenu __CreateInstance(global::wxSharp.NSMenu.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMenu(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSMenu.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSMenu.__Internal));
            *(global::wxSharp.NSMenu.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSMenu(global::wxSharp.NSMenu.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSMenu(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSMenuExtra
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMenuExtra> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMenuExtra>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSMenuExtra __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMenuExtra(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSMenuExtra __CreateInstance(global::wxSharp.NSMenuExtra.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMenuExtra(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSMenuExtra.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSMenuExtra.__Internal));
            *(global::wxSharp.NSMenuExtra.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSMenuExtra(global::wxSharp.NSMenuExtra.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSMenuExtra(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSMenuItem
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMenuItem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMenuItem>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSMenuItem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMenuItem(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSMenuItem __CreateInstance(global::wxSharp.NSMenuItem.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMenuItem(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSMenuItem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSMenuItem.__Internal));
            *(global::wxSharp.NSMenuItem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSMenuItem(global::wxSharp.NSMenuItem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSMenuItem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSNotification
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSNotification> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSNotification>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSNotification __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSNotification(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSNotification __CreateInstance(global::wxSharp.NSNotification.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSNotification(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSNotification.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSNotification.__Internal));
            *(global::wxSharp.NSNotification.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSNotification(global::wxSharp.NSNotification.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSNotification(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSPanel
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPanel> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPanel>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSPanel __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPanel(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSPanel __CreateInstance(global::wxSharp.NSPanel.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPanel(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSPanel.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSPanel.__Internal));
            *(global::wxSharp.NSPanel.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSPanel(global::wxSharp.NSPanel.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSPanel(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSResponder
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSResponder> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSResponder>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSResponder __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSResponder(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSResponder __CreateInstance(global::wxSharp.NSResponder.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSResponder(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSResponder.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSResponder.__Internal));
            *(global::wxSharp.NSResponder.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSResponder(global::wxSharp.NSResponder.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSResponder(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSScrollView
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSScrollView> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSScrollView>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSScrollView __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSScrollView(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSScrollView __CreateInstance(global::wxSharp.NSScrollView.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSScrollView(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSScrollView.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSScrollView.__Internal));
            *(global::wxSharp.NSScrollView.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSScrollView(global::wxSharp.NSScrollView.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSScrollView(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSSound
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSSound> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSSound>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSSound __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSSound(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSSound __CreateInstance(global::wxSharp.NSSound.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSSound(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSSound.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSSound.__Internal));
            *(global::wxSharp.NSSound.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSSound(global::wxSharp.NSSound.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSSound(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSStatusItem
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSStatusItem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSStatusItem>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSStatusItem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSStatusItem(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSStatusItem __CreateInstance(global::wxSharp.NSStatusItem.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSStatusItem(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSStatusItem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSStatusItem.__Internal));
            *(global::wxSharp.NSStatusItem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSStatusItem(global::wxSharp.NSStatusItem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSStatusItem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSTableColumn
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTableColumn> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTableColumn>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSTableColumn __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTableColumn(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSTableColumn __CreateInstance(global::wxSharp.NSTableColumn.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTableColumn(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSTableColumn.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSTableColumn.__Internal));
            *(global::wxSharp.NSTableColumn.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSTableColumn(global::wxSharp.NSTableColumn.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSTableColumn(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSTableView
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTableView> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTableView>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSTableView __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTableView(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSTableView __CreateInstance(global::wxSharp.NSTableView.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTableView(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSTableView.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSTableView.__Internal));
            *(global::wxSharp.NSTableView.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSTableView(global::wxSharp.NSTableView.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSTableView(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSTextContainer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTextContainer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTextContainer>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSTextContainer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTextContainer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSTextContainer __CreateInstance(global::wxSharp.NSTextContainer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTextContainer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSTextContainer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSTextContainer.__Internal));
            *(global::wxSharp.NSTextContainer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSTextContainer(global::wxSharp.NSTextContainer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSTextContainer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSTextField
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTextField> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTextField>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSTextField __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTextField(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSTextField __CreateInstance(global::wxSharp.NSTextField.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTextField(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSTextField.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSTextField.__Internal));
            *(global::wxSharp.NSTextField.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSTextField(global::wxSharp.NSTextField.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSTextField(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSTextStorage
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTextStorage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTextStorage>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSTextStorage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTextStorage(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSTextStorage __CreateInstance(global::wxSharp.NSTextStorage.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTextStorage(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSTextStorage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSTextStorage.__Internal));
            *(global::wxSharp.NSTextStorage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSTextStorage(global::wxSharp.NSTextStorage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSTextStorage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSThread
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSThread> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSThread>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSThread __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSThread(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSThread __CreateInstance(global::wxSharp.NSThread.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSThread(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSThread.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSThread.__Internal));
            *(global::wxSharp.NSThread.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSThread(global::wxSharp.NSThread.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSThread(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSWindow
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSWindow> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSWindow>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSWindow __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSWindow(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSWindow __CreateInstance(global::wxSharp.NSWindow.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSWindow(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSWindow.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSWindow.__Internal));
            *(global::wxSharp.NSWindow.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSWindow(global::wxSharp.NSWindow.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSWindow(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSView
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSView> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSView>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSView __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSView(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSView __CreateInstance(global::wxSharp.NSView.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSView(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSView.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSView.__Internal));
            *(global::wxSharp.NSView.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSView(global::wxSharp.NSView.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSView(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSOpenGLContext
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSOpenGLContext> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSOpenGLContext>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSOpenGLContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSOpenGLContext(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSOpenGLContext __CreateInstance(global::wxSharp.NSOpenGLContext.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSOpenGLContext(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSOpenGLContext.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSOpenGLContext.__Internal));
            *(global::wxSharp.NSOpenGLContext.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSOpenGLContext(global::wxSharp.NSOpenGLContext.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSOpenGLContext(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSOpenGLPixelFormat
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSOpenGLPixelFormat> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSOpenGLPixelFormat>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSOpenGLPixelFormat __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSOpenGLPixelFormat(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSOpenGLPixelFormat __CreateInstance(global::wxSharp.NSOpenGLPixelFormat.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSOpenGLPixelFormat(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSOpenGLPixelFormat.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSOpenGLPixelFormat.__Internal));
            *(global::wxSharp.NSOpenGLPixelFormat.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSOpenGLPixelFormat(global::wxSharp.NSOpenGLPixelFormat.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSOpenGLPixelFormat(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSPrintInfo
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPrintInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPrintInfo>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSPrintInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPrintInfo(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSPrintInfo __CreateInstance(global::wxSharp.NSPrintInfo.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPrintInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSPrintInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSPrintInfo.__Internal));
            *(global::wxSharp.NSPrintInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSPrintInfo(global::wxSharp.NSPrintInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSPrintInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSGestureRecognizer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSGestureRecognizer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSGestureRecognizer>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSGestureRecognizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSGestureRecognizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSGestureRecognizer __CreateInstance(global::wxSharp.NSGestureRecognizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSGestureRecognizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSGestureRecognizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSGestureRecognizer.__Internal));
            *(global::wxSharp.NSGestureRecognizer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSGestureRecognizer(global::wxSharp.NSGestureRecognizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSGestureRecognizer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSPanGestureRecognizer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPanGestureRecognizer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPanGestureRecognizer>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSPanGestureRecognizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPanGestureRecognizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSPanGestureRecognizer __CreateInstance(global::wxSharp.NSPanGestureRecognizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPanGestureRecognizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSPanGestureRecognizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSPanGestureRecognizer.__Internal));
            *(global::wxSharp.NSPanGestureRecognizer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSPanGestureRecognizer(global::wxSharp.NSPanGestureRecognizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSPanGestureRecognizer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSMagnificationGestureRecognizer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMagnificationGestureRecognizer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSMagnificationGestureRecognizer>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSMagnificationGestureRecognizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMagnificationGestureRecognizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSMagnificationGestureRecognizer __CreateInstance(global::wxSharp.NSMagnificationGestureRecognizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSMagnificationGestureRecognizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSMagnificationGestureRecognizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSMagnificationGestureRecognizer.__Internal));
            *(global::wxSharp.NSMagnificationGestureRecognizer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSMagnificationGestureRecognizer(global::wxSharp.NSMagnificationGestureRecognizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSMagnificationGestureRecognizer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSRotationGestureRecognizer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSRotationGestureRecognizer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSRotationGestureRecognizer>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSRotationGestureRecognizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSRotationGestureRecognizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSRotationGestureRecognizer __CreateInstance(global::wxSharp.NSRotationGestureRecognizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSRotationGestureRecognizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSRotationGestureRecognizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSRotationGestureRecognizer.__Internal));
            *(global::wxSharp.NSRotationGestureRecognizer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSRotationGestureRecognizer(global::wxSharp.NSRotationGestureRecognizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSRotationGestureRecognizer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSPressGestureRecognizer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPressGestureRecognizer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPressGestureRecognizer>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSPressGestureRecognizer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPressGestureRecognizer(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSPressGestureRecognizer __CreateInstance(global::wxSharp.NSPressGestureRecognizer.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPressGestureRecognizer(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSPressGestureRecognizer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSPressGestureRecognizer.__Internal));
            *(global::wxSharp.NSPressGestureRecognizer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSPressGestureRecognizer(global::wxSharp.NSPressGestureRecognizer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSPressGestureRecognizer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSTouch
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTouch> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSTouch>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSTouch __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTouch(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSTouch __CreateInstance(global::wxSharp.NSTouch.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSTouch(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSTouch.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSTouch.__Internal));
            *(global::wxSharp.NSTouch.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSTouch(global::wxSharp.NSTouch.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSTouch(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class NSPasteboard
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPasteboard> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.NSPasteboard>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.NSPasteboard __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPasteboard(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NSPasteboard __CreateInstance(global::wxSharp.NSPasteboard.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NSPasteboard(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NSPasteboard.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NSPasteboard.__Internal));
            *(global::wxSharp.NSPasteboard.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private NSPasteboard(global::wxSharp.NSPasteboard.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NSPasteboard(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class WebView
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WebView> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.WebView>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.WebView __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.WebView(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.WebView __CreateInstance(global::wxSharp.WebView.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.WebView(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.WebView.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WebView.__Internal));
            *(global::wxSharp.WebView.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private WebView(global::wxSharp.WebView.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WebView(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class defs
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxPtrToUIntPKv")]
            internal static extern uint PtrToUInt(global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxUIntToPtrm")]
            internal static extern global::System.IntPtr UIntToPtr(uint p);
        }

        public static uint PtrToUInt(global::System.IntPtr p)
        {
            var __ret = __Internal.PtrToUInt(p);
            return __ret;
        }

        public static global::System.IntPtr UIntToPtr(uint p)
        {
            var __ret = __Internal.UIntToPtr(p);
            return __ret;
        }
    }
}
