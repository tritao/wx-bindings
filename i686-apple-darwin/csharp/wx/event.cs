// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum EventCategory : uint
    {
        EVT_CATEGORY_UI = 1,
        EVT_CATEGORY_USER_INPUT = 2,
        EVT_CATEGORY_SOCKET = 4,
        EVT_CATEGORY_TIMER = 8,
        EVT_CATEGORY_THREAD = 16,
        EVT_CATEGORY_UNKNOWN = 32,
        EVT_CATEGORY_CLIPBOARD = 64,
        EVT_CATEGORY_NATIVE_EVENTS = 3,
        EVT_CATEGORY_ALL = 127
    }

    public enum UpdateUIMode : uint
    {
        UPDATE_UI_PROCESS_ALL = 0,
        UPDATE_UI_PROCESS_SPECIFIED = 1
    }

    public enum MouseWheelAxis : uint
    {
        MOUSE_WHEEL_VERTICAL = 0,
        MOUSE_WHEEL_HORIZONTAL = 1
    }

    public enum IdleMode : uint
    {
        IDLE_PROCESS_ALL = 0,
        IDLE_PROCESS_SPECIFIED = 1
    }

    public enum JoystickId : uint
    {
        JOYSTICK1 = 0,
        JOYSTICK2 = 1
    }

    [Flags]
    public enum JoystickButton
    {
        JOY_BUTTON_ANY = -1,
        JOY_BUTTON1 = 1,
        JOY_BUTTON2 = 2,
        JOY_BUTTON3 = 4,
        JOY_BUTTON4 = 8
    }

    public enum EventPropagation : uint
    {
        EVENT_PROPAGATE_NONE = 0,
        EVENT_PROPAGATE_MAX = 2147483647
    }

    public enum KeyCategoryFlags : uint
    {
        WXK_CATEGORY_ARROW = 1,
        WXK_CATEGORY_PAGING = 2,
        WXK_CATEGORY_JUMP = 4,
        WXK_CATEGORY_TAB = 8,
        WXK_CATEGORY_CUT = 16,
        WXK_CATEGORY_NAVIGATION = 7
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void EventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void IdleEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ThreadEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void CommandEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ScrollEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ScrollWinEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void SizeEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void MoveEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PaintEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void NcPaintEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void EraseEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void MouseEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void CharEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void FocusEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ChildFocusEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ActivateEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void MenuEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void JoystickEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void DropFilesEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void InitDialogEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void SysColourChangedEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void DisplayChangedEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void DPIChangedEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void UpdateUIEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void CloseEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ShowEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void IconizeEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void MaximizeEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void NavigationKeyEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PaletteChangedEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void QueryNewPaletteEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void WindowCreateEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void WindowDestroyEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void SetCursorEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void NotifyEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void HelpEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ContextMenuEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void MouseCaptureChangedEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void MouseCaptureLostEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ClipboardTextEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PanGestureEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ZoomGestureEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void RotateGestureEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void TwoFingerTapEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void LongPressEventFunction(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void PressAndTapEventFunction(global::System.IntPtr _0);

    public unsafe partial class Menu
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Menu> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Menu>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.Menu __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Menu(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Menu __CreateInstance(global::wxSharp.Menu.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Menu(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Menu.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Menu.__Internal));
            *(global::wxSharp.Menu.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Menu(global::wxSharp.Menu.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Menu(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    namespace EventTypeTag
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_type;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI13wxThreadEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxThreadEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI13wxThreadEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxThreadEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI22wxAsyncMethodCallEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxAsyncMethodCallEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI22wxAsyncMethodCallEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxAsyncMethodCallEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI12wxMouseEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxMouseEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI12wxMouseEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxMouseEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI12wxFocusEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxFocusEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI12wxFocusEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxFocusEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI17wxChildFocusEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxChildFocusEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI17wxChildFocusEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxChildFocusEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI10wxKeyEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxKeyEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI10wxKeyEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxKeyEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI20wxNavigationKeyEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxNavigationKeyEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI20wxNavigationKeyEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxNavigationKeyEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI16wxSetCursorEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxSetCursorEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI16wxSetCursorEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxSetCursorEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI17wxPanGestureEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxPanGestureEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI17wxPanGestureEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxPanGestureEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI18wxZoomGestureEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxZoomGestureEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI18wxZoomGestureEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxZoomGestureEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI20wxRotateGestureEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxRotateGestureEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI20wxRotateGestureEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxRotateGestureEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI19wxTwoFingerTapEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxTwoFingerTapEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI19wxTwoFingerTapEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxTwoFingerTapEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI16wxLongPressEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxLongPressEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI16wxLongPressEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxLongPressEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI18wxPressAndTapEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxPressAndTapEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI18wxPressAndTapEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxPressAndTapEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI11wxSizeEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxSizeEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI11wxSizeEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxSizeEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI11wxMoveEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxMoveEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI11wxMoveEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxMoveEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI12wxCloseEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxCloseEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI12wxCloseEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxCloseEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI11wxShowEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxShowEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI11wxShowEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxShowEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI14wxIconizeEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxIconizeEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI14wxIconizeEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxIconizeEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI15wxMaximizeEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxMaximizeEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI15wxMaximizeEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxMaximizeEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI26wxMouseCaptureChangedEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxMouseCaptureChangedEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI26wxMouseCaptureChangedEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxMouseCaptureChangedEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI23wxMouseCaptureLostEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxMouseCaptureLostEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI23wxMouseCaptureLostEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxMouseCaptureLostEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI12wxEraseEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxEraseEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI12wxEraseEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxEraseEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI23wxSysColourChangedEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxSysColourChangedEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI23wxSysColourChangedEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxSysColourChangedEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI21wxDisplayChangedEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxDisplayChangedEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI21wxDisplayChangedEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxDisplayChangedEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI17wxDPIChangedEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxDPIChangedEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI17wxDPIChangedEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxDPIChangedEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI22wxQueryNewPaletteEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxQueryNewPaletteEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI22wxQueryNewPaletteEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxQueryNewPaletteEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI21wxPaletteChangedEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxPaletteChangedEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI21wxPaletteChangedEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxPaletteChangedEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI15wxJoystickEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxJoystickEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI15wxJoystickEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxJoystickEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI17wxInitDialogEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxInitDialogEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI17wxInitDialogEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxInitDialogEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI11wxIdleEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxIdleEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI11wxIdleEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxIdleEvent(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI15wxUpdateUIEventEC2Ei")]
            internal static extern void ctorc__S_wxEventTypeTag____S_wxUpdateUIEvent(global::System.IntPtr __instance, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventTypeTagI15wxUpdateUIEventEC2ERKS1_")]
            internal static extern void cctorc__S_wxEventTypeTag____S_wxUpdateUIEvent(global::System.IntPtr __instance, global::System.IntPtr _0);
        }
    }

    public unsafe partial class EventTypeTag<T> : IDisposable
    {
        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.EventTypeTag<T>> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.EventTypeTag<T>>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.EventTypeTag<T> __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.EventTypeTag<T>(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.EventTypeTag<T> __CreateInstance(global::wxSharp.EventTypeTag.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.EventTypeTag<T>(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.EventTypeTag.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
            *(global::wxSharp.EventTypeTag.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EventTypeTag(global::wxSharp.EventTypeTag.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EventTypeTag(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EventTypeTag(int type)
        {
            var __T = typeof(T);
            if (__T.IsAssignableFrom(typeof(global::wxSharp.ThreadEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxThreadEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.AsyncMethodCallEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxAsyncMethodCallEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.MouseEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxMouseEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.FocusEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxFocusEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.ChildFocusEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxChildFocusEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.KeyEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxKeyEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.NavigationKeyEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxNavigationKeyEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.SetCursorEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxSetCursorEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.PanGestureEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxPanGestureEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.ZoomGestureEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxZoomGestureEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.RotateGestureEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxRotateGestureEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.TwoFingerTapEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxTwoFingerTapEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.LongPressEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxLongPressEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.PressAndTapEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxPressAndTapEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.SizeEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxSizeEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.MoveEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxMoveEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.CloseEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxCloseEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.ShowEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxShowEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.IconizeEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxIconizeEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.MaximizeEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxMaximizeEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.MouseCaptureChangedEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxMouseCaptureChangedEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.MouseCaptureLostEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxMouseCaptureLostEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.EraseEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxEraseEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.SysColourChangedEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxSysColourChangedEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.DisplayChangedEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxDisplayChangedEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.DPIChangedEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxDPIChangedEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.QueryNewPaletteEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxQueryNewPaletteEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.PaletteChangedEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxPaletteChangedEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.JoystickEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxJoystickEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.InitDialogEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxInitDialogEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.IdleEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxIdleEvent(__Instance, type);
                return;
            }
            if (__T.IsAssignableFrom(typeof(global::wxSharp.UpdateUIEvent)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTypeTag.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::wxSharp.EventTypeTag.__Internal.ctorc__S_wxEventTypeTag____S_wxUpdateUIEvent(__Instance, type);
                return;
            }
            throw new ArgumentOutOfRangeException("T", string.Join(", ", new[] { typeof(T).FullName }), "global::wxSharp.EventTypeTag<T> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::wxSharp.ThreadEvent>, <global::wxSharp.AsyncMethodCallEvent>, <global::wxSharp.MouseEvent>, <global::wxSharp.FocusEvent>, <global::wxSharp.ChildFocusEvent>, <global::wxSharp.KeyEvent>, <global::wxSharp.NavigationKeyEvent>, <global::wxSharp.SetCursorEvent>, <global::wxSharp.PanGestureEvent>, <global::wxSharp.ZoomGestureEvent>, <global::wxSharp.RotateGestureEvent>, <global::wxSharp.TwoFingerTapEvent>, <global::wxSharp.LongPressEvent>, <global::wxSharp.PressAndTapEvent>, <global::wxSharp.SizeEvent>, <global::wxSharp.MoveEvent>, <global::wxSharp.CloseEvent>, <global::wxSharp.ShowEvent>, <global::wxSharp.IconizeEvent>, <global::wxSharp.MaximizeEvent>, <global::wxSharp.MouseCaptureChangedEvent>, <global::wxSharp.MouseCaptureLostEvent>, <global::wxSharp.EraseEvent>, <global::wxSharp.SysColourChangedEvent>, <global::wxSharp.DisplayChangedEvent>, <global::wxSharp.DPIChangedEvent>, <global::wxSharp.QueryNewPaletteEvent>, <global::wxSharp.PaletteChangedEvent>, <global::wxSharp.JoystickEvent>, <global::wxSharp.InitDialogEvent>, <global::wxSharp.IdleEvent>, <global::wxSharp.UpdateUIEvent>.");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.EventTypeTag<T> __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class SpinEvent
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.SpinEvent> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.SpinEvent>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.SpinEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.SpinEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.SpinEvent __CreateInstance(global::wxSharp.SpinEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.SpinEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.SpinEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.SpinEvent.__Internal));
            *(global::wxSharp.SpinEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private SpinEvent(global::wxSharp.SpinEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SpinEvent(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial interface IwxEvtHandler : global::wxSharp.IwxObject
    {
        global::wxSharp.IwxEvtHandler GetNextHandler();

        global::wxSharp.IwxEvtHandler GetPreviousHandler();

        void SetNextHandler(global::wxSharp.IwxEvtHandler handler);

        void SetPreviousHandler(global::wxSharp.IwxEvtHandler handler);

        void SetEvtHandlerEnabled(bool enabled);

        bool GetEvtHandlerEnabled();

        void Unlink();

        bool IsUnlinked();

        bool ProcessEvent(global::wxSharp.Event @event);

        bool SafelyProcessEvent(global::wxSharp.Event @event);

        bool ProcessEventLocally(global::wxSharp.Event @event);

        void QueueEvent(global::wxSharp.Event @event);

        void AddPendingEvent(global::wxSharp.Event @event);

        void ProcessPendingEvents();

        void DeletePendingEvents();

        bool ProcessThreadEvent(global::wxSharp.Event @event);

        void SetClientData(global::System.IntPtr data);

        global::System.IntPtr GetClientData();

        bool SearchDynamicEventTable(global::wxSharp.Event @event);

        void ClearEventHashTable();

        void OnSinkDestroyed(global::wxSharp.IwxEvtHandler sink);

        global::System.IntPtr __PointerTowxEvtHandler { get; }
    }

    public unsafe abstract partial class Event : global::wxSharp.Object, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEventC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid, int commandType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent12SetEventTypeEi")]
            internal static extern void SetEventType(global::System.IntPtr __instance, int typ);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent12GetEventTypeEv")]
            internal static extern int GetEventType(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent14GetEventObjectEv")]
            internal static extern global::System.IntPtr GetEventObject(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent14SetEventObjectEP8wxObject")]
            internal static extern void SetEventObject(global::System.IntPtr __instance, global::System.IntPtr obj);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent12GetTimestampEv")]
            internal static extern int GetTimestamp(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent12SetTimestampEl")]
            internal static extern void SetTimestamp(global::System.IntPtr __instance, int ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent5GetIdEv")]
            internal static extern int GetId(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent5SetIdEi")]
            internal static extern void SetId(global::System.IntPtr __instance, int Id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent16GetEventUserDataEv")]
            internal static extern global::System.IntPtr GetEventUserData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent4SkipEb")]
            internal static extern void Skip(global::System.IntPtr __instance, bool skip);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent10GetSkippedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSkipped(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent14IsCommandEventEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsCommandEvent(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent15ShouldPropagateEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ShouldPropagate(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent15StopPropagationEv")]
            internal static extern int StopPropagation(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent17ResumePropagationEi")]
            internal static extern void ResumePropagation(global::System.IntPtr __instance, int propagationLevel);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent17GetPropagatedFromEv")]
            internal static extern global::System.IntPtr GetPropagatedFrom(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent12WasProcessedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WasProcessed(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent23SetWillBeProcessedAgainEv")]
            internal static extern void SetWillBeProcessedAgain(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent20WillBeProcessedAgainEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool WillBeProcessedAgain(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent19ShouldProcessOnlyInEP12wxEvtHandler")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ShouldProcessOnlyIn(global::System.IntPtr __instance, global::System.IntPtr h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent24DidntHonourProcessOnlyInEv")]
            internal static extern void DidntHonourProcessOnlyIn(global::System.IntPtr __instance);
        }

        internal static new global::wxSharp.Event __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.EventInternal(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Event __CreateInstance(global::wxSharp.Event.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.EventInternal(native, skipVTables);
        }

        protected Event(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        protected Event(int winid, int commandType)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Event.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid, commandType);
            SetupVTables(GetType().FullName == "wxSharp.Event");
        }

        protected Event(global::wxSharp.Event _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Event.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.Event");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.IwxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.Event.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetEventType(int typ)
        {
            __Internal.SetEventType(__Instance, typ);
        }

        public int GetEventType()
        {
            var __ret = __Internal.GetEventType(__Instance);
            return __ret;
        }

        public global::wxSharp.IwxObject GetEventObject()
        {
            var __ret = __Internal.GetEventObject(__Instance);
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public void SetEventObject(global::wxSharp.IwxObject obj)
        {
            var __arg0 = ReferenceEquals(obj, null) ? global::System.IntPtr.Zero : obj.__PointerToObject;
            __Internal.SetEventObject(__Instance, __arg0);
        }

        public int GetTimestamp()
        {
            var __ret = __Internal.GetTimestamp(__Instance);
            return __ret;
        }

        public void SetTimestamp(int ts)
        {
            __Internal.SetTimestamp(__Instance, ts);
        }

        public int GetId()
        {
            var __ret = __Internal.GetId(__Instance);
            return __ret;
        }

        public void SetId(int Id)
        {
            __Internal.SetId(__Instance, Id);
        }

        public global::wxSharp.IwxObject GetEventUserData()
        {
            var __ret = __Internal.GetEventUserData(__Instance);
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public void Skip(bool skip)
        {
            __Internal.Skip(__Instance, skip);
        }

        public bool GetSkipped()
        {
            var __ret = __Internal.GetSkipped(__Instance);
            return __ret;
        }

        public abstract global::wxSharp.Event Clone();

        public virtual global::wxSharp.EventCategory GetEventCategory()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___GetEventCategoryDelegate = (global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr));
            var __ret = ___GetEventCategoryDelegate(__Instance);
            return __ret;
        }

        public bool IsCommandEvent()
        {
            var __ret = __Internal.IsCommandEvent(__Instance);
            return __ret;
        }

        public bool ShouldPropagate()
        {
            var __ret = __Internal.ShouldPropagate(__Instance);
            return __ret;
        }

        public int StopPropagation()
        {
            var __ret = __Internal.StopPropagation(__Instance);
            return __ret;
        }

        public void ResumePropagation(int propagationLevel)
        {
            __Internal.ResumePropagation(__Instance, propagationLevel);
        }

        public global::wxSharp.IwxEvtHandler GetPropagatedFrom()
        {
            var __ret = __Internal.GetPropagatedFrom(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public bool WasProcessed()
        {
            var __ret = __Internal.WasProcessed(__Instance);
            return __ret;
        }

        public void SetWillBeProcessedAgain()
        {
            __Internal.SetWillBeProcessedAgain(__Instance);
        }

        public bool WillBeProcessedAgain()
        {
            var __ret = __Internal.WillBeProcessedAgain(__Instance);
            return __ret;
        }

        public bool ShouldProcessOnlyIn(global::wxSharp.IwxEvtHandler h)
        {
            var __arg0 = ReferenceEquals(h, null) ? global::System.IntPtr.Zero : h.__PointerToEvtHandler;
            var __ret = __Internal.ShouldProcessOnlyIn(__Instance, __arg0);
            return __ret;
        }

        public void DidntHonourProcessOnlyIn()
        {
            __Internal.DidntHonourProcessOnlyIn(__Instance);
        }

        protected global::wxSharp.IwxObject m_eventObject
        {
            get
            {
                global::wxSharp.Object __result0;
                if (((global::wxSharp.Event.__Internal*) __Instance)->m_eventObject == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(((global::wxSharp.Event.__Internal*) __Instance)->m_eventObject))
                    __result0 = (global::wxSharp.Object) global::wxSharp.Object.NativeToManagedMap[((global::wxSharp.Event.__Internal*) __Instance)->m_eventObject];
                else global::wxSharp.Object.NativeToManagedMap[((global::wxSharp.Event.__Internal*) __Instance)->m_eventObject] = __result0 = (global::wxSharp.Object) global::wxSharp.Object.__CreateInstance(((global::wxSharp.Event.__Internal*) __Instance)->m_eventObject);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_eventObject = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected int m_eventType
        {
            get
            {
                return ((global::wxSharp.Event.__Internal*) __Instance)->m_eventType;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_eventType = value;
            }
        }

        protected int m_timeStamp
        {
            get
            {
                return ((global::wxSharp.Event.__Internal*) __Instance)->m_timeStamp;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_timeStamp = value;
            }
        }

        protected int m_id
        {
            get
            {
                return ((global::wxSharp.Event.__Internal*) __Instance)->m_id;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_id = value;
            }
        }

        public global::wxSharp.IwxObject m_callbackUserData
        {
            get
            {
                global::wxSharp.Object __result0;
                if (((global::wxSharp.Event.__Internal*) __Instance)->m_callbackUserData == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(((global::wxSharp.Event.__Internal*) __Instance)->m_callbackUserData))
                    __result0 = (global::wxSharp.Object) global::wxSharp.Object.NativeToManagedMap[((global::wxSharp.Event.__Internal*) __Instance)->m_callbackUserData];
                else global::wxSharp.Object.NativeToManagedMap[((global::wxSharp.Event.__Internal*) __Instance)->m_callbackUserData] = __result0 = (global::wxSharp.Object) global::wxSharp.Object.__CreateInstance(((global::wxSharp.Event.__Internal*) __Instance)->m_callbackUserData);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_callbackUserData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected int m_propagationLevel
        {
            get
            {
                return ((global::wxSharp.Event.__Internal*) __Instance)->m_propagationLevel;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_propagationLevel = value;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_propagatedFrom
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.Event.__Internal*) __Instance)->m_propagatedFrom == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.Event.__Internal*) __Instance)->m_propagatedFrom))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.Event.__Internal*) __Instance)->m_propagatedFrom];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.Event.__Internal*) __Instance)->m_propagatedFrom] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.Event.__Internal*) __Instance)->m_propagatedFrom);
                return __result0;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_propagatedFrom = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_skipped
        {
            get
            {
                return ((global::wxSharp.Event.__Internal*) __Instance)->m_skipped != 0;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_skipped = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_isCommandEvent
        {
            get
            {
                return ((global::wxSharp.Event.__Internal*) __Instance)->m_isCommandEvent != 0;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_isCommandEvent = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_wasProcessed
        {
            get
            {
                return ((global::wxSharp.Event.__Internal*) __Instance)->m_wasProcessed != 0;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_wasProcessed = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_willBeProcessedAgain
        {
            get
            {
                return ((global::wxSharp.Event.__Internal*) __Instance)->m_willBeProcessedAgain != 0;
            }

            set
            {
                ((global::wxSharp.Event.__Internal*)__Instance)->m_willBeProcessedAgain = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // wxEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Event) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Event) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Event) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Event) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Event) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class PropagateOnce : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_event;

            [FieldOffset(4)]
            internal global::System.IntPtr m_propagatedFromOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxPropagateOnceC2ER7wxEventP12wxEvtHandler")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr @event, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxPropagateOnceD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PropagateOnce> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PropagateOnce>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.PropagateOnce __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PropagateOnce(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PropagateOnce __CreateInstance(global::wxSharp.PropagateOnce.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PropagateOnce(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PropagateOnce.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PropagateOnce.__Internal));
            *(global::wxSharp.PropagateOnce.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PropagateOnce(global::wxSharp.PropagateOnce.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PropagateOnce(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public PropagateOnce(global::wxSharp.Event @event, global::wxSharp.IwxEvtHandler handler)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PropagateOnce.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __arg1 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            __Internal.ctor(__Instance, __arg0, __arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.PropagateOnce __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class IdleEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal byte m_requestMore;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEventC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEvent11RequestMoreEb")]
            internal static extern void RequestMore(global::System.IntPtr __instance, bool needMore);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxIdleEvent13MoreRequestedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MoreRequested(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEvent7SetModeE10wxIdleMode")]
            internal static extern void SetMode(global::wxSharp.IdleMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEvent7GetModeEv")]
            internal static extern global::wxSharp.IdleMode GetMode();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.IdleEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.IdleEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.IdleEvent __CreateInstance(global::wxSharp.IdleEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.IdleEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.IdleEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.IdleEvent.__Internal));
            global::wxSharp.IdleEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private IdleEvent(global::wxSharp.IdleEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IdleEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public IdleEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.IdleEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.IdleEvent");
        }

        public IdleEvent(global::wxSharp.IdleEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.IdleEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.IdleEvent");
        }

        public void RequestMore(bool needMore)
        {
            __Internal.RequestMore(__Instance, needMore);
        }

        public bool MoreRequested()
        {
            var __ret = __Internal.MoreRequested(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static void SetMode(global::wxSharp.IdleMode mode)
        {
            __Internal.SetMode(mode);
        }

        public static global::wxSharp.IdleMode GetMode()
        {
            var __ret = __Internal.GetMode();
            return __ret;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected bool m_requestMore
        {
            get
            {
                return ((global::wxSharp.IdleEvent.__Internal*) __Instance)->m_requestMore != 0;
            }

            set
            {
                ((global::wxSharp.IdleEvent.__Internal*)__Instance)->m_requestMore = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // wxIdleEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IdleEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IdleEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IdleEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxIdleEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IdleEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IdleEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ThreadEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 112)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(48)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(68)]
            internal int m_commandInt;

            [FieldOffset(72)]
            internal int m_extraLong;

            [FieldOffset(80)]
            internal global::wxSharp.Any.__Internal m_payload;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxThreadEventC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int eventType, int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxThreadEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxThreadEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.ThreadEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ThreadEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ThreadEvent __CreateInstance(global::wxSharp.ThreadEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ThreadEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ThreadEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ThreadEvent.__Internal));
            global::wxSharp.ThreadEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ThreadEvent(global::wxSharp.ThreadEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ThreadEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ThreadEvent(int eventType, int id)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ThreadEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, eventType, id);
            SetupVTables(GetType().FullName == "wxSharp.ThreadEvent");
        }

        public ThreadEvent(global::wxSharp.ThreadEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ThreadEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ThreadEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.EventCategory GetEventCategory()
        {
            return base.GetEventCategory();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxThreadEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ThreadEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ThreadEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ThreadEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxThreadEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ThreadEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_THREAD; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ThreadEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe abstract partial class AsyncMethodCallEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxAsyncMethodCallEventC2EP8wxObject")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxAsyncMethodCallEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr other);
        }

        internal static new global::wxSharp.AsyncMethodCallEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.AsyncMethodCallEventInternal(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.AsyncMethodCallEvent __CreateInstance(global::wxSharp.AsyncMethodCallEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.AsyncMethodCallEventInternal(native, skipVTables);
        }

        protected AsyncMethodCallEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        protected AsyncMethodCallEvent(global::wxSharp.IwxObject @object)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.AsyncMethodCallEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__PointerToObject;
            __Internal.ctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.AsyncMethodCallEvent");
        }

        protected AsyncMethodCallEvent(global::wxSharp.AsyncMethodCallEvent other)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.AsyncMethodCallEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = other.__Instance;
            __Internal.cctor_1(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.AsyncMethodCallEvent");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.IwxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.AsyncMethodCallEvent.__Internal*) __Instance)->vptr_wxObject = new global::System.IntPtr(__OriginalVTables[0]);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public abstract void Execute();

        #region Virtual table interop

        // wxAsyncMethodCallEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AsyncMethodCallEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AsyncMethodCallEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AsyncMethodCallEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const = 0
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AsyncMethodCallEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AsyncMethodCallEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        // void Execute() = 0
        private static global::wxSharp.Delegates.Action_IntPtr _ExecuteDelegateInstance;

        private static void _ExecuteDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.AsyncMethodCallEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Execute();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
                _ExecuteDelegateInstance += _ExecuteDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_ExecuteDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class CommandEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCommandEventC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int commandType, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCommandEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCommandEvent13SetClientDataEPv")]
            internal static extern void SetClientData(global::System.IntPtr __instance, global::System.IntPtr clientData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent13GetClientDataEv")]
            internal static extern global::System.IntPtr GetClientData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent12GetSelectionEv")]
            internal static extern int GetSelection(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent9IsCheckedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsChecked(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent11IsSelectionEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsSelection(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCommandEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.CommandEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.CommandEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.CommandEvent __CreateInstance(global::wxSharp.CommandEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.CommandEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.CommandEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.CommandEvent.__Internal));
            global::wxSharp.CommandEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private CommandEvent(global::wxSharp.CommandEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CommandEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public CommandEvent(int commandType, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.CommandEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, commandType, winid);
            SetupVTables(GetType().FullName == "wxSharp.CommandEvent");
        }

        public CommandEvent(global::wxSharp.CommandEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.CommandEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.CommandEvent");
        }

        public void SetClientData(global::System.IntPtr clientData)
        {
            __Internal.SetClientData(__Instance, clientData);
        }

        public global::System.IntPtr GetClientData()
        {
            var __ret = __Internal.GetClientData(__Instance);
            return __ret;
        }

        public int GetSelection()
        {
            var __ret = __Internal.GetSelection(__Instance);
            return __ret;
        }

        public bool IsChecked()
        {
            var __ret = __Internal.IsChecked(__Instance);
            return __ret;
        }

        public bool IsSelection()
        {
            var __ret = __Internal.IsSelection(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.EventCategory GetEventCategory()
        {
            return base.GetEventCategory();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected global::System.IntPtr m_clientData
        {
            get
            {
                return ((global::wxSharp.CommandEvent.__Internal*) __Instance)->m_clientData;
            }

            set
            {
                ((global::wxSharp.CommandEvent.__Internal*)__Instance)->m_clientData = (global::System.IntPtr) value;
            }
        }

        #region Virtual table interop

        // wxCommandEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CommandEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CommandEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CommandEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxCommandEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CommandEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CommandEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class NotifyEvent : global::wxSharp.CommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 84)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(80)]
            internal byte m_bAllow;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEventC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int commandType, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEvent4VetoEv")]
            internal static extern void Veto(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEvent5AllowEv")]
            internal static extern void Allow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxNotifyEvent9IsAllowedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAllowed(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.NotifyEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NotifyEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NotifyEvent __CreateInstance(global::wxSharp.NotifyEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NotifyEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NotifyEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NotifyEvent.__Internal));
            global::wxSharp.NotifyEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private NotifyEvent(global::wxSharp.NotifyEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NotifyEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public NotifyEvent(int commandType, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.NotifyEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, commandType, winid);
            SetupVTables(GetType().FullName == "wxSharp.NotifyEvent");
        }

        public NotifyEvent(global::wxSharp.NotifyEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.NotifyEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.NotifyEvent");
        }

        public void Veto()
        {
            __Internal.Veto(__Instance);
        }

        public void Allow()
        {
            __Internal.Allow(__Instance);
        }

        public bool IsAllowed()
        {
            var __ret = __Internal.IsAllowed(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxNotifyEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NotifyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NotifyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NotifyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxNotifyEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NotifyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NotifyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ScrollEvent : global::wxSharp.CommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEventC2Eiiii")]
            internal static extern void ctor(global::System.IntPtr __instance, int commandType, int winid, int pos, int orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxScrollEvent14GetOrientationEv")]
            internal static extern int GetOrientation(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxScrollEvent11GetPositionEv")]
            internal static extern int GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEvent14SetOrientationEi")]
            internal static extern void SetOrientation(global::System.IntPtr __instance, int orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEvent11SetPositionEi")]
            internal static extern void SetPosition(global::System.IntPtr __instance, int pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.ScrollEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ScrollEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ScrollEvent __CreateInstance(global::wxSharp.ScrollEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ScrollEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ScrollEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ScrollEvent.__Internal));
            global::wxSharp.ScrollEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ScrollEvent(global::wxSharp.ScrollEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScrollEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ScrollEvent(int commandType, int winid, int pos, int orient)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ScrollEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, commandType, winid, pos, orient);
            SetupVTables(GetType().FullName == "wxSharp.ScrollEvent");
        }

        public ScrollEvent(global::wxSharp.ScrollEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ScrollEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ScrollEvent");
        }

        public int GetOrientation()
        {
            var __ret = __Internal.GetOrientation(__Instance);
            return __ret;
        }

        public int GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return __ret;
        }

        public void SetOrientation(int orient)
        {
            __Internal.SetOrientation(__Instance, orient);
        }

        public void SetPosition(int pos)
        {
            __Internal.SetPosition(__Instance, pos);
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxScrollEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxScrollEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ScrollWinEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal int m_commandInt;

            [FieldOffset(48)]
            internal int m_extraLong;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEventC2Eiii")]
            internal static extern void ctor(global::System.IntPtr __instance, int commandType, int pos, int orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxScrollWinEvent14GetOrientationEv")]
            internal static extern int GetOrientation(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxScrollWinEvent11GetPositionEv")]
            internal static extern int GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEvent14SetOrientationEi")]
            internal static extern void SetOrientation(global::System.IntPtr __instance, int orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEvent11SetPositionEi")]
            internal static extern void SetPosition(global::System.IntPtr __instance, int pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.ScrollWinEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ScrollWinEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ScrollWinEvent __CreateInstance(global::wxSharp.ScrollWinEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ScrollWinEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ScrollWinEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ScrollWinEvent.__Internal));
            global::wxSharp.ScrollWinEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ScrollWinEvent(global::wxSharp.ScrollWinEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScrollWinEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ScrollWinEvent(int commandType, int pos, int orient)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ScrollWinEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, commandType, pos, orient);
            SetupVTables(GetType().FullName == "wxSharp.ScrollWinEvent");
        }

        public ScrollWinEvent(global::wxSharp.ScrollWinEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ScrollWinEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ScrollWinEvent");
        }

        public int GetOrientation()
        {
            var __ret = __Internal.GetOrientation(__Instance);
            return __ret;
        }

        public int GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return __ret;
        }

        public void SetOrientation(int orient)
        {
            __Internal.SetOrientation(__Instance, orient);
        }

        public void SetPosition(int pos)
        {
            __Internal.SetPosition(__Instance, pos);
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected int m_commandInt
        {
            get
            {
                return ((global::wxSharp.ScrollWinEvent.__Internal*) __Instance)->m_commandInt;
            }

            set
            {
                ((global::wxSharp.ScrollWinEvent.__Internal*)__Instance)->m_commandInt = value;
            }
        }

        protected int m_extraLong
        {
            get
            {
                return ((global::wxSharp.ScrollWinEvent.__Internal*) __Instance)->m_extraLong;
            }

            set
            {
                ((global::wxSharp.ScrollWinEvent.__Internal*)__Instance)->m_extraLong = value;
            }
        }

        #region Virtual table interop

        // wxScrollWinEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollWinEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollWinEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollWinEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxScrollWinEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollWinEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ScrollWinEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class MouseEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal byte m_controlDown;

            [FieldOffset(44)]
            internal byte m_shiftDown;

            [FieldOffset(44)]
            internal byte m_altDown;

            [FieldOffset(44)]
            internal byte m_metaDown;

            [FieldOffset(44)]
            internal byte m_rawControlDown;

            [FieldOffset(45)]
            internal byte m_leftDown;

            [FieldOffset(45)]
            internal byte m_middleDown;

            [FieldOffset(45)]
            internal byte m_rightDown;

            [FieldOffset(45)]
            internal byte m_aux1Down;

            [FieldOffset(45)]
            internal byte m_aux2Down;

            [FieldOffset(48)]
            internal int m_x;

            [FieldOffset(52)]
            internal int m_y;

            [FieldOffset(56)]
            internal int m_clickCount;

            [FieldOffset(60)]
            internal global::wxSharp.MouseWheelAxis m_wheelAxis;

            [FieldOffset(64)]
            internal int m_wheelRotation;

            [FieldOffset(68)]
            internal int m_wheelDelta;

            [FieldOffset(72)]
            internal byte m_wheelInverted;

            [FieldOffset(76)]
            internal int m_linesPerAction;

            [FieldOffset(80)]
            internal int m_columnsPerAction;

            [FieldOffset(84)]
            internal float m_magnification;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMouseEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int mouseType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMouseEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8IsButtonEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsButton(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10ButtonDownEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ButtonDown(global::System.IntPtr __instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent12ButtonDClickEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ButtonDClick(global::System.IntPtr __instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8ButtonUpEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ButtonUp(global::System.IntPtr __instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6ButtonEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Button(global::System.IntPtr __instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent9GetButtonEv")]
            internal static extern int GetButton(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8LeftDownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LeftDown(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10MiddleDownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MiddleDown(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent9RightDownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RightDown(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8Aux1DownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Aux1Down(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8Aux2DownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Aux2Down(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6LeftUpEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LeftUp(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8MiddleUpEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MiddleUp(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent7RightUpEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RightUp(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6Aux1UpEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Aux1Up(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6Aux2UpEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Aux2Up(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10LeftDClickEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool LeftDClick(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent12MiddleDClickEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MiddleDClick(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent11RightDClickEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RightDClick(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10Aux1DClickEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Aux1DClick(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10Aux2DClickEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Aux2DClick(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent7MagnifyEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Magnify(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8DraggingEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Dragging(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6MovingEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Moving(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8EnteringEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Entering(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent7LeavingEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Leaving(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent13GetClickCountEv")]
            internal static extern int GetClickCount(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent18GetLogicalPositionERK4wxDC")]
            internal static extern global::wxSharp.Point.__Internal GetLogicalPosition(global::System.IntPtr __instance, global::System.IntPtr dc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent16GetWheelRotationEv")]
            internal static extern int GetWheelRotation(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent13GetWheelDeltaEv")]
            internal static extern int GetWheelDelta(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent15IsWheelInvertedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWheelInverted(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent12GetWheelAxisEv")]
            internal static extern global::wxSharp.MouseWheelAxis GetWheelAxis(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent17GetLinesPerActionEv")]
            internal static extern int GetLinesPerAction(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent19GetColumnsPerActionEv")]
            internal static extern int GetColumnsPerAction(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent12IsPageScrollEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPageScroll(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent16GetMagnificationEv")]
            internal static extern float GetMagnification(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMouseEvent6AssignERKS_")]
            internal static extern void Assign(global::System.IntPtr __instance, global::System.IntPtr evt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMouseEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.MouseEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.MouseEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.MouseEvent __CreateInstance(global::wxSharp.MouseEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.MouseEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.MouseEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.MouseEvent.__Internal));
            global::wxSharp.MouseEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MouseEvent(global::wxSharp.MouseEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MouseEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public MouseEvent(int mouseType)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MouseEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, mouseType);
            SetupVTables(GetType().FullName == "wxSharp.MouseEvent");
        }

        public MouseEvent(global::wxSharp.MouseEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MouseEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.MouseEvent");
        }

        public bool IsButton()
        {
            var __ret = __Internal.IsButton(__Instance);
            return __ret;
        }

        public bool ButtonDown(int but)
        {
            var __ret = __Internal.ButtonDown(__Instance, but);
            return __ret;
        }

        public bool ButtonDClick(int but)
        {
            var __ret = __Internal.ButtonDClick(__Instance, but);
            return __ret;
        }

        public bool ButtonUp(int but)
        {
            var __ret = __Internal.ButtonUp(__Instance, but);
            return __ret;
        }

        public bool Button(int but)
        {
            var __ret = __Internal.Button(__Instance, but);
            return __ret;
        }

        public int GetButton()
        {
            var __ret = __Internal.GetButton(__Instance);
            return __ret;
        }

        public bool LeftDown()
        {
            var __ret = __Internal.LeftDown(__Instance);
            return __ret;
        }

        public bool MiddleDown()
        {
            var __ret = __Internal.MiddleDown(__Instance);
            return __ret;
        }

        public bool RightDown()
        {
            var __ret = __Internal.RightDown(__Instance);
            return __ret;
        }

        public bool Aux1Down()
        {
            var __ret = __Internal.Aux1Down(__Instance);
            return __ret;
        }

        public bool Aux2Down()
        {
            var __ret = __Internal.Aux2Down(__Instance);
            return __ret;
        }

        public bool LeftUp()
        {
            var __ret = __Internal.LeftUp(__Instance);
            return __ret;
        }

        public bool MiddleUp()
        {
            var __ret = __Internal.MiddleUp(__Instance);
            return __ret;
        }

        public bool RightUp()
        {
            var __ret = __Internal.RightUp(__Instance);
            return __ret;
        }

        public bool Aux1Up()
        {
            var __ret = __Internal.Aux1Up(__Instance);
            return __ret;
        }

        public bool Aux2Up()
        {
            var __ret = __Internal.Aux2Up(__Instance);
            return __ret;
        }

        public bool LeftDClick()
        {
            var __ret = __Internal.LeftDClick(__Instance);
            return __ret;
        }

        public bool MiddleDClick()
        {
            var __ret = __Internal.MiddleDClick(__Instance);
            return __ret;
        }

        public bool RightDClick()
        {
            var __ret = __Internal.RightDClick(__Instance);
            return __ret;
        }

        public bool Aux1DClick()
        {
            var __ret = __Internal.Aux1DClick(__Instance);
            return __ret;
        }

        public bool Aux2DClick()
        {
            var __ret = __Internal.Aux2DClick(__Instance);
            return __ret;
        }

        public bool Magnify()
        {
            var __ret = __Internal.Magnify(__Instance);
            return __ret;
        }

        public bool Dragging()
        {
            var __ret = __Internal.Dragging(__Instance);
            return __ret;
        }

        public bool Moving()
        {
            var __ret = __Internal.Moving(__Instance);
            return __ret;
        }

        public bool Entering()
        {
            var __ret = __Internal.Entering(__Instance);
            return __ret;
        }

        public bool Leaving()
        {
            var __ret = __Internal.Leaving(__Instance);
            return __ret;
        }

        public int GetClickCount()
        {
            var __ret = __Internal.GetClickCount(__Instance);
            return __ret;
        }

        public global::wxSharp.Point GetLogicalPosition(global::wxSharp.DC dc)
        {
            if (ReferenceEquals(dc, null))
                throw new global::System.ArgumentNullException("dc", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = dc.__Instance;
            var __ret = __Internal.GetLogicalPosition(__Instance, __arg0);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public int GetWheelRotation()
        {
            var __ret = __Internal.GetWheelRotation(__Instance);
            return __ret;
        }

        public int GetWheelDelta()
        {
            var __ret = __Internal.GetWheelDelta(__Instance);
            return __ret;
        }

        public bool IsWheelInverted()
        {
            var __ret = __Internal.IsWheelInverted(__Instance);
            return __ret;
        }

        public global::wxSharp.MouseWheelAxis GetWheelAxis()
        {
            var __ret = __Internal.GetWheelAxis(__Instance);
            return __ret;
        }

        public int GetLinesPerAction()
        {
            var __ret = __Internal.GetLinesPerAction(__Instance);
            return __ret;
        }

        public int GetColumnsPerAction()
        {
            var __ret = __Internal.GetColumnsPerAction(__Instance);
            return __ret;
        }

        public bool IsPageScroll()
        {
            var __ret = __Internal.IsPageScroll(__Instance);
            return __ret;
        }

        public float GetMagnification()
        {
            var __ret = __Internal.GetMagnification(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.EventCategory GetEventCategory()
        {
            return base.GetEventCategory();
        }

        protected void Assign(global::wxSharp.MouseEvent evt)
        {
            if (ReferenceEquals(evt, null))
                throw new global::System.ArgumentNullException("evt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = evt.__Instance;
            __Internal.Assign(__Instance, __arg0);
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public int m_clickCount
        {
            get
            {
                return ((global::wxSharp.MouseEvent.__Internal*) __Instance)->m_clickCount;
            }

            set
            {
                ((global::wxSharp.MouseEvent.__Internal*)__Instance)->m_clickCount = value;
            }
        }

        public global::wxSharp.MouseWheelAxis m_wheelAxis
        {
            get
            {
                return ((global::wxSharp.MouseEvent.__Internal*) __Instance)->m_wheelAxis;
            }

            set
            {
                ((global::wxSharp.MouseEvent.__Internal*)__Instance)->m_wheelAxis = value;
            }
        }

        public int m_wheelRotation
        {
            get
            {
                return ((global::wxSharp.MouseEvent.__Internal*) __Instance)->m_wheelRotation;
            }

            set
            {
                ((global::wxSharp.MouseEvent.__Internal*)__Instance)->m_wheelRotation = value;
            }
        }

        public int m_wheelDelta
        {
            get
            {
                return ((global::wxSharp.MouseEvent.__Internal*) __Instance)->m_wheelDelta;
            }

            set
            {
                ((global::wxSharp.MouseEvent.__Internal*)__Instance)->m_wheelDelta = value;
            }
        }

        public bool m_wheelInverted
        {
            get
            {
                return ((global::wxSharp.MouseEvent.__Internal*) __Instance)->m_wheelInverted != 0;
            }

            set
            {
                ((global::wxSharp.MouseEvent.__Internal*)__Instance)->m_wheelInverted = (byte) (value ? 1 : 0);
            }
        }

        public int m_linesPerAction
        {
            get
            {
                return ((global::wxSharp.MouseEvent.__Internal*) __Instance)->m_linesPerAction;
            }

            set
            {
                ((global::wxSharp.MouseEvent.__Internal*)__Instance)->m_linesPerAction = value;
            }
        }

        public int m_columnsPerAction
        {
            get
            {
                return ((global::wxSharp.MouseEvent.__Internal*) __Instance)->m_columnsPerAction;
            }

            set
            {
                ((global::wxSharp.MouseEvent.__Internal*)__Instance)->m_columnsPerAction = value;
            }
        }

        public float m_magnification
        {
            get
            {
                return ((global::wxSharp.MouseEvent.__Internal*) __Instance)->m_magnification;
            }

            set
            {
                ((global::wxSharp.MouseEvent.__Internal*)__Instance)->m_magnification = value;
            }
        }

        #region Virtual table interop

        // wxMouseEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxMouseEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class SetCursorEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 60)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal int m_x;

            [FieldOffset(48)]
            internal int m_y;

            [FieldOffset(52)]
            internal global::wxSharp.Cursor.__Internal m_cursor;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxSetCursorEventC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxSetCursorEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxSetCursorEvent4GetXEv")]
            internal static extern int GetX(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxSetCursorEvent4GetYEv")]
            internal static extern int GetY(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxSetCursorEvent9HasCursorEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool HasCursor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxSetCursorEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.SetCursorEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.SetCursorEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.SetCursorEvent __CreateInstance(global::wxSharp.SetCursorEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.SetCursorEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.SetCursorEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.SetCursorEvent.__Internal));
            global::wxSharp.SetCursorEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private SetCursorEvent(global::wxSharp.SetCursorEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SetCursorEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public SetCursorEvent(int x, int y)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SetCursorEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, x, y);
            SetupVTables(GetType().FullName == "wxSharp.SetCursorEvent");
        }

        public SetCursorEvent(global::wxSharp.SetCursorEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SetCursorEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.SetCursorEvent");
        }

        public int GetX()
        {
            var __ret = __Internal.GetX(__Instance);
            return __ret;
        }

        public int GetY()
        {
            var __ret = __Internal.GetY(__Instance);
            return __ret;
        }

        public bool HasCursor()
        {
            var __ret = __Internal.HasCursor(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxSetCursorEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SetCursorEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SetCursorEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SetCursorEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxSetCursorEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SetCursorEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SetCursorEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class GestureEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(52)]
            internal byte m_isStart;

            [FieldOffset(53)]
            internal byte m_isEnd;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGestureEventC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid, int type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGestureEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGestureEvent11SetPositionERK7wxPoint")]
            internal static extern void SetPosition(global::System.IntPtr __instance, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxGestureEvent14IsGestureStartEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGestureStart(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGestureEvent15SetGestureStartEb")]
            internal static extern void SetGestureStart(global::System.IntPtr __instance, bool isStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxGestureEvent12IsGestureEndEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsGestureEnd(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGestureEvent13SetGestureEndEb")]
            internal static extern void SetGestureEnd(global::System.IntPtr __instance, bool isEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxGestureEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.GestureEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GestureEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GestureEvent __CreateInstance(global::wxSharp.GestureEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GestureEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GestureEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GestureEvent.__Internal));
            global::wxSharp.GestureEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GestureEvent(global::wxSharp.GestureEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GestureEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public GestureEvent(int winid, int type)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid, type);
            SetupVTables(GetType().FullName == "wxSharp.GestureEvent");
        }

        public GestureEvent(global::wxSharp.GestureEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.GestureEvent");
        }

        public void SetPosition(global::wxSharp.Point pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pos.__Instance;
            __Internal.SetPosition(__Instance, __arg0);
        }

        public bool IsGestureStart()
        {
            var __ret = __Internal.IsGestureStart(__Instance);
            return __ret;
        }

        public void SetGestureStart(bool isStart)
        {
            __Internal.SetGestureStart(__Instance, isStart);
        }

        public bool IsGestureEnd()
        {
            var __ret = __Internal.IsGestureEnd(__Instance);
            return __ret;
        }

        public void SetGestureEnd(bool isEnd)
        {
            __Internal.SetGestureEnd(__Instance, isEnd);
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.Point m_pos
        {
            get
            {
                return global::wxSharp.Point.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.GestureEvent.__Internal*) __Instance)->m_pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.GestureEvent.__Internal*)__Instance)->m_pos = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        protected bool m_isStart
        {
            get
            {
                return ((global::wxSharp.GestureEvent.__Internal*) __Instance)->m_isStart != 0;
            }

            set
            {
                ((global::wxSharp.GestureEvent.__Internal*)__Instance)->m_isStart = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_isEnd
        {
            get
            {
                return ((global::wxSharp.GestureEvent.__Internal*) __Instance)->m_isEnd != 0;
            }

            set
            {
                ((global::wxSharp.GestureEvent.__Internal*)__Instance)->m_isEnd = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // wxGestureEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxGestureEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.GestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class PanGestureEvent : global::wxSharp.GestureEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(52)]
            internal byte m_isStart;

            [FieldOffset(53)]
            internal byte m_isEnd;

            [FieldOffset(56)]
            internal global::wxSharp.Point.__Internal m_delta;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxPanGestureEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxPanGestureEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxPanGestureEvent8GetDeltaEv")]
            internal static extern global::wxSharp.Point.__Internal GetDelta(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxPanGestureEvent8SetDeltaERK7wxPoint")]
            internal static extern void SetDelta(global::System.IntPtr __instance, global::System.IntPtr delta);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxPanGestureEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.PanGestureEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PanGestureEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PanGestureEvent __CreateInstance(global::wxSharp.PanGestureEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PanGestureEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PanGestureEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PanGestureEvent.__Internal));
            global::wxSharp.PanGestureEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private PanGestureEvent(global::wxSharp.PanGestureEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PanGestureEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public PanGestureEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PanGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.PanGestureEvent");
        }

        public PanGestureEvent(global::wxSharp.PanGestureEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PanGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.PanGestureEvent");
        }

        public global::wxSharp.Point GetDelta()
        {
            var __ret = __Internal.GetDelta(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void SetDelta(global::wxSharp.Point delta)
        {
            if (ReferenceEquals(delta, null))
                throw new global::System.ArgumentNullException("delta", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = delta.__Instance;
            __Internal.SetDelta(__Instance, __arg0);
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxPanGestureEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxPanGestureEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ZoomGestureEvent : global::wxSharp.GestureEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(52)]
            internal byte m_isStart;

            [FieldOffset(53)]
            internal byte m_isEnd;

            [FieldOffset(56)]
            internal double m_zoomFactor;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxZoomGestureEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxZoomGestureEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxZoomGestureEvent13GetZoomFactorEv")]
            internal static extern double GetZoomFactor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxZoomGestureEvent13SetZoomFactorEd")]
            internal static extern void SetZoomFactor(global::System.IntPtr __instance, double zoomFactor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxZoomGestureEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.ZoomGestureEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ZoomGestureEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ZoomGestureEvent __CreateInstance(global::wxSharp.ZoomGestureEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ZoomGestureEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ZoomGestureEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ZoomGestureEvent.__Internal));
            global::wxSharp.ZoomGestureEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ZoomGestureEvent(global::wxSharp.ZoomGestureEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ZoomGestureEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ZoomGestureEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ZoomGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.ZoomGestureEvent");
        }

        public ZoomGestureEvent(global::wxSharp.ZoomGestureEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ZoomGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ZoomGestureEvent");
        }

        public double GetZoomFactor()
        {
            var __ret = __Internal.GetZoomFactor(__Instance);
            return __ret;
        }

        public void SetZoomFactor(double zoomFactor)
        {
            __Internal.SetZoomFactor(__Instance, zoomFactor);
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxZoomGestureEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ZoomGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ZoomGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ZoomGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxZoomGestureEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ZoomGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ZoomGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class RotateGestureEvent : global::wxSharp.GestureEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(52)]
            internal byte m_isStart;

            [FieldOffset(53)]
            internal byte m_isEnd;

            [FieldOffset(56)]
            internal double m_rotationAngle;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxRotateGestureEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxRotateGestureEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxRotateGestureEvent16GetRotationAngleEv")]
            internal static extern double GetRotationAngle(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxRotateGestureEvent16SetRotationAngleEd")]
            internal static extern void SetRotationAngle(global::System.IntPtr __instance, double rotationAngle);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxRotateGestureEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.RotateGestureEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.RotateGestureEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.RotateGestureEvent __CreateInstance(global::wxSharp.RotateGestureEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.RotateGestureEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.RotateGestureEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.RotateGestureEvent.__Internal));
            global::wxSharp.RotateGestureEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private RotateGestureEvent(global::wxSharp.RotateGestureEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RotateGestureEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public RotateGestureEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.RotateGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.RotateGestureEvent");
        }

        public RotateGestureEvent(global::wxSharp.RotateGestureEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.RotateGestureEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.RotateGestureEvent");
        }

        public double GetRotationAngle()
        {
            var __ret = __Internal.GetRotationAngle(__Instance);
            return __ret;
        }

        public void SetRotationAngle(double rotationAngle)
        {
            __Internal.SetRotationAngle(__Instance, rotationAngle);
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxRotateGestureEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.RotateGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.RotateGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.RotateGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxRotateGestureEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.RotateGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.RotateGestureEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class TwoFingerTapEvent : global::wxSharp.GestureEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(52)]
            internal byte m_isStart;

            [FieldOffset(53)]
            internal byte m_isEnd;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxTwoFingerTapEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxTwoFingerTapEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxTwoFingerTapEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.TwoFingerTapEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.TwoFingerTapEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.TwoFingerTapEvent __CreateInstance(global::wxSharp.TwoFingerTapEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.TwoFingerTapEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.TwoFingerTapEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.TwoFingerTapEvent.__Internal));
            global::wxSharp.TwoFingerTapEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private TwoFingerTapEvent(global::wxSharp.TwoFingerTapEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected TwoFingerTapEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public TwoFingerTapEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.TwoFingerTapEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.TwoFingerTapEvent");
        }

        public TwoFingerTapEvent(global::wxSharp.TwoFingerTapEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.TwoFingerTapEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.TwoFingerTapEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxTwoFingerTapEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.TwoFingerTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.TwoFingerTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.TwoFingerTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxTwoFingerTapEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.TwoFingerTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.TwoFingerTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class LongPressEvent : global::wxSharp.GestureEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(52)]
            internal byte m_isStart;

            [FieldOffset(53)]
            internal byte m_isEnd;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongPressEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongPressEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongPressEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.LongPressEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.LongPressEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.LongPressEvent __CreateInstance(global::wxSharp.LongPressEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.LongPressEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.LongPressEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.LongPressEvent.__Internal));
            global::wxSharp.LongPressEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private LongPressEvent(global::wxSharp.LongPressEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected LongPressEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public LongPressEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.LongPressEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.LongPressEvent");
        }

        public LongPressEvent(global::wxSharp.LongPressEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.LongPressEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.LongPressEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxLongPressEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.LongPressEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.LongPressEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.LongPressEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxLongPressEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.LongPressEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.LongPressEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class PressAndTapEvent : global::wxSharp.GestureEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(52)]
            internal byte m_isStart;

            [FieldOffset(53)]
            internal byte m_isEnd;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxPressAndTapEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxPressAndTapEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxPressAndTapEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.PressAndTapEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PressAndTapEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PressAndTapEvent __CreateInstance(global::wxSharp.PressAndTapEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PressAndTapEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PressAndTapEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PressAndTapEvent.__Internal));
            global::wxSharp.PressAndTapEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private PressAndTapEvent(global::wxSharp.PressAndTapEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PressAndTapEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public PressAndTapEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PressAndTapEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.PressAndTapEvent");
        }

        public PressAndTapEvent(global::wxSharp.PressAndTapEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PressAndTapEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.PressAndTapEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxPressAndTapEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PressAndTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PressAndTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PressAndTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxPressAndTapEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PressAndTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PressAndTapEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class KeyEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 76)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal byte m_controlDown;

            [FieldOffset(44)]
            internal byte m_shiftDown;

            [FieldOffset(44)]
            internal byte m_altDown;

            [FieldOffset(44)]
            internal byte m_metaDown;

            [FieldOffset(44)]
            internal byte m_rawControlDown;

            [FieldOffset(48)]
            internal int m_x;

            [FieldOffset(52)]
            internal int m_y;

            [FieldOffset(56)]
            internal int m_keyCode;

            [FieldOffset(60)]
            internal char m_uniChar;

            [FieldOffset(64)]
            internal uint m_rawCode;

            [FieldOffset(68)]
            internal uint m_rawFlags;

            [FieldOffset(72)]
            internal byte m_allowNext;

            [FieldOffset(73)]
            internal byte m_hasPosition;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int keyType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr evt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEventC2EiRKS_")]
            internal static extern void ctor(global::System.IntPtr __instance, int eventType, global::System.IntPtr evt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent10GetKeyCodeEv")]
            internal static extern int GetKeyCode(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent15IsKeyInCategoryEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyInCategory(global::System.IntPtr __instance, int category);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent13GetUnicodeKeyEv")]
            internal static extern char GetUnicodeKey(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent13GetRawKeyCodeEv")]
            internal static extern uint GetRawKeyCode(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent14GetRawKeyFlagsEv")]
            internal static extern uint GetRawKeyFlags(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent11GetPositionEPiS0_")]
            internal static extern void GetPosition(global::System.IntPtr __instance, int* xpos, int* ypos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent11GetPositionEPlS0_")]
            internal static extern void GetPosition1(global::System.IntPtr __instance, int* xpos, int* ypos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent11GetPositionEv")]
            internal static extern global::wxSharp.Point.__Internal GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent4GetXEv")]
            internal static extern int GetX(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent4GetYEv")]
            internal static extern int GetY(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEvent16DoAllowNextEventEv")]
            internal static extern void DoAllowNextEvent(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent18IsNextEventAllowedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsNextEventAllowed(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.KeyEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.KeyEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.KeyEvent __CreateInstance(global::wxSharp.KeyEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.KeyEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.KeyEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.KeyEvent.__Internal));
            global::wxSharp.KeyEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private KeyEvent(global::wxSharp.KeyEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected KeyEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public KeyEvent(int keyType)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.KeyEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, keyType);
            SetupVTables(GetType().FullName == "wxSharp.KeyEvent");
        }

        public KeyEvent(global::wxSharp.KeyEvent evt)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.KeyEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(evt, null))
                throw new global::System.ArgumentNullException("evt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = evt.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.KeyEvent");
        }

        public KeyEvent(int eventType, global::wxSharp.KeyEvent evt)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.KeyEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(evt, null))
                throw new global::System.ArgumentNullException("evt", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = evt.__Instance;
            __Internal.ctor(__Instance, eventType, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.KeyEvent");
        }

        public int GetKeyCode()
        {
            var __ret = __Internal.GetKeyCode(__Instance);
            return __ret;
        }

        public bool IsKeyInCategory(int category)
        {
            var __ret = __Internal.IsKeyInCategory(__Instance, category);
            return __ret;
        }

        public char GetUnicodeKey()
        {
            var __ret = __Internal.GetUnicodeKey(__Instance);
            return __ret;
        }

        public uint GetRawKeyCode()
        {
            var __ret = __Internal.GetRawKeyCode(__Instance);
            return __ret;
        }

        public uint GetRawKeyFlags()
        {
            var __ret = __Internal.GetRawKeyFlags(__Instance);
            return __ret;
        }

        public void GetPosition(ref int xpos, ref int ypos)
        {
            fixed (int* __xpos0 = &xpos)
            {
                var __arg0 = __xpos0;
                fixed (int* __ypos1 = &ypos)
                {
                    var __arg1 = __ypos1;
                    __Internal.GetPosition(__Instance, __arg0, __arg1);
                }
            }
        }

        public void GetPosition1(ref int xpos, ref int ypos)
        {
            fixed (int* __xpos0 = &xpos)
            {
                var __arg0 = __xpos0;
                fixed (int* __ypos1 = &ypos)
                {
                    var __arg1 = __ypos1;
                    __Internal.GetPosition1(__Instance, __arg0, __arg1);
                }
            }
        }

        public global::wxSharp.Point GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public int GetX()
        {
            var __ret = __Internal.GetX(__Instance);
            return __ret;
        }

        public int GetY()
        {
            var __ret = __Internal.GetY(__Instance);
            return __ret;
        }

        public void DoAllowNextEvent()
        {
            __Internal.DoAllowNextEvent(__Instance);
        }

        public bool IsNextEventAllowed()
        {
            var __ret = __Internal.IsNextEventAllowed(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.EventCategory GetEventCategory()
        {
            return base.GetEventCategory();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public int m_x
        {
            get
            {
                return ((global::wxSharp.KeyEvent.__Internal*) __Instance)->m_x;
            }

            set
            {
                ((global::wxSharp.KeyEvent.__Internal*)__Instance)->m_x = value;
            }
        }

        public int m_y
        {
            get
            {
                return ((global::wxSharp.KeyEvent.__Internal*) __Instance)->m_y;
            }

            set
            {
                ((global::wxSharp.KeyEvent.__Internal*)__Instance)->m_y = value;
            }
        }

        public int m_keyCode
        {
            get
            {
                return ((global::wxSharp.KeyEvent.__Internal*) __Instance)->m_keyCode;
            }

            set
            {
                ((global::wxSharp.KeyEvent.__Internal*)__Instance)->m_keyCode = value;
            }
        }

        public char m_uniChar
        {
            get
            {
                return ((global::wxSharp.KeyEvent.__Internal*) __Instance)->m_uniChar;
            }

            set
            {
                ((global::wxSharp.KeyEvent.__Internal*)__Instance)->m_uniChar = value;
            }
        }

        public uint m_rawCode
        {
            get
            {
                return ((global::wxSharp.KeyEvent.__Internal*) __Instance)->m_rawCode;
            }

            set
            {
                ((global::wxSharp.KeyEvent.__Internal*)__Instance)->m_rawCode = value;
            }
        }

        public uint m_rawFlags
        {
            get
            {
                return ((global::wxSharp.KeyEvent.__Internal*) __Instance)->m_rawFlags;
            }

            set
            {
                ((global::wxSharp.KeyEvent.__Internal*)__Instance)->m_rawFlags = value;
            }
        }

        #region Virtual table interop

        // wxKeyEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.KeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.KeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.KeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxKeyEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.KeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.KeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class SizeEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Size.__Internal m_size;

            [FieldOffset(52)]
            internal global::wxSharp.Rect.__Internal m_rect;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEventC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEventC2ERK6wxSizei")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr sz, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEventC2ERK6wxRecti")]
            internal static extern void ctor_1(global::System.IntPtr __instance, global::System.IntPtr rect, int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizeEvent7GetSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEvent7SetSizeE6wxSize")]
            internal static extern void SetSize(global::System.IntPtr __instance, global::wxSharp.Size.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizeEvent7GetRectEv")]
            internal static extern void GetRect(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEvent7SetRectERK6wxRect")]
            internal static extern void SetRect(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.SizeEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.SizeEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.SizeEvent __CreateInstance(global::wxSharp.SizeEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.SizeEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.SizeEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizeEvent.__Internal));
            global::wxSharp.SizeEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private SizeEvent(global::wxSharp.SizeEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SizeEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public SizeEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizeEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.SizeEvent");
        }

        public SizeEvent(global::wxSharp.Size sz, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizeEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            __Internal.ctor(__Instance, __arg0, winid);
            SetupVTables(GetType().FullName == "wxSharp.SizeEvent");
        }

        public SizeEvent(global::wxSharp.SizeEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizeEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.SizeEvent");
        }

        public SizeEvent(global::wxSharp.Rect rect, int id)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SizeEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.ctor_1(__Instance, __arg0, id);
            SetupVTables(GetType().FullName == "wxSharp.SizeEvent");
        }

        public global::wxSharp.Size GetSize()
        {
            var __ret = __Internal.GetSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void SetSize(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg0 = size.__Instance;
            __Internal.SetSize(__Instance, *(global::wxSharp.Size.__Internal*) __arg0);
        }

        public global::wxSharp.Rect GetRect()
        {
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.GetRect(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public void SetRect(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.SetRect(__Instance, __arg0);
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Size m_size
        {
            get
            {
                return global::wxSharp.Size.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.SizeEvent.__Internal*) __Instance)->m_size));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.SizeEvent.__Internal*)__Instance)->m_size = *(global::wxSharp.Size.__Internal*) value.__Instance;
            }
        }

        public global::wxSharp.Rect m_rect
        {
            get
            {
                return global::wxSharp.Rect.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.SizeEvent.__Internal*) __Instance)->m_rect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.SizeEvent.__Internal*)__Instance)->m_rect = *(global::wxSharp.Rect.__Internal*) value.__Instance;
            }
        }

        #region Virtual table interop

        // wxSizeEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxSizeEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class MoveEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(52)]
            internal global::wxSharp.Rect.__Internal m_rect;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEventC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEventC2ERK7wxPointi")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr pos, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEventC2ERK6wxRecti")]
            internal static extern void ctor_1(global::System.IntPtr __instance, global::System.IntPtr rect, int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxMoveEvent11GetPositionEv")]
            internal static extern global::wxSharp.Point.__Internal GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEvent11SetPositionERK7wxPoint")]
            internal static extern void SetPosition(global::System.IntPtr __instance, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxMoveEvent7GetRectEv")]
            internal static extern void GetRect(global::System.IntPtr @return, global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEvent7SetRectERK6wxRect")]
            internal static extern void SetRect(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.MoveEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.MoveEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.MoveEvent __CreateInstance(global::wxSharp.MoveEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.MoveEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.MoveEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.MoveEvent.__Internal));
            global::wxSharp.MoveEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MoveEvent(global::wxSharp.MoveEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MoveEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public MoveEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MoveEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.MoveEvent");
        }

        public MoveEvent(global::wxSharp.Point pos, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MoveEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pos.__Instance;
            __Internal.ctor(__Instance, __arg0, winid);
            SetupVTables(GetType().FullName == "wxSharp.MoveEvent");
        }

        public MoveEvent(global::wxSharp.MoveEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MoveEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.MoveEvent");
        }

        public MoveEvent(global::wxSharp.Rect rect, int id)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MoveEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.ctor_1(__Instance, __arg0, id);
            SetupVTables(GetType().FullName == "wxSharp.MoveEvent");
        }

        public global::wxSharp.Point GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void SetPosition(global::wxSharp.Point pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pos.__Instance;
            __Internal.SetPosition(__Instance, __arg0);
        }

        public global::wxSharp.Rect GetRect()
        {
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.GetRect(new IntPtr(&__ret), __Instance);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public void SetRect(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            __Internal.SetRect(__Instance, __arg0);
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.Point m_pos
        {
            get
            {
                return global::wxSharp.Point.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.MoveEvent.__Internal*) __Instance)->m_pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.MoveEvent.__Internal*)__Instance)->m_pos = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.Rect m_rect
        {
            get
            {
                return global::wxSharp.Rect.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.MoveEvent.__Internal*) __Instance)->m_rect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.MoveEvent.__Internal*)__Instance)->m_rect = *(global::wxSharp.Rect.__Internal*) value.__Instance;
            }
        }

        #region Virtual table interop

        // wxMoveEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MoveEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MoveEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MoveEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxMoveEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MoveEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MoveEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class PaintEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxPaintEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxPaintEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.PaintEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PaintEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PaintEvent __CreateInstance(global::wxSharp.PaintEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PaintEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PaintEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PaintEvent.__Internal));
            global::wxSharp.PaintEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private PaintEvent(global::wxSharp.PaintEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PaintEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public PaintEvent(global::wxSharp.PaintEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PaintEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.PaintEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxPaintEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxPaintEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class NcPaintEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxNcPaintEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxNcPaintEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.NcPaintEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NcPaintEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NcPaintEvent __CreateInstance(global::wxSharp.NcPaintEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NcPaintEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NcPaintEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NcPaintEvent.__Internal));
            global::wxSharp.NcPaintEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private NcPaintEvent(global::wxSharp.NcPaintEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NcPaintEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public NcPaintEvent(global::wxSharp.NcPaintEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.NcPaintEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.NcPaintEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxNcPaintEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NcPaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NcPaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NcPaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxNcPaintEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NcPaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NcPaintEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class EraseEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::System.IntPtr m_dc;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEraseEventC2EiP4wxDC")]
            internal static extern void ctor(global::System.IntPtr __instance, int Id, global::System.IntPtr dc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEraseEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEraseEvent5GetDCEv")]
            internal static extern global::System.IntPtr GetDC(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEraseEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.EraseEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.EraseEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.EraseEvent __CreateInstance(global::wxSharp.EraseEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.EraseEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.EraseEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.EraseEvent.__Internal));
            global::wxSharp.EraseEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private EraseEvent(global::wxSharp.EraseEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EraseEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public EraseEvent(int Id, global::wxSharp.DC dc)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EraseEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg1 = ReferenceEquals(dc, null) ? global::System.IntPtr.Zero : dc.__Instance;
            __Internal.ctor(__Instance, Id, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.EraseEvent");
        }

        public EraseEvent(global::wxSharp.EraseEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EraseEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.EraseEvent");
        }

        public global::wxSharp.DC GetDC()
        {
            var __ret = __Internal.GetDC(__Instance);
            global::wxSharp.DC __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.DC.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.DC) global::wxSharp.DC.NativeToManagedMap[__ret];
            else global::wxSharp.DC.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.DC) global::wxSharp.DC.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.DC m_dc
        {
            get
            {
                global::wxSharp.DC __result0;
                if (((global::wxSharp.EraseEvent.__Internal*) __Instance)->m_dc == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.DC.NativeToManagedMap.ContainsKey(((global::wxSharp.EraseEvent.__Internal*) __Instance)->m_dc))
                    __result0 = (global::wxSharp.DC) global::wxSharp.DC.NativeToManagedMap[((global::wxSharp.EraseEvent.__Internal*) __Instance)->m_dc];
                else global::wxSharp.DC.NativeToManagedMap[((global::wxSharp.EraseEvent.__Internal*) __Instance)->m_dc] = __result0 = (global::wxSharp.DC) global::wxSharp.DC.__CreateInstance(((global::wxSharp.EraseEvent.__Internal*) __Instance)->m_dc);
                return __result0;
            }

            set
            {
                ((global::wxSharp.EraseEvent.__Internal*)__Instance)->m_dc = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // wxEraseEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EraseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EraseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EraseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxEraseEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EraseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EraseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class FocusEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::System.IntPtr m_win;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxFocusEventC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int type, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxFocusEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxFocusEvent9GetWindowEv")]
            internal static extern global::System.IntPtr GetWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxFocusEvent9SetWindowEP8wxWindow")]
            internal static extern void SetWindow(global::System.IntPtr __instance, global::System.IntPtr win);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxFocusEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.FocusEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.FocusEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.FocusEvent __CreateInstance(global::wxSharp.FocusEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.FocusEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.FocusEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.FocusEvent.__Internal));
            global::wxSharp.FocusEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private FocusEvent(global::wxSharp.FocusEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FocusEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public FocusEvent(int type, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.FocusEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, type, winid);
            SetupVTables(GetType().FullName == "wxSharp.FocusEvent");
        }

        public FocusEvent(global::wxSharp.FocusEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.FocusEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.FocusEvent");
        }

        public global::wxSharp.Window GetWindow()
        {
            var __ret = __Internal.GetWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public void SetWindow(global::wxSharp.Window win)
        {
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.SetWindow(__Instance, __arg0);
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxFocusEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxFocusEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.FocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ChildFocusEvent : global::wxSharp.CommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxChildFocusEventC2EP8wxWindow")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr win);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxChildFocusEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxChildFocusEvent9GetWindowEv")]
            internal static extern global::System.IntPtr GetWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxChildFocusEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.ChildFocusEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ChildFocusEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ChildFocusEvent __CreateInstance(global::wxSharp.ChildFocusEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ChildFocusEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ChildFocusEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ChildFocusEvent.__Internal));
            global::wxSharp.ChildFocusEvent.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ChildFocusEvent(global::wxSharp.ChildFocusEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ChildFocusEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ChildFocusEvent(global::wxSharp.Window win)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ChildFocusEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.ctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ChildFocusEvent");
        }

        public ChildFocusEvent(global::wxSharp.ChildFocusEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ChildFocusEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ChildFocusEvent");
        }

        public global::wxSharp.Window GetWindow()
        {
            var __ret = __Internal.GetWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxChildFocusEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ChildFocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ChildFocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ChildFocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxChildFocusEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ChildFocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ChildFocusEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ActivateEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal byte m_active;

            [FieldOffset(48)]
            internal global::wxSharp.ActivateEvent.Reason m_activationReason;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxActivateEventC2EibiNS_6ReasonE")]
            internal static extern void ctor(global::System.IntPtr __instance, int type, bool active, int Id, global::wxSharp.ActivateEvent.Reason activationReason);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxActivateEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxActivateEvent9GetActiveEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetActive(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxActivateEvent19GetActivationReasonEv")]
            internal static extern global::wxSharp.ActivateEvent.Reason GetActivationReason(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxActivateEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        public enum Reason : uint
        {
            Reason_Mouse = 0,
            Reason_Unknown = 1
        }

        internal static new global::wxSharp.ActivateEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ActivateEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ActivateEvent __CreateInstance(global::wxSharp.ActivateEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ActivateEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ActivateEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ActivateEvent.__Internal));
            global::wxSharp.ActivateEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ActivateEvent(global::wxSharp.ActivateEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ActivateEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ActivateEvent(int type, bool active, int Id, global::wxSharp.ActivateEvent.Reason activationReason)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ActivateEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, type, active, Id, activationReason);
            SetupVTables(GetType().FullName == "wxSharp.ActivateEvent");
        }

        public ActivateEvent(global::wxSharp.ActivateEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ActivateEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ActivateEvent");
        }

        public bool GetActive()
        {
            var __ret = __Internal.GetActive(__Instance);
            return __ret;
        }

        public global::wxSharp.ActivateEvent.Reason GetActivationReason()
        {
            var __ret = __Internal.GetActivationReason(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxActivateEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ActivateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ActivateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ActivateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxActivateEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ActivateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ActivateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class InitDialogEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxInitDialogEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int Id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxInitDialogEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxInitDialogEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.InitDialogEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.InitDialogEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.InitDialogEvent __CreateInstance(global::wxSharp.InitDialogEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.InitDialogEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.InitDialogEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.InitDialogEvent.__Internal));
            global::wxSharp.InitDialogEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private InitDialogEvent(global::wxSharp.InitDialogEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected InitDialogEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public InitDialogEvent(int Id)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.InitDialogEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, Id);
            SetupVTables(GetType().FullName == "wxSharp.InitDialogEvent");
        }

        public InitDialogEvent(global::wxSharp.InitDialogEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.InitDialogEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.InitDialogEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxInitDialogEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.InitDialogEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.InitDialogEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.InitDialogEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxInitDialogEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.InitDialogEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.InitDialogEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class MenuEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal int m_menuId;

            [FieldOffset(48)]
            internal global::System.IntPtr m_menu;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMenuEventC2EiiP6wxMenu")]
            internal static extern void ctor(global::System.IntPtr __instance, int type, int winid, global::System.IntPtr menu);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMenuEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxMenuEvent9GetMenuIdEv")]
            internal static extern int GetMenuId(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxMenuEvent7IsPopupEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPopup(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxMenuEvent7GetMenuEv")]
            internal static extern global::System.IntPtr GetMenu(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMenuEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.MenuEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.MenuEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.MenuEvent __CreateInstance(global::wxSharp.MenuEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.MenuEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.MenuEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.MenuEvent.__Internal));
            global::wxSharp.MenuEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MenuEvent(global::wxSharp.MenuEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MenuEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public MenuEvent(int type, int winid, global::wxSharp.Menu menu)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MenuEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg2 = ReferenceEquals(menu, null) ? global::System.IntPtr.Zero : menu.__Instance;
            __Internal.ctor(__Instance, type, winid, __arg2);
            SetupVTables(GetType().FullName == "wxSharp.MenuEvent");
        }

        public MenuEvent(global::wxSharp.MenuEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MenuEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.MenuEvent");
        }

        public int GetMenuId()
        {
            var __ret = __Internal.GetMenuId(__Instance);
            return __ret;
        }

        public bool IsPopup()
        {
            var __ret = __Internal.IsPopup(__Instance);
            return __ret;
        }

        public global::wxSharp.Menu GetMenu()
        {
            var __ret = __Internal.GetMenu(__Instance);
            global::wxSharp.Menu __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Menu.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Menu) global::wxSharp.Menu.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.Menu.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxMenuEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxMenuEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class CloseEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal byte m_loggingOff;

            [FieldOffset(45)]
            internal byte m_veto;

            [FieldOffset(46)]
            internal byte m_canVeto;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEventC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int type, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEvent13SetLoggingOffEb")]
            internal static extern void SetLoggingOff(global::System.IntPtr __instance, bool logOff);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxCloseEvent13GetLoggingOffEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetLoggingOff(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEvent4VetoEb")]
            internal static extern void Veto(global::System.IntPtr __instance, bool veto);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEvent10SetCanVetoEb")]
            internal static extern void SetCanVeto(global::System.IntPtr __instance, bool canVeto);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxCloseEvent7CanVetoEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CanVeto(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxCloseEvent7GetVetoEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetVeto(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.CloseEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.CloseEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.CloseEvent __CreateInstance(global::wxSharp.CloseEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.CloseEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.CloseEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.CloseEvent.__Internal));
            global::wxSharp.CloseEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private CloseEvent(global::wxSharp.CloseEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CloseEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public CloseEvent(int type, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.CloseEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, type, winid);
            SetupVTables(GetType().FullName == "wxSharp.CloseEvent");
        }

        public CloseEvent(global::wxSharp.CloseEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.CloseEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.CloseEvent");
        }

        public void SetLoggingOff(bool logOff)
        {
            __Internal.SetLoggingOff(__Instance, logOff);
        }

        public bool GetLoggingOff()
        {
            var __ret = __Internal.GetLoggingOff(__Instance);
            return __ret;
        }

        public void Veto(bool veto)
        {
            __Internal.Veto(__Instance, veto);
        }

        public void SetCanVeto(bool canVeto)
        {
            __Internal.SetCanVeto(__Instance, canVeto);
        }

        public bool CanVeto()
        {
            var __ret = __Internal.CanVeto(__Instance);
            return __ret;
        }

        public bool GetVeto()
        {
            var __ret = __Internal.GetVeto(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected bool m_loggingOff
        {
            get
            {
                return ((global::wxSharp.CloseEvent.__Internal*) __Instance)->m_loggingOff != 0;
            }

            set
            {
                ((global::wxSharp.CloseEvent.__Internal*)__Instance)->m_loggingOff = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_veto
        {
            get
            {
                return ((global::wxSharp.CloseEvent.__Internal*) __Instance)->m_veto != 0;
            }

            set
            {
                ((global::wxSharp.CloseEvent.__Internal*)__Instance)->m_veto = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_canVeto
        {
            get
            {
                return ((global::wxSharp.CloseEvent.__Internal*) __Instance)->m_canVeto != 0;
            }

            set
            {
                ((global::wxSharp.CloseEvent.__Internal*)__Instance)->m_canVeto = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // wxCloseEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CloseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CloseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CloseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxCloseEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CloseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.CloseEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ShowEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal byte m_show;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxShowEventC2Eib")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxShowEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxShowEvent7SetShowEb")]
            internal static extern void SetShow(global::System.IntPtr __instance, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxShowEvent7IsShownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsShown(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxShowEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.ShowEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ShowEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ShowEvent __CreateInstance(global::wxSharp.ShowEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ShowEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ShowEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ShowEvent.__Internal));
            global::wxSharp.ShowEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ShowEvent(global::wxSharp.ShowEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ShowEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ShowEvent(int winid, bool show)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ShowEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid, show);
            SetupVTables(GetType().FullName == "wxSharp.ShowEvent");
        }

        public ShowEvent(global::wxSharp.ShowEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ShowEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ShowEvent");
        }

        public void SetShow(bool show)
        {
            __Internal.SetShow(__Instance, show);
        }

        public bool IsShown()
        {
            var __ret = __Internal.IsShown(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected bool m_show
        {
            get
            {
                return ((global::wxSharp.ShowEvent.__Internal*) __Instance)->m_show != 0;
            }

            set
            {
                ((global::wxSharp.ShowEvent.__Internal*)__Instance)->m_show = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // wxShowEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ShowEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ShowEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ShowEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxShowEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ShowEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ShowEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class IconizeEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal byte m_iconized;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxIconizeEventC2Eib")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid, bool iconized);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxIconizeEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxIconizeEvent10IsIconizedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsIconized(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxIconizeEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.IconizeEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.IconizeEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.IconizeEvent __CreateInstance(global::wxSharp.IconizeEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.IconizeEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.IconizeEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.IconizeEvent.__Internal));
            global::wxSharp.IconizeEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private IconizeEvent(global::wxSharp.IconizeEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IconizeEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public IconizeEvent(int winid, bool iconized)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.IconizeEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid, iconized);
            SetupVTables(GetType().FullName == "wxSharp.IconizeEvent");
        }

        public IconizeEvent(global::wxSharp.IconizeEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.IconizeEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.IconizeEvent");
        }

        public bool IsIconized()
        {
            var __ret = __Internal.IsIconized(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected bool m_iconized
        {
            get
            {
                return ((global::wxSharp.IconizeEvent.__Internal*) __Instance)->m_iconized != 0;
            }

            set
            {
                ((global::wxSharp.IconizeEvent.__Internal*)__Instance)->m_iconized = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // wxIconizeEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IconizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IconizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IconizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxIconizeEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IconizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.IconizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class MaximizeEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMaximizeEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMaximizeEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMaximizeEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.MaximizeEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.MaximizeEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.MaximizeEvent __CreateInstance(global::wxSharp.MaximizeEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.MaximizeEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.MaximizeEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.MaximizeEvent.__Internal));
            global::wxSharp.MaximizeEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MaximizeEvent(global::wxSharp.MaximizeEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MaximizeEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public MaximizeEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MaximizeEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.MaximizeEvent");
        }

        public MaximizeEvent(global::wxSharp.MaximizeEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MaximizeEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.MaximizeEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxMaximizeEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MaximizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MaximizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MaximizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxMaximizeEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MaximizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MaximizeEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class JoystickEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(52)]
            internal int m_zPosition;

            [FieldOffset(56)]
            internal int m_buttonChange;

            [FieldOffset(60)]
            internal int m_buttonState;

            [FieldOffset(64)]
            internal int m_joyStick;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEventC2Eiiii")]
            internal static extern void ctor(global::System.IntPtr __instance, int type, int state, int joystick, int change);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent11GetPositionEv")]
            internal static extern global::wxSharp.Point.__Internal GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent12GetZPositionEv")]
            internal static extern int GetZPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent14GetButtonStateEv")]
            internal static extern int GetButtonState(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent15GetButtonChangeEv")]
            internal static extern int GetButtonChange(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent16GetButtonOrdinalEv")]
            internal static extern int GetButtonOrdinal(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent11GetJoystickEv")]
            internal static extern int GetJoystick(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent11SetJoystickEi")]
            internal static extern void SetJoystick(global::System.IntPtr __instance, int stick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent14SetButtonStateEi")]
            internal static extern void SetButtonState(global::System.IntPtr __instance, int state);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent15SetButtonChangeEi")]
            internal static extern void SetButtonChange(global::System.IntPtr __instance, int change);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent11SetPositionERK7wxPoint")]
            internal static extern void SetPosition(global::System.IntPtr __instance, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent12SetZPositionEi")]
            internal static extern void SetZPosition(global::System.IntPtr __instance, int zPos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent8IsButtonEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsButton(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent6IsMoveEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMove(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent7IsZMoveEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsZMove(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent10ButtonDownEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ButtonDown(global::System.IntPtr __instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent8ButtonUpEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ButtonUp(global::System.IntPtr __instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent12ButtonIsDownEi")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ButtonIsDown(global::System.IntPtr __instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.JoystickEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.JoystickEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.JoystickEvent __CreateInstance(global::wxSharp.JoystickEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.JoystickEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.JoystickEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.JoystickEvent.__Internal));
            global::wxSharp.JoystickEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private JoystickEvent(global::wxSharp.JoystickEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected JoystickEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public JoystickEvent(int type, int state, int joystick, int change)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.JoystickEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, type, state, joystick, change);
            SetupVTables(GetType().FullName == "wxSharp.JoystickEvent");
        }

        public JoystickEvent(global::wxSharp.JoystickEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.JoystickEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.JoystickEvent");
        }

        public global::wxSharp.Point GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public int GetZPosition()
        {
            var __ret = __Internal.GetZPosition(__Instance);
            return __ret;
        }

        public int GetButtonState()
        {
            var __ret = __Internal.GetButtonState(__Instance);
            return __ret;
        }

        public int GetButtonChange()
        {
            var __ret = __Internal.GetButtonChange(__Instance);
            return __ret;
        }

        public int GetButtonOrdinal()
        {
            var __ret = __Internal.GetButtonOrdinal(__Instance);
            return __ret;
        }

        public int GetJoystick()
        {
            var __ret = __Internal.GetJoystick(__Instance);
            return __ret;
        }

        public void SetJoystick(int stick)
        {
            __Internal.SetJoystick(__Instance, stick);
        }

        public void SetButtonState(int state)
        {
            __Internal.SetButtonState(__Instance, state);
        }

        public void SetButtonChange(int change)
        {
            __Internal.SetButtonChange(__Instance, change);
        }

        public void SetPosition(global::wxSharp.Point pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pos.__Instance;
            __Internal.SetPosition(__Instance, __arg0);
        }

        public void SetZPosition(int zPos)
        {
            __Internal.SetZPosition(__Instance, zPos);
        }

        public bool IsButton()
        {
            var __ret = __Internal.IsButton(__Instance);
            return __ret;
        }

        public bool IsMove()
        {
            var __ret = __Internal.IsMove(__Instance);
            return __ret;
        }

        public bool IsZMove()
        {
            var __ret = __Internal.IsZMove(__Instance);
            return __ret;
        }

        public bool ButtonDown(int but)
        {
            var __ret = __Internal.ButtonDown(__Instance, but);
            return __ret;
        }

        public bool ButtonUp(int but)
        {
            var __ret = __Internal.ButtonUp(__Instance, but);
            return __ret;
        }

        public bool ButtonIsDown(int but)
        {
            var __ret = __Internal.ButtonIsDown(__Instance, but);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.Point m_pos
        {
            get
            {
                return global::wxSharp.Point.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.JoystickEvent.__Internal*) __Instance)->m_pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.JoystickEvent.__Internal*)__Instance)->m_pos = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        protected int m_zPosition
        {
            get
            {
                return ((global::wxSharp.JoystickEvent.__Internal*) __Instance)->m_zPosition;
            }

            set
            {
                ((global::wxSharp.JoystickEvent.__Internal*)__Instance)->m_zPosition = value;
            }
        }

        protected int m_buttonChange
        {
            get
            {
                return ((global::wxSharp.JoystickEvent.__Internal*) __Instance)->m_buttonChange;
            }

            set
            {
                ((global::wxSharp.JoystickEvent.__Internal*)__Instance)->m_buttonChange = value;
            }
        }

        protected int m_buttonState
        {
            get
            {
                return ((global::wxSharp.JoystickEvent.__Internal*) __Instance)->m_buttonState;
            }

            set
            {
                ((global::wxSharp.JoystickEvent.__Internal*)__Instance)->m_buttonState = value;
            }
        }

        protected int m_joyStick
        {
            get
            {
                return ((global::wxSharp.JoystickEvent.__Internal*) __Instance)->m_joyStick;
            }

            set
            {
                ((global::wxSharp.JoystickEvent.__Internal*)__Instance)->m_joyStick = value;
            }
        }

        #region Virtual table interop

        // wxJoystickEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.JoystickEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.JoystickEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.JoystickEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxJoystickEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.JoystickEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.JoystickEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class UpdateUIEvent : global::wxSharp.CommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 108)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(80)]
            internal byte m_checked;

            [FieldOffset(81)]
            internal byte m_enabled;

            [FieldOffset(82)]
            internal byte m_shown;

            [FieldOffset(83)]
            internal byte m_setEnabled;

            [FieldOffset(84)]
            internal byte m_setShown;

            [FieldOffset(85)]
            internal byte m_setText;

            [FieldOffset(86)]
            internal byte m_setChecked;

            [FieldOffset(88)]
            internal global::wxSharp.String.__Internal m_text;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int commandId);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent10GetCheckedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetChecked(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent10GetEnabledEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetEnabled(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent8GetShownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetShown(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent10GetSetTextEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSetText(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent13GetSetCheckedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSetChecked(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent13GetSetEnabledEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSetEnabled(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent11GetSetShownEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetSetShown(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent5CheckEb")]
            internal static extern void Check(global::System.IntPtr __instance, bool check);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent6EnableEb")]
            internal static extern void Enable(global::System.IntPtr __instance, bool enable);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent4ShowEb")]
            internal static extern void Show(global::System.IntPtr __instance, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent17SetUpdateIntervalEl")]
            internal static extern void SetUpdateInterval(int updateInterval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent17GetUpdateIntervalEv")]
            internal static extern int GetUpdateInterval();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent15ResetUpdateTimeEv")]
            internal static extern void ResetUpdateTime();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent7SetModeE14wxUpdateUIMode")]
            internal static extern void SetMode(global::wxSharp.UpdateUIMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent7GetModeEv")]
            internal static extern global::wxSharp.UpdateUIMode GetMode();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.UpdateUIEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.UpdateUIEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.UpdateUIEvent __CreateInstance(global::wxSharp.UpdateUIEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.UpdateUIEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.UpdateUIEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.UpdateUIEvent.__Internal));
            global::wxSharp.UpdateUIEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private UpdateUIEvent(global::wxSharp.UpdateUIEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UpdateUIEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public UpdateUIEvent(int commandId)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.UpdateUIEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, commandId);
            SetupVTables(GetType().FullName == "wxSharp.UpdateUIEvent");
        }

        public UpdateUIEvent(global::wxSharp.UpdateUIEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.UpdateUIEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.UpdateUIEvent");
        }

        public bool GetChecked()
        {
            var __ret = __Internal.GetChecked(__Instance);
            return __ret;
        }

        public bool GetEnabled()
        {
            var __ret = __Internal.GetEnabled(__Instance);
            return __ret;
        }

        public bool GetShown()
        {
            var __ret = __Internal.GetShown(__Instance);
            return __ret;
        }

        public bool GetSetText()
        {
            var __ret = __Internal.GetSetText(__Instance);
            return __ret;
        }

        public bool GetSetChecked()
        {
            var __ret = __Internal.GetSetChecked(__Instance);
            return __ret;
        }

        public bool GetSetEnabled()
        {
            var __ret = __Internal.GetSetEnabled(__Instance);
            return __ret;
        }

        public bool GetSetShown()
        {
            var __ret = __Internal.GetSetShown(__Instance);
            return __ret;
        }

        public void Check(bool check)
        {
            __Internal.Check(__Instance, check);
        }

        public void Enable(bool enable)
        {
            __Internal.Enable(__Instance, enable);
        }

        public void Show(bool show)
        {
            __Internal.Show(__Instance, show);
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static void SetUpdateInterval(int updateInterval)
        {
            __Internal.SetUpdateInterval(updateInterval);
        }

        public static int GetUpdateInterval()
        {
            var __ret = __Internal.GetUpdateInterval();
            return __ret;
        }

        public static void ResetUpdateTime()
        {
            __Internal.ResetUpdateTime();
        }

        public static void SetMode(global::wxSharp.UpdateUIMode mode)
        {
            __Internal.SetMode(mode);
        }

        public static global::wxSharp.UpdateUIMode GetMode()
        {
            var __ret = __Internal.GetMode();
            return __ret;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected bool m_checked
        {
            get
            {
                return ((global::wxSharp.UpdateUIEvent.__Internal*) __Instance)->m_checked != 0;
            }

            set
            {
                ((global::wxSharp.UpdateUIEvent.__Internal*)__Instance)->m_checked = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_enabled
        {
            get
            {
                return ((global::wxSharp.UpdateUIEvent.__Internal*) __Instance)->m_enabled != 0;
            }

            set
            {
                ((global::wxSharp.UpdateUIEvent.__Internal*)__Instance)->m_enabled = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_shown
        {
            get
            {
                return ((global::wxSharp.UpdateUIEvent.__Internal*) __Instance)->m_shown != 0;
            }

            set
            {
                ((global::wxSharp.UpdateUIEvent.__Internal*)__Instance)->m_shown = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_setEnabled
        {
            get
            {
                return ((global::wxSharp.UpdateUIEvent.__Internal*) __Instance)->m_setEnabled != 0;
            }

            set
            {
                ((global::wxSharp.UpdateUIEvent.__Internal*)__Instance)->m_setEnabled = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_setShown
        {
            get
            {
                return ((global::wxSharp.UpdateUIEvent.__Internal*) __Instance)->m_setShown != 0;
            }

            set
            {
                ((global::wxSharp.UpdateUIEvent.__Internal*)__Instance)->m_setShown = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_setText
        {
            get
            {
                return ((global::wxSharp.UpdateUIEvent.__Internal*) __Instance)->m_setText != 0;
            }

            set
            {
                ((global::wxSharp.UpdateUIEvent.__Internal*)__Instance)->m_setText = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_setChecked
        {
            get
            {
                return ((global::wxSharp.UpdateUIEvent.__Internal*) __Instance)->m_setChecked != 0;
            }

            set
            {
                ((global::wxSharp.UpdateUIEvent.__Internal*)__Instance)->m_setChecked = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // wxUpdateUIEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.UpdateUIEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.UpdateUIEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.UpdateUIEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxUpdateUIEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.UpdateUIEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.UpdateUIEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class SysColourChangedEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxSysColourChangedEventC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxSysColourChangedEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxSysColourChangedEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.SysColourChangedEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.SysColourChangedEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.SysColourChangedEvent __CreateInstance(global::wxSharp.SysColourChangedEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.SysColourChangedEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.SysColourChangedEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.SysColourChangedEvent.__Internal));
            global::wxSharp.SysColourChangedEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private SysColourChangedEvent(global::wxSharp.SysColourChangedEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected SysColourChangedEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public SysColourChangedEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SysColourChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.SysColourChangedEvent");
        }

        public SysColourChangedEvent(global::wxSharp.SysColourChangedEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.SysColourChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.SysColourChangedEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxSysColourChangedEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SysColourChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SysColourChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SysColourChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxSysColourChangedEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SysColourChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.SysColourChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class MouseCaptureChangedEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::System.IntPtr m_gainedCapture;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxMouseCaptureChangedEventC2EiP8wxWindow")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid, global::System.IntPtr gainedCapture);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxMouseCaptureChangedEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK26wxMouseCaptureChangedEvent17GetCapturedWindowEv")]
            internal static extern global::System.IntPtr GetCapturedWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxMouseCaptureChangedEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.MouseCaptureChangedEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.MouseCaptureChangedEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.MouseCaptureChangedEvent __CreateInstance(global::wxSharp.MouseCaptureChangedEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.MouseCaptureChangedEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.MouseCaptureChangedEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.MouseCaptureChangedEvent.__Internal));
            global::wxSharp.MouseCaptureChangedEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MouseCaptureChangedEvent(global::wxSharp.MouseCaptureChangedEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MouseCaptureChangedEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public MouseCaptureChangedEvent(int winid, global::wxSharp.Window gainedCapture)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MouseCaptureChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg1 = ReferenceEquals(gainedCapture, null) ? global::System.IntPtr.Zero : gainedCapture.__Instance;
            __Internal.ctor(__Instance, winid, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.MouseCaptureChangedEvent");
        }

        public MouseCaptureChangedEvent(global::wxSharp.MouseCaptureChangedEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MouseCaptureChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.MouseCaptureChangedEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Window GetCapturedWindow()
        {
            var __ret = __Internal.GetCapturedWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxMouseCaptureChangedEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxMouseCaptureChangedEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class MouseCaptureLostEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxMouseCaptureLostEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxMouseCaptureLostEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxMouseCaptureLostEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.MouseCaptureLostEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.MouseCaptureLostEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.MouseCaptureLostEvent __CreateInstance(global::wxSharp.MouseCaptureLostEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.MouseCaptureLostEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.MouseCaptureLostEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.MouseCaptureLostEvent.__Internal));
            global::wxSharp.MouseCaptureLostEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private MouseCaptureLostEvent(global::wxSharp.MouseCaptureLostEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected MouseCaptureLostEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public MouseCaptureLostEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MouseCaptureLostEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.MouseCaptureLostEvent");
        }

        public MouseCaptureLostEvent(global::wxSharp.MouseCaptureLostEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.MouseCaptureLostEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.MouseCaptureLostEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxMouseCaptureLostEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureLostEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureLostEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureLostEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxMouseCaptureLostEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureLostEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.MouseCaptureLostEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class DisplayChangedEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDisplayChangedEventC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDisplayChangedEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDisplayChangedEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.DisplayChangedEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DisplayChangedEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DisplayChangedEvent __CreateInstance(global::wxSharp.DisplayChangedEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DisplayChangedEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DisplayChangedEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DisplayChangedEvent.__Internal));
            global::wxSharp.DisplayChangedEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private DisplayChangedEvent(global::wxSharp.DisplayChangedEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DisplayChangedEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public DisplayChangedEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DisplayChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.DisplayChangedEvent");
        }

        public DisplayChangedEvent(global::wxSharp.DisplayChangedEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DisplayChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.DisplayChangedEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxDisplayChangedEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DisplayChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DisplayChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DisplayChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxDisplayChangedEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DisplayChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DisplayChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class DPIChangedEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 60)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.Size.__Internal m_oldDPI;

            [FieldOffset(52)]
            internal global::wxSharp.Size.__Internal m_newDPI;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxDPIChangedEventC2ERK6wxSizeS2_")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr oldDPI, global::System.IntPtr newDPI);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxDPIChangedEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxDPIChangedEvent9GetOldDPIEv")]
            internal static extern global::wxSharp.Size.__Internal GetOldDPI(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxDPIChangedEvent9GetNewDPIEv")]
            internal static extern global::wxSharp.Size.__Internal GetNewDPI(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxDPIChangedEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.DPIChangedEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.DPIChangedEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.DPIChangedEvent __CreateInstance(global::wxSharp.DPIChangedEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.DPIChangedEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.DPIChangedEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.DPIChangedEvent.__Internal));
            global::wxSharp.DPIChangedEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private DPIChangedEvent(global::wxSharp.DPIChangedEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected DPIChangedEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public DPIChangedEvent(global::wxSharp.Size oldDPI, global::wxSharp.Size newDPI)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DPIChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(oldDPI, null))
                throw new global::System.ArgumentNullException("oldDPI", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = oldDPI.__Instance;
            if (ReferenceEquals(newDPI, null))
                throw new global::System.ArgumentNullException("newDPI", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = newDPI.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.DPIChangedEvent");
        }

        public DPIChangedEvent(global::wxSharp.DPIChangedEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.DPIChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.DPIChangedEvent");
        }

        public global::wxSharp.Size GetOldDPI()
        {
            var __ret = __Internal.GetOldDPI(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public global::wxSharp.Size GetNewDPI()
        {
            var __ret = __Internal.GetNewDPI(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxDPIChangedEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DPIChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DPIChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DPIChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxDPIChangedEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DPIChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.DPIChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class PaletteChangedEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::System.IntPtr m_changedWindow;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxPaletteChangedEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxPaletteChangedEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxPaletteChangedEvent16SetChangedWindowEP8wxWindow")]
            internal static extern void SetChangedWindow(global::System.IntPtr __instance, global::System.IntPtr win);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxPaletteChangedEvent16GetChangedWindowEv")]
            internal static extern global::System.IntPtr GetChangedWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxPaletteChangedEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.PaletteChangedEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PaletteChangedEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PaletteChangedEvent __CreateInstance(global::wxSharp.PaletteChangedEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PaletteChangedEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PaletteChangedEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PaletteChangedEvent.__Internal));
            global::wxSharp.PaletteChangedEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private PaletteChangedEvent(global::wxSharp.PaletteChangedEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PaletteChangedEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public PaletteChangedEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PaletteChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.PaletteChangedEvent");
        }

        public PaletteChangedEvent(global::wxSharp.PaletteChangedEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PaletteChangedEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.PaletteChangedEvent");
        }

        public void SetChangedWindow(global::wxSharp.Window win)
        {
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.SetChangedWindow(__Instance, __arg0);
        }

        public global::wxSharp.Window GetChangedWindow()
        {
            var __ret = __Internal.GetChangedWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.Window m_changedWindow
        {
            get
            {
                global::wxSharp.Window __result0;
                if (((global::wxSharp.PaletteChangedEvent.__Internal*) __Instance)->m_changedWindow == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(((global::wxSharp.PaletteChangedEvent.__Internal*) __Instance)->m_changedWindow))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.PaletteChangedEvent.__Internal*) __Instance)->m_changedWindow];
                else global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.PaletteChangedEvent.__Internal*) __Instance)->m_changedWindow] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(((global::wxSharp.PaletteChangedEvent.__Internal*) __Instance)->m_changedWindow);
                return __result0;
            }

            set
            {
                ((global::wxSharp.PaletteChangedEvent.__Internal*)__Instance)->m_changedWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // wxPaletteChangedEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaletteChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaletteChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaletteChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxPaletteChangedEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaletteChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PaletteChangedEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class QueryNewPaletteEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal byte m_paletteRealized;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxQueryNewPaletteEventC2Ei")]
            internal static extern void ctor(global::System.IntPtr __instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxQueryNewPaletteEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxQueryNewPaletteEvent18SetPaletteRealizedEb")]
            internal static extern void SetPaletteRealized(global::System.IntPtr __instance, bool realized);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxQueryNewPaletteEvent18GetPaletteRealizedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetPaletteRealized(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxQueryNewPaletteEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.QueryNewPaletteEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.QueryNewPaletteEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.QueryNewPaletteEvent __CreateInstance(global::wxSharp.QueryNewPaletteEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.QueryNewPaletteEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.QueryNewPaletteEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.QueryNewPaletteEvent.__Internal));
            global::wxSharp.QueryNewPaletteEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private QueryNewPaletteEvent(global::wxSharp.QueryNewPaletteEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected QueryNewPaletteEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public QueryNewPaletteEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.QueryNewPaletteEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, winid);
            SetupVTables(GetType().FullName == "wxSharp.QueryNewPaletteEvent");
        }

        public QueryNewPaletteEvent(global::wxSharp.QueryNewPaletteEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.QueryNewPaletteEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.QueryNewPaletteEvent");
        }

        public void SetPaletteRealized(bool realized)
        {
            __Internal.SetPaletteRealized(__Instance, realized);
        }

        public bool GetPaletteRealized()
        {
            var __ret = __Internal.GetPaletteRealized(__Instance);
            return __ret;
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected bool m_paletteRealized
        {
            get
            {
                return ((global::wxSharp.QueryNewPaletteEvent.__Internal*) __Instance)->m_paletteRealized != 0;
            }

            set
            {
                ((global::wxSharp.QueryNewPaletteEvent.__Internal*)__Instance)->m_paletteRealized = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // wxQueryNewPaletteEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.QueryNewPaletteEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.QueryNewPaletteEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.QueryNewPaletteEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxQueryNewPaletteEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.QueryNewPaletteEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.QueryNewPaletteEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class NavigationKeyEvent : global::wxSharp.Event, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal int m_flags;

            [FieldOffset(48)]
            internal global::System.IntPtr m_focus;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEventC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxNavigationKeyEvent12GetDirectionEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetDirection(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent12SetDirectionEb")]
            internal static extern void SetDirection(global::System.IntPtr __instance, bool bForward);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxNavigationKeyEvent14IsWindowChangeEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowChange(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent15SetWindowChangeEb")]
            internal static extern void SetWindowChange(global::System.IntPtr __instance, bool bIs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxNavigationKeyEvent9IsFromTabEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFromTab(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent10SetFromTabEb")]
            internal static extern void SetFromTab(global::System.IntPtr __instance, bool bIs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxNavigationKeyEvent15GetCurrentFocusEv")]
            internal static extern global::System.IntPtr GetCurrentFocus(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent15SetCurrentFocusEP8wxWindow")]
            internal static extern void SetCurrentFocus(global::System.IntPtr __instance, global::System.IntPtr win);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent8SetFlagsEl")]
            internal static extern void SetFlags(global::System.IntPtr __instance, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        [Flags]
        public enum NavigationKeyEventFlags : uint
        {
            IsBackward = 0x0,
            IsForward = 0x1,
            WinChange = 0x2,
            FromTab = 0x4
        }

        internal static new global::wxSharp.NavigationKeyEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.NavigationKeyEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.NavigationKeyEvent __CreateInstance(global::wxSharp.NavigationKeyEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.NavigationKeyEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.NavigationKeyEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.NavigationKeyEvent.__Internal));
            global::wxSharp.NavigationKeyEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private NavigationKeyEvent(global::wxSharp.NavigationKeyEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected NavigationKeyEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public NavigationKeyEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.NavigationKeyEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.NavigationKeyEvent");
        }

        public NavigationKeyEvent(global::wxSharp.NavigationKeyEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.NavigationKeyEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.NavigationKeyEvent");
        }

        public bool GetDirection()
        {
            var __ret = __Internal.GetDirection(__Instance);
            return __ret;
        }

        public void SetDirection(bool bForward)
        {
            __Internal.SetDirection(__Instance, bForward);
        }

        public bool IsWindowChange()
        {
            var __ret = __Internal.IsWindowChange(__Instance);
            return __ret;
        }

        public void SetWindowChange(bool bIs)
        {
            __Internal.SetWindowChange(__Instance, bIs);
        }

        public bool IsFromTab()
        {
            var __ret = __Internal.IsFromTab(__Instance);
            return __ret;
        }

        public void SetFromTab(bool bIs)
        {
            __Internal.SetFromTab(__Instance, bIs);
        }

        public global::wxSharp.Window GetCurrentFocus()
        {
            var __ret = __Internal.GetCurrentFocus(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public void SetCurrentFocus(global::wxSharp.Window win)
        {
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.SetCurrentFocus(__Instance, __arg0);
        }

        public void SetFlags(int flags)
        {
            __Internal.SetFlags(__Instance, flags);
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        public int m_flags
        {
            get
            {
                return ((global::wxSharp.NavigationKeyEvent.__Internal*) __Instance)->m_flags;
            }

            set
            {
                ((global::wxSharp.NavigationKeyEvent.__Internal*)__Instance)->m_flags = value;
            }
        }

        public global::wxSharp.Window m_focus
        {
            get
            {
                global::wxSharp.Window __result0;
                if (((global::wxSharp.NavigationKeyEvent.__Internal*) __Instance)->m_focus == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(((global::wxSharp.NavigationKeyEvent.__Internal*) __Instance)->m_focus))
                    __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.NavigationKeyEvent.__Internal*) __Instance)->m_focus];
                else global::wxSharp.Window.NativeToManagedMap[((global::wxSharp.NavigationKeyEvent.__Internal*) __Instance)->m_focus] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(((global::wxSharp.NavigationKeyEvent.__Internal*) __Instance)->m_focus);
                return __result0;
            }

            set
            {
                ((global::wxSharp.NavigationKeyEvent.__Internal*)__Instance)->m_focus = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // wxNavigationKeyEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NavigationKeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NavigationKeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NavigationKeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxNavigationKeyEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NavigationKeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const { return wxEVT_CATEGORY_UI; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.NavigationKeyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class WindowCreateEvent : global::wxSharp.CommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxWindowCreateEventC2EP8wxWindow")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr win);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxWindowCreateEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK19wxWindowCreateEvent9GetWindowEv")]
            internal static extern global::System.IntPtr GetWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxWindowCreateEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.WindowCreateEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowCreateEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.WindowCreateEvent __CreateInstance(global::wxSharp.WindowCreateEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowCreateEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.WindowCreateEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowCreateEvent.__Internal));
            global::wxSharp.WindowCreateEvent.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private WindowCreateEvent(global::wxSharp.WindowCreateEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WindowCreateEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public WindowCreateEvent(global::wxSharp.Window win)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowCreateEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.ctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.WindowCreateEvent");
        }

        public WindowCreateEvent(global::wxSharp.WindowCreateEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowCreateEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.WindowCreateEvent");
        }

        public global::wxSharp.Window GetWindow()
        {
            var __ret = __Internal.GetWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxWindowCreateEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowCreateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowCreateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowCreateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxWindowCreateEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowCreateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowCreateEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class WindowDestroyEvent : global::wxSharp.CommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxWindowDestroyEventC2EP8wxWindow")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr win);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxWindowDestroyEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxWindowDestroyEvent9GetWindowEv")]
            internal static extern global::System.IntPtr GetWindow(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxWindowDestroyEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.WindowDestroyEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowDestroyEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.WindowDestroyEvent __CreateInstance(global::wxSharp.WindowDestroyEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.WindowDestroyEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.WindowDestroyEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowDestroyEvent.__Internal));
            global::wxSharp.WindowDestroyEvent.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private WindowDestroyEvent(global::wxSharp.WindowDestroyEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected WindowDestroyEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public WindowDestroyEvent(global::wxSharp.Window win)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowDestroyEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = ReferenceEquals(win, null) ? global::System.IntPtr.Zero : win.__Instance;
            __Internal.ctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.WindowDestroyEvent");
        }

        public WindowDestroyEvent(global::wxSharp.WindowDestroyEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.WindowDestroyEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.WindowDestroyEvent");
        }

        public global::wxSharp.Window GetWindow()
        {
            var __ret = __Internal.GetWindow(__Instance);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxWindowDestroyEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDestroyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDestroyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDestroyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxWindowDestroyEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDestroyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.WindowDestroyEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class HelpEvent : global::wxSharp.CommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 132)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(80)]
            internal global::wxSharp.Point.__Internal m_pos;

            [FieldOffset(88)]
            internal global::wxSharp.String.__Internal m_target;

            [FieldOffset(108)]
            internal global::wxSharp.String.__Internal m_link;

            [FieldOffset(128)]
            internal global::wxSharp.HelpEvent.Source m_origin;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEventC2EiiRK7wxPointNS_6OriginE")]
            internal static extern void ctor(global::System.IntPtr __instance, int type, int winid, global::System.IntPtr pt, global::wxSharp.HelpEvent.Source origin);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent11SetPositionERK7wxPoint")]
            internal static extern void SetPosition(global::System.IntPtr __instance, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxHelpEvent9GetOriginEv")]
            internal static extern global::wxSharp.HelpEvent.Source GetOrigin(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent9SetOriginENS_6OriginE")]
            internal static extern void SetOrigin(global::System.IntPtr __instance, global::wxSharp.HelpEvent.Source origin);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent11GuessOriginENS_6OriginE")]
            internal static extern global::wxSharp.HelpEvent.Source GuessOrigin(global::wxSharp.HelpEvent.Source origin);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        public enum Source : uint
        {
            Origin_Unknown = 0,
            Origin_Keyboard = 1,
            Origin_HelpButton = 2
        }

        internal static new global::wxSharp.HelpEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.HelpEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.HelpEvent __CreateInstance(global::wxSharp.HelpEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.HelpEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.HelpEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.HelpEvent.__Internal));
            global::wxSharp.HelpEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private HelpEvent(global::wxSharp.HelpEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected HelpEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public HelpEvent(int type, int winid, global::wxSharp.Point pt, global::wxSharp.HelpEvent.Source origin)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.HelpEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = pt.__Instance;
            __Internal.ctor(__Instance, type, winid, __arg2, origin);
            SetupVTables(GetType().FullName == "wxSharp.HelpEvent");
        }

        public HelpEvent(global::wxSharp.HelpEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.HelpEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.HelpEvent");
        }

        public void SetPosition(global::wxSharp.Point pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pos.__Instance;
            __Internal.SetPosition(__Instance, __arg0);
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public global::wxSharp.HelpEvent.Source GetOrigin()
        {
            var __ret = __Internal.GetOrigin(__Instance);
            return __ret;
        }

        public void SetOrigin(global::wxSharp.HelpEvent.Source origin)
        {
            __Internal.SetOrigin(__Instance, origin);
        }

        protected static global::wxSharp.HelpEvent.Source GuessOrigin(global::wxSharp.HelpEvent.Source origin)
        {
            var __ret = __Internal.GuessOrigin(origin);
            return __ret;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.Point m_pos
        {
            get
            {
                return global::wxSharp.Point.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.HelpEvent.__Internal*) __Instance)->m_pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.HelpEvent.__Internal*)__Instance)->m_pos = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        protected global::wxSharp.HelpEvent.Source m_origin
        {
            get
            {
                return ((global::wxSharp.HelpEvent.__Internal*) __Instance)->m_origin;
            }

            set
            {
                ((global::wxSharp.HelpEvent.__Internal*)__Instance)->m_origin = value;
            }
        }

        #region Virtual table interop

        // wxHelpEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.HelpEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.HelpEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.HelpEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxHelpEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.HelpEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.HelpEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ClipboardTextEvent : global::wxSharp.CommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxClipboardTextEventC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int type, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxClipboardTextEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxClipboardTextEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.ClipboardTextEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ClipboardTextEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ClipboardTextEvent __CreateInstance(global::wxSharp.ClipboardTextEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ClipboardTextEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ClipboardTextEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ClipboardTextEvent.__Internal));
            global::wxSharp.ClipboardTextEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ClipboardTextEvent(global::wxSharp.ClipboardTextEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ClipboardTextEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ClipboardTextEvent(int type, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ClipboardTextEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, type, winid);
            SetupVTables(GetType().FullName == "wxSharp.ClipboardTextEvent");
        }

        public ClipboardTextEvent(global::wxSharp.ClipboardTextEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ClipboardTextEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ClipboardTextEvent");
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxClipboardTextEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClipboardTextEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClipboardTextEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClipboardTextEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxClipboardTextEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClipboardTextEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ClipboardTextEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class ContextMenuEvent : global::wxSharp.CommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            internal int m_eventType;

            [FieldOffset(16)]
            internal int m_timeStamp;

            [FieldOffset(20)]
            internal int m_id;

            [FieldOffset(24)]
            internal global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            internal global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            internal int m_propagationLevel;

            [FieldOffset(36)]
            internal global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            internal byte m_skipped;

            [FieldOffset(41)]
            internal byte m_isCommandEvent;

            [FieldOffset(42)]
            internal byte m_wasProcessed;

            [FieldOffset(43)]
            internal byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            internal global::wxSharp.String.__Internal m_cmdString;

            [FieldOffset(64)]
            internal int m_commandInt;

            [FieldOffset(68)]
            internal int m_extraLong;

            [FieldOffset(72)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(80)]
            internal global::wxSharp.Point.__Internal m_pos;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxContextMenuEventC2EiiRK7wxPoint")]
            internal static extern void ctor(global::System.IntPtr __instance, int type, int winid, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxContextMenuEventC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxContextMenuEvent11SetPositionERK7wxPoint")]
            internal static extern void SetPosition(global::System.IntPtr __instance, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxContextMenuEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.ContextMenuEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ContextMenuEvent(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ContextMenuEvent __CreateInstance(global::wxSharp.ContextMenuEvent.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ContextMenuEvent(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ContextMenuEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ContextMenuEvent.__Internal));
            global::wxSharp.ContextMenuEvent.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ContextMenuEvent(global::wxSharp.ContextMenuEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ContextMenuEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ContextMenuEvent(int type, int winid, global::wxSharp.Point pt)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ContextMenuEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = pt.__Instance;
            __Internal.ctor(__Instance, type, winid, __arg2);
            SetupVTables(GetType().FullName == "wxSharp.ContextMenuEvent");
        }

        public ContextMenuEvent(global::wxSharp.ContextMenuEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ContextMenuEvent.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ContextMenuEvent");
        }

        public void SetPosition(global::wxSharp.Point pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pos.__Instance;
            __Internal.SetPosition(__Instance, __arg0);
        }

        public override global::wxSharp.Event Clone()
        {
            return base.Clone();
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.Point m_pos
        {
            get
            {
                return global::wxSharp.Point.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.ContextMenuEvent.__Internal*) __Instance)->m_pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.ContextMenuEvent.__Internal*)__Instance)->m_pos = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        #region Virtual table interop

        // wxContextMenuEvent
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ContextMenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ContextMenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ContextMenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE { return new wxContextMenuEvent(*this); }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CloneDelegateInstance;

        private static global::System.IntPtr _CloneDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ContextMenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE { return wxEVT_CATEGORY_USER_INPUT; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxEventCategory_IntPtr _GetEventCategoryDelegateInstance;

        private static global::wxSharp.EventCategory _GetEventCategoryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ContextMenuEvent) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _CloneDelegateInstance += _CloneDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneDelegateInstance).ToPointer();
                _GetEventCategoryDelegateInstance += _GetEventCategoryDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetEventCategoryDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class EventTableEntryBase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_id;

            [FieldOffset(4)]
            internal int m_lastId;

            [FieldOffset(8)]
            internal global::System.IntPtr m_fn;

            [FieldOffset(12)]
            internal global::System.IntPtr m_callbackUserData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxEventTableEntryBaseC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr entry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxEventTableEntryBaseD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.EventTableEntryBase> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.EventTableEntryBase>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.EventTableEntryBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.EventTableEntryBase(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.EventTableEntryBase __CreateInstance(global::wxSharp.EventTableEntryBase.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.EventTableEntryBase(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.EventTableEntryBase.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTableEntryBase.__Internal));
            global::wxSharp.EventTableEntryBase.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private EventTableEntryBase(global::wxSharp.EventTableEntryBase.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EventTableEntryBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public EventTableEntryBase(global::wxSharp.EventTableEntryBase entry)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EventTableEntryBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(entry, null))
                throw new global::System.ArgumentNullException("entry", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = entry.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.EventTableEntryBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int m_id
        {
            get
            {
                return ((global::wxSharp.EventTableEntryBase.__Internal*) __Instance)->m_id;
            }

            set
            {
                ((global::wxSharp.EventTableEntryBase.__Internal*)__Instance)->m_id = value;
            }
        }

        public int m_lastId
        {
            get
            {
                return ((global::wxSharp.EventTableEntryBase.__Internal*) __Instance)->m_lastId;
            }

            set
            {
                ((global::wxSharp.EventTableEntryBase.__Internal*)__Instance)->m_lastId = value;
            }
        }

        public global::wxSharp.IwxObject m_callbackUserData
        {
            get
            {
                global::wxSharp.Object __result0;
                if (((global::wxSharp.EventTableEntryBase.__Internal*) __Instance)->m_callbackUserData == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(((global::wxSharp.EventTableEntryBase.__Internal*) __Instance)->m_callbackUserData))
                    __result0 = (global::wxSharp.Object) global::wxSharp.Object.NativeToManagedMap[((global::wxSharp.EventTableEntryBase.__Internal*) __Instance)->m_callbackUserData];
                else global::wxSharp.Object.NativeToManagedMap[((global::wxSharp.EventTableEntryBase.__Internal*) __Instance)->m_callbackUserData] = __result0 = (global::wxSharp.Object) global::wxSharp.Object.__CreateInstance(((global::wxSharp.EventTableEntryBase.__Internal*) __Instance)->m_callbackUserData);
                return __result0;
            }

            set
            {
                ((global::wxSharp.EventTableEntryBase.__Internal*)__Instance)->m_callbackUserData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class EvtHandler : global::wxSharp.Object, global::wxSharp.IwxEvtHandler, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_first;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nextHandler;

            [FieldOffset(16)]
            internal global::System.IntPtr m_previousHandler;

            [FieldOffset(20)]
            internal global::System.IntPtr m_dynamicEvents;

            [FieldOffset(24)]
            internal global::System.IntPtr m_pendingEvents;

            [FieldOffset(28)]
            internal global::wxSharp.CriticalSection.__Internal m_pendingEventsLock;

            [FieldOffset(32)]
            internal byte m_enabled;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(40)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandlerC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler14GetNextHandlerEv")]
            internal static extern global::System.IntPtr GetNextHandler(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler18GetPreviousHandlerEv")]
            internal static extern global::System.IntPtr GetPreviousHandler(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler20SetEvtHandlerEnabledEb")]
            internal static extern void SetEvtHandlerEnabled(global::System.IntPtr __instance, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler20GetEvtHandlerEnabledEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetEvtHandlerEnabled(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler6UnlinkEv")]
            internal static extern void Unlink(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler10IsUnlinkedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsUnlinked(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18SafelyProcessEventER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SafelyProcessEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ProcessEventLocallyER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessEventLocally(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler20ProcessPendingEventsEv")]
            internal static extern void ProcessPendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19DeletePendingEventsEv")]
            internal static extern void DeletePendingEvents(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18ProcessThreadEventERK7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessThreadEvent(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18WXConsumeExceptionEv")]
            internal static extern void WXConsumeException();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler13SetClientDataEPv")]
            internal static extern void SetClientData(global::System.IntPtr __instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler13GetClientDataEv")]
            internal static extern global::System.IntPtr GetClientData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler23ProcessEventIfMatchesIdERK21wxEventTableEntryBasePS_R7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ProcessEventIfMatchesId(global::System.IntPtr tableEntry, global::System.IntPtr handler, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler23SearchDynamicEventTableER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SearchDynamicEventTable(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ClearEventHashTableEv")]
            internal static extern void ClearEventHashTable(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler15OnSinkDestroyedEPS_")]
            internal static extern void OnSinkDestroyed(global::System.IntPtr __instance, global::System.IntPtr sink);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler11TryHereOnlyER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TryHereOnly(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler16TryBeforeAndHereER7wxEvent")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TryBeforeAndHere(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.EvtHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.EvtHandler(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.EvtHandler __CreateInstance(global::wxSharp.EvtHandler.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.EvtHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.EvtHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.EvtHandler.__Internal));
            *(global::wxSharp.EvtHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private EvtHandler(global::wxSharp.EvtHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected EvtHandler(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public EvtHandler()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.EvtHandler.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.EvtHandler");
        }

        public global::wxSharp.IwxEvtHandler GetNextHandler()
        {
            var __ret = __Internal.GetNextHandler(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.IwxEvtHandler GetPreviousHandler()
        {
            var __ret = __Internal.GetPreviousHandler(__Instance);
            global::wxSharp.IwxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[__ret];
            else global::wxSharp.EvtHandler.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void SetNextHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___SetNextHandlerDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            ___SetNextHandlerDelegate(__Instance, __arg0);
        }

        public virtual void SetPreviousHandler(global::wxSharp.IwxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___SetPreviousHandlerDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            ___SetPreviousHandlerDelegate(__Instance, __arg0);
        }

        public void SetEvtHandlerEnabled(bool enabled)
        {
            __Internal.SetEvtHandlerEnabled(__Instance, enabled);
        }

        public bool GetEvtHandlerEnabled()
        {
            var __ret = __Internal.GetEvtHandlerEnabled(__Instance);
            return __ret;
        }

        public void Unlink()
        {
            __Internal.Unlink(__Instance);
        }

        public bool IsUnlinked()
        {
            var __ret = __Internal.IsUnlinked(__Instance);
            return __ret;
        }

        public virtual bool ProcessEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___ProcessEventDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___ProcessEventDelegate(__Instance, __arg0);
            return __ret;
        }

        public bool SafelyProcessEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.SafelyProcessEvent(__Instance, __arg0);
            return __ret;
        }

        public bool ProcessEventLocally(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessEventLocally(__Instance, __arg0);
            return __ret;
        }

        public virtual void QueueEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___QueueEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            var __arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            ___QueueEventDelegate(__Instance, __arg0);
        }

        public virtual void AddPendingEvent(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___AddPendingEventDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            ___AddPendingEventDelegate(__Instance, __arg0);
        }

        public void ProcessPendingEvents()
        {
            __Internal.ProcessPendingEvents(__Instance);
        }

        public void DeletePendingEvents()
        {
            __Internal.DeletePendingEvents(__Instance);
        }

        public bool ProcessThreadEvent(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.ProcessThreadEvent(__Instance, __arg0);
            return __ret;
        }

        public void SetClientData(global::System.IntPtr data)
        {
            __Internal.SetClientData(__Instance, data);
        }

        public global::System.IntPtr GetClientData()
        {
            var __ret = __Internal.GetClientData(__Instance);
            return __ret;
        }

        public bool SearchDynamicEventTable(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.SearchDynamicEventTable(__Instance, __arg0);
            return __ret;
        }

        public void ClearEventHashTable()
        {
            __Internal.ClearEventHashTable(__Instance);
        }

        public void OnSinkDestroyed(global::wxSharp.IwxEvtHandler sink)
        {
            var __arg0 = ReferenceEquals(sink, null) ? global::System.IntPtr.Zero : sink.__PointerToEvtHandler;
            __Internal.OnSinkDestroyed(__Instance, __arg0);
        }

        protected bool TryHereOnly(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.TryHereOnly(__Instance, __arg0);
            return __ret;
        }

        protected bool TryBeforeAndHere(global::wxSharp.Event @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = __Internal.TryBeforeAndHere(__Instance, __arg0);
            return __ret;
        }

        protected virtual bool TryAfter(global::wxSharp.Event @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___TryAfterDelegate = (global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            var __ret = ___TryAfterDelegate(__Instance, __arg0);
            return __ret;
        }

        protected virtual void DoSetClientData(global::System.IntPtr data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___DoSetClientDataDelegate = (global::wxSharp.Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr_IntPtr));
            ___DoSetClientDataDelegate(__Instance, data);
        }

        protected virtual global::System.IntPtr DoGetClientData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___DoGetClientDataDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___DoGetClientDataDelegate(__Instance);
            return __ret;
        }

        public static void WXConsumeException()
        {
            __Internal.WXConsumeException();
        }

        public static bool ProcessEventIfMatchesId(global::wxSharp.EventTableEntryBase tableEntry, global::wxSharp.IwxEvtHandler handler, global::wxSharp.Event @event)
        {
            if (ReferenceEquals(tableEntry, null))
                throw new global::System.ArgumentNullException("tableEntry", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = tableEntry.__Instance;
            var __arg1 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__PointerToEvtHandler;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = @event.__Instance;
            var __ret = __Internal.ProcessEventIfMatchesId(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        protected global::wxSharp.IwxEvtHandler m_nextHandler
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_nextHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_nextHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_nextHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_nextHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_nextHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.EvtHandler.__Internal*)__Instance)->m_nextHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected global::wxSharp.IwxEvtHandler m_previousHandler
        {
            get
            {
                global::wxSharp.EvtHandler __result0;
                if (((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_previousHandler == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_previousHandler))
                    __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_previousHandler];
                else global::wxSharp.EvtHandler.NativeToManagedMap[((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_previousHandler] = __result0 = (global::wxSharp.EvtHandler) global::wxSharp.EvtHandler.__CreateInstance(((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_previousHandler);
                return __result0;
            }

            set
            {
                ((global::wxSharp.EvtHandler.__Internal*)__Instance)->m_previousHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_enabled
        {
            get
            {
                return ((global::wxSharp.EvtHandler.__Internal*) __Instance)->m_enabled != 0;
            }

            set
            {
                ((global::wxSharp.EvtHandler.__Internal*)__Instance)->m_enabled = (byte) (value ? 1 : 0);
            }
        }

        public global::System.IntPtr __PointerTowxEvtHandler
        {
            get
            {
                return __Instance + 0;
            }
        }

        public global::System.IntPtr __PointerTowxTrackable
        {
            get
            {
                return __Instance + 8;
            }
        }

        #region Virtual table interop

        // virtual ~wxEvtHandler()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetNextHandler(wxEvtHandler *handler) { m_nextHandler = handler; }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetNextHandlerDelegateInstance;

        private static void _SetNextHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetNextHandler(__result0);
        }

        // void SetPreviousHandler(wxEvtHandler *handler) { m_previousHandler = handler; }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetPreviousHandlerDelegateInstance;

        private static void _SetPreviousHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetPreviousHandler(__result0);
        }

        // bool ProcessEvent(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _ProcessEventDelegateInstance;

        private static bool _ProcessEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.ProcessEvent(__result0);
        }

        // void QueueEvent(wxEvent *event)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _QueueEventDelegateInstance;

        private static void _QueueEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.QueueEvent(__result0);
        }

        // void AddPendingEvent(const wxEvent& event) { // notice that the thread-safety problem comes from the fact that // Clone() doesn't make deep copies of wxString fields of wxEvent // object and so the same wxString could be used from both threads when // the event object is destroyed in this one -- QueueEvent() avoids // this problem as the event pointer is not used any more in this // thread at all after it is called. QueueEvent(event.Clone()); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AddPendingEventDelegateInstance;

        private static void _AddPendingEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.AddPendingEvent(__result0);
        }

        // bool TryBefore(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryBeforeDelegateInstance;

        private static bool _TryBeforeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryBefore(__result0);
        }

        // bool TryAfter(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryAfterDelegateInstance;

        private static bool _TryAfterDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryAfter(__result0);
        }

        // void DoSetClientData( void *data )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoSetClientDataDelegateInstance;

        private static void _DoSetClientDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.EvtHandler) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[12];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _SetNextHandlerDelegateInstance += _SetNextHandlerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetNextHandlerDelegateInstance).ToPointer();
                _SetPreviousHandlerDelegateInstance += _SetPreviousHandlerDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_SetPreviousHandlerDelegateInstance).ToPointer();
                _ProcessEventDelegateInstance += _ProcessEventDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_ProcessEventDelegateInstance).ToPointer();
                _QueueEventDelegateInstance += _QueueEventDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_QueueEventDelegateInstance).ToPointer();
                _AddPendingEventDelegateInstance += _AddPendingEventDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_AddPendingEventDelegateInstance).ToPointer();
                _TryBeforeDelegateInstance += _TryBeforeDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_TryBeforeDelegateInstance).ToPointer();
                _TryAfterDelegateInstance += _TryAfterDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_TryAfterDelegateInstance).ToPointer();
                _DoSetClientDataDelegateInstance += _DoSetClientDataDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_DoSetClientDataDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(22 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(22 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = _Thunks[8];
                    *(void**) (vfptr0 + 48) = _Thunks[9];
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = _Thunks[10];
                    *(void**) (vfptr0 + 76) = _Thunks[11];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class EvtHandlerArray
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_size;

            [FieldOffset(4)]
            internal uint m_capacity;

            [FieldOffset(8)]
            internal global::System.IntPtr m_values;
        }
    }

    public unsafe partial class EventInternal : global::wxSharp.Event, IDisposable
    {
        private static void* __CopyValue(global::wxSharp.Event.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Event.__Internal));
            *(global::wxSharp.Event.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal EventInternal(global::wxSharp.Event.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal EventInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class AsyncMethodCallEventInternal : global::wxSharp.AsyncMethodCallEvent, IDisposable
    {
        private static void* __CopyValue(global::wxSharp.AsyncMethodCallEvent.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.AsyncMethodCallEvent.__Internal));
            *(global::wxSharp.AsyncMethodCallEvent.__Internal*) ret = native;
            return ret.ToPointer();
        }

        internal AsyncMethodCallEventInternal(global::wxSharp.AsyncMethodCallEvent.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal AsyncMethodCallEventInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
        }

        public override void Execute()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___ExecuteDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___ExecuteDelegate(__Instance);
        }

        public override global::wxSharp.Event Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___CloneDelegate = (global::wxSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CloneDelegate(__Instance);
            global::wxSharp.Event __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[__ret];
            else global::wxSharp.Event.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class @event
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxNewEventTypev")]
            internal static extern int NewEventType();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxPostEventP12wxEvtHandlerRK7wxEvent")]
            internal static extern void PostEvent(global::System.IntPtr dest, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxQueueEventP12wxEvtHandlerP7wxEvent")]
            internal static extern void QueueEvent(global::System.IntPtr dest, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z21wxFindFocusDescendantP8wxWindow")]
            internal static extern global::System.IntPtr FindFocusDescendant(global::System.IntPtr ancestor);
        }

        public static int NewEventType()
        {
            var __ret = __Internal.NewEventType();
            return __ret;
        }

        public static void PostEvent(global::wxSharp.IwxEvtHandler dest, global::wxSharp.Event @event)
        {
            var __arg0 = ReferenceEquals(dest, null) ? global::System.IntPtr.Zero : dest.__PointerToEvtHandler;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = @event.__Instance;
            __Internal.PostEvent(__arg0, __arg1);
        }

        public static void QueueEvent(global::wxSharp.IwxEvtHandler dest, global::wxSharp.Event @event)
        {
            var __arg0 = ReferenceEquals(dest, null) ? global::System.IntPtr.Zero : dest.__PointerToEvtHandler;
            var __arg1 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            __Internal.QueueEvent(__arg0, __arg1);
        }

        public static global::wxSharp.Window FindFocusDescendant(global::wxSharp.Window ancestor)
        {
            var __arg0 = ReferenceEquals(ancestor, null) ? global::System.IntPtr.Zero : ancestor.__Instance;
            var __ret = __Internal.FindFocusDescendant(__arg0);
            global::wxSharp.Window __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[__ret];
            else global::wxSharp.Window.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(__ret);
            return __result0;
        }

        public static int EVT_NULL
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_NULL");
                return *__ptr;
            }
        }

        public static int EVT_FIRST
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_FIRST");
                return *__ptr;
            }
        }

        public static int EVT_USER_FIRST
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_USER_FIRST");
                return *__ptr;
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.ThreadEvent> EVT_THREAD
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_THREAD");
                return global::wxSharp.EventTypeTag<global::wxSharp.ThreadEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.AsyncMethodCallEvent> EVT_ASYNC_METHOD_CALL
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_ASYNC_METHOD_CALL");
                return global::wxSharp.EventTypeTag<global::wxSharp.AsyncMethodCallEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_LEFT_DOWN
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_LEFT_DOWN");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_LEFT_UP
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_LEFT_UP");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_MIDDLE_DOWN
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MIDDLE_DOWN");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_MIDDLE_UP
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MIDDLE_UP");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_RIGHT_DOWN
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_RIGHT_DOWN");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_RIGHT_UP
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_RIGHT_UP");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_MOTION
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MOTION");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_ENTER_WINDOW
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_ENTER_WINDOW");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_LEAVE_WINDOW
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_LEAVE_WINDOW");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_LEFT_DCLICK
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_LEFT_DCLICK");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_MIDDLE_DCLICK
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MIDDLE_DCLICK");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_RIGHT_DCLICK
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_RIGHT_DCLICK");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.FocusEvent> EVT_SET_FOCUS
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_SET_FOCUS");
                return global::wxSharp.EventTypeTag<global::wxSharp.FocusEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.FocusEvent> EVT_KILL_FOCUS
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_KILL_FOCUS");
                return global::wxSharp.EventTypeTag<global::wxSharp.FocusEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.ChildFocusEvent> EVT_CHILD_FOCUS
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_CHILD_FOCUS");
                return global::wxSharp.EventTypeTag<global::wxSharp.ChildFocusEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_MOUSEWHEEL
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MOUSEWHEEL");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_AUX1_DOWN
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_AUX1_DOWN");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_AUX1_UP
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_AUX1_UP");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_AUX1_DCLICK
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_AUX1_DCLICK");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_AUX2_DOWN
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_AUX2_DOWN");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_AUX2_UP
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_AUX2_UP");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_AUX2_DCLICK
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_AUX2_DCLICK");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent> EVT_MAGNIFY
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MAGNIFY");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent> EVT_CHAR
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_CHAR");
                return global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent> EVT_CHAR_HOOK
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_CHAR_HOOK");
                return global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.NavigationKeyEvent> EVT_NAVIGATION_KEY
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_NAVIGATION_KEY");
                return global::wxSharp.EventTypeTag<global::wxSharp.NavigationKeyEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent> EVT_KEY_DOWN
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_KEY_DOWN");
                return global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent> EVT_KEY_UP
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_KEY_UP");
                return global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent> EVT_HOTKEY
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_HOTKEY");
                return global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent> EVT_AFTER_CHAR
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_AFTER_CHAR");
                return global::wxSharp.EventTypeTag<global::wxSharp.KeyEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.SetCursorEvent> EVT_SET_CURSOR
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_SET_CURSOR");
                return global::wxSharp.EventTypeTag<global::wxSharp.SetCursorEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.PanGestureEvent> EVT_GESTURE_PAN
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_GESTURE_PAN");
                return global::wxSharp.EventTypeTag<global::wxSharp.PanGestureEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.ZoomGestureEvent> EVT_GESTURE_ZOOM
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_GESTURE_ZOOM");
                return global::wxSharp.EventTypeTag<global::wxSharp.ZoomGestureEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.RotateGestureEvent> EVT_GESTURE_ROTATE
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_GESTURE_ROTATE");
                return global::wxSharp.EventTypeTag<global::wxSharp.RotateGestureEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.TwoFingerTapEvent> EVT_TWO_FINGER_TAP
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_TWO_FINGER_TAP");
                return global::wxSharp.EventTypeTag<global::wxSharp.TwoFingerTapEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.LongPressEvent> EVT_LONG_PRESS
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_LONG_PRESS");
                return global::wxSharp.EventTypeTag<global::wxSharp.LongPressEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.PressAndTapEvent> EVT_PRESS_AND_TAP
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_PRESS_AND_TAP");
                return global::wxSharp.EventTypeTag<global::wxSharp.PressAndTapEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.SizeEvent> EVT_SIZE
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_SIZE");
                return global::wxSharp.EventTypeTag<global::wxSharp.SizeEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MoveEvent> EVT_MOVE
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MOVE");
                return global::wxSharp.EventTypeTag<global::wxSharp.MoveEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.CloseEvent> EVT_CLOSE_WINDOW
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_CLOSE_WINDOW");
                return global::wxSharp.EventTypeTag<global::wxSharp.CloseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.CloseEvent> EVT_END_SESSION
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_END_SESSION");
                return global::wxSharp.EventTypeTag<global::wxSharp.CloseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.CloseEvent> EVT_QUERY_END_SESSION
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_QUERY_END_SESSION");
                return global::wxSharp.EventTypeTag<global::wxSharp.CloseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.ShowEvent> EVT_SHOW
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_SHOW");
                return global::wxSharp.EventTypeTag<global::wxSharp.ShowEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.IconizeEvent> EVT_ICONIZE
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_ICONIZE");
                return global::wxSharp.EventTypeTag<global::wxSharp.IconizeEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MaximizeEvent> EVT_MAXIMIZE
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MAXIMIZE");
                return global::wxSharp.EventTypeTag<global::wxSharp.MaximizeEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseCaptureChangedEvent> EVT_MOUSE_CAPTURE_CHANGED
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MOUSE_CAPTURE_CHANGED");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseCaptureChangedEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MouseCaptureLostEvent> EVT_MOUSE_CAPTURE_LOST
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MOUSE_CAPTURE_LOST");
                return global::wxSharp.EventTypeTag<global::wxSharp.MouseCaptureLostEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.EraseEvent> EVT_ERASE_BACKGROUND
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_ERASE_BACKGROUND");
                return global::wxSharp.EventTypeTag<global::wxSharp.EraseEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.SysColourChangedEvent> EVT_SYS_COLOUR_CHANGED
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_SYS_COLOUR_CHANGED");
                return global::wxSharp.EventTypeTag<global::wxSharp.SysColourChangedEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.DisplayChangedEvent> EVT_DISPLAY_CHANGED
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_DISPLAY_CHANGED");
                return global::wxSharp.EventTypeTag<global::wxSharp.DisplayChangedEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.DPIChangedEvent> EVT_DPI_CHANGED
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_DPI_CHANGED");
                return global::wxSharp.EventTypeTag<global::wxSharp.DPIChangedEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.QueryNewPaletteEvent> EVT_QUERY_NEW_PALETTE
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_QUERY_NEW_PALETTE");
                return global::wxSharp.EventTypeTag<global::wxSharp.QueryNewPaletteEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.PaletteChangedEvent> EVT_PALETTE_CHANGED
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_PALETTE_CHANGED");
                return global::wxSharp.EventTypeTag<global::wxSharp.PaletteChangedEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.JoystickEvent> EVT_JOY_BUTTON_DOWN
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_JOY_BUTTON_DOWN");
                return global::wxSharp.EventTypeTag<global::wxSharp.JoystickEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.JoystickEvent> EVT_JOY_BUTTON_UP
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_JOY_BUTTON_UP");
                return global::wxSharp.EventTypeTag<global::wxSharp.JoystickEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.JoystickEvent> EVT_JOY_MOVE
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_JOY_MOVE");
                return global::wxSharp.EventTypeTag<global::wxSharp.JoystickEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.JoystickEvent> EVT_JOY_ZMOVE
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_JOY_ZMOVE");
                return global::wxSharp.EventTypeTag<global::wxSharp.JoystickEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.InitDialogEvent> EVT_INIT_DIALOG
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_INIT_DIALOG");
                return global::wxSharp.EventTypeTag<global::wxSharp.InitDialogEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.IdleEvent> EVT_IDLE
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_IDLE");
                return global::wxSharp.EventTypeTag<global::wxSharp.IdleEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.UpdateUIEvent> EVT_UPDATE_UI
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_UPDATE_UI");
                return global::wxSharp.EventTypeTag<global::wxSharp.UpdateUIEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.SizeEvent> EVT_SIZING
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_SIZING");
                return global::wxSharp.EventTypeTag<global::wxSharp.SizeEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MoveEvent> EVT_MOVING
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MOVING");
                return global::wxSharp.EventTypeTag<global::wxSharp.MoveEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MoveEvent> EVT_MOVE_START
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MOVE_START");
                return global::wxSharp.EventTypeTag<global::wxSharp.MoveEvent>.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.EventTypeTag<global::wxSharp.MoveEvent> EVT_MOVE_END
        {
            get
            {
                var __ptr = (global::wxSharp.EventTypeTag.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxEVT_MOVE_END");
                return global::wxSharp.EventTypeTag<global::wxSharp.MoveEvent>.__CreateInstance(*__ptr);
            }
        }

        public static uint TwoFingerTimeInterval
        {
            get
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZL23wxTwoFingerTimeInterval");
                return *__ptr;
            }
        }
    }

    namespace Private
    {
    }
}
