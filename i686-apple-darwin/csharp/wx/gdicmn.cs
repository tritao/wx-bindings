// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum BitmapType : uint
    {
        BITMAP_TYPE_INVALID = 0,
        BITMAP_TYPE_BMP = 1,
        BITMAP_TYPE_BMP_RESOURCE = 2,
        BITMAP_TYPE_RESOURCE = 2,
        BITMAP_TYPE_ICO = 3,
        BITMAP_TYPE_ICO_RESOURCE = 4,
        BITMAP_TYPE_CUR = 5,
        BITMAP_TYPE_CUR_RESOURCE = 6,
        BITMAP_TYPE_XBM = 7,
        BITMAP_TYPE_XBM_DATA = 8,
        BITMAP_TYPE_XPM = 9,
        BITMAP_TYPE_XPM_DATA = 10,
        BITMAP_TYPE_TIFF = 11,
        BITMAP_TYPE_TIF = 11,
        BITMAP_TYPE_TIFF_RESOURCE = 12,
        BITMAP_TYPE_TIF_RESOURCE = 12,
        BITMAP_TYPE_GIF = 13,
        BITMAP_TYPE_GIF_RESOURCE = 14,
        BITMAP_TYPE_PNG = 15,
        BITMAP_TYPE_PNG_RESOURCE = 16,
        BITMAP_TYPE_JPEG = 17,
        BITMAP_TYPE_JPEG_RESOURCE = 18,
        BITMAP_TYPE_PNM = 19,
        BITMAP_TYPE_PNM_RESOURCE = 20,
        BITMAP_TYPE_PCX = 21,
        BITMAP_TYPE_PCX_RESOURCE = 22,
        BITMAP_TYPE_PICT = 23,
        BITMAP_TYPE_PICT_RESOURCE = 24,
        BITMAP_TYPE_ICON = 25,
        BITMAP_TYPE_ICON_RESOURCE = 26,
        BITMAP_TYPE_ANI = 27,
        BITMAP_TYPE_IFF = 28,
        BITMAP_TYPE_TGA = 29,
        BITMAP_TYPE_MACCURSOR = 30,
        BITMAP_TYPE_MACCURSOR_RESOURCE = 31,
        BITMAP_TYPE_MAX = 32,
        BITMAP_TYPE_ANY = 50
    }

    public enum StockCursor : uint
    {
        CURSOR_NONE = 0,
        CURSOR_ARROW = 1,
        CURSOR_RIGHT_ARROW = 2,
        CURSOR_BULLSEYE = 3,
        CURSOR_CHAR = 4,
        CURSOR_CROSS = 5,
        CURSOR_HAND = 6,
        CURSOR_IBEAM = 7,
        CURSOR_LEFT_BUTTON = 8,
        CURSOR_MAGNIFIER = 9,
        CURSOR_MIDDLE_BUTTON = 10,
        CURSOR_NO_ENTRY = 11,
        CURSOR_PAINT_BRUSH = 12,
        CURSOR_PENCIL = 13,
        CURSOR_POINT_LEFT = 14,
        CURSOR_POINT_RIGHT = 15,
        CURSOR_QUESTION_ARROW = 16,
        CURSOR_RIGHT_BUTTON = 17,
        CURSOR_SIZENESW = 18,
        CURSOR_SIZENS = 19,
        CURSOR_SIZENWSE = 20,
        CURSOR_SIZEWE = 21,
        CURSOR_SIZING = 22,
        CURSOR_SPRAYCAN = 23,
        CURSOR_WAIT = 24,
        CURSOR_WATCH = 25,
        CURSOR_BLANK = 26,
        CURSOR_COPY_ARROW = 27,
        CURSOR_ARROWWAIT = 28,
        CURSOR_OPEN_HAND = 29,
        CURSOR_CLOSED_HAND = 30,
        CURSOR_MAX = 31
    }

    public enum PolygonFillMode : uint
    {
        ODDEVEN_RULE = 1,
        WINDING_RULE = 2
    }

    public enum EllipsizeFlags : uint
    {
        ELLIPSIZE_FLAGS_NONE = 0,
        ELLIPSIZE_FLAGS_PROCESS_MNEMONICS = 1,
        ELLIPSIZE_FLAGS_EXPAND_TABS = 2,
        ELLIPSIZE_FLAGS_DEFAULT = 3
    }

    public enum EllipsizeMode : uint
    {
        ELLIPSIZE_NONE = 0,
        ELLIPSIZE_START = 1,
        ELLIPSIZE_MIDDLE = 2,
        ELLIPSIZE_END = 3
    }

    public unsafe partial class Size : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int x;

            [FieldOffset(4)]
            internal int y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSizeC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSizeC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int xx, int yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSizeC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncToERKS_")]
            internal static extern void IncTo(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecToERKS_")]
            internal static extern void DecTo(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize16DecToIfSpecifiedERKS_")]
            internal static extern void DecToIfSpecified(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncByEii")]
            internal static extern void IncBy(global::System.IntPtr __instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncByERK7wxPoint")]
            internal static extern void IncBy(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncByERKS_")]
            internal static extern void IncBy_1(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncByEi")]
            internal static extern void IncBy(global::System.IntPtr __instance, int d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecByEii")]
            internal static extern void DecBy(global::System.IntPtr __instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecByERK7wxPoint")]
            internal static extern void DecBy(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecByERKS_")]
            internal static extern void DecBy_1(global::System.IntPtr __instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecByEi")]
            internal static extern void DecBy(global::System.IntPtr __instance, int d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize3SetEii")]
            internal static extern void Set(global::System.IntPtr __instance, int xx, int yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize8SetWidthEi")]
            internal static extern void SetWidth(global::System.IntPtr __instance, int w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize9SetHeightEi")]
            internal static extern void SetHeight(global::System.IntPtr __instance, int h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize8GetWidthEv")]
            internal static extern int GetWidth(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize9GetHeightEv")]
            internal static extern int GetHeight(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize16IsFullySpecifiedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFullySpecified(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize11SetDefaultsERKS_")]
            internal static extern void SetDefaults(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize4GetXEv")]
            internal static extern int GetX(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize4GetYEv")]
            internal static extern int GetY(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK6wxSizeS1_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK6wxSizeS1_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK6wxSizeS1_")]
            internal static extern global::wxSharp.Size.__Internal OperatorPlus(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK6wxSizeS1_")]
            internal static extern global::wxSharp.Size.__Internal OperatorMinus(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK6wxSizel")]
            internal static extern global::wxSharp.Size.__Internal OperatorSlash(global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK6wxSizel")]
            internal static extern global::wxSharp.Size.__Internal OperatorStar(global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmllRK6wxSize")]
            internal static extern global::wxSharp.Size.__Internal OperatorStar(int i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK6wxSizem")]
            internal static extern global::wxSharp.Size.__Internal OperatorSlash_1(global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK6wxSizem")]
            internal static extern global::wxSharp.Size.__Internal OperatorStar_1(global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlmRK6wxSize")]
            internal static extern global::wxSharp.Size.__Internal OperatorStar_1(uint i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK6wxSized")]
            internal static extern global::wxSharp.Size.__Internal OperatorStar_2(global::System.IntPtr s, double i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmldRK6wxSize")]
            internal static extern global::wxSharp.Size.__Internal OperatorStar_2(double i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK6wxSizeRK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal OperatorPlus_1(global::System.IntPtr s, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK6wxSizeRK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal OperatorMinus_1(global::System.IntPtr s, global::System.IntPtr p);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Size> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Size>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.Size __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Size(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Size __CreateInstance(global::wxSharp.Size.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Size(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Size.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Size.__Internal));
            *(global::wxSharp.Size.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Size(global::wxSharp.Size.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Size(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Size()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Size.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public Size(int xx, int yy)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Size.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, xx, yy);
        }

        public Size(global::wxSharp.Size _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Size.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::wxSharp.Size.__Internal*) __Instance) = *((global::wxSharp.Size.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.Size __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void IncTo(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            __Internal.IncTo(__Instance, __arg0);
        }

        public void DecTo(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            __Internal.DecTo(__Instance, __arg0);
        }

        public void DecToIfSpecified(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            __Internal.DecToIfSpecified(__Instance, __arg0);
        }

        public void IncBy(int dx, int dy)
        {
            __Internal.IncBy(__Instance, dx, dy);
        }

        public void IncBy(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.IncBy(__Instance, __arg0);
        }

        public void IncBy(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            __Internal.IncBy_1(__Instance, __arg0);
        }

        public void IncBy(int d)
        {
            __Internal.IncBy(__Instance, d);
        }

        public void DecBy(int dx, int dy)
        {
            __Internal.DecBy(__Instance, dx, dy);
        }

        public void DecBy(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.DecBy(__Instance, __arg0);
        }

        public void DecBy(global::wxSharp.Size sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sz.__Instance;
            __Internal.DecBy_1(__Instance, __arg0);
        }

        public void DecBy(int d)
        {
            __Internal.DecBy(__Instance, d);
        }

        public void Set(int xx, int yy)
        {
            __Internal.Set(__Instance, xx, yy);
        }

        public void SetWidth(int w)
        {
            __Internal.SetWidth(__Instance, w);
        }

        public void SetHeight(int h)
        {
            __Internal.SetHeight(__Instance, h);
        }

        public int GetWidth()
        {
            var __ret = __Internal.GetWidth(__Instance);
            return __ret;
        }

        public int GetHeight()
        {
            var __ret = __Internal.GetHeight(__Instance);
            return __ret;
        }

        public bool IsFullySpecified()
        {
            var __ret = __Internal.IsFullySpecified(__Instance);
            return __ret;
        }

        public void SetDefaults(global::wxSharp.Size size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.SetDefaults(__Instance, __arg0);
        }

        public int GetX()
        {
            var __ret = __Internal.GetX(__Instance);
            return __ret;
        }

        public int GetY()
        {
            var __ret = __Internal.GetY(__Instance);
            return __ret;
        }

        public static bool operator ==(global::wxSharp.Size s1, global::wxSharp.Size s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return s1Null && s2Null;
            var __arg0 = s1.__Instance;
            var __arg1 = s2.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::wxSharp.Size;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::wxSharp.Size.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::wxSharp.Size s1, global::wxSharp.Size s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return !(s1Null && s2Null);
            var __arg0 = s1.__Instance;
            var __arg1 = s2.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static global::wxSharp.Size operator +(global::wxSharp.Size s1, global::wxSharp.Size s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s2.__Instance;
            var __ret = __Internal.OperatorPlus(__arg0, __arg1);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size operator -(global::wxSharp.Size s1, global::wxSharp.Size s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s2.__Instance;
            var __ret = __Internal.OperatorMinus(__arg0, __arg1);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size operator /(global::wxSharp.Size s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorSlash(__arg0, i);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size operator *(global::wxSharp.Size s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorStar(__arg0, i);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size operator *(int i, global::wxSharp.Size s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = __Internal.OperatorStar(i, __arg1);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size operator /(global::wxSharp.Size s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorSlash_1(__arg0, i);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size operator *(global::wxSharp.Size s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorStar_1(__arg0, i);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size operator *(uint i, global::wxSharp.Size s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = __Internal.OperatorStar_1(i, __arg1);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size operator *(global::wxSharp.Size s, double i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorStar_2(__arg0, i);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size operator *(double i, global::wxSharp.Size s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = __Internal.OperatorStar_2(i, __arg1);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator +(global::wxSharp.Size s, global::wxSharp.Point p)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = p.__Instance;
            var __ret = __Internal.OperatorPlus_1(__arg0, __arg1);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator -(global::wxSharp.Size s, global::wxSharp.Point p)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = p.__Instance;
            var __ret = __Internal.OperatorMinus_1(__arg0, __arg1);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public int x
        {
            get
            {
                return ((global::wxSharp.Size.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::wxSharp.Size.__Internal*)__Instance)->x = value;
            }
        }

        public int y
        {
            get
            {
                return ((global::wxSharp.Size.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::wxSharp.Size.__Internal*)__Instance)->y = value;
            }
        }
    }

    public unsafe partial class RealPoint : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal double x;

            [FieldOffset(8)]
            internal double y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxRealPointC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxRealPointC2Edd")]
            internal static extern void ctor(global::System.IntPtr __instance, double xx, double yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxRealPointC2ERK7wxPoint")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxRealPointC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK11wxRealPointS1_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK11wxRealPointS1_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK11wxRealPointS1_")]
            internal static extern void OperatorPlus(global::System.IntPtr @return, global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK11wxRealPointS1_")]
            internal static extern void OperatorMinus(global::System.IntPtr @return, global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK11wxRealPointl")]
            internal static extern void OperatorSlash(global::System.IntPtr @return, global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK11wxRealPointl")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmllRK11wxRealPoint")]
            internal static extern void OperatorStar(global::System.IntPtr @return, int i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK11wxRealPointm")]
            internal static extern void OperatorSlash_1(global::System.IntPtr @return, global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK11wxRealPointm")]
            internal static extern void OperatorStar_1(global::System.IntPtr @return, global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlmRK11wxRealPoint")]
            internal static extern void OperatorStar_1(global::System.IntPtr @return, uint i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK11wxRealPointd")]
            internal static extern void OperatorStar_2(global::System.IntPtr @return, global::System.IntPtr s, double i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmldRK11wxRealPoint")]
            internal static extern void OperatorStar_2(global::System.IntPtr @return, double i, global::System.IntPtr s);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.RealPoint> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.RealPoint>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.RealPoint __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.RealPoint(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.RealPoint __CreateInstance(global::wxSharp.RealPoint.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.RealPoint(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.RealPoint.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.RealPoint.__Internal));
            *(global::wxSharp.RealPoint.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private RealPoint(global::wxSharp.RealPoint.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected RealPoint(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public RealPoint()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.RealPoint.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public RealPoint(double xx, double yy)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.RealPoint.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, xx, yy);
        }

        public RealPoint(global::wxSharp.Point pt)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.RealPoint.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public RealPoint(global::wxSharp.RealPoint _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.RealPoint.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::wxSharp.RealPoint.__Internal*) __Instance) = *((global::wxSharp.RealPoint.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.RealPoint __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static bool operator ==(global::wxSharp.RealPoint p1, global::wxSharp.RealPoint p2)
        {
            bool p1Null = ReferenceEquals(p1, null);
            bool p2Null = ReferenceEquals(p2, null);
            if (p1Null || p2Null)
                return p1Null && p2Null;
            var __arg0 = p1.__Instance;
            var __arg1 = p2.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::wxSharp.RealPoint;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::wxSharp.RealPoint.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::wxSharp.RealPoint p1, global::wxSharp.RealPoint p2)
        {
            bool p1Null = ReferenceEquals(p1, null);
            bool p2Null = ReferenceEquals(p2, null);
            if (p1Null || p2Null)
                return !(p1Null && p2Null);
            var __arg0 = p1.__Instance;
            var __arg1 = p2.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static global::wxSharp.RealPoint operator +(global::wxSharp.RealPoint p1, global::wxSharp.RealPoint p2)
        {
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = p2.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorPlus(new IntPtr(&__ret), __arg0, __arg1);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public static global::wxSharp.RealPoint operator -(global::wxSharp.RealPoint p1, global::wxSharp.RealPoint p2)
        {
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = p2.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorMinus(new IntPtr(&__ret), __arg0, __arg1);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public static global::wxSharp.RealPoint operator /(global::wxSharp.RealPoint s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorSlash(new IntPtr(&__ret), __arg0, i);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public static global::wxSharp.RealPoint operator *(global::wxSharp.RealPoint s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, i);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public static global::wxSharp.RealPoint operator *(int i, global::wxSharp.RealPoint s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), i, __arg1);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public static global::wxSharp.RealPoint operator /(global::wxSharp.RealPoint s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorSlash_1(new IntPtr(&__ret), __arg0, i);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public static global::wxSharp.RealPoint operator *(global::wxSharp.RealPoint s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorStar_1(new IntPtr(&__ret), __arg0, i);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public static global::wxSharp.RealPoint operator *(uint i, global::wxSharp.RealPoint s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorStar_1(new IntPtr(&__ret), i, __arg1);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public static global::wxSharp.RealPoint operator *(global::wxSharp.RealPoint s, double i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorStar_2(new IntPtr(&__ret), __arg0, i);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public static global::wxSharp.RealPoint operator *(double i, global::wxSharp.RealPoint s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = new global::wxSharp.RealPoint.__Internal();
            __Internal.OperatorStar_2(new IntPtr(&__ret), i, __arg1);
            return global::wxSharp.RealPoint.__CreateInstance(__ret);
        }

        public double x
        {
            get
            {
                return ((global::wxSharp.RealPoint.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::wxSharp.RealPoint.__Internal*)__Instance)->x = value;
            }
        }

        public double y
        {
            get
            {
                return ((global::wxSharp.RealPoint.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::wxSharp.RealPoint.__Internal*)__Instance)->y = value;
            }
        }
    }

    public unsafe partial class Point : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int x;

            [FieldOffset(4)]
            internal int y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPointC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPointC2Eii")]
            internal static extern void ctor(global::System.IntPtr __instance, int xx, int yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPointC2ERK11wxRealPoint")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPointC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxPoint16IsFullySpecifiedEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsFullySpecified(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPoint11SetDefaultsERKS_")]
            internal static extern void SetDefaults(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK7wxPointS1_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK7wxPointS1_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK7wxPointS1_")]
            internal static extern global::wxSharp.Point.__Internal OperatorPlus(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK7wxPointS1_")]
            internal static extern global::wxSharp.Point.__Internal OperatorMinus(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK7wxPointRK6wxSize")]
            internal static extern global::wxSharp.Point.__Internal OperatorPlus_1(global::System.IntPtr p, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK7wxPointRK6wxSize")]
            internal static extern global::wxSharp.Point.__Internal OperatorMinus_1(global::System.IntPtr p, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZngRK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal OperatorMinus(global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK7wxPointl")]
            internal static extern global::wxSharp.Point.__Internal OperatorSlash(global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK7wxPointl")]
            internal static extern global::wxSharp.Point.__Internal OperatorStar(global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmllRK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal OperatorStar(int i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK7wxPointm")]
            internal static extern global::wxSharp.Point.__Internal OperatorSlash_1(global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK7wxPointm")]
            internal static extern global::wxSharp.Point.__Internal OperatorStar_1(global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlmRK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal OperatorStar_1(uint i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK7wxPointd")]
            internal static extern global::wxSharp.Point.__Internal OperatorStar_2(global::System.IntPtr s, double i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmldRK7wxPoint")]
            internal static extern global::wxSharp.Point.__Internal OperatorStar_2(double i, global::System.IntPtr s);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Point> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Point>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.Point __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Point(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Point __CreateInstance(global::wxSharp.Point.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Point(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Point.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Point.__Internal));
            *(global::wxSharp.Point.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Point(global::wxSharp.Point.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Point(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Point()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Point.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public Point(int xx, int yy)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Point.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, xx, yy);
        }

        public Point(global::wxSharp.RealPoint pt)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Point.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public Point(global::wxSharp.Point _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Point.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::wxSharp.Point.__Internal*) __Instance) = *((global::wxSharp.Point.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.Point __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool IsFullySpecified()
        {
            var __ret = __Internal.IsFullySpecified(__Instance);
            return __ret;
        }

        public void SetDefaults(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.SetDefaults(__Instance, __arg0);
        }

        public static bool operator ==(global::wxSharp.Point p1, global::wxSharp.Point p2)
        {
            bool p1Null = ReferenceEquals(p1, null);
            bool p2Null = ReferenceEquals(p2, null);
            if (p1Null || p2Null)
                return p1Null && p2Null;
            var __arg0 = p1.__Instance;
            var __arg1 = p2.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::wxSharp.Point;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::wxSharp.Point.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::wxSharp.Point p1, global::wxSharp.Point p2)
        {
            bool p1Null = ReferenceEquals(p1, null);
            bool p2Null = ReferenceEquals(p2, null);
            if (p1Null || p2Null)
                return !(p1Null && p2Null);
            var __arg0 = p1.__Instance;
            var __arg1 = p2.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static global::wxSharp.Point operator +(global::wxSharp.Point p1, global::wxSharp.Point p2)
        {
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = p2.__Instance;
            var __ret = __Internal.OperatorPlus(__arg0, __arg1);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator -(global::wxSharp.Point p1, global::wxSharp.Point p2)
        {
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = p2.__Instance;
            var __ret = __Internal.OperatorMinus(__arg0, __arg1);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator +(global::wxSharp.Point p, global::wxSharp.Size s)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = __Internal.OperatorPlus_1(__arg0, __arg1);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator -(global::wxSharp.Point p, global::wxSharp.Size s)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = __Internal.OperatorMinus_1(__arg0, __arg1);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator -(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            var __ret = __Internal.OperatorMinus(__arg0);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator /(global::wxSharp.Point s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorSlash(__arg0, i);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator *(global::wxSharp.Point s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorStar(__arg0, i);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator *(int i, global::wxSharp.Point s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = __Internal.OperatorStar(i, __arg1);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator /(global::wxSharp.Point s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorSlash_1(__arg0, i);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator *(global::wxSharp.Point s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorStar_1(__arg0, i);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator *(uint i, global::wxSharp.Point s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = __Internal.OperatorStar_1(i, __arg1);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator *(global::wxSharp.Point s, double i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            var __ret = __Internal.OperatorStar_2(__arg0, i);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public static global::wxSharp.Point operator *(double i, global::wxSharp.Point s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = s.__Instance;
            var __ret = __Internal.OperatorStar_2(i, __arg1);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public int x
        {
            get
            {
                return ((global::wxSharp.Point.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::wxSharp.Point.__Internal*)__Instance)->x = value;
            }
        }

        public int y
        {
            get
            {
                return ((global::wxSharp.Point.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::wxSharp.Point.__Internal*)__Instance)->y = value;
            }
        }
    }

    public unsafe partial class wxPointListNode : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxNodeBase;

            [FieldOffset(4)]
            internal global::wxSharp.ListKeyValue.__Internal m_key;

            [FieldOffset(8)]
            internal global::System.IntPtr m_data;

            [FieldOffset(12)]
            internal global::System.IntPtr m_next;

            [FieldOffset(16)]
            internal global::System.IntPtr m_previous;

            [FieldOffset(20)]
            internal global::System.IntPtr m_list;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxwxPointListNode7GetNextEv")]
            internal static extern global::System.IntPtr GetNext(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxwxPointListNode11GetPreviousEv")]
            internal static extern global::System.IntPtr GetPrevious(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxwxPointListNode7GetDataEv")]
            internal static extern global::System.IntPtr GetData(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxwxPointListNode7SetDataEP7wxPoint")]
            internal static extern void SetData(global::System.IntPtr __instance, global::System.IntPtr data);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.wxPointListNode> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.wxPointListNode>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.wxPointListNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.wxPointListNode(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.wxPointListNode __CreateInstance(global::wxSharp.wxPointListNode.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.wxPointListNode(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.wxPointListNode.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.wxPointListNode.__Internal));
            *(global::wxSharp.wxPointListNode.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxPointListNode(global::wxSharp.wxPointListNode.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPointListNode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.wxPointListNode __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.wxPointListNode.__Internal*) __Instance)->vptr_wxNodeBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.wxPointListNode GetNext()
        {
            var __ret = __Internal.GetNext(__Instance);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode GetPrevious()
        {
            var __ret = __Internal.GetPrevious(__Instance);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.Point GetData()
        {
            var __ret = __Internal.GetData(__Instance);
            global::wxSharp.Point __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Point.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Point) global::wxSharp.Point.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.Point.__CreateInstance(__ret);
            return __result0;
        }

        public void SetData(global::wxSharp.Point data)
        {
            var __arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            __Internal.SetData(__Instance, __arg0);
        }

        protected virtual void DeleteData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___DeleteDataDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
            ___DeleteDataDelegate(__Instance);
        }

        #region Virtual table interop

        // 
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.wxPointListNode) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // 
        private static global::wxSharp.Delegates.Action_IntPtr _DeleteDataDelegateInstance;

        private static void _DeleteDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.wxPointListNode) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteData();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _DeleteDataDelegateInstance += _DeleteDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DeleteDataDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = _Thunks[1];
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class PointList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxListBase;

            [FieldOffset(4)]
            internal uint m_count;

            [FieldOffset(8)]
            internal byte m_destroy;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nodeFirst;

            [FieldOffset(16)]
            internal global::System.IntPtr m_nodeLast;

            [FieldOffset(20)]
            internal global::wxSharp.KeyType m_keyType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointListC2E9wxKeyType")]
            internal static extern void ctor(global::System.IntPtr __instance, global::wxSharp.KeyType keyType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointListC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr list);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointListC2EmRKP7wxPoint")]
            internal static extern void ctor(global::System.IntPtr __instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointListC2ERKNS_14const_iteratorES2_")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList8GetFirstEv")]
            internal static extern global::System.IntPtr GetFirst(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList7GetLastEv")]
            internal static extern global::System.IntPtr GetLast(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList4ItemEm")]
            internal static extern global::System.IntPtr item(global::System.IntPtr __instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6AppendEP7wxPoint")]
            internal static extern global::System.IntPtr Append(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6InsertEP7wxPoint")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6InsertEmP7wxPoint")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, uint pos, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6InsertEP17wxwxPointListNodeP7wxPoint")]
            internal static extern global::System.IntPtr Insert(global::System.IntPtr __instance, global::System.IntPtr prev, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6AppendElPv")]
            internal static extern global::System.IntPtr Append(global::System.IntPtr __instance, int key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6AppendEPKwPv")]
            internal static extern global::System.IntPtr Append_1(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList10DetachNodeEP17wxwxPointListNode")]
            internal static extern global::System.IntPtr DetachNode(global::System.IntPtr __instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList10DeleteNodeEP17wxwxPointListNode")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteNode(global::System.IntPtr __instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList12DeleteObjectEP7wxPoint")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DeleteObject(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5EraseEP17wxwxPointListNode")]
            internal static extern void Erase(global::System.IntPtr __instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList4FindEPK7wxPoint")]
            internal static extern global::System.IntPtr Find(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList6MemberEPK7wxPoint")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Member(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList7IndexOfEP7wxPoint")]
            internal static extern int IndexOf(global::System.IntPtr __instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5beginEv")]
            internal static extern global::wxSharp.PointList.iterator.__Internal begin(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList3endEv")]
            internal static extern global::wxSharp.PointList.iterator.__Internal end(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6rbeginEv")]
            internal static extern global::wxSharp.PointList.reverse_iterator.__Internal rbegin(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList4rendEv")]
            internal static extern global::wxSharp.PointList.reverse_iterator.__Internal rend(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6resizeEmP7wxPoint")]
            internal static extern void resize(global::System.IntPtr __instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList4sizeEv")]
            internal static extern uint size(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList8max_sizeEv")]
            internal static extern uint max_size(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList5emptyEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool empty(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList10push_frontERKP7wxPoint")]
            internal static extern void push_front(global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList9pop_frontEv")]
            internal static extern void pop_front(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList9push_backERKP7wxPoint")]
            internal static extern void push_back(global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList8pop_backEv")]
            internal static extern void pop_back(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6assignENS_14const_iteratorERKS0_")]
            internal static extern void assign(global::System.IntPtr __instance, global::wxSharp.PointList.const_iterator.__Internal first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6assignEmRKP7wxPoint")]
            internal static extern void assign_1(global::System.IntPtr __instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6insertERKNS_8iteratorERKP7wxPoint")]
            internal static extern global::wxSharp.PointList.iterator.__Internal insert(global::System.IntPtr __instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6insertERKNS_8iteratorEmRKP7wxPoint")]
            internal static extern void insert(global::System.IntPtr __instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6insertERKNS_8iteratorENS_14const_iteratorERKS3_")]
            internal static extern void insert_1(global::System.IntPtr __instance, global::System.IntPtr it, global::wxSharp.PointList.const_iterator.__Internal first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5eraseERKNS_8iteratorE")]
            internal static extern global::wxSharp.PointList.iterator.__Internal erase(global::System.IntPtr __instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5eraseERKNS_8iteratorES2_")]
            internal static extern global::wxSharp.PointList.iterator.__Internal erase(global::System.IntPtr __instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5clearEv")]
            internal static extern void clear(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6spliceERKNS_8iteratorERS_S2_S2_")]
            internal static extern void splice(global::System.IntPtr __instance, global::System.IntPtr it, global::System.IntPtr l, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6spliceERKNS_8iteratorERS_")]
            internal static extern void splice(global::System.IntPtr __instance, global::System.IntPtr it, global::System.IntPtr l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6spliceERKNS_8iteratorERS_S2_")]
            internal static extern void splice(global::System.IntPtr __instance, global::System.IntPtr it, global::System.IntPtr l, global::System.IntPtr first);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6removeERKP7wxPoint")]
            internal static extern void remove(global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList7reverseEv")]
            internal static extern void reverse(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointListixEm")]
            internal static extern global::System.IntPtr OperatorSubscript(global::System.IntPtr __instance, uint index);
        }

        public unsafe partial class compatibility_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22compatibility_iteratorC2EP17wxwxPointListNode")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr ptr);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22compatibility_iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList22compatibility_iteratorcvP17wxwxPointListNodeEv")]
                internal static extern global::System.IntPtr OperatorConversion(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.compatibility_iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.compatibility_iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.PointList.compatibility_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.compatibility_iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.PointList.compatibility_iterator __CreateInstance(global::wxSharp.PointList.compatibility_iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.compatibility_iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.PointList.compatibility_iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.compatibility_iterator.__Internal));
                *(global::wxSharp.PointList.compatibility_iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private compatibility_iterator(global::wxSharp.PointList.compatibility_iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected compatibility_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public compatibility_iterator(global::wxSharp.wxPointListNode ptr)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.compatibility_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(ptr, null) ? global::System.IntPtr.Zero : ptr.__Instance;
                __Internal.ctor(__Instance, __arg0);
            }

            public compatibility_iterator(global::wxSharp.PointList.compatibility_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.compatibility_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.PointList.compatibility_iterator.__Internal*) __Instance) = *((global::wxSharp.PointList.compatibility_iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.PointList.compatibility_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static implicit operator global::wxSharp.wxPointListNode(global::wxSharp.PointList.compatibility_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = __op.__Instance;
                var __ret = __Internal.OperatorConversion(__arg0);
                global::wxSharp.wxPointListNode __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
                else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList8iteratorC2EP17wxwxPointListNodeS2_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList8iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList8iteratorC2ERKS0_")]
                internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList8iteratorneERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList8iteratoreqERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.PointList.iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.PointList.iterator __CreateInstance(global::wxSharp.PointList.iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.PointList.iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.iterator.__Internal));
                *(global::wxSharp.PointList.iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(global::wxSharp.PointList.iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator(global::wxSharp.wxPointListNode node, global::wxSharp.wxPointListNode init)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public iterator()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public iterator(global::wxSharp.PointList.iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.PointList.iterator.__Internal*) __Instance) = *((global::wxSharp.PointList.iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.PointList.iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator !=(global::wxSharp.PointList.iterator __op, global::wxSharp.PointList.iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            public static bool operator ==(global::wxSharp.PointList.iterator __op, global::wxSharp.PointList.iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::wxSharp.PointList.iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::wxSharp.PointList.iterator.__Internal*) __Instance).GetHashCode();
            }

            public global::wxSharp.wxPointListNode m_node
            {
                get
                {
                    global::wxSharp.wxPointListNode __result0;
                    if (((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_node))
                        __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_node];
                    else global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_node] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.PointList.iterator.__Internal*)__Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::wxSharp.wxPointListNode m_init
            {
                get
                {
                    global::wxSharp.wxPointListNode __result0;
                    if (((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_init))
                        __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_init];
                    else global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_init] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(((global::wxSharp.PointList.iterator.__Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.PointList.iterator.__Internal*)__Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class const_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratorC2EP17wxwxPointListNodeS2_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratorC2ERKNS_8iteratorE")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList14const_iteratorneERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList14const_iteratoreqERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.const_iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.const_iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.PointList.const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.const_iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.PointList.const_iterator __CreateInstance(global::wxSharp.PointList.const_iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.PointList.const_iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_iterator.__Internal));
                *(global::wxSharp.PointList.const_iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(global::wxSharp.PointList.const_iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator(global::wxSharp.wxPointListNode node, global::wxSharp.wxPointListNode init)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public const_iterator()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public const_iterator(global::wxSharp.PointList.iterator it)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = it.__Instance;
                __Internal.ctor(__Instance, __arg0);
            }

            public const_iterator(global::wxSharp.PointList.const_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.PointList.const_iterator.__Internal*) __Instance) = *((global::wxSharp.PointList.const_iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.PointList.const_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator !=(global::wxSharp.PointList.const_iterator __op, global::wxSharp.PointList.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            public static bool operator ==(global::wxSharp.PointList.const_iterator __op, global::wxSharp.PointList.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::wxSharp.PointList.const_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::wxSharp.PointList.const_iterator.__Internal*) __Instance).GetHashCode();
            }

            public global::wxSharp.wxPointListNode m_node
            {
                get
                {
                    global::wxSharp.wxPointListNode __result0;
                    if (((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_node))
                        __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_node];
                    else global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_node] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.PointList.const_iterator.__Internal*)__Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::wxSharp.wxPointListNode m_init
            {
                get
                {
                    global::wxSharp.wxPointListNode __result0;
                    if (((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_init))
                        __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_init];
                    else global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_init] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(((global::wxSharp.PointList.const_iterator.__Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.PointList.const_iterator.__Internal*)__Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList16reverse_iteratorC2EP17wxwxPointListNodeS2_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList16reverse_iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList16reverse_iteratorC2ERKS0_")]
                internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList16reverse_iteratorneERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList16reverse_iteratoreqERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.reverse_iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.reverse_iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.PointList.reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.reverse_iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.PointList.reverse_iterator __CreateInstance(global::wxSharp.PointList.reverse_iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.PointList.reverse_iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.reverse_iterator.__Internal));
                *(global::wxSharp.PointList.reverse_iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(global::wxSharp.PointList.reverse_iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator(global::wxSharp.wxPointListNode node, global::wxSharp.wxPointListNode init)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public reverse_iterator(global::wxSharp.PointList.reverse_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance) = *((global::wxSharp.PointList.reverse_iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.PointList.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator !=(global::wxSharp.PointList.reverse_iterator __op, global::wxSharp.PointList.reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            public static bool operator ==(global::wxSharp.PointList.reverse_iterator __op, global::wxSharp.PointList.reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::wxSharp.PointList.reverse_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance).GetHashCode();
            }

            public global::wxSharp.wxPointListNode m_node
            {
                get
                {
                    global::wxSharp.wxPointListNode __result0;
                    if (((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_node))
                        __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_node];
                    else global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_node] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.PointList.reverse_iterator.__Internal*)__Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::wxSharp.wxPointListNode m_init
            {
                get
                {
                    global::wxSharp.wxPointListNode __result0;
                    if (((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_init))
                        __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_init];
                    else global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_init] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(((global::wxSharp.PointList.reverse_iterator.__Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.PointList.reverse_iterator.__Internal*)__Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratorC2EP17wxwxPointListNodeS2_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList22const_reverse_iteratorneERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList22const_reverse_iteratoreqERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.const_reverse_iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList.const_reverse_iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.PointList.const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.PointList.const_reverse_iterator __CreateInstance(global::wxSharp.PointList.const_reverse_iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.PointList.const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.PointList.const_reverse_iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_reverse_iterator.__Internal));
                *(global::wxSharp.PointList.const_reverse_iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(global::wxSharp.PointList.const_reverse_iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator(global::wxSharp.wxPointListNode node, global::wxSharp.wxPointListNode init)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public const_reverse_iterator(global::wxSharp.PointList.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = it.__Instance;
                __Internal.ctor(__Instance, __arg0);
            }

            public const_reverse_iterator(global::wxSharp.PointList.const_reverse_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.const_reverse_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance) = *((global::wxSharp.PointList.const_reverse_iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.PointList.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator !=(global::wxSharp.PointList.const_reverse_iterator __op, global::wxSharp.PointList.const_reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            public static bool operator ==(global::wxSharp.PointList.const_reverse_iterator __op, global::wxSharp.PointList.const_reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::wxSharp.PointList.const_reverse_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance).GetHashCode();
            }

            public global::wxSharp.wxPointListNode m_node
            {
                get
                {
                    global::wxSharp.wxPointListNode __result0;
                    if (((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_node))
                        __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_node];
                    else global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_node] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.PointList.const_reverse_iterator.__Internal*)__Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::wxSharp.wxPointListNode m_init
            {
                get
                {
                    global::wxSharp.wxPointListNode __result0;
                    if (((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_init))
                        __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_init];
                    else global::wxSharp.wxPointListNode.NativeToManagedMap[((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_init] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(((global::wxSharp.PointList.const_reverse_iterator.__Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.PointList.const_reverse_iterator.__Internal*)__Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.PointList>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.PointList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PointList(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PointList __CreateInstance(global::wxSharp.PointList.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PointList(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PointList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.__Internal));
            global::wxSharp.PointList.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private PointList(global::wxSharp.PointList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PointList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public PointList(global::wxSharp.KeyType keyType)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, keyType);
            SetupVTables(GetType().FullName == "wxSharp.PointList");
        }

        public PointList(global::wxSharp.PointList list)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(list, null))
                throw new global::System.ArgumentNullException("list", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = list.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.PointList");
        }

        public PointList(uint n, global::wxSharp.Point v)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg1 = v.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            __Internal.ctor(__Instance, n, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.PointList");
        }

        public PointList(global::wxSharp.PointList.const_iterator first, global::wxSharp.PointList.const_iterator last)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PointList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = last.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
            SetupVTables(GetType().FullName == "wxSharp.PointList");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.PointList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.PointList.__Internal*) __Instance)->vptr_wxListBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.wxPointListNode GetFirst()
        {
            var __ret = __Internal.GetFirst(__Instance);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode GetLast()
        {
            var __ret = __Internal.GetLast(__Instance);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode item(uint index)
        {
            var __ret = __Internal.item(__Instance, index);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode Append(global::wxSharp.Point @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Append(__Instance, __arg0);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode Insert(global::wxSharp.Point @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Insert(__Instance, __arg0);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode Insert(uint pos, global::wxSharp.Point @object)
        {
            var __arg1 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Insert(__Instance, pos, __arg1);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode Insert(global::wxSharp.wxPointListNode prev, global::wxSharp.Point @object)
        {
            var __arg0 = ReferenceEquals(prev, null) ? global::System.IntPtr.Zero : prev.__Instance;
            var __arg1 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Insert(__Instance, __arg0, __arg1);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode Append(int key, global::System.IntPtr @object)
        {
            var __ret = __Internal.Append(__Instance, key, @object);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode Append(string key, global::System.IntPtr @object)
        {
            var __ret = __Internal.Append_1(__Instance, key, @object);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public global::wxSharp.wxPointListNode DetachNode(global::wxSharp.wxPointListNode node)
        {
            var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = __Internal.DetachNode(__Instance, __arg0);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public bool DeleteNode(global::wxSharp.wxPointListNode node)
        {
            var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = __Internal.DeleteNode(__Instance, __arg0);
            return __ret;
        }

        public bool DeleteObject(global::wxSharp.Point @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.DeleteObject(__Instance, __arg0);
            return __ret;
        }

        public void Erase(global::wxSharp.wxPointListNode it)
        {
            var __arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            __Internal.Erase(__Instance, __arg0);
        }

        public global::wxSharp.wxPointListNode Find(global::wxSharp.Point @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Find(__Instance, __arg0);
            global::wxSharp.wxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.wxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.NativeToManagedMap[__ret];
            else global::wxSharp.wxPointListNode.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.wxPointListNode) global::wxSharp.wxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public bool Member(global::wxSharp.Point @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.Member(__Instance, __arg0);
            return __ret;
        }

        public int IndexOf(global::wxSharp.Point @object)
        {
            var __arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = __Internal.IndexOf(__Instance, __arg0);
            return __ret;
        }

        public global::wxSharp.PointList.iterator begin()
        {
            var __ret = __Internal.begin(__Instance);
            return global::wxSharp.PointList.iterator.__CreateInstance(__ret);
        }

        public global::wxSharp.PointList.iterator end()
        {
            var __ret = __Internal.end(__Instance);
            return global::wxSharp.PointList.iterator.__CreateInstance(__ret);
        }

        public global::wxSharp.PointList.reverse_iterator rbegin()
        {
            var __ret = __Internal.rbegin(__Instance);
            return global::wxSharp.PointList.reverse_iterator.__CreateInstance(__ret);
        }

        public global::wxSharp.PointList.reverse_iterator rend()
        {
            var __ret = __Internal.rend(__Instance);
            return global::wxSharp.PointList.reverse_iterator.__CreateInstance(__ret);
        }

        public void resize(uint n, global::wxSharp.Point v)
        {
            var __arg1 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            __Internal.resize(__Instance, n, __arg1);
        }

        public uint size()
        {
            var __ret = __Internal.size(__Instance);
            return __ret;
        }

        public uint max_size()
        {
            var __ret = __Internal.max_size(__Instance);
            return __ret;
        }

        public bool empty()
        {
            var __ret = __Internal.empty(__Instance);
            return __ret;
        }

        public void push_front(global::wxSharp.Point v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = v.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            __Internal.push_front(__Instance, __arg0);
        }

        public void pop_front()
        {
            __Internal.pop_front(__Instance);
        }

        public void push_back(global::wxSharp.Point v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = v.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            __Internal.push_back(__Instance, __arg0);
        }

        public void pop_back()
        {
            __Internal.pop_back(__Instance);
        }

        public void assign(global::wxSharp.PointList.const_iterator first, global::wxSharp.PointList.const_iterator last)
        {
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is passed by value.");
            var __arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = last.__Instance;
            __Internal.assign(__Instance, *(global::wxSharp.PointList.const_iterator.__Internal*) __arg0, __arg1);
        }

        public void assign(uint n, global::wxSharp.Point v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg1 = v.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            __Internal.assign_1(__Instance, n, __arg1);
        }

        public global::wxSharp.PointList.iterator insert(global::wxSharp.PointList.iterator it, global::wxSharp.Point v)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg1 = v.__Instance;
            var __arg1 = new global::System.IntPtr(&____arg1);
            var __ret = __Internal.insert(__Instance, __arg0, __arg1);
            return global::wxSharp.PointList.iterator.__CreateInstance(__ret);
        }

        public void insert(global::wxSharp.PointList.iterator it, uint n, global::wxSharp.Point v)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg2 = v.__Instance;
            var __arg2 = new global::System.IntPtr(&____arg2);
            __Internal.insert(__Instance, __arg0, n, __arg2);
        }

        public void insert(global::wxSharp.PointList.iterator it, global::wxSharp.PointList.const_iterator first, global::wxSharp.PointList.const_iterator last)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is passed by value.");
            var __arg1 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = last.__Instance;
            __Internal.insert_1(__Instance, __arg0, *(global::wxSharp.PointList.const_iterator.__Internal*) __arg1, __arg2);
        }

        public global::wxSharp.PointList.iterator erase(global::wxSharp.PointList.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            var __ret = __Internal.erase(__Instance, __arg0);
            return global::wxSharp.PointList.iterator.__CreateInstance(__ret);
        }

        public global::wxSharp.PointList.iterator erase(global::wxSharp.PointList.iterator first, global::wxSharp.PointList.iterator last)
        {
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = last.__Instance;
            var __ret = __Internal.erase(__Instance, __arg0, __arg1);
            return global::wxSharp.PointList.iterator.__CreateInstance(__ret);
        }

        public void clear()
        {
            __Internal.clear(__Instance);
        }

        public void splice(global::wxSharp.PointList.iterator it, global::wxSharp.PointList l, global::wxSharp.PointList.iterator first, global::wxSharp.PointList.iterator last)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = l.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = last.__Instance;
            __Internal.splice(__Instance, __arg0, __arg1, __arg2, __arg3);
        }

        public void splice(global::wxSharp.PointList.iterator it, global::wxSharp.PointList l)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = l.__Instance;
            __Internal.splice(__Instance, __arg0, __arg1);
        }

        public void splice(global::wxSharp.PointList.iterator it, global::wxSharp.PointList l, global::wxSharp.PointList.iterator first)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = l.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = first.__Instance;
            __Internal.splice(__Instance, __arg0, __arg1, __arg2);
        }

        public void remove(global::wxSharp.Point v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = v.__Instance;
            var __arg0 = new global::System.IntPtr(&____arg0);
            __Internal.remove(__Instance, __arg0);
        }

        public void reverse()
        {
            __Internal.reverse(__Instance);
        }

        public global::wxSharp.Point this[uint index]
        {
            get
            {
                var __ret = __Internal.OperatorSubscript(__Instance, index);
                return global::wxSharp.Point.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *(global::wxSharp.Point.__Internal*) global::wxSharp.PointList.__Internal.OperatorSubscript(__Instance, index) = *(global::wxSharp.Point.__Internal*) value.__Instance;
            }
        }

        #region Virtual table interop

        // wxPointList
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PointList) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[1];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class Rect : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int x;

            [FieldOffset(4)]
            internal int y;

            [FieldOffset(8)]
            internal int width;

            [FieldOffset(12)]
            internal int height;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2Eiiii")]
            internal static extern void ctor(global::System.IntPtr __instance, int xx, int yy, int ww, int hh);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2ERK7wxPointS2_")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr topLeft, global::System.IntPtr bottomRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2ERK7wxPointRK6wxSize")]
            internal static extern void ctor_1(global::System.IntPtr __instance, global::System.IntPtr pt, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2ERK6wxSize")]
            internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect4GetXEv")]
            internal static extern int GetX(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect4SetXEi")]
            internal static extern void SetX(global::System.IntPtr __instance, int xx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect4GetYEv")]
            internal static extern int GetY(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect4SetYEi")]
            internal static extern void SetY(global::System.IntPtr __instance, int yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8GetWidthEv")]
            internal static extern int GetWidth(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect8SetWidthEi")]
            internal static extern void SetWidth(global::System.IntPtr __instance, int w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect9GetHeightEv")]
            internal static extern int GetHeight(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect9SetHeightEi")]
            internal static extern void SetHeight(global::System.IntPtr __instance, int h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect11GetPositionEv")]
            internal static extern global::wxSharp.Point.__Internal GetPosition(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect11SetPositionERK7wxPoint")]
            internal static extern void SetPosition(global::System.IntPtr __instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect7GetSizeEv")]
            internal static extern global::wxSharp.Size.__Internal GetSize(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7SetSizeERK6wxSize")]
            internal static extern void SetSize(global::System.IntPtr __instance, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect7IsEmptyEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsEmpty(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect7GetLeftEv")]
            internal static extern int GetLeft(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect6GetTopEv")]
            internal static extern int GetTop(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect9GetBottomEv")]
            internal static extern int GetBottom(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8GetRightEv")]
            internal static extern int GetRight(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7SetLeftEi")]
            internal static extern void SetLeft(global::System.IntPtr __instance, int left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect8SetRightEi")]
            internal static extern void SetRight(global::System.IntPtr __instance, int right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect6SetTopEi")]
            internal static extern void SetTop(global::System.IntPtr __instance, int top);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect9SetBottomEi")]
            internal static extern void SetBottom(global::System.IntPtr __instance, int bottom);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect10GetTopLeftEv")]
            internal static extern global::wxSharp.Point.__Internal GetTopLeft(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect10GetLeftTopEv")]
            internal static extern global::wxSharp.Point.__Internal GetLeftTop(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect10SetTopLeftERK7wxPoint")]
            internal static extern void SetTopLeft(global::System.IntPtr __instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect10SetLeftTopERK7wxPoint")]
            internal static extern void SetLeftTop(global::System.IntPtr __instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect14GetBottomRightEv")]
            internal static extern global::wxSharp.Point.__Internal GetBottomRight(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect14GetRightBottomEv")]
            internal static extern global::wxSharp.Point.__Internal GetRightBottom(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect14SetBottomRightERK7wxPoint")]
            internal static extern void SetBottomRight(global::System.IntPtr __instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect14SetRightBottomERK7wxPoint")]
            internal static extern void SetRightBottom(global::System.IntPtr __instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect11GetTopRightEv")]
            internal static extern global::wxSharp.Point.__Internal GetTopRight(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect11GetRightTopEv")]
            internal static extern global::wxSharp.Point.__Internal GetRightTop(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect11SetTopRightERK7wxPoint")]
            internal static extern void SetTopRight(global::System.IntPtr __instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect11SetRightTopERK7wxPoint")]
            internal static extern void SetRightTop(global::System.IntPtr __instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect13GetBottomLeftEv")]
            internal static extern global::wxSharp.Point.__Internal GetBottomLeft(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect13GetLeftBottomEv")]
            internal static extern global::wxSharp.Point.__Internal GetLeftBottom(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect13SetBottomLeftERK7wxPoint")]
            internal static extern void SetBottomLeft(global::System.IntPtr __instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect13SetLeftBottomERK7wxPoint")]
            internal static extern void SetLeftBottom(global::System.IntPtr __instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect7InflateEii")]
            internal static extern void Inflate(global::System.IntPtr @return, global::System.IntPtr __instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect7DeflateEii")]
            internal static extern void Deflate(global::System.IntPtr @return, global::System.IntPtr __instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect6OffsetEii")]
            internal static extern void Offset(global::System.IntPtr __instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect6OffsetERK7wxPoint")]
            internal static extern void Offset(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect9IntersectERKS_")]
            internal static extern void Intersect(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect5UnionERKS_")]
            internal static extern void Union(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8ContainsEii")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Contains(global::System.IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8ContainsERK7wxPoint")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Contains(global::System.IntPtr __instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8ContainsERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Contains_1(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect10IntersectsERKS_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Intersects(global::System.IntPtr __instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8CentreInERKS_i")]
            internal static extern void CentreIn(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr r, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8CenterInERKS_i")]
            internal static extern void CenterIn(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr r, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK6wxRectS1_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual(global::System.IntPtr r1, global::System.IntPtr r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK6wxRectS1_")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual(global::System.IntPtr r1, global::System.IntPtr r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK6wxRectS1_")]
            internal static extern void OperatorPlus(global::System.IntPtr @return, global::System.IntPtr r1, global::System.IntPtr r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK6wxRectS1_")]
            internal static extern void OperatorStar(global::System.IntPtr @return, global::System.IntPtr r1, global::System.IntPtr r2);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Rect> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.Rect>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.Rect __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Rect(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Rect __CreateInstance(global::wxSharp.Rect.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Rect(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Rect.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Rect.__Internal));
            *(global::wxSharp.Rect.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Rect(global::wxSharp.Rect.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Rect(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public Rect()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Rect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public Rect(int xx, int yy, int ww, int hh)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Rect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, xx, yy, ww, hh);
        }

        public Rect(global::wxSharp.Point topLeft, global::wxSharp.Point bottomRight)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Rect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(topLeft, null))
                throw new global::System.ArgumentNullException("topLeft", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = topLeft.__Instance;
            if (ReferenceEquals(bottomRight, null))
                throw new global::System.ArgumentNullException("bottomRight", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = bottomRight.__Instance;
            __Internal.ctor(__Instance, __arg0, __arg1);
        }

        public Rect(global::wxSharp.Point pt, global::wxSharp.Size size)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Rect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = size.__Instance;
            __Internal.ctor_1(__Instance, __arg0, __arg1);
        }

        public Rect(global::wxSharp.Size size)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Rect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = size.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public Rect(global::wxSharp.Rect _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Rect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::wxSharp.Rect.__Internal*) __Instance) = *((global::wxSharp.Rect.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.Rect __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int GetX()
        {
            var __ret = __Internal.GetX(__Instance);
            return __ret;
        }

        public void SetX(int xx)
        {
            __Internal.SetX(__Instance, xx);
        }

        public int GetY()
        {
            var __ret = __Internal.GetY(__Instance);
            return __ret;
        }

        public void SetY(int yy)
        {
            __Internal.SetY(__Instance, yy);
        }

        public int GetWidth()
        {
            var __ret = __Internal.GetWidth(__Instance);
            return __ret;
        }

        public void SetWidth(int w)
        {
            __Internal.SetWidth(__Instance, w);
        }

        public int GetHeight()
        {
            var __ret = __Internal.GetHeight(__Instance);
            return __ret;
        }

        public void SetHeight(int h)
        {
            __Internal.SetHeight(__Instance, h);
        }

        public global::wxSharp.Point GetPosition()
        {
            var __ret = __Internal.GetPosition(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void SetPosition(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            __Internal.SetPosition(__Instance, __arg0);
        }

        public global::wxSharp.Size GetSize()
        {
            var __ret = __Internal.GetSize(__Instance);
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public void SetSize(global::wxSharp.Size s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = s.__Instance;
            __Internal.SetSize(__Instance, __arg0);
        }

        public bool IsEmpty()
        {
            var __ret = __Internal.IsEmpty(__Instance);
            return __ret;
        }

        public int GetLeft()
        {
            var __ret = __Internal.GetLeft(__Instance);
            return __ret;
        }

        public int GetTop()
        {
            var __ret = __Internal.GetTop(__Instance);
            return __ret;
        }

        public int GetBottom()
        {
            var __ret = __Internal.GetBottom(__Instance);
            return __ret;
        }

        public int GetRight()
        {
            var __ret = __Internal.GetRight(__Instance);
            return __ret;
        }

        public void SetLeft(int left)
        {
            __Internal.SetLeft(__Instance, left);
        }

        public void SetRight(int right)
        {
            __Internal.SetRight(__Instance, right);
        }

        public void SetTop(int top)
        {
            __Internal.SetTop(__Instance, top);
        }

        public void SetBottom(int bottom)
        {
            __Internal.SetBottom(__Instance, bottom);
        }

        public global::wxSharp.Point GetTopLeft()
        {
            var __ret = __Internal.GetTopLeft(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public global::wxSharp.Point GetLeftTop()
        {
            var __ret = __Internal.GetLeftTop(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void SetTopLeft(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            __Internal.SetTopLeft(__Instance, __arg0);
        }

        public void SetLeftTop(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            __Internal.SetLeftTop(__Instance, __arg0);
        }

        public global::wxSharp.Point GetBottomRight()
        {
            var __ret = __Internal.GetBottomRight(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public global::wxSharp.Point GetRightBottom()
        {
            var __ret = __Internal.GetRightBottom(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void SetBottomRight(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            __Internal.SetBottomRight(__Instance, __arg0);
        }

        public void SetRightBottom(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            __Internal.SetRightBottom(__Instance, __arg0);
        }

        public global::wxSharp.Point GetTopRight()
        {
            var __ret = __Internal.GetTopRight(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public global::wxSharp.Point GetRightTop()
        {
            var __ret = __Internal.GetRightTop(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void SetTopRight(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            __Internal.SetTopRight(__Instance, __arg0);
        }

        public void SetRightTop(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            __Internal.SetRightTop(__Instance, __arg0);
        }

        public global::wxSharp.Point GetBottomLeft()
        {
            var __ret = __Internal.GetBottomLeft(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public global::wxSharp.Point GetLeftBottom()
        {
            var __ret = __Internal.GetLeftBottom(__Instance);
            return global::wxSharp.Point.__CreateInstance(__ret);
        }

        public void SetBottomLeft(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            __Internal.SetBottomLeft(__Instance, __arg0);
        }

        public void SetLeftBottom(global::wxSharp.Point p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = p.__Instance;
            __Internal.SetLeftBottom(__Instance, __arg0);
        }

        public global::wxSharp.Rect Inflate(int dx, int dy)
        {
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.Inflate(new IntPtr(&__ret), __Instance, dx, dy);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public global::wxSharp.Rect Deflate(int dx, int dy)
        {
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.Deflate(new IntPtr(&__ret), __Instance, dx, dy);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public void Offset(int dx, int dy)
        {
            __Internal.Offset(__Instance, dx, dy);
        }

        public void Offset(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            __Internal.Offset(__Instance, __arg0);
        }

        public global::wxSharp.Rect Intersect(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.Intersect(new IntPtr(&__ret), __Instance, __arg0);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public global::wxSharp.Rect Union(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.Union(new IntPtr(&__ret), __Instance, __arg0);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public bool Contains(int x, int y)
        {
            var __ret = __Internal.Contains(__Instance, x, y);
            return __ret;
        }

        public bool Contains(global::wxSharp.Point pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = pt.__Instance;
            var __ret = __Internal.Contains(__Instance, __arg0);
            return __ret;
        }

        public bool Contains(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            var __ret = __Internal.Contains_1(__Instance, __arg0);
            return __ret;
        }

        public bool Intersects(global::wxSharp.Rect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = rect.__Instance;
            var __ret = __Internal.Intersects(__Instance, __arg0);
            return __ret;
        }

        public global::wxSharp.Rect CentreIn(global::wxSharp.Rect r, int dir)
        {
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = r.__Instance;
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.CentreIn(new IntPtr(&__ret), __Instance, __arg0, dir);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public global::wxSharp.Rect CenterIn(global::wxSharp.Rect r, int dir)
        {
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = r.__Instance;
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.CenterIn(new IntPtr(&__ret), __Instance, __arg0, dir);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public static bool operator ==(global::wxSharp.Rect r1, global::wxSharp.Rect r2)
        {
            bool r1Null = ReferenceEquals(r1, null);
            bool r2Null = ReferenceEquals(r2, null);
            if (r1Null || r2Null)
                return r1Null && r2Null;
            var __arg0 = r1.__Instance;
            var __arg1 = r2.__Instance;
            var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as global::wxSharp.Rect;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(global::wxSharp.Rect.__Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(global::wxSharp.Rect r1, global::wxSharp.Rect r2)
        {
            bool r1Null = ReferenceEquals(r1, null);
            bool r2Null = ReferenceEquals(r2, null);
            if (r1Null || r2Null)
                return !(r1Null && r2Null);
            var __arg0 = r1.__Instance;
            var __arg1 = r2.__Instance;
            var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
            return __ret;
        }

        public static global::wxSharp.Rect operator +(global::wxSharp.Rect r1, global::wxSharp.Rect r2)
        {
            if (ReferenceEquals(r1, null))
                throw new global::System.ArgumentNullException("r1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = r1.__Instance;
            if (ReferenceEquals(r2, null))
                throw new global::System.ArgumentNullException("r2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = r2.__Instance;
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.OperatorPlus(new IntPtr(&__ret), __arg0, __arg1);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public static global::wxSharp.Rect operator *(global::wxSharp.Rect r1, global::wxSharp.Rect r2)
        {
            if (ReferenceEquals(r1, null))
                throw new global::System.ArgumentNullException("r1", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = r1.__Instance;
            if (ReferenceEquals(r2, null))
                throw new global::System.ArgumentNullException("r2", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = r2.__Instance;
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.OperatorStar(new IntPtr(&__ret), __arg0, __arg1);
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public int x
        {
            get
            {
                return ((global::wxSharp.Rect.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::wxSharp.Rect.__Internal*)__Instance)->x = value;
            }
        }

        public int y
        {
            get
            {
                return ((global::wxSharp.Rect.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::wxSharp.Rect.__Internal*)__Instance)->y = value;
            }
        }

        public int width
        {
            get
            {
                return ((global::wxSharp.Rect.__Internal*) __Instance)->width;
            }

            set
            {
                ((global::wxSharp.Rect.__Internal*)__Instance)->width = value;
            }
        }

        public int height
        {
            get
            {
                return ((global::wxSharp.Rect.__Internal*) __Instance)->height;
            }

            set
            {
                ((global::wxSharp.Rect.__Internal*)__Instance)->height = value;
            }
        }
    }

    public unsafe partial class GDIObjListBase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::wxSharp.List.__Internal list;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGDIObjListBaseC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGDIObjListBaseC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGDIObjListBaseD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GDIObjListBase> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.GDIObjListBase>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.GDIObjListBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.GDIObjListBase(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.GDIObjListBase __CreateInstance(global::wxSharp.GDIObjListBase.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.GDIObjListBase(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.GDIObjListBase.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.GDIObjListBase.__Internal));
            global::wxSharp.GDIObjListBase.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private GDIObjListBase(global::wxSharp.GDIObjListBase.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected GDIObjListBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public GDIObjListBase()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GDIObjListBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public GDIObjListBase(global::wxSharp.GDIObjListBase _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.GDIObjListBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.GDIObjListBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class StringToColourHashMap_wxImplementation_Pair : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::wxSharp.String.__Internal first;

            [FieldOffset(20)]
            internal global::System.IntPtr second;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN45wxStringToColourHashMap_wxImplementation_PairC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN45wxStringToColourHashMap_wxImplementation_PairD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_Pair> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_Pair>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.StringToColourHashMap_wxImplementation_Pair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.StringToColourHashMap_wxImplementation_Pair(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.StringToColourHashMap_wxImplementation_Pair __CreateInstance(global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.StringToColourHashMap_wxImplementation_Pair(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal));
            global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private StringToColourHashMap_wxImplementation_Pair(global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringToColourHashMap_wxImplementation_Pair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public StringToColourHashMap_wxImplementation_Pair(global::wxSharp.StringToColourHashMap_wxImplementation_Pair _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.StringToColourHashMap_wxImplementation_Pair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.Color second
        {
            get
            {
                global::wxSharp.Color __result0;
                if (((global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal*) __Instance)->second == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.Color.NativeToManagedMap.ContainsKey(((global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal*) __Instance)->second))
                    __result0 = (global::wxSharp.Color) global::wxSharp.Color.NativeToManagedMap[((global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal*) __Instance)->second];
                else global::wxSharp.Color.NativeToManagedMap[((global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal*) __Instance)->second] = __result0 = (global::wxSharp.Color) global::wxSharp.Color.__CreateInstance(((global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal*) __Instance)->second);
                return __result0;
            }

            set
            {
                ((global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal*)__Instance)->second = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class StringToColourHashMap_wxImplementation_KeyEx : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxStringToColourHashMap_wxImplementation_KeyExC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxStringToColourHashMap_wxImplementation_KeyExC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx __CreateInstance(global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal));
            *(global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StringToColourHashMap_wxImplementation_KeyEx(global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringToColourHashMap_wxImplementation_KeyEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public StringToColourHashMap_wxImplementation_KeyEx()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public StringToColourHashMap_wxImplementation_KeyEx(global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal*) __Instance) = *((global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class StringToColourHashMap_wxImplementation_HashTable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_table;

            [FieldOffset(4)]
            internal uint m_tableBuckets;

            [FieldOffset(8)]
            internal uint m_items;

            [FieldOffset(12)]
            internal global::wxSharp.StringHash.__Internal m_hasher;

            [FieldOffset(13)]
            internal global::wxSharp.StringEqual.__Internal m_equals;

            [FieldOffset(14)]
            internal global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTableC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr ht);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTableD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable5clearEv")]
            internal static extern void clear(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable4sizeEv")]
            internal static extern uint size(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable8max_sizeEv")]
            internal static extern uint max_size(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable5emptyEv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool empty(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable3endEv")]
            internal static extern global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal end(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable5beginEv")]
            internal static extern global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal begin(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable16GetBucketForNodeEPS_PNS_4NodeE")]
            internal static extern uint GetBucketForNode(global::System.IntPtr ht, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8CopyNodeEPNS_4NodeE")]
            internal static extern global::System.IntPtr CopyNode(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable15GetOrCreateNodeERK45wxStringToColourHashMap_wxImplementation_PairRb")]
            internal static extern global::System.IntPtr GetOrCreateNode(global::System.IntPtr __instance, global::System.IntPtr value, bool* created);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable10CreateNodeERK45wxStringToColourHashMap_wxImplementation_Pairm")]
            internal static extern global::System.IntPtr CreateNode(global::System.IntPtr __instance, global::System.IntPtr value, uint bucket);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable10CreateNodeERK45wxStringToColourHashMap_wxImplementation_Pair")]
            internal static extern void CreateNode(global::System.IntPtr __instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable11ResizeTableEm")]
            internal static extern void ResizeTable(global::System.IntPtr __instance, uint newSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8HashCopyERKS_")]
            internal static extern void HashCopy(global::System.IntPtr __instance, global::System.IntPtr ht);
        }

        public unsafe partial class Node : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_next;

                [FieldOffset(4)]
                internal global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal m_value;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable4NodeC2ERK45wxStringToColourHashMap_wxImplementation_Pair")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable4NodeC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable4NodeD2Ev")]
                internal static extern void dtor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable4Node4nextEv")]
                internal static extern global::System.IntPtr next(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node __CreateInstance(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__Internal));
                global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Node(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Node(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Node(global::wxSharp.StringToColourHashMap_wxImplementation_Pair value)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.ctor(__Instance, __arg0);
            }

            public Node(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = _0.__Instance;
                __Internal.cctor_1(__Instance, __arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (disposing)
                    __Internal.dtor(__Instance);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node next()
            {
                var __ret = __Internal.next(__Instance);
                global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node) global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            public global::wxSharp.StringToColourHashMap_wxImplementation_Pair m_value
            {
                get
                {
                    return global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__Internal*) __Instance)->m_value));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__Internal*)__Instance)->m_value = *(global::wxSharp.StringToColourHashMap_wxImplementation_Pair.__Internal*) value.__Instance;
                }
            }
        }

        public unsafe partial class Iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8IteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8IteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8IteratorC2ERKS0_")]
                internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable8IteratoreqERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable8IteratorneERKS0_")]
                [return: MarshalAs(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual(global::System.IntPtr __instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8Iterator11GetNextNodeEv")]
                internal static extern global::System.IntPtr GetNextNode(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8Iterator8PlusPlusEv")]
                internal static extern void PlusPlus(global::System.IntPtr __instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator __CreateInstance(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal));
                *(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Iterator()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public Iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node node, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable ht)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public Iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance) = *((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public static bool operator ==(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator __op, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorEqualEqual(__arg0, __arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator __op, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var __arg0 = __op.__Instance;
                var __arg1 = it.__Instance;
                var __ret = __Internal.OperatorExclaimEqual(__arg0, __arg1);
                return __ret;
            }

            protected global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node GetNextNode()
            {
                var __ret = __Internal.GetNextNode(__Instance);
                global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node) global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            protected void PlusPlus()
            {
                __Internal.PlusPlus(__Instance);
            }

            public global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node m_node
            {
                get
                {
                    global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node __result0;
                    if (((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance)->m_node))
                        __result0 = (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node) global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance)->m_node];
                    else __result0 = global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*)__Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public global::wxSharp.StringToColourHashMap_wxImplementation_HashTable m_ht
            {
                get
                {
                    global::wxSharp.StringToColourHashMap_wxImplementation_HashTable __result0;
                    if (((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance)->m_ht == IntPtr.Zero) __result0 = null;
                    else if (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.NativeToManagedMap.ContainsKey(((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance)->m_ht))
                        __result0 = (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable) global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.NativeToManagedMap[((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance)->m_ht];
                    else __result0 = global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__CreateInstance(((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*) __Instance)->m_ht);
                    return __result0;
                }

                set
                {
                    ((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator.__Internal*)__Instance)->m_ht = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class iterator : global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorC2EPNS_4NodeEPS_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorC2ERKS0_")]
                internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            internal static new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator __CreateInstance(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal));
                *(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node node, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal*) __Instance) = *((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal*) _0.__Instance);
            }
        }

        public unsafe partial class const_iterator : global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::System.IntPtr m_node;

                [FieldOffset(4)]
                internal global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable14const_iteratorC2Ev")]
                internal static extern void ctor(global::System.IntPtr __instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable14const_iteratorC2ENS_8iteratorE")]
                internal static extern void ctor(global::System.IntPtr __instance, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable14const_iteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable14const_iteratorC2ERKS0_")]
                internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            internal static new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator __CreateInstance(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal));
                *(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                __Internal.ctor(__Instance);
            }

            public const_iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator i)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is passed by value.");
                var __arg0 = i.__Instance;
                __Internal.ctor(__Instance, *(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal*) __arg0);
            }

            public const_iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node node, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var __arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public const_iterator(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal*) __Instance) = *((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.const_iterator.__Internal*) _0.__Instance);
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.StringToColourHashMap_wxImplementation_HashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.StringToColourHashMap_wxImplementation_HashTable __CreateInstance(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.StringToColourHashMap_wxImplementation_HashTable(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal));
            global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private StringToColourHashMap_wxImplementation_HashTable(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringToColourHashMap_wxImplementation_HashTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public StringToColourHashMap_wxImplementation_HashTable(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable ht)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = ht.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.StringToColourHashMap_wxImplementation_HashTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void clear()
        {
            __Internal.clear(__Instance);
        }

        public uint size()
        {
            var __ret = __Internal.size(__Instance);
            return __ret;
        }

        public uint max_size()
        {
            var __ret = __Internal.max_size(__Instance);
            return __ret;
        }

        public bool empty()
        {
            var __ret = __Internal.empty(__Instance);
            return __ret;
        }

        public global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator end()
        {
            var __ret = __Internal.end(__Instance);
            return global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator begin()
        {
            var __ret = __Internal.begin(__Instance);
            return global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        protected global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node GetOrCreateNode(global::wxSharp.StringToColourHashMap_wxImplementation_Pair value, ref bool created)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = value.__Instance;
            fixed (bool* __created1 = &created)
            {
                var __arg1 = __created1;
                var __ret = __Internal.GetOrCreateNode(__Instance, __arg0, __arg1);
                global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node) global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node CreateNode(global::wxSharp.StringToColourHashMap_wxImplementation_Pair value, uint bucket)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = value.__Instance;
            var __ret = __Internal.CreateNode(__Instance, __arg0, bucket);
            global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node) global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void CreateNode(global::wxSharp.StringToColourHashMap_wxImplementation_Pair value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = value.__Instance;
            __Internal.CreateNode(__Instance, __arg0);
        }

        protected void ResizeTable(uint newSize)
        {
            __Internal.ResizeTable(__Instance, newSize);
        }

        protected void HashCopy(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable ht)
        {
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = ht.__Instance;
            __Internal.HashCopy(__Instance, __arg0);
        }

        protected static uint GetBucketForNode(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable ht, global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node node)
        {
            var __arg0 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
            var __arg1 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = __Internal.GetBucketForNode(__arg0, __arg1);
            return __ret;
        }

        protected static global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node CopyNode(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node node)
        {
            var __arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = __Internal.CopyNode(__arg0);
            global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node) global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected uint m_tableBuckets
        {
            get
            {
                return ((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal*) __Instance)->m_tableBuckets;
            }

            set
            {
                ((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal*)__Instance)->m_tableBuckets = value;
            }
        }

        protected uint m_items
        {
            get
            {
                return ((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal*) __Instance)->m_items;
            }

            set
            {
                ((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal*)__Instance)->m_items = value;
            }
        }

        protected global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx m_getKey
        {
            get
            {
                return global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal*) __Instance)->m_getKey));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.__Internal*)__Instance)->m_getKey = *(global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class StringToColourHashMap : global::wxSharp.StringToColourHashMap_wxImplementation_HashTable, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_table;

            [FieldOffset(4)]
            internal uint m_tableBuckets;

            [FieldOffset(8)]
            internal uint m_items;

            [FieldOffset(12)]
            internal global::wxSharp.StringHash.__Internal m_hasher;

            [FieldOffset(13)]
            internal global::wxSharp.StringEqual.__Internal m_equals;

            [FieldOffset(14)]
            internal global::wxSharp.StringToColourHashMap_wxImplementation_KeyEx.__Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMapC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMapD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMap6insertERK45wxStringToColourHashMap_wxImplementation_Pair")]
            internal static extern void insert(global::System.IntPtr @return, global::System.IntPtr __instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMap5eraseERKN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorE")]
            internal static extern void erase(global::System.IntPtr __instance, global::System.IntPtr it);
        }

        public unsafe partial class Insert_Result : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal first;

                [FieldOffset(8)]
                internal byte second;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN23wxStringToColourHashMap13Insert_ResultC2ERKN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorERKb")]
                internal static extern void ctor(global::System.IntPtr __instance, global::System.IntPtr f, bool* s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN23wxStringToColourHashMap13Insert_ResultC2ERKS0_")]
                internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap.Insert_Result> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StringToColourHashMap.Insert_Result>();
            protected internal void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            internal static global::wxSharp.StringToColourHashMap.Insert_Result __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap.Insert_Result(native.ToPointer(), skipVTables);
            }

            internal static global::wxSharp.StringToColourHashMap.Insert_Result __CreateInstance(global::wxSharp.StringToColourHashMap.Insert_Result.__Internal native, bool skipVTables = false)
            {
                return new global::wxSharp.StringToColourHashMap.Insert_Result(native, skipVTables);
            }

            private static void* __CopyValue(global::wxSharp.StringToColourHashMap.Insert_Result.__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap.Insert_Result.__Internal));
                *(global::wxSharp.StringToColourHashMap.Insert_Result.__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Insert_Result(global::wxSharp.StringToColourHashMap.Insert_Result.__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Insert_Result(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Insert_Result(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator f, bool s)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap.Insert_Result.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(f, null))
                    throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = f.__Instance;
                var __arg1 = &s;
                __Internal.ctor(__Instance, __arg0, __arg1);
            }

            public Insert_Result(global::wxSharp.StringToColourHashMap.Insert_Result _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap.Insert_Result.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((global::wxSharp.StringToColourHashMap.Insert_Result.__Internal*) __Instance) = *((global::wxSharp.StringToColourHashMap.Insert_Result.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            public virtual void Dispose(bool disposing)
            {
                if (__Instance == IntPtr.Zero)
                    return;
                global::wxSharp.StringToColourHashMap.Insert_Result __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator first
            {
                get
                {
                    return global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.StringToColourHashMap.Insert_Result.__Internal*) __Instance)->first));
                }

                set
                {
                    if (ReferenceEquals(value, null))
                        throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                    ((global::wxSharp.StringToColourHashMap.Insert_Result.__Internal*)__Instance)->first = *(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator.__Internal*) value.__Instance;
                }
            }

            public bool second
            {
                get
                {
                    return ((global::wxSharp.StringToColourHashMap.Insert_Result.__Internal*) __Instance)->second != 0;
                }

                set
                {
                    ((global::wxSharp.StringToColourHashMap.Insert_Result.__Internal*)__Instance)->second = (byte) (value ? 1 : 0);
                }
            }
        }

        internal static new global::wxSharp.StringToColourHashMap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.StringToColourHashMap(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.StringToColourHashMap __CreateInstance(global::wxSharp.StringToColourHashMap.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.StringToColourHashMap(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.StringToColourHashMap.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap.__Internal));
            global::wxSharp.StringToColourHashMap.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private StringToColourHashMap(global::wxSharp.StringToColourHashMap.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StringToColourHashMap(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public StringToColourHashMap(global::wxSharp.StringToColourHashMap _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StringToColourHashMap.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.StringToColourHashMap_wxImplementation_HashTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::wxSharp.StringToColourHashMap.Insert_Result insert(global::wxSharp.StringToColourHashMap_wxImplementation_Pair v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = v.__Instance;
            var __ret = new global::wxSharp.StringToColourHashMap.Insert_Result.__Internal();
            __Internal.insert(new IntPtr(&__ret), __Instance, __arg0);
            return global::wxSharp.StringToColourHashMap.Insert_Result.__CreateInstance(__ret);
        }

        public void erase(global::wxSharp.StringToColourHashMap_wxImplementation_HashTable.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = it.__Instance;
            __Internal.erase(__Instance, __arg0);
        }
    }

    public unsafe partial class ColourDatabase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr m_map;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxColourDatabaseC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxColourDatabaseC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxColourDatabaseD2Ev")]
            internal static extern void dtor(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ColourDatabase> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ColourDatabase>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.ColourDatabase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ColourDatabase(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ColourDatabase __CreateInstance(global::wxSharp.ColourDatabase.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ColourDatabase(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ColourDatabase.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ColourDatabase.__Internal));
            *(global::wxSharp.ColourDatabase.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ColourDatabase(global::wxSharp.ColourDatabase.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ColourDatabase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ColourDatabase()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ColourDatabase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public ColourDatabase(global::wxSharp.ColourDatabase _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ColourDatabase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::wxSharp.ColourDatabase.__Internal*) __Instance) = *((global::wxSharp.ColourDatabase.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.ColourDatabase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class ResourceCache : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxListBase;

            [FieldOffset(4)]
            internal uint m_count;

            [FieldOffset(8)]
            internal byte m_destroy;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nodeFirst;

            [FieldOffset(16)]
            internal global::System.IntPtr m_nodeLast;

            [FieldOffset(20)]
            internal global::wxSharp.KeyType m_keyType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxResourceCacheC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxResourceCacheC2Ej")]
            internal static extern void ctor(global::System.IntPtr __instance, uint keyType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxResourceCacheC2ERKS_")]
            internal static extern void cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ResourceCache> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.ResourceCache>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.ResourceCache __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.ResourceCache(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.ResourceCache __CreateInstance(global::wxSharp.ResourceCache.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.ResourceCache(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.ResourceCache.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.ResourceCache.__Internal));
            global::wxSharp.ResourceCache.__Internal.cctor(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private ResourceCache(global::wxSharp.ResourceCache.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ResourceCache(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public ResourceCache()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ResourceCache.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.ResourceCache");
        }

        public ResourceCache(uint keyType)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ResourceCache.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, keyType);
            SetupVTables(GetType().FullName == "wxSharp.ResourceCache");
        }

        public ResourceCache(global::wxSharp.ResourceCache _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.ResourceCache.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "wxSharp.ResourceCache");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.ResourceCache __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.ResourceCache.__Internal*) __Instance)->vptr_wxListBase = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        #region Virtual table interop

        // virtual ~wxResourceCache()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.ResourceCache) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[1];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class StockGDI : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxStockGDI;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDIC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDI9DeleteAllEv")]
            internal static extern void DeleteAll();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDI8GetBrushENS_4ItemE")]
            internal static extern global::System.IntPtr GetBrush(global::wxSharp.StockGDI.Item item);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDI9GetColourENS_4ItemE")]
            internal static extern global::System.IntPtr GetColour(global::wxSharp.StockGDI.Item item);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDI6GetPenENS_4ItemE")]
            internal static extern global::System.IntPtr GetPen(global::wxSharp.StockGDI.Item item);
        }

        public enum Item : uint
        {
            BRUSH_BLACK = 0,
            BRUSH_BLUE = 1,
            BRUSH_CYAN = 2,
            BRUSH_GREEN = 3,
            BRUSH_YELLOW = 4,
            BRUSH_GREY = 5,
            BRUSH_LIGHTGREY = 6,
            BRUSH_MEDIUMGREY = 7,
            BRUSH_RED = 8,
            BRUSH_TRANSPARENT = 9,
            BRUSH_WHITE = 10,
            COLOUR_BLACK = 11,
            COLOUR_BLUE = 12,
            COLOUR_CYAN = 13,
            COLOUR_GREEN = 14,
            COLOUR_YELLOW = 15,
            COLOUR_LIGHTGREY = 16,
            COLOUR_RED = 17,
            COLOUR_WHITE = 18,
            CURSOR_CROSS = 19,
            CURSOR_HOURGLASS = 20,
            CURSOR_STANDARD = 21,
            FONT_ITALIC = 22,
            FONT_NORMAL = 23,
            FONT_SMALL = 24,
            FONT_SWISS = 25,
            PEN_BLACK = 26,
            PEN_BLACKDASHED = 27,
            PEN_BLUE = 28,
            PEN_CYAN = 29,
            PEN_GREEN = 30,
            PEN_YELLOW = 31,
            PEN_GREY = 32,
            PEN_LIGHTGREY = 33,
            PEN_MEDIUMGREY = 34,
            PEN_RED = 35,
            PEN_TRANSPARENT = 36,
            PEN_WHITE = 37,
            ITEMCOUNT = 38
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StockGDI> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::wxSharp.StockGDI>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::wxSharp.StockGDI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.StockGDI(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.StockGDI __CreateInstance(global::wxSharp.StockGDI.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.StockGDI(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.StockGDI.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.StockGDI.__Internal));
            *(global::wxSharp.StockGDI.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StockGDI(global::wxSharp.StockGDI.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StockGDI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public StockGDI()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.StockGDI.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.StockGDI");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::wxSharp.StockGDI __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::wxSharp.StockGDI.__Internal*) __Instance)->vptr_wxStockGDI = new global::System.IntPtr(__OriginalVTables[0]);
            if (disposing)
            {
                var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
                var ___dtorDelegate = (global::wxSharp.Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::wxSharp.Delegates.Action_IntPtr));
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public static void DeleteAll()
        {
            __Internal.DeleteAll();
        }

        public static global::wxSharp.Brush GetBrush(global::wxSharp.StockGDI.Item item)
        {
            var __ret = __Internal.GetBrush(item);
            global::wxSharp.Brush __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Brush.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Brush) global::wxSharp.Brush.NativeToManagedMap[__ret];
            else global::wxSharp.Brush.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Brush) global::wxSharp.Brush.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.Color GetColour(global::wxSharp.StockGDI.Item item)
        {
            var __ret = __Internal.GetColour(item);
            global::wxSharp.Color __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Color.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Color) global::wxSharp.Color.NativeToManagedMap[__ret];
            else global::wxSharp.Color.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Color) global::wxSharp.Color.__CreateInstance(__ret);
            return __result0;
        }

        public static global::wxSharp.Pen GetPen(global::wxSharp.StockGDI.Item item)
        {
            var __ret = __Internal.GetPen(item);
            global::wxSharp.Pen __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Pen.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.Pen) global::wxSharp.Pen.NativeToManagedMap[__ret];
            else global::wxSharp.Pen.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.Pen) global::wxSharp.Pen.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxStockGDI()
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.StockGDI) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[1];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = _Thunks[0];
                    *(void**) (vfptr0 + 8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 8);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class gdicmn
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z22wxInitializeStockListsv")]
            internal static extern void InitializeStockLists();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxDeleteStockListsv")]
            internal static extern void DeleteStockLists();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxColourDisplayv")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColourDisplay();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxDisplayDepthv")]
            internal static extern int DisplayDepth();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxDisplaySizePiS_")]
            internal static extern void DisplaySize(int* width, int* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxGetDisplaySizev")]
            internal static extern global::wxSharp.Size.__Internal GetDisplaySize();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxDisplaySizeMMPiS_")]
            internal static extern void DisplaySizeMM(int* width, int* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxGetDisplaySizeMMv")]
            internal static extern global::wxSharp.Size.__Internal GetDisplaySizeMM();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxGetDisplayPPIv")]
            internal static extern global::wxSharp.Size.__Internal GetDisplayPPI();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z19wxClientDisplayRectPiS_S_S_")]
            internal static extern void ClientDisplayRect(int* x, int* y, int* width, int* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z22wxGetClientDisplayRectv")]
            internal static extern void GetClientDisplayRect(global::System.IntPtr @return);
        }

        public static void InitializeStockLists()
        {
            __Internal.InitializeStockLists();
        }

        public static void DeleteStockLists()
        {
            __Internal.DeleteStockLists();
        }

        public static bool ColourDisplay()
        {
            var __ret = __Internal.ColourDisplay();
            return __ret;
        }

        public static int DisplayDepth()
        {
            var __ret = __Internal.DisplayDepth();
            return __ret;
        }

        public static void DisplaySize(ref int width, ref int height)
        {
            fixed (int* __width0 = &width)
            {
                var __arg0 = __width0;
                fixed (int* __height1 = &height)
                {
                    var __arg1 = __height1;
                    __Internal.DisplaySize(__arg0, __arg1);
                }
            }
        }

        public static global::wxSharp.Size GetDisplaySize()
        {
            var __ret = __Internal.GetDisplaySize();
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static void DisplaySizeMM(ref int width, ref int height)
        {
            fixed (int* __width0 = &width)
            {
                var __arg0 = __width0;
                fixed (int* __height1 = &height)
                {
                    var __arg1 = __height1;
                    __Internal.DisplaySizeMM(__arg0, __arg1);
                }
            }
        }

        public static global::wxSharp.Size GetDisplaySizeMM()
        {
            var __ret = __Internal.GetDisplaySizeMM();
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size GetDisplayPPI()
        {
            var __ret = __Internal.GetDisplayPPI();
            return global::wxSharp.Size.__CreateInstance(__ret);
        }

        public static void ClientDisplayRect(ref int x, ref int y, ref int width, ref int height)
        {
            fixed (int* __x0 = &x)
            {
                var __arg0 = __x0;
                fixed (int* __y1 = &y)
                {
                    var __arg1 = __y1;
                    fixed (int* __width2 = &width)
                    {
                        var __arg2 = __width2;
                        fixed (int* __height3 = &height)
                        {
                            var __arg3 = __height3;
                            __Internal.ClientDisplayRect(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static global::wxSharp.Rect GetClientDisplayRect()
        {
            var __ret = new global::wxSharp.Rect.__Internal();
            __Internal.GetClientDisplayRect(new IntPtr(&__ret));
            return global::wxSharp.Rect.__CreateInstance(__ret);
        }

        public static global::wxSharp.Size DefaultSize
        {
            get
            {
                var __ptr = (global::wxSharp.Size.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxDefaultSize");
                return global::wxSharp.Size.__CreateInstance(*__ptr);
            }
        }

        public static global::wxSharp.Point DefaultPosition
        {
            get
            {
                var __ptr = (global::wxSharp.Point.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxDefaultPosition");
                return global::wxSharp.Point.__CreateInstance(*__ptr);
            }
        }

        public static string PanelNameStr
        {
            get
            {
                var __ptr = (string*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxPanelNameStr");
                if (__ptr == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) __ptr;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) __ptr, __length);
            }
        }

        public static global::wxSharp.Pen NullPen
        {
            get
            {
                var __ptr = (global::wxSharp.Pen.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullPen");
                return global::wxSharp.Pen.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.Pen.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullPen");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.Pen.__Internal*) value.__Instance;
            }
        }

        public static global::wxSharp.Brush NullBrush
        {
            get
            {
                var __ptr = (global::wxSharp.Brush.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullBrush");
                return global::wxSharp.Brush.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.Brush.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullBrush");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.Brush.__Internal*) value.__Instance;
            }
        }

        public static global::wxSharp.Color NullColour
        {
            get
            {
                var __ptr = (global::wxSharp.Color.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullColour");
                return global::wxSharp.Color.__CreateInstance(*__ptr);
            }

            set
            {
                var __ptr = (global::wxSharp.Color.__Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxNullColour");
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *__ptr = *(global::wxSharp.Color.__Internal*) value.__Instance;
            }
        }

        public static global::wxSharp.ColourDatabase TheColourDatabase
        {
            get
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxTheColourDatabase");
                global::wxSharp.ColourDatabase __result0;
                if (*__ptr == IntPtr.Zero) __result0 = null;
                else if (global::wxSharp.ColourDatabase.NativeToManagedMap.ContainsKey(*__ptr))
                    __result0 = (global::wxSharp.ColourDatabase) global::wxSharp.ColourDatabase.NativeToManagedMap[*__ptr];
                else __result0 = global::wxSharp.ColourDatabase.__CreateInstance(*__ptr);
                return __result0;
            }

            set
            {
                var __ptr = (global::System.IntPtr*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxTheColourDatabase");
                *__ptr = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }
}
