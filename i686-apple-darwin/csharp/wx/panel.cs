// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class PanelBase : global::wxSharp.Window, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 440)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_first;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nextHandler;

            [FieldOffset(16)]
            internal global::System.IntPtr m_previousHandler;

            [FieldOffset(20)]
            internal global::System.IntPtr m_dynamicEvents;

            [FieldOffset(24)]
            internal global::System.IntPtr m_pendingEvents;

            [FieldOffset(28)]
            internal global::wxSharp.CriticalSection.__Internal m_pendingEventsLock;

            [FieldOffset(32)]
            internal byte m_enabled;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(40)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(44)]
            internal global::wxSharp.WindowIDRef.__Internal m_windowId;

            [FieldOffset(48)]
            internal global::System.IntPtr m_parent;

            [FieldOffset(52)]
            internal global::wxSharp.WindowList.__Internal m_children;

            [FieldOffset(76)]
            internal int m_minWidth;

            [FieldOffset(80)]
            internal int m_minHeight;

            [FieldOffset(84)]
            internal int m_maxWidth;

            [FieldOffset(88)]
            internal int m_maxHeight;

            [FieldOffset(92)]
            internal global::System.IntPtr m_eventHandler;

            [FieldOffset(96)]
            internal global::System.IntPtr m_windowValidator;

            [FieldOffset(100)]
            internal global::System.IntPtr m_dropTarget;

            [FieldOffset(104)]
            internal global::wxSharp.Cursor.__Internal m_cursor;

            [FieldOffset(112)]
            internal global::wxSharp.Font.__Internal m_font;

            [FieldOffset(120)]
            internal global::wxSharp.Color.__Internal m_backgroundColour;

            [FieldOffset(128)]
            internal global::wxSharp.Color.__Internal m_foregroundColour;

            [FieldOffset(136)]
            internal global::System.IntPtr m_caret;

            [FieldOffset(140)]
            internal global::wxSharp.Region.__Internal m_updateRegion;

            [FieldOffset(148)]
            internal global::wxSharp.AcceleratorTable.__Internal m_acceleratorTable;

            [FieldOffset(156)]
            internal global::System.IntPtr m_tooltip;

            [FieldOffset(160)]
            internal global::System.IntPtr m_constraints;

            [FieldOffset(164)]
            internal global::System.IntPtr m_constraintsInvolvedIn;

            [FieldOffset(168)]
            internal global::System.IntPtr m_windowSizer;

            [FieldOffset(172)]
            internal global::System.IntPtr m_containingSizer;

            [FieldOffset(176)]
            internal byte m_autoLayout;

            [FieldOffset(176)]
            internal byte m_isShown;

            [FieldOffset(176)]
            internal byte m_isEnabled;

            [FieldOffset(176)]
            internal byte m_isBeingDeleted;

            [FieldOffset(176)]
            internal byte m_hasBgCol;

            [FieldOffset(176)]
            internal byte m_hasFgCol;

            [FieldOffset(176)]
            internal byte m_hasFont;

            [FieldOffset(176)]
            internal byte m_inheritBgCol;

            [FieldOffset(177)]
            internal byte m_inheritFgCol;

            [FieldOffset(177)]
            internal byte m_inheritFont;

            [FieldOffset(180)]
            internal int m_windowStyle;

            [FieldOffset(184)]
            internal int m_exStyle;

            [FieldOffset(188)]
            internal global::wxSharp.String.__Internal m_windowName;

            [FieldOffset(208)]
            internal byte m_themeEnabled;

            [FieldOffset(212)]
            internal global::wxSharp.BackgroundStyle m_backgroundStyle;

            [FieldOffset(216)]
            internal global::wxSharp.Palette.__Internal m_palette;

            [FieldOffset(224)]
            internal byte m_hasCustomPalette;

            [FieldOffset(228)]
            internal global::wxSharp.Size.__Internal m_virtualSize;

            [FieldOffset(236)]
            internal global::System.IntPtr m_scrollHelper;

            [FieldOffset(240)]
            internal global::wxSharp.WindowVariant m_windowVariant;

            [FieldOffset(244)]
            internal global::wxSharp.Size.__Internal m_bestSizeCache;

            [FieldOffset(252)]
            internal uint m_freezeCount;

            [FieldOffset(256)]
            internal global::wxSharp.List.__Internal m_subControls;

            [FieldOffset(280)]
            internal global::System.IntPtr m_cgContextRef;

            [FieldOffset(284)]
            internal byte m_cachedClippedRectValid;

            [FieldOffset(288)]
            internal global::wxSharp.Rect.__Internal m_cachedClippedRectWithOuterStructure;

            [FieldOffset(304)]
            internal global::wxSharp.Rect.__Internal m_cachedClippedRect;

            [FieldOffset(320)]
            internal global::wxSharp.Rect.__Internal m_cachedClippedClientRect;

            [FieldOffset(336)]
            internal global::wxSharp.Region.__Internal m_cachedClippedRegionWithOuterStructure;

            [FieldOffset(344)]
            internal global::wxSharp.Region.__Internal m_cachedClippedRegion;

            [FieldOffset(352)]
            internal global::wxSharp.Region.__Internal m_cachedClippedClientRegion;

            [FieldOffset(360)]
            internal global::wxSharp.Point.__Internal m_macTopLeftInset;

            [FieldOffset(368)]
            internal global::wxSharp.Point.__Internal m_macBottomRightInset;

            [FieldOffset(376)]
            internal byte m_macAlpha;

            [FieldOffset(380)]
            internal global::System.IntPtr m_hScrollBar;

            [FieldOffset(384)]
            internal global::System.IntPtr m_vScrollBar;

            [FieldOffset(388)]
            internal byte m_hScrollBarAlwaysShown;

            [FieldOffset(389)]
            internal byte m_vScrollBarAlwaysShown;

            [FieldOffset(392)]
            internal global::System.IntPtr m_growBox;

            [FieldOffset(396)]
            internal global::wxSharp.String.__Internal m_label;

            [FieldOffset(416)]
            internal byte m_isNativeWindowWrapper;

            [FieldOffset(417)]
            internal byte m_clipChildren;

            [FieldOffset(420)]
            internal global::System.IntPtr m_peer;

            [FieldOffset(424)]
            internal global::wxSharp.ControlContainer.__Internal m_container;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPanelBaseC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxNavigationEnabledI8wxWindowE24SetFocusIgnoringChildrenEv")]
            internal static extern void SetFocusIgnoringChildren(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxNavigationEnabledI8wxWindowE15OnNavigationKeyER20wxNavigationKeyEvent")]
            internal static extern void OnNavigationKey(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxNavigationEnabledI8wxWindowE7OnFocusER12wxFocusEvent")]
            internal static extern void OnFocus(global::System.IntPtr __instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxNavigationEnabledI8wxWindowE12OnChildFocusER17wxChildFocusEvent")]
            internal static extern void OnChildFocus(global::System.IntPtr __instance, global::System.IntPtr @event);
        }

        internal static new global::wxSharp.PanelBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.PanelBase(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.PanelBase __CreateInstance(global::wxSharp.PanelBase.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.PanelBase(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.PanelBase.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.PanelBase.__Internal));
            *(global::wxSharp.PanelBase.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private PanelBase(global::wxSharp.PanelBase.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected PanelBase(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public PanelBase()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.PanelBase.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.PanelBase");
        }

        public override void InitDialog()
        {
            base.InitDialog();
        }

        public override bool AcceptsFocus()
        {
            return base.AcceptsFocus();
        }

        public override bool AcceptsFocusRecursively()
        {
            return base.AcceptsFocusRecursively();
        }

        public override bool AcceptsFocusFromKeyboard()
        {
            return base.AcceptsFocusFromKeyboard();
        }

        public override void SetFocus()
        {
            base.SetFocus();
        }

        public void SetFocusIgnoringChildren()
        {
            __Internal.SetFocusIgnoringChildren(__Instance);
        }

        protected void OnNavigationKey(global::wxSharp.NavigationKeyEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnNavigationKey(__Instance, __arg0);
        }

        protected void OnFocus(global::wxSharp.FocusEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnFocus(__Instance, __arg0);
        }

        protected void OnChildFocus(global::wxSharp.ChildFocusEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @event.__Instance;
            __Internal.OnChildFocus(__Instance, __arg0);
        }

        protected global::wxSharp.ControlContainer m_container
        {
            get
            {
                return global::wxSharp.ControlContainer.__CreateInstance(new global::System.IntPtr(&((global::wxSharp.PanelBase.__Internal*) __Instance)->m_container));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::wxSharp.PanelBase.__Internal*)__Instance)->m_container = *(global::wxSharp.ControlContainer.__Internal*) value.__Instance;
            }
        }

        #region Virtual table interop

        // wxPanelBase
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetNextHandler(wxEvtHandler *handler) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetNextHandlerDelegateInstance;

        private static void _SetNextHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetNextHandler(__result0);
        }

        // void SetPreviousHandler(wxEvtHandler *handler) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetPreviousHandlerDelegateInstance;

        private static void _SetPreviousHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetPreviousHandler(__result0);
        }

        // bool ProcessEvent(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _ProcessEventDelegateInstance;

        private static bool _ProcessEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.ProcessEvent(__result0);
        }

        // void QueueEvent(wxEvent *event)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _QueueEventDelegateInstance;

        private static void _QueueEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.QueueEvent(__result0);
        }

        // void AddPendingEvent(const wxEvent& event) { // notice that the thread-safety problem comes from the fact that // Clone() doesn't make deep copies of wxString fields of wxEvent // object and so the same wxString could be used from both threads when // the event object is destroyed in this one -- QueueEvent() avoids // this problem as the event pointer is not used any more in this // thread at all after it is called. QueueEvent(event.Clone()); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AddPendingEventDelegateInstance;

        private static void _AddPendingEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.AddPendingEvent(__result0);
        }

        // bool TryBefore(wxEvent& event) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryBeforeDelegateInstance;

        private static bool _TryBeforeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryBefore(__result0);
        }

        // bool TryAfter(wxEvent& event) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryAfterDelegateInstance;

        private static bool _TryAfterDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryAfter(__result0);
        }

        // void DoSetClientData( void *data )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoSetClientDataDelegateInstance;

        private static void _DoSetClientDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        // bool Destroy()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _DestroyDelegateInstance;

        private static bool _DestroyDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Destroy();
        }

        // wxCoord AdjustForLayoutDirection(wxCoord x, wxCoord width, wxCoord widthTotal) const
        private static global::wxSharp.Delegates.Func_int_IntPtr_int_int_int _AdjustForLayoutDirectionDelegateInstance;

        private static int _AdjustForLayoutDirectionDelegateHook(global::System.IntPtr __instance, int x, int width, int widthTotal)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AdjustForLayoutDirection(x, width, widthTotal);
        }

        // void SetId( wxWindowID winid ) { m_windowId = winid; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetIdDelegateInstance;

        private static void _SetIdDelegateHook(global::System.IntPtr __instance, int winid)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetId(winid);
        }

        // void Raise() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _RaiseDelegateInstance;

        private static void _RaiseDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Raise();
        }

        // void Lower() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _LowerDelegateInstance;

        private static void _LowerDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Lower();
        }

        // wxPoint GetClientAreaOrigin() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxPoint___Internal_IntPtr _GetClientAreaOriginDelegateInstance;

        private static global::wxSharp.Point.__Internal _GetClientAreaOriginDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClientAreaOrigin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Point.__Internal*) __ret.__Instance;
        }

        // wxSize ClientToWindowSize(const wxSize& size) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr _ClientToWindowSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _ClientToWindowSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            var __ret = __target.ClientToWindowSize(__result0);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize WindowToClientSize(const wxSize& size) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr _WindowToClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _WindowToClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            var __ret = __target.WindowToClientSize(__result0);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetEffectiveMinSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetEffectiveMinSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetEffectiveMinSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEffectiveMinSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void Fit()
        private static global::wxSharp.Delegates.Action_IntPtr _FitDelegateInstance;

        private static void _FitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Fit();
        }

        // void FitInside()
        private static global::wxSharp.Delegates.Action_IntPtr _FitInsideDelegateInstance;

        private static void _FitInsideDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.FitInside();
        }

        // void SetSizeHints( int minW, int minH, int maxW = wxDefaultCoord, int maxH = wxDefaultCoord, int incW = wxDefaultCoord, int incH = wxDefaultCoord ) { DoSetSizeHints(minW, minH, maxW, maxH, incW, incH); }
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int _SetSizeHintsDelegateInstance;

        private static void _SetSizeHintsDelegateHook(global::System.IntPtr __instance, int minW, int minH, int maxW, int maxH, int incW, int incH)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetSizeHints(minW, minH, maxW, maxH, incW, incH);
        }

        // void SetMinSize(const wxSize& minSize)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMinSizeDelegateInstance;

        private static void _SetMinSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr minSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (minSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(minSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[minSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(minSize);
            __target.SetMinSize(__result0);
        }

        // void SetMaxSize(const wxSize& maxSize)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMaxSizeDelegateInstance;

        private static void _SetMaxSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr maxSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (maxSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(maxSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[maxSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(maxSize);
            __target.SetMaxSize(__result0);
        }

        // void SetMinClientSize(const wxSize& size) { SetMinSize(ClientToWindowSize(size)); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMinClientSizeDelegateInstance;

        private static void _SetMinClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            __target.SetMinClientSize(__result0);
        }

        // void SetMaxClientSize(const wxSize& size) { SetMaxSize(ClientToWindowSize(size)); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMaxClientSizeDelegateInstance;

        private static void _SetMaxClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            __target.SetMaxClientSize(__result0);
        }

        // wxSize GetMinSize() const { return wxSize(m_minWidth, m_minHeight); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMinSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMinSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMinSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetMaxSize() const { return wxSize(m_maxWidth, m_maxHeight); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMaxSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMaxSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMaxSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetMinClientSize() const { return WindowToClientSize(GetMinSize()); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMinClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMinClientSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMinClientSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetMaxClientSize() const { return WindowToClientSize(GetMaxSize()); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMaxClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMaxClientSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMaxClientSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void DoSetVirtualSize( int x, int y )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetVirtualSizeDelegateInstance;

        private static void _DoSetVirtualSizeDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetVirtualSize(x, y);
        }

        // wxSize DoGetVirtualSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetVirtualSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetVirtualSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetVirtualSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetBestVirtualSize() const { wxSize client( GetClientSize() ); wxSize best( GetBestSize() ); return wxSize( wxMax( client.x, best.x ), wxMax( client.y, best.y ) ); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetBestVirtualSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetBestVirtualSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetBestVirtualSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // double GetContentScaleFactor() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_double_IntPtr _GetContentScaleFactorDelegateInstance;

        private static double _GetContentScaleFactorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetContentScaleFactor();
        }

        // wxSize GetWindowBorderSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetWindowBorderSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetWindowBorderSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetWindowBorderSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // bool InformFirstDirection(int direction, int size, int availableOtherDir)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _InformFirstDirectionDelegateInstance;

        private static bool _InformFirstDirectionDelegateHook(global::System.IntPtr __instance, int direction, int size, int availableOtherDir)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.InformFirstDirection(direction, size, availableOtherDir);
        }

        // void SendSizeEvent(int flags = 0) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int _SendSizeEventDelegateInstance;

        private static void _SendSizeEventDelegateHook(global::System.IntPtr __instance, int flags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SendSizeEvent(flags);
        }

        // bool BeginRepositioningChildren() { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _BeginRepositioningChildrenDelegateInstance;

        private static bool _BeginRepositioningChildrenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.BeginRepositioningChildren();
        }

        // void EndRepositioningChildren() { }
        private static global::wxSharp.Delegates.Action_IntPtr _EndRepositioningChildrenDelegateInstance;

        private static void _EndRepositioningChildrenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.EndRepositioningChildren();
        }

        // bool Show( bool show = true ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_bool _ShowDelegateInstance;

        private static bool _ShowDelegateHook(global::System.IntPtr __instance, bool show)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Show(show);
        }

        // bool ShowWithEffect(wxShowEffect effect, unsigned timeout = 0) wxOVERRIDE { return OSXShowWithEffect(true, effect, timeout); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint _ShowWithEffectDelegateInstance;

        private static bool _ShowWithEffectDelegateHook(global::System.IntPtr __instance, global::wxSharp.ShowEffect effect, uint timeout)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ShowWithEffect(effect, timeout);
        }

        // bool HideWithEffect(wxShowEffect effect, unsigned timeout = 0) wxOVERRIDE { return OSXShowWithEffect(false, effect, timeout); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint _HideWithEffectDelegateInstance;

        private static bool _HideWithEffectDelegateHook(global::System.IntPtr __instance, global::wxSharp.ShowEffect effect, uint timeout)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HideWithEffect(effect, timeout);
        }

        // bool Enable( bool enable = true )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_bool _EnableDelegateInstance;

        private static bool _EnableDelegateHook(global::System.IntPtr __instance, bool enable)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Enable(enable);
        }

        // bool IsShown() const { return m_isShown; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsShownDelegateInstance;

        private static bool _IsShownDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsShown();
        }

        // bool IsShownOnScreen() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsShownOnScreenDelegateInstance;

        private static bool _IsShownOnScreenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsShownOnScreen();
        }

        // void SetWindowStyleFlag( long style ) { m_windowStyle = style; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetWindowStyleFlagDelegateInstance;

        private static void _SetWindowStyleFlagDelegateHook(global::System.IntPtr __instance, int style)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetWindowStyleFlag(style);
        }

        // long GetWindowStyleFlag() const { return m_windowStyle; }
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetWindowStyleFlagDelegateInstance;

        private static int _GetWindowStyleFlagDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetWindowStyleFlag();
        }

        // bool IsRetained() const { return HasFlag(wxRETAINED); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsRetainedDelegateInstance;

        private static bool _IsRetainedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsRetained();
        }

        // void SetExtraStyle(long exStyle) { m_exStyle = exStyle; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetExtraStyleDelegateInstance;

        private static void _SetExtraStyleDelegateHook(global::System.IntPtr __instance, int exStyle)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetExtraStyle(exStyle);
        }

        // void SetThemeEnabled(bool enableTheme) { m_themeEnabled = enableTheme; }
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetThemeEnabledDelegateInstance;

        private static void _SetThemeEnabledDelegateHook(global::System.IntPtr __instance, bool enableTheme)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetThemeEnabled(enableTheme);
        }

        // bool GetThemeEnabled() const { return m_themeEnabled; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _GetThemeEnabledDelegateInstance;

        private static bool _GetThemeEnabledDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetThemeEnabled();
        }

        // void SetFocus() wxOVERRIDE { if ( !m_container.DoSetFocus() ) BaseWindowClass::SetFocus(); }
        private static global::wxSharp.Delegates.Action_IntPtr _SetFocusDelegateInstance;

        private static void _SetFocusDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetFocus();
        }

        // void SetFocusFromKbd() { SetFocus(); }
        private static global::wxSharp.Delegates.Action_IntPtr _SetFocusFromKbdDelegateInstance;

        private static void _SetFocusFromKbdDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetFocusFromKbd();
        }

        // bool HasFocus() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasFocusDelegateInstance;

        private static bool _HasFocusDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasFocus();
        }

        // bool AcceptsFocus() const wxOVERRIDE { return m_container.AcceptsFocus(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AcceptsFocusDelegateInstance;

        private static bool _AcceptsFocusDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AcceptsFocus();
        }

        // bool AcceptsFocusRecursively() const wxOVERRIDE { return m_container.AcceptsFocusRecursively(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AcceptsFocusRecursivelyDelegateInstance;

        private static bool _AcceptsFocusRecursivelyDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AcceptsFocusRecursively();
        }

        // bool AcceptsFocusFromKeyboard() const wxOVERRIDE { return m_container.AcceptsFocusFromKeyboard(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AcceptsFocusFromKeyboardDelegateInstance;

        private static bool _AcceptsFocusFromKeyboardDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AcceptsFocusFromKeyboard();
        }

        // bool CanBeFocused() const { return IsShown() && IsEnabled(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanBeFocusedDelegateInstance;

        private static bool _CanBeFocusedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanBeFocused();
        }

        // void SetCanFocus(bool WXUNUSED(canFocus)) { }
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetCanFocusDelegateInstance;

        private static void _SetCanFocusDelegateHook(global::System.IntPtr __instance, bool _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetCanFocus(_0);
        }

        // bool IsTopLevel() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsTopLevelDelegateInstance;

        private static bool _IsTopLevelDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsTopLevel();
        }

        // bool IsClientAreaChild(const wxWindow *child) const wxOVERRIDE { return !MacIsWindowScrollbar(child) && !((wxWindow*)m_growBox==child) && wxWindowBase::IsClientAreaChild(child); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _IsClientAreaChildDelegateInstance;

        private static bool _IsClientAreaChildDelegateHook(global::System.IntPtr __instance, global::System.IntPtr child)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (child == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(child))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[child];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(child, skipVTables: true);
            return __target.IsClientAreaChild(__result0);
        }

        // bool Validate()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _ValidateDelegateInstance;

        private static bool _ValidateDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Validate();
        }

        // bool TransferDataToWindow()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _TransferDataToWindowDelegateInstance;

        private static bool _TransferDataToWindowDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.TransferDataToWindow();
        }

        // bool TransferDataFromWindow()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _TransferDataFromWindowDelegateInstance;

        private static bool _TransferDataFromWindowDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.TransferDataFromWindow();
        }

        // void InitDialog() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _InitDialogDelegateInstance;

        private static void _InitDialogDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.InitDialog();
        }

        // bool RegisterHotKey(int hotkeyId, int modifiers, int keycode) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _RegisterHotKeyDelegateInstance;

        private static bool _RegisterHotKeyDelegateHook(global::System.IntPtr __instance, int hotkeyId, int modifiers, int keycode)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.RegisterHotKey(hotkeyId, modifiers, keycode);
        }

        // bool UnregisterHotKey(int hotkeyId) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _UnregisterHotKeyDelegateInstance;

        private static bool _UnregisterHotKeyDelegateHook(global::System.IntPtr __instance, int hotkeyId)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.UnregisterHotKey(hotkeyId);
        }

        // wxSize GetDPI() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetDPIDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetDPIDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDPI();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void WarpPointer( int x, int y ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _WarpPointerDelegateInstance;

        private static void _WarpPointerDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.WarpPointer(x, y);
        }

        // bool HasCapture() const { return reinterpret_cast<const wxWindow*>(this) == GetCapture(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasCaptureDelegateInstance;

        private static bool _HasCaptureDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasCapture();
        }

        // bool EnableTouchEvents(int eventsMask) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _EnableTouchEventsDelegateInstance;

        private static bool _EnableTouchEventsDelegateHook(global::System.IntPtr __instance, int eventsMask)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.EnableTouchEvents(eventsMask);
        }

        // void Refresh( bool eraseBackground = true, const wxRect *rect = NULL ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool_IntPtr _RefreshDelegateInstance;

        private static void _RefreshDelegateHook(global::System.IntPtr __instance, bool eraseBackground, global::System.IntPtr rect)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Rect __result1;
            if (rect == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Rect.NativeToManagedMap.ContainsKey(rect))
                __result1 = (global::wxSharp.Rect) global::wxSharp.Rect.NativeToManagedMap[rect];
            else __result1 = global::wxSharp.Rect.__CreateInstance(rect);
            __target.Refresh(eraseBackground, __result1);
        }

        // void Update() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        // void ClearBackground() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _ClearBackgroundDelegateInstance;

        private static void _ClearBackgroundDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ClearBackground();
        }

        // void PrepareDC( wxDC & WXUNUSED(dc) ) { }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _PrepareDCDelegateInstance;

        private static void _PrepareDCDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.DC __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.DC.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.DC) global::wxSharp.DC.NativeToManagedMap[_0];
            else __result0 = (global::wxSharp.DC) global::wxSharp.DC.__CreateInstance(_0, skipVTables: true);
            __target.PrepareDC(__result0);
        }

        // void SetDoubleBuffered(bool WXUNUSED(on)) { }
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetDoubleBufferedDelegateInstance;

        private static void _SetDoubleBufferedDelegateHook(global::System.IntPtr __instance, bool _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetDoubleBuffered(_0);
        }

        // bool IsDoubleBuffered() const wxOVERRIDE { return true; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsDoubleBufferedDelegateInstance;

        private static bool _IsDoubleBufferedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsDoubleBuffered();
        }

        // bool DoIsExposed( int x, int y ) const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int _DoIsExposedDelegateInstance;

        private static bool _DoIsExposedDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoIsExposed(x, y);
        }

        // bool DoIsExposed( int x, int y, int w, int h ) const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int_int _DoIsExposed_1DelegateInstance;

        private static bool _DoIsExposed_1DelegateHook(global::System.IntPtr __instance, int x, int y, int w, int h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoIsExposed(x, y, w, h);
        }

        // wxVisualAttributes GetDefaultAttributes() const { return GetClassDefaultAttributes(GetWindowVariant()); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _GetDefaultAttributesDelegateInstance;

        private static void _GetDefaultAttributesDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDefaultAttributes();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.VisualAttributes.__Internal*) @return = *(global::wxSharp.VisualAttributes.__Internal*) __ret.__Instance;
        }

        // bool SetBackgroundColour( const wxColour &colour ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _SetBackgroundColourDelegateInstance;

        private static bool _SetBackgroundColourDelegateHook(global::System.IntPtr __instance, global::System.IntPtr colour)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Color __result0;
            if (colour == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Color.NativeToManagedMap.ContainsKey(colour))
                __result0 = (global::wxSharp.Color) global::wxSharp.Color.NativeToManagedMap[colour];
            else __result0 = (global::wxSharp.Color) global::wxSharp.Color.__CreateInstance(colour, skipVTables: true);
            return __target.SetBackgroundColour(__result0);
        }

        // bool SetForegroundColour( const wxColour &colour ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _SetForegroundColourDelegateInstance;

        private static bool _SetForegroundColourDelegateHook(global::System.IntPtr __instance, global::System.IntPtr colour)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Color __result0;
            if (colour == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Color.NativeToManagedMap.ContainsKey(colour))
                __result0 = (global::wxSharp.Color) global::wxSharp.Color.NativeToManagedMap[colour];
            else __result0 = (global::wxSharp.Color) global::wxSharp.Color.__CreateInstance(colour, skipVTables: true);
            return __target.SetForegroundColour(__result0);
        }

        // bool SetBackgroundStyle(wxBackgroundStyle style) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxBackgroundStyle _SetBackgroundStyleDelegateInstance;

        private static bool _SetBackgroundStyleDelegateHook(global::System.IntPtr __instance, global::wxSharp.BackgroundStyle style)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetBackgroundStyle(style);
        }

        // bool HasTransparentBackground() { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasTransparentBackgroundDelegateInstance;

        private static bool _HasTransparentBackgroundDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasTransparentBackground();
        }

        // int GetCharHeight() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetCharHeightDelegateInstance;

        private static int _GetCharHeightDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetCharHeight();
        }

        // int GetCharWidth() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetCharWidthDelegateInstance;

        private static int _GetCharWidthDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetCharWidth();
        }

        // void UpdateWindowUI(long flags = wxUPDATE_UI_NONE)
        private static global::wxSharp.Delegates.Action_IntPtr_int _UpdateWindowUIDelegateInstance;

        private static void _UpdateWindowUIDelegateHook(global::System.IntPtr __instance, int flags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.UpdateWindowUI(flags);
        }

        // void DoUpdateWindowUI(wxUpdateUIEvent& event)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoUpdateWindowUIDelegateInstance;

        private static void _DoUpdateWindowUIDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.UpdateUIEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.UpdateUIEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.UpdateUIEvent) global::wxSharp.UpdateUIEvent.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.UpdateUIEvent) global::wxSharp.UpdateUIEvent.__CreateInstance(@event, skipVTables: true);
            __target.DoUpdateWindowUI(__result0);
        }

        // bool HasMultiplePages() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasMultiplePagesDelegateInstance;

        private static bool _HasMultiplePagesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasMultiplePages();
        }

        // bool CanScroll(int orient) const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _CanScrollDelegateInstance;

        private static bool _CanScrollDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanScroll(orient);
        }

        // void SetScrollbar( int orient, int pos, int thumbVisible, int range, bool refresh = true ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_bool _SetScrollbarDelegateInstance;

        private static void _SetScrollbarDelegateHook(global::System.IntPtr __instance, int orient, int pos, int thumbVisible, int range, bool refresh)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetScrollbar(orient, pos, thumbVisible, range, refresh);
        }

        // void SetScrollPos( int orient, int pos, bool refresh = true ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_bool _SetScrollPosDelegateInstance;

        private static void _SetScrollPosDelegateHook(global::System.IntPtr __instance, int orient, int pos, bool refresh)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetScrollPos(orient, pos, refresh);
        }

        // int GetScrollPos( int orient ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _GetScrollPosDelegateInstance;

        private static int _GetScrollPosDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetScrollPos(orient);
        }

        // int GetScrollThumb( int orient ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _GetScrollThumbDelegateInstance;

        private static int _GetScrollThumbDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetScrollThumb(orient);
        }

        // int GetScrollRange( int orient ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _GetScrollRangeDelegateInstance;

        private static int _GetScrollRangeDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetScrollRange(orient);
        }

        // void ScrollWindow( int dx, int dy, const wxRect* rect = NULL ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_IntPtr _ScrollWindowDelegateInstance;

        private static void _ScrollWindowDelegateHook(global::System.IntPtr __instance, int dx, int dy, global::System.IntPtr rect)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Rect __result2;
            if (rect == IntPtr.Zero) __result2 = null;
            else if (global::wxSharp.Rect.NativeToManagedMap.ContainsKey(rect))
                __result2 = (global::wxSharp.Rect) global::wxSharp.Rect.NativeToManagedMap[rect];
            else __result2 = global::wxSharp.Rect.__CreateInstance(rect);
            __target.ScrollWindow(dx, dy, __result2);
        }

        // bool ScrollLines(int WXUNUSED(lines)) { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _ScrollLinesDelegateInstance;

        private static bool _ScrollLinesDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ScrollLines(_0);
        }

        // bool ScrollPages(int WXUNUSED(pages)) { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _ScrollPagesDelegateInstance;

        private static bool _ScrollPagesDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ScrollPages(_0);
        }

        // void AlwaysShowScrollbars(bool horz = true, bool vert = true) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool_bool _AlwaysShowScrollbarsDelegateInstance;

        private static void _AlwaysShowScrollbarsDelegateHook(global::System.IntPtr __instance, bool horz, bool vert)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AlwaysShowScrollbars(horz, vert);
        }

        // bool IsScrollbarAlwaysShown(int orient) const wxOVERRIDE { return orient == wxHORIZONTAL ? m_hScrollBarAlwaysShown : m_vScrollBarAlwaysShown; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _IsScrollbarAlwaysShownDelegateInstance;

        private static bool _IsScrollbarAlwaysShownDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsScrollbarAlwaysShown(orient);
        }

        // void SetDropTarget( wxDropTarget *dropTarget ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetDropTargetDelegateInstance;

        private static void _SetDropTargetDelegateHook(global::System.IntPtr __instance, global::System.IntPtr dropTarget)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.DropTarget __result0;
            if (dropTarget == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.DropTarget.NativeToManagedMap.ContainsKey(dropTarget))
                __result0 = (global::wxSharp.DropTarget) global::wxSharp.DropTarget.NativeToManagedMap[dropTarget];
            else __result0 = global::wxSharp.DropTarget.__CreateInstance(dropTarget);
            __target.SetDropTarget(__result0);
        }

        // wxDropTarget *GetDropTarget() const { return m_dropTarget; }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetDropTargetDelegateInstance;

        private static global::System.IntPtr _GetDropTargetDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDropTarget();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DragAcceptFiles(bool accept)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _DragAcceptFilesDelegateInstance;

        private static void _DragAcceptFilesDelegateHook(global::System.IntPtr __instance, bool accept)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DragAcceptFiles(accept);
        }

        // void SetConstraintSizes(bool recurse = true)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetConstraintSizesDelegateInstance;

        private static void _SetConstraintSizesDelegateHook(global::System.IntPtr __instance, bool recurse)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetConstraintSizes(recurse);
        }

        // bool LayoutPhase1(int *noChanges)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_intPtr _LayoutPhase1DelegateInstance;

        private static bool _LayoutPhase1DelegateHook(global::System.IntPtr __instance, int* noChanges)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.LayoutPhase1(ref *noChanges);
        }

        // bool LayoutPhase2(int *noChanges)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_intPtr _LayoutPhase2DelegateInstance;

        private static bool _LayoutPhase2DelegateHook(global::System.IntPtr __instance, int* noChanges)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.LayoutPhase2(ref *noChanges);
        }

        // bool DoPhase(int phase)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _DoPhaseDelegateInstance;

        private static bool _DoPhaseDelegateHook(global::System.IntPtr __instance, int phase)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoPhase(phase);
        }

        // void SetSizeConstraint(int x, int y, int w, int h)
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int _SetSizeConstraintDelegateInstance;

        private static void _SetSizeConstraintDelegateHook(global::System.IntPtr __instance, int x, int y, int w, int h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetSizeConstraint(x, y, w, h);
        }

        // void MoveConstraint(int x, int y)
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _MoveConstraintDelegateInstance;

        private static void _MoveConstraintDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.MoveConstraint(x, y);
        }

        // void GetSizeConstraint(int *w, int *h) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _GetSizeConstraintDelegateInstance;

        private static void _GetSizeConstraintDelegateHook(global::System.IntPtr __instance, int* w, int* h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetSizeConstraint(ref *w, ref *h);
        }

        // void GetClientSizeConstraint(int *w, int *h) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _GetClientSizeConstraintDelegateInstance;

        private static void _GetClientSizeConstraintDelegateHook(global::System.IntPtr __instance, int* w, int* h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetClientSizeConstraint(ref *w, ref *h);
        }

        // void GetPositionConstraint(int *x, int *y) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _GetPositionConstraintDelegateInstance;

        private static void _GetPositionConstraintDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetPositionConstraint(ref *x, ref *y);
        }

        // bool Layout()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _LayoutDelegateInstance;

        private static bool _LayoutDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Layout();
        }

        // bool SetTransparent(wxByte alpha) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_byte _SetTransparentDelegateInstance;

        private static bool _SetTransparentDelegateHook(global::System.IntPtr __instance, byte alpha)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetTransparent(alpha);
        }

        // bool CanSetTransparent() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanSetTransparentDelegateInstance;

        private static bool _CanSetTransparentDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanSetTransparent();
        }

        // void OnInternalIdle()
        private static global::wxSharp.Delegates.Action_IntPtr _OnInternalIdleDelegateInstance;

        private static void _OnInternalIdleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnInternalIdle();
        }

        // bool SendIdleEvents(wxIdleEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _SendIdleEventsDelegateInstance;

        private static bool _SendIdleEventsDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IdleEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.IdleEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.IdleEvent) global::wxSharp.IdleEvent.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.IdleEvent) global::wxSharp.IdleEvent.__CreateInstance(@event, skipVTables: true);
            return __target.SendIdleEvents(__result0);
        }

        // WXWidget GetHandle() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetHandleDelegateInstance;

        private static global::System.IntPtr _GetHandleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetHandle();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void AssociateHandle(WXWidget WXUNUSED(handle)) { }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AssociateHandleDelegateInstance;

        private static void _AssociateHandleDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.NSView __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.NSView.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.NSView) global::wxSharp.NSView.NativeToManagedMap[_0];
            else __result0 = global::wxSharp.NSView.__CreateInstance(_0);
            __target.AssociateHandle(__result0);
        }

        // void DissociateHandle() { }
        private static global::wxSharp.Delegates.Action_IntPtr _DissociateHandleDelegateInstance;

        private static void _DissociateHandleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DissociateHandle();
        }

        // void InheritAttributes()
        private static global::wxSharp.Delegates.Action_IntPtr _InheritAttributesDelegateInstance;

        private static void _InheritAttributesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.InheritAttributes();
        }

        // bool ShouldInheritColours() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _ShouldInheritColoursDelegateInstance;

        private static bool _ShouldInheritColoursDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ShouldInheritColours();
        }

        // bool CanBeOutsideClientArea() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanBeOutsideClientAreaDelegateInstance;

        private static bool _CanBeOutsideClientAreaDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanBeOutsideClientArea();
        }

        // bool CanApplyThemeBorder() const { return true; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanApplyThemeBorderDelegateInstance;

        private static bool _CanApplyThemeBorderDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanApplyThemeBorder();
        }

        // wxWindow *GetMainWindowOfCompositeControl() { return (wxWindow*)this; }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetMainWindowOfCompositeControlDelegateInstance;

        private static global::System.IntPtr _GetMainWindowOfCompositeControlDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMainWindowOfCompositeControl();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsTopNavigationDomain(NavigationKind WXUNUSED(kind)) const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxWindow_NavigationKind _IsTopNavigationDomainDelegateInstance;

        private static bool _IsTopNavigationDomainDelegateHook(global::System.IntPtr __instance, global::wxSharp.Window.NavigationKind _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsTopNavigationDomain(_0);
        }

        // wxTextEntry* WXGetTextEntry() const { return NULL; }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _WXGetTextEntryDelegateInstance;

        private static global::System.IntPtr _WXGetTextEntryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WXGetTextEntry();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DoMoveInTabOrder(wxWindow *win, WindowOrder move)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxWindow_WindowOrder _DoMoveInTabOrderDelegateInstance;

        private static void _DoMoveInTabOrderDelegateHook(global::System.IntPtr __instance, global::System.IntPtr win, global::wxSharp.Window.WindowOrder move)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (win == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(win))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[win];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(win, skipVTables: true);
            __target.DoMoveInTabOrder(__result0, move);
        }

        // bool DoNavigateIn(int flags)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _DoNavigateInDelegateInstance;

        private static bool _DoNavigateInDelegateHook(global::System.IntPtr __instance, int flags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoNavigateIn(flags);
        }

        // void DoEnable( bool enable ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool _DoEnableDelegateInstance;

        private static void _DoEnableDelegateHook(global::System.IntPtr __instance, bool enable)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoEnable(enable);
        }

        // wxBorder GetDefaultBorder() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr _GetDefaultBorderDelegateInstance;

        private static global::wxSharp.Border _GetDefaultBorderDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDefaultBorder();
            return __ret;
        }

        // wxBorder GetDefaultBorderForControl() const { return wxBORDER_THEME; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr _GetDefaultBorderForControlDelegateInstance;

        private static global::wxSharp.Border _GetDefaultBorderForControlDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDefaultBorderForControl();
            return __ret;
        }

        // void DoClientToScreen( int *x, int *y ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoClientToScreenDelegateInstance;

        private static void _DoClientToScreenDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoClientToScreen(ref *x, ref *y);
        }

        // void DoScreenToClient( int *x, int *y ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoScreenToClientDelegateInstance;

        private static void _DoScreenToClientDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoScreenToClient(ref *x, ref *y);
        }

        // wxHitTest DoHitTest(wxCoord x, wxCoord y) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxHitTest_IntPtr_int_int _DoHitTestDelegateInstance;

        private static global::wxSharp.HitTest _DoHitTestDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoHitTest(x, y);
            return __ret;
        }

        // void DoCaptureMouse() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoCaptureMouseDelegateInstance;

        private static void _DoCaptureMouseDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoCaptureMouse();
        }

        // void DoReleaseMouse() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoReleaseMouseDelegateInstance;

        private static void _DoReleaseMouseDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoReleaseMouse();
        }

        // void DoGetPosition( int *x, int *y ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetPositionDelegateInstance;

        private static void _DoGetPositionDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetPosition(ref *x, ref *y);
        }

        // void DoGetScreenPosition(int *x, int *y) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetScreenPositionDelegateInstance;

        private static void _DoGetScreenPositionDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetScreenPosition(ref *x, ref *y);
        }

        // void DoGetSize( int *width, int *height ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetSizeDelegateInstance;

        private static void _DoGetSizeDelegateHook(global::System.IntPtr __instance, int* width, int* height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetSize(ref *width, ref *height);
        }

        // void DoGetClientSize( int *width, int *height ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetClientSizeDelegateInstance;

        private static void _DoGetClientSizeDelegateHook(global::System.IntPtr __instance, int* width, int* height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetClientSize(ref *width, ref *height);
        }

        // wxSize DoGetBestSize() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetBestSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetBestSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetBestSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize DoGetBestClientSize() const { return wxDefaultSize; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetBestClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetBestClientSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetBestClientSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // int DoGetBestClientHeight(int WXUNUSED(width)) const { return wxDefaultCoord; }
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _DoGetBestClientHeightDelegateInstance;

        private static int _DoGetBestClientHeightDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoGetBestClientHeight(_0);
        }

        // int DoGetBestClientWidth(int WXUNUSED(height)) const { return wxDefaultCoord; }
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _DoGetBestClientWidthDelegateInstance;

        private static int _DoGetBestClientWidthDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoGetBestClientWidth(_0);
        }

        // void DoSetSize(int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int _DoSetSizeDelegateInstance;

        private static void _DoSetSizeDelegateHook(global::System.IntPtr __instance, int x, int y, int width, int height, int sizeFlags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetSize(x, y, width, height, sizeFlags);
        }

        // void DoSetClientSize(int width, int height) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetClientSizeDelegateInstance;

        private static void _DoSetClientSizeDelegateHook(global::System.IntPtr __instance, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientSize(width, height);
        }

        // void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int _DoSetSizeHintsDelegateInstance;

        private static void _DoSetSizeHintsDelegateHook(global::System.IntPtr __instance, int minW, int minH, int maxW, int maxH, int incW, int incH)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetSizeHints(minW, minH, maxW, maxH, incW, incH);
        }

        // wxSize DoGetBorderSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetBorderSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetBorderSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetBorderSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void DoMoveWindow( int x, int y, int width, int height ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int _DoMoveWindowDelegateInstance;

        private static void _DoMoveWindowDelegateHook(global::System.IntPtr __instance, int x, int y, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoMoveWindow(x, y, width, height);
        }

        // void DoCentre(int dir)
        private static global::wxSharp.Delegates.Action_IntPtr_int _DoCentreDelegateInstance;

        private static void _DoCentreDelegateHook(global::System.IntPtr __instance, int dir)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoCentre(dir);
        }

        // void DoSetToolTip( wxToolTip *tip ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoSetToolTipDelegateInstance;

        private static void _DoSetToolTipDelegateHook(global::System.IntPtr __instance, global::System.IntPtr tip)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.ToolTip __result0;
            if (tip == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.ToolTip.NativeToManagedMap.ContainsKey(tip))
                __result0 = (global::wxSharp.ToolTip) global::wxSharp.ToolTip.NativeToManagedMap[tip];
            else __result0 = global::wxSharp.ToolTip.__CreateInstance(tip);
            __target.DoSetToolTip(__result0);
        }

        // bool DoPopupMenu( wxMenu *menu, int x, int y ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoPopupMenuDelegateInstance;

        private static bool _DoPopupMenuDelegateHook(global::System.IntPtr __instance, global::System.IntPtr menu, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Menu __result0;
            if (menu == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Menu.NativeToManagedMap.ContainsKey(menu))
                __result0 = (global::wxSharp.Menu) global::wxSharp.Menu.NativeToManagedMap[menu];
            else __result0 = global::wxSharp.Menu.__CreateInstance(menu);
            return __target.DoPopupMenu(__result0, x, y);
        }

        // void AdjustForParentClientOrigin(int& x, int& y, int sizeFlags = 0) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr_int _AdjustForParentClientOriginDelegateInstance;

        private static void _AdjustForParentClientOriginDelegateHook(global::System.IntPtr __instance, int* x, int* y, int sizeFlags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AdjustForParentClientOrigin(ref *x, ref *y, sizeFlags);
        }

        // void DoSetWindowVariant( wxWindowVariant variant ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_wxSharp_wxWindowVariant _DoSetWindowVariantDelegateInstance;

        private static void _DoSetWindowVariantDelegateHook(global::System.IntPtr __instance, global::wxSharp.WindowVariant variant)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetWindowVariant(variant);
        }

        // void DoFreeze() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoFreezeDelegateInstance;

        private static void _DoFreezeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoFreeze();
        }

        // void DoThaw() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoThawDelegateInstance;

        private static void _DoThawDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoThaw();
        }

        // wxByte GetTransparent() const
        private static global::wxSharp.Delegates.Func_byte_IntPtr _GetTransparentDelegateInstance;

        private static byte _GetTransparentDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetTransparent();
        }

        // void TriggerScrollEvent( wxEventType scrollEvent )
        private static global::wxSharp.Delegates.Action_IntPtr_int _TriggerScrollEventDelegateInstance;

        private static void _TriggerScrollEventDelegateHook(global::System.IntPtr __instance, int scrollEvent)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.TriggerScrollEvent(scrollEvent);
        }

        // wxSize DoGetSizeFromClientSize( const wxSize & size ) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr _DoGetSizeFromClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetSizeFromClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.PanelBase) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            var __ret = __target.DoGetSizeFromClientSize(__result0);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[162];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _SetNextHandlerDelegateInstance += _SetNextHandlerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetNextHandlerDelegateInstance).ToPointer();
                _SetPreviousHandlerDelegateInstance += _SetPreviousHandlerDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_SetPreviousHandlerDelegateInstance).ToPointer();
                _ProcessEventDelegateInstance += _ProcessEventDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_ProcessEventDelegateInstance).ToPointer();
                _QueueEventDelegateInstance += _QueueEventDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_QueueEventDelegateInstance).ToPointer();
                _AddPendingEventDelegateInstance += _AddPendingEventDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_AddPendingEventDelegateInstance).ToPointer();
                _TryBeforeDelegateInstance += _TryBeforeDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_TryBeforeDelegateInstance).ToPointer();
                _TryAfterDelegateInstance += _TryAfterDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_TryAfterDelegateInstance).ToPointer();
                _DoSetClientDataDelegateInstance += _DoSetClientDataDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_DoSetClientDataDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
                _DestroyDelegateInstance += _DestroyDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_DestroyDelegateInstance).ToPointer();
                _AdjustForLayoutDirectionDelegateInstance += _AdjustForLayoutDirectionDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_AdjustForLayoutDirectionDelegateInstance).ToPointer();
                _SetIdDelegateInstance += _SetIdDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_SetIdDelegateInstance).ToPointer();
                _RaiseDelegateInstance += _RaiseDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_RaiseDelegateInstance).ToPointer();
                _LowerDelegateInstance += _LowerDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_LowerDelegateInstance).ToPointer();
                _GetClientAreaOriginDelegateInstance += _GetClientAreaOriginDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_GetClientAreaOriginDelegateInstance).ToPointer();
                _ClientToWindowSizeDelegateInstance += _ClientToWindowSizeDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_ClientToWindowSizeDelegateInstance).ToPointer();
                _WindowToClientSizeDelegateInstance += _WindowToClientSizeDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_WindowToClientSizeDelegateInstance).ToPointer();
                _GetEffectiveMinSizeDelegateInstance += _GetEffectiveMinSizeDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_GetEffectiveMinSizeDelegateInstance).ToPointer();
                _FitDelegateInstance += _FitDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_FitDelegateInstance).ToPointer();
                _FitInsideDelegateInstance += _FitInsideDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_FitInsideDelegateInstance).ToPointer();
                _SetSizeHintsDelegateInstance += _SetSizeHintsDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_SetSizeHintsDelegateInstance).ToPointer();
                _SetMinSizeDelegateInstance += _SetMinSizeDelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_SetMinSizeDelegateInstance).ToPointer();
                _SetMaxSizeDelegateInstance += _SetMaxSizeDelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_SetMaxSizeDelegateInstance).ToPointer();
                _SetMinClientSizeDelegateInstance += _SetMinClientSizeDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_SetMinClientSizeDelegateInstance).ToPointer();
                _SetMaxClientSizeDelegateInstance += _SetMaxClientSizeDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_SetMaxClientSizeDelegateInstance).ToPointer();
                _GetMinSizeDelegateInstance += _GetMinSizeDelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_GetMinSizeDelegateInstance).ToPointer();
                _GetMaxSizeDelegateInstance += _GetMaxSizeDelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_GetMaxSizeDelegateInstance).ToPointer();
                _GetMinClientSizeDelegateInstance += _GetMinClientSizeDelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_GetMinClientSizeDelegateInstance).ToPointer();
                _GetMaxClientSizeDelegateInstance += _GetMaxClientSizeDelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_GetMaxClientSizeDelegateInstance).ToPointer();
                _DoSetVirtualSizeDelegateInstance += _DoSetVirtualSizeDelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_DoSetVirtualSizeDelegateInstance).ToPointer();
                _DoGetVirtualSizeDelegateInstance += _DoGetVirtualSizeDelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_DoGetVirtualSizeDelegateInstance).ToPointer();
                _GetBestVirtualSizeDelegateInstance += _GetBestVirtualSizeDelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_GetBestVirtualSizeDelegateInstance).ToPointer();
                _GetContentScaleFactorDelegateInstance += _GetContentScaleFactorDelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_GetContentScaleFactorDelegateInstance).ToPointer();
                _GetWindowBorderSizeDelegateInstance += _GetWindowBorderSizeDelegateHook;
                _Thunks[36] = Marshal.GetFunctionPointerForDelegate(_GetWindowBorderSizeDelegateInstance).ToPointer();
                _InformFirstDirectionDelegateInstance += _InformFirstDirectionDelegateHook;
                _Thunks[37] = Marshal.GetFunctionPointerForDelegate(_InformFirstDirectionDelegateInstance).ToPointer();
                _SendSizeEventDelegateInstance += _SendSizeEventDelegateHook;
                _Thunks[38] = Marshal.GetFunctionPointerForDelegate(_SendSizeEventDelegateInstance).ToPointer();
                _BeginRepositioningChildrenDelegateInstance += _BeginRepositioningChildrenDelegateHook;
                _Thunks[39] = Marshal.GetFunctionPointerForDelegate(_BeginRepositioningChildrenDelegateInstance).ToPointer();
                _EndRepositioningChildrenDelegateInstance += _EndRepositioningChildrenDelegateHook;
                _Thunks[40] = Marshal.GetFunctionPointerForDelegate(_EndRepositioningChildrenDelegateInstance).ToPointer();
                _ShowDelegateInstance += _ShowDelegateHook;
                _Thunks[41] = Marshal.GetFunctionPointerForDelegate(_ShowDelegateInstance).ToPointer();
                _ShowWithEffectDelegateInstance += _ShowWithEffectDelegateHook;
                _Thunks[42] = Marshal.GetFunctionPointerForDelegate(_ShowWithEffectDelegateInstance).ToPointer();
                _HideWithEffectDelegateInstance += _HideWithEffectDelegateHook;
                _Thunks[43] = Marshal.GetFunctionPointerForDelegate(_HideWithEffectDelegateInstance).ToPointer();
                _EnableDelegateInstance += _EnableDelegateHook;
                _Thunks[44] = Marshal.GetFunctionPointerForDelegate(_EnableDelegateInstance).ToPointer();
                _IsShownDelegateInstance += _IsShownDelegateHook;
                _Thunks[45] = Marshal.GetFunctionPointerForDelegate(_IsShownDelegateInstance).ToPointer();
                _IsShownOnScreenDelegateInstance += _IsShownOnScreenDelegateHook;
                _Thunks[46] = Marshal.GetFunctionPointerForDelegate(_IsShownOnScreenDelegateInstance).ToPointer();
                _SetWindowStyleFlagDelegateInstance += _SetWindowStyleFlagDelegateHook;
                _Thunks[47] = Marshal.GetFunctionPointerForDelegate(_SetWindowStyleFlagDelegateInstance).ToPointer();
                _GetWindowStyleFlagDelegateInstance += _GetWindowStyleFlagDelegateHook;
                _Thunks[48] = Marshal.GetFunctionPointerForDelegate(_GetWindowStyleFlagDelegateInstance).ToPointer();
                _IsRetainedDelegateInstance += _IsRetainedDelegateHook;
                _Thunks[49] = Marshal.GetFunctionPointerForDelegate(_IsRetainedDelegateInstance).ToPointer();
                _SetExtraStyleDelegateInstance += _SetExtraStyleDelegateHook;
                _Thunks[50] = Marshal.GetFunctionPointerForDelegate(_SetExtraStyleDelegateInstance).ToPointer();
                _SetThemeEnabledDelegateInstance += _SetThemeEnabledDelegateHook;
                _Thunks[51] = Marshal.GetFunctionPointerForDelegate(_SetThemeEnabledDelegateInstance).ToPointer();
                _GetThemeEnabledDelegateInstance += _GetThemeEnabledDelegateHook;
                _Thunks[52] = Marshal.GetFunctionPointerForDelegate(_GetThemeEnabledDelegateInstance).ToPointer();
                _SetFocusDelegateInstance += _SetFocusDelegateHook;
                _Thunks[53] = Marshal.GetFunctionPointerForDelegate(_SetFocusDelegateInstance).ToPointer();
                _SetFocusFromKbdDelegateInstance += _SetFocusFromKbdDelegateHook;
                _Thunks[54] = Marshal.GetFunctionPointerForDelegate(_SetFocusFromKbdDelegateInstance).ToPointer();
                _HasFocusDelegateInstance += _HasFocusDelegateHook;
                _Thunks[55] = Marshal.GetFunctionPointerForDelegate(_HasFocusDelegateInstance).ToPointer();
                _AcceptsFocusDelegateInstance += _AcceptsFocusDelegateHook;
                _Thunks[56] = Marshal.GetFunctionPointerForDelegate(_AcceptsFocusDelegateInstance).ToPointer();
                _AcceptsFocusRecursivelyDelegateInstance += _AcceptsFocusRecursivelyDelegateHook;
                _Thunks[57] = Marshal.GetFunctionPointerForDelegate(_AcceptsFocusRecursivelyDelegateInstance).ToPointer();
                _AcceptsFocusFromKeyboardDelegateInstance += _AcceptsFocusFromKeyboardDelegateHook;
                _Thunks[58] = Marshal.GetFunctionPointerForDelegate(_AcceptsFocusFromKeyboardDelegateInstance).ToPointer();
                _CanBeFocusedDelegateInstance += _CanBeFocusedDelegateHook;
                _Thunks[59] = Marshal.GetFunctionPointerForDelegate(_CanBeFocusedDelegateInstance).ToPointer();
                _SetCanFocusDelegateInstance += _SetCanFocusDelegateHook;
                _Thunks[60] = Marshal.GetFunctionPointerForDelegate(_SetCanFocusDelegateInstance).ToPointer();
                _IsTopLevelDelegateInstance += _IsTopLevelDelegateHook;
                _Thunks[61] = Marshal.GetFunctionPointerForDelegate(_IsTopLevelDelegateInstance).ToPointer();
                _IsClientAreaChildDelegateInstance += _IsClientAreaChildDelegateHook;
                _Thunks[62] = Marshal.GetFunctionPointerForDelegate(_IsClientAreaChildDelegateInstance).ToPointer();
                _ValidateDelegateInstance += _ValidateDelegateHook;
                _Thunks[63] = Marshal.GetFunctionPointerForDelegate(_ValidateDelegateInstance).ToPointer();
                _TransferDataToWindowDelegateInstance += _TransferDataToWindowDelegateHook;
                _Thunks[64] = Marshal.GetFunctionPointerForDelegate(_TransferDataToWindowDelegateInstance).ToPointer();
                _TransferDataFromWindowDelegateInstance += _TransferDataFromWindowDelegateHook;
                _Thunks[65] = Marshal.GetFunctionPointerForDelegate(_TransferDataFromWindowDelegateInstance).ToPointer();
                _InitDialogDelegateInstance += _InitDialogDelegateHook;
                _Thunks[66] = Marshal.GetFunctionPointerForDelegate(_InitDialogDelegateInstance).ToPointer();
                _RegisterHotKeyDelegateInstance += _RegisterHotKeyDelegateHook;
                _Thunks[67] = Marshal.GetFunctionPointerForDelegate(_RegisterHotKeyDelegateInstance).ToPointer();
                _UnregisterHotKeyDelegateInstance += _UnregisterHotKeyDelegateHook;
                _Thunks[68] = Marshal.GetFunctionPointerForDelegate(_UnregisterHotKeyDelegateInstance).ToPointer();
                _GetDPIDelegateInstance += _GetDPIDelegateHook;
                _Thunks[69] = Marshal.GetFunctionPointerForDelegate(_GetDPIDelegateInstance).ToPointer();
                _WarpPointerDelegateInstance += _WarpPointerDelegateHook;
                _Thunks[70] = Marshal.GetFunctionPointerForDelegate(_WarpPointerDelegateInstance).ToPointer();
                _HasCaptureDelegateInstance += _HasCaptureDelegateHook;
                _Thunks[71] = Marshal.GetFunctionPointerForDelegate(_HasCaptureDelegateInstance).ToPointer();
                _EnableTouchEventsDelegateInstance += _EnableTouchEventsDelegateHook;
                _Thunks[72] = Marshal.GetFunctionPointerForDelegate(_EnableTouchEventsDelegateInstance).ToPointer();
                _RefreshDelegateInstance += _RefreshDelegateHook;
                _Thunks[73] = Marshal.GetFunctionPointerForDelegate(_RefreshDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[74] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
                _ClearBackgroundDelegateInstance += _ClearBackgroundDelegateHook;
                _Thunks[75] = Marshal.GetFunctionPointerForDelegate(_ClearBackgroundDelegateInstance).ToPointer();
                _PrepareDCDelegateInstance += _PrepareDCDelegateHook;
                _Thunks[76] = Marshal.GetFunctionPointerForDelegate(_PrepareDCDelegateInstance).ToPointer();
                _SetDoubleBufferedDelegateInstance += _SetDoubleBufferedDelegateHook;
                _Thunks[77] = Marshal.GetFunctionPointerForDelegate(_SetDoubleBufferedDelegateInstance).ToPointer();
                _IsDoubleBufferedDelegateInstance += _IsDoubleBufferedDelegateHook;
                _Thunks[78] = Marshal.GetFunctionPointerForDelegate(_IsDoubleBufferedDelegateInstance).ToPointer();
                _DoIsExposedDelegateInstance += _DoIsExposedDelegateHook;
                _Thunks[79] = Marshal.GetFunctionPointerForDelegate(_DoIsExposedDelegateInstance).ToPointer();
                _DoIsExposed_1DelegateInstance += _DoIsExposed_1DelegateHook;
                _Thunks[80] = Marshal.GetFunctionPointerForDelegate(_DoIsExposed_1DelegateInstance).ToPointer();
                _GetDefaultAttributesDelegateInstance += _GetDefaultAttributesDelegateHook;
                _Thunks[81] = Marshal.GetFunctionPointerForDelegate(_GetDefaultAttributesDelegateInstance).ToPointer();
                _SetBackgroundColourDelegateInstance += _SetBackgroundColourDelegateHook;
                _Thunks[82] = Marshal.GetFunctionPointerForDelegate(_SetBackgroundColourDelegateInstance).ToPointer();
                _SetForegroundColourDelegateInstance += _SetForegroundColourDelegateHook;
                _Thunks[83] = Marshal.GetFunctionPointerForDelegate(_SetForegroundColourDelegateInstance).ToPointer();
                _SetBackgroundStyleDelegateInstance += _SetBackgroundStyleDelegateHook;
                _Thunks[84] = Marshal.GetFunctionPointerForDelegate(_SetBackgroundStyleDelegateInstance).ToPointer();
                _HasTransparentBackgroundDelegateInstance += _HasTransparentBackgroundDelegateHook;
                _Thunks[85] = Marshal.GetFunctionPointerForDelegate(_HasTransparentBackgroundDelegateInstance).ToPointer();
                _GetCharHeightDelegateInstance += _GetCharHeightDelegateHook;
                _Thunks[86] = Marshal.GetFunctionPointerForDelegate(_GetCharHeightDelegateInstance).ToPointer();
                _GetCharWidthDelegateInstance += _GetCharWidthDelegateHook;
                _Thunks[87] = Marshal.GetFunctionPointerForDelegate(_GetCharWidthDelegateInstance).ToPointer();
                _UpdateWindowUIDelegateInstance += _UpdateWindowUIDelegateHook;
                _Thunks[88] = Marshal.GetFunctionPointerForDelegate(_UpdateWindowUIDelegateInstance).ToPointer();
                _DoUpdateWindowUIDelegateInstance += _DoUpdateWindowUIDelegateHook;
                _Thunks[89] = Marshal.GetFunctionPointerForDelegate(_DoUpdateWindowUIDelegateInstance).ToPointer();
                _HasMultiplePagesDelegateInstance += _HasMultiplePagesDelegateHook;
                _Thunks[90] = Marshal.GetFunctionPointerForDelegate(_HasMultiplePagesDelegateInstance).ToPointer();
                _CanScrollDelegateInstance += _CanScrollDelegateHook;
                _Thunks[91] = Marshal.GetFunctionPointerForDelegate(_CanScrollDelegateInstance).ToPointer();
                _SetScrollbarDelegateInstance += _SetScrollbarDelegateHook;
                _Thunks[92] = Marshal.GetFunctionPointerForDelegate(_SetScrollbarDelegateInstance).ToPointer();
                _SetScrollPosDelegateInstance += _SetScrollPosDelegateHook;
                _Thunks[93] = Marshal.GetFunctionPointerForDelegate(_SetScrollPosDelegateInstance).ToPointer();
                _GetScrollPosDelegateInstance += _GetScrollPosDelegateHook;
                _Thunks[94] = Marshal.GetFunctionPointerForDelegate(_GetScrollPosDelegateInstance).ToPointer();
                _GetScrollThumbDelegateInstance += _GetScrollThumbDelegateHook;
                _Thunks[95] = Marshal.GetFunctionPointerForDelegate(_GetScrollThumbDelegateInstance).ToPointer();
                _GetScrollRangeDelegateInstance += _GetScrollRangeDelegateHook;
                _Thunks[96] = Marshal.GetFunctionPointerForDelegate(_GetScrollRangeDelegateInstance).ToPointer();
                _ScrollWindowDelegateInstance += _ScrollWindowDelegateHook;
                _Thunks[97] = Marshal.GetFunctionPointerForDelegate(_ScrollWindowDelegateInstance).ToPointer();
                _ScrollLinesDelegateInstance += _ScrollLinesDelegateHook;
                _Thunks[98] = Marshal.GetFunctionPointerForDelegate(_ScrollLinesDelegateInstance).ToPointer();
                _ScrollPagesDelegateInstance += _ScrollPagesDelegateHook;
                _Thunks[99] = Marshal.GetFunctionPointerForDelegate(_ScrollPagesDelegateInstance).ToPointer();
                _AlwaysShowScrollbarsDelegateInstance += _AlwaysShowScrollbarsDelegateHook;
                _Thunks[100] = Marshal.GetFunctionPointerForDelegate(_AlwaysShowScrollbarsDelegateInstance).ToPointer();
                _IsScrollbarAlwaysShownDelegateInstance += _IsScrollbarAlwaysShownDelegateHook;
                _Thunks[101] = Marshal.GetFunctionPointerForDelegate(_IsScrollbarAlwaysShownDelegateInstance).ToPointer();
                _SetDropTargetDelegateInstance += _SetDropTargetDelegateHook;
                _Thunks[102] = Marshal.GetFunctionPointerForDelegate(_SetDropTargetDelegateInstance).ToPointer();
                _GetDropTargetDelegateInstance += _GetDropTargetDelegateHook;
                _Thunks[103] = Marshal.GetFunctionPointerForDelegate(_GetDropTargetDelegateInstance).ToPointer();
                _DragAcceptFilesDelegateInstance += _DragAcceptFilesDelegateHook;
                _Thunks[104] = Marshal.GetFunctionPointerForDelegate(_DragAcceptFilesDelegateInstance).ToPointer();
                _SetConstraintSizesDelegateInstance += _SetConstraintSizesDelegateHook;
                _Thunks[105] = Marshal.GetFunctionPointerForDelegate(_SetConstraintSizesDelegateInstance).ToPointer();
                _LayoutPhase1DelegateInstance += _LayoutPhase1DelegateHook;
                _Thunks[106] = Marshal.GetFunctionPointerForDelegate(_LayoutPhase1DelegateInstance).ToPointer();
                _LayoutPhase2DelegateInstance += _LayoutPhase2DelegateHook;
                _Thunks[107] = Marshal.GetFunctionPointerForDelegate(_LayoutPhase2DelegateInstance).ToPointer();
                _DoPhaseDelegateInstance += _DoPhaseDelegateHook;
                _Thunks[108] = Marshal.GetFunctionPointerForDelegate(_DoPhaseDelegateInstance).ToPointer();
                _SetSizeConstraintDelegateInstance += _SetSizeConstraintDelegateHook;
                _Thunks[109] = Marshal.GetFunctionPointerForDelegate(_SetSizeConstraintDelegateInstance).ToPointer();
                _MoveConstraintDelegateInstance += _MoveConstraintDelegateHook;
                _Thunks[110] = Marshal.GetFunctionPointerForDelegate(_MoveConstraintDelegateInstance).ToPointer();
                _GetSizeConstraintDelegateInstance += _GetSizeConstraintDelegateHook;
                _Thunks[111] = Marshal.GetFunctionPointerForDelegate(_GetSizeConstraintDelegateInstance).ToPointer();
                _GetClientSizeConstraintDelegateInstance += _GetClientSizeConstraintDelegateHook;
                _Thunks[112] = Marshal.GetFunctionPointerForDelegate(_GetClientSizeConstraintDelegateInstance).ToPointer();
                _GetPositionConstraintDelegateInstance += _GetPositionConstraintDelegateHook;
                _Thunks[113] = Marshal.GetFunctionPointerForDelegate(_GetPositionConstraintDelegateInstance).ToPointer();
                _LayoutDelegateInstance += _LayoutDelegateHook;
                _Thunks[114] = Marshal.GetFunctionPointerForDelegate(_LayoutDelegateInstance).ToPointer();
                _SetTransparentDelegateInstance += _SetTransparentDelegateHook;
                _Thunks[115] = Marshal.GetFunctionPointerForDelegate(_SetTransparentDelegateInstance).ToPointer();
                _CanSetTransparentDelegateInstance += _CanSetTransparentDelegateHook;
                _Thunks[116] = Marshal.GetFunctionPointerForDelegate(_CanSetTransparentDelegateInstance).ToPointer();
                _OnInternalIdleDelegateInstance += _OnInternalIdleDelegateHook;
                _Thunks[117] = Marshal.GetFunctionPointerForDelegate(_OnInternalIdleDelegateInstance).ToPointer();
                _SendIdleEventsDelegateInstance += _SendIdleEventsDelegateHook;
                _Thunks[118] = Marshal.GetFunctionPointerForDelegate(_SendIdleEventsDelegateInstance).ToPointer();
                _GetHandleDelegateInstance += _GetHandleDelegateHook;
                _Thunks[119] = Marshal.GetFunctionPointerForDelegate(_GetHandleDelegateInstance).ToPointer();
                _AssociateHandleDelegateInstance += _AssociateHandleDelegateHook;
                _Thunks[120] = Marshal.GetFunctionPointerForDelegate(_AssociateHandleDelegateInstance).ToPointer();
                _DissociateHandleDelegateInstance += _DissociateHandleDelegateHook;
                _Thunks[121] = Marshal.GetFunctionPointerForDelegate(_DissociateHandleDelegateInstance).ToPointer();
                _InheritAttributesDelegateInstance += _InheritAttributesDelegateHook;
                _Thunks[122] = Marshal.GetFunctionPointerForDelegate(_InheritAttributesDelegateInstance).ToPointer();
                _ShouldInheritColoursDelegateInstance += _ShouldInheritColoursDelegateHook;
                _Thunks[123] = Marshal.GetFunctionPointerForDelegate(_ShouldInheritColoursDelegateInstance).ToPointer();
                _CanBeOutsideClientAreaDelegateInstance += _CanBeOutsideClientAreaDelegateHook;
                _Thunks[124] = Marshal.GetFunctionPointerForDelegate(_CanBeOutsideClientAreaDelegateInstance).ToPointer();
                _CanApplyThemeBorderDelegateInstance += _CanApplyThemeBorderDelegateHook;
                _Thunks[125] = Marshal.GetFunctionPointerForDelegate(_CanApplyThemeBorderDelegateInstance).ToPointer();
                _GetMainWindowOfCompositeControlDelegateInstance += _GetMainWindowOfCompositeControlDelegateHook;
                _Thunks[126] = Marshal.GetFunctionPointerForDelegate(_GetMainWindowOfCompositeControlDelegateInstance).ToPointer();
                _IsTopNavigationDomainDelegateInstance += _IsTopNavigationDomainDelegateHook;
                _Thunks[127] = Marshal.GetFunctionPointerForDelegate(_IsTopNavigationDomainDelegateInstance).ToPointer();
                _WXGetTextEntryDelegateInstance += _WXGetTextEntryDelegateHook;
                _Thunks[128] = Marshal.GetFunctionPointerForDelegate(_WXGetTextEntryDelegateInstance).ToPointer();
                _DoMoveInTabOrderDelegateInstance += _DoMoveInTabOrderDelegateHook;
                _Thunks[129] = Marshal.GetFunctionPointerForDelegate(_DoMoveInTabOrderDelegateInstance).ToPointer();
                _DoNavigateInDelegateInstance += _DoNavigateInDelegateHook;
                _Thunks[130] = Marshal.GetFunctionPointerForDelegate(_DoNavigateInDelegateInstance).ToPointer();
                _DoEnableDelegateInstance += _DoEnableDelegateHook;
                _Thunks[131] = Marshal.GetFunctionPointerForDelegate(_DoEnableDelegateInstance).ToPointer();
                _GetDefaultBorderDelegateInstance += _GetDefaultBorderDelegateHook;
                _Thunks[132] = Marshal.GetFunctionPointerForDelegate(_GetDefaultBorderDelegateInstance).ToPointer();
                _GetDefaultBorderForControlDelegateInstance += _GetDefaultBorderForControlDelegateHook;
                _Thunks[133] = Marshal.GetFunctionPointerForDelegate(_GetDefaultBorderForControlDelegateInstance).ToPointer();
                _DoClientToScreenDelegateInstance += _DoClientToScreenDelegateHook;
                _Thunks[134] = Marshal.GetFunctionPointerForDelegate(_DoClientToScreenDelegateInstance).ToPointer();
                _DoScreenToClientDelegateInstance += _DoScreenToClientDelegateHook;
                _Thunks[135] = Marshal.GetFunctionPointerForDelegate(_DoScreenToClientDelegateInstance).ToPointer();
                _DoHitTestDelegateInstance += _DoHitTestDelegateHook;
                _Thunks[136] = Marshal.GetFunctionPointerForDelegate(_DoHitTestDelegateInstance).ToPointer();
                _DoCaptureMouseDelegateInstance += _DoCaptureMouseDelegateHook;
                _Thunks[137] = Marshal.GetFunctionPointerForDelegate(_DoCaptureMouseDelegateInstance).ToPointer();
                _DoReleaseMouseDelegateInstance += _DoReleaseMouseDelegateHook;
                _Thunks[138] = Marshal.GetFunctionPointerForDelegate(_DoReleaseMouseDelegateInstance).ToPointer();
                _DoGetPositionDelegateInstance += _DoGetPositionDelegateHook;
                _Thunks[139] = Marshal.GetFunctionPointerForDelegate(_DoGetPositionDelegateInstance).ToPointer();
                _DoGetScreenPositionDelegateInstance += _DoGetScreenPositionDelegateHook;
                _Thunks[140] = Marshal.GetFunctionPointerForDelegate(_DoGetScreenPositionDelegateInstance).ToPointer();
                _DoGetSizeDelegateInstance += _DoGetSizeDelegateHook;
                _Thunks[141] = Marshal.GetFunctionPointerForDelegate(_DoGetSizeDelegateInstance).ToPointer();
                _DoGetClientSizeDelegateInstance += _DoGetClientSizeDelegateHook;
                _Thunks[142] = Marshal.GetFunctionPointerForDelegate(_DoGetClientSizeDelegateInstance).ToPointer();
                _DoGetBestSizeDelegateInstance += _DoGetBestSizeDelegateHook;
                _Thunks[143] = Marshal.GetFunctionPointerForDelegate(_DoGetBestSizeDelegateInstance).ToPointer();
                _DoGetBestClientSizeDelegateInstance += _DoGetBestClientSizeDelegateHook;
                _Thunks[144] = Marshal.GetFunctionPointerForDelegate(_DoGetBestClientSizeDelegateInstance).ToPointer();
                _DoGetBestClientHeightDelegateInstance += _DoGetBestClientHeightDelegateHook;
                _Thunks[145] = Marshal.GetFunctionPointerForDelegate(_DoGetBestClientHeightDelegateInstance).ToPointer();
                _DoGetBestClientWidthDelegateInstance += _DoGetBestClientWidthDelegateHook;
                _Thunks[146] = Marshal.GetFunctionPointerForDelegate(_DoGetBestClientWidthDelegateInstance).ToPointer();
                _DoSetSizeDelegateInstance += _DoSetSizeDelegateHook;
                _Thunks[147] = Marshal.GetFunctionPointerForDelegate(_DoSetSizeDelegateInstance).ToPointer();
                _DoSetClientSizeDelegateInstance += _DoSetClientSizeDelegateHook;
                _Thunks[148] = Marshal.GetFunctionPointerForDelegate(_DoSetClientSizeDelegateInstance).ToPointer();
                _DoSetSizeHintsDelegateInstance += _DoSetSizeHintsDelegateHook;
                _Thunks[149] = Marshal.GetFunctionPointerForDelegate(_DoSetSizeHintsDelegateInstance).ToPointer();
                _DoGetBorderSizeDelegateInstance += _DoGetBorderSizeDelegateHook;
                _Thunks[150] = Marshal.GetFunctionPointerForDelegate(_DoGetBorderSizeDelegateInstance).ToPointer();
                _DoMoveWindowDelegateInstance += _DoMoveWindowDelegateHook;
                _Thunks[151] = Marshal.GetFunctionPointerForDelegate(_DoMoveWindowDelegateInstance).ToPointer();
                _DoCentreDelegateInstance += _DoCentreDelegateHook;
                _Thunks[152] = Marshal.GetFunctionPointerForDelegate(_DoCentreDelegateInstance).ToPointer();
                _DoSetToolTipDelegateInstance += _DoSetToolTipDelegateHook;
                _Thunks[153] = Marshal.GetFunctionPointerForDelegate(_DoSetToolTipDelegateInstance).ToPointer();
                _DoPopupMenuDelegateInstance += _DoPopupMenuDelegateHook;
                _Thunks[154] = Marshal.GetFunctionPointerForDelegate(_DoPopupMenuDelegateInstance).ToPointer();
                _AdjustForParentClientOriginDelegateInstance += _AdjustForParentClientOriginDelegateHook;
                _Thunks[155] = Marshal.GetFunctionPointerForDelegate(_AdjustForParentClientOriginDelegateInstance).ToPointer();
                _DoSetWindowVariantDelegateInstance += _DoSetWindowVariantDelegateHook;
                _Thunks[156] = Marshal.GetFunctionPointerForDelegate(_DoSetWindowVariantDelegateInstance).ToPointer();
                _DoFreezeDelegateInstance += _DoFreezeDelegateHook;
                _Thunks[157] = Marshal.GetFunctionPointerForDelegate(_DoFreezeDelegateInstance).ToPointer();
                _DoThawDelegateInstance += _DoThawDelegateHook;
                _Thunks[158] = Marshal.GetFunctionPointerForDelegate(_DoThawDelegateInstance).ToPointer();
                _GetTransparentDelegateInstance += _GetTransparentDelegateHook;
                _Thunks[159] = Marshal.GetFunctionPointerForDelegate(_GetTransparentDelegateInstance).ToPointer();
                _TriggerScrollEventDelegateInstance += _TriggerScrollEventDelegateHook;
                _Thunks[160] = Marshal.GetFunctionPointerForDelegate(_TriggerScrollEventDelegateInstance).ToPointer();
                _DoGetSizeFromClientSizeDelegateInstance += _DoGetSizeFromClientSizeDelegateHook;
                _Thunks[161] = Marshal.GetFunctionPointerForDelegate(_DoGetSizeFromClientSizeDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(215 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 128);
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                    *(void**) (vfptr0 + 148) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 148);
                    *(void**) (vfptr0 + 152) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 152);
                    *(void**) (vfptr0 + 156) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 156);
                    *(void**) (vfptr0 + 160) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 160);
                    *(void**) (vfptr0 + 164) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 164);
                    *(void**) (vfptr0 + 168) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 168);
                    *(void**) (vfptr0 + 172) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 172);
                    *(void**) (vfptr0 + 176) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 176);
                    *(void**) (vfptr0 + 180) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 180);
                    *(void**) (vfptr0 + 184) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 184);
                    *(void**) (vfptr0 + 188) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 188);
                    *(void**) (vfptr0 + 192) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 192);
                    *(void**) (vfptr0 + 196) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 196);
                    *(void**) (vfptr0 + 200) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 200);
                    *(void**) (vfptr0 + 204) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 204);
                    *(void**) (vfptr0 + 208) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 208);
                    *(void**) (vfptr0 + 212) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 212);
                    *(void**) (vfptr0 + 216) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 216);
                    *(void**) (vfptr0 + 220) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 220);
                    *(void**) (vfptr0 + 224) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 224);
                    *(void**) (vfptr0 + 228) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 228);
                    *(void**) (vfptr0 + 232) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 232);
                    *(void**) (vfptr0 + 236) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 236);
                    *(void**) (vfptr0 + 240) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 240);
                    *(void**) (vfptr0 + 244) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 244);
                    *(void**) (vfptr0 + 248) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 248);
                    *(void**) (vfptr0 + 252) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 252);
                    *(void**) (vfptr0 + 256) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 256);
                    *(void**) (vfptr0 + 260) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 260);
                    *(void**) (vfptr0 + 264) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 264);
                    *(void**) (vfptr0 + 268) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 268);
                    *(void**) (vfptr0 + 272) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 272);
                    *(void**) (vfptr0 + 276) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 276);
                    *(void**) (vfptr0 + 280) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 280);
                    *(void**) (vfptr0 + 284) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 284);
                    *(void**) (vfptr0 + 288) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 288);
                    *(void**) (vfptr0 + 292) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 292);
                    *(void**) (vfptr0 + 296) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 296);
                    *(void**) (vfptr0 + 300) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 300);
                    *(void**) (vfptr0 + 304) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 304);
                    *(void**) (vfptr0 + 308) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 308);
                    *(void**) (vfptr0 + 312) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 312);
                    *(void**) (vfptr0 + 316) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 316);
                    *(void**) (vfptr0 + 320) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 320);
                    *(void**) (vfptr0 + 324) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 324);
                    *(void**) (vfptr0 + 328) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 328);
                    *(void**) (vfptr0 + 332) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 332);
                    *(void**) (vfptr0 + 336) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 336);
                    *(void**) (vfptr0 + 340) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 340);
                    *(void**) (vfptr0 + 344) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 344);
                    *(void**) (vfptr0 + 348) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 348);
                    *(void**) (vfptr0 + 352) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 352);
                    *(void**) (vfptr0 + 356) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 356);
                    *(void**) (vfptr0 + 360) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 360);
                    *(void**) (vfptr0 + 364) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 364);
                    *(void**) (vfptr0 + 368) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 368);
                    *(void**) (vfptr0 + 372) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 372);
                    *(void**) (vfptr0 + 376) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 376);
                    *(void**) (vfptr0 + 380) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 380);
                    *(void**) (vfptr0 + 384) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 384);
                    *(void**) (vfptr0 + 388) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 388);
                    *(void**) (vfptr0 + 392) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 392);
                    *(void**) (vfptr0 + 396) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 396);
                    *(void**) (vfptr0 + 400) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 400);
                    *(void**) (vfptr0 + 404) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 404);
                    *(void**) (vfptr0 + 408) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 408);
                    *(void**) (vfptr0 + 412) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 412);
                    *(void**) (vfptr0 + 416) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 416);
                    *(void**) (vfptr0 + 420) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 420);
                    *(void**) (vfptr0 + 424) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 424);
                    *(void**) (vfptr0 + 428) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 428);
                    *(void**) (vfptr0 + 432) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 432);
                    *(void**) (vfptr0 + 436) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 436);
                    *(void**) (vfptr0 + 440) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 440);
                    *(void**) (vfptr0 + 444) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 444);
                    *(void**) (vfptr0 + 448) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 448);
                    *(void**) (vfptr0 + 452) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 452);
                    *(void**) (vfptr0 + 456) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 456);
                    *(void**) (vfptr0 + 460) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 460);
                    *(void**) (vfptr0 + 464) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 464);
                    *(void**) (vfptr0 + 468) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 468);
                    *(void**) (vfptr0 + 472) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 472);
                    *(void**) (vfptr0 + 476) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 476);
                    *(void**) (vfptr0 + 480) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 480);
                    *(void**) (vfptr0 + 484) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 484);
                    *(void**) (vfptr0 + 488) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 488);
                    *(void**) (vfptr0 + 492) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 492);
                    *(void**) (vfptr0 + 496) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 496);
                    *(void**) (vfptr0 + 500) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 500);
                    *(void**) (vfptr0 + 504) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 504);
                    *(void**) (vfptr0 + 508) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 508);
                    *(void**) (vfptr0 + 512) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 512);
                    *(void**) (vfptr0 + 516) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 516);
                    *(void**) (vfptr0 + 520) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 520);
                    *(void**) (vfptr0 + 524) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 524);
                    *(void**) (vfptr0 + 528) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 528);
                    *(void**) (vfptr0 + 532) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 532);
                    *(void**) (vfptr0 + 536) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 536);
                    *(void**) (vfptr0 + 540) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 540);
                    *(void**) (vfptr0 + 544) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 544);
                    *(void**) (vfptr0 + 548) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 548);
                    *(void**) (vfptr0 + 552) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 552);
                    *(void**) (vfptr0 + 556) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 556);
                    *(void**) (vfptr0 + 560) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 560);
                    *(void**) (vfptr0 + 564) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 564);
                    *(void**) (vfptr0 + 568) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 568);
                    *(void**) (vfptr0 + 572) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 572);
                    *(void**) (vfptr0 + 576) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 576);
                    *(void**) (vfptr0 + 580) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 580);
                    *(void**) (vfptr0 + 584) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 584);
                    *(void**) (vfptr0 + 588) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 588);
                    *(void**) (vfptr0 + 592) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 592);
                    *(void**) (vfptr0 + 596) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 596);
                    *(void**) (vfptr0 + 600) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 600);
                    *(void**) (vfptr0 + 604) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 604);
                    *(void**) (vfptr0 + 608) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 608);
                    *(void**) (vfptr0 + 612) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 612);
                    *(void**) (vfptr0 + 616) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 616);
                    *(void**) (vfptr0 + 620) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 620);
                    *(void**) (vfptr0 + 624) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 624);
                    *(void**) (vfptr0 + 628) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 628);
                    *(void**) (vfptr0 + 632) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 632);
                    *(void**) (vfptr0 + 636) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 636);
                    *(void**) (vfptr0 + 640) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 640);
                    *(void**) (vfptr0 + 644) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 644);
                    *(void**) (vfptr0 + 648) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 648);
                    *(void**) (vfptr0 + 652) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 652);
                    *(void**) (vfptr0 + 656) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 656);
                    *(void**) (vfptr0 + 660) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 660);
                    *(void**) (vfptr0 + 664) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 664);
                    *(void**) (vfptr0 + 668) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 668);
                    *(void**) (vfptr0 + 672) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 672);
                    *(void**) (vfptr0 + 676) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 676);
                    *(void**) (vfptr0 + 680) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 680);
                    *(void**) (vfptr0 + 684) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 684);
                    *(void**) (vfptr0 + 688) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 688);
                    *(void**) (vfptr0 + 692) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 692);
                    *(void**) (vfptr0 + 696) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 696);
                    *(void**) (vfptr0 + 700) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 700);
                    *(void**) (vfptr0 + 704) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 704);
                    *(void**) (vfptr0 + 708) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 708);
                    *(void**) (vfptr0 + 712) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 712);
                    *(void**) (vfptr0 + 716) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 716);
                    *(void**) (vfptr0 + 720) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 720);
                    *(void**) (vfptr0 + 724) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 724);
                    *(void**) (vfptr0 + 728) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 728);
                    *(void**) (vfptr0 + 732) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 732);
                    *(void**) (vfptr0 + 736) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 736);
                    *(void**) (vfptr0 + 740) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 740);
                    *(void**) (vfptr0 + 744) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 744);
                    *(void**) (vfptr0 + 748) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 748);
                    *(void**) (vfptr0 + 752) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 752);
                    *(void**) (vfptr0 + 756) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 756);
                    *(void**) (vfptr0 + 760) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 760);
                    *(void**) (vfptr0 + 764) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 764);
                    *(void**) (vfptr0 + 768) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 768);
                    *(void**) (vfptr0 + 772) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 772);
                    *(void**) (vfptr0 + 776) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 776);
                    *(void**) (vfptr0 + 780) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 780);
                    *(void**) (vfptr0 + 784) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 784);
                    *(void**) (vfptr0 + 788) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 788);
                    *(void**) (vfptr0 + 792) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 792);
                    *(void**) (vfptr0 + 796) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 796);
                    *(void**) (vfptr0 + 800) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 800);
                    *(void**) (vfptr0 + 804) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 804);
                    *(void**) (vfptr0 + 808) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 808);
                    *(void**) (vfptr0 + 812) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 812);
                    *(void**) (vfptr0 + 816) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 816);
                    *(void**) (vfptr0 + 820) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 820);
                    *(void**) (vfptr0 + 824) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 824);
                    *(void**) (vfptr0 + 828) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 828);
                    *(void**) (vfptr0 + 832) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 832);
                    *(void**) (vfptr0 + 836) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 836);
                    *(void**) (vfptr0 + 840) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 840);
                    *(void**) (vfptr0 + 844) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 844);
                    *(void**) (vfptr0 + 848) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 848);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(215 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = _Thunks[8];
                    *(void**) (vfptr0 + 48) = _Thunks[9];
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = _Thunks[10];
                    *(void**) (vfptr0 + 76) = _Thunks[11];
                    *(void**) (vfptr0 + 80) = _Thunks[12];
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = _Thunks[13];
                    *(void**) (vfptr0 + 112) = _Thunks[14];
                    *(void**) (vfptr0 + 116) = _Thunks[15];
                    *(void**) (vfptr0 + 120) = _Thunks[16];
                    *(void**) (vfptr0 + 124) = _Thunks[17];
                    *(void**) (vfptr0 + 128) = _Thunks[18];
                    *(void**) (vfptr0 + 132) = _Thunks[19];
                    *(void**) (vfptr0 + 136) = _Thunks[20];
                    *(void**) (vfptr0 + 140) = _Thunks[21];
                    *(void**) (vfptr0 + 144) = _Thunks[22];
                    *(void**) (vfptr0 + 148) = _Thunks[23];
                    *(void**) (vfptr0 + 152) = _Thunks[24];
                    *(void**) (vfptr0 + 156) = _Thunks[25];
                    *(void**) (vfptr0 + 160) = _Thunks[26];
                    *(void**) (vfptr0 + 164) = _Thunks[27];
                    *(void**) (vfptr0 + 168) = _Thunks[28];
                    *(void**) (vfptr0 + 172) = _Thunks[29];
                    *(void**) (vfptr0 + 176) = _Thunks[30];
                    *(void**) (vfptr0 + 180) = _Thunks[31];
                    *(void**) (vfptr0 + 184) = _Thunks[32];
                    *(void**) (vfptr0 + 188) = _Thunks[33];
                    *(void**) (vfptr0 + 192) = _Thunks[34];
                    *(void**) (vfptr0 + 196) = _Thunks[35];
                    *(void**) (vfptr0 + 200) = _Thunks[36];
                    *(void**) (vfptr0 + 204) = _Thunks[37];
                    *(void**) (vfptr0 + 208) = _Thunks[38];
                    *(void**) (vfptr0 + 212) = _Thunks[39];
                    *(void**) (vfptr0 + 216) = _Thunks[40];
                    *(void**) (vfptr0 + 220) = _Thunks[41];
                    *(void**) (vfptr0 + 224) = _Thunks[42];
                    *(void**) (vfptr0 + 228) = _Thunks[43];
                    *(void**) (vfptr0 + 232) = _Thunks[44];
                    *(void**) (vfptr0 + 236) = _Thunks[45];
                    *(void**) (vfptr0 + 240) = _Thunks[46];
                    *(void**) (vfptr0 + 244) = _Thunks[47];
                    *(void**) (vfptr0 + 248) = _Thunks[48];
                    *(void**) (vfptr0 + 252) = _Thunks[49];
                    *(void**) (vfptr0 + 256) = _Thunks[50];
                    *(void**) (vfptr0 + 260) = _Thunks[51];
                    *(void**) (vfptr0 + 264) = _Thunks[52];
                    *(void**) (vfptr0 + 268) = _Thunks[53];
                    *(void**) (vfptr0 + 272) = _Thunks[54];
                    *(void**) (vfptr0 + 276) = _Thunks[55];
                    *(void**) (vfptr0 + 280) = _Thunks[56];
                    *(void**) (vfptr0 + 284) = _Thunks[57];
                    *(void**) (vfptr0 + 288) = _Thunks[58];
                    *(void**) (vfptr0 + 292) = _Thunks[59];
                    *(void**) (vfptr0 + 296) = _Thunks[60];
                    *(void**) (vfptr0 + 300) = _Thunks[61];
                    *(void**) (vfptr0 + 304) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 304);
                    *(void**) (vfptr0 + 308) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 308);
                    *(void**) (vfptr0 + 312) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 312);
                    *(void**) (vfptr0 + 316) = _Thunks[62];
                    *(void**) (vfptr0 + 320) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 320);
                    *(void**) (vfptr0 + 324) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 324);
                    *(void**) (vfptr0 + 328) = _Thunks[63];
                    *(void**) (vfptr0 + 332) = _Thunks[64];
                    *(void**) (vfptr0 + 336) = _Thunks[65];
                    *(void**) (vfptr0 + 340) = _Thunks[66];
                    *(void**) (vfptr0 + 344) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 344);
                    *(void**) (vfptr0 + 348) = _Thunks[67];
                    *(void**) (vfptr0 + 352) = _Thunks[68];
                    *(void**) (vfptr0 + 356) = _Thunks[69];
                    *(void**) (vfptr0 + 360) = _Thunks[70];
                    *(void**) (vfptr0 + 364) = _Thunks[71];
                    *(void**) (vfptr0 + 368) = _Thunks[72];
                    *(void**) (vfptr0 + 372) = _Thunks[73];
                    *(void**) (vfptr0 + 376) = _Thunks[74];
                    *(void**) (vfptr0 + 380) = _Thunks[75];
                    *(void**) (vfptr0 + 384) = _Thunks[76];
                    *(void**) (vfptr0 + 388) = _Thunks[77];
                    *(void**) (vfptr0 + 392) = _Thunks[78];
                    *(void**) (vfptr0 + 396) = _Thunks[79];
                    *(void**) (vfptr0 + 400) = _Thunks[80];
                    *(void**) (vfptr0 + 404) = _Thunks[81];
                    *(void**) (vfptr0 + 408) = _Thunks[82];
                    *(void**) (vfptr0 + 412) = _Thunks[83];
                    *(void**) (vfptr0 + 416) = _Thunks[84];
                    *(void**) (vfptr0 + 420) = _Thunks[85];
                    *(void**) (vfptr0 + 424) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 424);
                    *(void**) (vfptr0 + 428) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 428);
                    *(void**) (vfptr0 + 432) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 432);
                    *(void**) (vfptr0 + 436) = _Thunks[86];
                    *(void**) (vfptr0 + 440) = _Thunks[87];
                    *(void**) (vfptr0 + 444) = _Thunks[88];
                    *(void**) (vfptr0 + 448) = _Thunks[89];
                    *(void**) (vfptr0 + 452) = _Thunks[90];
                    *(void**) (vfptr0 + 456) = _Thunks[91];
                    *(void**) (vfptr0 + 460) = _Thunks[92];
                    *(void**) (vfptr0 + 464) = _Thunks[93];
                    *(void**) (vfptr0 + 468) = _Thunks[94];
                    *(void**) (vfptr0 + 472) = _Thunks[95];
                    *(void**) (vfptr0 + 476) = _Thunks[96];
                    *(void**) (vfptr0 + 480) = _Thunks[97];
                    *(void**) (vfptr0 + 484) = _Thunks[98];
                    *(void**) (vfptr0 + 488) = _Thunks[99];
                    *(void**) (vfptr0 + 492) = _Thunks[100];
                    *(void**) (vfptr0 + 496) = _Thunks[101];
                    *(void**) (vfptr0 + 500) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 500);
                    *(void**) (vfptr0 + 504) = _Thunks[102];
                    *(void**) (vfptr0 + 508) = _Thunks[103];
                    *(void**) (vfptr0 + 512) = _Thunks[104];
                    *(void**) (vfptr0 + 516) = _Thunks[105];
                    *(void**) (vfptr0 + 520) = _Thunks[106];
                    *(void**) (vfptr0 + 524) = _Thunks[107];
                    *(void**) (vfptr0 + 528) = _Thunks[108];
                    *(void**) (vfptr0 + 532) = _Thunks[109];
                    *(void**) (vfptr0 + 536) = _Thunks[110];
                    *(void**) (vfptr0 + 540) = _Thunks[111];
                    *(void**) (vfptr0 + 544) = _Thunks[112];
                    *(void**) (vfptr0 + 548) = _Thunks[113];
                    *(void**) (vfptr0 + 552) = _Thunks[114];
                    *(void**) (vfptr0 + 556) = _Thunks[115];
                    *(void**) (vfptr0 + 560) = _Thunks[116];
                    *(void**) (vfptr0 + 564) = _Thunks[117];
                    *(void**) (vfptr0 + 568) = _Thunks[118];
                    *(void**) (vfptr0 + 572) = _Thunks[119];
                    *(void**) (vfptr0 + 576) = _Thunks[120];
                    *(void**) (vfptr0 + 580) = _Thunks[121];
                    *(void**) (vfptr0 + 584) = _Thunks[122];
                    *(void**) (vfptr0 + 588) = _Thunks[123];
                    *(void**) (vfptr0 + 592) = _Thunks[124];
                    *(void**) (vfptr0 + 596) = _Thunks[125];
                    *(void**) (vfptr0 + 600) = _Thunks[126];
                    *(void**) (vfptr0 + 604) = _Thunks[127];
                    *(void**) (vfptr0 + 608) = _Thunks[128];
                    *(void**) (vfptr0 + 612) = _Thunks[129];
                    *(void**) (vfptr0 + 616) = _Thunks[130];
                    *(void**) (vfptr0 + 620) = _Thunks[131];
                    *(void**) (vfptr0 + 624) = _Thunks[132];
                    *(void**) (vfptr0 + 628) = _Thunks[133];
                    *(void**) (vfptr0 + 632) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 632);
                    *(void**) (vfptr0 + 636) = _Thunks[134];
                    *(void**) (vfptr0 + 640) = _Thunks[135];
                    *(void**) (vfptr0 + 644) = _Thunks[136];
                    *(void**) (vfptr0 + 648) = _Thunks[137];
                    *(void**) (vfptr0 + 652) = _Thunks[138];
                    *(void**) (vfptr0 + 656) = _Thunks[139];
                    *(void**) (vfptr0 + 660) = _Thunks[140];
                    *(void**) (vfptr0 + 664) = _Thunks[141];
                    *(void**) (vfptr0 + 668) = _Thunks[142];
                    *(void**) (vfptr0 + 672) = _Thunks[143];
                    *(void**) (vfptr0 + 676) = _Thunks[144];
                    *(void**) (vfptr0 + 680) = _Thunks[145];
                    *(void**) (vfptr0 + 684) = _Thunks[146];
                    *(void**) (vfptr0 + 688) = _Thunks[147];
                    *(void**) (vfptr0 + 692) = _Thunks[148];
                    *(void**) (vfptr0 + 696) = _Thunks[149];
                    *(void**) (vfptr0 + 700) = _Thunks[150];
                    *(void**) (vfptr0 + 704) = _Thunks[151];
                    *(void**) (vfptr0 + 708) = _Thunks[152];
                    *(void**) (vfptr0 + 712) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 712);
                    *(void**) (vfptr0 + 716) = _Thunks[153];
                    *(void**) (vfptr0 + 720) = _Thunks[154];
                    *(void**) (vfptr0 + 724) = _Thunks[155];
                    *(void**) (vfptr0 + 728) = _Thunks[156];
                    *(void**) (vfptr0 + 732) = _Thunks[157];
                    *(void**) (vfptr0 + 736) = _Thunks[158];
                    *(void**) (vfptr0 + 740) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 740);
                    *(void**) (vfptr0 + 744) = _Thunks[159];
                    *(void**) (vfptr0 + 748) = _Thunks[160];
                    *(void**) (vfptr0 + 752) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 752);
                    *(void**) (vfptr0 + 756) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 756);
                    *(void**) (vfptr0 + 760) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 760);
                    *(void**) (vfptr0 + 764) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 764);
                    *(void**) (vfptr0 + 768) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 768);
                    *(void**) (vfptr0 + 772) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 772);
                    *(void**) (vfptr0 + 776) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 776);
                    *(void**) (vfptr0 + 780) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 780);
                    *(void**) (vfptr0 + 784) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 784);
                    *(void**) (vfptr0 + 788) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 788);
                    *(void**) (vfptr0 + 792) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 792);
                    *(void**) (vfptr0 + 796) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 796);
                    *(void**) (vfptr0 + 800) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 800);
                    *(void**) (vfptr0 + 804) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 804);
                    *(void**) (vfptr0 + 808) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 808);
                    *(void**) (vfptr0 + 812) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 812);
                    *(void**) (vfptr0 + 816) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 816);
                    *(void**) (vfptr0 + 820) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 820);
                    *(void**) (vfptr0 + 824) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 824);
                    *(void**) (vfptr0 + 828) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 828);
                    *(void**) (vfptr0 + 832) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 832);
                    *(void**) (vfptr0 + 836) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 836);
                    *(void**) (vfptr0 + 840) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 840);
                    *(void**) (vfptr0 + 844) = _Thunks[161];
                    *(void**) (vfptr0 + 848) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 848);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class Panel : global::wxSharp.PanelBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 440)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::System.IntPtr vptr_wxObject;

            [FieldOffset(4)]
            internal global::System.IntPtr m_refData;

            [FieldOffset(8)]
            internal global::System.IntPtr m_first;

            [FieldOffset(12)]
            internal global::System.IntPtr m_nextHandler;

            [FieldOffset(16)]
            internal global::System.IntPtr m_previousHandler;

            [FieldOffset(20)]
            internal global::System.IntPtr m_dynamicEvents;

            [FieldOffset(24)]
            internal global::System.IntPtr m_pendingEvents;

            [FieldOffset(28)]
            internal global::wxSharp.CriticalSection.__Internal m_pendingEventsLock;

            [FieldOffset(32)]
            internal byte m_enabled;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientObject;

            [FieldOffset(36)]
            internal global::System.IntPtr m_clientData;

            [FieldOffset(40)]
            internal global::wxSharp.ClientDataType m_clientDataType;

            [FieldOffset(44)]
            internal global::wxSharp.WindowIDRef.__Internal m_windowId;

            [FieldOffset(48)]
            internal global::System.IntPtr m_parent;

            [FieldOffset(52)]
            internal global::wxSharp.WindowList.__Internal m_children;

            [FieldOffset(76)]
            internal int m_minWidth;

            [FieldOffset(80)]
            internal int m_minHeight;

            [FieldOffset(84)]
            internal int m_maxWidth;

            [FieldOffset(88)]
            internal int m_maxHeight;

            [FieldOffset(92)]
            internal global::System.IntPtr m_eventHandler;

            [FieldOffset(96)]
            internal global::System.IntPtr m_windowValidator;

            [FieldOffset(100)]
            internal global::System.IntPtr m_dropTarget;

            [FieldOffset(104)]
            internal global::wxSharp.Cursor.__Internal m_cursor;

            [FieldOffset(112)]
            internal global::wxSharp.Font.__Internal m_font;

            [FieldOffset(120)]
            internal global::wxSharp.Color.__Internal m_backgroundColour;

            [FieldOffset(128)]
            internal global::wxSharp.Color.__Internal m_foregroundColour;

            [FieldOffset(136)]
            internal global::System.IntPtr m_caret;

            [FieldOffset(140)]
            internal global::wxSharp.Region.__Internal m_updateRegion;

            [FieldOffset(148)]
            internal global::wxSharp.AcceleratorTable.__Internal m_acceleratorTable;

            [FieldOffset(156)]
            internal global::System.IntPtr m_tooltip;

            [FieldOffset(160)]
            internal global::System.IntPtr m_constraints;

            [FieldOffset(164)]
            internal global::System.IntPtr m_constraintsInvolvedIn;

            [FieldOffset(168)]
            internal global::System.IntPtr m_windowSizer;

            [FieldOffset(172)]
            internal global::System.IntPtr m_containingSizer;

            [FieldOffset(176)]
            internal byte m_autoLayout;

            [FieldOffset(176)]
            internal byte m_isShown;

            [FieldOffset(176)]
            internal byte m_isEnabled;

            [FieldOffset(176)]
            internal byte m_isBeingDeleted;

            [FieldOffset(176)]
            internal byte m_hasBgCol;

            [FieldOffset(176)]
            internal byte m_hasFgCol;

            [FieldOffset(176)]
            internal byte m_hasFont;

            [FieldOffset(176)]
            internal byte m_inheritBgCol;

            [FieldOffset(177)]
            internal byte m_inheritFgCol;

            [FieldOffset(177)]
            internal byte m_inheritFont;

            [FieldOffset(180)]
            internal int m_windowStyle;

            [FieldOffset(184)]
            internal int m_exStyle;

            [FieldOffset(188)]
            internal global::wxSharp.String.__Internal m_windowName;

            [FieldOffset(208)]
            internal byte m_themeEnabled;

            [FieldOffset(212)]
            internal global::wxSharp.BackgroundStyle m_backgroundStyle;

            [FieldOffset(216)]
            internal global::wxSharp.Palette.__Internal m_palette;

            [FieldOffset(224)]
            internal byte m_hasCustomPalette;

            [FieldOffset(228)]
            internal global::wxSharp.Size.__Internal m_virtualSize;

            [FieldOffset(236)]
            internal global::System.IntPtr m_scrollHelper;

            [FieldOffset(240)]
            internal global::wxSharp.WindowVariant m_windowVariant;

            [FieldOffset(244)]
            internal global::wxSharp.Size.__Internal m_bestSizeCache;

            [FieldOffset(252)]
            internal uint m_freezeCount;

            [FieldOffset(256)]
            internal global::wxSharp.List.__Internal m_subControls;

            [FieldOffset(280)]
            internal global::System.IntPtr m_cgContextRef;

            [FieldOffset(284)]
            internal byte m_cachedClippedRectValid;

            [FieldOffset(288)]
            internal global::wxSharp.Rect.__Internal m_cachedClippedRectWithOuterStructure;

            [FieldOffset(304)]
            internal global::wxSharp.Rect.__Internal m_cachedClippedRect;

            [FieldOffset(320)]
            internal global::wxSharp.Rect.__Internal m_cachedClippedClientRect;

            [FieldOffset(336)]
            internal global::wxSharp.Region.__Internal m_cachedClippedRegionWithOuterStructure;

            [FieldOffset(344)]
            internal global::wxSharp.Region.__Internal m_cachedClippedRegion;

            [FieldOffset(352)]
            internal global::wxSharp.Region.__Internal m_cachedClippedClientRegion;

            [FieldOffset(360)]
            internal global::wxSharp.Point.__Internal m_macTopLeftInset;

            [FieldOffset(368)]
            internal global::wxSharp.Point.__Internal m_macBottomRightInset;

            [FieldOffset(376)]
            internal byte m_macAlpha;

            [FieldOffset(380)]
            internal global::System.IntPtr m_hScrollBar;

            [FieldOffset(384)]
            internal global::System.IntPtr m_vScrollBar;

            [FieldOffset(388)]
            internal byte m_hScrollBarAlwaysShown;

            [FieldOffset(389)]
            internal byte m_vScrollBarAlwaysShown;

            [FieldOffset(392)]
            internal global::System.IntPtr m_growBox;

            [FieldOffset(396)]
            internal global::wxSharp.String.__Internal m_label;

            [FieldOffset(416)]
            internal byte m_isNativeWindowWrapper;

            [FieldOffset(417)]
            internal byte m_clipChildren;

            [FieldOffset(420)]
            internal global::System.IntPtr m_peer;

            [FieldOffset(424)]
            internal global::wxSharp.ControlContainer.__Internal m_container;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPanelC2Ev")]
            internal static extern void ctor(global::System.IntPtr __instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPanel14wxCreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject();
        }

        internal static new global::wxSharp.Panel __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::wxSharp.Panel(native.ToPointer(), skipVTables);
        }

        internal static global::wxSharp.Panel __CreateInstance(global::wxSharp.Panel.__Internal native, bool skipVTables = false)
        {
            return new global::wxSharp.Panel(native, skipVTables);
        }

        private static void* __CopyValue(global::wxSharp.Panel.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::wxSharp.Panel.__Internal));
            *(global::wxSharp.Panel.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private Panel(global::wxSharp.Panel.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected Panel(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };
            else
                SetupVTables(true);
        }

        public Panel()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::wxSharp.Panel.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "wxSharp.Panel");
        }

        public static global::wxSharp.IwxObject CreateObject()
        {
            var __ret = __Internal.CreateObject();
            global::wxSharp.IwxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Object.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.NativeToManagedMap[__ret];
            else global::wxSharp.Object.NativeToManagedMap[__ret] = __result0 = (global::wxSharp.IwxObject) global::wxSharp.Object.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxPanel
        private static global::wxSharp.Delegates.Action_IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(true);
        }

        // wxObjectRefData *CreateRefData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _CreateRefDataDelegateInstance;

        private static global::System.IntPtr _CreateRefDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefDataDelegateInstance;

        private static global::System.IntPtr _CloneRefDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.RefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.RefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.NativeToManagedMap[data];
            else __result0 = (global::wxSharp.RefCounter) global::wxSharp.RefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetNextHandler(wxEvtHandler *handler) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetNextHandlerDelegateInstance;

        private static void _SetNextHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetNextHandler(__result0);
        }

        // void SetPreviousHandler(wxEvtHandler *handler) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetPreviousHandlerDelegateInstance;

        private static void _SetPreviousHandlerDelegateHook(global::System.IntPtr __instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IwxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.EvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.NativeToManagedMap[handler];
            else __result0 = (global::wxSharp.IwxEvtHandler) global::wxSharp.EvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetPreviousHandler(__result0);
        }

        // bool ProcessEvent(wxEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _ProcessEventDelegateInstance;

        private static bool _ProcessEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.ProcessEvent(__result0);
        }

        // void QueueEvent(wxEvent *event)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _QueueEventDelegateInstance;

        private static void _QueueEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.QueueEvent(__result0);
        }

        // void AddPendingEvent(const wxEvent& event) { // notice that the thread-safety problem comes from the fact that // Clone() doesn't make deep copies of wxString fields of wxEvent // object and so the same wxString could be used from both threads when // the event object is destroyed in this one -- QueueEvent() avoids // this problem as the event pointer is not used any more in this // thread at all after it is called. QueueEvent(event.Clone()); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AddPendingEventDelegateInstance;

        private static void _AddPendingEventDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            __target.AddPendingEvent(__result0);
        }

        // bool TryBefore(wxEvent& event) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryBeforeDelegateInstance;

        private static bool _TryBeforeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryBefore(__result0);
        }

        // bool TryAfter(wxEvent& event) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _TryAfterDelegateInstance;

        private static bool _TryAfterDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Event __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Event.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.Event) global::wxSharp.Event.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.Event) global::wxSharp.Event.__CreateInstance(@event, skipVTables: true);
            return __target.TryAfter(__result0);
        }

        // void DoSetClientData( void *data )
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoSetClientDataDelegateInstance;

        private static void _DoSetClientDataDelegateHook(global::System.IntPtr __instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _DoGetClientDataDelegateInstance;

        private static global::System.IntPtr _DoGetClientDataDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        // bool Destroy()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _DestroyDelegateInstance;

        private static bool _DestroyDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Destroy();
        }

        // wxCoord AdjustForLayoutDirection(wxCoord x, wxCoord width, wxCoord widthTotal) const
        private static global::wxSharp.Delegates.Func_int_IntPtr_int_int_int _AdjustForLayoutDirectionDelegateInstance;

        private static int _AdjustForLayoutDirectionDelegateHook(global::System.IntPtr __instance, int x, int width, int widthTotal)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AdjustForLayoutDirection(x, width, widthTotal);
        }

        // void SetId( wxWindowID winid ) { m_windowId = winid; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetIdDelegateInstance;

        private static void _SetIdDelegateHook(global::System.IntPtr __instance, int winid)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetId(winid);
        }

        // void Raise() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _RaiseDelegateInstance;

        private static void _RaiseDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Raise();
        }

        // void Lower() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _LowerDelegateInstance;

        private static void _LowerDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Lower();
        }

        // wxPoint GetClientAreaOrigin() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxPoint___Internal_IntPtr _GetClientAreaOriginDelegateInstance;

        private static global::wxSharp.Point.__Internal _GetClientAreaOriginDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClientAreaOrigin();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Point.__Internal*) __ret.__Instance;
        }

        // wxSize ClientToWindowSize(const wxSize& size) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr _ClientToWindowSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _ClientToWindowSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            var __ret = __target.ClientToWindowSize(__result0);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize WindowToClientSize(const wxSize& size) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr _WindowToClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _WindowToClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            var __ret = __target.WindowToClientSize(__result0);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetEffectiveMinSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetEffectiveMinSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetEffectiveMinSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEffectiveMinSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void Fit()
        private static global::wxSharp.Delegates.Action_IntPtr _FitDelegateInstance;

        private static void _FitDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Fit();
        }

        // void FitInside()
        private static global::wxSharp.Delegates.Action_IntPtr _FitInsideDelegateInstance;

        private static void _FitInsideDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.FitInside();
        }

        // void SetSizeHints( int minW, int minH, int maxW = wxDefaultCoord, int maxH = wxDefaultCoord, int incW = wxDefaultCoord, int incH = wxDefaultCoord ) { DoSetSizeHints(minW, minH, maxW, maxH, incW, incH); }
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int _SetSizeHintsDelegateInstance;

        private static void _SetSizeHintsDelegateHook(global::System.IntPtr __instance, int minW, int minH, int maxW, int maxH, int incW, int incH)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetSizeHints(minW, minH, maxW, maxH, incW, incH);
        }

        // void SetMinSize(const wxSize& minSize)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMinSizeDelegateInstance;

        private static void _SetMinSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr minSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (minSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(minSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[minSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(minSize);
            __target.SetMinSize(__result0);
        }

        // void SetMaxSize(const wxSize& maxSize)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMaxSizeDelegateInstance;

        private static void _SetMaxSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr maxSize)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (maxSize == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(maxSize))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[maxSize];
            else __result0 = global::wxSharp.Size.__CreateInstance(maxSize);
            __target.SetMaxSize(__result0);
        }

        // void SetMinClientSize(const wxSize& size) { SetMinSize(ClientToWindowSize(size)); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMinClientSizeDelegateInstance;

        private static void _SetMinClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            __target.SetMinClientSize(__result0);
        }

        // void SetMaxClientSize(const wxSize& size) { SetMaxSize(ClientToWindowSize(size)); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetMaxClientSizeDelegateInstance;

        private static void _SetMaxClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            __target.SetMaxClientSize(__result0);
        }

        // wxSize GetMinSize() const { return wxSize(m_minWidth, m_minHeight); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMinSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMinSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMinSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetMaxSize() const { return wxSize(m_maxWidth, m_maxHeight); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMaxSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMaxSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMaxSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetMinClientSize() const { return WindowToClientSize(GetMinSize()); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMinClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMinClientSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMinClientSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetMaxClientSize() const { return WindowToClientSize(GetMaxSize()); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetMaxClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetMaxClientSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMaxClientSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void DoSetVirtualSize( int x, int y )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetVirtualSizeDelegateInstance;

        private static void _DoSetVirtualSizeDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetVirtualSize(x, y);
        }

        // wxSize DoGetVirtualSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetVirtualSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetVirtualSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetVirtualSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize GetBestVirtualSize() const { wxSize client( GetClientSize() ); wxSize best( GetBestSize() ); return wxSize( wxMax( client.x, best.x ), wxMax( client.y, best.y ) ); }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetBestVirtualSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetBestVirtualSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetBestVirtualSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // double GetContentScaleFactor() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_double_IntPtr _GetContentScaleFactorDelegateInstance;

        private static double _GetContentScaleFactorDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetContentScaleFactor();
        }

        // wxSize GetWindowBorderSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetWindowBorderSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetWindowBorderSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetWindowBorderSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // bool InformFirstDirection(int direction, int size, int availableOtherDir)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _InformFirstDirectionDelegateInstance;

        private static bool _InformFirstDirectionDelegateHook(global::System.IntPtr __instance, int direction, int size, int availableOtherDir)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.InformFirstDirection(direction, size, availableOtherDir);
        }

        // void SendSizeEvent(int flags = 0) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int _SendSizeEventDelegateInstance;

        private static void _SendSizeEventDelegateHook(global::System.IntPtr __instance, int flags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SendSizeEvent(flags);
        }

        // bool BeginRepositioningChildren() { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _BeginRepositioningChildrenDelegateInstance;

        private static bool _BeginRepositioningChildrenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.BeginRepositioningChildren();
        }

        // void EndRepositioningChildren() { }
        private static global::wxSharp.Delegates.Action_IntPtr _EndRepositioningChildrenDelegateInstance;

        private static void _EndRepositioningChildrenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.EndRepositioningChildren();
        }

        // bool Show( bool show = true ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_bool _ShowDelegateInstance;

        private static bool _ShowDelegateHook(global::System.IntPtr __instance, bool show)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Show(show);
        }

        // bool ShowWithEffect(wxShowEffect effect, unsigned timeout = 0) wxOVERRIDE { return OSXShowWithEffect(true, effect, timeout); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint _ShowWithEffectDelegateInstance;

        private static bool _ShowWithEffectDelegateHook(global::System.IntPtr __instance, global::wxSharp.ShowEffect effect, uint timeout)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ShowWithEffect(effect, timeout);
        }

        // bool HideWithEffect(wxShowEffect effect, unsigned timeout = 0) wxOVERRIDE { return OSXShowWithEffect(false, effect, timeout); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxShowEffect_uint _HideWithEffectDelegateInstance;

        private static bool _HideWithEffectDelegateHook(global::System.IntPtr __instance, global::wxSharp.ShowEffect effect, uint timeout)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HideWithEffect(effect, timeout);
        }

        // bool Enable( bool enable = true )
        private static global::wxSharp.Delegates.Func_bool_IntPtr_bool _EnableDelegateInstance;

        private static bool _EnableDelegateHook(global::System.IntPtr __instance, bool enable)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Enable(enable);
        }

        // bool IsShown() const { return m_isShown; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsShownDelegateInstance;

        private static bool _IsShownDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsShown();
        }

        // bool IsShownOnScreen() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsShownOnScreenDelegateInstance;

        private static bool _IsShownOnScreenDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsShownOnScreen();
        }

        // void SetWindowStyleFlag( long style ) { m_windowStyle = style; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetWindowStyleFlagDelegateInstance;

        private static void _SetWindowStyleFlagDelegateHook(global::System.IntPtr __instance, int style)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetWindowStyleFlag(style);
        }

        // long GetWindowStyleFlag() const { return m_windowStyle; }
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetWindowStyleFlagDelegateInstance;

        private static int _GetWindowStyleFlagDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetWindowStyleFlag();
        }

        // bool IsRetained() const { return HasFlag(wxRETAINED); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsRetainedDelegateInstance;

        private static bool _IsRetainedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsRetained();
        }

        // void SetExtraStyle(long exStyle) { m_exStyle = exStyle; }
        private static global::wxSharp.Delegates.Action_IntPtr_int _SetExtraStyleDelegateInstance;

        private static void _SetExtraStyleDelegateHook(global::System.IntPtr __instance, int exStyle)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetExtraStyle(exStyle);
        }

        // void SetThemeEnabled(bool enableTheme) { m_themeEnabled = enableTheme; }
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetThemeEnabledDelegateInstance;

        private static void _SetThemeEnabledDelegateHook(global::System.IntPtr __instance, bool enableTheme)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetThemeEnabled(enableTheme);
        }

        // bool GetThemeEnabled() const { return m_themeEnabled; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _GetThemeEnabledDelegateInstance;

        private static bool _GetThemeEnabledDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetThemeEnabled();
        }

        // void SetFocus() wxOVERRIDE { if ( !m_container.DoSetFocus() ) BaseWindowClass::SetFocus(); }
        private static global::wxSharp.Delegates.Action_IntPtr _SetFocusDelegateInstance;

        private static void _SetFocusDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetFocus();
        }

        // void SetFocusFromKbd() { SetFocus(); }
        private static global::wxSharp.Delegates.Action_IntPtr _SetFocusFromKbdDelegateInstance;

        private static void _SetFocusFromKbdDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetFocusFromKbd();
        }

        // bool HasFocus() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasFocusDelegateInstance;

        private static bool _HasFocusDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasFocus();
        }

        // bool AcceptsFocus() const wxOVERRIDE { return m_container.AcceptsFocus(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AcceptsFocusDelegateInstance;

        private static bool _AcceptsFocusDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AcceptsFocus();
        }

        // bool AcceptsFocusRecursively() const wxOVERRIDE { return m_container.AcceptsFocusRecursively(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AcceptsFocusRecursivelyDelegateInstance;

        private static bool _AcceptsFocusRecursivelyDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AcceptsFocusRecursively();
        }

        // bool AcceptsFocusFromKeyboard() const wxOVERRIDE { return m_container.AcceptsFocusFromKeyboard(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _AcceptsFocusFromKeyboardDelegateInstance;

        private static bool _AcceptsFocusFromKeyboardDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.AcceptsFocusFromKeyboard();
        }

        // bool CanBeFocused() const { return IsShown() && IsEnabled(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanBeFocusedDelegateInstance;

        private static bool _CanBeFocusedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanBeFocused();
        }

        // void SetCanFocus(bool WXUNUSED(canFocus)) { }
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetCanFocusDelegateInstance;

        private static void _SetCanFocusDelegateHook(global::System.IntPtr __instance, bool _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetCanFocus(_0);
        }

        // bool IsTopLevel() const
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsTopLevelDelegateInstance;

        private static bool _IsTopLevelDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsTopLevel();
        }

        // bool IsClientAreaChild(const wxWindow *child) const wxOVERRIDE { return !MacIsWindowScrollbar(child) && !((wxWindow*)m_growBox==child) && wxWindowBase::IsClientAreaChild(child); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _IsClientAreaChildDelegateInstance;

        private static bool _IsClientAreaChildDelegateHook(global::System.IntPtr __instance, global::System.IntPtr child)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (child == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(child))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[child];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(child, skipVTables: true);
            return __target.IsClientAreaChild(__result0);
        }

        // bool Validate()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _ValidateDelegateInstance;

        private static bool _ValidateDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Validate();
        }

        // bool TransferDataToWindow()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _TransferDataToWindowDelegateInstance;

        private static bool _TransferDataToWindowDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.TransferDataToWindow();
        }

        // bool TransferDataFromWindow()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _TransferDataFromWindowDelegateInstance;

        private static bool _TransferDataFromWindowDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.TransferDataFromWindow();
        }

        // void InitDialog() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _InitDialogDelegateInstance;

        private static void _InitDialogDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.InitDialog();
        }

        // bool RegisterHotKey(int hotkeyId, int modifiers, int keycode) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int _RegisterHotKeyDelegateInstance;

        private static bool _RegisterHotKeyDelegateHook(global::System.IntPtr __instance, int hotkeyId, int modifiers, int keycode)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.RegisterHotKey(hotkeyId, modifiers, keycode);
        }

        // bool UnregisterHotKey(int hotkeyId) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _UnregisterHotKeyDelegateInstance;

        private static bool _UnregisterHotKeyDelegateHook(global::System.IntPtr __instance, int hotkeyId)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.UnregisterHotKey(hotkeyId);
        }

        // wxSize GetDPI() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _GetDPIDelegateInstance;

        private static global::wxSharp.Size.__Internal _GetDPIDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDPI();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void WarpPointer( int x, int y ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _WarpPointerDelegateInstance;

        private static void _WarpPointerDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.WarpPointer(x, y);
        }

        // bool HasCapture() const { return reinterpret_cast<const wxWindow*>(this) == GetCapture(); }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasCaptureDelegateInstance;

        private static bool _HasCaptureDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasCapture();
        }

        // bool EnableTouchEvents(int eventsMask) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _EnableTouchEventsDelegateInstance;

        private static bool _EnableTouchEventsDelegateHook(global::System.IntPtr __instance, int eventsMask)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.EnableTouchEvents(eventsMask);
        }

        // void Refresh( bool eraseBackground = true, const wxRect *rect = NULL ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool_IntPtr _RefreshDelegateInstance;

        private static void _RefreshDelegateHook(global::System.IntPtr __instance, bool eraseBackground, global::System.IntPtr rect)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Rect __result1;
            if (rect == IntPtr.Zero) __result1 = null;
            else if (global::wxSharp.Rect.NativeToManagedMap.ContainsKey(rect))
                __result1 = (global::wxSharp.Rect) global::wxSharp.Rect.NativeToManagedMap[rect];
            else __result1 = global::wxSharp.Rect.__CreateInstance(rect);
            __target.Refresh(eraseBackground, __result1);
        }

        // void Update() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _UpdateDelegateInstance;

        private static void _UpdateDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Update();
        }

        // void ClearBackground() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _ClearBackgroundDelegateInstance;

        private static void _ClearBackgroundDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ClearBackground();
        }

        // void PrepareDC( wxDC & WXUNUSED(dc) ) { }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _PrepareDCDelegateInstance;

        private static void _PrepareDCDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.DC __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.DC.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.DC) global::wxSharp.DC.NativeToManagedMap[_0];
            else __result0 = (global::wxSharp.DC) global::wxSharp.DC.__CreateInstance(_0, skipVTables: true);
            __target.PrepareDC(__result0);
        }

        // void SetDoubleBuffered(bool WXUNUSED(on)) { }
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetDoubleBufferedDelegateInstance;

        private static void _SetDoubleBufferedDelegateHook(global::System.IntPtr __instance, bool _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetDoubleBuffered(_0);
        }

        // bool IsDoubleBuffered() const wxOVERRIDE { return true; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _IsDoubleBufferedDelegateInstance;

        private static bool _IsDoubleBufferedDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsDoubleBuffered();
        }

        // bool DoIsExposed( int x, int y ) const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int _DoIsExposedDelegateInstance;

        private static bool _DoIsExposedDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoIsExposed(x, y);
        }

        // bool DoIsExposed( int x, int y, int w, int h ) const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int_int_int_int _DoIsExposed_1DelegateInstance;

        private static bool _DoIsExposed_1DelegateHook(global::System.IntPtr __instance, int x, int y, int w, int h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoIsExposed(x, y, w, h);
        }

        // wxVisualAttributes GetDefaultAttributes() const { return GetClassDefaultAttributes(GetWindowVariant()); }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _GetDefaultAttributesDelegateInstance;

        private static void _GetDefaultAttributesDelegateHook(global::System.IntPtr @return, global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDefaultAttributes();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::wxSharp.VisualAttributes.__Internal*) @return = *(global::wxSharp.VisualAttributes.__Internal*) __ret.__Instance;
        }

        // bool SetBackgroundColour( const wxColour &colour ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _SetBackgroundColourDelegateInstance;

        private static bool _SetBackgroundColourDelegateHook(global::System.IntPtr __instance, global::System.IntPtr colour)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Color __result0;
            if (colour == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Color.NativeToManagedMap.ContainsKey(colour))
                __result0 = (global::wxSharp.Color) global::wxSharp.Color.NativeToManagedMap[colour];
            else __result0 = (global::wxSharp.Color) global::wxSharp.Color.__CreateInstance(colour, skipVTables: true);
            return __target.SetBackgroundColour(__result0);
        }

        // bool SetForegroundColour( const wxColour &colour ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _SetForegroundColourDelegateInstance;

        private static bool _SetForegroundColourDelegateHook(global::System.IntPtr __instance, global::System.IntPtr colour)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Color __result0;
            if (colour == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Color.NativeToManagedMap.ContainsKey(colour))
                __result0 = (global::wxSharp.Color) global::wxSharp.Color.NativeToManagedMap[colour];
            else __result0 = (global::wxSharp.Color) global::wxSharp.Color.__CreateInstance(colour, skipVTables: true);
            return __target.SetForegroundColour(__result0);
        }

        // bool SetBackgroundStyle(wxBackgroundStyle style) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxBackgroundStyle _SetBackgroundStyleDelegateInstance;

        private static bool _SetBackgroundStyleDelegateHook(global::System.IntPtr __instance, global::wxSharp.BackgroundStyle style)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetBackgroundStyle(style);
        }

        // bool HasTransparentBackground() { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasTransparentBackgroundDelegateInstance;

        private static bool _HasTransparentBackgroundDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasTransparentBackground();
        }

        // int GetCharHeight() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetCharHeightDelegateInstance;

        private static int _GetCharHeightDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetCharHeight();
        }

        // int GetCharWidth() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr _GetCharWidthDelegateInstance;

        private static int _GetCharWidthDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetCharWidth();
        }

        // void UpdateWindowUI(long flags = wxUPDATE_UI_NONE)
        private static global::wxSharp.Delegates.Action_IntPtr_int _UpdateWindowUIDelegateInstance;

        private static void _UpdateWindowUIDelegateHook(global::System.IntPtr __instance, int flags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.UpdateWindowUI(flags);
        }

        // void DoUpdateWindowUI(wxUpdateUIEvent& event)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoUpdateWindowUIDelegateInstance;

        private static void _DoUpdateWindowUIDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.UpdateUIEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.UpdateUIEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.UpdateUIEvent) global::wxSharp.UpdateUIEvent.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.UpdateUIEvent) global::wxSharp.UpdateUIEvent.__CreateInstance(@event, skipVTables: true);
            __target.DoUpdateWindowUI(__result0);
        }

        // bool HasMultiplePages() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _HasMultiplePagesDelegateInstance;

        private static bool _HasMultiplePagesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.HasMultiplePages();
        }

        // bool CanScroll(int orient) const
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _CanScrollDelegateInstance;

        private static bool _CanScrollDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanScroll(orient);
        }

        // void SetScrollbar( int orient, int pos, int thumbVisible, int range, bool refresh = true ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_bool _SetScrollbarDelegateInstance;

        private static void _SetScrollbarDelegateHook(global::System.IntPtr __instance, int orient, int pos, int thumbVisible, int range, bool refresh)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetScrollbar(orient, pos, thumbVisible, range, refresh);
        }

        // void SetScrollPos( int orient, int pos, bool refresh = true ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_bool _SetScrollPosDelegateInstance;

        private static void _SetScrollPosDelegateHook(global::System.IntPtr __instance, int orient, int pos, bool refresh)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetScrollPos(orient, pos, refresh);
        }

        // int GetScrollPos( int orient ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _GetScrollPosDelegateInstance;

        private static int _GetScrollPosDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetScrollPos(orient);
        }

        // int GetScrollThumb( int orient ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _GetScrollThumbDelegateInstance;

        private static int _GetScrollThumbDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetScrollThumb(orient);
        }

        // int GetScrollRange( int orient ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _GetScrollRangeDelegateInstance;

        private static int _GetScrollRangeDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetScrollRange(orient);
        }

        // void ScrollWindow( int dx, int dy, const wxRect* rect = NULL ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_IntPtr _ScrollWindowDelegateInstance;

        private static void _ScrollWindowDelegateHook(global::System.IntPtr __instance, int dx, int dy, global::System.IntPtr rect)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Rect __result2;
            if (rect == IntPtr.Zero) __result2 = null;
            else if (global::wxSharp.Rect.NativeToManagedMap.ContainsKey(rect))
                __result2 = (global::wxSharp.Rect) global::wxSharp.Rect.NativeToManagedMap[rect];
            else __result2 = global::wxSharp.Rect.__CreateInstance(rect);
            __target.ScrollWindow(dx, dy, __result2);
        }

        // bool ScrollLines(int WXUNUSED(lines)) { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _ScrollLinesDelegateInstance;

        private static bool _ScrollLinesDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ScrollLines(_0);
        }

        // bool ScrollPages(int WXUNUSED(pages)) { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _ScrollPagesDelegateInstance;

        private static bool _ScrollPagesDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ScrollPages(_0);
        }

        // void AlwaysShowScrollbars(bool horz = true, bool vert = true) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool_bool _AlwaysShowScrollbarsDelegateInstance;

        private static void _AlwaysShowScrollbarsDelegateHook(global::System.IntPtr __instance, bool horz, bool vert)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AlwaysShowScrollbars(horz, vert);
        }

        // bool IsScrollbarAlwaysShown(int orient) const wxOVERRIDE { return orient == wxHORIZONTAL ? m_hScrollBarAlwaysShown : m_vScrollBarAlwaysShown; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _IsScrollbarAlwaysShownDelegateInstance;

        private static bool _IsScrollbarAlwaysShownDelegateHook(global::System.IntPtr __instance, int orient)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsScrollbarAlwaysShown(orient);
        }

        // void SetDropTarget( wxDropTarget *dropTarget ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _SetDropTargetDelegateInstance;

        private static void _SetDropTargetDelegateHook(global::System.IntPtr __instance, global::System.IntPtr dropTarget)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.DropTarget __result0;
            if (dropTarget == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.DropTarget.NativeToManagedMap.ContainsKey(dropTarget))
                __result0 = (global::wxSharp.DropTarget) global::wxSharp.DropTarget.NativeToManagedMap[dropTarget];
            else __result0 = global::wxSharp.DropTarget.__CreateInstance(dropTarget);
            __target.SetDropTarget(__result0);
        }

        // wxDropTarget *GetDropTarget() const { return m_dropTarget; }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetDropTargetDelegateInstance;

        private static global::System.IntPtr _GetDropTargetDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDropTarget();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DragAcceptFiles(bool accept)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _DragAcceptFilesDelegateInstance;

        private static void _DragAcceptFilesDelegateHook(global::System.IntPtr __instance, bool accept)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DragAcceptFiles(accept);
        }

        // void SetConstraintSizes(bool recurse = true)
        private static global::wxSharp.Delegates.Action_IntPtr_bool _SetConstraintSizesDelegateInstance;

        private static void _SetConstraintSizesDelegateHook(global::System.IntPtr __instance, bool recurse)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetConstraintSizes(recurse);
        }

        // bool LayoutPhase1(int *noChanges)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_intPtr _LayoutPhase1DelegateInstance;

        private static bool _LayoutPhase1DelegateHook(global::System.IntPtr __instance, int* noChanges)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.LayoutPhase1(ref *noChanges);
        }

        // bool LayoutPhase2(int *noChanges)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_intPtr _LayoutPhase2DelegateInstance;

        private static bool _LayoutPhase2DelegateHook(global::System.IntPtr __instance, int* noChanges)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.LayoutPhase2(ref *noChanges);
        }

        // bool DoPhase(int phase)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _DoPhaseDelegateInstance;

        private static bool _DoPhaseDelegateHook(global::System.IntPtr __instance, int phase)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoPhase(phase);
        }

        // void SetSizeConstraint(int x, int y, int w, int h)
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int _SetSizeConstraintDelegateInstance;

        private static void _SetSizeConstraintDelegateHook(global::System.IntPtr __instance, int x, int y, int w, int h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetSizeConstraint(x, y, w, h);
        }

        // void MoveConstraint(int x, int y)
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _MoveConstraintDelegateInstance;

        private static void _MoveConstraintDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.MoveConstraint(x, y);
        }

        // void GetSizeConstraint(int *w, int *h) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _GetSizeConstraintDelegateInstance;

        private static void _GetSizeConstraintDelegateHook(global::System.IntPtr __instance, int* w, int* h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetSizeConstraint(ref *w, ref *h);
        }

        // void GetClientSizeConstraint(int *w, int *h) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _GetClientSizeConstraintDelegateInstance;

        private static void _GetClientSizeConstraintDelegateHook(global::System.IntPtr __instance, int* w, int* h)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetClientSizeConstraint(ref *w, ref *h);
        }

        // void GetPositionConstraint(int *x, int *y) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _GetPositionConstraintDelegateInstance;

        private static void _GetPositionConstraintDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.GetPositionConstraint(ref *x, ref *y);
        }

        // bool Layout()
        private static global::wxSharp.Delegates.Func_bool_IntPtr _LayoutDelegateInstance;

        private static bool _LayoutDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.Layout();
        }

        // bool SetTransparent(wxByte alpha) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_byte _SetTransparentDelegateInstance;

        private static bool _SetTransparentDelegateHook(global::System.IntPtr __instance, byte alpha)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.SetTransparent(alpha);
        }

        // bool CanSetTransparent() wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanSetTransparentDelegateInstance;

        private static bool _CanSetTransparentDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanSetTransparent();
        }

        // void OnInternalIdle()
        private static global::wxSharp.Delegates.Action_IntPtr _OnInternalIdleDelegateInstance;

        private static void _OnInternalIdleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnInternalIdle();
        }

        // bool SendIdleEvents(wxIdleEvent& event)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr _SendIdleEventsDelegateInstance;

        private static bool _SendIdleEventsDelegateHook(global::System.IntPtr __instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.IdleEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.IdleEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (global::wxSharp.IdleEvent) global::wxSharp.IdleEvent.NativeToManagedMap[@event];
            else __result0 = (global::wxSharp.IdleEvent) global::wxSharp.IdleEvent.__CreateInstance(@event, skipVTables: true);
            return __target.SendIdleEvents(__result0);
        }

        // WXWidget GetHandle() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetHandleDelegateInstance;

        private static global::System.IntPtr _GetHandleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetHandle();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void AssociateHandle(WXWidget WXUNUSED(handle)) { }
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _AssociateHandleDelegateInstance;

        private static void _AssociateHandleDelegateHook(global::System.IntPtr __instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.NSView __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.NSView.NativeToManagedMap.ContainsKey(_0))
                __result0 = (global::wxSharp.NSView) global::wxSharp.NSView.NativeToManagedMap[_0];
            else __result0 = global::wxSharp.NSView.__CreateInstance(_0);
            __target.AssociateHandle(__result0);
        }

        // void DissociateHandle() { }
        private static global::wxSharp.Delegates.Action_IntPtr _DissociateHandleDelegateInstance;

        private static void _DissociateHandleDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DissociateHandle();
        }

        // void InheritAttributes()
        private static global::wxSharp.Delegates.Action_IntPtr _InheritAttributesDelegateInstance;

        private static void _InheritAttributesDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.InheritAttributes();
        }

        // bool ShouldInheritColours() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _ShouldInheritColoursDelegateInstance;

        private static bool _ShouldInheritColoursDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.ShouldInheritColours();
        }

        // bool CanBeOutsideClientArea() const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanBeOutsideClientAreaDelegateInstance;

        private static bool _CanBeOutsideClientAreaDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanBeOutsideClientArea();
        }

        // bool CanApplyThemeBorder() const { return true; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr _CanApplyThemeBorderDelegateInstance;

        private static bool _CanApplyThemeBorderDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.CanApplyThemeBorder();
        }

        // wxWindow *GetMainWindowOfCompositeControl() { return (wxWindow*)this; }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _GetMainWindowOfCompositeControlDelegateInstance;

        private static global::System.IntPtr _GetMainWindowOfCompositeControlDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMainWindowOfCompositeControl();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsTopNavigationDomain(NavigationKind WXUNUSED(kind)) const { return false; }
        private static global::wxSharp.Delegates.Func_bool_IntPtr_wxSharp_wxWindow_NavigationKind _IsTopNavigationDomainDelegateInstance;

        private static bool _IsTopNavigationDomainDelegateHook(global::System.IntPtr __instance, global::wxSharp.Window.NavigationKind _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.IsTopNavigationDomain(_0);
        }

        // wxTextEntry* WXGetTextEntry() const { return NULL; }
        private static global::wxSharp.Delegates.Func_IntPtr_IntPtr _WXGetTextEntryDelegateInstance;

        private static global::System.IntPtr _WXGetTextEntryDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WXGetTextEntry();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DoMoveInTabOrder(wxWindow *win, WindowOrder move)
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr_wxSharp_wxWindow_WindowOrder _DoMoveInTabOrderDelegateInstance;

        private static void _DoMoveInTabOrderDelegateHook(global::System.IntPtr __instance, global::System.IntPtr win, global::wxSharp.Window.WindowOrder move)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Window __result0;
            if (win == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Window.NativeToManagedMap.ContainsKey(win))
                __result0 = (global::wxSharp.Window) global::wxSharp.Window.NativeToManagedMap[win];
            else __result0 = (global::wxSharp.Window) global::wxSharp.Window.__CreateInstance(win, skipVTables: true);
            __target.DoMoveInTabOrder(__result0, move);
        }

        // bool DoNavigateIn(int flags)
        private static global::wxSharp.Delegates.Func_bool_IntPtr_int _DoNavigateInDelegateInstance;

        private static bool _DoNavigateInDelegateHook(global::System.IntPtr __instance, int flags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoNavigateIn(flags);
        }

        // void DoEnable( bool enable ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_bool _DoEnableDelegateInstance;

        private static void _DoEnableDelegateHook(global::System.IntPtr __instance, bool enable)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoEnable(enable);
        }

        // wxBorder GetDefaultBorder() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr _GetDefaultBorderDelegateInstance;

        private static global::wxSharp.Border _GetDefaultBorderDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDefaultBorder();
            return __ret;
        }

        // wxBorder GetDefaultBorderForControl() const { return wxBORDER_THEME; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxBorder_IntPtr _GetDefaultBorderForControlDelegateInstance;

        private static global::wxSharp.Border _GetDefaultBorderForControlDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDefaultBorderForControl();
            return __ret;
        }

        // void DoClientToScreen( int *x, int *y ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoClientToScreenDelegateInstance;

        private static void _DoClientToScreenDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoClientToScreen(ref *x, ref *y);
        }

        // void DoScreenToClient( int *x, int *y ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoScreenToClientDelegateInstance;

        private static void _DoScreenToClientDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoScreenToClient(ref *x, ref *y);
        }

        // wxHitTest DoHitTest(wxCoord x, wxCoord y) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxHitTest_IntPtr_int_int _DoHitTestDelegateInstance;

        private static global::wxSharp.HitTest _DoHitTestDelegateHook(global::System.IntPtr __instance, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoHitTest(x, y);
            return __ret;
        }

        // void DoCaptureMouse() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoCaptureMouseDelegateInstance;

        private static void _DoCaptureMouseDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoCaptureMouse();
        }

        // void DoReleaseMouse() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoReleaseMouseDelegateInstance;

        private static void _DoReleaseMouseDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoReleaseMouse();
        }

        // void DoGetPosition( int *x, int *y ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetPositionDelegateInstance;

        private static void _DoGetPositionDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetPosition(ref *x, ref *y);
        }

        // void DoGetScreenPosition(int *x, int *y) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetScreenPositionDelegateInstance;

        private static void _DoGetScreenPositionDelegateHook(global::System.IntPtr __instance, int* x, int* y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetScreenPosition(ref *x, ref *y);
        }

        // void DoGetSize( int *width, int *height ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetSizeDelegateInstance;

        private static void _DoGetSizeDelegateHook(global::System.IntPtr __instance, int* width, int* height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetSize(ref *width, ref *height);
        }

        // void DoGetClientSize( int *width, int *height ) const wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr _DoGetClientSizeDelegateInstance;

        private static void _DoGetClientSizeDelegateHook(global::System.IntPtr __instance, int* width, int* height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoGetClientSize(ref *width, ref *height);
        }

        // wxSize DoGetBestSize() const wxOVERRIDE
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetBestSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetBestSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetBestSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // wxSize DoGetBestClientSize() const { return wxDefaultSize; }
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetBestClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetBestClientSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetBestClientSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // int DoGetBestClientHeight(int WXUNUSED(width)) const { return wxDefaultCoord; }
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _DoGetBestClientHeightDelegateInstance;

        private static int _DoGetBestClientHeightDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoGetBestClientHeight(_0);
        }

        // int DoGetBestClientWidth(int WXUNUSED(height)) const { return wxDefaultCoord; }
        private static global::wxSharp.Delegates.Func_int_IntPtr_int _DoGetBestClientWidthDelegateInstance;

        private static int _DoGetBestClientWidthDelegateHook(global::System.IntPtr __instance, int _0)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.DoGetBestClientWidth(_0);
        }

        // void DoSetSize(int x, int y, int width, int height, int sizeFlags = wxSIZE_AUTO) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int _DoSetSizeDelegateInstance;

        private static void _DoSetSizeDelegateHook(global::System.IntPtr __instance, int x, int y, int width, int height, int sizeFlags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetSize(x, y, width, height, sizeFlags);
        }

        // void DoSetClientSize(int width, int height) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int _DoSetClientSizeDelegateInstance;

        private static void _DoSetClientSizeDelegateHook(global::System.IntPtr __instance, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientSize(width, height);
        }

        // void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH )
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int_int_int _DoSetSizeHintsDelegateInstance;

        private static void _DoSetSizeHintsDelegateHook(global::System.IntPtr __instance, int minW, int minH, int maxW, int maxH, int incW, int incH)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetSizeHints(minW, minH, maxW, maxH, incW, incH);
        }

        // wxSize DoGetBorderSize() const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr _DoGetBorderSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetBorderSizeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetBorderSize();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        // void DoMoveWindow( int x, int y, int width, int height ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_int_int_int_int _DoMoveWindowDelegateInstance;

        private static void _DoMoveWindowDelegateHook(global::System.IntPtr __instance, int x, int y, int width, int height)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoMoveWindow(x, y, width, height);
        }

        // void DoCentre(int dir)
        private static global::wxSharp.Delegates.Action_IntPtr_int _DoCentreDelegateInstance;

        private static void _DoCentreDelegateHook(global::System.IntPtr __instance, int dir)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoCentre(dir);
        }

        // void DoSetToolTip( wxToolTip *tip ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_IntPtr _DoSetToolTipDelegateInstance;

        private static void _DoSetToolTipDelegateHook(global::System.IntPtr __instance, global::System.IntPtr tip)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.ToolTip __result0;
            if (tip == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.ToolTip.NativeToManagedMap.ContainsKey(tip))
                __result0 = (global::wxSharp.ToolTip) global::wxSharp.ToolTip.NativeToManagedMap[tip];
            else __result0 = global::wxSharp.ToolTip.__CreateInstance(tip);
            __target.DoSetToolTip(__result0);
        }

        // bool DoPopupMenu( wxMenu *menu, int x, int y ) wxOVERRIDE
        private static global::wxSharp.Delegates.Func_bool_IntPtr_IntPtr_int_int _DoPopupMenuDelegateInstance;

        private static bool _DoPopupMenuDelegateHook(global::System.IntPtr __instance, global::System.IntPtr menu, int x, int y)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Menu __result0;
            if (menu == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Menu.NativeToManagedMap.ContainsKey(menu))
                __result0 = (global::wxSharp.Menu) global::wxSharp.Menu.NativeToManagedMap[menu];
            else __result0 = global::wxSharp.Menu.__CreateInstance(menu);
            return __target.DoPopupMenu(__result0, x, y);
        }

        // void AdjustForParentClientOrigin(int& x, int& y, int sizeFlags = 0) const
        private static global::wxSharp.Delegates.Action_IntPtr_intPtr_intPtr_int _AdjustForParentClientOriginDelegateInstance;

        private static void _AdjustForParentClientOriginDelegateHook(global::System.IntPtr __instance, int* x, int* y, int sizeFlags)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.AdjustForParentClientOrigin(ref *x, ref *y, sizeFlags);
        }

        // void DoSetWindowVariant( wxWindowVariant variant ) wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr_wxSharp_wxWindowVariant _DoSetWindowVariantDelegateInstance;

        private static void _DoSetWindowVariantDelegateHook(global::System.IntPtr __instance, global::wxSharp.WindowVariant variant)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetWindowVariant(variant);
        }

        // void DoFreeze() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoFreezeDelegateInstance;

        private static void _DoFreezeDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoFreeze();
        }

        // void DoThaw() wxOVERRIDE
        private static global::wxSharp.Delegates.Action_IntPtr _DoThawDelegateInstance;

        private static void _DoThawDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoThaw();
        }

        // wxByte GetTransparent() const
        private static global::wxSharp.Delegates.Func_byte_IntPtr _GetTransparentDelegateInstance;

        private static byte _GetTransparentDelegateHook(global::System.IntPtr __instance)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            return __target.GetTransparent();
        }

        // void TriggerScrollEvent( wxEventType scrollEvent )
        private static global::wxSharp.Delegates.Action_IntPtr_int _TriggerScrollEventDelegateInstance;

        private static void _TriggerScrollEventDelegateHook(global::System.IntPtr __instance, int scrollEvent)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.TriggerScrollEvent(scrollEvent);
        }

        // wxSize DoGetSizeFromClientSize( const wxSize & size ) const
        private static global::wxSharp.Delegates.Func_wxSharp_wxSize___Internal_IntPtr_IntPtr _DoGetSizeFromClientSizeDelegateInstance;

        private static global::wxSharp.Size.__Internal _DoGetSizeFromClientSizeDelegateHook(global::System.IntPtr __instance, global::System.IntPtr size)
        {
            if (!NativeToManagedMap.ContainsKey(__instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (global::wxSharp.Panel) NativeToManagedMap[__instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            global::wxSharp.Size __result0;
            if (size == IntPtr.Zero) __result0 = null;
            else if (global::wxSharp.Size.NativeToManagedMap.ContainsKey(size))
                __result0 = (global::wxSharp.Size) global::wxSharp.Size.NativeToManagedMap[size];
            else __result0 = global::wxSharp.Size.__CreateInstance(size);
            var __ret = __target.DoGetSizeFromClientSize(__result0);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            return *(global::wxSharp.Size.__Internal*) __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            __OriginalVTables = new void*[] { *(void**) (__Instance + 0) };

            if (_Thunks == null)
            {
                _Thunks = new void*[162];
                _dtorDelegateInstance += _dtorDelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance).ToPointer();
                _CreateRefDataDelegateInstance += _CreateRefDataDelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateRefDataDelegateInstance).ToPointer();
                _CloneRefDataDelegateInstance += _CloneRefDataDelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CloneRefDataDelegateInstance).ToPointer();
                _SetNextHandlerDelegateInstance += _SetNextHandlerDelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetNextHandlerDelegateInstance).ToPointer();
                _SetPreviousHandlerDelegateInstance += _SetPreviousHandlerDelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_SetPreviousHandlerDelegateInstance).ToPointer();
                _ProcessEventDelegateInstance += _ProcessEventDelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_ProcessEventDelegateInstance).ToPointer();
                _QueueEventDelegateInstance += _QueueEventDelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_QueueEventDelegateInstance).ToPointer();
                _AddPendingEventDelegateInstance += _AddPendingEventDelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_AddPendingEventDelegateInstance).ToPointer();
                _TryBeforeDelegateInstance += _TryBeforeDelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_TryBeforeDelegateInstance).ToPointer();
                _TryAfterDelegateInstance += _TryAfterDelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_TryAfterDelegateInstance).ToPointer();
                _DoSetClientDataDelegateInstance += _DoSetClientDataDelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_DoSetClientDataDelegateInstance).ToPointer();
                _DoGetClientDataDelegateInstance += _DoGetClientDataDelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_DoGetClientDataDelegateInstance).ToPointer();
                _DestroyDelegateInstance += _DestroyDelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_DestroyDelegateInstance).ToPointer();
                _AdjustForLayoutDirectionDelegateInstance += _AdjustForLayoutDirectionDelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_AdjustForLayoutDirectionDelegateInstance).ToPointer();
                _SetIdDelegateInstance += _SetIdDelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_SetIdDelegateInstance).ToPointer();
                _RaiseDelegateInstance += _RaiseDelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_RaiseDelegateInstance).ToPointer();
                _LowerDelegateInstance += _LowerDelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_LowerDelegateInstance).ToPointer();
                _GetClientAreaOriginDelegateInstance += _GetClientAreaOriginDelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_GetClientAreaOriginDelegateInstance).ToPointer();
                _ClientToWindowSizeDelegateInstance += _ClientToWindowSizeDelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_ClientToWindowSizeDelegateInstance).ToPointer();
                _WindowToClientSizeDelegateInstance += _WindowToClientSizeDelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_WindowToClientSizeDelegateInstance).ToPointer();
                _GetEffectiveMinSizeDelegateInstance += _GetEffectiveMinSizeDelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_GetEffectiveMinSizeDelegateInstance).ToPointer();
                _FitDelegateInstance += _FitDelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_FitDelegateInstance).ToPointer();
                _FitInsideDelegateInstance += _FitInsideDelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_FitInsideDelegateInstance).ToPointer();
                _SetSizeHintsDelegateInstance += _SetSizeHintsDelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_SetSizeHintsDelegateInstance).ToPointer();
                _SetMinSizeDelegateInstance += _SetMinSizeDelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_SetMinSizeDelegateInstance).ToPointer();
                _SetMaxSizeDelegateInstance += _SetMaxSizeDelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_SetMaxSizeDelegateInstance).ToPointer();
                _SetMinClientSizeDelegateInstance += _SetMinClientSizeDelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_SetMinClientSizeDelegateInstance).ToPointer();
                _SetMaxClientSizeDelegateInstance += _SetMaxClientSizeDelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_SetMaxClientSizeDelegateInstance).ToPointer();
                _GetMinSizeDelegateInstance += _GetMinSizeDelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_GetMinSizeDelegateInstance).ToPointer();
                _GetMaxSizeDelegateInstance += _GetMaxSizeDelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_GetMaxSizeDelegateInstance).ToPointer();
                _GetMinClientSizeDelegateInstance += _GetMinClientSizeDelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_GetMinClientSizeDelegateInstance).ToPointer();
                _GetMaxClientSizeDelegateInstance += _GetMaxClientSizeDelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_GetMaxClientSizeDelegateInstance).ToPointer();
                _DoSetVirtualSizeDelegateInstance += _DoSetVirtualSizeDelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_DoSetVirtualSizeDelegateInstance).ToPointer();
                _DoGetVirtualSizeDelegateInstance += _DoGetVirtualSizeDelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_DoGetVirtualSizeDelegateInstance).ToPointer();
                _GetBestVirtualSizeDelegateInstance += _GetBestVirtualSizeDelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_GetBestVirtualSizeDelegateInstance).ToPointer();
                _GetContentScaleFactorDelegateInstance += _GetContentScaleFactorDelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_GetContentScaleFactorDelegateInstance).ToPointer();
                _GetWindowBorderSizeDelegateInstance += _GetWindowBorderSizeDelegateHook;
                _Thunks[36] = Marshal.GetFunctionPointerForDelegate(_GetWindowBorderSizeDelegateInstance).ToPointer();
                _InformFirstDirectionDelegateInstance += _InformFirstDirectionDelegateHook;
                _Thunks[37] = Marshal.GetFunctionPointerForDelegate(_InformFirstDirectionDelegateInstance).ToPointer();
                _SendSizeEventDelegateInstance += _SendSizeEventDelegateHook;
                _Thunks[38] = Marshal.GetFunctionPointerForDelegate(_SendSizeEventDelegateInstance).ToPointer();
                _BeginRepositioningChildrenDelegateInstance += _BeginRepositioningChildrenDelegateHook;
                _Thunks[39] = Marshal.GetFunctionPointerForDelegate(_BeginRepositioningChildrenDelegateInstance).ToPointer();
                _EndRepositioningChildrenDelegateInstance += _EndRepositioningChildrenDelegateHook;
                _Thunks[40] = Marshal.GetFunctionPointerForDelegate(_EndRepositioningChildrenDelegateInstance).ToPointer();
                _ShowDelegateInstance += _ShowDelegateHook;
                _Thunks[41] = Marshal.GetFunctionPointerForDelegate(_ShowDelegateInstance).ToPointer();
                _ShowWithEffectDelegateInstance += _ShowWithEffectDelegateHook;
                _Thunks[42] = Marshal.GetFunctionPointerForDelegate(_ShowWithEffectDelegateInstance).ToPointer();
                _HideWithEffectDelegateInstance += _HideWithEffectDelegateHook;
                _Thunks[43] = Marshal.GetFunctionPointerForDelegate(_HideWithEffectDelegateInstance).ToPointer();
                _EnableDelegateInstance += _EnableDelegateHook;
                _Thunks[44] = Marshal.GetFunctionPointerForDelegate(_EnableDelegateInstance).ToPointer();
                _IsShownDelegateInstance += _IsShownDelegateHook;
                _Thunks[45] = Marshal.GetFunctionPointerForDelegate(_IsShownDelegateInstance).ToPointer();
                _IsShownOnScreenDelegateInstance += _IsShownOnScreenDelegateHook;
                _Thunks[46] = Marshal.GetFunctionPointerForDelegate(_IsShownOnScreenDelegateInstance).ToPointer();
                _SetWindowStyleFlagDelegateInstance += _SetWindowStyleFlagDelegateHook;
                _Thunks[47] = Marshal.GetFunctionPointerForDelegate(_SetWindowStyleFlagDelegateInstance).ToPointer();
                _GetWindowStyleFlagDelegateInstance += _GetWindowStyleFlagDelegateHook;
                _Thunks[48] = Marshal.GetFunctionPointerForDelegate(_GetWindowStyleFlagDelegateInstance).ToPointer();
                _IsRetainedDelegateInstance += _IsRetainedDelegateHook;
                _Thunks[49] = Marshal.GetFunctionPointerForDelegate(_IsRetainedDelegateInstance).ToPointer();
                _SetExtraStyleDelegateInstance += _SetExtraStyleDelegateHook;
                _Thunks[50] = Marshal.GetFunctionPointerForDelegate(_SetExtraStyleDelegateInstance).ToPointer();
                _SetThemeEnabledDelegateInstance += _SetThemeEnabledDelegateHook;
                _Thunks[51] = Marshal.GetFunctionPointerForDelegate(_SetThemeEnabledDelegateInstance).ToPointer();
                _GetThemeEnabledDelegateInstance += _GetThemeEnabledDelegateHook;
                _Thunks[52] = Marshal.GetFunctionPointerForDelegate(_GetThemeEnabledDelegateInstance).ToPointer();
                _SetFocusDelegateInstance += _SetFocusDelegateHook;
                _Thunks[53] = Marshal.GetFunctionPointerForDelegate(_SetFocusDelegateInstance).ToPointer();
                _SetFocusFromKbdDelegateInstance += _SetFocusFromKbdDelegateHook;
                _Thunks[54] = Marshal.GetFunctionPointerForDelegate(_SetFocusFromKbdDelegateInstance).ToPointer();
                _HasFocusDelegateInstance += _HasFocusDelegateHook;
                _Thunks[55] = Marshal.GetFunctionPointerForDelegate(_HasFocusDelegateInstance).ToPointer();
                _AcceptsFocusDelegateInstance += _AcceptsFocusDelegateHook;
                _Thunks[56] = Marshal.GetFunctionPointerForDelegate(_AcceptsFocusDelegateInstance).ToPointer();
                _AcceptsFocusRecursivelyDelegateInstance += _AcceptsFocusRecursivelyDelegateHook;
                _Thunks[57] = Marshal.GetFunctionPointerForDelegate(_AcceptsFocusRecursivelyDelegateInstance).ToPointer();
                _AcceptsFocusFromKeyboardDelegateInstance += _AcceptsFocusFromKeyboardDelegateHook;
                _Thunks[58] = Marshal.GetFunctionPointerForDelegate(_AcceptsFocusFromKeyboardDelegateInstance).ToPointer();
                _CanBeFocusedDelegateInstance += _CanBeFocusedDelegateHook;
                _Thunks[59] = Marshal.GetFunctionPointerForDelegate(_CanBeFocusedDelegateInstance).ToPointer();
                _SetCanFocusDelegateInstance += _SetCanFocusDelegateHook;
                _Thunks[60] = Marshal.GetFunctionPointerForDelegate(_SetCanFocusDelegateInstance).ToPointer();
                _IsTopLevelDelegateInstance += _IsTopLevelDelegateHook;
                _Thunks[61] = Marshal.GetFunctionPointerForDelegate(_IsTopLevelDelegateInstance).ToPointer();
                _IsClientAreaChildDelegateInstance += _IsClientAreaChildDelegateHook;
                _Thunks[62] = Marshal.GetFunctionPointerForDelegate(_IsClientAreaChildDelegateInstance).ToPointer();
                _ValidateDelegateInstance += _ValidateDelegateHook;
                _Thunks[63] = Marshal.GetFunctionPointerForDelegate(_ValidateDelegateInstance).ToPointer();
                _TransferDataToWindowDelegateInstance += _TransferDataToWindowDelegateHook;
                _Thunks[64] = Marshal.GetFunctionPointerForDelegate(_TransferDataToWindowDelegateInstance).ToPointer();
                _TransferDataFromWindowDelegateInstance += _TransferDataFromWindowDelegateHook;
                _Thunks[65] = Marshal.GetFunctionPointerForDelegate(_TransferDataFromWindowDelegateInstance).ToPointer();
                _InitDialogDelegateInstance += _InitDialogDelegateHook;
                _Thunks[66] = Marshal.GetFunctionPointerForDelegate(_InitDialogDelegateInstance).ToPointer();
                _RegisterHotKeyDelegateInstance += _RegisterHotKeyDelegateHook;
                _Thunks[67] = Marshal.GetFunctionPointerForDelegate(_RegisterHotKeyDelegateInstance).ToPointer();
                _UnregisterHotKeyDelegateInstance += _UnregisterHotKeyDelegateHook;
                _Thunks[68] = Marshal.GetFunctionPointerForDelegate(_UnregisterHotKeyDelegateInstance).ToPointer();
                _GetDPIDelegateInstance += _GetDPIDelegateHook;
                _Thunks[69] = Marshal.GetFunctionPointerForDelegate(_GetDPIDelegateInstance).ToPointer();
                _WarpPointerDelegateInstance += _WarpPointerDelegateHook;
                _Thunks[70] = Marshal.GetFunctionPointerForDelegate(_WarpPointerDelegateInstance).ToPointer();
                _HasCaptureDelegateInstance += _HasCaptureDelegateHook;
                _Thunks[71] = Marshal.GetFunctionPointerForDelegate(_HasCaptureDelegateInstance).ToPointer();
                _EnableTouchEventsDelegateInstance += _EnableTouchEventsDelegateHook;
                _Thunks[72] = Marshal.GetFunctionPointerForDelegate(_EnableTouchEventsDelegateInstance).ToPointer();
                _RefreshDelegateInstance += _RefreshDelegateHook;
                _Thunks[73] = Marshal.GetFunctionPointerForDelegate(_RefreshDelegateInstance).ToPointer();
                _UpdateDelegateInstance += _UpdateDelegateHook;
                _Thunks[74] = Marshal.GetFunctionPointerForDelegate(_UpdateDelegateInstance).ToPointer();
                _ClearBackgroundDelegateInstance += _ClearBackgroundDelegateHook;
                _Thunks[75] = Marshal.GetFunctionPointerForDelegate(_ClearBackgroundDelegateInstance).ToPointer();
                _PrepareDCDelegateInstance += _PrepareDCDelegateHook;
                _Thunks[76] = Marshal.GetFunctionPointerForDelegate(_PrepareDCDelegateInstance).ToPointer();
                _SetDoubleBufferedDelegateInstance += _SetDoubleBufferedDelegateHook;
                _Thunks[77] = Marshal.GetFunctionPointerForDelegate(_SetDoubleBufferedDelegateInstance).ToPointer();
                _IsDoubleBufferedDelegateInstance += _IsDoubleBufferedDelegateHook;
                _Thunks[78] = Marshal.GetFunctionPointerForDelegate(_IsDoubleBufferedDelegateInstance).ToPointer();
                _DoIsExposedDelegateInstance += _DoIsExposedDelegateHook;
                _Thunks[79] = Marshal.GetFunctionPointerForDelegate(_DoIsExposedDelegateInstance).ToPointer();
                _DoIsExposed_1DelegateInstance += _DoIsExposed_1DelegateHook;
                _Thunks[80] = Marshal.GetFunctionPointerForDelegate(_DoIsExposed_1DelegateInstance).ToPointer();
                _GetDefaultAttributesDelegateInstance += _GetDefaultAttributesDelegateHook;
                _Thunks[81] = Marshal.GetFunctionPointerForDelegate(_GetDefaultAttributesDelegateInstance).ToPointer();
                _SetBackgroundColourDelegateInstance += _SetBackgroundColourDelegateHook;
                _Thunks[82] = Marshal.GetFunctionPointerForDelegate(_SetBackgroundColourDelegateInstance).ToPointer();
                _SetForegroundColourDelegateInstance += _SetForegroundColourDelegateHook;
                _Thunks[83] = Marshal.GetFunctionPointerForDelegate(_SetForegroundColourDelegateInstance).ToPointer();
                _SetBackgroundStyleDelegateInstance += _SetBackgroundStyleDelegateHook;
                _Thunks[84] = Marshal.GetFunctionPointerForDelegate(_SetBackgroundStyleDelegateInstance).ToPointer();
                _HasTransparentBackgroundDelegateInstance += _HasTransparentBackgroundDelegateHook;
                _Thunks[85] = Marshal.GetFunctionPointerForDelegate(_HasTransparentBackgroundDelegateInstance).ToPointer();
                _GetCharHeightDelegateInstance += _GetCharHeightDelegateHook;
                _Thunks[86] = Marshal.GetFunctionPointerForDelegate(_GetCharHeightDelegateInstance).ToPointer();
                _GetCharWidthDelegateInstance += _GetCharWidthDelegateHook;
                _Thunks[87] = Marshal.GetFunctionPointerForDelegate(_GetCharWidthDelegateInstance).ToPointer();
                _UpdateWindowUIDelegateInstance += _UpdateWindowUIDelegateHook;
                _Thunks[88] = Marshal.GetFunctionPointerForDelegate(_UpdateWindowUIDelegateInstance).ToPointer();
                _DoUpdateWindowUIDelegateInstance += _DoUpdateWindowUIDelegateHook;
                _Thunks[89] = Marshal.GetFunctionPointerForDelegate(_DoUpdateWindowUIDelegateInstance).ToPointer();
                _HasMultiplePagesDelegateInstance += _HasMultiplePagesDelegateHook;
                _Thunks[90] = Marshal.GetFunctionPointerForDelegate(_HasMultiplePagesDelegateInstance).ToPointer();
                _CanScrollDelegateInstance += _CanScrollDelegateHook;
                _Thunks[91] = Marshal.GetFunctionPointerForDelegate(_CanScrollDelegateInstance).ToPointer();
                _SetScrollbarDelegateInstance += _SetScrollbarDelegateHook;
                _Thunks[92] = Marshal.GetFunctionPointerForDelegate(_SetScrollbarDelegateInstance).ToPointer();
                _SetScrollPosDelegateInstance += _SetScrollPosDelegateHook;
                _Thunks[93] = Marshal.GetFunctionPointerForDelegate(_SetScrollPosDelegateInstance).ToPointer();
                _GetScrollPosDelegateInstance += _GetScrollPosDelegateHook;
                _Thunks[94] = Marshal.GetFunctionPointerForDelegate(_GetScrollPosDelegateInstance).ToPointer();
                _GetScrollThumbDelegateInstance += _GetScrollThumbDelegateHook;
                _Thunks[95] = Marshal.GetFunctionPointerForDelegate(_GetScrollThumbDelegateInstance).ToPointer();
                _GetScrollRangeDelegateInstance += _GetScrollRangeDelegateHook;
                _Thunks[96] = Marshal.GetFunctionPointerForDelegate(_GetScrollRangeDelegateInstance).ToPointer();
                _ScrollWindowDelegateInstance += _ScrollWindowDelegateHook;
                _Thunks[97] = Marshal.GetFunctionPointerForDelegate(_ScrollWindowDelegateInstance).ToPointer();
                _ScrollLinesDelegateInstance += _ScrollLinesDelegateHook;
                _Thunks[98] = Marshal.GetFunctionPointerForDelegate(_ScrollLinesDelegateInstance).ToPointer();
                _ScrollPagesDelegateInstance += _ScrollPagesDelegateHook;
                _Thunks[99] = Marshal.GetFunctionPointerForDelegate(_ScrollPagesDelegateInstance).ToPointer();
                _AlwaysShowScrollbarsDelegateInstance += _AlwaysShowScrollbarsDelegateHook;
                _Thunks[100] = Marshal.GetFunctionPointerForDelegate(_AlwaysShowScrollbarsDelegateInstance).ToPointer();
                _IsScrollbarAlwaysShownDelegateInstance += _IsScrollbarAlwaysShownDelegateHook;
                _Thunks[101] = Marshal.GetFunctionPointerForDelegate(_IsScrollbarAlwaysShownDelegateInstance).ToPointer();
                _SetDropTargetDelegateInstance += _SetDropTargetDelegateHook;
                _Thunks[102] = Marshal.GetFunctionPointerForDelegate(_SetDropTargetDelegateInstance).ToPointer();
                _GetDropTargetDelegateInstance += _GetDropTargetDelegateHook;
                _Thunks[103] = Marshal.GetFunctionPointerForDelegate(_GetDropTargetDelegateInstance).ToPointer();
                _DragAcceptFilesDelegateInstance += _DragAcceptFilesDelegateHook;
                _Thunks[104] = Marshal.GetFunctionPointerForDelegate(_DragAcceptFilesDelegateInstance).ToPointer();
                _SetConstraintSizesDelegateInstance += _SetConstraintSizesDelegateHook;
                _Thunks[105] = Marshal.GetFunctionPointerForDelegate(_SetConstraintSizesDelegateInstance).ToPointer();
                _LayoutPhase1DelegateInstance += _LayoutPhase1DelegateHook;
                _Thunks[106] = Marshal.GetFunctionPointerForDelegate(_LayoutPhase1DelegateInstance).ToPointer();
                _LayoutPhase2DelegateInstance += _LayoutPhase2DelegateHook;
                _Thunks[107] = Marshal.GetFunctionPointerForDelegate(_LayoutPhase2DelegateInstance).ToPointer();
                _DoPhaseDelegateInstance += _DoPhaseDelegateHook;
                _Thunks[108] = Marshal.GetFunctionPointerForDelegate(_DoPhaseDelegateInstance).ToPointer();
                _SetSizeConstraintDelegateInstance += _SetSizeConstraintDelegateHook;
                _Thunks[109] = Marshal.GetFunctionPointerForDelegate(_SetSizeConstraintDelegateInstance).ToPointer();
                _MoveConstraintDelegateInstance += _MoveConstraintDelegateHook;
                _Thunks[110] = Marshal.GetFunctionPointerForDelegate(_MoveConstraintDelegateInstance).ToPointer();
                _GetSizeConstraintDelegateInstance += _GetSizeConstraintDelegateHook;
                _Thunks[111] = Marshal.GetFunctionPointerForDelegate(_GetSizeConstraintDelegateInstance).ToPointer();
                _GetClientSizeConstraintDelegateInstance += _GetClientSizeConstraintDelegateHook;
                _Thunks[112] = Marshal.GetFunctionPointerForDelegate(_GetClientSizeConstraintDelegateInstance).ToPointer();
                _GetPositionConstraintDelegateInstance += _GetPositionConstraintDelegateHook;
                _Thunks[113] = Marshal.GetFunctionPointerForDelegate(_GetPositionConstraintDelegateInstance).ToPointer();
                _LayoutDelegateInstance += _LayoutDelegateHook;
                _Thunks[114] = Marshal.GetFunctionPointerForDelegate(_LayoutDelegateInstance).ToPointer();
                _SetTransparentDelegateInstance += _SetTransparentDelegateHook;
                _Thunks[115] = Marshal.GetFunctionPointerForDelegate(_SetTransparentDelegateInstance).ToPointer();
                _CanSetTransparentDelegateInstance += _CanSetTransparentDelegateHook;
                _Thunks[116] = Marshal.GetFunctionPointerForDelegate(_CanSetTransparentDelegateInstance).ToPointer();
                _OnInternalIdleDelegateInstance += _OnInternalIdleDelegateHook;
                _Thunks[117] = Marshal.GetFunctionPointerForDelegate(_OnInternalIdleDelegateInstance).ToPointer();
                _SendIdleEventsDelegateInstance += _SendIdleEventsDelegateHook;
                _Thunks[118] = Marshal.GetFunctionPointerForDelegate(_SendIdleEventsDelegateInstance).ToPointer();
                _GetHandleDelegateInstance += _GetHandleDelegateHook;
                _Thunks[119] = Marshal.GetFunctionPointerForDelegate(_GetHandleDelegateInstance).ToPointer();
                _AssociateHandleDelegateInstance += _AssociateHandleDelegateHook;
                _Thunks[120] = Marshal.GetFunctionPointerForDelegate(_AssociateHandleDelegateInstance).ToPointer();
                _DissociateHandleDelegateInstance += _DissociateHandleDelegateHook;
                _Thunks[121] = Marshal.GetFunctionPointerForDelegate(_DissociateHandleDelegateInstance).ToPointer();
                _InheritAttributesDelegateInstance += _InheritAttributesDelegateHook;
                _Thunks[122] = Marshal.GetFunctionPointerForDelegate(_InheritAttributesDelegateInstance).ToPointer();
                _ShouldInheritColoursDelegateInstance += _ShouldInheritColoursDelegateHook;
                _Thunks[123] = Marshal.GetFunctionPointerForDelegate(_ShouldInheritColoursDelegateInstance).ToPointer();
                _CanBeOutsideClientAreaDelegateInstance += _CanBeOutsideClientAreaDelegateHook;
                _Thunks[124] = Marshal.GetFunctionPointerForDelegate(_CanBeOutsideClientAreaDelegateInstance).ToPointer();
                _CanApplyThemeBorderDelegateInstance += _CanApplyThemeBorderDelegateHook;
                _Thunks[125] = Marshal.GetFunctionPointerForDelegate(_CanApplyThemeBorderDelegateInstance).ToPointer();
                _GetMainWindowOfCompositeControlDelegateInstance += _GetMainWindowOfCompositeControlDelegateHook;
                _Thunks[126] = Marshal.GetFunctionPointerForDelegate(_GetMainWindowOfCompositeControlDelegateInstance).ToPointer();
                _IsTopNavigationDomainDelegateInstance += _IsTopNavigationDomainDelegateHook;
                _Thunks[127] = Marshal.GetFunctionPointerForDelegate(_IsTopNavigationDomainDelegateInstance).ToPointer();
                _WXGetTextEntryDelegateInstance += _WXGetTextEntryDelegateHook;
                _Thunks[128] = Marshal.GetFunctionPointerForDelegate(_WXGetTextEntryDelegateInstance).ToPointer();
                _DoMoveInTabOrderDelegateInstance += _DoMoveInTabOrderDelegateHook;
                _Thunks[129] = Marshal.GetFunctionPointerForDelegate(_DoMoveInTabOrderDelegateInstance).ToPointer();
                _DoNavigateInDelegateInstance += _DoNavigateInDelegateHook;
                _Thunks[130] = Marshal.GetFunctionPointerForDelegate(_DoNavigateInDelegateInstance).ToPointer();
                _DoEnableDelegateInstance += _DoEnableDelegateHook;
                _Thunks[131] = Marshal.GetFunctionPointerForDelegate(_DoEnableDelegateInstance).ToPointer();
                _GetDefaultBorderDelegateInstance += _GetDefaultBorderDelegateHook;
                _Thunks[132] = Marshal.GetFunctionPointerForDelegate(_GetDefaultBorderDelegateInstance).ToPointer();
                _GetDefaultBorderForControlDelegateInstance += _GetDefaultBorderForControlDelegateHook;
                _Thunks[133] = Marshal.GetFunctionPointerForDelegate(_GetDefaultBorderForControlDelegateInstance).ToPointer();
                _DoClientToScreenDelegateInstance += _DoClientToScreenDelegateHook;
                _Thunks[134] = Marshal.GetFunctionPointerForDelegate(_DoClientToScreenDelegateInstance).ToPointer();
                _DoScreenToClientDelegateInstance += _DoScreenToClientDelegateHook;
                _Thunks[135] = Marshal.GetFunctionPointerForDelegate(_DoScreenToClientDelegateInstance).ToPointer();
                _DoHitTestDelegateInstance += _DoHitTestDelegateHook;
                _Thunks[136] = Marshal.GetFunctionPointerForDelegate(_DoHitTestDelegateInstance).ToPointer();
                _DoCaptureMouseDelegateInstance += _DoCaptureMouseDelegateHook;
                _Thunks[137] = Marshal.GetFunctionPointerForDelegate(_DoCaptureMouseDelegateInstance).ToPointer();
                _DoReleaseMouseDelegateInstance += _DoReleaseMouseDelegateHook;
                _Thunks[138] = Marshal.GetFunctionPointerForDelegate(_DoReleaseMouseDelegateInstance).ToPointer();
                _DoGetPositionDelegateInstance += _DoGetPositionDelegateHook;
                _Thunks[139] = Marshal.GetFunctionPointerForDelegate(_DoGetPositionDelegateInstance).ToPointer();
                _DoGetScreenPositionDelegateInstance += _DoGetScreenPositionDelegateHook;
                _Thunks[140] = Marshal.GetFunctionPointerForDelegate(_DoGetScreenPositionDelegateInstance).ToPointer();
                _DoGetSizeDelegateInstance += _DoGetSizeDelegateHook;
                _Thunks[141] = Marshal.GetFunctionPointerForDelegate(_DoGetSizeDelegateInstance).ToPointer();
                _DoGetClientSizeDelegateInstance += _DoGetClientSizeDelegateHook;
                _Thunks[142] = Marshal.GetFunctionPointerForDelegate(_DoGetClientSizeDelegateInstance).ToPointer();
                _DoGetBestSizeDelegateInstance += _DoGetBestSizeDelegateHook;
                _Thunks[143] = Marshal.GetFunctionPointerForDelegate(_DoGetBestSizeDelegateInstance).ToPointer();
                _DoGetBestClientSizeDelegateInstance += _DoGetBestClientSizeDelegateHook;
                _Thunks[144] = Marshal.GetFunctionPointerForDelegate(_DoGetBestClientSizeDelegateInstance).ToPointer();
                _DoGetBestClientHeightDelegateInstance += _DoGetBestClientHeightDelegateHook;
                _Thunks[145] = Marshal.GetFunctionPointerForDelegate(_DoGetBestClientHeightDelegateInstance).ToPointer();
                _DoGetBestClientWidthDelegateInstance += _DoGetBestClientWidthDelegateHook;
                _Thunks[146] = Marshal.GetFunctionPointerForDelegate(_DoGetBestClientWidthDelegateInstance).ToPointer();
                _DoSetSizeDelegateInstance += _DoSetSizeDelegateHook;
                _Thunks[147] = Marshal.GetFunctionPointerForDelegate(_DoSetSizeDelegateInstance).ToPointer();
                _DoSetClientSizeDelegateInstance += _DoSetClientSizeDelegateHook;
                _Thunks[148] = Marshal.GetFunctionPointerForDelegate(_DoSetClientSizeDelegateInstance).ToPointer();
                _DoSetSizeHintsDelegateInstance += _DoSetSizeHintsDelegateHook;
                _Thunks[149] = Marshal.GetFunctionPointerForDelegate(_DoSetSizeHintsDelegateInstance).ToPointer();
                _DoGetBorderSizeDelegateInstance += _DoGetBorderSizeDelegateHook;
                _Thunks[150] = Marshal.GetFunctionPointerForDelegate(_DoGetBorderSizeDelegateInstance).ToPointer();
                _DoMoveWindowDelegateInstance += _DoMoveWindowDelegateHook;
                _Thunks[151] = Marshal.GetFunctionPointerForDelegate(_DoMoveWindowDelegateInstance).ToPointer();
                _DoCentreDelegateInstance += _DoCentreDelegateHook;
                _Thunks[152] = Marshal.GetFunctionPointerForDelegate(_DoCentreDelegateInstance).ToPointer();
                _DoSetToolTipDelegateInstance += _DoSetToolTipDelegateHook;
                _Thunks[153] = Marshal.GetFunctionPointerForDelegate(_DoSetToolTipDelegateInstance).ToPointer();
                _DoPopupMenuDelegateInstance += _DoPopupMenuDelegateHook;
                _Thunks[154] = Marshal.GetFunctionPointerForDelegate(_DoPopupMenuDelegateInstance).ToPointer();
                _AdjustForParentClientOriginDelegateInstance += _AdjustForParentClientOriginDelegateHook;
                _Thunks[155] = Marshal.GetFunctionPointerForDelegate(_AdjustForParentClientOriginDelegateInstance).ToPointer();
                _DoSetWindowVariantDelegateInstance += _DoSetWindowVariantDelegateHook;
                _Thunks[156] = Marshal.GetFunctionPointerForDelegate(_DoSetWindowVariantDelegateInstance).ToPointer();
                _DoFreezeDelegateInstance += _DoFreezeDelegateHook;
                _Thunks[157] = Marshal.GetFunctionPointerForDelegate(_DoFreezeDelegateInstance).ToPointer();
                _DoThawDelegateInstance += _DoThawDelegateHook;
                _Thunks[158] = Marshal.GetFunctionPointerForDelegate(_DoThawDelegateInstance).ToPointer();
                _GetTransparentDelegateInstance += _GetTransparentDelegateHook;
                _Thunks[159] = Marshal.GetFunctionPointerForDelegate(_GetTransparentDelegateInstance).ToPointer();
                _TriggerScrollEventDelegateInstance += _TriggerScrollEventDelegateHook;
                _Thunks[160] = Marshal.GetFunctionPointerForDelegate(_TriggerScrollEventDelegateInstance).ToPointer();
                _DoGetSizeFromClientSizeDelegateInstance += _DoGetSizeFromClientSizeDelegateHook;
                _Thunks[161] = Marshal.GetFunctionPointerForDelegate(_DoGetSizeFromClientSizeDelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(215 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 12);
                    *(void**) (vfptr0 + 16) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 16);
                    *(void**) (vfptr0 + 20) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 20);
                    *(void**) (vfptr0 + 24) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 24);
                    *(void**) (vfptr0 + 28) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 28);
                    *(void**) (vfptr0 + 32) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 32);
                    *(void**) (vfptr0 + 36) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 36);
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 44);
                    *(void**) (vfptr0 + 48) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 48);
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 72);
                    *(void**) (vfptr0 + 76) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 76);
                    *(void**) (vfptr0 + 80) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 80);
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 108);
                    *(void**) (vfptr0 + 112) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 112);
                    *(void**) (vfptr0 + 116) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 116);
                    *(void**) (vfptr0 + 120) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 120);
                    *(void**) (vfptr0 + 124) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 124);
                    *(void**) (vfptr0 + 128) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 128);
                    *(void**) (vfptr0 + 132) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 132);
                    *(void**) (vfptr0 + 136) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 136);
                    *(void**) (vfptr0 + 140) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 140);
                    *(void**) (vfptr0 + 144) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 144);
                    *(void**) (vfptr0 + 148) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 148);
                    *(void**) (vfptr0 + 152) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 152);
                    *(void**) (vfptr0 + 156) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 156);
                    *(void**) (vfptr0 + 160) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 160);
                    *(void**) (vfptr0 + 164) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 164);
                    *(void**) (vfptr0 + 168) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 168);
                    *(void**) (vfptr0 + 172) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 172);
                    *(void**) (vfptr0 + 176) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 176);
                    *(void**) (vfptr0 + 180) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 180);
                    *(void**) (vfptr0 + 184) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 184);
                    *(void**) (vfptr0 + 188) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 188);
                    *(void**) (vfptr0 + 192) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 192);
                    *(void**) (vfptr0 + 196) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 196);
                    *(void**) (vfptr0 + 200) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 200);
                    *(void**) (vfptr0 + 204) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 204);
                    *(void**) (vfptr0 + 208) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 208);
                    *(void**) (vfptr0 + 212) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 212);
                    *(void**) (vfptr0 + 216) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 216);
                    *(void**) (vfptr0 + 220) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 220);
                    *(void**) (vfptr0 + 224) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 224);
                    *(void**) (vfptr0 + 228) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 228);
                    *(void**) (vfptr0 + 232) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 232);
                    *(void**) (vfptr0 + 236) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 236);
                    *(void**) (vfptr0 + 240) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 240);
                    *(void**) (vfptr0 + 244) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 244);
                    *(void**) (vfptr0 + 248) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 248);
                    *(void**) (vfptr0 + 252) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 252);
                    *(void**) (vfptr0 + 256) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 256);
                    *(void**) (vfptr0 + 260) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 260);
                    *(void**) (vfptr0 + 264) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 264);
                    *(void**) (vfptr0 + 268) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 268);
                    *(void**) (vfptr0 + 272) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 272);
                    *(void**) (vfptr0 + 276) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 276);
                    *(void**) (vfptr0 + 280) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 280);
                    *(void**) (vfptr0 + 284) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 284);
                    *(void**) (vfptr0 + 288) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 288);
                    *(void**) (vfptr0 + 292) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 292);
                    *(void**) (vfptr0 + 296) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 296);
                    *(void**) (vfptr0 + 300) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 300);
                    *(void**) (vfptr0 + 304) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 304);
                    *(void**) (vfptr0 + 308) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 308);
                    *(void**) (vfptr0 + 312) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 312);
                    *(void**) (vfptr0 + 316) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 316);
                    *(void**) (vfptr0 + 320) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 320);
                    *(void**) (vfptr0 + 324) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 324);
                    *(void**) (vfptr0 + 328) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 328);
                    *(void**) (vfptr0 + 332) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 332);
                    *(void**) (vfptr0 + 336) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 336);
                    *(void**) (vfptr0 + 340) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 340);
                    *(void**) (vfptr0 + 344) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 344);
                    *(void**) (vfptr0 + 348) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 348);
                    *(void**) (vfptr0 + 352) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 352);
                    *(void**) (vfptr0 + 356) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 356);
                    *(void**) (vfptr0 + 360) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 360);
                    *(void**) (vfptr0 + 364) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 364);
                    *(void**) (vfptr0 + 368) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 368);
                    *(void**) (vfptr0 + 372) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 372);
                    *(void**) (vfptr0 + 376) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 376);
                    *(void**) (vfptr0 + 380) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 380);
                    *(void**) (vfptr0 + 384) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 384);
                    *(void**) (vfptr0 + 388) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 388);
                    *(void**) (vfptr0 + 392) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 392);
                    *(void**) (vfptr0 + 396) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 396);
                    *(void**) (vfptr0 + 400) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 400);
                    *(void**) (vfptr0 + 404) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 404);
                    *(void**) (vfptr0 + 408) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 408);
                    *(void**) (vfptr0 + 412) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 412);
                    *(void**) (vfptr0 + 416) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 416);
                    *(void**) (vfptr0 + 420) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 420);
                    *(void**) (vfptr0 + 424) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 424);
                    *(void**) (vfptr0 + 428) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 428);
                    *(void**) (vfptr0 + 432) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 432);
                    *(void**) (vfptr0 + 436) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 436);
                    *(void**) (vfptr0 + 440) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 440);
                    *(void**) (vfptr0 + 444) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 444);
                    *(void**) (vfptr0 + 448) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 448);
                    *(void**) (vfptr0 + 452) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 452);
                    *(void**) (vfptr0 + 456) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 456);
                    *(void**) (vfptr0 + 460) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 460);
                    *(void**) (vfptr0 + 464) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 464);
                    *(void**) (vfptr0 + 468) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 468);
                    *(void**) (vfptr0 + 472) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 472);
                    *(void**) (vfptr0 + 476) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 476);
                    *(void**) (vfptr0 + 480) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 480);
                    *(void**) (vfptr0 + 484) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 484);
                    *(void**) (vfptr0 + 488) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 488);
                    *(void**) (vfptr0 + 492) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 492);
                    *(void**) (vfptr0 + 496) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 496);
                    *(void**) (vfptr0 + 500) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 500);
                    *(void**) (vfptr0 + 504) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 504);
                    *(void**) (vfptr0 + 508) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 508);
                    *(void**) (vfptr0 + 512) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 512);
                    *(void**) (vfptr0 + 516) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 516);
                    *(void**) (vfptr0 + 520) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 520);
                    *(void**) (vfptr0 + 524) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 524);
                    *(void**) (vfptr0 + 528) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 528);
                    *(void**) (vfptr0 + 532) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 532);
                    *(void**) (vfptr0 + 536) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 536);
                    *(void**) (vfptr0 + 540) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 540);
                    *(void**) (vfptr0 + 544) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 544);
                    *(void**) (vfptr0 + 548) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 548);
                    *(void**) (vfptr0 + 552) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 552);
                    *(void**) (vfptr0 + 556) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 556);
                    *(void**) (vfptr0 + 560) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 560);
                    *(void**) (vfptr0 + 564) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 564);
                    *(void**) (vfptr0 + 568) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 568);
                    *(void**) (vfptr0 + 572) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 572);
                    *(void**) (vfptr0 + 576) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 576);
                    *(void**) (vfptr0 + 580) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 580);
                    *(void**) (vfptr0 + 584) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 584);
                    *(void**) (vfptr0 + 588) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 588);
                    *(void**) (vfptr0 + 592) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 592);
                    *(void**) (vfptr0 + 596) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 596);
                    *(void**) (vfptr0 + 600) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 600);
                    *(void**) (vfptr0 + 604) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 604);
                    *(void**) (vfptr0 + 608) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 608);
                    *(void**) (vfptr0 + 612) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 612);
                    *(void**) (vfptr0 + 616) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 616);
                    *(void**) (vfptr0 + 620) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 620);
                    *(void**) (vfptr0 + 624) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 624);
                    *(void**) (vfptr0 + 628) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 628);
                    *(void**) (vfptr0 + 632) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 632);
                    *(void**) (vfptr0 + 636) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 636);
                    *(void**) (vfptr0 + 640) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 640);
                    *(void**) (vfptr0 + 644) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 644);
                    *(void**) (vfptr0 + 648) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 648);
                    *(void**) (vfptr0 + 652) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 652);
                    *(void**) (vfptr0 + 656) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 656);
                    *(void**) (vfptr0 + 660) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 660);
                    *(void**) (vfptr0 + 664) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 664);
                    *(void**) (vfptr0 + 668) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 668);
                    *(void**) (vfptr0 + 672) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 672);
                    *(void**) (vfptr0 + 676) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 676);
                    *(void**) (vfptr0 + 680) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 680);
                    *(void**) (vfptr0 + 684) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 684);
                    *(void**) (vfptr0 + 688) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 688);
                    *(void**) (vfptr0 + 692) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 692);
                    *(void**) (vfptr0 + 696) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 696);
                    *(void**) (vfptr0 + 700) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 700);
                    *(void**) (vfptr0 + 704) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 704);
                    *(void**) (vfptr0 + 708) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 708);
                    *(void**) (vfptr0 + 712) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 712);
                    *(void**) (vfptr0 + 716) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 716);
                    *(void**) (vfptr0 + 720) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 720);
                    *(void**) (vfptr0 + 724) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 724);
                    *(void**) (vfptr0 + 728) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 728);
                    *(void**) (vfptr0 + 732) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 732);
                    *(void**) (vfptr0 + 736) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 736);
                    *(void**) (vfptr0 + 740) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 740);
                    *(void**) (vfptr0 + 744) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 744);
                    *(void**) (vfptr0 + 748) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 748);
                    *(void**) (vfptr0 + 752) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 752);
                    *(void**) (vfptr0 + 756) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 756);
                    *(void**) (vfptr0 + 760) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 760);
                    *(void**) (vfptr0 + 764) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 764);
                    *(void**) (vfptr0 + 768) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 768);
                    *(void**) (vfptr0 + 772) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 772);
                    *(void**) (vfptr0 + 776) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 776);
                    *(void**) (vfptr0 + 780) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 780);
                    *(void**) (vfptr0 + 784) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 784);
                    *(void**) (vfptr0 + 788) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 788);
                    *(void**) (vfptr0 + 792) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 792);
                    *(void**) (vfptr0 + 796) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 796);
                    *(void**) (vfptr0 + 800) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 800);
                    *(void**) (vfptr0 + 804) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 804);
                    *(void**) (vfptr0 + 808) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 808);
                    *(void**) (vfptr0 + 812) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 812);
                    *(void**) (vfptr0 + 816) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 816);
                    *(void**) (vfptr0 + 820) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 820);
                    *(void**) (vfptr0 + 824) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 824);
                    *(void**) (vfptr0 + 828) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 828);
                    *(void**) (vfptr0 + 832) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 832);
                    *(void**) (vfptr0 + 836) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 836);
                    *(void**) (vfptr0 + 840) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 840);
                    *(void**) (vfptr0 + 844) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 844);
                    *(void**) (vfptr0 + 848) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 848);
                }

                *(void**) (__Instance + 0) = __ManagedVTablesDtorOnly[0];
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(215 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**) (vfptr0 + -8) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -8);
                    *(void**) (vfptr0 + -4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + -4);
                    *(void**) (vfptr0 + 0) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 0);
                    *(void**) (vfptr0 + 4) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 4);
                    *(void**) (vfptr0 + 8) = _Thunks[0];
                    *(void**) (vfptr0 + 12) = _Thunks[1];
                    *(void**) (vfptr0 + 16) = _Thunks[2];
                    *(void**) (vfptr0 + 20) = _Thunks[3];
                    *(void**) (vfptr0 + 24) = _Thunks[4];
                    *(void**) (vfptr0 + 28) = _Thunks[5];
                    *(void**) (vfptr0 + 32) = _Thunks[6];
                    *(void**) (vfptr0 + 36) = _Thunks[7];
                    *(void**) (vfptr0 + 40) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 40);
                    *(void**) (vfptr0 + 44) = _Thunks[8];
                    *(void**) (vfptr0 + 48) = _Thunks[9];
                    *(void**) (vfptr0 + 52) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 52);
                    *(void**) (vfptr0 + 56) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 56);
                    *(void**) (vfptr0 + 60) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 60);
                    *(void**) (vfptr0 + 64) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 64);
                    *(void**) (vfptr0 + 68) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 68);
                    *(void**) (vfptr0 + 72) = _Thunks[10];
                    *(void**) (vfptr0 + 76) = _Thunks[11];
                    *(void**) (vfptr0 + 80) = _Thunks[12];
                    *(void**) (vfptr0 + 84) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 84);
                    *(void**) (vfptr0 + 88) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 88);
                    *(void**) (vfptr0 + 92) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 92);
                    *(void**) (vfptr0 + 96) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 96);
                    *(void**) (vfptr0 + 100) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 100);
                    *(void**) (vfptr0 + 104) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 104);
                    *(void**) (vfptr0 + 108) = _Thunks[13];
                    *(void**) (vfptr0 + 112) = _Thunks[14];
                    *(void**) (vfptr0 + 116) = _Thunks[15];
                    *(void**) (vfptr0 + 120) = _Thunks[16];
                    *(void**) (vfptr0 + 124) = _Thunks[17];
                    *(void**) (vfptr0 + 128) = _Thunks[18];
                    *(void**) (vfptr0 + 132) = _Thunks[19];
                    *(void**) (vfptr0 + 136) = _Thunks[20];
                    *(void**) (vfptr0 + 140) = _Thunks[21];
                    *(void**) (vfptr0 + 144) = _Thunks[22];
                    *(void**) (vfptr0 + 148) = _Thunks[23];
                    *(void**) (vfptr0 + 152) = _Thunks[24];
                    *(void**) (vfptr0 + 156) = _Thunks[25];
                    *(void**) (vfptr0 + 160) = _Thunks[26];
                    *(void**) (vfptr0 + 164) = _Thunks[27];
                    *(void**) (vfptr0 + 168) = _Thunks[28];
                    *(void**) (vfptr0 + 172) = _Thunks[29];
                    *(void**) (vfptr0 + 176) = _Thunks[30];
                    *(void**) (vfptr0 + 180) = _Thunks[31];
                    *(void**) (vfptr0 + 184) = _Thunks[32];
                    *(void**) (vfptr0 + 188) = _Thunks[33];
                    *(void**) (vfptr0 + 192) = _Thunks[34];
                    *(void**) (vfptr0 + 196) = _Thunks[35];
                    *(void**) (vfptr0 + 200) = _Thunks[36];
                    *(void**) (vfptr0 + 204) = _Thunks[37];
                    *(void**) (vfptr0 + 208) = _Thunks[38];
                    *(void**) (vfptr0 + 212) = _Thunks[39];
                    *(void**) (vfptr0 + 216) = _Thunks[40];
                    *(void**) (vfptr0 + 220) = _Thunks[41];
                    *(void**) (vfptr0 + 224) = _Thunks[42];
                    *(void**) (vfptr0 + 228) = _Thunks[43];
                    *(void**) (vfptr0 + 232) = _Thunks[44];
                    *(void**) (vfptr0 + 236) = _Thunks[45];
                    *(void**) (vfptr0 + 240) = _Thunks[46];
                    *(void**) (vfptr0 + 244) = _Thunks[47];
                    *(void**) (vfptr0 + 248) = _Thunks[48];
                    *(void**) (vfptr0 + 252) = _Thunks[49];
                    *(void**) (vfptr0 + 256) = _Thunks[50];
                    *(void**) (vfptr0 + 260) = _Thunks[51];
                    *(void**) (vfptr0 + 264) = _Thunks[52];
                    *(void**) (vfptr0 + 268) = _Thunks[53];
                    *(void**) (vfptr0 + 272) = _Thunks[54];
                    *(void**) (vfptr0 + 276) = _Thunks[55];
                    *(void**) (vfptr0 + 280) = _Thunks[56];
                    *(void**) (vfptr0 + 284) = _Thunks[57];
                    *(void**) (vfptr0 + 288) = _Thunks[58];
                    *(void**) (vfptr0 + 292) = _Thunks[59];
                    *(void**) (vfptr0 + 296) = _Thunks[60];
                    *(void**) (vfptr0 + 300) = _Thunks[61];
                    *(void**) (vfptr0 + 304) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 304);
                    *(void**) (vfptr0 + 308) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 308);
                    *(void**) (vfptr0 + 312) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 312);
                    *(void**) (vfptr0 + 316) = _Thunks[62];
                    *(void**) (vfptr0 + 320) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 320);
                    *(void**) (vfptr0 + 324) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 324);
                    *(void**) (vfptr0 + 328) = _Thunks[63];
                    *(void**) (vfptr0 + 332) = _Thunks[64];
                    *(void**) (vfptr0 + 336) = _Thunks[65];
                    *(void**) (vfptr0 + 340) = _Thunks[66];
                    *(void**) (vfptr0 + 344) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 344);
                    *(void**) (vfptr0 + 348) = _Thunks[67];
                    *(void**) (vfptr0 + 352) = _Thunks[68];
                    *(void**) (vfptr0 + 356) = _Thunks[69];
                    *(void**) (vfptr0 + 360) = _Thunks[70];
                    *(void**) (vfptr0 + 364) = _Thunks[71];
                    *(void**) (vfptr0 + 368) = _Thunks[72];
                    *(void**) (vfptr0 + 372) = _Thunks[73];
                    *(void**) (vfptr0 + 376) = _Thunks[74];
                    *(void**) (vfptr0 + 380) = _Thunks[75];
                    *(void**) (vfptr0 + 384) = _Thunks[76];
                    *(void**) (vfptr0 + 388) = _Thunks[77];
                    *(void**) (vfptr0 + 392) = _Thunks[78];
                    *(void**) (vfptr0 + 396) = _Thunks[79];
                    *(void**) (vfptr0 + 400) = _Thunks[80];
                    *(void**) (vfptr0 + 404) = _Thunks[81];
                    *(void**) (vfptr0 + 408) = _Thunks[82];
                    *(void**) (vfptr0 + 412) = _Thunks[83];
                    *(void**) (vfptr0 + 416) = _Thunks[84];
                    *(void**) (vfptr0 + 420) = _Thunks[85];
                    *(void**) (vfptr0 + 424) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 424);
                    *(void**) (vfptr0 + 428) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 428);
                    *(void**) (vfptr0 + 432) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 432);
                    *(void**) (vfptr0 + 436) = _Thunks[86];
                    *(void**) (vfptr0 + 440) = _Thunks[87];
                    *(void**) (vfptr0 + 444) = _Thunks[88];
                    *(void**) (vfptr0 + 448) = _Thunks[89];
                    *(void**) (vfptr0 + 452) = _Thunks[90];
                    *(void**) (vfptr0 + 456) = _Thunks[91];
                    *(void**) (vfptr0 + 460) = _Thunks[92];
                    *(void**) (vfptr0 + 464) = _Thunks[93];
                    *(void**) (vfptr0 + 468) = _Thunks[94];
                    *(void**) (vfptr0 + 472) = _Thunks[95];
                    *(void**) (vfptr0 + 476) = _Thunks[96];
                    *(void**) (vfptr0 + 480) = _Thunks[97];
                    *(void**) (vfptr0 + 484) = _Thunks[98];
                    *(void**) (vfptr0 + 488) = _Thunks[99];
                    *(void**) (vfptr0 + 492) = _Thunks[100];
                    *(void**) (vfptr0 + 496) = _Thunks[101];
                    *(void**) (vfptr0 + 500) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 500);
                    *(void**) (vfptr0 + 504) = _Thunks[102];
                    *(void**) (vfptr0 + 508) = _Thunks[103];
                    *(void**) (vfptr0 + 512) = _Thunks[104];
                    *(void**) (vfptr0 + 516) = _Thunks[105];
                    *(void**) (vfptr0 + 520) = _Thunks[106];
                    *(void**) (vfptr0 + 524) = _Thunks[107];
                    *(void**) (vfptr0 + 528) = _Thunks[108];
                    *(void**) (vfptr0 + 532) = _Thunks[109];
                    *(void**) (vfptr0 + 536) = _Thunks[110];
                    *(void**) (vfptr0 + 540) = _Thunks[111];
                    *(void**) (vfptr0 + 544) = _Thunks[112];
                    *(void**) (vfptr0 + 548) = _Thunks[113];
                    *(void**) (vfptr0 + 552) = _Thunks[114];
                    *(void**) (vfptr0 + 556) = _Thunks[115];
                    *(void**) (vfptr0 + 560) = _Thunks[116];
                    *(void**) (vfptr0 + 564) = _Thunks[117];
                    *(void**) (vfptr0 + 568) = _Thunks[118];
                    *(void**) (vfptr0 + 572) = _Thunks[119];
                    *(void**) (vfptr0 + 576) = _Thunks[120];
                    *(void**) (vfptr0 + 580) = _Thunks[121];
                    *(void**) (vfptr0 + 584) = _Thunks[122];
                    *(void**) (vfptr0 + 588) = _Thunks[123];
                    *(void**) (vfptr0 + 592) = _Thunks[124];
                    *(void**) (vfptr0 + 596) = _Thunks[125];
                    *(void**) (vfptr0 + 600) = _Thunks[126];
                    *(void**) (vfptr0 + 604) = _Thunks[127];
                    *(void**) (vfptr0 + 608) = _Thunks[128];
                    *(void**) (vfptr0 + 612) = _Thunks[129];
                    *(void**) (vfptr0 + 616) = _Thunks[130];
                    *(void**) (vfptr0 + 620) = _Thunks[131];
                    *(void**) (vfptr0 + 624) = _Thunks[132];
                    *(void**) (vfptr0 + 628) = _Thunks[133];
                    *(void**) (vfptr0 + 632) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 632);
                    *(void**) (vfptr0 + 636) = _Thunks[134];
                    *(void**) (vfptr0 + 640) = _Thunks[135];
                    *(void**) (vfptr0 + 644) = _Thunks[136];
                    *(void**) (vfptr0 + 648) = _Thunks[137];
                    *(void**) (vfptr0 + 652) = _Thunks[138];
                    *(void**) (vfptr0 + 656) = _Thunks[139];
                    *(void**) (vfptr0 + 660) = _Thunks[140];
                    *(void**) (vfptr0 + 664) = _Thunks[141];
                    *(void**) (vfptr0 + 668) = _Thunks[142];
                    *(void**) (vfptr0 + 672) = _Thunks[143];
                    *(void**) (vfptr0 + 676) = _Thunks[144];
                    *(void**) (vfptr0 + 680) = _Thunks[145];
                    *(void**) (vfptr0 + 684) = _Thunks[146];
                    *(void**) (vfptr0 + 688) = _Thunks[147];
                    *(void**) (vfptr0 + 692) = _Thunks[148];
                    *(void**) (vfptr0 + 696) = _Thunks[149];
                    *(void**) (vfptr0 + 700) = _Thunks[150];
                    *(void**) (vfptr0 + 704) = _Thunks[151];
                    *(void**) (vfptr0 + 708) = _Thunks[152];
                    *(void**) (vfptr0 + 712) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 712);
                    *(void**) (vfptr0 + 716) = _Thunks[153];
                    *(void**) (vfptr0 + 720) = _Thunks[154];
                    *(void**) (vfptr0 + 724) = _Thunks[155];
                    *(void**) (vfptr0 + 728) = _Thunks[156];
                    *(void**) (vfptr0 + 732) = _Thunks[157];
                    *(void**) (vfptr0 + 736) = _Thunks[158];
                    *(void**) (vfptr0 + 740) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 740);
                    *(void**) (vfptr0 + 744) = _Thunks[159];
                    *(void**) (vfptr0 + 748) = _Thunks[160];
                    *(void**) (vfptr0 + 752) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 752);
                    *(void**) (vfptr0 + 756) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 756);
                    *(void**) (vfptr0 + 760) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 760);
                    *(void**) (vfptr0 + 764) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 764);
                    *(void**) (vfptr0 + 768) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 768);
                    *(void**) (vfptr0 + 772) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 772);
                    *(void**) (vfptr0 + 776) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 776);
                    *(void**) (vfptr0 + 780) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 780);
                    *(void**) (vfptr0 + 784) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 784);
                    *(void**) (vfptr0 + 788) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 788);
                    *(void**) (vfptr0 + 792) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 792);
                    *(void**) (vfptr0 + 796) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 796);
                    *(void**) (vfptr0 + 800) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 800);
                    *(void**) (vfptr0 + 804) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 804);
                    *(void**) (vfptr0 + 808) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 808);
                    *(void**) (vfptr0 + 812) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 812);
                    *(void**) (vfptr0 + 816) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 816);
                    *(void**) (vfptr0 + 820) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 820);
                    *(void**) (vfptr0 + 824) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 824);
                    *(void**) (vfptr0 + 828) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 828);
                    *(void**) (vfptr0 + 832) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 832);
                    *(void**) (vfptr0 + 836) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 836);
                    *(void**) (vfptr0 + 840) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 840);
                    *(void**) (vfptr0 + 844) = _Thunks[161];
                    *(void**) (vfptr0 + 848) = *(void**) (new IntPtr(*(void**) __Instance) + 0 + 848);
                }

                *(void**) (__Instance + 0) = __ManagedVTables[0];
            }
        }

        #endregion
    }

    public unsafe partial class panel
    {
        public partial struct __Internal
        {
        }

        public static string PanelNameStr
        {
            get
            {
                var __ptr = (string*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "wxPanelNameStr");
                if (__ptr == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) __ptr;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) __ptr, __length);
            }
        }
    }
}
