//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxAnyStrPtr : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_str;

            [FieldOffset(4)]
            public wxString.const_iterator.Internal m_iter;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxAnyStrPtrC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxAnyStrPtrC2ERK8wxStringRKNS0_14const_iteratorE")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr str, global::System.IntPtr iter);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxAnyStrPtrC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxAnyStrPtrcvbEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorConversion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxAnyStrPtrntEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaim_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxAnyStrPtrcvPKcEv")]
            internal static extern global::System.IntPtr OperatorConversion_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxAnyStrPtrcvPKwEv")]
            internal static extern global::System.IntPtr OperatorConversion_2(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAnyStrPtr> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAnyStrPtr>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAnyStrPtr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAnyStrPtr(native.ToPointer(), skipVTables);
        }

        public static wxAnyStrPtr __CreateInstance(wxAnyStrPtr.Internal native, bool skipVTables = false)
        {
            return new wxAnyStrPtr(native, skipVTables);
        }

        private static void* __CopyValue(wxAnyStrPtr.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            wxAnyStrPtr.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxAnyStrPtr(wxAnyStrPtr.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAnyStrPtr(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAnyStrPtr()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxAnyStrPtr(wxString str, wxString.const_iterator iter)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            if (ReferenceEquals(iter, null))
                throw new global::System.ArgumentNullException("iter", "Cannot be null because it is a C++ reference (&).");
            var arg1 = iter.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxAnyStrPtr(wxAnyStrPtr _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAnyStrPtr __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static implicit operator bool(wxAnyStrPtr __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_0(arg0);
            return __ret;
        }

        public static bool operator !(wxAnyStrPtr __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaim_0(arg0);
            return __ret;
        }

        public static implicit operator string(wxAnyStrPtr __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_1(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static implicit operator string(wxAnyStrPtr __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_2(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }
    }
}
