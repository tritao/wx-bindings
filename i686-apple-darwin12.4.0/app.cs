//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxApp : wxAppBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 348)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(0)]
            public global::System.IntPtr m_first;

            [FieldOffset(12)]
            public global::System.IntPtr m_nextHandler;

            [FieldOffset(16)]
            public global::System.IntPtr m_previousHandler;

            [FieldOffset(20)]
            public global::System.IntPtr m_dynamicEvents;

            [FieldOffset(24)]
            public global::System.IntPtr m_pendingEvents;

            [FieldOffset(28)]
            public wxCriticalSection.Internal m_pendingEventsLock;

            [FieldOffset(32)]
            public byte m_enabled;

            [FieldOffset(36)]
            internal wxEvtHandler._.Internal __;

            [FieldOffset(40)]
            public wxClientDataType m_clientDataType;

            [FieldOffset(4)]
            public global::System.IntPtr m_next;

            [FieldOffset(52)]
            public int argc;

            [FieldOffset(56)]
            public wxCmdLineArgsArray.Internal argv;

            [FieldOffset(84)]
            public wxString.Internal m_vendorName;

            [FieldOffset(104)]
            public wxString.Internal m_vendorDisplayName;

            [FieldOffset(124)]
            public wxString.Internal m_appName;

            [FieldOffset(144)]
            public wxString.Internal m_appDisplayName;

            [FieldOffset(164)]
            public wxString.Internal m_className;

            [FieldOffset(184)]
            public global::System.IntPtr m_traits;

            [FieldOffset(188)]
            public global::System.IntPtr m_mainLoop;

            [FieldOffset(192)]
            public wxEvtHandlerArray.Internal m_handlersWithPendingEvents;

            [FieldOffset(204)]
            public wxEvtHandlerArray.Internal m_handlersWithPendingDelayedEvents;

            [FieldOffset(216)]
            public wxCriticalSection.Internal m_handlersWithPendingEventsLocker;

            [FieldOffset(220)]
            public byte m_bDoPendingEventProcessing;

            [FieldOffset(224)]
            public uint m_signalsCaught;

            [FieldOffset(228)]
            internal wxAppConsole.SignalHandlerHash.Internal m_signalHandlerHash;

            [FieldOffset(244)]
            public global::System.IntPtr m_signalWakeUpPipe;

            [FieldOffset(248)]
            public global::System.IntPtr m_topWindow;

            [FieldOffset(252)]
            public wxAppBase._0 m_exitOnFrameDelete;

            [FieldOffset(256)]
            public byte m_useBestVisual;

            [FieldOffset(257)]
            public byte m_forceTrueColour;

            [FieldOffset(258)]
            public byte m_isActive;

            [FieldOffset(260)]
            public int m_printMode;

            [FieldOffset(264)]
            public global::System.IntPtr m_macPool;

            [FieldOffset(268)]
            public int m_nCmdShow;

            [FieldOffset(272)]
            public global::System.IntPtr m_macEventHandler;

            [FieldOffset(276)]
            public global::System.IntPtr m_macCurrentEventHandlerCallRef;

            [FieldOffset(280)]
            public global::System.IntPtr m_macCurrentEvent;

            [FieldOffset(284)]
            public byte m_onInitResult;

            [FieldOffset(285)]
            public byte m_inited;

            [FieldOffset(288)]
            public wxArrayString.Internal m_openFiles;

            [FieldOffset(308)]
            public wxArrayString.Internal m_printFiles;

            [FieldOffset(328)]
            public wxString.Internal m_getURL;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxAppC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxAppC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp6OnIdleER11wxIdleEvent")]
            internal static extern void OnIdle_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp12OnEndSessionER12wxCloseEvent")]
            internal static extern void OnEndSession_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp17OnQueryEndSessionER12wxCloseEvent")]
            internal static extern void OnQueryEndSession_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp18MacGetEventHandlerEv")]
            internal static extern global::System.IntPtr MacGetEventHandler_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp32MacGetCurrentEventHandlerCallRefEv")]
            internal static extern global::System.IntPtr MacGetCurrentEventHandlerCallRef_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp18MacSetCurrentEventEPvS0_")]
            internal static extern void MacSetCurrentEvent_0(global::System.IntPtr instance, global::System.IntPtr @event, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp19MacAddToAutoreleaseEPv")]
            internal static extern void MacAddToAutorelease_0(global::System.IntPtr instance, global::System.IntPtr cfrefobj);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp25MacReleaseAutoreleasePoolEv")]
            internal static extern void MacReleaseAutoreleasePool_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp18MacGetCurrentEventEv")]
            internal static extern global::System.IntPtr MacGetCurrentEvent_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp16OSXInitWasCalledEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OSXInitWasCalled_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp17OSXStoreOpenFilesERK13wxArrayString")]
            internal static extern void OSXStoreOpenFiles_0(global::System.IntPtr instance, global::System.IntPtr files);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp18OSXStorePrintFilesERK13wxArrayString")]
            internal static extern void OSXStorePrintFiles_0(global::System.IntPtr instance, global::System.IntPtr files);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp15OSXStoreOpenURLERK8wxString")]
            internal static extern void OSXStoreOpenURL_0(global::System.IntPtr instance, global::System.IntPtr url);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN5wxApp10MacHideAppEv")]
            internal static extern void MacHideApp_0(global::System.IntPtr instance);
        }

        public static new wxApp __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxApp(native.ToPointer(), skipVTables);
        }

        public static wxApp __CreateInstance(wxApp.Internal native, bool skipVTables = false)
        {
            return new wxApp(native, skipVTables);
        }

        private static void* __CopyValue(wxApp.Internal native)
        {
            var ret = Marshal.AllocHGlobal(348);
            wxApp.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxApp(wxApp.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxApp(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxApp()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(348);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxApp");
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public override void WakeUpIdle()
        {
            base.WakeUpIdle();
        }

        public override void SetPrintMode(int mode)
        {
            base.SetPrintMode(mode);
        }

        public virtual int GetPrintMode()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 65 * 4);
            var ___GetPrintMode_0Delegate = (Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_int_IntPtr));
            var __ret = ___GetPrintMode_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override bool CallOnInit()
        {
            return base.CallOnInit();
        }

        public override bool OnInitGui()
        {
            return base.OnInitGui();
        }

        public override int OnRun()
        {
            return base.OnRun();
        }

        public override bool ProcessIdle()
        {
            return base.ProcessIdle();
        }

        public void OnIdle(wxIdleEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.OnIdle_0((__Instance + __PointerAdjustment), arg0);
        }

        public void OnEndSession(wxCloseEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.OnEndSession_0((__Instance + __PointerAdjustment), arg0);
        }

        public void OnQueryEndSession(wxCloseEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.OnQueryEndSession_0((__Instance + __PointerAdjustment), arg0);
        }

        public override bool Initialize(ref int argc, char** argv)
        {
            return base.Initialize(ref argc, argv);
        }

        public override void CleanUp()
        {
            base.CleanUp();
        }

        public global::System.IntPtr MacGetEventHandler()
        {
            var __ret = Internal.MacGetEventHandler_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public global::System.IntPtr MacGetCurrentEventHandlerCallRef()
        {
            var __ret = Internal.MacGetCurrentEventHandlerCallRef_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void MacSetCurrentEvent(global::System.IntPtr @event, global::System.IntPtr handler)
        {
            var arg0 = @event;
            var arg1 = handler;
            Internal.MacSetCurrentEvent_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void MacAddToAutorelease(global::System.IntPtr cfrefobj)
        {
            var arg0 = cfrefobj;
            Internal.MacAddToAutorelease_0((__Instance + __PointerAdjustment), arg0);
        }

        public void MacReleaseAutoreleasePool()
        {
            Internal.MacReleaseAutoreleasePool_0((__Instance + __PointerAdjustment));
        }

        public global::System.IntPtr MacGetCurrentEvent()
        {
            var __ret = Internal.MacGetCurrentEvent_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual void MacHandleUnhandledEvent(global::System.IntPtr ev)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 69 * 4);
            var ___MacHandleUnhandledEvent_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var arg0 = ev;
            ___MacHandleUnhandledEvent_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public virtual void MacOpenFiles(wxArrayString fileNames)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 70 * 4);
            var ___MacOpenFiles_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(fileNames, null))
                throw new global::System.ArgumentNullException("fileNames", "Cannot be null because it is a C++ reference (&).");
            var arg0 = fileNames.__Instance;
            ___MacOpenFiles_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public virtual void MacOpenFile(wxString fileName)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 71 * 4);
            var ___MacOpenFile_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(fileName, null))
                throw new global::System.ArgumentNullException("fileName", "Cannot be null because it is a C++ reference (&).");
            var arg0 = fileName.__Instance;
            ___MacOpenFile_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public virtual void MacOpenURL(wxString url)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 72 * 4);
            var ___MacOpenURL_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(url, null))
                throw new global::System.ArgumentNullException("url", "Cannot be null because it is a C++ reference (&).");
            var arg0 = url.__Instance;
            ___MacOpenURL_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public virtual void MacPrintFiles(wxArrayString fileNames)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 73 * 4);
            var ___MacPrintFiles_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(fileNames, null))
                throw new global::System.ArgumentNullException("fileNames", "Cannot be null because it is a C++ reference (&).");
            var arg0 = fileNames.__Instance;
            ___MacPrintFiles_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public virtual void MacPrintFile(wxString fileName)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 74 * 4);
            var ___MacPrintFile_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(fileName, null))
                throw new global::System.ArgumentNullException("fileName", "Cannot be null because it is a C++ reference (&).");
            var arg0 = fileName.__Instance;
            ___MacPrintFile_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public virtual void MacNewFile()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 75 * 4);
            var ___MacNewFile_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___MacNewFile_0Delegate((__Instance + __PointerAdjustment));
        }

        public virtual void MacReopenApp()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 76 * 4);
            var ___MacReopenApp_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___MacReopenApp_0Delegate((__Instance + __PointerAdjustment));
        }

        public virtual bool OSXIsGUIApplication()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 77 * 4);
            var ___OSXIsGUIApplication_0Delegate = (Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr));
            var __ret = ___OSXIsGUIApplication_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual void OSXOnWillFinishLaunching()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 78 * 4);
            var ___OSXOnWillFinishLaunching_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___OSXOnWillFinishLaunching_0Delegate((__Instance + __PointerAdjustment));
        }

        public virtual void OSXOnDidFinishLaunching()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 79 * 4);
            var ___OSXOnDidFinishLaunching_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___OSXOnDidFinishLaunching_0Delegate((__Instance + __PointerAdjustment));
        }

        public virtual bool OSXOnShouldTerminate()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 80 * 4);
            var ___OSXOnShouldTerminate_0Delegate = (Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr));
            var __ret = ___OSXOnShouldTerminate_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual void OSXOnWillTerminate()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 81 * 4);
            var ___OSXOnWillTerminate_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___OSXOnWillTerminate_0Delegate((__Instance + __PointerAdjustment));
        }

        public bool OSXInitWasCalled()
        {
            var __ret = Internal.OSXInitWasCalled_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void OSXStoreOpenFiles(wxArrayString files)
        {
            if (ReferenceEquals(files, null))
                throw new global::System.ArgumentNullException("files", "Cannot be null because it is a C++ reference (&).");
            var arg0 = files.__Instance;
            Internal.OSXStoreOpenFiles_0((__Instance + __PointerAdjustment), arg0);
        }

        public void OSXStorePrintFiles(wxArrayString files)
        {
            if (ReferenceEquals(files, null))
                throw new global::System.ArgumentNullException("files", "Cannot be null because it is a C++ reference (&).");
            var arg0 = files.__Instance;
            Internal.OSXStorePrintFiles_0((__Instance + __PointerAdjustment), arg0);
        }

        public void OSXStoreOpenURL(wxString url)
        {
            if (ReferenceEquals(url, null))
                throw new global::System.ArgumentNullException("url", "Cannot be null because it is a C++ reference (&).");
            var arg0 = url.__Instance;
            Internal.OSXStoreOpenURL_0((__Instance + __PointerAdjustment), arg0);
        }

        public void MacHideApp()
        {
            Internal.MacHideApp_0((__Instance + __PointerAdjustment));
        }

        protected override wxEventTable GetEventTable()
        {
            return base.GetEventTable();
        }

        protected override wxEventHashTable GetEventHashTable()
        {
            return base.GetEventHashTable();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        public static bool sm_isEmbedded
        {
            get
            {
                var __ptr = (bool*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp13sm_isEmbeddedE");
                return *__ptr;
            }
        }

        public static int s_lastModifiers
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp15s_lastModifiersE");
                return *__ptr;
            }
        }

        public static int s_macAboutMenuItemId
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp20s_macAboutMenuItemIdE");
                return *__ptr;
            }
        }

        public static int s_macPreferencesMenuItemId
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp26s_macPreferencesMenuItemIdE");
                return *__ptr;
            }
        }

        public static int s_macExitMenuItemId
        {
            get
            {
                var __ptr = (int*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp19s_macExitMenuItemIdE");
                return *__ptr;
            }
        }

        public static wxString s_macHelpMenuTitleName
        {
            get
            {
                var __ptr = (wxString.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN5wxApp22s_macHelpMenuTitleNameE");
                return wxString.__CreateInstance(*__ptr);
            }
        }

        protected int m_printMode
        {
            get
            {
                return ((Internal*) __Instance)->m_printMode;
            }

            set
            {
                ((Internal*) __Instance)->m_printMode = value;
            }
        }

        public int m_nCmdShow
        {
            get
            {
                return ((Internal*) __Instance)->m_nCmdShow;
            }

            set
            {
                ((Internal*) __Instance)->m_nCmdShow = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxApp()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetNextHandler(wxEvtHandler *handler)
        private static Delegates.Action_IntPtr_IntPtr _SetNextHandler_0DelegateInstance;

        private static void _SetNextHandler_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[handler];
            else __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetNextHandler(__result0);
        }

        // void SetPreviousHandler(wxEvtHandler *handler)
        private static Delegates.Action_IntPtr_IntPtr _SetPreviousHandler_0DelegateInstance;

        private static void _SetPreviousHandler_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[handler];
            else __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetPreviousHandler(__result0);
        }

        // bool ProcessEvent(wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr _ProcessEvent_0DelegateInstance;

        private static bool _ProcessEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.ProcessEvent(__result0);
            return __ret;
        }

        // void QueueEvent(wxEvent *event)
        private static Delegates.Action_IntPtr_IntPtr _QueueEvent_0DelegateInstance;

        private static void _QueueEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            __target.QueueEvent(__result0);
        }

        // void AddPendingEvent(const wxEvent& event)
        private static Delegates.Action_IntPtr_IntPtr _AddPendingEvent_0DelegateInstance;

        private static void _AddPendingEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            __target.AddPendingEvent(__result0);
        }

        // bool SearchEventTable(wxEventTable& table, wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr _SearchEventTable_0DelegateInstance;

        private static bool _SearchEventTable_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr table, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEventTable __result0;
            if (table == IntPtr.Zero) __result0 = null;
            else if (wxEventTable.NativeToManagedMap.ContainsKey(table))
                __result0 = (wxEventTable) wxEventTable.NativeToManagedMap[table];
            else __result0 = wxEventTable.__CreateInstance(table);
            wxEvent __result1;
            if (@event == IntPtr.Zero) __result1 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result1 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result1 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.SearchEventTable(__result0, __result1);
            return __ret;
        }

        // bool TryBefore(wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr _TryBefore_0DelegateInstance;

        private static bool _TryBefore_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.TryBefore(__result0);
            return __ret;
        }

        // bool TryAfter(wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr _TryAfter_0DelegateInstance;

        private static bool _TryAfter_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.TryAfter(__result0);
            return __ret;
        }

        // bool OnDynamicBind(wxDynamicEventTableEntry& WXUNUSED(entry))
        private static Delegates.Func_bool_IntPtr_IntPtr _OnDynamicBind_0DelegateInstance;

        private static bool _OnDynamicBind_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxDynamicEventTableEntry __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxDynamicEventTableEntry.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxDynamicEventTableEntry) wxDynamicEventTableEntry.NativeToManagedMap[_0];
            else __result0 = wxDynamicEventTableEntry.__CreateInstance(_0);
            var __ret = __target.OnDynamicBind(__result0);
            return __ret;
        }

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetEventTable_0DelegateInstance;

        private static global::System.IntPtr _GetEventTable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventTable();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetEventHashTable_0DelegateInstance;

        private static global::System.IntPtr _GetEventHashTable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventHashTable();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // void DoSetClientObject( wxClientData *data )
        private static Delegates.Action_IntPtr_IntPtr _DoSetClientObject_0DelegateInstance;

        private static void _DoSetClientObject_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxClientData __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxClientData.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxClientData) wxClientData.NativeToManagedMap[data];
            else __result0 = (wxClientData) wxClientData.__CreateInstance(data, skipVTables: true);
            __target.DoSetClientObject(__result0);
        }

        // wxClientData *DoGetClientObject() const
        private static Delegates.Func_IntPtr_IntPtr _DoGetClientObject_0DelegateInstance;

        private static global::System.IntPtr _DoGetClientObject_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientObject();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DoSetClientData( void *data )
        private static Delegates.Action_IntPtr_IntPtr _DoSetClientData_0DelegateInstance;

        private static void _DoSetClientData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static Delegates.Func_IntPtr_IntPtr _DoGetClientData_0DelegateInstance;

        private static global::System.IntPtr _DoGetClientData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        // bool Initialize(int& argc, wxChar **argv) wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_intPtr_charPtrPtr _Initialize_0DelegateInstance;

        private static bool _Initialize_0DelegateHook(global::System.IntPtr instance, int* argc, char** argv)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Initialize(ref *argc, argv);
            return __ret;
        }

        // bool CallOnInit() wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _CallOnInit_0DelegateInstance;

        private static bool _CallOnInit_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CallOnInit();
            return __ret;
        }

        // bool OnInit()
        private static Delegates.Func_bool_IntPtr _OnInit_0DelegateInstance;

        private static bool _OnInit_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnInit();
            return __ret;
        }

        // int OnRun() wxOVERRIDE
        private static Delegates.Func_int_IntPtr _OnRun_0DelegateInstance;

        private static int _OnRun_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnRun();
            return __ret;
        }

        // void OnLaunched()
        private static Delegates.Action_IntPtr _OnLaunched_0DelegateInstance;

        private static void _OnLaunched_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnLaunched();
        }

        // int OnExit() wxOVERRIDE
        private static Delegates.Func_int_IntPtr _OnExit_0DelegateInstance;

        private static int _OnExit_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnExit();
            return __ret;
        }

        // void CleanUp() wxOVERRIDE
        private static Delegates.Action_IntPtr _CleanUp_0DelegateInstance;

        private static void _CleanUp_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.CleanUp();
        }

        // void OnFatalException()
        private static Delegates.Action_IntPtr _OnFatalException_0DelegateInstance;

        private static void _OnFatalException_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnFatalException();
        }

        // void Exit()
        private static Delegates.Action_IntPtr _Exit_0DelegateInstance;

        private static void _Exit_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Exit();
        }

        // void SetCLocale()
        private static Delegates.Action_IntPtr _SetCLocale_0DelegateInstance;

        private static void _SetCLocale_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetCLocale();
        }

        // int FilterEvent(wxEvent& event) wxOVERRIDE
        private static Delegates.Func_int_IntPtr_IntPtr _FilterEvent_0DelegateInstance;

        private static int _FilterEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.FilterEvent(__result0);
            return __ret;
        }

        // void CallEventHandler(wxEvtHandler *handler, wxEventFunctor& functor, wxEvent& event) const
        private static Delegates.Action_IntPtr_IntPtr_IntPtr_IntPtr _CallEventHandler_0DelegateInstance;

        private static void _CallEventHandler_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr handler, global::System.IntPtr functor, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[handler];
            else __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(handler, skipVTables: true);
            wxEventFunctor __result1;
            if (functor == IntPtr.Zero) __result1 = null;
            else if (wxEventFunctor.NativeToManagedMap.ContainsKey(functor))
                __result1 = (wxEventFunctor) wxEventFunctor.NativeToManagedMap[functor];
            else __result1 = (wxEventFunctor) wxEventFunctor.__CreateInstance(functor, skipVTables: true);
            wxEvent __result2;
            if (@event == IntPtr.Zero) __result2 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result2 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result2 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            __target.CallEventHandler(__result0, __result1, __result2);
        }

        // void OnUnhandledException()
        private static Delegates.Action_IntPtr _OnUnhandledException_0DelegateInstance;

        private static void _OnUnhandledException_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnUnhandledException();
        }

        // bool OnExceptionInMainLoop()
        private static Delegates.Func_bool_IntPtr _OnExceptionInMainLoop_0DelegateInstance;

        private static bool _OnExceptionInMainLoop_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnExceptionInMainLoop();
            return __ret;
        }

        // bool StoreCurrentException()
        private static Delegates.Func_bool_IntPtr _StoreCurrentException_0DelegateInstance;

        private static bool _StoreCurrentException_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.StoreCurrentException();
            return __ret;
        }

        // void RethrowStoredException()
        private static Delegates.Action_IntPtr _RethrowStoredException_0DelegateInstance;

        private static void _RethrowStoredException_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.RethrowStoredException();
        }

        // void ProcessPendingEvents()
        private static Delegates.Action_IntPtr _ProcessPendingEvents_0DelegateInstance;

        private static void _ProcessPendingEvents_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ProcessPendingEvents();
        }

        // bool Pending()
        private static Delegates.Func_bool_IntPtr _Pending_0DelegateInstance;

        private static bool _Pending_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Pending();
            return __ret;
        }

        // bool Dispatch()
        private static Delegates.Func_bool_IntPtr _Dispatch_0DelegateInstance;

        private static bool _Dispatch_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Dispatch();
            return __ret;
        }

        // int MainLoop()
        private static Delegates.Func_int_IntPtr _MainLoop_0DelegateInstance;

        private static int _MainLoop_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MainLoop();
            return __ret;
        }

        // void ExitMainLoop()
        private static Delegates.Action_IntPtr _ExitMainLoop_0DelegateInstance;

        private static void _ExitMainLoop_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.ExitMainLoop();
        }

        // void WakeUpIdle() wxOVERRIDE
        private static Delegates.Action_IntPtr _WakeUpIdle_0DelegateInstance;

        private static void _WakeUpIdle_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.WakeUpIdle();
        }

        // bool ProcessIdle() wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _ProcessIdle_0DelegateInstance;

        private static bool _ProcessIdle_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ProcessIdle();
            return __ret;
        }

        // bool UsesEventLoop() const wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _UsesEventLoop_0DelegateInstance;

        private static bool _UsesEventLoop_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.UsesEventLoop();
            return __ret;
        }

        // void OnAssertFailure(const wxChar *file, int line, const wxChar *func, const wxChar *cond, const wxChar *msg)
        private static Delegates.Action_IntPtr_IntPtr_int_IntPtr_IntPtr_IntPtr _OnAssertFailure_0DelegateInstance;

        private static void _OnAssertFailure_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond, global::System.IntPtr msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnAssertFailure(CppSharp.Runtime.Helpers.MarshalEncodedString(file, System.Text.Encoding.UTF32), line, CppSharp.Runtime.Helpers.MarshalEncodedString(func, System.Text.Encoding.UTF32), CppSharp.Runtime.Helpers.MarshalEncodedString(cond, System.Text.Encoding.UTF32), CppSharp.Runtime.Helpers.MarshalEncodedString(msg, System.Text.Encoding.UTF32));
        }

        // void OnAssert(const wxChar *file, int line, const wxChar *cond, const wxChar *msg)
        private static Delegates.Action_IntPtr_IntPtr_int_IntPtr_IntPtr _OnAssert_0DelegateInstance;

        private static void _OnAssert_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr file, int line, global::System.IntPtr cond, global::System.IntPtr msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnAssert(CppSharp.Runtime.Helpers.MarshalEncodedString(file, System.Text.Encoding.UTF32), line, CppSharp.Runtime.Helpers.MarshalEncodedString(cond, System.Text.Encoding.UTF32), CppSharp.Runtime.Helpers.MarshalEncodedString(msg, System.Text.Encoding.UTF32));
        }

        // bool OnInitGui() wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _OnInitGui_0DelegateInstance;

        private static bool _OnInitGui_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnInitGui();
            return __ret;
        }

        // bool IsActive() const
        private static Delegates.Func_bool_IntPtr _IsActive_0DelegateInstance;

        private static bool _IsActive_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsActive();
            return __ret;
        }

        // void SetPrintMode(int mode) wxOVERRIDE
        private static Delegates.Action_IntPtr_int _SetPrintMode_0DelegateInstance;

        private static void _SetPrintMode_0DelegateHook(global::System.IntPtr instance, int mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetPrintMode(mode);
        }

        // wxLayoutDirection GetLayoutDirection() const
        private static Delegates.Func_wxLayoutDirection_IntPtr _GetLayoutDirection_0DelegateInstance;

        private static wxLayoutDirection _GetLayoutDirection_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLayoutDirection();
            return __ret;
        }

        // bool SetNativeTheme(const wxString& WXUNUSED(theme))
        private static Delegates.Func_bool_IntPtr_IntPtr _SetNativeTheme_0DelegateInstance;

        private static bool _SetNativeTheme_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxString) wxString.NativeToManagedMap[_0];
            else __result0 = wxString.__CreateInstance(_0);
            var __ret = __target.SetNativeTheme(__result0);
            return __ret;
        }

        // int GetPrintMode() const
        private static Delegates.Func_int_IntPtr _GetPrintMode_0DelegateInstance;

        private static int _GetPrintMode_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPrintMode();
            return __ret;
        }

        // void MacHandleUnhandledEvent( WXEVENTREF ev )
        private static Delegates.Action_IntPtr_IntPtr _MacHandleUnhandledEvent_0DelegateInstance;

        private static void _MacHandleUnhandledEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr ev)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.MacHandleUnhandledEvent(ev);
        }

        // void MacOpenFiles(const wxArrayString &fileNames)
        private static Delegates.Action_IntPtr_IntPtr _MacOpenFiles_0DelegateInstance;

        private static void _MacOpenFiles_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr fileNames)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxArrayString __result0;
            if (fileNames == IntPtr.Zero) __result0 = null;
            else if (wxArrayString.NativeToManagedMap.ContainsKey(fileNames))
                __result0 = (wxArrayString) wxArrayString.NativeToManagedMap[fileNames];
            else __result0 = wxArrayString.__CreateInstance(fileNames);
            __target.MacOpenFiles(__result0);
        }

        // void MacOpenFile(const wxString &fileName)
        private static Delegates.Action_IntPtr_IntPtr _MacOpenFile_0DelegateInstance;

        private static void _MacOpenFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr fileName)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (fileName == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(fileName))
                __result0 = (wxString) wxString.NativeToManagedMap[fileName];
            else __result0 = wxString.__CreateInstance(fileName);
            __target.MacOpenFile(__result0);
        }

        // void MacOpenURL(const wxString &url)
        private static Delegates.Action_IntPtr_IntPtr _MacOpenURL_0DelegateInstance;

        private static void _MacOpenURL_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr url)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (url == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(url))
                __result0 = (wxString) wxString.NativeToManagedMap[url];
            else __result0 = wxString.__CreateInstance(url);
            __target.MacOpenURL(__result0);
        }

        // void MacPrintFiles(const wxArrayString &fileNames)
        private static Delegates.Action_IntPtr_IntPtr _MacPrintFiles_0DelegateInstance;

        private static void _MacPrintFiles_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr fileNames)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxArrayString __result0;
            if (fileNames == IntPtr.Zero) __result0 = null;
            else if (wxArrayString.NativeToManagedMap.ContainsKey(fileNames))
                __result0 = (wxArrayString) wxArrayString.NativeToManagedMap[fileNames];
            else __result0 = wxArrayString.__CreateInstance(fileNames);
            __target.MacPrintFiles(__result0);
        }

        // void MacPrintFile(const wxString &fileName)
        private static Delegates.Action_IntPtr_IntPtr _MacPrintFile_0DelegateInstance;

        private static void _MacPrintFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr fileName)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (fileName == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(fileName))
                __result0 = (wxString) wxString.NativeToManagedMap[fileName];
            else __result0 = wxString.__CreateInstance(fileName);
            __target.MacPrintFile(__result0);
        }

        // void MacNewFile()
        private static Delegates.Action_IntPtr _MacNewFile_0DelegateInstance;

        private static void _MacNewFile_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.MacNewFile();
        }

        // void MacReopenApp()
        private static Delegates.Action_IntPtr _MacReopenApp_0DelegateInstance;

        private static void _MacReopenApp_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.MacReopenApp();
        }

        // bool OSXIsGUIApplication()
        private static Delegates.Func_bool_IntPtr _OSXIsGUIApplication_0DelegateInstance;

        private static bool _OSXIsGUIApplication_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OSXIsGUIApplication();
            return __ret;
        }

        // void OSXOnWillFinishLaunching()
        private static Delegates.Action_IntPtr _OSXOnWillFinishLaunching_0DelegateInstance;

        private static void _OSXOnWillFinishLaunching_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OSXOnWillFinishLaunching();
        }

        // void OSXOnDidFinishLaunching()
        private static Delegates.Action_IntPtr _OSXOnDidFinishLaunching_0DelegateInstance;

        private static void _OSXOnDidFinishLaunching_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OSXOnDidFinishLaunching();
        }

        // bool OSXOnShouldTerminate()
        private static Delegates.Func_bool_IntPtr _OSXOnShouldTerminate_0DelegateInstance;

        private static bool _OSXOnShouldTerminate_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OSXOnShouldTerminate();
            return __ret;
        }

        // void OSXOnWillTerminate()
        private static Delegates.Action_IntPtr _OSXOnWillTerminate_0DelegateInstance;

        private static void _OSXOnWillTerminate_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxApp) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OSXOnWillTerminate();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[64];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _SetNextHandler_0DelegateInstance += _SetNextHandler_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_SetNextHandler_0DelegateInstance).ToPointer();
                _SetPreviousHandler_0DelegateInstance += _SetPreviousHandler_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetPreviousHandler_0DelegateInstance).ToPointer();
                _ProcessEvent_0DelegateInstance += _ProcessEvent_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_ProcessEvent_0DelegateInstance).ToPointer();
                _QueueEvent_0DelegateInstance += _QueueEvent_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_QueueEvent_0DelegateInstance).ToPointer();
                _AddPendingEvent_0DelegateInstance += _AddPendingEvent_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_AddPendingEvent_0DelegateInstance).ToPointer();
                _SearchEventTable_0DelegateInstance += _SearchEventTable_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_SearchEventTable_0DelegateInstance).ToPointer();
                _TryBefore_0DelegateInstance += _TryBefore_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_TryBefore_0DelegateInstance).ToPointer();
                _TryAfter_0DelegateInstance += _TryAfter_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_TryAfter_0DelegateInstance).ToPointer();
                _OnDynamicBind_0DelegateInstance += _OnDynamicBind_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_OnDynamicBind_0DelegateInstance).ToPointer();
                _GetEventTable_0DelegateInstance += _GetEventTable_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_GetEventTable_0DelegateInstance).ToPointer();
                _GetEventHashTable_0DelegateInstance += _GetEventHashTable_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_GetEventHashTable_0DelegateInstance).ToPointer();
                _DoSetClientObject_0DelegateInstance += _DoSetClientObject_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_DoSetClientObject_0DelegateInstance).ToPointer();
                _DoGetClientObject_0DelegateInstance += _DoGetClientObject_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_DoGetClientObject_0DelegateInstance).ToPointer();
                _DoSetClientData_0DelegateInstance += _DoSetClientData_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_DoSetClientData_0DelegateInstance).ToPointer();
                _DoGetClientData_0DelegateInstance += _DoGetClientData_0DelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_DoGetClientData_0DelegateInstance).ToPointer();
                _Initialize_0DelegateInstance += _Initialize_0DelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_Initialize_0DelegateInstance).ToPointer();
                _CallOnInit_0DelegateInstance += _CallOnInit_0DelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_CallOnInit_0DelegateInstance).ToPointer();
                _OnInit_0DelegateInstance += _OnInit_0DelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_OnInit_0DelegateInstance).ToPointer();
                _OnRun_0DelegateInstance += _OnRun_0DelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_OnRun_0DelegateInstance).ToPointer();
                _OnLaunched_0DelegateInstance += _OnLaunched_0DelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_OnLaunched_0DelegateInstance).ToPointer();
                _OnExit_0DelegateInstance += _OnExit_0DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_OnExit_0DelegateInstance).ToPointer();
                _CleanUp_0DelegateInstance += _CleanUp_0DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_CleanUp_0DelegateInstance).ToPointer();
                _OnFatalException_0DelegateInstance += _OnFatalException_0DelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_OnFatalException_0DelegateInstance).ToPointer();
                _Exit_0DelegateInstance += _Exit_0DelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_Exit_0DelegateInstance).ToPointer();
                _SetCLocale_0DelegateInstance += _SetCLocale_0DelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_SetCLocale_0DelegateInstance).ToPointer();
                _FilterEvent_0DelegateInstance += _FilterEvent_0DelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_FilterEvent_0DelegateInstance).ToPointer();
                _CallEventHandler_0DelegateInstance += _CallEventHandler_0DelegateHook;
                _Thunks[30] = Marshal.GetFunctionPointerForDelegate(_CallEventHandler_0DelegateInstance).ToPointer();
                _OnUnhandledException_0DelegateInstance += _OnUnhandledException_0DelegateHook;
                _Thunks[31] = Marshal.GetFunctionPointerForDelegate(_OnUnhandledException_0DelegateInstance).ToPointer();
                _OnExceptionInMainLoop_0DelegateInstance += _OnExceptionInMainLoop_0DelegateHook;
                _Thunks[32] = Marshal.GetFunctionPointerForDelegate(_OnExceptionInMainLoop_0DelegateInstance).ToPointer();
                _StoreCurrentException_0DelegateInstance += _StoreCurrentException_0DelegateHook;
                _Thunks[33] = Marshal.GetFunctionPointerForDelegate(_StoreCurrentException_0DelegateInstance).ToPointer();
                _RethrowStoredException_0DelegateInstance += _RethrowStoredException_0DelegateHook;
                _Thunks[34] = Marshal.GetFunctionPointerForDelegate(_RethrowStoredException_0DelegateInstance).ToPointer();
                _ProcessPendingEvents_0DelegateInstance += _ProcessPendingEvents_0DelegateHook;
                _Thunks[35] = Marshal.GetFunctionPointerForDelegate(_ProcessPendingEvents_0DelegateInstance).ToPointer();
                _Pending_0DelegateInstance += _Pending_0DelegateHook;
                _Thunks[36] = Marshal.GetFunctionPointerForDelegate(_Pending_0DelegateInstance).ToPointer();
                _Dispatch_0DelegateInstance += _Dispatch_0DelegateHook;
                _Thunks[37] = Marshal.GetFunctionPointerForDelegate(_Dispatch_0DelegateInstance).ToPointer();
                _MainLoop_0DelegateInstance += _MainLoop_0DelegateHook;
                _Thunks[38] = Marshal.GetFunctionPointerForDelegate(_MainLoop_0DelegateInstance).ToPointer();
                _ExitMainLoop_0DelegateInstance += _ExitMainLoop_0DelegateHook;
                _Thunks[39] = Marshal.GetFunctionPointerForDelegate(_ExitMainLoop_0DelegateInstance).ToPointer();
                _WakeUpIdle_0DelegateInstance += _WakeUpIdle_0DelegateHook;
                _Thunks[40] = Marshal.GetFunctionPointerForDelegate(_WakeUpIdle_0DelegateInstance).ToPointer();
                _ProcessIdle_0DelegateInstance += _ProcessIdle_0DelegateHook;
                _Thunks[41] = Marshal.GetFunctionPointerForDelegate(_ProcessIdle_0DelegateInstance).ToPointer();
                _UsesEventLoop_0DelegateInstance += _UsesEventLoop_0DelegateHook;
                _Thunks[42] = Marshal.GetFunctionPointerForDelegate(_UsesEventLoop_0DelegateInstance).ToPointer();
                _OnAssertFailure_0DelegateInstance += _OnAssertFailure_0DelegateHook;
                _Thunks[43] = Marshal.GetFunctionPointerForDelegate(_OnAssertFailure_0DelegateInstance).ToPointer();
                _OnAssert_0DelegateInstance += _OnAssert_0DelegateHook;
                _Thunks[44] = Marshal.GetFunctionPointerForDelegate(_OnAssert_0DelegateInstance).ToPointer();
                _OnInitGui_0DelegateInstance += _OnInitGui_0DelegateHook;
                _Thunks[45] = Marshal.GetFunctionPointerForDelegate(_OnInitGui_0DelegateInstance).ToPointer();
                _IsActive_0DelegateInstance += _IsActive_0DelegateHook;
                _Thunks[46] = Marshal.GetFunctionPointerForDelegate(_IsActive_0DelegateInstance).ToPointer();
                _SetPrintMode_0DelegateInstance += _SetPrintMode_0DelegateHook;
                _Thunks[47] = Marshal.GetFunctionPointerForDelegate(_SetPrintMode_0DelegateInstance).ToPointer();
                _GetLayoutDirection_0DelegateInstance += _GetLayoutDirection_0DelegateHook;
                _Thunks[48] = Marshal.GetFunctionPointerForDelegate(_GetLayoutDirection_0DelegateInstance).ToPointer();
                _SetNativeTheme_0DelegateInstance += _SetNativeTheme_0DelegateHook;
                _Thunks[49] = Marshal.GetFunctionPointerForDelegate(_SetNativeTheme_0DelegateInstance).ToPointer();
                _GetPrintMode_0DelegateInstance += _GetPrintMode_0DelegateHook;
                _Thunks[50] = Marshal.GetFunctionPointerForDelegate(_GetPrintMode_0DelegateInstance).ToPointer();
                _MacHandleUnhandledEvent_0DelegateInstance += _MacHandleUnhandledEvent_0DelegateHook;
                _Thunks[51] = Marshal.GetFunctionPointerForDelegate(_MacHandleUnhandledEvent_0DelegateInstance).ToPointer();
                _MacOpenFiles_0DelegateInstance += _MacOpenFiles_0DelegateHook;
                _Thunks[52] = Marshal.GetFunctionPointerForDelegate(_MacOpenFiles_0DelegateInstance).ToPointer();
                _MacOpenFile_0DelegateInstance += _MacOpenFile_0DelegateHook;
                _Thunks[53] = Marshal.GetFunctionPointerForDelegate(_MacOpenFile_0DelegateInstance).ToPointer();
                _MacOpenURL_0DelegateInstance += _MacOpenURL_0DelegateHook;
                _Thunks[54] = Marshal.GetFunctionPointerForDelegate(_MacOpenURL_0DelegateInstance).ToPointer();
                _MacPrintFiles_0DelegateInstance += _MacPrintFiles_0DelegateHook;
                _Thunks[55] = Marshal.GetFunctionPointerForDelegate(_MacPrintFiles_0DelegateInstance).ToPointer();
                _MacPrintFile_0DelegateInstance += _MacPrintFile_0DelegateHook;
                _Thunks[56] = Marshal.GetFunctionPointerForDelegate(_MacPrintFile_0DelegateInstance).ToPointer();
                _MacNewFile_0DelegateInstance += _MacNewFile_0DelegateHook;
                _Thunks[57] = Marshal.GetFunctionPointerForDelegate(_MacNewFile_0DelegateInstance).ToPointer();
                _MacReopenApp_0DelegateInstance += _MacReopenApp_0DelegateHook;
                _Thunks[58] = Marshal.GetFunctionPointerForDelegate(_MacReopenApp_0DelegateInstance).ToPointer();
                _OSXIsGUIApplication_0DelegateInstance += _OSXIsGUIApplication_0DelegateHook;
                _Thunks[59] = Marshal.GetFunctionPointerForDelegate(_OSXIsGUIApplication_0DelegateInstance).ToPointer();
                _OSXOnWillFinishLaunching_0DelegateInstance += _OSXOnWillFinishLaunching_0DelegateHook;
                _Thunks[60] = Marshal.GetFunctionPointerForDelegate(_OSXOnWillFinishLaunching_0DelegateInstance).ToPointer();
                _OSXOnDidFinishLaunching_0DelegateInstance += _OSXOnDidFinishLaunching_0DelegateHook;
                _Thunks[61] = Marshal.GetFunctionPointerForDelegate(_OSXOnDidFinishLaunching_0DelegateInstance).ToPointer();
                _OSXOnShouldTerminate_0DelegateInstance += _OSXOnShouldTerminate_0DelegateHook;
                _Thunks[62] = Marshal.GetFunctionPointerForDelegate(_OSXOnShouldTerminate_0DelegateInstance).ToPointer();
                _OSXOnWillTerminate_0DelegateInstance += _OSXOnWillTerminate_0DelegateHook;
                _Thunks[63] = Marshal.GetFunctionPointerForDelegate(_OSXOnWillTerminate_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(89 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                    *(void**)(vfptr0 + 72) = *(void**)(native->vfptr0 + 72);
                    *(void**)(vfptr0 + 76) = *(void**)(native->vfptr0 + 76);
                    *(void**)(vfptr0 + 80) = *(void**)(native->vfptr0 + 80);
                    *(void**)(vfptr0 + 84) = *(void**)(native->vfptr0 + 84);
                    *(void**)(vfptr0 + 88) = *(void**)(native->vfptr0 + 88);
                    *(void**)(vfptr0 + 92) = *(void**)(native->vfptr0 + 92);
                    *(void**)(vfptr0 + 96) = *(void**)(native->vfptr0 + 96);
                    *(void**)(vfptr0 + 100) = *(void**)(native->vfptr0 + 100);
                    *(void**)(vfptr0 + 104) = *(void**)(native->vfptr0 + 104);
                    *(void**)(vfptr0 + 108) = *(void**)(native->vfptr0 + 108);
                    *(void**)(vfptr0 + 112) = *(void**)(native->vfptr0 + 112);
                    *(void**)(vfptr0 + 116) = *(void**)(native->vfptr0 + 116);
                    *(void**)(vfptr0 + 120) = *(void**)(native->vfptr0 + 120);
                    *(void**)(vfptr0 + 124) = *(void**)(native->vfptr0 + 124);
                    *(void**)(vfptr0 + 128) = *(void**)(native->vfptr0 + 128);
                    *(void**)(vfptr0 + 132) = *(void**)(native->vfptr0 + 132);
                    *(void**)(vfptr0 + 136) = *(void**)(native->vfptr0 + 136);
                    *(void**)(vfptr0 + 140) = *(void**)(native->vfptr0 + 140);
                    *(void**)(vfptr0 + 144) = *(void**)(native->vfptr0 + 144);
                    *(void**)(vfptr0 + 148) = *(void**)(native->vfptr0 + 148);
                    *(void**)(vfptr0 + 152) = *(void**)(native->vfptr0 + 152);
                    *(void**)(vfptr0 + 156) = *(void**)(native->vfptr0 + 156);
                    *(void**)(vfptr0 + 160) = *(void**)(native->vfptr0 + 160);
                    *(void**)(vfptr0 + 164) = *(void**)(native->vfptr0 + 164);
                    *(void**)(vfptr0 + 168) = *(void**)(native->vfptr0 + 168);
                    *(void**)(vfptr0 + 172) = *(void**)(native->vfptr0 + 172);
                    *(void**)(vfptr0 + 176) = *(void**)(native->vfptr0 + 176);
                    *(void**)(vfptr0 + 180) = *(void**)(native->vfptr0 + 180);
                    *(void**)(vfptr0 + 184) = *(void**)(native->vfptr0 + 184);
                    *(void**)(vfptr0 + 188) = *(void**)(native->vfptr0 + 188);
                    *(void**)(vfptr0 + 192) = *(void**)(native->vfptr0 + 192);
                    *(void**)(vfptr0 + 196) = *(void**)(native->vfptr0 + 196);
                    *(void**)(vfptr0 + 200) = *(void**)(native->vfptr0 + 200);
                    *(void**)(vfptr0 + 204) = *(void**)(native->vfptr0 + 204);
                    *(void**)(vfptr0 + 208) = *(void**)(native->vfptr0 + 208);
                    *(void**)(vfptr0 + 212) = *(void**)(native->vfptr0 + 212);
                    *(void**)(vfptr0 + 216) = *(void**)(native->vfptr0 + 216);
                    *(void**)(vfptr0 + 220) = *(void**)(native->vfptr0 + 220);
                    *(void**)(vfptr0 + 224) = *(void**)(native->vfptr0 + 224);
                    *(void**)(vfptr0 + 228) = *(void**)(native->vfptr0 + 228);
                    *(void**)(vfptr0 + 232) = *(void**)(native->vfptr0 + 232);
                    *(void**)(vfptr0 + 236) = *(void**)(native->vfptr0 + 236);
                    *(void**)(vfptr0 + 240) = *(void**)(native->vfptr0 + 240);
                    *(void**)(vfptr0 + 244) = *(void**)(native->vfptr0 + 244);
                    *(void**)(vfptr0 + 248) = *(void**)(native->vfptr0 + 248);
                    *(void**)(vfptr0 + 252) = *(void**)(native->vfptr0 + 252);
                    *(void**)(vfptr0 + 256) = *(void**)(native->vfptr0 + 256);
                    *(void**)(vfptr0 + 260) = *(void**)(native->vfptr0 + 260);
                    *(void**)(vfptr0 + 264) = *(void**)(native->vfptr0 + 264);
                    *(void**)(vfptr0 + 268) = *(void**)(native->vfptr0 + 268);
                    *(void**)(vfptr0 + 272) = *(void**)(native->vfptr0 + 272);
                    *(void**)(vfptr0 + 276) = *(void**)(native->vfptr0 + 276);
                    *(void**)(vfptr0 + 280) = *(void**)(native->vfptr0 + 280);
                    *(void**)(vfptr0 + 284) = *(void**)(native->vfptr0 + 284);
                    *(void**)(vfptr0 + 288) = *(void**)(native->vfptr0 + 288);
                    *(void**)(vfptr0 + 292) = *(void**)(native->vfptr0 + 292);
                    *(void**)(vfptr0 + 296) = *(void**)(native->vfptr0 + 296);
                    *(void**)(vfptr0 + 300) = *(void**)(native->vfptr0 + 300);
                    *(void**)(vfptr0 + 304) = *(void**)(native->vfptr0 + 304);
                    *(void**)(vfptr0 + 308) = *(void**)(native->vfptr0 + 308);
                    *(void**)(vfptr0 + 312) = *(void**)(native->vfptr0 + 312);
                    *(void**)(vfptr0 + 316) = *(void**)(native->vfptr0 + 316);
                    *(void**)(vfptr0 + 320) = *(void**)(native->vfptr0 + 320);
                    *(void**)(vfptr0 + 324) = *(void**)(native->vfptr0 + 324);
                    *(void**)(vfptr0 + 328) = *(void**)(native->vfptr0 + 328);
                    *(void**)(vfptr0 + 332) = *(void**)(native->vfptr0 + 332);
                    *(void**)(vfptr0 + 336) = *(void**)(native->vfptr0 + 336);
                    *(void**)(vfptr0 + 340) = _Thunks[1];
                    *(void**)(vfptr0 + 344) = *(void**)(native->vfptr0 + 344);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(89 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                    *(void**)(vfptr0 + 72) = _Thunks[17];
                    *(void**)(vfptr0 + 76) = _Thunks[18];
                    *(void**)(vfptr0 + 80) = _Thunks[19];
                    *(void**)(vfptr0 + 84) = _Thunks[20];
                    *(void**)(vfptr0 + 88) = _Thunks[21];
                    *(void**)(vfptr0 + 92) = _Thunks[22];
                    *(void**)(vfptr0 + 96) = _Thunks[23];
                    *(void**)(vfptr0 + 100) = *(void**)(native->vfptr0 + 100);
                    *(void**)(vfptr0 + 104) = _Thunks[24];
                    *(void**)(vfptr0 + 108) = *(void**)(native->vfptr0 + 108);
                    *(void**)(vfptr0 + 112) = _Thunks[25];
                    *(void**)(vfptr0 + 116) = _Thunks[26];
                    *(void**)(vfptr0 + 120) = _Thunks[27];
                    *(void**)(vfptr0 + 124) = *(void**)(native->vfptr0 + 124);
                    *(void**)(vfptr0 + 128) = *(void**)(native->vfptr0 + 128);
                    *(void**)(vfptr0 + 132) = *(void**)(native->vfptr0 + 132);
                    *(void**)(vfptr0 + 136) = *(void**)(native->vfptr0 + 136);
                    *(void**)(vfptr0 + 140) = _Thunks[28];
                    *(void**)(vfptr0 + 144) = _Thunks[29];
                    *(void**)(vfptr0 + 148) = _Thunks[30];
                    *(void**)(vfptr0 + 152) = *(void**)(native->vfptr0 + 152);
                    *(void**)(vfptr0 + 156) = _Thunks[31];
                    *(void**)(vfptr0 + 160) = _Thunks[32];
                    *(void**)(vfptr0 + 164) = _Thunks[33];
                    *(void**)(vfptr0 + 168) = _Thunks[34];
                    *(void**)(vfptr0 + 172) = _Thunks[35];
                    *(void**)(vfptr0 + 176) = _Thunks[36];
                    *(void**)(vfptr0 + 180) = _Thunks[37];
                    *(void**)(vfptr0 + 184) = _Thunks[38];
                    *(void**)(vfptr0 + 188) = _Thunks[39];
                    *(void**)(vfptr0 + 192) = _Thunks[40];
                    *(void**)(vfptr0 + 196) = _Thunks[41];
                    *(void**)(vfptr0 + 200) = _Thunks[42];
                    *(void**)(vfptr0 + 204) = _Thunks[43];
                    *(void**)(vfptr0 + 208) = _Thunks[44];
                    *(void**)(vfptr0 + 212) = *(void**)(native->vfptr0 + 212);
                    *(void**)(vfptr0 + 216) = _Thunks[45];
                    *(void**)(vfptr0 + 220) = *(void**)(native->vfptr0 + 220);
                    *(void**)(vfptr0 + 224) = *(void**)(native->vfptr0 + 224);
                    *(void**)(vfptr0 + 228) = _Thunks[46];
                    *(void**)(vfptr0 + 232) = *(void**)(native->vfptr0 + 232);
                    *(void**)(vfptr0 + 236) = *(void**)(native->vfptr0 + 236);
                    *(void**)(vfptr0 + 240) = *(void**)(native->vfptr0 + 240);
                    *(void**)(vfptr0 + 244) = _Thunks[47];
                    *(void**)(vfptr0 + 248) = _Thunks[48];
                    *(void**)(vfptr0 + 252) = _Thunks[49];
                    *(void**)(vfptr0 + 256) = *(void**)(native->vfptr0 + 256);
                    *(void**)(vfptr0 + 260) = _Thunks[50];
                    *(void**)(vfptr0 + 264) = *(void**)(native->vfptr0 + 264);
                    *(void**)(vfptr0 + 268) = *(void**)(native->vfptr0 + 268);
                    *(void**)(vfptr0 + 272) = *(void**)(native->vfptr0 + 272);
                    *(void**)(vfptr0 + 276) = _Thunks[51];
                    *(void**)(vfptr0 + 280) = _Thunks[52];
                    *(void**)(vfptr0 + 284) = _Thunks[53];
                    *(void**)(vfptr0 + 288) = _Thunks[54];
                    *(void**)(vfptr0 + 292) = _Thunks[55];
                    *(void**)(vfptr0 + 296) = _Thunks[56];
                    *(void**)(vfptr0 + 300) = _Thunks[57];
                    *(void**)(vfptr0 + 304) = _Thunks[58];
                    *(void**)(vfptr0 + 308) = _Thunks[59];
                    *(void**)(vfptr0 + 312) = _Thunks[60];
                    *(void**)(vfptr0 + 316) = _Thunks[61];
                    *(void**)(vfptr0 + 320) = _Thunks[62];
                    *(void**)(vfptr0 + 324) = _Thunks[63];
                    *(void**)(vfptr0 + 328) = *(void**)(native->vfptr0 + 328);
                    *(void**)(vfptr0 + 332) = *(void**)(native->vfptr0 + 332);
                    *(void**)(vfptr0 + 336) = *(void**)(native->vfptr0 + 336);
                    *(void**)(vfptr0 + 340) = _Thunks[1];
                    *(void**)(vfptr0 + 344) = _Thunks[29];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class app
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z6wxExitv")]
            internal static extern void wxExit_0();
        }

        public static void wxExit()
        {
            Internal.wxExit_0();
        }
    }
}
