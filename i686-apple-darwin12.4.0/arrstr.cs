//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxArrayString : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_compareFunction;

            [FieldOffset(4)]
            public uint m_nSize;

            [FieldOffset(8)]
            public uint m_nCount;

            [FieldOffset(12)]
            public global::System.IntPtr m_pItems;

            [FieldOffset(16)]
            public byte m_autoSort;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayStringC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayStringC2Ei")]
            internal static extern void ctor_1(global::System.IntPtr instance, int autoSort);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayStringC2EmPPKc")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint sz, sbyte** a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayStringC2EmPPKw")]
            internal static extern void ctor_3(global::System.IntPtr instance, uint sz, char** a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayStringC2EmPK8wxString")]
            internal static extern void ctor_4(global::System.IntPtr instance, uint sz, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayStringC2ERKS_")]
            internal static extern void cctor_5(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayStringC2EPK8wxStringS2_")]
            internal static extern void ctor_6(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayStringD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString5AllocEm")]
            internal static extern void Alloc_0(global::System.IntPtr instance, uint nCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString6ShrinkEv")]
            internal static extern void Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayString8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayString7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayString5CountEv")]
            internal static extern uint Count_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4ItemEm")]
            internal static extern global::System.IntPtr Item_0(global::System.IntPtr instance, uint nIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4LastEv")]
            internal static extern global::System.IntPtr Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayString5IndexERK8wxStringbb")]
            internal static extern int Index_0(global::System.IntPtr instance, global::System.IntPtr str, bool bCase, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString3AddERK8wxStringm")]
            internal static extern uint Add_0(global::System.IntPtr instance, global::System.IntPtr str, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString6InsertERK8wxStringmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, global::System.IntPtr str, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString8SetCountEm")]
            internal static extern void SetCount_0(global::System.IntPtr instance, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString6RemoveERK8wxString")]
            internal static extern void Remove_0(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint nIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4SortEb")]
            internal static extern void Sort_0(global::System.IntPtr instance, bool reverseOrder);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4SortEPFiRK8wxStringS2_E")]
            internal static extern void Sort_1(global::System.IntPtr instance, global::System.IntPtr compareFunction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4SortEPFiP8wxStringS1_E")]
            internal static extern void Sort_2(global::System.IntPtr instance, global::System.IntPtr compareFunction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayStringeqERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayStringneERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString6assignEmRK8wxString")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4backEv")]
            internal static extern global::System.IntPtr back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString5beginEv")]
            internal static extern global::System.IntPtr begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayString8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayString5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString3endEv")]
            internal static extern global::System.IntPtr end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString5eraseEP8wxStringS1_")]
            internal static extern global::System.IntPtr erase_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString5eraseEP8wxString")]
            internal static extern global::System.IntPtr erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString5frontEv")]
            internal static extern global::System.IntPtr front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString6insertEP8wxStringmRKS0_")]
            internal static extern void insert_0(global::System.IntPtr instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString6insertEP8wxStringRKS0_")]
            internal static extern global::System.IntPtr insert_1(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString6insertEP8wxStringPKS0_S3_")]
            internal static extern void insert_2(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayString8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString9push_backERK8wxString")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString6rbeginEv")]
            internal static extern void rbegin_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4rendEv")]
            internal static extern void rend_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString6resizeEm8wxString")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, wxString.Internal v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayString4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4InitEb")]
            internal static extern void Init_0(global::System.IntPtr instance, bool autoSort);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayString4CopyERKS_")]
            internal static extern void Copy_0(global::System.IntPtr instance, global::System.IntPtr src);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayStringixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint nIndex);
        }

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int CompareFunction(global::System.IntPtr first, global::System.IntPtr second);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate int CompareFunction2(global::System.IntPtr first, global::System.IntPtr second);

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxArrayString16reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayString.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxArrayString22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxArrayString22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxArrayString.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayString.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxArrayString> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxArrayString>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxArrayString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxArrayString(native.ToPointer(), skipVTables);
        }

        public static wxArrayString __CreateInstance(wxArrayString.Internal native, bool skipVTables = false)
        {
            return new wxArrayString(native, skipVTables);
        }

        private static void* __CopyValue(wxArrayString.Internal native)
        {
            var ret = Marshal.AllocHGlobal(20);
            wxArrayString.Internal.cctor_5(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxArrayString(wxArrayString.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxArrayString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxArrayString()
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxArrayString(int autoSort)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), autoSort);
        }

        public wxArrayString(uint sz, sbyte** a)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = a;
            Internal.ctor_2((__Instance + __PointerAdjustment), sz, arg1);
        }

        public wxArrayString(uint sz, char** a)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = a;
            Internal.ctor_3((__Instance + __PointerAdjustment), sz, arg1);
        }

        public wxArrayString(uint sz, wxString a)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(a, null) ? global::System.IntPtr.Zero : a.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), sz, arg1);
        }

        public wxArrayString(wxArrayString array)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.cctor_5((__Instance + __PointerAdjustment), arg0);
        }

        public wxArrayString(wxString first, wxString last)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.ctor_6((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxArrayString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void Alloc(uint nCount)
        {
            Internal.Alloc_0((__Instance + __PointerAdjustment), nCount);
        }

        public void Shrink()
        {
            Internal.Shrink_0((__Instance + __PointerAdjustment));
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Count()
        {
            var __ret = Internal.Count_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString Item(uint nIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), nIndex);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public int Index(wxString str, bool bCase, bool bFromEnd)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), arg0, bCase, bFromEnd);
            return __ret;
        }

        public uint Add(wxString str, uint nInsert)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.Add_0((__Instance + __PointerAdjustment), arg0, nInsert);
            return __ret;
        }

        public void Insert(wxString str, uint uiIndex, uint nInsert)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            Internal.Insert_0((__Instance + __PointerAdjustment), arg0, uiIndex, nInsert);
        }

        public void SetCount(uint count)
        {
            Internal.SetCount_0((__Instance + __PointerAdjustment), count);
        }

        public void Remove(wxString sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            Internal.Remove_0((__Instance + __PointerAdjustment), arg0);
        }

        public void RemoveAt(uint nIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), nIndex, nRemove);
        }

        public void Sort(bool reverseOrder)
        {
            Internal.Sort_0((__Instance + __PointerAdjustment), reverseOrder);
        }

        public void Sort(wxArrayString.CompareFunction compareFunction)
        {
            var arg0 = compareFunction == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(compareFunction);
            Internal.Sort_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Sort(wxArrayString.CompareFunction2 compareFunction)
        {
            var arg0 = compareFunction == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(compareFunction);
            Internal.Sort_2((__Instance + __PointerAdjustment), arg0);
        }

        public static bool operator ==(wxArrayString __op, wxArrayString a)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool aNull = ReferenceEquals(a, null);
            if (__opNull || aNull)
                return __opNull && aNull;
            var arg0 = __op.__Instance;
            var arg1 = a.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxArrayString;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxArrayString __op, wxArrayString a)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool aNull = ReferenceEquals(a, null);
            if (__opNull || aNull)
                return !(__opNull && aNull);
            var arg0 = __op.__Instance;
            var arg1 = a.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public void assign(uint n, wxString v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxString back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString erase(wxString first, wxString last)
        {
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString erase(wxString it)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public void insert(wxString it, uint n, wxString v)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg2 = v.__Instance;
            Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
        }

        public wxString insert(wxString it, wxString v)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public void insert(wxString it, wxString first, wxString last)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            var arg1 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg2 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void push_back(wxString v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxArrayString.reverse_iterator rbegin()
        {
            var __ret = new wxArrayString.reverse_iterator.Internal();
            Internal.rbegin_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayString.reverse_iterator.__CreateInstance(__ret);
        }

        public wxArrayString.reverse_iterator rend()
        {
            var __ret = new wxArrayString.reverse_iterator.Internal();
            Internal.rend_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayString.reverse_iterator.__CreateInstance(__ret);
        }

        public void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        public void resize(uint n, wxString v)
        {
            var arg1 = ReferenceEquals(v, null) ? new wxString.Internal() : *(wxString.Internal*) (v.__Instance);
            Internal.resize_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void swap(wxArrayString other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void Init(bool autoSort)
        {
            Internal.Init_0((__Instance + __PointerAdjustment), autoSort);
        }

        protected void Copy(wxArrayString src)
        {
            if (ReferenceEquals(src, null))
                throw new global::System.ArgumentNullException("src", "Cannot be null because it is a C++ reference (&).");
            var arg0 = src.__Instance;
            Internal.Copy_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxString this[uint nIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), nIndex);
                wxString __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxString) wxString.NativeToManagedMap[__ret];
                else __result0 = wxString.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                *(wxString.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), nIndex) = *(wxString.Internal*) value.__Instance;
            }
        }

        protected wxArrayString.CompareFunction m_compareFunction
        {
            get
            {
                var __ptr0 = ((Internal*) __Instance)->m_compareFunction;
                return (wxArrayString.CompareFunction)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(wxArrayString.CompareFunction));
            }

            set
            {
                ((Internal*) __Instance)->m_compareFunction = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class wxSortedArrayString : wxArrayString, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_compareFunction;

            [FieldOffset(4)]
            public uint m_nSize;

            [FieldOffset(8)]
            public uint m_nCount;

            [FieldOffset(12)]
            public global::System.IntPtr m_pItems;

            [FieldOffset(16)]
            public byte m_autoSort;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxSortedArrayStringC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxSortedArrayStringC2ERK13wxArrayString")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxSortedArrayStringC2EPFiRK8wxStringS2_E")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr compareFunction);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxSortedArrayStringC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxSortedArrayStringD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public static new wxSortedArrayString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxSortedArrayString(native.ToPointer(), skipVTables);
        }

        public static wxSortedArrayString __CreateInstance(wxSortedArrayString.Internal native, bool skipVTables = false)
        {
            return new wxSortedArrayString(native, skipVTables);
        }

        private static void* __CopyValue(wxSortedArrayString.Internal native)
        {
            var ret = Marshal.AllocHGlobal(20);
            wxSortedArrayString.Internal.cctor_4(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxSortedArrayString(wxSortedArrayString.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxSortedArrayString(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxSortedArrayString()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxSortedArrayString(wxArrayString array)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public wxSortedArrayString(wxArrayString.CompareFunction compareFunction)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = compareFunction == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(compareFunction);
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public wxSortedArrayString(wxSortedArrayString _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_4((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxArrayString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxCArrayString : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_array;

            [FieldOffset(4)]
            public global::System.IntPtr m_strings;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCArrayStringC2ERK13wxArrayString")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCArrayStringC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCArrayStringD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCArrayString8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCArrayString10GetStringsEv")]
            internal static extern global::System.IntPtr GetStrings_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCArrayString7ReleaseEv")]
            internal static extern global::System.IntPtr Release_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxCArrayString> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxCArrayString>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxCArrayString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxCArrayString(native.ToPointer(), skipVTables);
        }

        public static wxCArrayString __CreateInstance(wxCArrayString.Internal native, bool skipVTables = false)
        {
            return new wxCArrayString(native, skipVTables);
        }

        private static void* __CopyValue(wxCArrayString.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxCArrayString.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxCArrayString(wxCArrayString.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxCArrayString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxCArrayString(wxArrayString array)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxCArrayString(wxCArrayString _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxCArrayString.Internal*) __Instance) = *((wxCArrayString.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxCArrayString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString GetStrings()
        {
            var __ret = Internal.GetStrings_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Release()
        {
            var __ret = Internal.Release_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class wxArrayStringsAdapter : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxArrayStringsAdapter.wxStringContainerType m_type;

            [FieldOffset(4)]
            public uint m_size;

            [FieldOffset(8)]
            internal wxArrayStringsAdapter._.Internal m_data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxArrayStringsAdapterC2ERK13wxArrayString")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr strings);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxArrayStringsAdapterC2EjPK8wxString")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint n, global::System.IntPtr strings);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxArrayStringsAdapterC2ERK8wxString")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxArrayStringsAdapterC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxArrayStringsAdapter8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxArrayStringsAdapter7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxArrayStringsAdapter13AsArrayStringEv")]
            internal static extern void AsArrayString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxArrayStringsAdapterixEj")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint i);
        }

        internal unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr ptr;

                [FieldOffset(0)]
                public global::System.IntPtr array;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxArrayStringsAdapter> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxArrayStringsAdapter>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxArrayStringsAdapter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxArrayStringsAdapter(native.ToPointer(), skipVTables);
        }

        public static wxArrayStringsAdapter __CreateInstance(wxArrayStringsAdapter.Internal native, bool skipVTables = false)
        {
            return new wxArrayStringsAdapter(native, skipVTables);
        }

        private static void* __CopyValue(wxArrayStringsAdapter.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            *(wxArrayStringsAdapter.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxArrayStringsAdapter(wxArrayStringsAdapter.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxArrayStringsAdapter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxArrayStringsAdapter(wxArrayString strings)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(strings, null))
                throw new global::System.ArgumentNullException("strings", "Cannot be null because it is a C++ reference (&).");
            var arg0 = strings.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxArrayStringsAdapter(uint n, wxString strings)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(strings, null) ? global::System.IntPtr.Zero : strings.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxArrayStringsAdapter(wxString s)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
        }

        public wxArrayStringsAdapter(wxArrayStringsAdapter _0)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxArrayStringsAdapter.Internal*) __Instance) = *((wxArrayStringsAdapter.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxArrayStringsAdapter __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxArrayString AsArrayString()
        {
            var __ret = new wxArrayString.Internal();
            Internal.AsArrayString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayString.__CreateInstance(__ret);
        }

        public wxString this[uint i]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), i);
                wxString __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxString) wxString.NativeToManagedMap[__ret];
                else __result0 = wxString.__CreateInstance(__ret);
                return __result0;
            }
        }
    }

    public unsafe partial class arrstr
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z21wxStringSortAscendingRK8wxStringS1_")]
            internal static extern int wxStringSortAscending_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z22wxStringSortDescendingRK8wxStringS1_")]
            internal static extern int wxStringSortDescending_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z31wxDictionaryStringSortAscendingRK8wxStringS1_")]
            internal static extern int wxDictionaryStringSortAscending_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z32wxDictionaryStringSortDescendingRK8wxStringS1_")]
            internal static extern int wxDictionaryStringSortDescending_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z6wxJoinRK13wxArrayStringww")]
            internal static extern void wxJoin_0(global::System.IntPtr @return, global::System.IntPtr arr, char sep, char escape);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxSplitRK8wxStringww")]
            internal static extern void wxSplit_0(global::System.IntPtr @return, global::System.IntPtr str, char sep, char escape);
        }

        public static int wxStringSortAscending(wxString s1, wxString s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.wxStringSortAscending_0(arg0, arg1);
            return __ret;
        }

        public static int wxStringSortDescending(wxString s1, wxString s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.wxStringSortDescending_0(arg0, arg1);
            return __ret;
        }

        public static int wxDictionaryStringSortAscending(wxString s1, wxString s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.wxDictionaryStringSortAscending_0(arg0, arg1);
            return __ret;
        }

        public static int wxDictionaryStringSortDescending(wxString s1, wxString s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.wxDictionaryStringSortDescending_0(arg0, arg1);
            return __ret;
        }

        public static wxString wxJoin(wxArrayString arr, char sep, char escape)
        {
            if (ReferenceEquals(arr, null))
                throw new global::System.ArgumentNullException("arr", "Cannot be null because it is a C++ reference (&).");
            var arg0 = arr.__Instance;
            var __ret = new wxString.Internal();
            Internal.wxJoin_0(new IntPtr(&__ret), arg0, sep, escape);
            return wxString.__CreateInstance(__ret);
        }

        public static wxArrayString wxSplit(wxString str, char sep, char escape)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = new wxArrayString.Internal();
            Internal.wxSplit_0(new IntPtr(&__ret), arg0, sep, escape);
            return wxArrayString.__CreateInstance(__ret);
        }
    }
}
