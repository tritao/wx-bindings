//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxMask : wxObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public wxMemoryBuffer.Internal m_memBuf;

            [FieldOffset(12)]
            public int m_bytesPerRow;

            [FieldOffset(16)]
            public int m_width;

            [FieldOffset(20)]
            public int m_height;

            [FieldOffset(24)]
            public global::System.IntPtr m_maskBitmap;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMaskC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMaskC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMaskC2ERK8wxBitmapRK8wxColour")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr bitmap, global::System.IntPtr colour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMaskC2ERK8wxBitmap")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMaskC2ERK14wxMemoryBufferiii")]
            internal static extern void ctor_4(global::System.IntPtr instance, global::System.IntPtr buf, int width, int height, int bytesPerRow);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMask14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMask6CreateERK8wxBitmapRK8wxColour")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_0(global::System.IntPtr instance, global::System.IntPtr bitmap, global::System.IntPtr colour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMask6CreateERK8wxBitmap")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_1(global::System.IntPtr instance, global::System.IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMask6CreateERK14wxMemoryBufferiii")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_2(global::System.IntPtr instance, global::System.IntPtr buf, int width, int height, int bytesPerRow);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxMask9GetBitmapEv")]
            internal static extern void GetBitmap_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMask4InitEv")]
            internal static extern void Init_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxMask12GetRawAccessEv")]
            internal static extern global::System.IntPtr GetRawAccess_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxMask14GetBytesPerRowEv")]
            internal static extern int GetBytesPerRow_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxMask13RealizeNativeEv")]
            internal static extern void RealizeNative_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxMask10GetHBITMAPEv")]
            internal static extern global::System.IntPtr GetHBITMAP_0(global::System.IntPtr instance);
        }

        public static new wxMask __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMask(native.ToPointer(), skipVTables);
        }

        public static wxMask __CreateInstance(wxMask.Internal native, bool skipVTables = false)
        {
            return new wxMask(native, skipVTables);
        }

        private static void* __CopyValue(wxMask.Internal native)
        {
            var ret = Marshal.AllocHGlobal(28);
            wxMask.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMask(wxMask.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMask(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMask()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMask");
        }

        public wxMask(wxMask mask)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(mask, null))
                throw new global::System.ArgumentNullException("mask", "Cannot be null because it is a C++ reference (&).");
            var arg0 = mask.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMask");
        }

        public wxMask(wxBitmap bitmap, wxColour colour)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(bitmap, null))
                throw new global::System.ArgumentNullException("bitmap", "Cannot be null because it is a C++ reference (&).");
            var arg0 = bitmap.__Instance;
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var arg1 = colour.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxMask");
        }

        public wxMask(wxBitmap bitmap)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(bitmap, null))
                throw new global::System.ArgumentNullException("bitmap", "Cannot be null because it is a C++ reference (&).");
            var arg0 = bitmap.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMask");
        }

        public wxMask(wxMemoryBuffer buf, int width, int height, int bytesPerRow)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(buf, null))
                throw new global::System.ArgumentNullException("buf", "Cannot be null because it is a C++ reference (&).");
            var arg0 = buf.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0, width, height, bytesPerRow);
            SetupVTables(GetType().FullName == "wxSharp.wxMask");
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public bool Create(wxBitmap bitmap, wxColour colour)
        {
            if (ReferenceEquals(bitmap, null))
                throw new global::System.ArgumentNullException("bitmap", "Cannot be null because it is a C++ reference (&).");
            var arg0 = bitmap.__Instance;
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var arg1 = colour.__Instance;
            var __ret = Internal.Create_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool Create(wxBitmap bitmap)
        {
            if (ReferenceEquals(bitmap, null))
                throw new global::System.ArgumentNullException("bitmap", "Cannot be null because it is a C++ reference (&).");
            var arg0 = bitmap.__Instance;
            var __ret = Internal.Create_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Create(wxMemoryBuffer buf, int width, int height, int bytesPerRow)
        {
            if (ReferenceEquals(buf, null))
                throw new global::System.ArgumentNullException("buf", "Cannot be null because it is a C++ reference (&).");
            var arg0 = buf.__Instance;
            var __ret = Internal.Create_2((__Instance + __PointerAdjustment), arg0, width, height, bytesPerRow);
            return __ret;
        }

        public wxBitmap GetBitmap()
        {
            var __ret = new wxBitmap.Internal();
            Internal.GetBitmap_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxBitmap.__CreateInstance(__ret);
        }

        public void Init()
        {
            Internal.Init_0((__Instance + __PointerAdjustment));
        }

        public global::System.IntPtr GetRawAccess()
        {
            var __ret = Internal.GetRawAccess_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetBytesPerRow()
        {
            var __ret = Internal.GetBytesPerRow_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void RealizeNative()
        {
            Internal.RealizeNative_0((__Instance + __PointerAdjustment));
        }

        public global::System.IntPtr GetHBITMAP()
        {
            var __ret = Internal.GetHBITMAP_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN6wxMask12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMask) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxMask()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMask) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMask) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMask) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[4];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(7 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxBitmap : wxBitmapBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmapC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmapC2EPKPKc")]
            internal static extern void ctor_2(global::System.IntPtr instance, sbyte** bits);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmapC2ERK8wxString12wxBitmapType")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr name, wxBitmapType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmapC2EPKv12wxBitmapTypeiii")]
            internal static extern void ctor_4(global::System.IntPtr instance, global::System.IntPtr data, wxBitmapType type, int width, int height, int depth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmapC2Eiii")]
            internal static extern void ctor_9(global::System.IntPtr instance, int width, int height, int depth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmapC2ERK6wxSizei")]
            internal static extern void ctor_10(global::System.IntPtr instance, global::System.IntPtr sz, int depth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmapC2ERK7wxImageid")]
            internal static extern void ctor_11(global::System.IntPtr instance, global::System.IntPtr image, int depth, double scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmapC2ERKS_")]
            internal static extern void cctor_13(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmap14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmap5SetOkEb")]
            internal static extern void SetOk_0(global::System.IntPtr instance, bool isOk);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmap20InitStandardHandlersEv")]
            internal static extern void InitStandardHandlers_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxBitmap8HasAlphaEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasAlpha_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmap8UseAlphaEv")]
            internal static extern void UseAlpha_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxBitmap10GetHBITMAPEPPv")]
            internal static extern global::System.IntPtr GetHBITMAP_0(global::System.IntPtr instance, global::System.IntPtr mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxBitmap12GetRawAccessEv")]
            internal static extern global::System.IntPtr GetRawAccess_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmap14BeginRawAccessEv")]
            internal static extern global::System.IntPtr BeginRawAccess_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxBitmap12EndRawAccessEv")]
            internal static extern void EndRawAccess_0(global::System.IntPtr instance);
        }

        public static new wxBitmap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBitmap(native.ToPointer(), skipVTables);
        }

        public static wxBitmap __CreateInstance(wxBitmap.Internal native, bool skipVTables = false)
        {
            return new wxBitmap(native, skipVTables);
        }

        private static void* __CopyValue(wxBitmap.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            wxBitmap.Internal.cctor_13(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxBitmap(wxBitmap.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBitmap(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxBitmap()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxBitmap");
        }

        public wxBitmap(sbyte** bits)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = bits;
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxBitmap");
        }

        public wxBitmap(wxString name, wxBitmapType type)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = type;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxBitmap");
        }

        public wxBitmap(global::System.IntPtr data, wxBitmapType type, int width, int height, int depth)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = data;
            var arg1 = type;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0, arg1, width, height, depth);
            SetupVTables(GetType().FullName == "wxSharp.wxBitmap");
        }

        public wxBitmap(int width, int height, int depth)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_9((__Instance + __PointerAdjustment), width, height, depth);
            SetupVTables(GetType().FullName == "wxSharp.wxBitmap");
        }

        public wxBitmap(wxSize sz, int depth)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            Internal.ctor_10((__Instance + __PointerAdjustment), arg0, depth);
            SetupVTables(GetType().FullName == "wxSharp.wxBitmap");
        }

        public wxBitmap(wxImage image, int depth, double scale)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(image, null))
                throw new global::System.ArgumentNullException("image", "Cannot be null because it is a C++ reference (&).");
            var arg0 = image.__Instance;
            Internal.ctor_11((__Instance + __PointerAdjustment), arg0, depth, scale);
            SetupVTables(GetType().FullName == "wxSharp.wxBitmap");
        }

        public wxBitmap(wxBitmap _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_13((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxBitmap");
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public override wxImage ConvertToImage()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___ConvertToImage_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var __ret = new wxImage.Internal();
            ___ConvertToImage_0Delegate(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxImage.__CreateInstance(__ret);
        }

        public override wxBitmap GetSubBitmap(wxRect rect)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 21 * 4);
            var ___GetSubBitmap_0Delegate = (Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            var __ret = new wxBitmap.Internal();
            ___GetSubBitmap_0Delegate(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxBitmap.__CreateInstance(__ret);
        }

        public override bool Create(int width, int height, int depth)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___Create_0Delegate = (Delegates.Func_bool_IntPtr_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_int_int_int));
            var __ret = ___Create_0Delegate((__Instance + __PointerAdjustment), width, height, depth);
            return __ret;
        }

        public override bool Create(wxSize sz, int depth)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___Create_1Delegate = (Delegates.Func_bool_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_int));
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = ___Create_1Delegate((__Instance + __PointerAdjustment), arg0, depth);
            return __ret;
        }

        public virtual bool Create(global::System.IntPtr data, wxBitmapType type, int width, int height, int depth)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 31 * 4);
            var ___Create_2Delegate = (Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_int_int_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_int_int_int));
            var arg0 = data;
            var arg1 = type;
            var __ret = ___Create_2Delegate((__Instance + __PointerAdjustment), arg0, arg1, width, height, depth);
            return __ret;
        }

        public override bool CreateScaled(int logwidth, int logheight, int depth, double logicalScale)
        {
            return base.CreateScaled(logwidth, logheight, depth, logicalScale);
        }

        public override bool LoadFile(wxString name, wxBitmapType type)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 23 * 4);
            var ___LoadFile_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType));
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = type;
            var __ret = ___LoadFile_0Delegate((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public override bool SaveFile(wxString name, wxBitmapType type, wxPalette cmap)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 22 * 4);
            var ___SaveFile_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_IntPtr));
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = type;
            var arg2 = ReferenceEquals(cmap, null) ? global::System.IntPtr.Zero : cmap.__Instance;
            var __ret = ___SaveFile_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            return __ret;
        }

        public override int GetWidth()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___GetWidth_0Delegate = (Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_int_IntPtr));
            var __ret = ___GetWidth_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override int GetHeight()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___GetHeight_0Delegate = (Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_int_IntPtr));
            var __ret = ___GetHeight_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override int GetDepth()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___GetDepth_0Delegate = (Delegates.Func_int_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_int_IntPtr));
            var __ret = ___GetDepth_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override void SetWidth(int w)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 28 * 4);
            var ___SetWidth_0Delegate = (Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_int));
            ___SetWidth_0Delegate((__Instance + __PointerAdjustment), w);
        }

        public override void SetHeight(int h)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 27 * 4);
            var ___SetHeight_0Delegate = (Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_int));
            ___SetHeight_0Delegate((__Instance + __PointerAdjustment), h);
        }

        public override void SetDepth(int d)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 29 * 4);
            var ___SetDepth_0Delegate = (Delegates.Action_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_int));
            ___SetDepth_0Delegate((__Instance + __PointerAdjustment), d);
        }

        public void SetOk(bool isOk)
        {
            Internal.SetOk_0((__Instance + __PointerAdjustment), isOk);
        }

        public override wxPalette GetPalette()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 24 * 4);
            var ___GetPalette_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetPalette_0Delegate((__Instance + __PointerAdjustment));
            wxPalette __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPalette.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPalette) wxPalette.NativeToManagedMap[__ret];
            else wxPalette.NativeToManagedMap[__ret] = __result0 = (wxPalette) wxPalette.__CreateInstance(__ret);
            return __result0;
        }

        public override void SetPalette(wxPalette palette)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 25 * 4);
            var ___SetPalette_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(palette, null))
                throw new global::System.ArgumentNullException("palette", "Cannot be null because it is a C++ reference (&).");
            var arg0 = palette.__Instance;
            ___SetPalette_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public override wxMask GetMask()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___GetMask_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetMask_0Delegate((__Instance + __PointerAdjustment));
            wxMask __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMask.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMask) wxMask.NativeToManagedMap[__ret];
            else wxMask.NativeToManagedMap[__ret] = __result0 = (wxMask) wxMask.__CreateInstance(__ret);
            return __result0;
        }

        public override void SetMask(wxMask mask)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 20 * 4);
            var ___SetMask_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(mask, null) ? global::System.IntPtr.Zero : mask.__Instance;
            ___SetMask_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public bool HasAlpha()
        {
            var __ret = Internal.HasAlpha_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void UseAlpha()
        {
            Internal.UseAlpha_0((__Instance + __PointerAdjustment));
        }

        public global::System.IntPtr GetHBITMAP(global::System.IntPtr mask)
        {
            var arg0 = mask;
            var __ret = Internal.GetHBITMAP_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public global::System.IntPtr GetRawAccess()
        {
            var __ret = Internal.GetRawAccess_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public global::System.IntPtr BeginRawAccess()
        {
            var __ret = Internal.BeginRawAccess_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void EndRawAccess()
        {
            Internal.EndRawAccess_0((__Instance + __PointerAdjustment));
        }

        public override double GetScaleFactor()
        {
            return base.GetScaleFactor();
        }

        protected override wxGDIRefData CreateGDIRefData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___CreateGDIRefData_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___CreateGDIRefData_0Delegate((__Instance + __PointerAdjustment));
            wxGDIRefData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxGDIRefData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxGDIRefData) wxGDIRefData.NativeToManagedMap[__ret];
            else wxGDIRefData.NativeToManagedMap[__ret] = __result0 = (wxGDIRefData) wxGDIRefData.__CreateInstance(__ret);
            return __result0;
        }

        protected override wxGDIRefData CloneGDIRefData(wxGDIRefData data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___CloneGDIRefData_0Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            var __ret = ___CloneGDIRefData_0Delegate((__Instance + __PointerAdjustment), arg0);
            wxGDIRefData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxGDIRefData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxGDIRefData) wxGDIRefData.NativeToManagedMap[__ret];
            else wxGDIRefData.NativeToManagedMap[__ret] = __result0 = (wxGDIRefData) wxGDIRefData.__CreateInstance(__ret);
            return __result0;
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static void InitStandardHandlers()
        {
            Internal.InitStandardHandlers_0();
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN8wxBitmap12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxBitmap()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // wxGDIRefData *CreateGDIRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateGDIRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateGDIRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateGDIRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxGDIRefData *CloneGDIRefData(const wxGDIRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneGDIRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneGDIRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxGDIRefData __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxGDIRefData.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxGDIRefData) wxGDIRefData.NativeToManagedMap[data];
            else __result0 = (wxGDIRefData) wxGDIRefData.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneGDIRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool Create(int width, int height, int depth = wxBITMAP_SCREEN_DEPTH)
        private static Delegates.Func_bool_IntPtr_int_int_int _Create_0DelegateInstance;

        private static bool _Create_0DelegateHook(global::System.IntPtr instance, int width, int height, int depth)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Create(width, height, depth);
            return __ret;
        }

        // bool Create(const wxSize& sz, int depth = wxBITMAP_SCREEN_DEPTH)
        private static Delegates.Func_bool_IntPtr_IntPtr_int _Create_1DelegateInstance;

        private static bool _Create_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr sz, int depth)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxSize __result0;
            if (sz == IntPtr.Zero) __result0 = null;
            else if (wxSize.NativeToManagedMap.ContainsKey(sz))
                __result0 = (wxSize) wxSize.NativeToManagedMap[sz];
            else __result0 = wxSize.__CreateInstance(sz);
            var __ret = __target.Create(__result0, depth);
            return __ret;
        }

        // bool CreateScaled(int logwidth, int logheight, int depth, double logicalScale)
        private static Delegates.Func_bool_IntPtr_int_int_int_double _CreateScaled_0DelegateInstance;

        private static bool _CreateScaled_0DelegateHook(global::System.IntPtr instance, int logwidth, int logheight, int depth, double logicalScale)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateScaled(logwidth, logheight, depth, logicalScale);
            return __ret;
        }

        // int GetHeight() const
        private static Delegates.Func_int_IntPtr _GetHeight_0DelegateInstance;

        private static int _GetHeight_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetHeight();
            return __ret;
        }

        // int GetWidth() const
        private static Delegates.Func_int_IntPtr _GetWidth_0DelegateInstance;

        private static int _GetWidth_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetWidth();
            return __ret;
        }

        // int GetDepth() const
        private static Delegates.Func_int_IntPtr _GetDepth_0DelegateInstance;

        private static int _GetDepth_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetDepth();
            return __ret;
        }

        // double GetScaleFactor() const
        private static Delegates.Func_double_IntPtr _GetScaleFactor_0DelegateInstance;

        private static double _GetScaleFactor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetScaleFactor();
            return __ret;
        }

        // double GetScaledWidth() const
        private static Delegates.Func_double_IntPtr _GetScaledWidth_0DelegateInstance;

        private static double _GetScaledWidth_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetScaledWidth();
            return __ret;
        }

        // double GetScaledHeight() const
        private static Delegates.Func_double_IntPtr _GetScaledHeight_0DelegateInstance;

        private static double _GetScaledHeight_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetScaledHeight();
            return __ret;
        }

        // wxSize GetScaledSize() const
        private static Delegates.Func_wxSize_Internal_IntPtr _GetScaledSize_0DelegateInstance;

        private static wxSize.Internal _GetScaledSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetScaledSize();
            return ReferenceEquals(__ret, null) ? new wxSize.Internal() : *(wxSize.Internal*) (__ret.__Instance);
        }

        // wxImage ConvertToImage() const
        private static Delegates.Action_IntPtr_IntPtr _ConvertToImage_0DelegateInstance;

        private static void _ConvertToImage_0DelegateHook(global::System.IntPtr @return, global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ConvertToImage();
            *(wxImage.Internal*) @return = ReferenceEquals(__ret, null) ? new wxImage.Internal() : *(wxImage.Internal*) (__ret.__Instance);
        }

        // wxMask *GetMask() const
        private static Delegates.Func_IntPtr_IntPtr _GetMask_0DelegateInstance;

        private static global::System.IntPtr _GetMask_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMask();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetMask(wxMask *mask)
        private static Delegates.Action_IntPtr_IntPtr _SetMask_0DelegateInstance;

        private static void _SetMask_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr mask)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxMask __result0;
            if (mask == IntPtr.Zero) __result0 = null;
            else if (wxMask.NativeToManagedMap.ContainsKey(mask))
                __result0 = (wxMask) wxMask.NativeToManagedMap[mask];
            else __result0 = (wxMask) wxMask.__CreateInstance(mask, skipVTables: true);
            __target.SetMask(__result0);
        }

        // wxBitmap GetSubBitmap( const wxRect& rect ) const
        private static Delegates.Action_IntPtr_IntPtr_IntPtr _GetSubBitmap_0DelegateInstance;

        private static void _GetSubBitmap_0DelegateHook(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr rect)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRect __result1;
            if (rect == IntPtr.Zero) __result1 = null;
            else if (wxRect.NativeToManagedMap.ContainsKey(rect))
                __result1 = (wxRect) wxRect.NativeToManagedMap[rect];
            else __result1 = wxRect.__CreateInstance(rect);
            var __ret = __target.GetSubBitmap(__result1);
            *(wxBitmap.Internal*) @return = ReferenceEquals(__ret, null) ? new wxBitmap.Internal() : *(wxBitmap.Internal*) (__ret.__Instance);
        }

        // bool SaveFile(const wxString& name, wxBitmapType type, const wxPalette *cmap = NULL) const
        private static Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_IntPtr _SaveFile_0DelegateInstance;

        private static bool _SaveFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr name, wxBitmapType type, global::System.IntPtr cmap)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (name == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(name))
                __result0 = (wxString) wxString.NativeToManagedMap[name];
            else __result0 = wxString.__CreateInstance(name);
            wxPalette __result2;
            if (cmap == IntPtr.Zero) __result2 = null;
            else if (wxPalette.NativeToManagedMap.ContainsKey(cmap))
                __result2 = (wxPalette) wxPalette.NativeToManagedMap[cmap];
            else __result2 = (wxPalette) wxPalette.__CreateInstance(cmap, skipVTables: true);
            var __ret = __target.SaveFile(__result0, type, __result2);
            return __ret;
        }

        // bool LoadFile(const wxString& name, wxBitmapType type = wxBITMAP_DEFAULT_TYPE)
        private static Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType _LoadFile_0DelegateInstance;

        private static bool _LoadFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr name, wxBitmapType type)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (name == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(name))
                __result0 = (wxString) wxString.NativeToManagedMap[name];
            else __result0 = wxString.__CreateInstance(name);
            var __ret = __target.LoadFile(__result0, type);
            return __ret;
        }

        // wxPalette* GetPalette() const
        private static Delegates.Func_IntPtr_IntPtr _GetPalette_0DelegateInstance;

        private static global::System.IntPtr _GetPalette_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetPalette();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetPalette(const wxPalette& palette)
        private static Delegates.Action_IntPtr_IntPtr _SetPalette_0DelegateInstance;

        private static void _SetPalette_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr palette)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxPalette __result0;
            if (palette == IntPtr.Zero) __result0 = null;
            else if (wxPalette.NativeToManagedMap.ContainsKey(palette))
                __result0 = (wxPalette) wxPalette.NativeToManagedMap[palette];
            else __result0 = (wxPalette) wxPalette.__CreateInstance(palette, skipVTables: true);
            __target.SetPalette(__result0);
        }

        // void SetHeight(int h)
        private static Delegates.Action_IntPtr_int _SetHeight_0DelegateInstance;

        private static void _SetHeight_0DelegateHook(global::System.IntPtr instance, int h)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetHeight(h);
        }

        // void SetWidth(int w)
        private static Delegates.Action_IntPtr_int _SetWidth_0DelegateInstance;

        private static void _SetWidth_0DelegateHook(global::System.IntPtr instance, int w)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetWidth(w);
        }

        // void SetDepth(int d)
        private static Delegates.Action_IntPtr_int _SetDepth_0DelegateInstance;

        private static void _SetDepth_0DelegateHook(global::System.IntPtr instance, int d)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.SetDepth(d);
        }

        // wxColour QuantizeColour(const wxColour& colour) const
        private static Delegates.Action_IntPtr_IntPtr_IntPtr _QuantizeColour_0DelegateInstance;

        private static void _QuantizeColour_0DelegateHook(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr colour)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxColour __result1;
            if (colour == IntPtr.Zero) __result1 = null;
            else if (wxColour.NativeToManagedMap.ContainsKey(colour))
                __result1 = (wxColour) wxColour.NativeToManagedMap[colour];
            else __result1 = (wxColour) wxColour.__CreateInstance(colour, skipVTables: true);
            var __ret = __target.QuantizeColour(__result1);
            *(wxColour.Internal*) @return = ReferenceEquals(__ret, null) ? new wxColour.Internal() : *(wxColour.Internal*) (__ret.__Instance);
        }

        // bool Create(const void* data, wxBitmapType type, int width, int height, int depth = 1)
        private static Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_int_int_int _Create_2DelegateInstance;

        private static bool _Create_2DelegateHook(global::System.IntPtr instance, global::System.IntPtr data, wxBitmapType type, int width, int height, int depth)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBitmap) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Create(data, type, width, height, depth);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[30];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _CreateGDIRefData_0DelegateInstance += _CreateGDIRefData_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_CreateGDIRefData_0DelegateInstance).ToPointer();
                _CloneGDIRefData_0DelegateInstance += _CloneGDIRefData_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_CloneGDIRefData_0DelegateInstance).ToPointer();
                _Create_0DelegateInstance += _Create_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_Create_0DelegateInstance).ToPointer();
                _Create_1DelegateInstance += _Create_1DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_Create_1DelegateInstance).ToPointer();
                _CreateScaled_0DelegateInstance += _CreateScaled_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_CreateScaled_0DelegateInstance).ToPointer();
                _GetHeight_0DelegateInstance += _GetHeight_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_GetHeight_0DelegateInstance).ToPointer();
                _GetWidth_0DelegateInstance += _GetWidth_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_GetWidth_0DelegateInstance).ToPointer();
                _GetDepth_0DelegateInstance += _GetDepth_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_GetDepth_0DelegateInstance).ToPointer();
                _GetScaleFactor_0DelegateInstance += _GetScaleFactor_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_GetScaleFactor_0DelegateInstance).ToPointer();
                _GetScaledWidth_0DelegateInstance += _GetScaledWidth_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_GetScaledWidth_0DelegateInstance).ToPointer();
                _GetScaledHeight_0DelegateInstance += _GetScaledHeight_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_GetScaledHeight_0DelegateInstance).ToPointer();
                _GetScaledSize_0DelegateInstance += _GetScaledSize_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_GetScaledSize_0DelegateInstance).ToPointer();
                _ConvertToImage_0DelegateInstance += _ConvertToImage_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_ConvertToImage_0DelegateInstance).ToPointer();
                _GetMask_0DelegateInstance += _GetMask_0DelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_GetMask_0DelegateInstance).ToPointer();
                _SetMask_0DelegateInstance += _SetMask_0DelegateHook;
                _Thunks[19] = Marshal.GetFunctionPointerForDelegate(_SetMask_0DelegateInstance).ToPointer();
                _GetSubBitmap_0DelegateInstance += _GetSubBitmap_0DelegateHook;
                _Thunks[20] = Marshal.GetFunctionPointerForDelegate(_GetSubBitmap_0DelegateInstance).ToPointer();
                _SaveFile_0DelegateInstance += _SaveFile_0DelegateHook;
                _Thunks[21] = Marshal.GetFunctionPointerForDelegate(_SaveFile_0DelegateInstance).ToPointer();
                _LoadFile_0DelegateInstance += _LoadFile_0DelegateHook;
                _Thunks[22] = Marshal.GetFunctionPointerForDelegate(_LoadFile_0DelegateInstance).ToPointer();
                _GetPalette_0DelegateInstance += _GetPalette_0DelegateHook;
                _Thunks[23] = Marshal.GetFunctionPointerForDelegate(_GetPalette_0DelegateInstance).ToPointer();
                _SetPalette_0DelegateInstance += _SetPalette_0DelegateHook;
                _Thunks[24] = Marshal.GetFunctionPointerForDelegate(_SetPalette_0DelegateInstance).ToPointer();
                _SetHeight_0DelegateInstance += _SetHeight_0DelegateHook;
                _Thunks[25] = Marshal.GetFunctionPointerForDelegate(_SetHeight_0DelegateInstance).ToPointer();
                _SetWidth_0DelegateInstance += _SetWidth_0DelegateHook;
                _Thunks[26] = Marshal.GetFunctionPointerForDelegate(_SetWidth_0DelegateInstance).ToPointer();
                _SetDepth_0DelegateInstance += _SetDepth_0DelegateHook;
                _Thunks[27] = Marshal.GetFunctionPointerForDelegate(_SetDepth_0DelegateInstance).ToPointer();
                _QuantizeColour_0DelegateInstance += _QuantizeColour_0DelegateHook;
                _Thunks[28] = Marshal.GetFunctionPointerForDelegate(_QuantizeColour_0DelegateInstance).ToPointer();
                _Create_2DelegateInstance += _Create_2DelegateHook;
                _Thunks[29] = Marshal.GetFunctionPointerForDelegate(_Create_2DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(34 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                    *(void**)(vfptr0 + 72) = *(void**)(native->vfptr0 + 72);
                    *(void**)(vfptr0 + 76) = *(void**)(native->vfptr0 + 76);
                    *(void**)(vfptr0 + 80) = *(void**)(native->vfptr0 + 80);
                    *(void**)(vfptr0 + 84) = *(void**)(native->vfptr0 + 84);
                    *(void**)(vfptr0 + 88) = *(void**)(native->vfptr0 + 88);
                    *(void**)(vfptr0 + 92) = *(void**)(native->vfptr0 + 92);
                    *(void**)(vfptr0 + 96) = *(void**)(native->vfptr0 + 96);
                    *(void**)(vfptr0 + 100) = *(void**)(native->vfptr0 + 100);
                    *(void**)(vfptr0 + 104) = *(void**)(native->vfptr0 + 104);
                    *(void**)(vfptr0 + 108) = *(void**)(native->vfptr0 + 108);
                    *(void**)(vfptr0 + 112) = *(void**)(native->vfptr0 + 112);
                    *(void**)(vfptr0 + 116) = *(void**)(native->vfptr0 + 116);
                    *(void**)(vfptr0 + 120) = *(void**)(native->vfptr0 + 120);
                    *(void**)(vfptr0 + 124) = *(void**)(native->vfptr0 + 124);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(34 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                    *(void**)(vfptr0 + 72) = _Thunks[17];
                    *(void**)(vfptr0 + 76) = _Thunks[18];
                    *(void**)(vfptr0 + 80) = _Thunks[19];
                    *(void**)(vfptr0 + 84) = _Thunks[20];
                    *(void**)(vfptr0 + 88) = _Thunks[21];
                    *(void**)(vfptr0 + 92) = _Thunks[22];
                    *(void**)(vfptr0 + 96) = _Thunks[23];
                    *(void**)(vfptr0 + 100) = _Thunks[24];
                    *(void**)(vfptr0 + 104) = *(void**)(native->vfptr0 + 104);
                    *(void**)(vfptr0 + 108) = _Thunks[25];
                    *(void**)(vfptr0 + 112) = _Thunks[26];
                    *(void**)(vfptr0 + 116) = _Thunks[27];
                    *(void**)(vfptr0 + 120) = _Thunks[28];
                    *(void**)(vfptr0 + 124) = _Thunks[29];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }
}
