//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxScopedCharTypeBuffer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_data;
        }

        protected internal unsafe partial class Data
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_str;

                [FieldOffset(4)]
                public uint m_length;

                [FieldOffset(8)]
                public ushort m_ref;

                [FieldOffset(10)]
                public byte m_owned;
            }
        }
    }

    public unsafe partial class wxCharTypeBuffer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
        }
    }

    public unsafe partial class wxWritableCharTypeBuffer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
        }
    }

    public unsafe partial class wxCharBuffer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCharBufferC2EPKc")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCharBufferC2Em")]
            internal static extern void ctor_3(global::System.IntPtr instance, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCharBufferC2ERK10wxCStrData")]
            internal static extern void ctor_4(global::System.IntPtr instance, global::System.IntPtr cstr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCharBufferC2ERKS_")]
            internal static extern void cctor_6(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCharBufferD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxCharBuffer> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxCharBuffer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxCharBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxCharBuffer(native.ToPointer(), skipVTables);
        }

        public static wxCharBuffer __CreateInstance(wxCharBuffer.Internal native, bool skipVTables = false)
        {
            return new wxCharBuffer(native, skipVTables);
        }

        private static void* __CopyValue(wxCharBuffer.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxCharBuffer.Internal.cctor_6(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxCharBuffer(wxCharBuffer.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxCharBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxCharBuffer(string str)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(str);
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public wxCharBuffer(uint len)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_3((__Instance + __PointerAdjustment), len);
        }

        public wxCharBuffer(wxCStrData cstr)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(cstr, null))
                throw new global::System.ArgumentNullException("cstr", "Cannot be null because it is a C++ reference (&).");
            var arg0 = cstr.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0);
        }

        public wxCharBuffer(wxCharBuffer _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_6((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxCharBuffer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxWCharBuffer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxWCharBufferC2EPKw")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxWCharBufferC2Em")]
            internal static extern void ctor_3(global::System.IntPtr instance, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxWCharBufferC2ERK10wxCStrData")]
            internal static extern void ctor_4(global::System.IntPtr instance, global::System.IntPtr cstr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxWCharBufferC2ERKS_")]
            internal static extern void cctor_6(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxWCharBufferD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxWCharBuffer> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxWCharBuffer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxWCharBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxWCharBuffer(native.ToPointer(), skipVTables);
        }

        public static wxWCharBuffer __CreateInstance(wxWCharBuffer.Internal native, bool skipVTables = false)
        {
            return new wxWCharBuffer(native, skipVTables);
        }

        private static void* __CopyValue(wxWCharBuffer.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxWCharBuffer.Internal.cctor_6(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxWCharBuffer(wxWCharBuffer.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxWCharBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxWCharBuffer(string str)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(str);
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public wxWCharBuffer(uint len)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_3((__Instance + __PointerAdjustment), len);
        }

        public wxWCharBuffer(wxCStrData cstr)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(cstr, null))
                throw new global::System.ArgumentNullException("cstr", "Cannot be null because it is a C++ reference (&).");
            var arg0 = cstr.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0);
        }

        public wxWCharBuffer(wxWCharBuffer _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_6((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxWCharBuffer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxMemoryBufferData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_data;

            [FieldOffset(4)]
            public uint m_size;

            [FieldOffset(8)]
            public uint m_len;

            [FieldOffset(12)]
            public uint m_ref;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxMemoryBufferDataD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        [Flags]
        public enum DefBufSize : uint
        {
            DefBufSize = 1024
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxMemoryBufferData> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxMemoryBufferData>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxMemoryBufferData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMemoryBufferData(native.ToPointer(), skipVTables);
        }

        public static wxMemoryBufferData __CreateInstance(wxMemoryBufferData.Internal native, bool skipVTables = false)
        {
            return new wxMemoryBufferData(native, skipVTables);
        }

        private static void* __CopyValue(wxMemoryBufferData.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            *(wxMemoryBufferData.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxMemoryBufferData(wxMemoryBufferData.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMemoryBufferData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxMemoryBufferData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxMemoryBuffer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_bufdata;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBufferC2Em")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBufferC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr src);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBufferD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxMemoryBuffer7GetDataEv")]
            internal static extern global::System.IntPtr GetData_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxMemoryBuffer10GetBufSizeEv")]
            internal static extern uint GetBufSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxMemoryBuffer10GetDataLenEv")]
            internal static extern uint GetDataLen_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxMemoryBuffer7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer10SetBufSizeEm")]
            internal static extern void SetBufSize_0(global::System.IntPtr instance, uint size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer10SetDataLenEm")]
            internal static extern void SetDataLen_0(global::System.IntPtr instance, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer11GetWriteBufEm")]
            internal static extern global::System.IntPtr GetWriteBuf_0(global::System.IntPtr instance, uint sizeNeeded);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer13UngetWriteBufEm")]
            internal static extern void UngetWriteBuf_0(global::System.IntPtr instance, uint sizeUsed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer12GetAppendBufEm")]
            internal static extern global::System.IntPtr GetAppendBuf_0(global::System.IntPtr instance, uint sizeNeeded);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer14UngetAppendBufEm")]
            internal static extern void UngetAppendBuf_0(global::System.IntPtr instance, uint sizeUsed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer10AppendByteEc")]
            internal static extern void AppendByte_0(global::System.IntPtr instance, sbyte data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer10AppendDataEPKvm")]
            internal static extern void AppendData_0(global::System.IntPtr instance, global::System.IntPtr data, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxMemoryBuffercvPKcEv")]
            internal static extern global::System.IntPtr OperatorConversion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxMemoryBuffer7releaseEv")]
            internal static extern global::System.IntPtr release_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxMemoryBuffer> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxMemoryBuffer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxMemoryBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMemoryBuffer(native.ToPointer(), skipVTables);
        }

        public static wxMemoryBuffer __CreateInstance(wxMemoryBuffer.Internal native, bool skipVTables = false)
        {
            return new wxMemoryBuffer(native, skipVTables);
        }

        private static void* __CopyValue(wxMemoryBuffer.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxMemoryBuffer.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMemoryBuffer(wxMemoryBuffer.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMemoryBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxMemoryBuffer(uint size)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), size);
        }

        public wxMemoryBuffer(wxMemoryBuffer src)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(src, null))
                throw new global::System.ArgumentNullException("src", "Cannot be null because it is a C++ reference (&).");
            var arg0 = src.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxMemoryBuffer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public global::System.IntPtr GetData()
        {
            var __ret = Internal.GetData_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetBufSize()
        {
            var __ret = Internal.GetBufSize_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetDataLen()
        {
            var __ret = Internal.GetDataLen_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetBufSize(uint size)
        {
            Internal.SetBufSize_0((__Instance + __PointerAdjustment), size);
        }

        public void SetDataLen(uint len)
        {
            Internal.SetDataLen_0((__Instance + __PointerAdjustment), len);
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public global::System.IntPtr GetWriteBuf(uint sizeNeeded)
        {
            var __ret = Internal.GetWriteBuf_0((__Instance + __PointerAdjustment), sizeNeeded);
            return __ret;
        }

        public void UngetWriteBuf(uint sizeUsed)
        {
            Internal.UngetWriteBuf_0((__Instance + __PointerAdjustment), sizeUsed);
        }

        public global::System.IntPtr GetAppendBuf(uint sizeNeeded)
        {
            var __ret = Internal.GetAppendBuf_0((__Instance + __PointerAdjustment), sizeNeeded);
            return __ret;
        }

        public void UngetAppendBuf(uint sizeUsed)
        {
            Internal.UngetAppendBuf_0((__Instance + __PointerAdjustment), sizeUsed);
        }

        public void AppendByte(sbyte data)
        {
            var arg0 = data;
            Internal.AppendByte_0((__Instance + __PointerAdjustment), arg0);
        }

        public void AppendData(global::System.IntPtr data, uint len)
        {
            var arg0 = data;
            Internal.AppendData_0((__Instance + __PointerAdjustment), arg0, len);
        }

        public static implicit operator string(wxMemoryBuffer __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_0(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public global::System.IntPtr release()
        {
            var __ret = Internal.release_0((__Instance + __PointerAdjustment));
            return __ret;
        }
    }

    public unsafe partial class buffer
    {
        public partial struct Internal
        {
        }
    }

    namespace wxPrivate
    {
        public unsafe partial class UntypedBufferData : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_str;

                [FieldOffset(4)]
                public uint m_length;

                [FieldOffset(8)]
                public ushort m_ref;

                [FieldOffset(10)]
                public byte m_owned;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN9wxPrivate17UntypedBufferDataC2EPvmNS0_4KindE")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr str, uint len, wxPrivate.UntypedBufferData.Kind kind);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN9wxPrivate17UntypedBufferDataC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN9wxPrivate17UntypedBufferDataD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);
            }

            public enum Kind : uint
            {
                Owned = 0,
                NonOwned = 1
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, UntypedBufferData> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, UntypedBufferData>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static UntypedBufferData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new UntypedBufferData(native.ToPointer(), skipVTables);
            }

            public static UntypedBufferData __CreateInstance(UntypedBufferData.Internal native, bool skipVTables = false)
            {
                return new UntypedBufferData(native, skipVTables);
            }

            private static void* __CopyValue(UntypedBufferData.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(UntypedBufferData.Internal*) ret = native;
                return ret.ToPointer();
            }

            private UntypedBufferData(UntypedBufferData.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected UntypedBufferData(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public UntypedBufferData(global::System.IntPtr str, uint len, wxPrivate.UntypedBufferData.Kind kind)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = str;
                var arg2 = kind;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, len, arg2);
            }

            public UntypedBufferData(wxPrivate.UntypedBufferData _0)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((UntypedBufferData.Internal*) __Instance) = *((UntypedBufferData.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxPrivate.UntypedBufferData __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public global::System.IntPtr m_str
            {
                get
                {
                    return ((Internal*) __Instance)->m_str;
                }

                set
                {
                    ((Internal*) __Instance)->m_str = value;
                }
            }

            public uint m_length
            {
                get
                {
                    return ((Internal*) __Instance)->m_length;
                }

                set
                {
                    ((Internal*) __Instance)->m_length = value;
                }
            }

            public ushort m_ref
            {
                get
                {
                    return ((Internal*) __Instance)->m_ref;
                }

                set
                {
                    ((Internal*) __Instance)->m_ref = value;
                }
            }

            public bool m_owned
            {
                get
                {
                    return ((Internal*) __Instance)->m_owned != 0;
                }

                set
                {
                    ((Internal*) __Instance)->m_owned = (byte) (value ? 1 : 0);
                }
            }
        }

        public unsafe partial class buffer
        {
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN9wxPrivate18GetUntypedNullDataEv")]
                internal static extern global::System.IntPtr GetUntypedNullData_0();
            }

            public static wxPrivate.UntypedBufferData GetUntypedNullData()
            {
                var __ret = Internal.GetUntypedNullData_0();
                wxPrivate.UntypedBufferData __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPrivate.UntypedBufferData.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPrivate.UntypedBufferData) wxPrivate.UntypedBufferData.NativeToManagedMap[__ret];
                else __result0 = wxPrivate.UntypedBufferData.__CreateInstance(__ret);
                return __result0;
            }
        }
    }
}
