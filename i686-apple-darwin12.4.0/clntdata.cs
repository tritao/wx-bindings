//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum wxClientDataType : uint
    {
        wxClientData_None = 0,
        wxClientData_Object = 1,
        wxClientData_Void = 2
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int wxShadowObjectMethod(global::System.IntPtr _0, global::System.IntPtr _1);

    public unsafe partial class wxShadowObjectMethods_wxImplementation_Pair : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal first;

            [FieldOffset(20)]
            public global::System.IntPtr second;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN43wxShadowObjectMethods_wxImplementation_PairC2ERK8wxStringRKPFiPvS3_E")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN43wxShadowObjectMethods_wxImplementation_PairC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN43wxShadowObjectMethods_wxImplementation_PairD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObjectMethods_wxImplementation_Pair> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObjectMethods_wxImplementation_Pair>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxShadowObjectMethods_wxImplementation_Pair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShadowObjectMethods_wxImplementation_Pair(native.ToPointer(), skipVTables);
        }

        public static wxShadowObjectMethods_wxImplementation_Pair __CreateInstance(wxShadowObjectMethods_wxImplementation_Pair.Internal native, bool skipVTables = false)
        {
            return new wxShadowObjectMethods_wxImplementation_Pair(native, skipVTables);
        }

        private static void* __CopyValue(wxShadowObjectMethods_wxImplementation_Pair.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            wxShadowObjectMethods_wxImplementation_Pair.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxShadowObjectMethods_wxImplementation_Pair(wxShadowObjectMethods_wxImplementation_Pair.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShadowObjectMethods_wxImplementation_Pair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxShadowObjectMethods_wxImplementation_Pair(wxString f, wxShadowObjectMethod s)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(f, null))
                throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
            var arg0 = f.__Instance;
            var arg1 = s == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(s);
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxShadowObjectMethods_wxImplementation_Pair(wxShadowObjectMethods_wxImplementation_Pair _0)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxShadowObjectMethods_wxImplementation_Pair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString first
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->first);
            }

            set
            {
                ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        public wxShadowObjectMethod second
        {
            get
            {
                var __ptr0 = ((Internal*) __Instance)->second;
                return (wxShadowObjectMethod)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(wxShadowObjectMethod));
            }

            set
            {
                ((Internal*) __Instance)->second = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class wxShadowObjectMethods_wxImplementation_KeyEx : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN44wxShadowObjectMethods_wxImplementation_KeyExC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN44wxShadowObjectMethods_wxImplementation_KeyExC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObjectMethods_wxImplementation_KeyEx> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObjectMethods_wxImplementation_KeyEx>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxShadowObjectMethods_wxImplementation_KeyEx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShadowObjectMethods_wxImplementation_KeyEx(native.ToPointer(), skipVTables);
        }

        public static wxShadowObjectMethods_wxImplementation_KeyEx __CreateInstance(wxShadowObjectMethods_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
        {
            return new wxShadowObjectMethods_wxImplementation_KeyEx(native, skipVTables);
        }

        private static void* __CopyValue(wxShadowObjectMethods_wxImplementation_KeyEx.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxShadowObjectMethods_wxImplementation_KeyEx.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxShadowObjectMethods_wxImplementation_KeyEx(wxShadowObjectMethods_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShadowObjectMethods_wxImplementation_KeyEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxShadowObjectMethods_wxImplementation_KeyEx()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxShadowObjectMethods_wxImplementation_KeyEx(wxShadowObjectMethods_wxImplementation_KeyEx _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxShadowObjectMethods_wxImplementation_KeyEx.Internal*) __Instance) = *((wxShadowObjectMethods_wxImplementation_KeyEx.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxShadowObjectMethods_wxImplementation_KeyEx __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxShadowObjectMethods_wxImplementation_HashTable : _wxHashTableBase2, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxShadowObjectMethods_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTableC2EmRK12wxStringHashRK13wxStringEqualRK44wxShadowObjectMethods_wxImplementation_KeyEx")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint sz, global::System.IntPtr hfun, global::System.IntPtr k_eq, global::System.IntPtr k_ex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTableC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr ht);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTableD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable10DeleteNodeEP21_wxHashTable_NodeBase")]
            internal static extern void DeleteNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable10hash_functEv")]
            internal static extern wxStringHash.Internal hash_funct_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable6key_eqEv")]
            internal static extern wxStringEqual.Internal key_eq_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK48wxShadowObjectMethods_wxImplementation_HashTable4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK48wxShadowObjectMethods_wxImplementation_HashTable8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK48wxShadowObjectMethods_wxImplementation_HashTable5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable3endEv")]
            internal static extern wxShadowObjectMethods_wxImplementation_HashTable.iterator.Internal end_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable5beginEv")]
            internal static extern wxShadowObjectMethods_wxImplementation_HashTable.iterator.Internal begin_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable16GetBucketForNodeEPS_PNS_4NodeE")]
            internal static extern uint GetBucketForNode_0(global::System.IntPtr ht, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8CopyNodeEPNS_4NodeE")]
            internal static extern global::System.IntPtr CopyNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable15GetOrCreateNodeERK43wxShadowObjectMethods_wxImplementation_PairRb")]
            internal static extern global::System.IntPtr GetOrCreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, bool* created);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable10CreateNodeERK43wxShadowObjectMethods_wxImplementation_Pairm")]
            internal static extern global::System.IntPtr CreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, uint bucket);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable10CreateNodeERK43wxShadowObjectMethods_wxImplementation_Pair")]
            internal static extern void CreateNode_1(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK48wxShadowObjectMethods_wxImplementation_HashTable10GetNodePtrERK8wxString")]
            internal static extern global::System.IntPtr GetNodePtr_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK48wxShadowObjectMethods_wxImplementation_HashTable7GetNodeERK8wxString")]
            internal static extern global::System.IntPtr GetNode_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable11ResizeTableEm")]
            internal static extern void ResizeTable_0(global::System.IntPtr instance, uint newSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8HashCopyERKS_")]
            internal static extern void HashCopy_0(global::System.IntPtr instance, global::System.IntPtr ht);
        }

        public unsafe partial class Node : _wxHashTable_NodeBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_next;

                [FieldOffset(4)]
                public wxShadowObjectMethods_wxImplementation_Pair.Internal m_value;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable4NodeC2ERK43wxShadowObjectMethods_wxImplementation_Pair")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable4NodeC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable4NodeD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable4Node4nextEv")]
                internal static extern global::System.IntPtr next_0(global::System.IntPtr instance);
            }

            public static new Node __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Node(native.ToPointer(), skipVTables);
            }

            public static Node __CreateInstance(Node.Internal native, bool skipVTables = false)
            {
                return new Node(native, skipVTables);
            }

            private static void* __CopyValue(Node.Internal native)
            {
                var ret = Marshal.AllocHGlobal(28);
                wxShadowObjectMethods_wxImplementation_HashTable.Node.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Node(Node.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Node(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Node(wxShadowObjectMethods_wxImplementation_Pair value)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var arg0 = value.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public Node(wxShadowObjectMethods_wxImplementation_HashTable.Node _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            }

            protected override void Dispose(bool disposing)
            {
                _wxHashTable_NodeBase __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxShadowObjectMethods_wxImplementation_HashTable.Node next()
            {
                var __ret = Internal.next_0((__Instance + __PointerAdjustment));
                wxShadowObjectMethods_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectMethods_wxImplementation_HashTable.Node) wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            public wxShadowObjectMethods_wxImplementation_Pair m_value
            {
                get
                {
                    return wxShadowObjectMethods_wxImplementation_Pair.__CreateInstance(((Internal*) __Instance)->m_value);
                }

                set
                {
                    ((Internal*) __Instance)->m_value = ReferenceEquals(value, null) ? new wxShadowObjectMethods_wxImplementation_Pair.Internal() : *(wxShadowObjectMethods_wxImplementation_Pair.Internal*) (value.__Instance);
                }
            }
        }

        public unsafe partial class Iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8IteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8IteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8IteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK48wxShadowObjectMethods_wxImplementation_HashTable8IteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK48wxShadowObjectMethods_wxImplementation_HashTable8IteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8Iterator11GetNextNodeEv")]
                internal static extern global::System.IntPtr GetNextNode_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8Iterator8PlusPlusEv")]
                internal static extern void PlusPlus_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Iterator(native.ToPointer(), skipVTables);
            }

            public static Iterator __CreateInstance(Iterator.Internal native, bool skipVTables = false)
            {
                return new Iterator(native, skipVTables);
            }

            private static void* __CopyValue(Iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(Iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Iterator(Iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public Iterator(wxShadowObjectMethods_wxImplementation_HashTable.Node node, wxShadowObjectMethods_wxImplementation_HashTable ht)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public Iterator(wxShadowObjectMethods_wxImplementation_HashTable.Iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Iterator.Internal*) __Instance) = *((Iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxShadowObjectMethods_wxImplementation_HashTable.Iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static bool operator ==(wxShadowObjectMethods_wxImplementation_HashTable.Iterator __op, wxShadowObjectMethods_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as Iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(wxShadowObjectMethods_wxImplementation_HashTable.Iterator __op, wxShadowObjectMethods_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            protected wxShadowObjectMethods_wxImplementation_HashTable.Node GetNextNode()
            {
                var __ret = Internal.GetNextNode_0((__Instance + __PointerAdjustment));
                wxShadowObjectMethods_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectMethods_wxImplementation_HashTable.Node) wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            protected void PlusPlus()
            {
                Internal.PlusPlus_0((__Instance + __PointerAdjustment));
            }

            public wxShadowObjectMethods_wxImplementation_HashTable.Node m_node
            {
                get
                {
                    wxShadowObjectMethods_wxImplementation_HashTable.Node __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxShadowObjectMethods_wxImplementation_HashTable.Node) wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.Node.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxShadowObjectMethods_wxImplementation_HashTable m_ht
            {
                get
                {
                    wxShadowObjectMethods_wxImplementation_HashTable __result0;
                    if (((Internal*) __Instance)->m_ht == IntPtr.Zero) __result0 = null;
                    else if (wxShadowObjectMethods_wxImplementation_HashTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_ht))
                        __result0 = (wxShadowObjectMethods_wxImplementation_HashTable) wxShadowObjectMethods_wxImplementation_HashTable.NativeToManagedMap[((Internal*) __Instance)->m_ht];
                    else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.__CreateInstance(((Internal*) __Instance)->m_ht);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_ht = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class iterator : wxShadowObjectMethods_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8iteratorC2EPNS_4NodeEPS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public iterator(wxShadowObjectMethods_wxImplementation_HashTable.Node node, wxShadowObjectMethods_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public iterator(wxShadowObjectMethods_wxImplementation_HashTable.iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((iterator.Internal*) __Instance) = *((iterator.Internal*) _0.__Instance);
            }

            public static wxShadowObjectMethods_wxImplementation_HashTable.iterator operator ++(wxShadowObjectMethods_wxImplementation_HashTable.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxShadowObjectMethods_wxImplementation_HashTable.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectMethods_wxImplementation_HashTable.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectMethods_wxImplementation_HashTable.iterator) wxShadowObjectMethods_wxImplementation_HashTable.iterator.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class const_iterator : wxShadowObjectMethods_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable14const_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable14const_iteratorC2ENS_8iteratorE")]
                internal static extern void ctor_1(global::System.IntPtr instance, wxShadowObjectMethods_wxImplementation_HashTable.iterator.Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable14const_iteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable14const_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN48wxShadowObjectMethods_wxImplementation_HashTable14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxShadowObjectMethods_wxImplementation_HashTable.iterator i)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(i, null) ? new wxShadowObjectMethods_wxImplementation_HashTable.iterator.Internal() : *(wxShadowObjectMethods_wxImplementation_HashTable.iterator.Internal*) (i.__Instance);
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxShadowObjectMethods_wxImplementation_HashTable.Node node, wxShadowObjectMethods_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_iterator(wxShadowObjectMethods_wxImplementation_HashTable.const_iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public static wxShadowObjectMethods_wxImplementation_HashTable.const_iterator operator ++(wxShadowObjectMethods_wxImplementation_HashTable.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxShadowObjectMethods_wxImplementation_HashTable.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectMethods_wxImplementation_HashTable.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectMethods_wxImplementation_HashTable.const_iterator) wxShadowObjectMethods_wxImplementation_HashTable.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.const_iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static new wxShadowObjectMethods_wxImplementation_HashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShadowObjectMethods_wxImplementation_HashTable(native.ToPointer(), skipVTables);
        }

        public static wxShadowObjectMethods_wxImplementation_HashTable __CreateInstance(wxShadowObjectMethods_wxImplementation_HashTable.Internal native, bool skipVTables = false)
        {
            return new wxShadowObjectMethods_wxImplementation_HashTable(native, skipVTables);
        }

        private static void* __CopyValue(wxShadowObjectMethods_wxImplementation_HashTable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxShadowObjectMethods_wxImplementation_HashTable.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxShadowObjectMethods_wxImplementation_HashTable(wxShadowObjectMethods_wxImplementation_HashTable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShadowObjectMethods_wxImplementation_HashTable(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxShadowObjectMethods_wxImplementation_HashTable(uint sz, wxStringHash hfun, wxStringEqual k_eq, wxShadowObjectMethods_wxImplementation_KeyEx k_ex)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(hfun, null))
                throw new global::System.ArgumentNullException("hfun", "Cannot be null because it is a C++ reference (&).");
            var arg1 = hfun.__Instance;
            if (ReferenceEquals(k_eq, null))
                throw new global::System.ArgumentNullException("k_eq", "Cannot be null because it is a C++ reference (&).");
            var arg2 = k_eq.__Instance;
            if (ReferenceEquals(k_ex, null))
                throw new global::System.ArgumentNullException("k_ex", "Cannot be null because it is a C++ reference (&).");
            var arg3 = k_ex.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), sz, arg1, arg2, arg3);
        }

        public wxShadowObjectMethods_wxImplementation_HashTable(wxShadowObjectMethods_wxImplementation_HashTable ht)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxStringHash hash_funct()
        {
            var __ret = Internal.hash_funct_0((__Instance + __PointerAdjustment));
            return wxStringHash.__CreateInstance(__ret);
        }

        public wxStringEqual key_eq()
        {
            var __ret = Internal.key_eq_0((__Instance + __PointerAdjustment));
            return wxStringEqual.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxShadowObjectMethods_wxImplementation_HashTable.iterator end()
        {
            var __ret = Internal.end_1((__Instance + __PointerAdjustment));
            return wxShadowObjectMethods_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxShadowObjectMethods_wxImplementation_HashTable.iterator begin()
        {
            var __ret = Internal.begin_1((__Instance + __PointerAdjustment));
            return wxShadowObjectMethods_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public uint erase(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected wxShadowObjectMethods_wxImplementation_HashTable.Node GetOrCreateNode(wxShadowObjectMethods_wxImplementation_Pair value, ref bool created)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            fixed (bool* __refParamPtr1 = &created)
            {
                var arg1 = __refParamPtr1;
                var __ret = Internal.GetOrCreateNode_0((__Instance + __PointerAdjustment), arg0, arg1);
                wxShadowObjectMethods_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectMethods_wxImplementation_HashTable.Node) wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected wxShadowObjectMethods_wxImplementation_HashTable.Node CreateNode(wxShadowObjectMethods_wxImplementation_Pair value, uint bucket)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            var __ret = Internal.CreateNode_0((__Instance + __PointerAdjustment), arg0, bucket);
            wxShadowObjectMethods_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxShadowObjectMethods_wxImplementation_HashTable.Node) wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void CreateNode(wxShadowObjectMethods_wxImplementation_Pair value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            Internal.CreateNode_1((__Instance + __PointerAdjustment), arg0);
        }

        protected _wxHashTable_NodeBase GetNodePtr(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNodePtr_0((__Instance + __PointerAdjustment), arg0);
            _wxHashTable_NodeBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[__ret];
            else __result0 = _wxHashTable_NodeBase.__CreateInstance(__ret);
            return __result0;
        }

        protected wxShadowObjectMethods_wxImplementation_HashTable.Node GetNode(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNode_0((__Instance + __PointerAdjustment), arg0);
            wxShadowObjectMethods_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxShadowObjectMethods_wxImplementation_HashTable.Node) wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void ResizeTable(uint newSize)
        {
            Internal.ResizeTable_0((__Instance + __PointerAdjustment), newSize);
        }

        protected void HashCopy(wxShadowObjectMethods_wxImplementation_HashTable ht)
        {
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.HashCopy_0((__Instance + __PointerAdjustment), arg0);
        }

        protected static void DeleteNode(_wxHashTable_NodeBase node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            Internal.DeleteNode_0(arg0);
        }

        protected static uint GetBucketForNode(wxShadowObjectMethods_wxImplementation_HashTable ht, wxShadowObjectMethods_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
            var arg1 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.GetBucketForNode_0(arg0, arg1);
            return __ret;
        }

        protected static wxShadowObjectMethods_wxImplementation_HashTable.Node CopyNode(wxShadowObjectMethods_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.CopyNode_0(arg0);
            wxShadowObjectMethods_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxShadowObjectMethods_wxImplementation_HashTable.Node) wxShadowObjectMethods_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxShadowObjectMethods_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected _wxHashTable_NodeBase m_table
        {
            get
            {
                _wxHashTable_NodeBase __result0;
                if (((Internal*) __Instance)->m_table == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_table))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[((Internal*) __Instance)->m_table];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(((Internal*) __Instance)->m_table);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_table = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected uint m_tableBuckets
        {
            get
            {
                return ((Internal*) __Instance)->m_tableBuckets;
            }

            set
            {
                ((Internal*) __Instance)->m_tableBuckets = value;
            }
        }

        protected uint m_items
        {
            get
            {
                return ((Internal*) __Instance)->m_items;
            }

            set
            {
                ((Internal*) __Instance)->m_items = value;
            }
        }

        protected wxStringHash m_hasher
        {
            get
            {
                return wxStringHash.__CreateInstance(((Internal*) __Instance)->m_hasher);
            }

            set
            {
                ((Internal*) __Instance)->m_hasher = ReferenceEquals(value, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (value.__Instance);
            }
        }

        protected wxStringEqual m_equals
        {
            get
            {
                return wxStringEqual.__CreateInstance(((Internal*) __Instance)->m_equals);
            }

            set
            {
                ((Internal*) __Instance)->m_equals = ReferenceEquals(value, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (value.__Instance);
            }
        }

        protected wxShadowObjectMethods_wxImplementation_KeyEx m_getKey
        {
            get
            {
                return wxShadowObjectMethods_wxImplementation_KeyEx.__CreateInstance(((Internal*) __Instance)->m_getKey);
            }

            set
            {
                ((Internal*) __Instance)->m_getKey = ReferenceEquals(value, null) ? new wxShadowObjectMethods_wxImplementation_KeyEx.Internal() : *(wxShadowObjectMethods_wxImplementation_KeyEx.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxShadowObjectMethods : wxShadowObjectMethods_wxImplementation_HashTable, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxShadowObjectMethods_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxShadowObjectMethodsC2Em12wxStringHash13wxStringEqual")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint hint, wxStringHash.Internal hf, wxStringEqual.Internal eq);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxShadowObjectMethodsC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxShadowObjectMethodsD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxShadowObjectMethods4findERK8wxString")]
            internal static extern wxShadowObjectMethods_wxImplementation_HashTable.iterator.Internal find_1(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxShadowObjectMethods6insertERK43wxShadowObjectMethods_wxImplementation_Pair")]
            internal static extern void insert_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxShadowObjectMethods5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr k);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxShadowObjectMethods5eraseERKN48wxShadowObjectMethods_wxImplementation_HashTable8iteratorE")]
            internal static extern void erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxShadowObjectMethods5countERK8wxString")]
            internal static extern uint count_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxShadowObjectMethodsixERK8wxString")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, global::System.IntPtr key);
        }

        public unsafe partial class Insert_Result : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxShadowObjectMethods_wxImplementation_HashTable.iterator.Internal first;

                [FieldOffset(8)]
                public byte second;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN21wxShadowObjectMethods13Insert_ResultC2ERKN48wxShadowObjectMethods_wxImplementation_HashTable8iteratorERKb")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, bool* s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN21wxShadowObjectMethods13Insert_ResultC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Insert_Result __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Insert_Result(native.ToPointer(), skipVTables);
            }

            public static Insert_Result __CreateInstance(Insert_Result.Internal native, bool skipVTables = false)
            {
                return new Insert_Result(native, skipVTables);
            }

            private static void* __CopyValue(Insert_Result.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(Insert_Result.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Insert_Result(Insert_Result.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Insert_Result(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Insert_Result(wxShadowObjectMethods_wxImplementation_HashTable.iterator f, ref bool s)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(f, null))
                    throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
                var arg0 = f.__Instance;
                fixed (bool* __refParamPtr1 = &s)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }

            public Insert_Result(wxShadowObjectMethods.Insert_Result _0)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Insert_Result.Internal*) __Instance) = *((Insert_Result.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxShadowObjectMethods.Insert_Result __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxShadowObjectMethods_wxImplementation_HashTable.iterator first
            {
                get
                {
                    return wxShadowObjectMethods_wxImplementation_HashTable.iterator.__CreateInstance(((Internal*) __Instance)->first);
                }

                set
                {
                    ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxShadowObjectMethods_wxImplementation_HashTable.iterator.Internal() : *(wxShadowObjectMethods_wxImplementation_HashTable.iterator.Internal*) (value.__Instance);
                }
            }

            public bool second
            {
                get
                {
                    return ((Internal*) __Instance)->second != 0;
                }

                set
                {
                    ((Internal*) __Instance)->second = (byte) (value ? 1 : 0);
                }
            }
        }

        public static new wxShadowObjectMethods __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShadowObjectMethods(native.ToPointer(), skipVTables);
        }

        public static wxShadowObjectMethods __CreateInstance(wxShadowObjectMethods.Internal native, bool skipVTables = false)
        {
            return new wxShadowObjectMethods(native, skipVTables);
        }

        private static void* __CopyValue(wxShadowObjectMethods.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxShadowObjectMethods.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxShadowObjectMethods(wxShadowObjectMethods.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShadowObjectMethods(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxShadowObjectMethods(uint hint, wxStringHash hf, wxStringEqual eq)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(hf, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (hf.__Instance);
            var arg2 = ReferenceEquals(eq, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (eq.__Instance);
            Internal.ctor_0((__Instance + __PointerAdjustment), hint, arg1, arg2);
        }

        public wxShadowObjectMethods(wxShadowObjectMethods _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxShadowObjectMethods_wxImplementation_HashTable.iterator find(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.find_1((__Instance + __PointerAdjustment), arg0);
            return wxShadowObjectMethods_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxShadowObjectMethods.Insert_Result insert(wxShadowObjectMethods_wxImplementation_Pair v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            var __ret = new wxShadowObjectMethods.Insert_Result.Internal();
            Internal.insert_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxShadowObjectMethods.Insert_Result.__CreateInstance(__ret);
        }

        public uint erase(wxString k)
        {
            if (ReferenceEquals(k, null))
                throw new global::System.ArgumentNullException("k", "Cannot be null because it is a C++ reference (&).");
            var arg0 = k.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void erase(wxShadowObjectMethods_wxImplementation_HashTable.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            Internal.erase_1((__Instance + __PointerAdjustment), arg0);
        }

        public uint count(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.count_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxShadowObjectMethod this[wxString key]
        {
            get
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var arg0 = key.__Instance;
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), arg0);
                var __ptr0 = __ret;
                return (wxShadowObjectMethod)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(wxShadowObjectMethod));
            }

            set
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var arg0 = key.__Instance;
                *(wxShadowObjectMethod.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), key.__Instance) = *(wxShadowObjectMethod.Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class wxShadowObjectFields_wxImplementation_Pair : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal first;

            [FieldOffset(20)]
            public global::System.IntPtr second;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxShadowObjectFields_wxImplementation_PairC2ERK8wxStringRKPKv")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxShadowObjectFields_wxImplementation_PairC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxShadowObjectFields_wxImplementation_PairD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public class second_type { }

        public class t2 { }

        public class const_t2 { }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObjectFields_wxImplementation_Pair> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObjectFields_wxImplementation_Pair>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxShadowObjectFields_wxImplementation_Pair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShadowObjectFields_wxImplementation_Pair(native.ToPointer(), skipVTables);
        }

        public static wxShadowObjectFields_wxImplementation_Pair __CreateInstance(wxShadowObjectFields_wxImplementation_Pair.Internal native, bool skipVTables = false)
        {
            return new wxShadowObjectFields_wxImplementation_Pair(native, skipVTables);
        }

        private static void* __CopyValue(wxShadowObjectFields_wxImplementation_Pair.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            wxShadowObjectFields_wxImplementation_Pair.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxShadowObjectFields_wxImplementation_Pair(wxShadowObjectFields_wxImplementation_Pair.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShadowObjectFields_wxImplementation_Pair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxShadowObjectFields_wxImplementation_Pair(wxString f, global::System.IntPtr s)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(f, null))
                throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
            var arg0 = f.__Instance;
            var arg1 = s;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxShadowObjectFields_wxImplementation_Pair(wxShadowObjectFields_wxImplementation_Pair _0)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxShadowObjectFields_wxImplementation_Pair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString first
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->first);
            }

            set
            {
                ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        public global::System.IntPtr second
        {
            get
            {
                return ((Internal*) __Instance)->second;
            }

            set
            {
                ((Internal*) __Instance)->second = value;
            }
        }
    }

    public unsafe partial class wxShadowObjectFields_wxImplementation_KeyEx : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN43wxShadowObjectFields_wxImplementation_KeyExC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN43wxShadowObjectFields_wxImplementation_KeyExC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObjectFields_wxImplementation_KeyEx> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObjectFields_wxImplementation_KeyEx>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxShadowObjectFields_wxImplementation_KeyEx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShadowObjectFields_wxImplementation_KeyEx(native.ToPointer(), skipVTables);
        }

        public static wxShadowObjectFields_wxImplementation_KeyEx __CreateInstance(wxShadowObjectFields_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
        {
            return new wxShadowObjectFields_wxImplementation_KeyEx(native, skipVTables);
        }

        private static void* __CopyValue(wxShadowObjectFields_wxImplementation_KeyEx.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxShadowObjectFields_wxImplementation_KeyEx.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxShadowObjectFields_wxImplementation_KeyEx(wxShadowObjectFields_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShadowObjectFields_wxImplementation_KeyEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxShadowObjectFields_wxImplementation_KeyEx()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxShadowObjectFields_wxImplementation_KeyEx(wxShadowObjectFields_wxImplementation_KeyEx _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxShadowObjectFields_wxImplementation_KeyEx.Internal*) __Instance) = *((wxShadowObjectFields_wxImplementation_KeyEx.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxShadowObjectFields_wxImplementation_KeyEx __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxShadowObjectFields_wxImplementation_HashTable : _wxHashTableBase2, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxShadowObjectFields_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTableC2EmRK12wxStringHashRK13wxStringEqualRK43wxShadowObjectFields_wxImplementation_KeyEx")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint sz, global::System.IntPtr hfun, global::System.IntPtr k_eq, global::System.IntPtr k_ex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTableC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr ht);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTableD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable10DeleteNodeEP21_wxHashTable_NodeBase")]
            internal static extern void DeleteNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable10hash_functEv")]
            internal static extern wxStringHash.Internal hash_funct_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable6key_eqEv")]
            internal static extern wxStringEqual.Internal key_eq_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxShadowObjectFields_wxImplementation_HashTable4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxShadowObjectFields_wxImplementation_HashTable8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxShadowObjectFields_wxImplementation_HashTable5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable3endEv")]
            internal static extern wxShadowObjectFields_wxImplementation_HashTable.iterator.Internal end_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable5beginEv")]
            internal static extern wxShadowObjectFields_wxImplementation_HashTable.iterator.Internal begin_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable16GetBucketForNodeEPS_PNS_4NodeE")]
            internal static extern uint GetBucketForNode_0(global::System.IntPtr ht, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8CopyNodeEPNS_4NodeE")]
            internal static extern global::System.IntPtr CopyNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable15GetOrCreateNodeERK42wxShadowObjectFields_wxImplementation_PairRb")]
            internal static extern global::System.IntPtr GetOrCreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, bool* created);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable10CreateNodeERK42wxShadowObjectFields_wxImplementation_Pairm")]
            internal static extern global::System.IntPtr CreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, uint bucket);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable10CreateNodeERK42wxShadowObjectFields_wxImplementation_Pair")]
            internal static extern void CreateNode_1(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxShadowObjectFields_wxImplementation_HashTable10GetNodePtrERK8wxString")]
            internal static extern global::System.IntPtr GetNodePtr_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxShadowObjectFields_wxImplementation_HashTable7GetNodeERK8wxString")]
            internal static extern global::System.IntPtr GetNode_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable11ResizeTableEm")]
            internal static extern void ResizeTable_0(global::System.IntPtr instance, uint newSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8HashCopyERKS_")]
            internal static extern void HashCopy_0(global::System.IntPtr instance, global::System.IntPtr ht);
        }

        public unsafe partial class Node : _wxHashTable_NodeBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_next;

                [FieldOffset(4)]
                public wxShadowObjectFields_wxImplementation_Pair.Internal m_value;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable4NodeC2ERK42wxShadowObjectFields_wxImplementation_Pair")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable4NodeC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable4NodeD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable4Node4nextEv")]
                internal static extern global::System.IntPtr next_0(global::System.IntPtr instance);
            }

            public static new Node __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Node(native.ToPointer(), skipVTables);
            }

            public static Node __CreateInstance(Node.Internal native, bool skipVTables = false)
            {
                return new Node(native, skipVTables);
            }

            private static void* __CopyValue(Node.Internal native)
            {
                var ret = Marshal.AllocHGlobal(28);
                wxShadowObjectFields_wxImplementation_HashTable.Node.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Node(Node.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Node(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Node(wxShadowObjectFields_wxImplementation_Pair value)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var arg0 = value.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public Node(wxShadowObjectFields_wxImplementation_HashTable.Node _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            }

            protected override void Dispose(bool disposing)
            {
                _wxHashTable_NodeBase __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxShadowObjectFields_wxImplementation_HashTable.Node next()
            {
                var __ret = Internal.next_0((__Instance + __PointerAdjustment));
                wxShadowObjectFields_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectFields_wxImplementation_HashTable.Node) wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectFields_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            public wxShadowObjectFields_wxImplementation_Pair m_value
            {
                get
                {
                    return wxShadowObjectFields_wxImplementation_Pair.__CreateInstance(((Internal*) __Instance)->m_value);
                }

                set
                {
                    ((Internal*) __Instance)->m_value = ReferenceEquals(value, null) ? new wxShadowObjectFields_wxImplementation_Pair.Internal() : *(wxShadowObjectFields_wxImplementation_Pair.Internal*) (value.__Instance);
                }
            }
        }

        public unsafe partial class Iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8IteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8IteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8IteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK47wxShadowObjectFields_wxImplementation_HashTable8IteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK47wxShadowObjectFields_wxImplementation_HashTable8IteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8Iterator11GetNextNodeEv")]
                internal static extern global::System.IntPtr GetNextNode_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8Iterator8PlusPlusEv")]
                internal static extern void PlusPlus_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Iterator(native.ToPointer(), skipVTables);
            }

            public static Iterator __CreateInstance(Iterator.Internal native, bool skipVTables = false)
            {
                return new Iterator(native, skipVTables);
            }

            private static void* __CopyValue(Iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(Iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Iterator(Iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public Iterator(wxShadowObjectFields_wxImplementation_HashTable.Node node, wxShadowObjectFields_wxImplementation_HashTable ht)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public Iterator(wxShadowObjectFields_wxImplementation_HashTable.Iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Iterator.Internal*) __Instance) = *((Iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxShadowObjectFields_wxImplementation_HashTable.Iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static bool operator ==(wxShadowObjectFields_wxImplementation_HashTable.Iterator __op, wxShadowObjectFields_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as Iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(wxShadowObjectFields_wxImplementation_HashTable.Iterator __op, wxShadowObjectFields_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            protected wxShadowObjectFields_wxImplementation_HashTable.Node GetNextNode()
            {
                var __ret = Internal.GetNextNode_0((__Instance + __PointerAdjustment));
                wxShadowObjectFields_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectFields_wxImplementation_HashTable.Node) wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectFields_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            protected void PlusPlus()
            {
                Internal.PlusPlus_0((__Instance + __PointerAdjustment));
            }

            public wxShadowObjectFields_wxImplementation_HashTable.Node m_node
            {
                get
                {
                    wxShadowObjectFields_wxImplementation_HashTable.Node __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxShadowObjectFields_wxImplementation_HashTable.Node) wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else __result0 = wxShadowObjectFields_wxImplementation_HashTable.Node.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxShadowObjectFields_wxImplementation_HashTable m_ht
            {
                get
                {
                    wxShadowObjectFields_wxImplementation_HashTable __result0;
                    if (((Internal*) __Instance)->m_ht == IntPtr.Zero) __result0 = null;
                    else if (wxShadowObjectFields_wxImplementation_HashTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_ht))
                        __result0 = (wxShadowObjectFields_wxImplementation_HashTable) wxShadowObjectFields_wxImplementation_HashTable.NativeToManagedMap[((Internal*) __Instance)->m_ht];
                    else __result0 = wxShadowObjectFields_wxImplementation_HashTable.__CreateInstance(((Internal*) __Instance)->m_ht);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_ht = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class iterator : wxShadowObjectFields_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8iteratorC2EPNS_4NodeEPS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public iterator(wxShadowObjectFields_wxImplementation_HashTable.Node node, wxShadowObjectFields_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public iterator(wxShadowObjectFields_wxImplementation_HashTable.iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((iterator.Internal*) __Instance) = *((iterator.Internal*) _0.__Instance);
            }

            public static wxShadowObjectFields_wxImplementation_HashTable.iterator operator ++(wxShadowObjectFields_wxImplementation_HashTable.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxShadowObjectFields_wxImplementation_HashTable.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectFields_wxImplementation_HashTable.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectFields_wxImplementation_HashTable.iterator) wxShadowObjectFields_wxImplementation_HashTable.iterator.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectFields_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class const_iterator : wxShadowObjectFields_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable14const_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable14const_iteratorC2ENS_8iteratorE")]
                internal static extern void ctor_1(global::System.IntPtr instance, wxShadowObjectFields_wxImplementation_HashTable.iterator.Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable14const_iteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable14const_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxShadowObjectFields_wxImplementation_HashTable14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxShadowObjectFields_wxImplementation_HashTable.iterator i)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(i, null) ? new wxShadowObjectFields_wxImplementation_HashTable.iterator.Internal() : *(wxShadowObjectFields_wxImplementation_HashTable.iterator.Internal*) (i.__Instance);
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxShadowObjectFields_wxImplementation_HashTable.Node node, wxShadowObjectFields_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_iterator(wxShadowObjectFields_wxImplementation_HashTable.const_iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public static wxShadowObjectFields_wxImplementation_HashTable.const_iterator operator ++(wxShadowObjectFields_wxImplementation_HashTable.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxShadowObjectFields_wxImplementation_HashTable.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectFields_wxImplementation_HashTable.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectFields_wxImplementation_HashTable.const_iterator) wxShadowObjectFields_wxImplementation_HashTable.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectFields_wxImplementation_HashTable.const_iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static new wxShadowObjectFields_wxImplementation_HashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShadowObjectFields_wxImplementation_HashTable(native.ToPointer(), skipVTables);
        }

        public static wxShadowObjectFields_wxImplementation_HashTable __CreateInstance(wxShadowObjectFields_wxImplementation_HashTable.Internal native, bool skipVTables = false)
        {
            return new wxShadowObjectFields_wxImplementation_HashTable(native, skipVTables);
        }

        private static void* __CopyValue(wxShadowObjectFields_wxImplementation_HashTable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxShadowObjectFields_wxImplementation_HashTable.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxShadowObjectFields_wxImplementation_HashTable(wxShadowObjectFields_wxImplementation_HashTable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShadowObjectFields_wxImplementation_HashTable(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxShadowObjectFields_wxImplementation_HashTable(uint sz, wxStringHash hfun, wxStringEqual k_eq, wxShadowObjectFields_wxImplementation_KeyEx k_ex)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(hfun, null))
                throw new global::System.ArgumentNullException("hfun", "Cannot be null because it is a C++ reference (&).");
            var arg1 = hfun.__Instance;
            if (ReferenceEquals(k_eq, null))
                throw new global::System.ArgumentNullException("k_eq", "Cannot be null because it is a C++ reference (&).");
            var arg2 = k_eq.__Instance;
            if (ReferenceEquals(k_ex, null))
                throw new global::System.ArgumentNullException("k_ex", "Cannot be null because it is a C++ reference (&).");
            var arg3 = k_ex.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), sz, arg1, arg2, arg3);
        }

        public wxShadowObjectFields_wxImplementation_HashTable(wxShadowObjectFields_wxImplementation_HashTable ht)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxStringHash hash_funct()
        {
            var __ret = Internal.hash_funct_0((__Instance + __PointerAdjustment));
            return wxStringHash.__CreateInstance(__ret);
        }

        public wxStringEqual key_eq()
        {
            var __ret = Internal.key_eq_0((__Instance + __PointerAdjustment));
            return wxStringEqual.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxShadowObjectFields_wxImplementation_HashTable.iterator end()
        {
            var __ret = Internal.end_1((__Instance + __PointerAdjustment));
            return wxShadowObjectFields_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxShadowObjectFields_wxImplementation_HashTable.iterator begin()
        {
            var __ret = Internal.begin_1((__Instance + __PointerAdjustment));
            return wxShadowObjectFields_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public uint erase(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected wxShadowObjectFields_wxImplementation_HashTable.Node GetOrCreateNode(wxShadowObjectFields_wxImplementation_Pair value, ref bool created)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            fixed (bool* __refParamPtr1 = &created)
            {
                var arg1 = __refParamPtr1;
                var __ret = Internal.GetOrCreateNode_0((__Instance + __PointerAdjustment), arg0, arg1);
                wxShadowObjectFields_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxShadowObjectFields_wxImplementation_HashTable.Node) wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxShadowObjectFields_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected wxShadowObjectFields_wxImplementation_HashTable.Node CreateNode(wxShadowObjectFields_wxImplementation_Pair value, uint bucket)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            var __ret = Internal.CreateNode_0((__Instance + __PointerAdjustment), arg0, bucket);
            wxShadowObjectFields_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxShadowObjectFields_wxImplementation_HashTable.Node) wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxShadowObjectFields_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void CreateNode(wxShadowObjectFields_wxImplementation_Pair value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            Internal.CreateNode_1((__Instance + __PointerAdjustment), arg0);
        }

        protected _wxHashTable_NodeBase GetNodePtr(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNodePtr_0((__Instance + __PointerAdjustment), arg0);
            _wxHashTable_NodeBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[__ret];
            else __result0 = _wxHashTable_NodeBase.__CreateInstance(__ret);
            return __result0;
        }

        protected wxShadowObjectFields_wxImplementation_HashTable.Node GetNode(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNode_0((__Instance + __PointerAdjustment), arg0);
            wxShadowObjectFields_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxShadowObjectFields_wxImplementation_HashTable.Node) wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxShadowObjectFields_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void ResizeTable(uint newSize)
        {
            Internal.ResizeTable_0((__Instance + __PointerAdjustment), newSize);
        }

        protected void HashCopy(wxShadowObjectFields_wxImplementation_HashTable ht)
        {
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.HashCopy_0((__Instance + __PointerAdjustment), arg0);
        }

        protected static void DeleteNode(_wxHashTable_NodeBase node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            Internal.DeleteNode_0(arg0);
        }

        protected static uint GetBucketForNode(wxShadowObjectFields_wxImplementation_HashTable ht, wxShadowObjectFields_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
            var arg1 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.GetBucketForNode_0(arg0, arg1);
            return __ret;
        }

        protected static wxShadowObjectFields_wxImplementation_HashTable.Node CopyNode(wxShadowObjectFields_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.CopyNode_0(arg0);
            wxShadowObjectFields_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxShadowObjectFields_wxImplementation_HashTable.Node) wxShadowObjectFields_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxShadowObjectFields_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected _wxHashTable_NodeBase m_table
        {
            get
            {
                _wxHashTable_NodeBase __result0;
                if (((Internal*) __Instance)->m_table == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_table))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[((Internal*) __Instance)->m_table];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(((Internal*) __Instance)->m_table);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_table = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected uint m_tableBuckets
        {
            get
            {
                return ((Internal*) __Instance)->m_tableBuckets;
            }

            set
            {
                ((Internal*) __Instance)->m_tableBuckets = value;
            }
        }

        protected uint m_items
        {
            get
            {
                return ((Internal*) __Instance)->m_items;
            }

            set
            {
                ((Internal*) __Instance)->m_items = value;
            }
        }

        protected wxStringHash m_hasher
        {
            get
            {
                return wxStringHash.__CreateInstance(((Internal*) __Instance)->m_hasher);
            }

            set
            {
                ((Internal*) __Instance)->m_hasher = ReferenceEquals(value, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (value.__Instance);
            }
        }

        protected wxStringEqual m_equals
        {
            get
            {
                return wxStringEqual.__CreateInstance(((Internal*) __Instance)->m_equals);
            }

            set
            {
                ((Internal*) __Instance)->m_equals = ReferenceEquals(value, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (value.__Instance);
            }
        }

        protected wxShadowObjectFields_wxImplementation_KeyEx m_getKey
        {
            get
            {
                return wxShadowObjectFields_wxImplementation_KeyEx.__CreateInstance(((Internal*) __Instance)->m_getKey);
            }

            set
            {
                ((Internal*) __Instance)->m_getKey = ReferenceEquals(value, null) ? new wxShadowObjectFields_wxImplementation_KeyEx.Internal() : *(wxShadowObjectFields_wxImplementation_KeyEx.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxShadowObjectFields : wxShadowObjectFields_wxImplementation_HashTable, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxShadowObjectFields_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxShadowObjectFieldsC2Em12wxStringHash13wxStringEqual")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint hint, wxStringHash.Internal hf, wxStringEqual.Internal eq);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxShadowObjectFieldsC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxShadowObjectFieldsD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxShadowObjectFields4findERK8wxString")]
            internal static extern wxShadowObjectFields_wxImplementation_HashTable.iterator.Internal find_1(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxShadowObjectFields6insertERK42wxShadowObjectFields_wxImplementation_Pair")]
            internal static extern void insert_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxShadowObjectFields5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr k);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxShadowObjectFields5eraseERKN47wxShadowObjectFields_wxImplementation_HashTable8iteratorE")]
            internal static extern void erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxShadowObjectFields5countERK8wxString")]
            internal static extern uint count_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxShadowObjectFieldsixERK8wxString")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, global::System.IntPtr key);
        }

        public class mapped_type { }

        public unsafe partial class Insert_Result : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxShadowObjectFields_wxImplementation_HashTable.iterator.Internal first;

                [FieldOffset(8)]
                public byte second;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN20wxShadowObjectFields13Insert_ResultC2ERKN47wxShadowObjectFields_wxImplementation_HashTable8iteratorERKb")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, bool* s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN20wxShadowObjectFields13Insert_ResultC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Insert_Result __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Insert_Result(native.ToPointer(), skipVTables);
            }

            public static Insert_Result __CreateInstance(Insert_Result.Internal native, bool skipVTables = false)
            {
                return new Insert_Result(native, skipVTables);
            }

            private static void* __CopyValue(Insert_Result.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(Insert_Result.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Insert_Result(Insert_Result.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Insert_Result(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Insert_Result(wxShadowObjectFields_wxImplementation_HashTable.iterator f, ref bool s)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(f, null))
                    throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
                var arg0 = f.__Instance;
                fixed (bool* __refParamPtr1 = &s)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }

            public Insert_Result(wxShadowObjectFields.Insert_Result _0)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Insert_Result.Internal*) __Instance) = *((Insert_Result.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxShadowObjectFields.Insert_Result __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxShadowObjectFields_wxImplementation_HashTable.iterator first
            {
                get
                {
                    return wxShadowObjectFields_wxImplementation_HashTable.iterator.__CreateInstance(((Internal*) __Instance)->first);
                }

                set
                {
                    ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxShadowObjectFields_wxImplementation_HashTable.iterator.Internal() : *(wxShadowObjectFields_wxImplementation_HashTable.iterator.Internal*) (value.__Instance);
                }
            }

            public bool second
            {
                get
                {
                    return ((Internal*) __Instance)->second != 0;
                }

                set
                {
                    ((Internal*) __Instance)->second = (byte) (value ? 1 : 0);
                }
            }
        }

        public static new wxShadowObjectFields __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShadowObjectFields(native.ToPointer(), skipVTables);
        }

        public static wxShadowObjectFields __CreateInstance(wxShadowObjectFields.Internal native, bool skipVTables = false)
        {
            return new wxShadowObjectFields(native, skipVTables);
        }

        private static void* __CopyValue(wxShadowObjectFields.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxShadowObjectFields.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxShadowObjectFields(wxShadowObjectFields.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShadowObjectFields(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxShadowObjectFields(uint hint, wxStringHash hf, wxStringEqual eq)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(hf, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (hf.__Instance);
            var arg2 = ReferenceEquals(eq, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (eq.__Instance);
            Internal.ctor_0((__Instance + __PointerAdjustment), hint, arg1, arg2);
        }

        public wxShadowObjectFields(wxShadowObjectFields _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxShadowObjectFields_wxImplementation_HashTable.iterator find(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.find_1((__Instance + __PointerAdjustment), arg0);
            return wxShadowObjectFields_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxShadowObjectFields.Insert_Result insert(wxShadowObjectFields_wxImplementation_Pair v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            var __ret = new wxShadowObjectFields.Insert_Result.Internal();
            Internal.insert_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxShadowObjectFields.Insert_Result.__CreateInstance(__ret);
        }

        public uint erase(wxString k)
        {
            if (ReferenceEquals(k, null))
                throw new global::System.ArgumentNullException("k", "Cannot be null because it is a C++ reference (&).");
            var arg0 = k.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void erase(wxShadowObjectFields_wxImplementation_HashTable.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            Internal.erase_1((__Instance + __PointerAdjustment), arg0);
        }

        public uint count(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.count_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public global::System.IntPtr this[wxString key]
        {
            get
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var arg0 = key.__Instance;
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }

            set
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var arg0 = key.__Instance;
                *(global::System.IntPtr.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), key.__Instance) = *(global::System.IntPtr.Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class wxShadowObject : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxShadowObjectMethods.Internal m_methods;

            [FieldOffset(16)]
            public wxShadowObjectFields.Internal m_fields;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxShadowObjectC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxShadowObjectC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxShadowObjectD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxShadowObject9AddMethodERK8wxStringPFiPvS3_E")]
            internal static extern void AddMethod_0(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr method);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxShadowObject12InvokeMethodERK8wxStringPvS3_Pi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool InvokeMethod_0(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr window, global::System.IntPtr param, int* returnValue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxShadowObject8AddFieldERK8wxStringPv")]
            internal static extern void AddField_0(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr initialValue);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxShadowObject8SetFieldERK8wxStringPv")]
            internal static extern void SetField_0(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxShadowObject8GetFieldERK8wxStringPv")]
            internal static extern global::System.IntPtr GetField_0(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr defaultValue);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObject> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxShadowObject>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxShadowObject __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShadowObject(native.ToPointer(), skipVTables);
        }

        public static wxShadowObject __CreateInstance(wxShadowObject.Internal native, bool skipVTables = false)
        {
            return new wxShadowObject(native, skipVTables);
        }

        private static void* __CopyValue(wxShadowObject.Internal native)
        {
            var ret = Marshal.AllocHGlobal(32);
            wxShadowObject.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxShadowObject(wxShadowObject.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShadowObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxShadowObject()
        {
            __Instance = Marshal.AllocHGlobal(32);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxShadowObject(wxShadowObject _0)
        {
            __Instance = Marshal.AllocHGlobal(32);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxShadowObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void AddMethod(wxString name, wxShadowObjectMethod method)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = method == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(method);
            Internal.AddMethod_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public bool InvokeMethod(wxString name, global::System.IntPtr window, global::System.IntPtr param, ref int returnValue)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = window;
            var arg2 = param;
            fixed (int* __refParamPtr3 = &returnValue)
            {
                var arg3 = __refParamPtr3;
                var __ret = Internal.InvokeMethod_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
                return __ret;
            }
        }

        public void AddField(wxString name, global::System.IntPtr initialValue)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = initialValue;
            Internal.AddField_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void SetField(wxString name, global::System.IntPtr value)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = value;
            Internal.SetField_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public global::System.IntPtr GetField(wxString name, global::System.IntPtr defaultValue)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = defaultValue;
            var __ret = Internal.GetField_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }
    }

    public unsafe partial class wxClientData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxClientDataC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxClientDataC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxClientData> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxClientData>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxClientData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxClientData(native.ToPointer(), skipVTables);
        }

        public static wxClientData __CreateInstance(wxClientData.Internal native, bool skipVTables = false)
        {
            return new wxClientData(native, skipVTables);
        }

        private static void* __CopyValue(wxClientData.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxClientData.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxClientData(wxClientData.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxClientData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxClientData()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxClientData");
        }

        public wxClientData(wxClientData _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxClientData");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxClientData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___dtor_0Delegate((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        #region Virtual table interop

        // virtual ~wxClientData()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClientData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[1];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(4 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(4 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxStringClientData : wxClientData, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public wxString.Internal m_data;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxStringClientDataC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxStringClientDataC2ERK8wxString")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxStringClientDataC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxStringClientData7SetDataERK8wxString")]
            internal static extern void SetData_0(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxStringClientData7GetDataEv")]
            internal static extern global::System.IntPtr GetData_0(global::System.IntPtr instance);
        }

        public static new wxStringClientData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringClientData(native.ToPointer(), skipVTables);
        }

        public static wxStringClientData __CreateInstance(wxStringClientData.Internal native, bool skipVTables = false)
        {
            return new wxStringClientData(native, skipVTables);
        }

        private static void* __CopyValue(wxStringClientData.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            wxStringClientData.Internal.cctor_3(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringClientData(wxStringClientData.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringClientData(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxStringClientData()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxStringClientData");
        }

        public wxStringClientData(wxString data)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(data, null))
                throw new global::System.ArgumentNullException("data", "Cannot be null because it is a C++ reference (&).");
            var arg0 = data.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxStringClientData");
        }

        public wxStringClientData(wxStringClientData _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_3((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxStringClientData");
        }

        public void SetData(wxString data)
        {
            if (ReferenceEquals(data, null))
                throw new global::System.ArgumentNullException("data", "Cannot be null because it is a C++ reference (&).");
            var arg0 = data.__Instance;
            Internal.SetData_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxString GetData()
        {
            var __ret = Internal.GetData_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // wxStringClientData
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStringClientData) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[1];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(4 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(4 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxClientDataContainer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(4)]
            internal wxClientDataContainer._.Internal __;

            [FieldOffset(8)]
            public wxClientDataType m_clientDataType;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxClientDataContainerC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxClientDataContainerC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxClientDataContainer15SetClientObjectEP12wxClientData")]
            internal static extern void SetClientObject_0(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxClientDataContainer15GetClientObjectEv")]
            internal static extern global::System.IntPtr GetClientObject_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxClientDataContainer13SetClientDataEPv")]
            internal static extern void SetClientData_0(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxClientDataContainer13GetClientDataEv")]
            internal static extern global::System.IntPtr GetClientData_0(global::System.IntPtr instance);
        }

        protected internal unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_clientObject;

                [FieldOffset(0)]
                public global::System.IntPtr m_clientData;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxClientDataContainer> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxClientDataContainer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxClientDataContainer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxClientDataContainer(native.ToPointer(), skipVTables);
        }

        public static wxClientDataContainer __CreateInstance(wxClientDataContainer.Internal native, bool skipVTables = false)
        {
            return new wxClientDataContainer(native, skipVTables);
        }

        private static void* __CopyValue(wxClientDataContainer.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxClientDataContainer.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxClientDataContainer(wxClientDataContainer.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxClientDataContainer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxClientDataContainer()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxClientDataContainer");
        }

        public wxClientDataContainer(wxClientDataContainer _0)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxClientDataContainer");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxClientDataContainer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___dtor_0Delegate((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void SetClientObject(wxClientData data)
        {
            var arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            Internal.SetClientObject_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxClientData GetClientObject()
        {
            var __ret = Internal.GetClientObject_0((__Instance + __PointerAdjustment));
            wxClientData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClientData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClientData) wxClientData.NativeToManagedMap[__ret];
            else wxClientData.NativeToManagedMap[__ret] = __result0 = (wxClientData) wxClientData.__CreateInstance(__ret);
            return __result0;
        }

        public void SetClientData(global::System.IntPtr data)
        {
            var arg0 = data;
            Internal.SetClientData_0((__Instance + __PointerAdjustment), arg0);
        }

        public global::System.IntPtr GetClientData()
        {
            var __ret = Internal.GetClientData_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected virtual void DoSetClientObject(wxClientData data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___DoSetClientObject_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            ___DoSetClientObject_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        protected virtual wxClientData DoGetClientObject()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___DoGetClientObject_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___DoGetClientObject_0Delegate((__Instance + __PointerAdjustment));
            wxClientData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClientData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClientData) wxClientData.NativeToManagedMap[__ret];
            else wxClientData.NativeToManagedMap[__ret] = __result0 = (wxClientData) wxClientData.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual void DoSetClientData(global::System.IntPtr data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___DoSetClientData_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var arg0 = data;
            ___DoSetClientData_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        protected virtual global::System.IntPtr DoGetClientData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___DoGetClientData_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___DoGetClientData_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected wxClientDataType m_clientDataType
        {
            get
            {
                return ((Internal*) __Instance)->m_clientDataType;
            }

            set
            {
                ((Internal*) __Instance)->m_clientDataType = value;
            }
        }

        #region Virtual table interop

        // virtual ~wxClientDataContainer()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClientDataContainer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // void DoSetClientObject( wxClientData *data )
        private static Delegates.Action_IntPtr_IntPtr _DoSetClientObject_0DelegateInstance;

        private static void _DoSetClientObject_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClientDataContainer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxClientData __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxClientData.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxClientData) wxClientData.NativeToManagedMap[data];
            else __result0 = (wxClientData) wxClientData.__CreateInstance(data, skipVTables: true);
            __target.DoSetClientObject(__result0);
        }

        // wxClientData *DoGetClientObject() const
        private static Delegates.Func_IntPtr_IntPtr _DoGetClientObject_0DelegateInstance;

        private static global::System.IntPtr _DoGetClientObject_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClientDataContainer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientObject();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DoSetClientData( void *data )
        private static Delegates.Action_IntPtr_IntPtr _DoSetClientData_0DelegateInstance;

        private static void _DoSetClientData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClientDataContainer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static Delegates.Func_IntPtr_IntPtr _DoGetClientData_0DelegateInstance;

        private static global::System.IntPtr _DoGetClientData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClientDataContainer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _DoSetClientObject_0DelegateInstance += _DoSetClientObject_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DoSetClientObject_0DelegateInstance).ToPointer();
                _DoGetClientObject_0DelegateInstance += _DoGetClientObject_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_DoGetClientObject_0DelegateInstance).ToPointer();
                _DoSetClientData_0DelegateInstance += _DoSetClientData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_DoSetClientData_0DelegateInstance).ToPointer();
                _DoGetClientData_0DelegateInstance += _DoGetClientData_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_DoGetClientData_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }
}
