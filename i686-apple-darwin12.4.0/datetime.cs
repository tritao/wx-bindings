//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC_wxObjArraywxDateTimeArray(global::System.IntPtr pItem1, global::System.IntPtr pItem2);

    public class _wxArraywxHolidayAuthoritiesArray { }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC_wxArraywxHolidayAuthoritiesArray(global::System.IntPtr pItem1, global::System.IntPtr pItem2);

    public unsafe partial class wxDateTime : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxLongLongNative.Internal m_time;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTimeC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTimeC2El")]
            internal static extern void ctor_1(global::System.IntPtr instance, int timet);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTimeC2ERK2tm")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr tm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTimeC2ERKNS_2TmE")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr tm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTimeC2Ed")]
            internal static extern void ctor_4(global::System.IntPtr instance, double jdn);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTimeC2Etttt")]
            internal static extern void ctor_5(global::System.IntPtr instance, ushort hour, ushort minute, ushort second, ushort millisec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTimeC2EtNS_5MonthEitttt")]
            internal static extern void ctor_6(global::System.IntPtr instance, ushort day, wxDateTime.Month month, int year, ushort hour, ushort minute, ushort second, ushort millisec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTimeC2ERK16wxLongLongNative")]
            internal static extern void ctor_7(global::System.IntPtr instance, global::System.IntPtr time);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTimeC2ERKS_")]
            internal static extern void cctor_8(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime10SetCountryENS_7CountryE")]
            internal static extern void SetCountry_0(wxDateTime.Country country);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime10GetCountryEv")]
            internal static extern wxDateTime.Country GetCountry_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime21IsWestEuropeanCountryENS_7CountryE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsWestEuropeanCountry_0(wxDateTime.Country country);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime14GetCurrentYearENS_8CalendarE")]
            internal static extern int GetCurrentYear_0(wxDateTime.Calendar cal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15ConvertYearToBCEi")]
            internal static extern int ConvertYearToBC_0(int year);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15GetCurrentMonthENS_8CalendarE")]
            internal static extern wxDateTime.Month GetCurrentMonth_0(wxDateTime.Calendar cal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime10IsLeapYearEiNS_8CalendarE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsLeapYear_0(int year, wxDateTime.Calendar cal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime10GetCenturyEi")]
            internal static extern int GetCentury_0(int year);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15GetNumberOfDaysEiNS_8CalendarE")]
            internal static extern ushort GetNumberOfDays_0(int year, wxDateTime.Calendar cal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15GetNumberOfDaysENS_5MonthEiNS_8CalendarE")]
            internal static extern ushort GetNumberOfDays_1(wxDateTime.Month month, int year, wxDateTime.Calendar cal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime12GetMonthNameENS_5MonthENS_9NameFlagsE")]
            internal static extern void GetMonthName_0(global::System.IntPtr @return, wxDateTime.Month month, wxDateTime.NameFlags flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime19GetEnglishMonthNameENS_5MonthENS_9NameFlagsE")]
            internal static extern void GetEnglishMonthName_0(global::System.IntPtr @return, wxDateTime.Month month, wxDateTime.NameFlags flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime14GetWeekDayNameENS_7WeekDayENS_9NameFlagsE")]
            internal static extern void GetWeekDayName_0(global::System.IntPtr @return, wxDateTime.WeekDay weekday, wxDateTime.NameFlags flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime21GetEnglishWeekDayNameENS_7WeekDayENS_9NameFlagsE")]
            internal static extern void GetEnglishWeekDayName_0(global::System.IntPtr @return, wxDateTime.WeekDay weekday, wxDateTime.NameFlags flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime14GetAmPmStringsEP8wxStringS1_")]
            internal static extern void GetAmPmStrings_0(global::System.IntPtr am, global::System.IntPtr pm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15IsDSTApplicableEiNS_7CountryE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsDSTApplicable_0(int year, wxDateTime.Country country);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime11GetBeginDSTEiNS_7CountryE")]
            internal static extern wxDateTime.Internal GetBeginDST_0(int year, wxDateTime.Country country);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9GetEndDSTEiNS_7CountryE")]
            internal static extern wxDateTime.Internal GetEndDST_0(int year, wxDateTime.Country country);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime3NowEv")]
            internal static extern wxDateTime.Internal Now_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime4UNowEv")]
            internal static extern wxDateTime.Internal UNow_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime5TodayEv")]
            internal static extern wxDateTime.Internal Today_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime12SetToCurrentEv")]
            internal static extern global::System.IntPtr SetToCurrent_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime3SetEl")]
            internal static extern global::System.IntPtr Set_0(global::System.IntPtr instance, int timet);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime3SetERK2tm")]
            internal static extern global::System.IntPtr Set_1(global::System.IntPtr instance, global::System.IntPtr tm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime3SetERKNS_2TmE")]
            internal static extern global::System.IntPtr Set_2(global::System.IntPtr instance, global::System.IntPtr tm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime3SetEd")]
            internal static extern global::System.IntPtr Set_3(global::System.IntPtr instance, double jdn);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime3SetEtttt")]
            internal static extern global::System.IntPtr Set_4(global::System.IntPtr instance, ushort hour, ushort minute, ushort second, ushort millisec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime3SetEtNS_5MonthEitttt")]
            internal static extern global::System.IntPtr Set_5(global::System.IntPtr instance, ushort day, wxDateTime.Month month, int year, ushort hour, ushort minute, ushort second, ushort millisec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ResetTimeEv")]
            internal static extern global::System.IntPtr ResetTime_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime11GetDateOnlyEv")]
            internal static extern wxDateTime.Internal GetDateOnly_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime7SetYearEi")]
            internal static extern global::System.IntPtr SetYear_0(global::System.IntPtr instance, int year);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime8SetMonthENS_5MonthE")]
            internal static extern global::System.IntPtr SetMonth_0(global::System.IntPtr instance, wxDateTime.Month month);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime6SetDayEt")]
            internal static extern global::System.IntPtr SetDay_0(global::System.IntPtr instance, ushort day);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime7SetHourEt")]
            internal static extern global::System.IntPtr SetHour_0(global::System.IntPtr instance, ushort hour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9SetMinuteEt")]
            internal static extern global::System.IntPtr SetMinute_0(global::System.IntPtr instance, ushort minute);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9SetSecondEt")]
            internal static extern global::System.IntPtr SetSecond_0(global::System.IntPtr instance, ushort second);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime14SetMillisecondEt")]
            internal static extern global::System.IntPtr SetMillisecond_0(global::System.IntPtr instance, ushort millisecond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime22SetToWeekDayInSameWeekENS_7WeekDayENS_9WeekFlagsE")]
            internal static extern global::System.IntPtr SetToWeekDayInSameWeek_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday, wxDateTime.WeekFlags flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime20GetWeekDayInSameWeekENS_7WeekDayENS_9WeekFlagsE")]
            internal static extern wxDateTime.Internal GetWeekDayInSameWeek_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday, wxDateTime.WeekFlags flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime16SetToNextWeekDayENS_7WeekDayE")]
            internal static extern global::System.IntPtr SetToNextWeekDay_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime14GetNextWeekDayENS_7WeekDayE")]
            internal static extern wxDateTime.Internal GetNextWeekDay_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime16SetToPrevWeekDayENS_7WeekDayE")]
            internal static extern global::System.IntPtr SetToPrevWeekDay_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime14GetPrevWeekDayENS_7WeekDayE")]
            internal static extern wxDateTime.Internal GetPrevWeekDay_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime12SetToWeekDayENS_7WeekDayEiNS_5MonthEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetToWeekDay_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday, int n, wxDateTime.Month month, int year);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10GetWeekDayENS_7WeekDayEiNS_5MonthEi")]
            internal static extern wxDateTime.Internal GetWeekDay_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday, int n, wxDateTime.Month month, int year);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime16SetToLastWeekDayENS_7WeekDayENS_5MonthEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetToLastWeekDay_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday, wxDateTime.Month month, int year);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime14GetLastWeekDayENS_7WeekDayENS_5MonthEi")]
            internal static extern wxDateTime.Internal GetLastWeekDay_0(global::System.IntPtr instance, wxDateTime.WeekDay weekday, wxDateTime.Month month, int year);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15SetToWeekOfYearEitNS_7WeekDayE")]
            internal static extern wxDateTime.Internal SetToWeekOfYear_0(int year, ushort numWeek, wxDateTime.WeekDay weekday);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime17SetToLastMonthDayENS_5MonthEi")]
            internal static extern global::System.IntPtr SetToLastMonthDay_0(global::System.IntPtr instance, wxDateTime.Month month, int year);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime15GetLastMonthDayENS_5MonthEi")]
            internal static extern wxDateTime.Internal GetLastMonthDay_0(global::System.IntPtr instance, wxDateTime.Month month, int year);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime12SetToYearDayEt")]
            internal static extern global::System.IntPtr SetToYearDay_0(global::System.IntPtr instance, ushort yday);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10GetYearDayEt")]
            internal static extern wxDateTime.Internal GetYearDay_0(global::System.IntPtr instance, ushort yday);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime18GetJulianDayNumberEv")]
            internal static extern double GetJulianDayNumber_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime6GetJDNEv")]
            internal static extern double GetJDN_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime26GetModifiedJulianDayNumberEv")]
            internal static extern double GetModifiedJulianDayNumber_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime6GetMJDEv")]
            internal static extern double GetMJD_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10GetRataDieEv")]
            internal static extern double GetRataDie_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10ToTimezoneERKNS_8TimeZoneEb")]
            internal static extern wxDateTime.Internal ToTimezone_0(global::System.IntPtr instance, global::System.IntPtr tz, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime12MakeTimezoneERKNS_8TimeZoneEb")]
            internal static extern global::System.IntPtr MakeTimezone_0(global::System.IntPtr instance, global::System.IntPtr tz, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime12FromTimezoneERKNS_8TimeZoneEb")]
            internal static extern wxDateTime.Internal FromTimezone_0(global::System.IntPtr instance, global::System.IntPtr tz, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime16MakeFromTimezoneERKNS_8TimeZoneEb")]
            internal static extern global::System.IntPtr MakeFromTimezone_0(global::System.IntPtr instance, global::System.IntPtr tz, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime5ToUTCEb")]
            internal static extern wxDateTime.Internal ToUTC_0(global::System.IntPtr instance, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime7MakeUTCEb")]
            internal static extern global::System.IntPtr MakeUTC_0(global::System.IntPtr instance, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime5ToGMTEb")]
            internal static extern wxDateTime.Internal ToGMT_0(global::System.IntPtr instance, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime7MakeGMTEb")]
            internal static extern global::System.IntPtr MakeGMT_0(global::System.IntPtr instance, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime7FromUTCEb")]
            internal static extern wxDateTime.Internal FromUTC_0(global::System.IntPtr instance, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime11MakeFromUTCEb")]
            internal static extern global::System.IntPtr MakeFromUTC_0(global::System.IntPtr instance, bool noDST);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime5IsDSTENS_7CountryE")]
            internal static extern int IsDST_0(global::System.IntPtr instance, wxDateTime.Country country);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime7IsValidEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsValid_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime5GetTmERKNS_8TimeZoneE")]
            internal static extern void GetTm_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime8GetTicksEv")]
            internal static extern int GetTicks_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10GetCenturyERKNS_8TimeZoneE")]
            internal static extern int GetCentury_1(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime7GetYearERKNS_8TimeZoneE")]
            internal static extern int GetYear_0(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime8GetMonthERKNS_8TimeZoneE")]
            internal static extern wxDateTime.Month GetMonth_0(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime6GetDayERKNS_8TimeZoneE")]
            internal static extern ushort GetDay_0(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10GetWeekDayERKNS_8TimeZoneE")]
            internal static extern wxDateTime.WeekDay GetWeekDay_1(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime7GetHourERKNS_8TimeZoneE")]
            internal static extern ushort GetHour_0(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime9GetMinuteERKNS_8TimeZoneE")]
            internal static extern ushort GetMinute_0(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime9GetSecondERKNS_8TimeZoneE")]
            internal static extern ushort GetSecond_0(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime14GetMillisecondERKNS_8TimeZoneE")]
            internal static extern ushort GetMillisecond_0(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime12GetDayOfYearERKNS_8TimeZoneE")]
            internal static extern ushort GetDayOfYear_0(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime13GetWeekOfYearENS_9WeekFlagsERKNS_8TimeZoneE")]
            internal static extern ushort GetWeekOfYear_0(global::System.IntPtr instance, wxDateTime.WeekFlags flags, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime16GetWeekBasedYearERKNS_8TimeZoneE")]
            internal static extern int GetWeekBasedYear_0(global::System.IntPtr instance, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime14GetWeekOfMonthENS_9WeekFlagsERKNS_8TimeZoneE")]
            internal static extern ushort GetWeekOfMonth_0(global::System.IntPtr instance, wxDateTime.WeekFlags flags, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime9IsWorkDayENS_7CountryE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsWorkDay_0(global::System.IntPtr instance, wxDateTime.Country country);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime10SetFromDOSEm")]
            internal static extern global::System.IntPtr SetFromDOS_0(global::System.IntPtr instance, uint ddt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime8GetAsDOSEv")]
            internal static extern uint GetAsDOS_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime9IsEqualToERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEqualTo_0(global::System.IntPtr instance, global::System.IntPtr datetime);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime13IsEarlierThanERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEarlierThan_0(global::System.IntPtr instance, global::System.IntPtr datetime);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime11IsLaterThanERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsLaterThan_0(global::System.IntPtr instance, global::System.IntPtr datetime);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime17IsStrictlyBetweenERKS_S1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsStrictlyBetween_0(global::System.IntPtr instance, global::System.IntPtr t1, global::System.IntPtr t2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime9IsBetweenERKS_S1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsBetween_0(global::System.IntPtr instance, global::System.IntPtr t1, global::System.IntPtr t2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10IsSameDateERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameDate_0(global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10IsSameTimeERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameTime_0(global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime11IsEqualUpToERKS_RK10wxTimeSpan")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEqualUpTo_0(global::System.IntPtr instance, global::System.IntPtr dt, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimeltERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_0(global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimeleERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_0(global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimegtERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_0(global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimegeERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimeeqERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimeneERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime3AddERK10wxTimeSpan")]
            internal static extern global::System.IntPtr Add_1(global::System.IntPtr instance, global::System.IntPtr diff);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimeplERK10wxTimeSpan")]
            internal static extern wxDateTime.Internal OperatorPlus_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime8SubtractERK10wxTimeSpan")]
            internal static extern global::System.IntPtr Subtract_1(global::System.IntPtr instance, global::System.IntPtr diff);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimemiERK10wxTimeSpan")]
            internal static extern wxDateTime.Internal OperatorMinus_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime3AddERK10wxDateSpan")]
            internal static extern global::System.IntPtr Add_3(global::System.IntPtr instance, global::System.IntPtr diff);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimeplERK10wxDateSpan")]
            internal static extern wxDateTime.Internal OperatorPlus_1(global::System.IntPtr instance, global::System.IntPtr ds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime8SubtractERK10wxDateSpan")]
            internal static extern global::System.IntPtr Subtract_3(global::System.IntPtr instance, global::System.IntPtr diff);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimemiERK10wxDateSpan")]
            internal static extern wxDateTime.Internal OperatorMinus_1(global::System.IntPtr instance, global::System.IntPtr ds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime8SubtractERKS_")]
            internal static extern wxTimeSpan.Internal Subtract_4(global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTimemiERKS_")]
            internal static extern wxTimeSpan.Internal OperatorMinus_2(global::System.IntPtr instance, global::System.IntPtr dt2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime14DiffAsDateSpanERKS_")]
            internal static extern void DiffAsDateSpan_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15ParseRfc822DateERK8wxStringPNS0_14const_iteratorE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseRfc822Date_0(global::System.IntPtr instance, global::System.IntPtr date, global::System.IntPtr end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime11ParseFormatERK8wxStringS2_RKS_PNS0_14const_iteratorE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseFormat_0(global::System.IntPtr instance, global::System.IntPtr date, global::System.IntPtr format, global::System.IntPtr dateDef, global::System.IntPtr end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime11ParseFormatERK8wxStringS2_PNS0_14const_iteratorE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseFormat_1(global::System.IntPtr instance, global::System.IntPtr date, global::System.IntPtr format, global::System.IntPtr end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime11ParseFormatERK8wxStringPNS0_14const_iteratorE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseFormat_2(global::System.IntPtr instance, global::System.IntPtr date, global::System.IntPtr end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime12ParseISODateERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseISODate_0(global::System.IntPtr instance, global::System.IntPtr date);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime12ParseISOTimeERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseISOTime_0(global::System.IntPtr instance, global::System.IntPtr time);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime16ParseISOCombinedERK8wxStringc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseISOCombined_0(global::System.IntPtr instance, global::System.IntPtr datetime, sbyte sep);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime13ParseDateTimeERK8wxStringPNS0_14const_iteratorE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseDateTime_0(global::System.IntPtr instance, global::System.IntPtr datetime, global::System.IntPtr end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseDateERK8wxStringPNS0_14const_iteratorE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseDate_0(global::System.IntPtr instance, global::System.IntPtr date, global::System.IntPtr end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseTimeERK8wxStringPNS0_14const_iteratorE")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ParseTime_0(global::System.IntPtr instance, global::System.IntPtr time, global::System.IntPtr end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime6FormatERK8wxStringRKNS_8TimeZoneE")]
            internal static extern void Format_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr format, global::System.IntPtr tz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10FormatDateEv")]
            internal static extern void FormatDate_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime10FormatTimeEv")]
            internal static extern void FormatTime_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime13FormatISODateEv")]
            internal static extern void FormatISODate_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime13FormatISOTimeEv")]
            internal static extern void FormatISOTime_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime17FormatISOCombinedEc")]
            internal static extern void FormatISOCombined_0(global::System.IntPtr @return, global::System.IntPtr instance, sbyte sep);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15ParseRfc822DateERK8wxString")]
            internal static extern void ParseRfc822Date_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr date);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime11ParseFormatERK8wxStringS2_RKS_")]
            internal static extern void ParseFormat_3(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr date, global::System.IntPtr format, global::System.IntPtr dateDef);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime13ParseDateTimeERK8wxString")]
            internal static extern void ParseDateTime_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr datetime);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseDateERK8wxString")]
            internal static extern void ParseDate_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr date);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseTimeERK8wxString")]
            internal static extern void ParseTime_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr time);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15ParseRfc822DateERK10wxCStrData")]
            internal static extern void ParseRfc822Date_2(global::System.IntPtr instance, global::System.IntPtr date);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15ParseRfc822DateEPKc")]
            internal static extern global::System.IntPtr ParseRfc822Date_3(global::System.IntPtr instance, global::System.IntPtr date);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime15ParseRfc822DateEPKw")]
            internal static extern global::System.IntPtr ParseRfc822Date1_0(global::System.IntPtr instance, global::System.IntPtr date);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime11ParseFormatERK10wxCStrDataRK8wxStringRKS_")]
            internal static extern void ParseFormat_4(global::System.IntPtr instance, global::System.IntPtr date, global::System.IntPtr format, global::System.IntPtr dateDef);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime11ParseFormatEPKcRK8wxStringRKS_")]
            internal static extern global::System.IntPtr ParseFormat_5(global::System.IntPtr instance, global::System.IntPtr date, global::System.IntPtr format, global::System.IntPtr dateDef);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime11ParseFormatEPKwRK8wxStringRKS_")]
            internal static extern global::System.IntPtr ParseFormat1_0(global::System.IntPtr instance, global::System.IntPtr date, global::System.IntPtr format, global::System.IntPtr dateDef);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime13ParseDateTimeERK10wxCStrData")]
            internal static extern void ParseDateTime_2(global::System.IntPtr instance, global::System.IntPtr datetime);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime13ParseDateTimeEPKc")]
            internal static extern global::System.IntPtr ParseDateTime_3(global::System.IntPtr instance, global::System.IntPtr datetime);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime13ParseDateTimeEPKw")]
            internal static extern global::System.IntPtr ParseDateTime1_0(global::System.IntPtr instance, global::System.IntPtr datetime);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseDateERK10wxCStrData")]
            internal static extern void ParseDate_2(global::System.IntPtr instance, global::System.IntPtr date);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseDateEPKc")]
            internal static extern global::System.IntPtr ParseDate_3(global::System.IntPtr instance, global::System.IntPtr date);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseDateEPKw")]
            internal static extern global::System.IntPtr ParseDate1_0(global::System.IntPtr instance, global::System.IntPtr date);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseTimeERK10wxCStrData")]
            internal static extern void ParseTime_2(global::System.IntPtr instance, global::System.IntPtr time);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseTimeEPKc")]
            internal static extern global::System.IntPtr ParseTime_3(global::System.IntPtr instance, global::System.IntPtr time);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime9ParseTimeEPKw")]
            internal static extern global::System.IntPtr ParseTime1_0(global::System.IntPtr instance, global::System.IntPtr time);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateTime8GetValueEv")]
            internal static extern wxLongLongNative.Internal GetValue_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime10GetTimeNowEv")]
            internal static extern int GetTimeNow_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime8GetTmNowEv")]
            internal static extern global::System.IntPtr GetTmNow_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateTime8GetTmNowEP2tm")]
            internal static extern global::System.IntPtr GetTmNow_1(global::System.IntPtr tmstruct);
        }

        public enum TZ : uint
        {
            Local = 0,
            GMT_12 = 1,
            GMT_11 = 2,
            GMT_10 = 3,
            GMT_9 = 4,
            GMT_8 = 5,
            GMT_7 = 6,
            GMT_6 = 7,
            GMT_5 = 8,
            GMT_4 = 9,
            GMT_3 = 10,
            GMT_2 = 11,
            GMT_1 = 12,
            GMT0 = 13,
            GMT1 = 14,
            GMT2 = 15,
            GMT3 = 16,
            GMT4 = 17,
            GMT5 = 18,
            GMT6 = 19,
            GMT7 = 20,
            GMT8 = 21,
            GMT9 = 22,
            GMT10 = 23,
            GMT11 = 24,
            GMT12 = 25,
            GMT13 = 26,
            WET = 13,
            WEST = 14,
            CET = 14,
            CEST = 15,
            EET = 15,
            EEST = 16,
            MSK = 16,
            MSD = 17,
            AST = 9,
            ADT = 10,
            EST = 8,
            EDT = 9,
            CST = 7,
            CDT = 8,
            MST = 6,
            MDT = 7,
            PST = 5,
            PDT = 6,
            HST = 3,
            AKST = 4,
            AKDT = 5,
            A_WST = 21,
            A_CST = 27,
            A_EST = 23,
            A_ESST = 24,
            NZST = 25,
            NZDT = 26,
            UTC = 13
        }

        public enum Calendar : uint
        {
            Gregorian = 0,
            Julian = 1
        }

        public enum Country : uint
        {
            Country_Unknown = 0,
            Country_Default = 1,
            Country_WesternEurope_Start = 2,
            Country_EEC = 2,
            France = 3,
            Germany = 4,
            UK = 5,
            Country_WesternEurope_End = 5,
            Russia = 6,
            USA = 7
        }

        public enum Month : uint
        {
            Jan = 0,
            Feb = 1,
            Mar = 2,
            Apr = 3,
            May = 4,
            Jun = 5,
            Jul = 6,
            Aug = 7,
            Sep = 8,
            Oct = 9,
            Nov = 10,
            Dec = 11,
            Inv_Month = 12
        }

        public enum WeekDay : uint
        {
            Sun = 0,
            Mon = 1,
            Tue = 2,
            Wed = 3,
            Thu = 4,
            Fri = 5,
            Sat = 6,
            Inv_WeekDay = 7
        }

        public enum Year
        {
            Inv_Year = -32768
        }

        public enum NameFlags : uint
        {
            Name_Full = 0x1,
            Name_Abbr = 0x2
        }

        public enum WeekFlags : uint
        {
            Default_First = 0,
            Monday_First = 1,
            Sunday_First = 2
        }

        public unsafe partial class TimeZone : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public int m_offset;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime8TimeZoneC2ENS_2TZE")]
                internal static extern void ctor_0(global::System.IntPtr instance, wxDateTime.TZ tz);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime8TimeZoneC2El")]
                internal static extern void ctor_1(global::System.IntPtr instance, int offset);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime8TimeZoneC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime8TimeZone4MakeEl")]
                internal static extern wxDateTime.TimeZone.Internal Make_0(int offset);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK10wxDateTime8TimeZone9GetOffsetEv")]
                internal static extern int GetOffset_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TimeZone> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, TimeZone>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static TimeZone __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new TimeZone(native.ToPointer(), skipVTables);
            }

            public static TimeZone __CreateInstance(TimeZone.Internal native, bool skipVTables = false)
            {
                return new TimeZone(native, skipVTables);
            }

            private static void* __CopyValue(TimeZone.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(TimeZone.Internal*) ret = native;
                return ret.ToPointer();
            }

            private TimeZone(TimeZone.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected TimeZone(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public TimeZone(wxDateTime.TZ tz)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = tz;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public TimeZone(int offset)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment), offset);
            }

            public TimeZone(wxDateTime.TimeZone _0)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((TimeZone.Internal*) __Instance) = *((TimeZone.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxDateTime.TimeZone __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public int GetOffset()
            {
                var __ret = Internal.GetOffset_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            public static wxDateTime.TimeZone Make(int offset)
            {
                var __ret = Internal.Make_0(offset);
                return wxDateTime.TimeZone.__CreateInstance(__ret);
            }
        }

        public unsafe partial class Tm : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public ushort msec;

                [FieldOffset(2)]
                public ushort sec;

                [FieldOffset(4)]
                public ushort min;

                [FieldOffset(6)]
                public ushort hour;

                [FieldOffset(8)]
                public ushort mday;

                [FieldOffset(10)]
                public ushort yday;

                [FieldOffset(12)]
                public wxDateTime.Month mon;

                [FieldOffset(16)]
                public int year;

                [FieldOffset(20)]
                public wxDateTime.TimeZone.Internal m_tz;

                [FieldOffset(24)]
                public ushort wday;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime2TmC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime2TmC2ERK2tmRKNS_8TimeZoneE")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr tm, global::System.IntPtr tz);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime2TmC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK10wxDateTime2Tm7IsValidEv")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool IsValid_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime2Tm10GetWeekDayEv")]
                internal static extern wxDateTime.WeekDay GetWeekDay_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime2Tm9AddMonthsEi")]
                internal static extern void AddMonths_0(global::System.IntPtr instance, int monDiff);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxDateTime2Tm7AddDaysEi")]
                internal static extern void AddDays_0(global::System.IntPtr instance, int dayDiff);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Tm> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Tm>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Tm __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Tm(native.ToPointer(), skipVTables);
            }

            public static Tm __CreateInstance(Tm.Internal native, bool skipVTables = false)
            {
                return new Tm(native, skipVTables);
            }

            private static void* __CopyValue(Tm.Internal native)
            {
                var ret = Marshal.AllocHGlobal(28);
                *(Tm.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Tm(Tm.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Tm(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Tm()
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public Tm(tm tm, wxDateTime.TimeZone tz)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(tm, null))
                    throw new global::System.ArgumentNullException("tm", "Cannot be null because it is a C++ reference (&).");
                var arg0 = tm.__Instance;
                if (ReferenceEquals(tz, null))
                    throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
                var arg1 = tz.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public Tm(wxDateTime.Tm _0)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Tm.Internal*) __Instance) = *((Tm.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxDateTime.Tm __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public bool IsValid()
            {
                var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            public wxDateTime.WeekDay GetWeekDay()
            {
                var __ret = Internal.GetWeekDay_0((__Instance + __PointerAdjustment));
                return __ret;
            }

            public void AddMonths(int monDiff)
            {
                Internal.AddMonths_0((__Instance + __PointerAdjustment), monDiff);
            }

            public void AddDays(int dayDiff)
            {
                Internal.AddDays_0((__Instance + __PointerAdjustment), dayDiff);
            }

            public ushort msec
            {
                get
                {
                    return ((Internal*) __Instance)->msec;
                }

                set
                {
                    ((Internal*) __Instance)->msec = value;
                }
            }

            public ushort sec
            {
                get
                {
                    return ((Internal*) __Instance)->sec;
                }

                set
                {
                    ((Internal*) __Instance)->sec = value;
                }
            }

            public ushort min
            {
                get
                {
                    return ((Internal*) __Instance)->min;
                }

                set
                {
                    ((Internal*) __Instance)->min = value;
                }
            }

            public ushort hour
            {
                get
                {
                    return ((Internal*) __Instance)->hour;
                }

                set
                {
                    ((Internal*) __Instance)->hour = value;
                }
            }

            public ushort mday
            {
                get
                {
                    return ((Internal*) __Instance)->mday;
                }

                set
                {
                    ((Internal*) __Instance)->mday = value;
                }
            }

            public ushort yday
            {
                get
                {
                    return ((Internal*) __Instance)->yday;
                }

                set
                {
                    ((Internal*) __Instance)->yday = value;
                }
            }

            public wxDateTime.Month mon
            {
                get
                {
                    return ((Internal*) __Instance)->mon;
                }

                set
                {
                    ((Internal*) __Instance)->mon = value;
                }
            }

            public int year
            {
                get
                {
                    return ((Internal*) __Instance)->year;
                }

                set
                {
                    ((Internal*) __Instance)->year = value;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxDateTime> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxDateTime>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxDateTime __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxDateTime(native.ToPointer(), skipVTables);
        }

        public static wxDateTime __CreateInstance(wxDateTime.Internal native, bool skipVTables = false)
        {
            return new wxDateTime(native, skipVTables);
        }

        private static void* __CopyValue(wxDateTime.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxDateTime.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxDateTime(wxDateTime.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxDateTime(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxDateTime()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxDateTime(int timet)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), timet);
        }

        public wxDateTime(tm tm)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(tm, null))
                throw new global::System.ArgumentNullException("tm", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tm.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public wxDateTime(wxDateTime.Tm tm)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(tm, null))
                throw new global::System.ArgumentNullException("tm", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tm.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
        }

        public wxDateTime(double jdn)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_4((__Instance + __PointerAdjustment), jdn);
        }

        public wxDateTime(ushort hour, ushort minute, ushort second, ushort millisec)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_5((__Instance + __PointerAdjustment), hour, minute, second, millisec);
        }

        public wxDateTime(ushort day, wxDateTime.Month month, int year, ushort hour, ushort minute, ushort second, ushort millisec)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = month;
            Internal.ctor_6((__Instance + __PointerAdjustment), day, arg1, year, hour, minute, second, millisec);
        }

        public wxDateTime(wxLongLongNative time)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(time, null))
                throw new global::System.ArgumentNullException("time", "Cannot be null because it is a C++ reference (&).");
            var arg0 = time.__Instance;
            Internal.ctor_7((__Instance + __PointerAdjustment), arg0);
        }

        public wxDateTime(wxDateTime _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxDateTime.Internal*) __Instance) = *((wxDateTime.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxDateTime __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxDateTime SetToCurrent()
        {
            var __ret = Internal.SetToCurrent_0((__Instance + __PointerAdjustment));
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime Set(int timet)
        {
            var __ret = Internal.Set_0((__Instance + __PointerAdjustment), timet);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime Set(tm tm)
        {
            if (ReferenceEquals(tm, null))
                throw new global::System.ArgumentNullException("tm", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tm.__Instance;
            var __ret = Internal.Set_1((__Instance + __PointerAdjustment), arg0);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime Set(wxDateTime.Tm tm)
        {
            if (ReferenceEquals(tm, null))
                throw new global::System.ArgumentNullException("tm", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tm.__Instance;
            var __ret = Internal.Set_2((__Instance + __PointerAdjustment), arg0);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime Set(double jdn)
        {
            var __ret = Internal.Set_3((__Instance + __PointerAdjustment), jdn);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime Set(ushort hour, ushort minute, ushort second, ushort millisec)
        {
            var __ret = Internal.Set_4((__Instance + __PointerAdjustment), hour, minute, second, millisec);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime Set(ushort day, wxDateTime.Month month, int year, ushort hour, ushort minute, ushort second, ushort millisec)
        {
            var arg1 = month;
            var __ret = Internal.Set_5((__Instance + __PointerAdjustment), day, arg1, year, hour, minute, second, millisec);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime ResetTime()
        {
            var __ret = Internal.ResetTime_0((__Instance + __PointerAdjustment));
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime GetDateOnly()
        {
            var __ret = Internal.GetDateOnly_0((__Instance + __PointerAdjustment));
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime SetYear(int year)
        {
            var __ret = Internal.SetYear_0((__Instance + __PointerAdjustment), year);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime SetMonth(wxDateTime.Month month)
        {
            var arg0 = month;
            var __ret = Internal.SetMonth_0((__Instance + __PointerAdjustment), arg0);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime SetDay(ushort day)
        {
            var __ret = Internal.SetDay_0((__Instance + __PointerAdjustment), day);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime SetHour(ushort hour)
        {
            var __ret = Internal.SetHour_0((__Instance + __PointerAdjustment), hour);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime SetMinute(ushort minute)
        {
            var __ret = Internal.SetMinute_0((__Instance + __PointerAdjustment), minute);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime SetSecond(ushort second)
        {
            var __ret = Internal.SetSecond_0((__Instance + __PointerAdjustment), second);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime SetMillisecond(ushort millisecond)
        {
            var __ret = Internal.SetMillisecond_0((__Instance + __PointerAdjustment), millisecond);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime SetToWeekDayInSameWeek(wxDateTime.WeekDay weekday, wxDateTime.WeekFlags flags)
        {
            var arg0 = weekday;
            var arg1 = flags;
            var __ret = Internal.SetToWeekDayInSameWeek_0((__Instance + __PointerAdjustment), arg0, arg1);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime GetWeekDayInSameWeek(wxDateTime.WeekDay weekday, wxDateTime.WeekFlags flags)
        {
            var arg0 = weekday;
            var arg1 = flags;
            var __ret = Internal.GetWeekDayInSameWeek_0((__Instance + __PointerAdjustment), arg0, arg1);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime SetToNextWeekDay(wxDateTime.WeekDay weekday)
        {
            var arg0 = weekday;
            var __ret = Internal.SetToNextWeekDay_0((__Instance + __PointerAdjustment), arg0);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime GetNextWeekDay(wxDateTime.WeekDay weekday)
        {
            var arg0 = weekday;
            var __ret = Internal.GetNextWeekDay_0((__Instance + __PointerAdjustment), arg0);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime SetToPrevWeekDay(wxDateTime.WeekDay weekday)
        {
            var arg0 = weekday;
            var __ret = Internal.SetToPrevWeekDay_0((__Instance + __PointerAdjustment), arg0);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime GetPrevWeekDay(wxDateTime.WeekDay weekday)
        {
            var arg0 = weekday;
            var __ret = Internal.GetPrevWeekDay_0((__Instance + __PointerAdjustment), arg0);
            return wxDateTime.__CreateInstance(__ret);
        }

        public bool SetToWeekDay(wxDateTime.WeekDay weekday, int n, wxDateTime.Month month, int year)
        {
            var arg0 = weekday;
            var arg2 = month;
            var __ret = Internal.SetToWeekDay_0((__Instance + __PointerAdjustment), arg0, n, arg2, year);
            return __ret;
        }

        public wxDateTime GetWeekDay(wxDateTime.WeekDay weekday, int n, wxDateTime.Month month, int year)
        {
            var arg0 = weekday;
            var arg2 = month;
            var __ret = Internal.GetWeekDay_0((__Instance + __PointerAdjustment), arg0, n, arg2, year);
            return wxDateTime.__CreateInstance(__ret);
        }

        public bool SetToLastWeekDay(wxDateTime.WeekDay weekday, wxDateTime.Month month, int year)
        {
            var arg0 = weekday;
            var arg1 = month;
            var __ret = Internal.SetToLastWeekDay_0((__Instance + __PointerAdjustment), arg0, arg1, year);
            return __ret;
        }

        public wxDateTime GetLastWeekDay(wxDateTime.WeekDay weekday, wxDateTime.Month month, int year)
        {
            var arg0 = weekday;
            var arg1 = month;
            var __ret = Internal.GetLastWeekDay_0((__Instance + __PointerAdjustment), arg0, arg1, year);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime SetToLastMonthDay(wxDateTime.Month month, int year)
        {
            var arg0 = month;
            var __ret = Internal.SetToLastMonthDay_0((__Instance + __PointerAdjustment), arg0, year);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime GetLastMonthDay(wxDateTime.Month month, int year)
        {
            var arg0 = month;
            var __ret = Internal.GetLastMonthDay_0((__Instance + __PointerAdjustment), arg0, year);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime SetToYearDay(ushort yday)
        {
            var __ret = Internal.SetToYearDay_0((__Instance + __PointerAdjustment), yday);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime GetYearDay(ushort yday)
        {
            var __ret = Internal.GetYearDay_0((__Instance + __PointerAdjustment), yday);
            return wxDateTime.__CreateInstance(__ret);
        }

        public double GetJulianDayNumber()
        {
            var __ret = Internal.GetJulianDayNumber_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double GetJDN()
        {
            var __ret = Internal.GetJDN_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double GetModifiedJulianDayNumber()
        {
            var __ret = Internal.GetModifiedJulianDayNumber_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double GetMJD()
        {
            var __ret = Internal.GetMJD_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double GetRataDie()
        {
            var __ret = Internal.GetRataDie_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxDateTime ToTimezone(wxDateTime.TimeZone tz, bool noDST)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.ToTimezone_0((__Instance + __PointerAdjustment), arg0, noDST);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime MakeTimezone(wxDateTime.TimeZone tz, bool noDST)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.MakeTimezone_0((__Instance + __PointerAdjustment), arg0, noDST);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime FromTimezone(wxDateTime.TimeZone tz, bool noDST)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.FromTimezone_0((__Instance + __PointerAdjustment), arg0, noDST);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime MakeFromTimezone(wxDateTime.TimeZone tz, bool noDST)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.MakeFromTimezone_0((__Instance + __PointerAdjustment), arg0, noDST);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime ToUTC(bool noDST)
        {
            var __ret = Internal.ToUTC_0((__Instance + __PointerAdjustment), noDST);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime MakeUTC(bool noDST)
        {
            var __ret = Internal.MakeUTC_0((__Instance + __PointerAdjustment), noDST);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime ToGMT(bool noDST)
        {
            var __ret = Internal.ToGMT_0((__Instance + __PointerAdjustment), noDST);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime MakeGMT(bool noDST)
        {
            var __ret = Internal.MakeGMT_0((__Instance + __PointerAdjustment), noDST);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime FromUTC(bool noDST)
        {
            var __ret = Internal.FromUTC_0((__Instance + __PointerAdjustment), noDST);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime MakeFromUTC(bool noDST)
        {
            var __ret = Internal.MakeFromUTC_0((__Instance + __PointerAdjustment), noDST);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public int IsDST(wxDateTime.Country country)
        {
            var arg0 = country;
            var __ret = Internal.IsDST_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsValid()
        {
            var __ret = Internal.IsValid_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxDateTime.Tm GetTm(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = new wxDateTime.Tm.Internal();
            Internal.GetTm_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxDateTime.Tm.__CreateInstance(__ret);
        }

        public int GetTicks()
        {
            var __ret = Internal.GetTicks_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetCentury(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetCentury_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int GetYear(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetYear_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxDateTime.Month GetMonth(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetMonth_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public ushort GetDay(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetDay_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxDateTime.WeekDay GetWeekDay(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetWeekDay_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public ushort GetHour(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetHour_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public ushort GetMinute(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetMinute_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public ushort GetSecond(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetSecond_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public ushort GetMillisecond(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetMillisecond_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public ushort GetDayOfYear(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetDayOfYear_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public ushort GetWeekOfYear(wxDateTime.WeekFlags flags, wxDateTime.TimeZone tz)
        {
            var arg0 = flags;
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg1 = tz.__Instance;
            var __ret = Internal.GetWeekOfYear_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public int GetWeekBasedYear(wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tz.__Instance;
            var __ret = Internal.GetWeekBasedYear_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public ushort GetWeekOfMonth(wxDateTime.WeekFlags flags, wxDateTime.TimeZone tz)
        {
            var arg0 = flags;
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg1 = tz.__Instance;
            var __ret = Internal.GetWeekOfMonth_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool IsWorkDay(wxDateTime.Country country)
        {
            var arg0 = country;
            var __ret = Internal.IsWorkDay_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxDateTime SetFromDOS(uint ddt)
        {
            var __ret = Internal.SetFromDOS_0((__Instance + __PointerAdjustment), ddt);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public uint GetAsDOS()
        {
            var __ret = Internal.GetAsDOS_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsEqualTo(wxDateTime datetime)
        {
            if (ReferenceEquals(datetime, null))
                throw new global::System.ArgumentNullException("datetime", "Cannot be null because it is a C++ reference (&).");
            var arg0 = datetime.__Instance;
            var __ret = Internal.IsEqualTo_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsEarlierThan(wxDateTime datetime)
        {
            if (ReferenceEquals(datetime, null))
                throw new global::System.ArgumentNullException("datetime", "Cannot be null because it is a C++ reference (&).");
            var arg0 = datetime.__Instance;
            var __ret = Internal.IsEarlierThan_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsLaterThan(wxDateTime datetime)
        {
            if (ReferenceEquals(datetime, null))
                throw new global::System.ArgumentNullException("datetime", "Cannot be null because it is a C++ reference (&).");
            var arg0 = datetime.__Instance;
            var __ret = Internal.IsLaterThan_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsStrictlyBetween(wxDateTime t1, wxDateTime t2)
        {
            if (ReferenceEquals(t1, null))
                throw new global::System.ArgumentNullException("t1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = t1.__Instance;
            if (ReferenceEquals(t2, null))
                throw new global::System.ArgumentNullException("t2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = t2.__Instance;
            var __ret = Internal.IsStrictlyBetween_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool IsBetween(wxDateTime t1, wxDateTime t2)
        {
            if (ReferenceEquals(t1, null))
                throw new global::System.ArgumentNullException("t1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = t1.__Instance;
            if (ReferenceEquals(t2, null))
                throw new global::System.ArgumentNullException("t2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = t2.__Instance;
            var __ret = Internal.IsBetween_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool IsSameDate(wxDateTime dt)
        {
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dt.__Instance;
            var __ret = Internal.IsSameDate_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsSameTime(wxDateTime dt)
        {
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dt.__Instance;
            var __ret = Internal.IsSameTime_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsEqualUpTo(wxDateTime dt, wxTimeSpan ts)
        {
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dt.__Instance;
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.IsEqualUpTo_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public static bool operator <(wxDateTime __op, wxDateTime dt)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg1 = dt.__Instance;
            var __ret = Internal.OperatorLess_0(arg0, arg1);
            return __ret;
        }

        public static bool operator <=(wxDateTime __op, wxDateTime dt)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg1 = dt.__Instance;
            var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator >(wxDateTime __op, wxDateTime dt)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg1 = dt.__Instance;
            var __ret = Internal.OperatorGreater_0(arg0, arg1);
            return __ret;
        }

        public static bool operator >=(wxDateTime __op, wxDateTime dt)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg1 = dt.__Instance;
            var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxDateTime __op, wxDateTime dt)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool dtNull = ReferenceEquals(dt, null);
            if (__opNull || dtNull)
                return __opNull && dtNull;
            var arg0 = __op.__Instance;
            var arg1 = dt.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxDateTime;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxDateTime __op, wxDateTime dt)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool dtNull = ReferenceEquals(dt, null);
            if (__opNull || dtNull)
                return !(__opNull && dtNull);
            var arg0 = __op.__Instance;
            var arg1 = dt.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public wxDateTime Add(wxTimeSpan diff)
        {
            if (ReferenceEquals(diff, null))
                throw new global::System.ArgumentNullException("diff", "Cannot be null because it is a C++ reference (&).");
            var arg0 = diff.__Instance;
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), arg0);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public static wxDateTime operator +(wxDateTime __op, wxTimeSpan ts)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorPlus_0(arg0, arg1);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime Subtract(wxTimeSpan diff)
        {
            if (ReferenceEquals(diff, null))
                throw new global::System.ArgumentNullException("diff", "Cannot be null because it is a C++ reference (&).");
            var arg0 = diff.__Instance;
            var __ret = Internal.Subtract_1((__Instance + __PointerAdjustment), arg0);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public static wxDateTime operator -(wxDateTime __op, wxTimeSpan ts)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorMinus_0(arg0, arg1);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime Add(wxDateSpan diff)
        {
            if (ReferenceEquals(diff, null))
                throw new global::System.ArgumentNullException("diff", "Cannot be null because it is a C++ reference (&).");
            var arg0 = diff.__Instance;
            var __ret = Internal.Add_3((__Instance + __PointerAdjustment), arg0);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public static wxDateTime operator +(wxDateTime __op, wxDateSpan ds)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ds, null))
                throw new global::System.ArgumentNullException("ds", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ds.__Instance;
            var __ret = Internal.OperatorPlus_1(arg0, arg1);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxDateTime Subtract(wxDateSpan diff)
        {
            if (ReferenceEquals(diff, null))
                throw new global::System.ArgumentNullException("diff", "Cannot be null because it is a C++ reference (&).");
            var arg0 = diff.__Instance;
            var __ret = Internal.Subtract_3((__Instance + __PointerAdjustment), arg0);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public static wxDateTime operator -(wxDateTime __op, wxDateSpan ds)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ds, null))
                throw new global::System.ArgumentNullException("ds", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ds.__Instance;
            var __ret = Internal.OperatorMinus_1(arg0, arg1);
            return wxDateTime.__CreateInstance(__ret);
        }

        public wxTimeSpan Subtract(wxDateTime dt)
        {
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dt.__Instance;
            var __ret = Internal.Subtract_4((__Instance + __PointerAdjustment), arg0);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan operator -(wxDateTime __op, wxDateTime dt2)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(dt2, null))
                throw new global::System.ArgumentNullException("dt2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = dt2.__Instance;
            var __ret = Internal.OperatorMinus_2(arg0, arg1);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public wxDateSpan DiffAsDateSpan(wxDateTime dt)
        {
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dt.__Instance;
            var __ret = new wxDateSpan.Internal();
            Internal.DiffAsDateSpan_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxDateSpan.__CreateInstance(__ret);
        }

        public bool ParseRfc822Date(wxString date, wxString.const_iterator end)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            var arg1 = ReferenceEquals(end, null) ? global::System.IntPtr.Zero : end.__Instance;
            var __ret = Internal.ParseRfc822Date_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool ParseFormat(wxString date, wxString format, wxDateTime dateDef, wxString.const_iterator end)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            if (ReferenceEquals(format, null))
                throw new global::System.ArgumentNullException("format", "Cannot be null because it is a C++ reference (&).");
            var arg1 = format.__Instance;
            if (ReferenceEquals(dateDef, null))
                throw new global::System.ArgumentNullException("dateDef", "Cannot be null because it is a C++ reference (&).");
            var arg2 = dateDef.__Instance;
            var arg3 = ReferenceEquals(end, null) ? global::System.IntPtr.Zero : end.__Instance;
            var __ret = Internal.ParseFormat_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
            return __ret;
        }

        public bool ParseFormat(wxString date, wxString format, wxString.const_iterator end)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            if (ReferenceEquals(format, null))
                throw new global::System.ArgumentNullException("format", "Cannot be null because it is a C++ reference (&).");
            var arg1 = format.__Instance;
            var arg2 = ReferenceEquals(end, null) ? global::System.IntPtr.Zero : end.__Instance;
            var __ret = Internal.ParseFormat_1((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            return __ret;
        }

        public bool ParseFormat(wxString date, wxString.const_iterator end)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            var arg1 = ReferenceEquals(end, null) ? global::System.IntPtr.Zero : end.__Instance;
            var __ret = Internal.ParseFormat_2((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool ParseISODate(wxString date)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            var __ret = Internal.ParseISODate_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool ParseISOTime(wxString time)
        {
            if (ReferenceEquals(time, null))
                throw new global::System.ArgumentNullException("time", "Cannot be null because it is a C++ reference (&).");
            var arg0 = time.__Instance;
            var __ret = Internal.ParseISOTime_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool ParseISOCombined(wxString datetime, sbyte sep)
        {
            if (ReferenceEquals(datetime, null))
                throw new global::System.ArgumentNullException("datetime", "Cannot be null because it is a C++ reference (&).");
            var arg0 = datetime.__Instance;
            var arg1 = sep;
            var __ret = Internal.ParseISOCombined_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool ParseDateTime(wxString datetime, wxString.const_iterator end)
        {
            if (ReferenceEquals(datetime, null))
                throw new global::System.ArgumentNullException("datetime", "Cannot be null because it is a C++ reference (&).");
            var arg0 = datetime.__Instance;
            var arg1 = ReferenceEquals(end, null) ? global::System.IntPtr.Zero : end.__Instance;
            var __ret = Internal.ParseDateTime_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool ParseDate(wxString date, wxString.const_iterator end)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            var arg1 = ReferenceEquals(end, null) ? global::System.IntPtr.Zero : end.__Instance;
            var __ret = Internal.ParseDate_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool ParseTime(wxString time, wxString.const_iterator end)
        {
            if (ReferenceEquals(time, null))
                throw new global::System.ArgumentNullException("time", "Cannot be null because it is a C++ reference (&).");
            var arg0 = time.__Instance;
            var arg1 = ReferenceEquals(end, null) ? global::System.IntPtr.Zero : end.__Instance;
            var __ret = Internal.ParseTime_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public wxString Format(wxString format, wxDateTime.TimeZone tz)
        {
            if (ReferenceEquals(format, null))
                throw new global::System.ArgumentNullException("format", "Cannot be null because it is a C++ reference (&).");
            var arg0 = format.__Instance;
            if (ReferenceEquals(tz, null))
                throw new global::System.ArgumentNullException("tz", "Cannot be null because it is a C++ reference (&).");
            var arg1 = tz.__Instance;
            var __ret = new wxString.Internal();
            Internal.Format_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public wxString FormatDate()
        {
            var __ret = new wxString.Internal();
            Internal.FormatDate_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString FormatTime()
        {
            var __ret = new wxString.Internal();
            Internal.FormatTime_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString FormatISODate()
        {
            var __ret = new wxString.Internal();
            Internal.FormatISODate_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString FormatISOTime()
        {
            var __ret = new wxString.Internal();
            Internal.FormatISOTime_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString FormatISOCombined(sbyte sep)
        {
            var arg0 = sep;
            var __ret = new wxString.Internal();
            Internal.FormatISOCombined_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public wxAnyStrPtr ParseRfc822Date(wxString date)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            var __ret = new wxAnyStrPtr.Internal();
            Internal.ParseRfc822Date_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxAnyStrPtr.__CreateInstance(__ret);
        }

        public wxAnyStrPtr ParseFormat(wxString date, wxString format, wxDateTime dateDef)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            if (ReferenceEquals(format, null))
                throw new global::System.ArgumentNullException("format", "Cannot be null because it is a C++ reference (&).");
            var arg1 = format.__Instance;
            if (ReferenceEquals(dateDef, null))
                throw new global::System.ArgumentNullException("dateDef", "Cannot be null because it is a C++ reference (&).");
            var arg2 = dateDef.__Instance;
            var __ret = new wxAnyStrPtr.Internal();
            Internal.ParseFormat_3(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1, arg2);
            return wxAnyStrPtr.__CreateInstance(__ret);
        }

        public wxAnyStrPtr ParseDateTime(wxString datetime)
        {
            if (ReferenceEquals(datetime, null))
                throw new global::System.ArgumentNullException("datetime", "Cannot be null because it is a C++ reference (&).");
            var arg0 = datetime.__Instance;
            var __ret = new wxAnyStrPtr.Internal();
            Internal.ParseDateTime_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxAnyStrPtr.__CreateInstance(__ret);
        }

        public wxAnyStrPtr ParseDate(wxString date)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            var __ret = new wxAnyStrPtr.Internal();
            Internal.ParseDate_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxAnyStrPtr.__CreateInstance(__ret);
        }

        public wxAnyStrPtr ParseTime(wxString time)
        {
            if (ReferenceEquals(time, null))
                throw new global::System.ArgumentNullException("time", "Cannot be null because it is a C++ reference (&).");
            var arg0 = time.__Instance;
            var __ret = new wxAnyStrPtr.Internal();
            Internal.ParseTime_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxAnyStrPtr.__CreateInstance(__ret);
        }

        public void ParseRfc822Date(wxCStrData date)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            Internal.ParseRfc822Date_2((__Instance + __PointerAdjustment), arg0);
        }

        public string ParseRfc822Date(string date)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(date);
            var __ret = Internal.ParseRfc822Date_3((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public string ParseRfc822Date1(string date)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(date);
            var __ret = Internal.ParseRfc822Date1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public void ParseFormat(wxCStrData date, wxString format, wxDateTime dateDef)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            if (ReferenceEquals(format, null))
                throw new global::System.ArgumentNullException("format", "Cannot be null because it is a C++ reference (&).");
            var arg1 = format.__Instance;
            if (ReferenceEquals(dateDef, null))
                throw new global::System.ArgumentNullException("dateDef", "Cannot be null because it is a C++ reference (&).");
            var arg2 = dateDef.__Instance;
            Internal.ParseFormat_4((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public string ParseFormat(string date, wxString format, wxDateTime dateDef)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(date);
            if (ReferenceEquals(format, null))
                throw new global::System.ArgumentNullException("format", "Cannot be null because it is a C++ reference (&).");
            var arg1 = format.__Instance;
            if (ReferenceEquals(dateDef, null))
                throw new global::System.ArgumentNullException("dateDef", "Cannot be null because it is a C++ reference (&).");
            var arg2 = dateDef.__Instance;
            var __ret = Internal.ParseFormat_5((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public string ParseFormat1(string date, wxString format, wxDateTime dateDef)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(date);
            if (ReferenceEquals(format, null))
                throw new global::System.ArgumentNullException("format", "Cannot be null because it is a C++ reference (&).");
            var arg1 = format.__Instance;
            if (ReferenceEquals(dateDef, null))
                throw new global::System.ArgumentNullException("dateDef", "Cannot be null because it is a C++ reference (&).");
            var arg2 = dateDef.__Instance;
            var __ret = Internal.ParseFormat1_0((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public void ParseDateTime(wxCStrData datetime)
        {
            if (ReferenceEquals(datetime, null))
                throw new global::System.ArgumentNullException("datetime", "Cannot be null because it is a C++ reference (&).");
            var arg0 = datetime.__Instance;
            Internal.ParseDateTime_2((__Instance + __PointerAdjustment), arg0);
        }

        public string ParseDateTime(string datetime)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(datetime);
            var __ret = Internal.ParseDateTime_3((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public string ParseDateTime1(string datetime)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(datetime);
            var __ret = Internal.ParseDateTime1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public void ParseDate(wxCStrData date)
        {
            if (ReferenceEquals(date, null))
                throw new global::System.ArgumentNullException("date", "Cannot be null because it is a C++ reference (&).");
            var arg0 = date.__Instance;
            Internal.ParseDate_2((__Instance + __PointerAdjustment), arg0);
        }

        public string ParseDate(string date)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(date);
            var __ret = Internal.ParseDate_3((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public string ParseDate1(string date)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(date);
            var __ret = Internal.ParseDate1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public void ParseTime(wxCStrData time)
        {
            if (ReferenceEquals(time, null))
                throw new global::System.ArgumentNullException("time", "Cannot be null because it is a C++ reference (&).");
            var arg0 = time.__Instance;
            Internal.ParseTime_2((__Instance + __PointerAdjustment), arg0);
        }

        public string ParseTime(string time)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(time);
            var __ret = Internal.ParseTime_3((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public string ParseTime1(string time)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(time);
            var __ret = Internal.ParseTime1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public wxLongLongNative GetValue()
        {
            var __ret = Internal.GetValue_0((__Instance + __PointerAdjustment));
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static void SetCountry(wxDateTime.Country country)
        {
            var arg0 = country;
            Internal.SetCountry_0(arg0);
        }

        public static wxDateTime.Country GetCountry()
        {
            var __ret = Internal.GetCountry_0();
            return __ret;
        }

        public static bool IsWestEuropeanCountry(wxDateTime.Country country)
        {
            var arg0 = country;
            var __ret = Internal.IsWestEuropeanCountry_0(arg0);
            return __ret;
        }

        public static int GetCurrentYear(wxDateTime.Calendar cal)
        {
            var arg0 = cal;
            var __ret = Internal.GetCurrentYear_0(arg0);
            return __ret;
        }

        public static int ConvertYearToBC(int year)
        {
            var __ret = Internal.ConvertYearToBC_0(year);
            return __ret;
        }

        public static wxDateTime.Month GetCurrentMonth(wxDateTime.Calendar cal)
        {
            var arg0 = cal;
            var __ret = Internal.GetCurrentMonth_0(arg0);
            return __ret;
        }

        public static bool IsLeapYear(int year, wxDateTime.Calendar cal)
        {
            var arg1 = cal;
            var __ret = Internal.IsLeapYear_0(year, arg1);
            return __ret;
        }

        public static int GetCentury(int year)
        {
            var __ret = Internal.GetCentury_0(year);
            return __ret;
        }

        public static ushort GetNumberOfDays(int year, wxDateTime.Calendar cal)
        {
            var arg1 = cal;
            var __ret = Internal.GetNumberOfDays_0(year, arg1);
            return __ret;
        }

        public static ushort GetNumberOfDays(wxDateTime.Month month, int year, wxDateTime.Calendar cal)
        {
            var arg0 = month;
            var arg2 = cal;
            var __ret = Internal.GetNumberOfDays_1(arg0, year, arg2);
            return __ret;
        }

        public static wxString GetMonthName(wxDateTime.Month month, wxDateTime.NameFlags flags)
        {
            var arg0 = month;
            var arg1 = flags;
            var __ret = new wxString.Internal();
            Internal.GetMonthName_0(new IntPtr(&__ret), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString GetEnglishMonthName(wxDateTime.Month month, wxDateTime.NameFlags flags)
        {
            var arg0 = month;
            var arg1 = flags;
            var __ret = new wxString.Internal();
            Internal.GetEnglishMonthName_0(new IntPtr(&__ret), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString GetWeekDayName(wxDateTime.WeekDay weekday, wxDateTime.NameFlags flags)
        {
            var arg0 = weekday;
            var arg1 = flags;
            var __ret = new wxString.Internal();
            Internal.GetWeekDayName_0(new IntPtr(&__ret), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString GetEnglishWeekDayName(wxDateTime.WeekDay weekday, wxDateTime.NameFlags flags)
        {
            var arg0 = weekday;
            var arg1 = flags;
            var __ret = new wxString.Internal();
            Internal.GetEnglishWeekDayName_0(new IntPtr(&__ret), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static void GetAmPmStrings(wxString am, wxString pm)
        {
            var arg0 = ReferenceEquals(am, null) ? global::System.IntPtr.Zero : am.__Instance;
            var arg1 = ReferenceEquals(pm, null) ? global::System.IntPtr.Zero : pm.__Instance;
            Internal.GetAmPmStrings_0(arg0, arg1);
        }

        public static bool IsDSTApplicable(int year, wxDateTime.Country country)
        {
            var arg1 = country;
            var __ret = Internal.IsDSTApplicable_0(year, arg1);
            return __ret;
        }

        public static wxDateTime GetBeginDST(int year, wxDateTime.Country country)
        {
            var arg1 = country;
            var __ret = Internal.GetBeginDST_0(year, arg1);
            return wxDateTime.__CreateInstance(__ret);
        }

        public static wxDateTime GetEndDST(int year, wxDateTime.Country country)
        {
            var arg1 = country;
            var __ret = Internal.GetEndDST_0(year, arg1);
            return wxDateTime.__CreateInstance(__ret);
        }

        public static wxDateTime Now()
        {
            var __ret = Internal.Now_0();
            return wxDateTime.__CreateInstance(__ret);
        }

        public static wxDateTime UNow()
        {
            var __ret = Internal.UNow_0();
            return wxDateTime.__CreateInstance(__ret);
        }

        public static wxDateTime Today()
        {
            var __ret = Internal.Today_0();
            return wxDateTime.__CreateInstance(__ret);
        }

        public static wxDateTime SetToWeekOfYear(int year, ushort numWeek, wxDateTime.WeekDay weekday)
        {
            var arg2 = weekday;
            var __ret = Internal.SetToWeekOfYear_0(year, numWeek, arg2);
            return wxDateTime.__CreateInstance(__ret);
        }

        public static int GetTimeNow()
        {
            var __ret = Internal.GetTimeNow_0();
            return __ret;
        }

        public static tm GetTmNow()
        {
            var __ret = Internal.GetTmNow_0();
            tm __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (tm.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (tm) tm.NativeToManagedMap[__ret];
            else __result0 = tm.__CreateInstance(__ret);
            return __result0;
        }

        public static tm GetTmNow(tm tmstruct)
        {
            var arg0 = ReferenceEquals(tmstruct, null) ? global::System.IntPtr.Zero : tmstruct.__Instance;
            var __ret = Internal.GetTmNow_1(arg0);
            tm __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (tm.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (tm) tm.NativeToManagedMap[__ret];
            else __result0 = tm.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class wxTimeSpan : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxLongLongNative.Internal m_diff;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpanC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpanC2Ell16wxLongLongNativeS0_")]
            internal static extern void ctor_1(global::System.IntPtr instance, int hours, int minutes, wxLongLongNative.Internal seconds, wxLongLongNative.Internal milliseconds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpanC2ERK16wxLongLongNative")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr diff);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpanC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan12MillisecondsE16wxLongLongNative")]
            internal static extern wxTimeSpan.Internal Milliseconds_0(wxLongLongNative.Internal ms);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan11MillisecondEv")]
            internal static extern wxTimeSpan.Internal Millisecond_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan7SecondsE16wxLongLongNative")]
            internal static extern wxTimeSpan.Internal Seconds_0(wxLongLongNative.Internal sec);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan6SecondEv")]
            internal static extern wxTimeSpan.Internal Second_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan7MinutesEl")]
            internal static extern wxTimeSpan.Internal Minutes_0(int min);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan6MinuteEv")]
            internal static extern wxTimeSpan.Internal Minute_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan5HoursEl")]
            internal static extern wxTimeSpan.Internal Hours_0(int hours);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan4HourEv")]
            internal static extern wxTimeSpan.Internal Hour_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan4DaysEl")]
            internal static extern wxTimeSpan.Internal Days_0(int days);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan3DayEv")]
            internal static extern wxTimeSpan.Internal Day_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan5WeeksEl")]
            internal static extern wxTimeSpan.Internal Weeks_0(int days);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan4WeekEv")]
            internal static extern wxTimeSpan.Internal Week_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan3AddERKS_")]
            internal static extern global::System.IntPtr Add_1(global::System.IntPtr instance, global::System.IntPtr diff);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpanplERKS_")]
            internal static extern wxTimeSpan.Internal OperatorPlus_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan8SubtractERKS_")]
            internal static extern global::System.IntPtr Subtract_1(global::System.IntPtr instance, global::System.IntPtr diff);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpanmiERKS_")]
            internal static extern wxTimeSpan.Internal OperatorMinus_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan8MultiplyEi")]
            internal static extern global::System.IntPtr Multiply_1(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpanmlEi")]
            internal static extern wxTimeSpan.Internal OperatorStar_0(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan6NegateEv")]
            internal static extern wxTimeSpan.Internal Negate_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpan3NegEv")]
            internal static extern global::System.IntPtr Neg_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxTimeSpanngEv")]
            internal static extern global::System.IntPtr OperatorMinus_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan3AbsEv")]
            internal static extern wxTimeSpan.Internal Abs_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan6IsNullEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsNull_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpanntEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaim_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan10IsPositiveEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsPositive_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan10IsNegativeEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsNegative_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan9IsEqualToERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEqualTo_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan12IsLongerThanERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsLongerThan_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan13IsShorterThanERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsShorterThan_0(global::System.IntPtr instance, global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpanltERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpanleERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpangtERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpangeERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpaneqERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpanneERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan8GetWeeksEv")]
            internal static extern int GetWeeks_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan7GetDaysEv")]
            internal static extern int GetDays_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan8GetHoursEv")]
            internal static extern int GetHours_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan10GetMinutesEv")]
            internal static extern int GetMinutes_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan10GetSecondsEv")]
            internal static extern wxLongLongNative.Internal GetSeconds_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan15GetMillisecondsEv")]
            internal static extern wxLongLongNative.Internal GetMilliseconds_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan6FormatERK8wxString")]
            internal static extern void Format_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxTimeSpan8GetValueEv")]
            internal static extern wxLongLongNative.Internal GetValue_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmliRK10wxTimeSpan")]
            internal static extern wxTimeSpan.Internal OperatorStar_1(int n, global::System.IntPtr ts);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTimeSpan> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTimeSpan>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxTimeSpan __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxTimeSpan(native.ToPointer(), skipVTables);
        }

        public static wxTimeSpan __CreateInstance(wxTimeSpan.Internal native, bool skipVTables = false)
        {
            return new wxTimeSpan(native, skipVTables);
        }

        private static void* __CopyValue(wxTimeSpan.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxTimeSpan.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxTimeSpan(wxTimeSpan.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxTimeSpan(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxTimeSpan()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxTimeSpan(int hours, int minutes, wxLongLongNative seconds, wxLongLongNative milliseconds)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg2 = ReferenceEquals(seconds, null) ? new wxLongLongNative.Internal() : *(wxLongLongNative.Internal*) (seconds.__Instance);
            var arg3 = ReferenceEquals(milliseconds, null) ? new wxLongLongNative.Internal() : *(wxLongLongNative.Internal*) (milliseconds.__Instance);
            Internal.ctor_1((__Instance + __PointerAdjustment), hours, minutes, arg2, arg3);
        }

        public wxTimeSpan(wxLongLongNative diff)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(diff, null))
                throw new global::System.ArgumentNullException("diff", "Cannot be null because it is a C++ reference (&).");
            var arg0 = diff.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public wxTimeSpan(wxTimeSpan _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxTimeSpan.Internal*) __Instance) = *((wxTimeSpan.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxTimeSpan __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxTimeSpan Add(wxTimeSpan diff)
        {
            if (ReferenceEquals(diff, null))
                throw new global::System.ArgumentNullException("diff", "Cannot be null because it is a C++ reference (&).");
            var arg0 = diff.__Instance;
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), arg0);
            wxTimeSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxTimeSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxTimeSpan) wxTimeSpan.NativeToManagedMap[__ret];
            else __result0 = wxTimeSpan.__CreateInstance(__ret);
            return __result0;
        }

        public static wxTimeSpan operator +(wxTimeSpan __op, wxTimeSpan ts)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorPlus_0(arg0, arg1);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public wxTimeSpan Subtract(wxTimeSpan diff)
        {
            if (ReferenceEquals(diff, null))
                throw new global::System.ArgumentNullException("diff", "Cannot be null because it is a C++ reference (&).");
            var arg0 = diff.__Instance;
            var __ret = Internal.Subtract_1((__Instance + __PointerAdjustment), arg0);
            wxTimeSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxTimeSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxTimeSpan) wxTimeSpan.NativeToManagedMap[__ret];
            else __result0 = wxTimeSpan.__CreateInstance(__ret);
            return __result0;
        }

        public static wxTimeSpan operator -(wxTimeSpan __op, wxTimeSpan ts)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorMinus_0(arg0, arg1);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public wxTimeSpan Multiply(int n)
        {
            var __ret = Internal.Multiply_1((__Instance + __PointerAdjustment), n);
            wxTimeSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxTimeSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxTimeSpan) wxTimeSpan.NativeToManagedMap[__ret];
            else __result0 = wxTimeSpan.__CreateInstance(__ret);
            return __result0;
        }

        public static wxTimeSpan operator *(wxTimeSpan __op, int n)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorStar_0(arg0, n);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public wxTimeSpan Negate()
        {
            var __ret = Internal.Negate_0((__Instance + __PointerAdjustment));
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public wxTimeSpan Neg()
        {
            var __ret = Internal.Neg_0((__Instance + __PointerAdjustment));
            wxTimeSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxTimeSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxTimeSpan) wxTimeSpan.NativeToManagedMap[__ret];
            else __result0 = wxTimeSpan.__CreateInstance(__ret);
            return __result0;
        }

        public static wxTimeSpan operator -(wxTimeSpan __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorMinus_1(arg0);
            wxTimeSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxTimeSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxTimeSpan) wxTimeSpan.NativeToManagedMap[__ret];
            else __result0 = wxTimeSpan.__CreateInstance(__ret);
            return __result0;
        }

        public wxTimeSpan Abs()
        {
            var __ret = Internal.Abs_0((__Instance + __PointerAdjustment));
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public bool IsNull()
        {
            var __ret = Internal.IsNull_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static bool operator !(wxTimeSpan __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaim_0(arg0);
            return __ret;
        }

        public bool IsPositive()
        {
            var __ret = Internal.IsPositive_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsNegative()
        {
            var __ret = Internal.IsNegative_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsEqualTo(wxTimeSpan ts)
        {
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ts.__Instance;
            var __ret = Internal.IsEqualTo_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsLongerThan(wxTimeSpan ts)
        {
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ts.__Instance;
            var __ret = Internal.IsLongerThan_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsShorterThan(wxTimeSpan t)
        {
            if (ReferenceEquals(t, null))
                throw new global::System.ArgumentNullException("t", "Cannot be null because it is a C++ reference (&).");
            var arg0 = t.__Instance;
            var __ret = Internal.IsShorterThan_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public static bool operator <(wxTimeSpan __op, wxTimeSpan ts)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorLess_0(arg0, arg1);
            return __ret;
        }

        public static bool operator <=(wxTimeSpan __op, wxTimeSpan ts)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator >(wxTimeSpan __op, wxTimeSpan ts)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorGreater_0(arg0, arg1);
            return __ret;
        }

        public static bool operator >=(wxTimeSpan __op, wxTimeSpan ts)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxTimeSpan __op, wxTimeSpan ts)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool tsNull = ReferenceEquals(ts, null);
            if (__opNull || tsNull)
                return __opNull && tsNull;
            var arg0 = __op.__Instance;
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxTimeSpan;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxTimeSpan __op, wxTimeSpan ts)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool tsNull = ReferenceEquals(ts, null);
            if (__opNull || tsNull)
                return !(__opNull && tsNull);
            var arg0 = __op.__Instance;
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public int GetWeeks()
        {
            var __ret = Internal.GetWeeks_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetDays()
        {
            var __ret = Internal.GetDays_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetHours()
        {
            var __ret = Internal.GetHours_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetMinutes()
        {
            var __ret = Internal.GetMinutes_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxLongLongNative GetSeconds()
        {
            var __ret = Internal.GetSeconds_0((__Instance + __PointerAdjustment));
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public wxLongLongNative GetMilliseconds()
        {
            var __ret = Internal.GetMilliseconds_0((__Instance + __PointerAdjustment));
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public wxString Format(wxString format)
        {
            if (ReferenceEquals(format, null))
                throw new global::System.ArgumentNullException("format", "Cannot be null because it is a C++ reference (&).");
            var arg0 = format.__Instance;
            var __ret = new wxString.Internal();
            Internal.Format_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public wxLongLongNative GetValue()
        {
            var __ret = Internal.GetValue_0((__Instance + __PointerAdjustment));
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxTimeSpan Milliseconds(wxLongLongNative ms)
        {
            var arg0 = ReferenceEquals(ms, null) ? new wxLongLongNative.Internal() : *(wxLongLongNative.Internal*) (ms.__Instance);
            var __ret = Internal.Milliseconds_0(arg0);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Millisecond()
        {
            var __ret = Internal.Millisecond_0();
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Seconds(wxLongLongNative sec)
        {
            var arg0 = ReferenceEquals(sec, null) ? new wxLongLongNative.Internal() : *(wxLongLongNative.Internal*) (sec.__Instance);
            var __ret = Internal.Seconds_0(arg0);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Second()
        {
            var __ret = Internal.Second_0();
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Minutes(int min)
        {
            var __ret = Internal.Minutes_0(min);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Minute()
        {
            var __ret = Internal.Minute_0();
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Hours(int hours)
        {
            var __ret = Internal.Hours_0(hours);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Hour()
        {
            var __ret = Internal.Hour_0();
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Days(int days)
        {
            var __ret = Internal.Days_0(days);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Day()
        {
            var __ret = Internal.Day_0();
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Weeks(int days)
        {
            var __ret = Internal.Weeks_0(days);
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan Week()
        {
            var __ret = Internal.Week_0();
            return wxTimeSpan.__CreateInstance(__ret);
        }

        public static wxTimeSpan operator *(int n, wxTimeSpan ts)
        {
            if (ReferenceEquals(ts, null))
                throw new global::System.ArgumentNullException("ts", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ts.__Instance;
            var __ret = Internal.OperatorStar_1(n, arg1);
            return wxTimeSpan.__CreateInstance(__ret);
        }
    }

    public unsafe partial class wxDateSpan : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int m_years;

            [FieldOffset(4)]
            public int m_months;

            [FieldOffset(8)]
            public int m_weeks;

            [FieldOffset(12)]
            public int m_days;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpanC2Eiiii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int years, int months, int weeks, int days);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpanC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan4DaysEi")]
            internal static extern void Days_0(global::System.IntPtr @return, int days);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan3DayEv")]
            internal static extern void Day_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan5WeeksEi")]
            internal static extern void Weeks_0(global::System.IntPtr @return, int weeks);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan4WeekEv")]
            internal static extern void Week_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan6MonthsEi")]
            internal static extern void Months_0(global::System.IntPtr @return, int mon);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan5MonthEv")]
            internal static extern void Month_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan5YearsEi")]
            internal static extern void Years_0(global::System.IntPtr @return, int years);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan4YearEv")]
            internal static extern void Year_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan8SetYearsEi")]
            internal static extern global::System.IntPtr SetYears_0(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan9SetMonthsEi")]
            internal static extern global::System.IntPtr SetMonths_0(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan8SetWeeksEi")]
            internal static extern global::System.IntPtr SetWeeks_0(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan7SetDaysEi")]
            internal static extern global::System.IntPtr SetDays_0(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpan8GetYearsEv")]
            internal static extern int GetYears_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpan9GetMonthsEv")]
            internal static extern int GetMonths_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpan14GetTotalMonthsEv")]
            internal static extern int GetTotalMonths_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpan8GetWeeksEv")]
            internal static extern int GetWeeks_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpan7GetDaysEv")]
            internal static extern int GetDays_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpan12GetTotalDaysEv")]
            internal static extern int GetTotalDays_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan3AddERKS_")]
            internal static extern global::System.IntPtr Add_1(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpanplERKS_")]
            internal static extern void OperatorPlus_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr ds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan8SubtractERKS_")]
            internal static extern global::System.IntPtr Subtract_1(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpanmiERKS_")]
            internal static extern void OperatorMinus_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr ds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpan6NegateEv")]
            internal static extern void Negate_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan3NegEv")]
            internal static extern global::System.IntPtr Neg_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpanngEv")]
            internal static extern global::System.IntPtr OperatorMinus_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxDateSpan8MultiplyEi")]
            internal static extern global::System.IntPtr Multiply_1(global::System.IntPtr instance, int factor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpanmlEi")]
            internal static extern void OperatorStar_0(global::System.IntPtr @return, global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpaneqERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr ds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxDateSpanneERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr ds);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmliRK10wxDateSpan")]
            internal static extern void OperatorStar_1(global::System.IntPtr @return, int n, global::System.IntPtr ds);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxDateSpan> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxDateSpan>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxDateSpan __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxDateSpan(native.ToPointer(), skipVTables);
        }

        public static wxDateSpan __CreateInstance(wxDateSpan.Internal native, bool skipVTables = false)
        {
            return new wxDateSpan(native, skipVTables);
        }

        private static void* __CopyValue(wxDateSpan.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            *(wxDateSpan.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxDateSpan(wxDateSpan.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxDateSpan(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxDateSpan(int years, int months, int weeks, int days)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), years, months, weeks, days);
        }

        public wxDateSpan(wxDateSpan _0)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxDateSpan.Internal*) __Instance) = *((wxDateSpan.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxDateSpan __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxDateSpan SetYears(int n)
        {
            var __ret = Internal.SetYears_0((__Instance + __PointerAdjustment), n);
            wxDateSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateSpan) wxDateSpan.NativeToManagedMap[__ret];
            else __result0 = wxDateSpan.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateSpan SetMonths(int n)
        {
            var __ret = Internal.SetMonths_0((__Instance + __PointerAdjustment), n);
            wxDateSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateSpan) wxDateSpan.NativeToManagedMap[__ret];
            else __result0 = wxDateSpan.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateSpan SetWeeks(int n)
        {
            var __ret = Internal.SetWeeks_0((__Instance + __PointerAdjustment), n);
            wxDateSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateSpan) wxDateSpan.NativeToManagedMap[__ret];
            else __result0 = wxDateSpan.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateSpan SetDays(int n)
        {
            var __ret = Internal.SetDays_0((__Instance + __PointerAdjustment), n);
            wxDateSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateSpan) wxDateSpan.NativeToManagedMap[__ret];
            else __result0 = wxDateSpan.__CreateInstance(__ret);
            return __result0;
        }

        public int GetYears()
        {
            var __ret = Internal.GetYears_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetMonths()
        {
            var __ret = Internal.GetMonths_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetTotalMonths()
        {
            var __ret = Internal.GetTotalMonths_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetWeeks()
        {
            var __ret = Internal.GetWeeks_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetDays()
        {
            var __ret = Internal.GetDays_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetTotalDays()
        {
            var __ret = Internal.GetTotalDays_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxDateSpan Add(wxDateSpan other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), arg0);
            wxDateSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateSpan) wxDateSpan.NativeToManagedMap[__ret];
            else __result0 = wxDateSpan.__CreateInstance(__ret);
            return __result0;
        }

        public static wxDateSpan operator +(wxDateSpan __op, wxDateSpan ds)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ds, null))
                throw new global::System.ArgumentNullException("ds", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ds.__Instance;
            var __ret = new wxDateSpan.Internal();
            Internal.OperatorPlus_0(new IntPtr(&__ret), arg0, arg1);
            return wxDateSpan.__CreateInstance(__ret);
        }

        public wxDateSpan Subtract(wxDateSpan other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            var __ret = Internal.Subtract_1((__Instance + __PointerAdjustment), arg0);
            wxDateSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateSpan) wxDateSpan.NativeToManagedMap[__ret];
            else __result0 = wxDateSpan.__CreateInstance(__ret);
            return __result0;
        }

        public static wxDateSpan operator -(wxDateSpan __op, wxDateSpan ds)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ds, null))
                throw new global::System.ArgumentNullException("ds", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ds.__Instance;
            var __ret = new wxDateSpan.Internal();
            Internal.OperatorMinus_0(new IntPtr(&__ret), arg0, arg1);
            return wxDateSpan.__CreateInstance(__ret);
        }

        public wxDateSpan Negate()
        {
            var __ret = new wxDateSpan.Internal();
            Internal.Negate_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxDateSpan.__CreateInstance(__ret);
        }

        public wxDateSpan Neg()
        {
            var __ret = Internal.Neg_0((__Instance + __PointerAdjustment));
            wxDateSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateSpan) wxDateSpan.NativeToManagedMap[__ret];
            else __result0 = wxDateSpan.__CreateInstance(__ret);
            return __result0;
        }

        public static wxDateSpan operator -(wxDateSpan __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorMinus_1(arg0);
            wxDateSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateSpan) wxDateSpan.NativeToManagedMap[__ret];
            else __result0 = wxDateSpan.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateSpan Multiply(int factor)
        {
            var __ret = Internal.Multiply_1((__Instance + __PointerAdjustment), factor);
            wxDateSpan __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateSpan.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateSpan) wxDateSpan.NativeToManagedMap[__ret];
            else __result0 = wxDateSpan.__CreateInstance(__ret);
            return __result0;
        }

        public static wxDateSpan operator *(wxDateSpan __op, int n)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = new wxDateSpan.Internal();
            Internal.OperatorStar_0(new IntPtr(&__ret), arg0, n);
            return wxDateSpan.__CreateInstance(__ret);
        }

        public static bool operator ==(wxDateSpan __op, wxDateSpan ds)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool dsNull = ReferenceEquals(ds, null);
            if (__opNull || dsNull)
                return __opNull && dsNull;
            var arg0 = __op.__Instance;
            var arg1 = ds.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxDateSpan;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxDateSpan __op, wxDateSpan ds)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool dsNull = ReferenceEquals(ds, null);
            if (__opNull || dsNull)
                return !(__opNull && dsNull);
            var arg0 = __op.__Instance;
            var arg1 = ds.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static wxDateSpan Days(int days)
        {
            var __ret = new wxDateSpan.Internal();
            Internal.Days_0(new IntPtr(&__ret), days);
            return wxDateSpan.__CreateInstance(__ret);
        }

        public static wxDateSpan Day()
        {
            var __ret = new wxDateSpan.Internal();
            Internal.Day_0(new IntPtr(&__ret));
            return wxDateSpan.__CreateInstance(__ret);
        }

        public static wxDateSpan Weeks(int weeks)
        {
            var __ret = new wxDateSpan.Internal();
            Internal.Weeks_0(new IntPtr(&__ret), weeks);
            return wxDateSpan.__CreateInstance(__ret);
        }

        public static wxDateSpan Week()
        {
            var __ret = new wxDateSpan.Internal();
            Internal.Week_0(new IntPtr(&__ret));
            return wxDateSpan.__CreateInstance(__ret);
        }

        public static wxDateSpan Months(int mon)
        {
            var __ret = new wxDateSpan.Internal();
            Internal.Months_0(new IntPtr(&__ret), mon);
            return wxDateSpan.__CreateInstance(__ret);
        }

        public static wxDateSpan Month()
        {
            var __ret = new wxDateSpan.Internal();
            Internal.Month_0(new IntPtr(&__ret));
            return wxDateSpan.__CreateInstance(__ret);
        }

        public static wxDateSpan Years(int years)
        {
            var __ret = new wxDateSpan.Internal();
            Internal.Years_0(new IntPtr(&__ret), years);
            return wxDateSpan.__CreateInstance(__ret);
        }

        public static wxDateSpan Year()
        {
            var __ret = new wxDateSpan.Internal();
            Internal.Year_0(new IntPtr(&__ret));
            return wxDateSpan.__CreateInstance(__ret);
        }

        public static wxDateSpan operator *(int n, wxDateSpan ds)
        {
            if (ReferenceEquals(ds, null))
                throw new global::System.ArgumentNullException("ds", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ds.__Instance;
            var __ret = new wxDateSpan.Internal();
            Internal.OperatorStar_1(new IntPtr(&__ret), n, arg1);
            return wxDateSpan.__CreateInstance(__ret);
        }
    }

    public unsafe partial class wxDateTimeArray : wxArrayPtrVoid, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public global::System.IntPtr m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArrayC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArrayC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr src);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArrayD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray5AllocEm")]
            internal static extern void Alloc_0(global::System.IntPtr instance, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxDateTimeArray8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxDateTimeArray4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxDateTimeArray7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxDateTimeArray5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxDateTimeArray5CountEv")]
            internal static extern uint Count_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray6ShrinkEv")]
            internal static extern void Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxDateTimeArray4ItemEm")]
            internal static extern global::System.IntPtr Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxDateTimeArray4LastEv")]
            internal static extern global::System.IntPtr Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxDateTimeArray5IndexERK10wxDateTimeb")]
            internal static extern int Index_0(global::System.IntPtr instance, global::System.IntPtr lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray3AddERK10wxDateTimem")]
            internal static extern void Add_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray3AddEPK10wxDateTime")]
            internal static extern void Add_1(global::System.IntPtr instance, global::System.IntPtr pItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray9push_backEPK10wxDateTime")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr pItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray9push_backERK10wxDateTime")]
            internal static extern void push_back1_0(global::System.IntPtr instance, global::System.IntPtr lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray6InsertERK10wxDateTimemm")]
            internal static extern void Insert_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray6InsertEPK10wxDateTimem")]
            internal static extern void Insert_1(global::System.IntPtr instance, global::System.IntPtr pItem, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray6DetachEm")]
            internal static extern global::System.IntPtr Detach_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxDateTimeArray4SortEPFiPP10wxDateTimeS2_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fCmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxDateTimeArrayixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public static new wxDateTimeArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxDateTimeArray(native.ToPointer(), skipVTables);
        }

        public static wxDateTimeArray __CreateInstance(wxDateTimeArray.Internal native, bool skipVTables = false)
        {
            return new wxDateTimeArray(native, skipVTables);
        }

        private static void* __CopyValue(wxDateTimeArray.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxDateTimeArray.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxDateTimeArray(wxDateTimeArray.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxDateTimeArray(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxDateTimeArray()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxDateTimeArray(wxDateTimeArray src)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(src, null))
                throw new global::System.ArgumentNullException("src", "Cannot be null because it is a C++ reference (&).");
            var arg0 = src.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxBaseArrayPtrVoid __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Alloc(uint count)
        {
            Internal.Alloc_0((__Instance + __PointerAdjustment), count);
        }

        public void reserve(uint count)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), count);
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Count()
        {
            var __ret = Internal.Count_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Shrink()
        {
            Internal.Shrink_0((__Instance + __PointerAdjustment));
        }

        public wxDateTime Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTime Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public int Index(wxDateTime lItem, bool bFromEnd)
        {
            if (ReferenceEquals(lItem, null))
                throw new global::System.ArgumentNullException("lItem", "Cannot be null because it is a C++ reference (&).");
            var arg0 = lItem.__Instance;
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        public void Add(wxDateTime lItem, uint nInsert)
        {
            if (ReferenceEquals(lItem, null))
                throw new global::System.ArgumentNullException("lItem", "Cannot be null because it is a C++ reference (&).");
            var arg0 = lItem.__Instance;
            Internal.Add_0((__Instance + __PointerAdjustment), arg0, nInsert);
        }

        public void Add(wxDateTime pItem)
        {
            var arg0 = ReferenceEquals(pItem, null) ? global::System.IntPtr.Zero : pItem.__Instance;
            Internal.Add_1((__Instance + __PointerAdjustment), arg0);
        }

        public void push_back(wxDateTime pItem)
        {
            var arg0 = ReferenceEquals(pItem, null) ? global::System.IntPtr.Zero : pItem.__Instance;
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
        }

        public void push_back1(wxDateTime lItem)
        {
            if (ReferenceEquals(lItem, null))
                throw new global::System.ArgumentNullException("lItem", "Cannot be null because it is a C++ reference (&).");
            var arg0 = lItem.__Instance;
            Internal.push_back1_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Insert(wxDateTime lItem, uint uiIndex, uint nInsert)
        {
            if (ReferenceEquals(lItem, null))
                throw new global::System.ArgumentNullException("lItem", "Cannot be null because it is a C++ reference (&).");
            var arg0 = lItem.__Instance;
            Internal.Insert_0((__Instance + __PointerAdjustment), arg0, uiIndex, nInsert);
        }

        public void Insert(wxDateTime pItem, uint uiIndex)
        {
            var arg0 = ReferenceEquals(pItem, null) ? global::System.IntPtr.Zero : pItem.__Instance;
            Internal.Insert_1((__Instance + __PointerAdjustment), arg0, uiIndex);
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public wxDateTime Detach(uint uiIndex)
        {
            var __ret = Internal.Detach_0((__Instance + __PointerAdjustment), uiIndex);
            wxDateTime __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
            else __result0 = wxDateTime.__CreateInstance(__ret);
            return __result0;
        }

        public void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        public void Sort(CMPFUNC_wxObjArraywxDateTimeArray fCmp)
        {
            var arg0 = fCmp == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fCmp);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxDateTime this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                wxDateTime __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxDateTime.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[__ret];
                else __result0 = wxDateTime.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                *(wxDateTime.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = *(wxDateTime.Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class wxAssert_wxHolidayAuthoritiesArray : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint TypeTooBigToBeStoredInwxBaseArrayPtrVoid;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN34wxAssert_wxHolidayAuthoritiesArrayC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxHolidayAuthoritiesArray> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxHolidayAuthoritiesArray>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_wxHolidayAuthoritiesArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_wxHolidayAuthoritiesArray(native.ToPointer(), skipVTables);
        }

        public static wxAssert_wxHolidayAuthoritiesArray __CreateInstance(wxAssert_wxHolidayAuthoritiesArray.Internal native, bool skipVTables = false)
        {
            return new wxAssert_wxHolidayAuthoritiesArray(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_wxHolidayAuthoritiesArray.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_wxHolidayAuthoritiesArray.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_wxHolidayAuthoritiesArray(wxAssert_wxHolidayAuthoritiesArray.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_wxHolidayAuthoritiesArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_wxHolidayAuthoritiesArray()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_wxHolidayAuthoritiesArray(wxAssert_wxHolidayAuthoritiesArray _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_wxHolidayAuthoritiesArray.Internal*) __Instance) = *((wxAssert_wxHolidayAuthoritiesArray.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_wxHolidayAuthoritiesArray __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint TypeTooBigToBeStoredInwxBaseArrayPtrVoid
        {
            get
            {
                return ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayPtrVoid;
            }

            set
            {
                ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayPtrVoid = value;
            }
        }
    }

    public unsafe partial class wxHolidayAuthoritiesArray : wxBaseArrayPtrVoid, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public global::System.IntPtr m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArrayC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArrayC2Em")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArrayC2EmRKP26wxDateTimeHolidayAuthority")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArrayC2EPKP26wxDateTimeHolidayAuthorityS3_")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArrayC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArrayD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK25wxHolidayAuthoritiesArray4ItemEm")]
            internal static extern global::System.IntPtr Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK25wxHolidayAuthoritiesArray4LastEv")]
            internal static extern global::System.IntPtr Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK25wxHolidayAuthoritiesArray5IndexEP26wxDateTimeHolidayAuthorityb")]
            internal static extern int Index_0(global::System.IntPtr instance, global::System.IntPtr lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray3AddEP26wxDateTimeHolidayAuthoritym")]
            internal static extern void Add_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray6InsertEP26wxDateTimeHolidayAuthoritymm")]
            internal static extern void Insert_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray6RemoveEP26wxDateTimeHolidayAuthority")]
            internal static extern void Remove_0(global::System.IntPtr instance, global::System.IntPtr lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray4SortEPFiPP26wxDateTimeHolidayAuthorityS2_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fCmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray6assignEPKP26wxDateTimeHolidayAuthorityS3_")]
            internal static extern void assign_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray6assignEmRKP26wxDateTimeHolidayAuthority")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray4backEv")]
            internal static extern global::System.IntPtr back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray5beginEv")]
            internal static extern global::System.IntPtr begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK25wxHolidayAuthoritiesArray8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray3endEv")]
            internal static extern global::System.IntPtr end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray5eraseEPP26wxDateTimeHolidayAuthorityS2_")]
            internal static extern global::System.IntPtr erase_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray5eraseEPP26wxDateTimeHolidayAuthority")]
            internal static extern global::System.IntPtr erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray5frontEv")]
            internal static extern global::System.IntPtr front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray6insertEPP26wxDateTimeHolidayAuthoritymRKS1_")]
            internal static extern void insert_0(global::System.IntPtr instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray6insertEPP26wxDateTimeHolidayAuthorityRKS1_")]
            internal static extern global::System.IntPtr insert_1(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray6insertEPP26wxDateTimeHolidayAuthorityPKS1_S4_")]
            internal static extern void insert_2(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray9push_backERKP26wxDateTimeHolidayAuthority")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray6rbeginEv")]
            internal static extern void rbegin_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray4rendEv")]
            internal static extern void rend_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray6resizeEmP26wxDateTimeHolidayAuthority")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN25wxHolidayAuthoritiesArray4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK25wxHolidayAuthoritiesArrayixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN25wxHolidayAuthoritiesArray16reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxHolidayAuthoritiesArray.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN25wxHolidayAuthoritiesArray22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN25wxHolidayAuthoritiesArray22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxHolidayAuthoritiesArray.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxHolidayAuthoritiesArray.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public static new wxHolidayAuthoritiesArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxHolidayAuthoritiesArray(native.ToPointer(), skipVTables);
        }

        public static wxHolidayAuthoritiesArray __CreateInstance(wxHolidayAuthoritiesArray.Internal native, bool skipVTables = false)
        {
            return new wxHolidayAuthoritiesArray(native, skipVTables);
        }

        private static void* __CopyValue(wxHolidayAuthoritiesArray.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxHolidayAuthoritiesArray.Internal.cctor_4(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxHolidayAuthoritiesArray(wxHolidayAuthoritiesArray.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxHolidayAuthoritiesArray(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxHolidayAuthoritiesArray()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxHolidayAuthoritiesArray(uint n)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), n);
        }

        public wxHolidayAuthoritiesArray(uint n, wxDateTimeHolidayAuthority v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxHolidayAuthoritiesArray(wxDateTimeHolidayAuthority first, wxDateTimeHolidayAuthority last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxHolidayAuthoritiesArray(wxHolidayAuthoritiesArray _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_4((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxBaseArrayPtrVoid __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxDateTimeHolidayAuthority Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            wxDateTimeHolidayAuthority __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
            else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTimeHolidayAuthority Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            wxDateTimeHolidayAuthority __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
            else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
            return __result0;
        }

        public int Index(wxDateTimeHolidayAuthority lItem, bool bFromEnd)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        public void Add(wxDateTimeHolidayAuthority lItem, uint nInsert)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            Internal.Add_0((__Instance + __PointerAdjustment), arg0, nInsert);
        }

        public void Insert(wxDateTimeHolidayAuthority lItem, uint uiIndex, uint nInsert)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            Internal.Insert_0((__Instance + __PointerAdjustment), arg0, uiIndex, nInsert);
        }

        public void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        public void Remove(wxDateTimeHolidayAuthority lItem)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            Internal.Remove_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Sort(CMPFUNC_wxArraywxHolidayAuthoritiesArray fCmp)
        {
            var arg0 = fCmp == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fCmp);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void assign(wxDateTimeHolidayAuthority first, wxDateTimeHolidayAuthority last)
        {
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void assign(uint n, wxDateTimeHolidayAuthority v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxDateTimeHolidayAuthority back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            wxDateTimeHolidayAuthority __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
            else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTimeHolidayAuthority begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            wxDateTimeHolidayAuthority __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
            else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
            return __result0;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxDateTimeHolidayAuthority end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            wxDateTimeHolidayAuthority __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
            else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTimeHolidayAuthority erase(wxDateTimeHolidayAuthority first, wxDateTimeHolidayAuthority last)
        {
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
            wxDateTimeHolidayAuthority __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
            else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTimeHolidayAuthority erase(wxDateTimeHolidayAuthority it)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
            wxDateTimeHolidayAuthority __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
            else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
            return __result0;
        }

        public wxDateTimeHolidayAuthority front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            wxDateTimeHolidayAuthority __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
            else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
            return __result0;
        }

        public void insert(wxDateTimeHolidayAuthority it, uint n, wxDateTimeHolidayAuthority v)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg2 = v.__Instance;
            Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
        }

        public wxDateTimeHolidayAuthority insert(wxDateTimeHolidayAuthority it, wxDateTimeHolidayAuthority v)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
            wxDateTimeHolidayAuthority __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
            else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
            return __result0;
        }

        public void insert(wxDateTimeHolidayAuthority it, wxDateTimeHolidayAuthority first, wxDateTimeHolidayAuthority last)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            var arg1 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg2 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void push_back(wxDateTimeHolidayAuthority v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxHolidayAuthoritiesArray.reverse_iterator rbegin()
        {
            var __ret = new wxHolidayAuthoritiesArray.reverse_iterator.Internal();
            Internal.rbegin_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxHolidayAuthoritiesArray.reverse_iterator.__CreateInstance(__ret);
        }

        public wxHolidayAuthoritiesArray.reverse_iterator rend()
        {
            var __ret = new wxHolidayAuthoritiesArray.reverse_iterator.Internal();
            Internal.rend_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxHolidayAuthoritiesArray.reverse_iterator.__CreateInstance(__ret);
        }

        public void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        public void resize(uint n, wxDateTimeHolidayAuthority v)
        {
            var arg1 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            Internal.resize_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public void swap(wxHolidayAuthoritiesArray other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxDateTimeHolidayAuthority this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                wxDateTimeHolidayAuthority __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxDateTimeHolidayAuthority.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.NativeToManagedMap[__ret];
                else wxDateTimeHolidayAuthority.NativeToManagedMap[__ret] = __result0 = (wxDateTimeHolidayAuthority) wxDateTimeHolidayAuthority.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                *(wxDateTimeHolidayAuthority.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = *(wxDateTimeHolidayAuthority.Internal*) value.__Instance;
            }
        }
    }

    public unsafe abstract partial class wxDateTimeHolidayAuthority : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxDateTimeHolidayAuthorityC2ERKS_")]
            internal static extern void cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxDateTimeHolidayAuthorityC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxDateTimeHolidayAuthorityD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxDateTimeHolidayAuthority9IsHolidayERK10wxDateTime")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsHoliday_0(global::System.IntPtr dt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxDateTimeHolidayAuthority18GetHolidaysInRangeERK10wxDateTimeS2_R15wxDateTimeArray")]
            internal static extern uint GetHolidaysInRange_0(global::System.IntPtr dtStart, global::System.IntPtr dtEnd, global::System.IntPtr holidays);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxDateTimeHolidayAuthority19ClearAllAuthoritiesEv")]
            internal static extern void ClearAllAuthorities_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxDateTimeHolidayAuthority12AddAuthorityEPS_")]
            internal static extern void AddAuthority_0(global::System.IntPtr auth);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxDateTimeHolidayAuthority> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxDateTimeHolidayAuthority>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxDateTimeHolidayAuthority __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxDateTimeHolidayAuthorityInternal(native.ToPointer(), skipVTables);
        }

        public static wxDateTimeHolidayAuthority __CreateInstance(wxDateTimeHolidayAuthority.Internal native, bool skipVTables = false)
        {
            return new wxDateTimeHolidayAuthorityInternal(native, skipVTables);
        }

        protected wxDateTimeHolidayAuthority(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxDateTimeHolidayAuthority(wxDateTimeHolidayAuthority _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxDateTimeHolidayAuthority");
        }

        protected wxDateTimeHolidayAuthority()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxDateTimeHolidayAuthority");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxDateTimeHolidayAuthority __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        protected abstract bool DoIsHoliday(wxDateTime dt);

        protected abstract uint DoGetHolidaysInRange(wxDateTime dtStart, wxDateTime dtEnd, wxDateTimeArray holidays);

        public static bool IsHoliday(wxDateTime dt)
        {
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dt.__Instance;
            var __ret = Internal.IsHoliday_0(arg0);
            return __ret;
        }

        public static uint GetHolidaysInRange(wxDateTime dtStart, wxDateTime dtEnd, wxDateTimeArray holidays)
        {
            if (ReferenceEquals(dtStart, null))
                throw new global::System.ArgumentNullException("dtStart", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dtStart.__Instance;
            if (ReferenceEquals(dtEnd, null))
                throw new global::System.ArgumentNullException("dtEnd", "Cannot be null because it is a C++ reference (&).");
            var arg1 = dtEnd.__Instance;
            if (ReferenceEquals(holidays, null))
                throw new global::System.ArgumentNullException("holidays", "Cannot be null because it is a C++ reference (&).");
            var arg2 = holidays.__Instance;
            var __ret = Internal.GetHolidaysInRange_0(arg0, arg1, arg2);
            return __ret;
        }

        public static void ClearAllAuthorities()
        {
            Internal.ClearAllAuthorities_0();
        }

        public static void AddAuthority(wxDateTimeHolidayAuthority auth)
        {
            var arg0 = ReferenceEquals(auth, null) ? global::System.IntPtr.Zero : auth.__Instance;
            Internal.AddAuthority_0(arg0);
        }

        #region Virtual table interop

        // virtual ~wxDateTimeHolidayAuthority()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDateTimeHolidayAuthority) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // bool DoIsHoliday(const wxDateTime& dt) const = 0
        private static Delegates.Func_bool_IntPtr_IntPtr _DoIsHoliday_0DelegateInstance;

        private static bool _DoIsHoliday_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr dt)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDateTimeHolidayAuthority) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxDateTime __result0;
            if (dt == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(dt))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[dt];
            else __result0 = wxDateTime.__CreateInstance(dt);
            var __ret = __target.DoIsHoliday(__result0);
            return __ret;
        }

        // size_t DoGetHolidaysInRange(const wxDateTime& dtStart, const wxDateTime& dtEnd, wxDateTimeArray& holidays) const = 0
        private static Delegates.Func_uint_IntPtr_IntPtr_IntPtr_IntPtr _DoGetHolidaysInRange_0DelegateInstance;

        private static uint _DoGetHolidaysInRange_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr dtStart, global::System.IntPtr dtEnd, global::System.IntPtr holidays)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDateTimeHolidayAuthority) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxDateTime __result0;
            if (dtStart == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(dtStart))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[dtStart];
            else __result0 = wxDateTime.__CreateInstance(dtStart);
            wxDateTime __result1;
            if (dtEnd == IntPtr.Zero) __result1 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(dtEnd))
                __result1 = (wxDateTime) wxDateTime.NativeToManagedMap[dtEnd];
            else __result1 = wxDateTime.__CreateInstance(dtEnd);
            wxDateTimeArray __result2;
            if (holidays == IntPtr.Zero) __result2 = null;
            else if (wxDateTimeArray.NativeToManagedMap.ContainsKey(holidays))
                __result2 = (wxDateTimeArray) wxDateTimeArray.NativeToManagedMap[holidays];
            else __result2 = wxDateTimeArray.__CreateInstance(holidays);
            var __ret = __target.DoGetHolidaysInRange(__result0, __result1, __result2);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _DoIsHoliday_0DelegateInstance += _DoIsHoliday_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DoIsHoliday_0DelegateInstance).ToPointer();
                _DoGetHolidaysInRange_0DelegateInstance += _DoGetHolidaysInRange_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_DoGetHolidaysInRange_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxDateTimeWorkDays : wxDateTimeHolidayAuthority, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxDateTimeWorkDaysC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxDateTimeWorkDaysC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxDateTimeWorkDays __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxDateTimeWorkDays(native.ToPointer(), skipVTables);
        }

        public static wxDateTimeWorkDays __CreateInstance(wxDateTimeWorkDays.Internal native, bool skipVTables = false)
        {
            return new wxDateTimeWorkDays(native, skipVTables);
        }

        private static void* __CopyValue(wxDateTimeWorkDays.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxDateTimeWorkDays.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxDateTimeWorkDays(wxDateTimeWorkDays.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxDateTimeWorkDays(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxDateTimeWorkDays()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxDateTimeWorkDays");
        }

        public wxDateTimeWorkDays(wxDateTimeWorkDays _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxDateTimeWorkDays");
        }

        protected override bool DoIsHoliday(wxDateTime dt)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___DoIsHoliday_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dt.__Instance;
            var __ret = ___DoIsHoliday_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected override uint DoGetHolidaysInRange(wxDateTime dtStart, wxDateTime dtEnd, wxDateTimeArray holidays)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___DoGetHolidaysInRange_0Delegate = (Delegates.Func_uint_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(dtStart, null))
                throw new global::System.ArgumentNullException("dtStart", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dtStart.__Instance;
            if (ReferenceEquals(dtEnd, null))
                throw new global::System.ArgumentNullException("dtEnd", "Cannot be null because it is a C++ reference (&).");
            var arg1 = dtEnd.__Instance;
            if (ReferenceEquals(holidays, null))
                throw new global::System.ArgumentNullException("holidays", "Cannot be null because it is a C++ reference (&).");
            var arg2 = holidays.__Instance;
            var __ret = ___DoGetHolidaysInRange_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            return __ret;
        }

        #region Virtual table interop

        // wxDateTimeWorkDays
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDateTimeWorkDays) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // bool DoIsHoliday(const wxDateTime& dt) const wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_IntPtr _DoIsHoliday_0DelegateInstance;

        private static bool _DoIsHoliday_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr dt)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDateTimeWorkDays) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxDateTime __result0;
            if (dt == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(dt))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[dt];
            else __result0 = wxDateTime.__CreateInstance(dt);
            var __ret = __target.DoIsHoliday(__result0);
            return __ret;
        }

        // size_t DoGetHolidaysInRange(const wxDateTime& dtStart, const wxDateTime& dtEnd, wxDateTimeArray& holidays) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_IntPtr_IntPtr_IntPtr _DoGetHolidaysInRange_0DelegateInstance;

        private static uint _DoGetHolidaysInRange_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr dtStart, global::System.IntPtr dtEnd, global::System.IntPtr holidays)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDateTimeWorkDays) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxDateTime __result0;
            if (dtStart == IntPtr.Zero) __result0 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(dtStart))
                __result0 = (wxDateTime) wxDateTime.NativeToManagedMap[dtStart];
            else __result0 = wxDateTime.__CreateInstance(dtStart);
            wxDateTime __result1;
            if (dtEnd == IntPtr.Zero) __result1 = null;
            else if (wxDateTime.NativeToManagedMap.ContainsKey(dtEnd))
                __result1 = (wxDateTime) wxDateTime.NativeToManagedMap[dtEnd];
            else __result1 = wxDateTime.__CreateInstance(dtEnd);
            wxDateTimeArray __result2;
            if (holidays == IntPtr.Zero) __result2 = null;
            else if (wxDateTimeArray.NativeToManagedMap.ContainsKey(holidays))
                __result2 = (wxDateTimeArray) wxDateTimeArray.NativeToManagedMap[holidays];
            else __result2 = wxDateTimeArray.__CreateInstance(holidays);
            var __ret = __target.DoGetHolidaysInRange(__result0, __result1, __result2);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _DoIsHoliday_0DelegateInstance += _DoIsHoliday_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DoIsHoliday_0DelegateInstance).ToPointer();
                _DoGetHolidaysInRange_0DelegateInstance += _DoGetHolidaysInRange_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_DoGetHolidaysInRange_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    internal unsafe partial class wxDateTimeHolidayAuthorityInternal : wxDateTimeHolidayAuthority, IDisposable
    {
        private static void* __CopyValue(wxDateTimeHolidayAuthority.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxDateTimeHolidayAuthority.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxDateTimeHolidayAuthorityInternal(wxDateTimeHolidayAuthority.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxDateTimeHolidayAuthorityInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        protected override bool DoIsHoliday(wxDateTime dt)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___DoIsHoliday_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(dt, null))
                throw new global::System.ArgumentNullException("dt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dt.__Instance;
            var __ret = ___DoIsHoliday_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected override uint DoGetHolidaysInRange(wxDateTime dtStart, wxDateTime dtEnd, wxDateTimeArray holidays)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___DoGetHolidaysInRange_0Delegate = (Delegates.Func_uint_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(dtStart, null))
                throw new global::System.ArgumentNullException("dtStart", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dtStart.__Instance;
            if (ReferenceEquals(dtEnd, null))
                throw new global::System.ArgumentNullException("dtEnd", "Cannot be null because it is a C++ reference (&).");
            var arg1 = dtEnd.__Instance;
            if (ReferenceEquals(holidays, null))
                throw new global::System.ArgumentNullException("holidays", "Cannot be null because it is a C++ reference (&).");
            var arg2 = holidays.__Instance;
            var __ret = ___DoGetHolidaysInRange_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            return __ret;
        }
    }

    public unsafe partial class datetime
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxNextMonthRN10wxDateTime5MonthE")]
            internal static extern void wxNextMonth_0(wxDateTime.Month* m);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxPrevMonthRN10wxDateTime5MonthE")]
            internal static extern void wxPrevMonth_0(wxDateTime.Month* m);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxNextWDayRN10wxDateTime7WeekDayE")]
            internal static extern void wxNextWDay_0(wxDateTime.WeekDay* wd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxPrevWDayRN10wxDateTime7WeekDayE")]
            internal static extern void wxPrevWDay_0(wxDateTime.WeekDay* wd);
        }

        public static void wxNextMonth(wxDateTime.Month* m)
        {
            var arg0 = m;
            Internal.wxNextMonth_0(arg0);
        }

        public static void wxPrevMonth(wxDateTime.Month* m)
        {
            var arg0 = m;
            Internal.wxPrevMonth_0(arg0);
        }

        public static void wxNextWDay(wxDateTime.WeekDay* wd)
        {
            var arg0 = wd;
            Internal.wxNextWDay_0(arg0);
        }

        public static void wxPrevWDay(wxDateTime.WeekDay* wd)
        {
            var arg0 = wd;
            Internal.wxPrevWDay_0(arg0);
        }
    }
}
