//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void wxAssertHandler_t(global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond, global::System.IntPtr msg);

    public unsafe partial class debug
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxSetAssertHandlerPFvRK8wxStringiS1_S1_S1_E")]
            internal static extern global::System.IntPtr wxSetAssertHandler_0(global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z25wxSetDefaultAssertHandlerv")]
            internal static extern void wxSetDefaultAssertHandler_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxDisableAssertsv")]
            internal static extern void wxDisableAsserts_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxOnAssertPKciS0_S0_")]
            internal static extern void wxOnAssert_0(global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxOnAssertPKciS0_S0_S0_")]
            internal static extern void wxOnAssert_1(global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond, global::System.IntPtr msg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxOnAssertPKciS0_S0_PKw")]
            internal static extern void wxOnAssert1_0(global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond, global::System.IntPtr msg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxOnAssertPKwiPKcS0_S0_")]
            internal static extern void wxOnAssert2_0(global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond, global::System.IntPtr msg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxOnAssertRK8wxStringiS1_S1_S1_")]
            internal static extern void wxOnAssert_2(global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond, global::System.IntPtr msg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxOnAssertRK8wxStringiS1_S1_")]
            internal static extern void wxOnAssert_3(global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxOnAssertPKciS0_S0_RK10wxCStrData")]
            internal static extern void wxOnAssert_4(global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond, global::System.IntPtr msg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxOnAssertPKciS0_S0_RK8wxString")]
            internal static extern void wxOnAssert_5(global::System.IntPtr file, int line, global::System.IntPtr func, global::System.IntPtr cond, global::System.IntPtr msg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxAbortv")]
            internal static extern void wxAbort_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z19wxIsDebuggerRunningv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsDebuggerRunning_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxAssertIsEqualii")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxAssertIsEqual_0(int x, int y);
        }

        public static wxAssertHandler_t wxSetAssertHandler(wxAssertHandler_t handler)
        {
            var arg0 = handler == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(handler);
            var __ret = Internal.wxSetAssertHandler_0(arg0);
            var __ptr0 = __ret;
            return (wxAssertHandler_t)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(wxAssertHandler_t));
        }

        public static void wxSetDefaultAssertHandler()
        {
            Internal.wxSetDefaultAssertHandler_0();
        }

        public static void wxDisableAsserts()
        {
            Internal.wxDisableAsserts_0();
        }

        public static void wxOnAssert(string file, int line, string func, string cond)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(file);
            var arg2 = Marshal.StringToHGlobalAnsi(func);
            var arg3 = Marshal.StringToHGlobalAnsi(cond);
            Internal.wxOnAssert_0(arg0, line, arg2, arg3);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
        }

        public static void wxOnAssert(string file, int line, string func, string cond, string msg)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(file);
            var arg2 = Marshal.StringToHGlobalAnsi(func);
            var arg3 = Marshal.StringToHGlobalAnsi(cond);
            var arg4 = Marshal.StringToHGlobalAnsi(msg);
            Internal.wxOnAssert_1(arg0, line, arg2, arg3, arg4);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            Marshal.FreeHGlobal(arg4);
        }

        public static void wxOnAssert1(string file, int line, string func, string cond, string msg)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(file);
            var arg2 = Marshal.StringToHGlobalAnsi(func);
            var arg3 = Marshal.StringToHGlobalAnsi(cond);
            var arg4 = Marshal.StringToHGlobalAnsi(msg);
            Internal.wxOnAssert1_0(arg0, line, arg2, arg3, arg4);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            Marshal.FreeHGlobal(arg4);
        }

        public static void wxOnAssert2(string file, int line, string func, string cond, string msg)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(file);
            var arg2 = Marshal.StringToHGlobalAnsi(func);
            var arg3 = Marshal.StringToHGlobalAnsi(cond);
            var arg4 = Marshal.StringToHGlobalAnsi(msg);
            Internal.wxOnAssert2_0(arg0, line, arg2, arg3, arg4);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            Marshal.FreeHGlobal(arg4);
        }

        public static void wxOnAssert(wxString file, int line, wxString func, wxString cond, wxString msg)
        {
            if (ReferenceEquals(file, null))
                throw new global::System.ArgumentNullException("file", "Cannot be null because it is a C++ reference (&).");
            var arg0 = file.__Instance;
            if (ReferenceEquals(func, null))
                throw new global::System.ArgumentNullException("func", "Cannot be null because it is a C++ reference (&).");
            var arg2 = func.__Instance;
            if (ReferenceEquals(cond, null))
                throw new global::System.ArgumentNullException("cond", "Cannot be null because it is a C++ reference (&).");
            var arg3 = cond.__Instance;
            if (ReferenceEquals(msg, null))
                throw new global::System.ArgumentNullException("msg", "Cannot be null because it is a C++ reference (&).");
            var arg4 = msg.__Instance;
            Internal.wxOnAssert_2(arg0, line, arg2, arg3, arg4);
        }

        public static void wxOnAssert(wxString file, int line, wxString func, wxString cond)
        {
            if (ReferenceEquals(file, null))
                throw new global::System.ArgumentNullException("file", "Cannot be null because it is a C++ reference (&).");
            var arg0 = file.__Instance;
            if (ReferenceEquals(func, null))
                throw new global::System.ArgumentNullException("func", "Cannot be null because it is a C++ reference (&).");
            var arg2 = func.__Instance;
            if (ReferenceEquals(cond, null))
                throw new global::System.ArgumentNullException("cond", "Cannot be null because it is a C++ reference (&).");
            var arg3 = cond.__Instance;
            Internal.wxOnAssert_3(arg0, line, arg2, arg3);
        }

        public static void wxOnAssert(string file, int line, string func, string cond, wxCStrData msg)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(file);
            var arg2 = Marshal.StringToHGlobalAnsi(func);
            var arg3 = Marshal.StringToHGlobalAnsi(cond);
            if (ReferenceEquals(msg, null))
                throw new global::System.ArgumentNullException("msg", "Cannot be null because it is a C++ reference (&).");
            var arg4 = msg.__Instance;
            Internal.wxOnAssert_4(arg0, line, arg2, arg3, arg4);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
        }

        public static void wxOnAssert(string file, int line, string func, string cond, wxString msg)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(file);
            var arg2 = Marshal.StringToHGlobalAnsi(func);
            var arg3 = Marshal.StringToHGlobalAnsi(cond);
            if (ReferenceEquals(msg, null))
                throw new global::System.ArgumentNullException("msg", "Cannot be null because it is a C++ reference (&).");
            var arg4 = msg.__Instance;
            Internal.wxOnAssert_5(arg0, line, arg2, arg3, arg4);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
        }

        public static void wxAbort()
        {
            Internal.wxAbort_0();
        }

        public static bool wxIsDebuggerRunning()
        {
            var __ret = Internal.wxIsDebuggerRunning_0();
            return __ret;
        }

        public static bool wxAssertIsEqual(int x, int y)
        {
            var __ret = Internal.wxAssertIsEqual_0(x, y);
            return __ret;
        }
    }
}
