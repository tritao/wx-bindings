//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum wxDefaultCoord
    {
        wxDefaultCoord = -1
    }

    public enum wxGeometryCentre : uint
    {
        wxCENTRE = 0x1,
        wxCENTER = 1
    }

    public enum wxOrientation : uint
    {
        wxHORIZONTAL = 0x4,
        wxVERTICAL = 0x8,
        wxBOTH = 12,
        wxORIENTATION_MASK = 12
    }

    public enum wxDirection : uint
    {
        wxLEFT = 0x10,
        wxRIGHT = 0x20,
        wxUP = 0x40,
        wxDOWN = 0x80,
        wxTOP = 64,
        wxBOTTOM = 128,
        wxNORTH = 64,
        wxSOUTH = 128,
        wxWEST = 16,
        wxEAST = 32,
        wxALL = 240,
        wxDIRECTION_MASK = 240
    }

    public enum wxAlignment
    {
        wxALIGN_INVALID = -1,
        wxALIGN_NOT = 0,
        wxALIGN_CENTER_HORIZONTAL = 256,
        wxALIGN_CENTRE_HORIZONTAL = 256,
        wxALIGN_LEFT = 0,
        wxALIGN_TOP = 0,
        wxALIGN_RIGHT = 512,
        wxALIGN_BOTTOM = 1024,
        wxALIGN_CENTER_VERTICAL = 2048,
        wxALIGN_CENTRE_VERTICAL = 2048,
        wxALIGN_CENTER = 2304,
        wxALIGN_CENTRE = 2304,
        wxALIGN_MASK = 3840
    }

    public enum wxSizerFlagBits : uint
    {
        wxFIXED_MINSIZE = 0x8000,
        wxRESERVE_SPACE_EVEN_IF_HIDDEN = 0x2,
        wxSIZER_FLAG_BITS_MASK = 0x8002
    }

    public enum wxStretch : uint
    {
        wxSTRETCH_NOT = 0x0,
        wxSHRINK = 0x1000,
        wxGROW = 0x2000,
        wxEXPAND = 8192,
        wxSHAPED = 0x4000,
        wxTILE = 49152,
        wxSTRETCH_MASK = 0x7000
    }

    public enum wxBorder : uint
    {
        wxBORDER_DEFAULT = 0,
        wxBORDER_NONE = 0x200000,
        wxBORDER_STATIC = 0x1000000,
        wxBORDER_SIMPLE = 0x2000000,
        wxBORDER_RAISED = 0x4000000,
        wxBORDER_SUNKEN = 0x8000000,
        wxBORDER_DOUBLE = 0x10000000,
        wxBORDER_THEME = 268435456,
        wxBORDER_MASK = 0x1f200000
    }

    public enum wxBackgroundStyle : uint
    {
        wxBG_STYLE_ERASE = 0,
        wxBG_STYLE_SYSTEM = 1,
        wxBG_STYLE_PAINT = 2,
        wxBG_STYLE_TRANSPARENT = 3,
        wxBG_STYLE_COLOUR = 4,
        wxBG_STYLE_CUSTOM = 2
    }

    public enum wxKeyType : uint
    {
        wxKEY_NONE = 0,
        wxKEY_INTEGER = 1,
        wxKEY_STRING = 2
    }

    public enum wxStandardID
    {
        wxID_AUTO_LOWEST = -1000000,
        wxID_AUTO_HIGHEST = -2000,
        wxID_NONE = -3,
        wxID_SEPARATOR = -2,
        wxID_ANY = -1,
        wxID_LOWEST = 4999,
        wxID_OPEN = 5000,
        wxID_CLOSE = 5001,
        wxID_NEW = 5002,
        wxID_SAVE = 5003,
        wxID_SAVEAS = 5004,
        wxID_REVERT = 5005,
        wxID_EXIT = 5006,
        wxID_UNDO = 5007,
        wxID_REDO = 5008,
        wxID_HELP = 5009,
        wxID_PRINT = 5010,
        wxID_PRINT_SETUP = 5011,
        wxID_PAGE_SETUP = 5012,
        wxID_PREVIEW = 5013,
        wxID_ABOUT = 5014,
        wxID_HELP_CONTENTS = 5015,
        wxID_HELP_INDEX = 5016,
        wxID_HELP_SEARCH = 5017,
        wxID_HELP_COMMANDS = 5018,
        wxID_HELP_PROCEDURES = 5019,
        wxID_HELP_CONTEXT = 5020,
        wxID_CLOSE_ALL = 5021,
        wxID_PREFERENCES = 5022,
        wxID_EDIT = 5030,
        wxID_CUT = 5031,
        wxID_COPY = 5032,
        wxID_PASTE = 5033,
        wxID_CLEAR = 5034,
        wxID_FIND = 5035,
        wxID_DUPLICATE = 5036,
        wxID_SELECTALL = 5037,
        wxID_DELETE = 5038,
        wxID_REPLACE = 5039,
        wxID_REPLACE_ALL = 5040,
        wxID_PROPERTIES = 5041,
        wxID_VIEW_DETAILS = 5042,
        wxID_VIEW_LARGEICONS = 5043,
        wxID_VIEW_SMALLICONS = 5044,
        wxID_VIEW_LIST = 5045,
        wxID_VIEW_SORTDATE = 5046,
        wxID_VIEW_SORTNAME = 5047,
        wxID_VIEW_SORTSIZE = 5048,
        wxID_VIEW_SORTTYPE = 5049,
        wxID_FILE = 5050,
        wxID_FILE1 = 5051,
        wxID_FILE2 = 5052,
        wxID_FILE3 = 5053,
        wxID_FILE4 = 5054,
        wxID_FILE5 = 5055,
        wxID_FILE6 = 5056,
        wxID_FILE7 = 5057,
        wxID_FILE8 = 5058,
        wxID_FILE9 = 5059,
        wxID_OK = 5100,
        wxID_CANCEL = 5101,
        wxID_APPLY = 5102,
        wxID_YES = 5103,
        wxID_NO = 5104,
        wxID_STATIC = 5105,
        wxID_FORWARD = 5106,
        wxID_BACKWARD = 5107,
        wxID_DEFAULT = 5108,
        wxID_MORE = 5109,
        wxID_SETUP = 5110,
        wxID_RESET = 5111,
        wxID_CONTEXT_HELP = 5112,
        wxID_YESTOALL = 5113,
        wxID_NOTOALL = 5114,
        wxID_ABORT = 5115,
        wxID_RETRY = 5116,
        wxID_IGNORE = 5117,
        wxID_ADD = 5118,
        wxID_REMOVE = 5119,
        wxID_UP = 5120,
        wxID_DOWN = 5121,
        wxID_HOME = 5122,
        wxID_REFRESH = 5123,
        wxID_STOP = 5124,
        wxID_INDEX = 5125,
        wxID_BOLD = 5126,
        wxID_ITALIC = 5127,
        wxID_JUSTIFY_CENTER = 5128,
        wxID_JUSTIFY_FILL = 5129,
        wxID_JUSTIFY_RIGHT = 5130,
        wxID_JUSTIFY_LEFT = 5131,
        wxID_UNDERLINE = 5132,
        wxID_INDENT = 5133,
        wxID_UNINDENT = 5134,
        wxID_ZOOM_100 = 5135,
        wxID_ZOOM_FIT = 5136,
        wxID_ZOOM_IN = 5137,
        wxID_ZOOM_OUT = 5138,
        wxID_UNDELETE = 5139,
        wxID_REVERT_TO_SAVED = 5140,
        wxID_CDROM = 5141,
        wxID_CONVERT = 5142,
        wxID_EXECUTE = 5143,
        wxID_FLOPPY = 5144,
        wxID_HARDDISK = 5145,
        wxID_BOTTOM = 5146,
        wxID_FIRST = 5147,
        wxID_LAST = 5148,
        wxID_TOP = 5149,
        wxID_INFO = 5150,
        wxID_JUMP_TO = 5151,
        wxID_NETWORK = 5152,
        wxID_SELECT_COLOR = 5153,
        wxID_SELECT_FONT = 5154,
        wxID_SORT_ASCENDING = 5155,
        wxID_SORT_DESCENDING = 5156,
        wxID_SPELL_CHECK = 5157,
        wxID_STRIKETHROUGH = 5158,
        wxID_SYSTEM_MENU = 5200,
        wxID_CLOSE_FRAME = 5201,
        wxID_MOVE_FRAME = 5202,
        wxID_RESIZE_FRAME = 5203,
        wxID_MAXIMIZE_FRAME = 5204,
        wxID_ICONIZE_FRAME = 5205,
        wxID_RESTORE_FRAME = 5206,
        wxID_MDI_WINDOW_FIRST = 5230,
        wxID_MDI_WINDOW_CASCADE = 5230,
        wxID_MDI_WINDOW_TILE_HORZ = 5231,
        wxID_MDI_WINDOW_TILE_VERT = 5232,
        wxID_MDI_WINDOW_ARRANGE_ICONS = 5233,
        wxID_MDI_WINDOW_PREV = 5234,
        wxID_MDI_WINDOW_NEXT = 5235,
        wxID_MDI_WINDOW_LAST = 5235,
        wxID_OSX_MENU_FIRST = 5250,
        wxID_OSX_HIDE = 5250,
        wxID_OSX_HIDEOTHERS = 5251,
        wxID_OSX_SHOWALL = 5252,
        wxID_OSX_SERVICES = 5253,
        wxID_OSX_MENU_LAST = 5253,
        wxID_FILEDLGG = 5900,
        wxID_FILECTRL = 5950,
        wxID_HIGHEST = 5999
    }

    public enum wxItemKind
    {
        wxITEM_SEPARATOR = -1,
        wxITEM_NORMAL = 0,
        wxITEM_CHECK = 1,
        wxITEM_RADIO = 2,
        wxITEM_DROPDOWN = 3,
        wxITEM_MAX = 4
    }

    public enum wxCheckBoxState : uint
    {
        wxCHK_UNCHECKED = 0,
        wxCHK_CHECKED = 1,
        wxCHK_UNDETERMINED = 2
    }

    public enum wxHitTest : uint
    {
        wxHT_NOWHERE = 0,
        wxHT_SCROLLBAR_FIRST = 0,
        wxHT_SCROLLBAR_ARROW_LINE_1 = 1,
        wxHT_SCROLLBAR_ARROW_LINE_2 = 2,
        wxHT_SCROLLBAR_ARROW_PAGE_1 = 3,
        wxHT_SCROLLBAR_ARROW_PAGE_2 = 4,
        wxHT_SCROLLBAR_THUMB = 5,
        wxHT_SCROLLBAR_BAR_1 = 6,
        wxHT_SCROLLBAR_BAR_2 = 7,
        wxHT_SCROLLBAR_LAST = 8,
        wxHT_WINDOW_OUTSIDE = 9,
        wxHT_WINDOW_INSIDE = 10,
        wxHT_WINDOW_VERT_SCROLLBAR = 11,
        wxHT_WINDOW_HORZ_SCROLLBAR = 12,
        wxHT_WINDOW_CORNER = 13,
        wxHT_MAX = 14
    }

    public enum wxHatchStyle
    {
        wxHATCHSTYLE_INVALID = -1,
        wxHATCHSTYLE_FIRST = 111,
        wxHATCHSTYLE_BDIAGONAL = 111,
        wxHATCHSTYLE_CROSSDIAG = 112,
        wxHATCHSTYLE_FDIAGONAL = 113,
        wxHATCHSTYLE_CROSS = 114,
        wxHATCHSTYLE_HORIZONTAL = 115,
        wxHATCHSTYLE_VERTICAL = 116,
        wxHATCHSTYLE_LAST = 116
    }

    public enum wxDeprecatedGUIConstants : uint
    {
        wxDEFAULT = 70,
        wxDECORATIVE = 71,
        wxROMAN = 72,
        wxSCRIPT = 73,
        wxSWISS = 74,
        wxMODERN = 75,
        wxTELETYPE = 76,
        wxVARIABLE = 80,
        wxFIXED = 81,
        wxNORMAL = 90,
        wxLIGHT = 91,
        wxBOLD = 92,
        wxITALIC = 93,
        wxSLANT = 94,
        wxSOLID = 100,
        wxDOT = 101,
        wxLONG_DASH = 102,
        wxSHORT_DASH = 103,
        wxDOT_DASH = 104,
        wxUSER_DASH = 105,
        wxTRANSPARENT = 106,
        wxSTIPPLE_MASK_OPAQUE = 107,
        wxSTIPPLE_MASK = 108,
        wxSTIPPLE = 110,
        wxBDIAGONAL_HATCH = 111,
        wxCROSSDIAG_HATCH = 112,
        wxFDIAGONAL_HATCH = 113,
        wxCROSS_HATCH = 114,
        wxHORIZONTAL_HATCH = 115,
        wxVERTICAL_HATCH = 116,
        wxFIRST_HATCH = 111,
        wxLAST_HATCH = 116
    }

    public enum wxTOOL : uint
    {
        wxTOOL_TOP = 1,
        wxTOOL_BOTTOM = 2,
        wxTOOL_LEFT = 3,
        wxTOOL_RIGHT = 4
    }

    public enum wxDataFormatId : uint
    {
        wxDF_INVALID = 0,
        wxDF_TEXT = 1,
        wxDF_BITMAP = 2,
        wxDF_METAFILE = 3,
        wxDF_SYLK = 4,
        wxDF_DIF = 5,
        wxDF_TIFF = 6,
        wxDF_OEMTEXT = 7,
        wxDF_DIB = 8,
        wxDF_PALETTE = 9,
        wxDF_PENDATA = 10,
        wxDF_RIFF = 11,
        wxDF_WAVE = 12,
        wxDF_UNICODETEXT = 13,
        wxDF_ENHMETAFILE = 14,
        wxDF_FILENAME = 15,
        wxDF_LOCALE = 16,
        wxDF_PRIVATE = 20,
        wxDF_HTML = 30,
        wxDF_MAX = 31
    }

    public enum wxKeyCode : uint
    {
        WXK_NONE = 0,
        WXK_CONTROL_A = 1,
        WXK_CONTROL_B = 2,
        WXK_CONTROL_C = 3,
        WXK_CONTROL_D = 4,
        WXK_CONTROL_E = 5,
        WXK_CONTROL_F = 6,
        WXK_CONTROL_G = 7,
        WXK_CONTROL_H = 8,
        WXK_CONTROL_I = 9,
        WXK_CONTROL_J = 10,
        WXK_CONTROL_K = 11,
        WXK_CONTROL_L = 12,
        WXK_CONTROL_M = 13,
        WXK_CONTROL_N = 14,
        WXK_CONTROL_O = 15,
        WXK_CONTROL_P = 16,
        WXK_CONTROL_Q = 17,
        WXK_CONTROL_R = 18,
        WXK_CONTROL_S = 19,
        WXK_CONTROL_T = 20,
        WXK_CONTROL_U = 21,
        WXK_CONTROL_V = 22,
        WXK_CONTROL_W = 23,
        WXK_CONTROL_X = 24,
        WXK_CONTROL_Y = 25,
        WXK_CONTROL_Z = 26,
        WXK_BACK = 8,
        WXK_TAB = 9,
        WXK_RETURN = 13,
        WXK_ESCAPE = 27,
        WXK_SPACE = 32,
        WXK_DELETE = 127,
        WXK_START = 300,
        WXK_LBUTTON = 301,
        WXK_RBUTTON = 302,
        WXK_CANCEL = 303,
        WXK_MBUTTON = 304,
        WXK_CLEAR = 305,
        WXK_SHIFT = 306,
        WXK_ALT = 307,
        WXK_CONTROL = 308,
        WXK_MENU = 309,
        WXK_PAUSE = 310,
        WXK_CAPITAL = 311,
        WXK_END = 312,
        WXK_HOME = 313,
        WXK_LEFT = 314,
        WXK_UP = 315,
        WXK_RIGHT = 316,
        WXK_DOWN = 317,
        WXK_SELECT = 318,
        WXK_PRINT = 319,
        WXK_EXECUTE = 320,
        WXK_SNAPSHOT = 321,
        WXK_INSERT = 322,
        WXK_HELP = 323,
        WXK_NUMPAD0 = 324,
        WXK_NUMPAD1 = 325,
        WXK_NUMPAD2 = 326,
        WXK_NUMPAD3 = 327,
        WXK_NUMPAD4 = 328,
        WXK_NUMPAD5 = 329,
        WXK_NUMPAD6 = 330,
        WXK_NUMPAD7 = 331,
        WXK_NUMPAD8 = 332,
        WXK_NUMPAD9 = 333,
        WXK_MULTIPLY = 334,
        WXK_ADD = 335,
        WXK_SEPARATOR = 336,
        WXK_SUBTRACT = 337,
        WXK_DECIMAL = 338,
        WXK_DIVIDE = 339,
        WXK_F1 = 340,
        WXK_F2 = 341,
        WXK_F3 = 342,
        WXK_F4 = 343,
        WXK_F5 = 344,
        WXK_F6 = 345,
        WXK_F7 = 346,
        WXK_F8 = 347,
        WXK_F9 = 348,
        WXK_F10 = 349,
        WXK_F11 = 350,
        WXK_F12 = 351,
        WXK_F13 = 352,
        WXK_F14 = 353,
        WXK_F15 = 354,
        WXK_F16 = 355,
        WXK_F17 = 356,
        WXK_F18 = 357,
        WXK_F19 = 358,
        WXK_F20 = 359,
        WXK_F21 = 360,
        WXK_F22 = 361,
        WXK_F23 = 362,
        WXK_F24 = 363,
        WXK_NUMLOCK = 364,
        WXK_SCROLL = 365,
        WXK_PAGEUP = 366,
        WXK_PAGEDOWN = 367,
        WXK_NUMPAD_SPACE = 368,
        WXK_NUMPAD_TAB = 369,
        WXK_NUMPAD_ENTER = 370,
        WXK_NUMPAD_F1 = 371,
        WXK_NUMPAD_F2 = 372,
        WXK_NUMPAD_F3 = 373,
        WXK_NUMPAD_F4 = 374,
        WXK_NUMPAD_HOME = 375,
        WXK_NUMPAD_LEFT = 376,
        WXK_NUMPAD_UP = 377,
        WXK_NUMPAD_RIGHT = 378,
        WXK_NUMPAD_DOWN = 379,
        WXK_NUMPAD_PAGEUP = 380,
        WXK_NUMPAD_PAGEDOWN = 381,
        WXK_NUMPAD_END = 382,
        WXK_NUMPAD_BEGIN = 383,
        WXK_NUMPAD_INSERT = 384,
        WXK_NUMPAD_DELETE = 385,
        WXK_NUMPAD_EQUAL = 386,
        WXK_NUMPAD_MULTIPLY = 387,
        WXK_NUMPAD_ADD = 388,
        WXK_NUMPAD_SEPARATOR = 389,
        WXK_NUMPAD_SUBTRACT = 390,
        WXK_NUMPAD_DECIMAL = 391,
        WXK_NUMPAD_DIVIDE = 392,
        WXK_WINDOWS_LEFT = 393,
        WXK_WINDOWS_RIGHT = 394,
        WXK_WINDOWS_MENU = 395,
        WXK_RAW_CONTROL = 396,
        WXK_COMMAND = 308,
        WXK_SPECIAL1 = 397,
        WXK_SPECIAL2 = 398,
        WXK_SPECIAL3 = 399,
        WXK_SPECIAL4 = 400,
        WXK_SPECIAL5 = 401,
        WXK_SPECIAL6 = 402,
        WXK_SPECIAL7 = 403,
        WXK_SPECIAL8 = 404,
        WXK_SPECIAL9 = 405,
        WXK_SPECIAL10 = 406,
        WXK_SPECIAL11 = 407,
        WXK_SPECIAL12 = 408,
        WXK_SPECIAL13 = 409,
        WXK_SPECIAL14 = 410,
        WXK_SPECIAL15 = 411,
        WXK_SPECIAL16 = 412,
        WXK_SPECIAL17 = 413,
        WXK_SPECIAL18 = 414,
        WXK_SPECIAL19 = 415,
        WXK_SPECIAL20 = 416,
        WXK_BROWSER_BACK = 417,
        WXK_BROWSER_FORWARD = 418,
        WXK_BROWSER_REFRESH = 419,
        WXK_BROWSER_STOP = 420,
        WXK_BROWSER_SEARCH = 421,
        WXK_BROWSER_FAVORITES = 422,
        WXK_BROWSER_HOME = 423,
        WXK_VOLUME_MUTE = 424,
        WXK_VOLUME_DOWN = 425,
        WXK_VOLUME_UP = 426,
        WXK_MEDIA_NEXT_TRACK = 427,
        WXK_MEDIA_PREV_TRACK = 428,
        WXK_MEDIA_STOP = 429,
        WXK_MEDIA_PLAY_PAUSE = 430,
        WXK_LAUNCH_MAIL = 431,
        WXK_LAUNCH_APP1 = 432,
        WXK_LAUNCH_APP2 = 433
    }

    public enum wxKeyModifier : uint
    {
        wxMOD_NONE = 0x0,
        wxMOD_ALT = 0x1,
        wxMOD_CONTROL = 0x2,
        wxMOD_ALTGR = 3,
        wxMOD_SHIFT = 0x4,
        wxMOD_META = 0x8,
        wxMOD_WIN = 8,
        wxMOD_RAW_CONTROL = 0x10,
        wxMOD_CMD = 2,
        wxMOD_ALL = 0xffff
    }

    public enum wxPaperSize : uint
    {
        wxPAPER_NONE = 0,
        wxPAPER_LETTER = 1,
        wxPAPER_LEGAL = 2,
        wxPAPER_A4 = 3,
        wxPAPER_CSHEET = 4,
        wxPAPER_DSHEET = 5,
        wxPAPER_ESHEET = 6,
        wxPAPER_LETTERSMALL = 7,
        wxPAPER_TABLOID = 8,
        wxPAPER_LEDGER = 9,
        wxPAPER_STATEMENT = 10,
        wxPAPER_EXECUTIVE = 11,
        wxPAPER_A3 = 12,
        wxPAPER_A4SMALL = 13,
        wxPAPER_A5 = 14,
        wxPAPER_B4 = 15,
        wxPAPER_B5 = 16,
        wxPAPER_FOLIO = 17,
        wxPAPER_QUARTO = 18,
        wxPAPER_10X14 = 0x13,
        wxPAPER_11X17 = 20,
        wxPAPER_NOTE = 21,
        wxPAPER_ENV_9 = 22,
        wxPAPER_ENV_10 = 23,
        wxPAPER_ENV_11 = 24,
        wxPAPER_ENV_12 = 25,
        wxPAPER_ENV_14 = 26,
        wxPAPER_ENV_DL = 27,
        wxPAPER_ENV_C5 = 28,
        wxPAPER_ENV_C3 = 29,
        wxPAPER_ENV_C4 = 30,
        wxPAPER_ENV_C6 = 31,
        wxPAPER_ENV_C65 = 32,
        wxPAPER_ENV_B4 = 33,
        wxPAPER_ENV_B5 = 34,
        wxPAPER_ENV_B6 = 35,
        wxPAPER_ENV_ITALY = 36,
        wxPAPER_ENV_MONARCH = 37,
        wxPAPER_ENV_PERSONAL = 38,
        wxPAPER_FANFOLD_US = 39,
        wxPAPER_FANFOLD_STD_GERMAN = 40,
        wxPAPER_FANFOLD_LGL_GERMAN = 41,
        wxPAPER_ISO_B4 = 42,
        wxPAPER_JAPANESE_POSTCARD = 43,
        wxPAPER_9X11 = 44,
        wxPAPER_10X11 = 0x2d,
        wxPAPER_15X11 = 46,
        wxPAPER_ENV_INVITE = 47,
        wxPAPER_LETTER_EXTRA = 48,
        wxPAPER_LEGAL_EXTRA = 49,
        wxPAPER_TABLOID_EXTRA = 50,
        wxPAPER_A4_EXTRA = 51,
        wxPAPER_LETTER_TRANSVERSE = 52,
        wxPAPER_A4_TRANSVERSE = 53,
        wxPAPER_LETTER_EXTRA_TRANSVERSE = 54,
        wxPAPER_A_PLUS = 55,
        wxPAPER_B_PLUS = 56,
        wxPAPER_LETTER_PLUS = 57,
        wxPAPER_A4_PLUS = 58,
        wxPAPER_A5_TRANSVERSE = 59,
        wxPAPER_B5_TRANSVERSE = 60,
        wxPAPER_A3_EXTRA = 61,
        wxPAPER_A5_EXTRA = 62,
        wxPAPER_B5_EXTRA = 63,
        wxPAPER_A2 = 64,
        wxPAPER_A3_TRANSVERSE = 65,
        wxPAPER_A3_EXTRA_TRANSVERSE = 66,
        wxPAPER_DBL_JAPANESE_POSTCARD = 67,
        wxPAPER_A6 = 68,
        wxPAPER_JENV_KAKU2 = 69,
        wxPAPER_JENV_KAKU3 = 70,
        wxPAPER_JENV_CHOU3 = 71,
        wxPAPER_JENV_CHOU4 = 72,
        wxPAPER_LETTER_ROTATED = 73,
        wxPAPER_A3_ROTATED = 74,
        wxPAPER_A4_ROTATED = 75,
        wxPAPER_A5_ROTATED = 76,
        wxPAPER_B4_JIS_ROTATED = 77,
        wxPAPER_B5_JIS_ROTATED = 78,
        wxPAPER_JAPANESE_POSTCARD_ROTATED = 79,
        wxPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 80,
        wxPAPER_A6_ROTATED = 81,
        wxPAPER_JENV_KAKU2_ROTATED = 82,
        wxPAPER_JENV_KAKU3_ROTATED = 83,
        wxPAPER_JENV_CHOU3_ROTATED = 84,
        wxPAPER_JENV_CHOU4_ROTATED = 85,
        wxPAPER_B6_JIS = 86,
        wxPAPER_B6_JIS_ROTATED = 87,
        wxPAPER_12X11 = 88,
        wxPAPER_JENV_YOU4 = 89,
        wxPAPER_JENV_YOU4_ROTATED = 90,
        wxPAPER_P16K = 91,
        wxPAPER_P32K = 92,
        wxPAPER_P32KBIG = 93,
        wxPAPER_PENV_1 = 94,
        wxPAPER_PENV_2 = 95,
        wxPAPER_PENV_3 = 96,
        wxPAPER_PENV_4 = 97,
        wxPAPER_PENV_5 = 98,
        wxPAPER_PENV_6 = 99,
        wxPAPER_PENV_7 = 100,
        wxPAPER_PENV_8 = 101,
        wxPAPER_PENV_9 = 102,
        wxPAPER_PENV_10 = 103,
        wxPAPER_P16K_ROTATED = 104,
        wxPAPER_P32K_ROTATED = 105,
        wxPAPER_P32KBIG_ROTATED = 106,
        wxPAPER_PENV_1_ROTATED = 107,
        wxPAPER_PENV_2_ROTATED = 108,
        wxPAPER_PENV_3_ROTATED = 109,
        wxPAPER_PENV_4_ROTATED = 110,
        wxPAPER_PENV_5_ROTATED = 111,
        wxPAPER_PENV_6_ROTATED = 112,
        wxPAPER_PENV_7_ROTATED = 113,
        wxPAPER_PENV_8_ROTATED = 114,
        wxPAPER_PENV_9_ROTATED = 115,
        wxPAPER_PENV_10_ROTATED = 116,
        wxPAPER_A0 = 117,
        wxPAPER_A1 = 118
    }

    public enum wxPrintOrientation : uint
    {
        wxPORTRAIT = 1,
        wxLANDSCAPE = 2
    }

    public enum wxDuplexMode : uint
    {
        wxDUPLEX_SIMPLEX = 0,
        wxDUPLEX_HORIZONTAL = 1,
        wxDUPLEX_VERTICAL = 2
    }

    public enum wxPrintMode : uint
    {
        wxPRINT_MODE_NONE = 0,
        wxPRINT_MODE_PREVIEW = 1,
        wxPRINT_MODE_FILE = 2,
        wxPRINT_MODE_PRINTER = 3,
        wxPRINT_MODE_STREAM = 4
    }

    public enum wxUpdateUI : uint
    {
        wxUPDATE_UI_NONE = 0x0,
        wxUPDATE_UI_RECURSE = 0x1,
        wxUPDATE_UI_FROMIDLE = 0x2
    }

    public enum wxPRIORITY : uint
    {
        wxPRIORITY_MIN = 0,
        wxPRIORITY_DEFAULT = 50,
        wxPRIORITY_MAX = 100
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int wxSortCompareFunction(global::System.IntPtr elem1, global::System.IntPtr elem2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int wxListIterateFunction(global::System.IntPtr current);

    public class WXHBITMAP { }

    public class WXHCURSOR { }

    public class WXRECTPTR { }

    public class WXPOINTPTR { }

    public class WXHWND { }

    public class WXEVENTREF { }

    public class WXEVENTHANDLERREF { }

    public class WXEVENTHANDLERCALLREF { }

    public class WXAPPLEEVENTREF { }

    public class WXDisplay { }

    public unsafe partial class wxAssert_1058 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint IntMustBeExactly4Bytes;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxAssert_1058C2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_1058> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_1058>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_1058 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_1058(native.ToPointer(), skipVTables);
        }

        public static wxAssert_1058 __CreateInstance(wxAssert_1058.Internal native, bool skipVTables = false)
        {
            return new wxAssert_1058(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_1058.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_1058.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_1058(wxAssert_1058.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_1058(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_1058()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_1058(wxAssert_1058 _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_1058.Internal*) __Instance) = *((wxAssert_1058.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_1058 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint IntMustBeExactly4Bytes
        {
            get
            {
                return ((Internal*) __Instance)->IntMustBeExactly4Bytes;
            }

            set
            {
                ((Internal*) __Instance)->IntMustBeExactly4Bytes = value;
            }
        }
    }

    public unsafe partial class wxAssert_1059 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint SizeTMustBeExactly4Bytes;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxAssert_1059C2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_1059> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_1059>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_1059 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_1059(native.ToPointer(), skipVTables);
        }

        public static wxAssert_1059 __CreateInstance(wxAssert_1059.Internal native, bool skipVTables = false)
        {
            return new wxAssert_1059(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_1059.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_1059.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_1059(wxAssert_1059.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_1059(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_1059()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_1059(wxAssert_1059 _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_1059.Internal*) __Instance) = *((wxAssert_1059.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_1059 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint SizeTMustBeExactly4Bytes
        {
            get
            {
                return ((Internal*) __Instance)->SizeTMustBeExactly4Bytes;
            }

            set
            {
                ((Internal*) __Instance)->SizeTMustBeExactly4Bytes = value;
            }
        }
    }

    public unsafe partial class wxAssert_1060 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint PtrMustBeExactly4Bytes;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxAssert_1060C2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_1060> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_1060>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_1060 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_1060(native.ToPointer(), skipVTables);
        }

        public static wxAssert_1060 __CreateInstance(wxAssert_1060.Internal native, bool skipVTables = false)
        {
            return new wxAssert_1060(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_1060.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_1060.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_1060(wxAssert_1060.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_1060(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_1060()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_1060(wxAssert_1060 _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_1060.Internal*) __Instance) = *((wxAssert_1060.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_1060 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint PtrMustBeExactly4Bytes
        {
            get
            {
                return ((Internal*) __Instance)->PtrMustBeExactly4Bytes;
            }

            set
            {
                ((Internal*) __Instance)->PtrMustBeExactly4Bytes = value;
            }
        }
    }

    public unsafe partial class defs
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxPtrToUIntPKv")]
            internal static extern uint wxPtrToUInt_0(global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxUIntToPtrm")]
            internal static extern global::System.IntPtr wxUIntToPtr_0(uint p);
        }

        public static uint wxPtrToUInt(global::System.IntPtr p)
        {
            var arg0 = p;
            var __ret = Internal.wxPtrToUInt_0(arg0);
            return __ret;
        }

        public static global::System.IntPtr wxUIntToPtr(uint p)
        {
            var __ret = Internal.wxUIntToPtr_0(p);
            return __ret;
        }
    }
}
