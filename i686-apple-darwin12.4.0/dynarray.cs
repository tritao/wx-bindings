//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC(global::System.IntPtr pItem1, global::System.IntPtr pItem2);

    public class _wxArraywxBaseArrayPtrVoid { }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC_wxArraywxArrayShort(short* pItem1, short* pItem2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC_wxArraywxArrayInt(int* pItem1, int* pItem2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC_wxArraywxArrayDouble(double* pItem1, double* pItem2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC_wxArraywxArrayLong(int* pItem1, int* pItem2);

    public class _wxArraywxArrayPtrVoid { }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC_wxArraywxArrayPtrVoid(global::System.IntPtr pItem1, global::System.IntPtr pItem2);

    public unsafe partial class wxBaseArrayPtrVoid : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public global::System.IntPtr m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoidC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoidC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoidD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid5AllocEm")]
            internal static extern void Alloc_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid6ShrinkEv")]
            internal static extern void Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid8SetCountEmPKv")]
            internal static extern void SetCount_0(global::System.IntPtr instance, uint n, global::System.IntPtr defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid5CountEv")]
            internal static extern uint Count_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid4ItemEm")]
            internal static extern global::System.IntPtr Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid5IndexEPKvb")]
            internal static extern int Index_0(global::System.IntPtr instance, global::System.IntPtr lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid5IndexEPKvPFiS1_S1_E")]
            internal static extern int Index_1(global::System.IntPtr instance, global::System.IntPtr lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid14IndexForInsertEPKvPFiS1_S1_E")]
            internal static extern uint IndexForInsert_0(global::System.IntPtr instance, global::System.IntPtr lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid3AddEPKvm")]
            internal static extern void Add_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid3AddEPKvPFiS1_S1_E")]
            internal static extern uint Add_1(global::System.IntPtr instance, global::System.IntPtr lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid6InsertEPKvmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid6RemoveEPKv")]
            internal static extern void Remove_0(global::System.IntPtr instance, global::System.IntPtr lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid4SortEPFiPKvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid6assignEPKPKvS3_")]
            internal static extern void assign_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid6assignEmRKPKv")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid5eraseEPPKvS2_")]
            internal static extern global::System.IntPtr erase_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid5eraseEPPKv")]
            internal static extern global::System.IntPtr erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid6insertEPPKvmRKS1_")]
            internal static extern void insert_0(global::System.IntPtr instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid6insertEPPKvRKS1_")]
            internal static extern global::System.IntPtr insert_1(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid6insertEPPKvPKS1_S4_")]
            internal static extern void insert_2(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid9push_backERKPKv")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid6resizeEmPKv")]
            internal static extern void resize_0(global::System.IntPtr instance, uint count, global::System.IntPtr defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid5beginEv")]
            internal static extern global::System.IntPtr begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid3endEv")]
            internal static extern global::System.IntPtr end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxBaseArrayPtrVoid5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoid4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxBaseArrayPtrVoidixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayPtrVoid> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayPtrVoid>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxBaseArrayPtrVoid __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBaseArrayPtrVoid(native.ToPointer(), skipVTables);
        }

        public static wxBaseArrayPtrVoid __CreateInstance(wxBaseArrayPtrVoid.Internal native, bool skipVTables = false)
        {
            return new wxBaseArrayPtrVoid(native, skipVTables);
        }

        private static void* __CopyValue(wxBaseArrayPtrVoid.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxBaseArrayPtrVoid.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxBaseArrayPtrVoid(wxBaseArrayPtrVoid.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBaseArrayPtrVoid(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxBaseArrayPtrVoid()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxBaseArrayPtrVoid(wxBaseArrayPtrVoid array)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxBaseArrayPtrVoid __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void Alloc(uint n)
        {
            Internal.Alloc_0((__Instance + __PointerAdjustment), n);
        }

        public void Shrink()
        {
            Internal.Shrink_0((__Instance + __PointerAdjustment));
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetCount(uint n, global::System.IntPtr defval)
        {
            var arg1 = defval;
            Internal.SetCount_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Count()
        {
            var __ret = Internal.Count_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected global::System.IntPtr Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        protected int Index(global::System.IntPtr lItem, bool bFromEnd)
        {
            var arg0 = lItem;
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        protected int Index(global::System.IntPtr lItem, CMPFUNC fnCompare)
        {
            var arg0 = lItem;
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Index_1((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected uint IndexForInsert(global::System.IntPtr lItem, CMPFUNC fnCompare)
        {
            var arg0 = lItem;
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.IndexForInsert_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected void Add(global::System.IntPtr lItem, uint nInsert)
        {
            var arg0 = lItem;
            Internal.Add_0((__Instance + __PointerAdjustment), arg0, nInsert);
        }

        protected uint Add(global::System.IntPtr lItem, CMPFUNC fnCompare)
        {
            var arg0 = lItem;
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected void Insert(global::System.IntPtr lItem, uint uiIndex, uint nInsert)
        {
            var arg0 = lItem;
            Internal.Insert_0((__Instance + __PointerAdjustment), arg0, uiIndex, nInsert);
        }

        protected void Remove(global::System.IntPtr lItem)
        {
            var arg0 = lItem;
            Internal.Remove_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        protected void Sort(CMPFUNC fnCompare)
        {
            var arg0 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void assign(global::System.IntPtr first, global::System.IntPtr last)
        {
            var arg0 = first;
            var arg1 = last;
            Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        protected void assign(uint n, global::System.IntPtr v)
        {
            var arg1 = v;
            Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
        }

        protected uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected global::System.IntPtr erase(global::System.IntPtr first, global::System.IntPtr last)
        {
            var arg0 = first;
            var arg1 = last;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected global::System.IntPtr erase(global::System.IntPtr it)
        {
            var arg0 = it;
            var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected void insert(global::System.IntPtr it, uint n, global::System.IntPtr v)
        {
            var arg0 = it;
            var arg2 = v;
            Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
        }

        protected global::System.IntPtr insert(global::System.IntPtr it, global::System.IntPtr v)
        {
            var arg0 = it;
            var arg1 = v;
            var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected void insert(global::System.IntPtr it, global::System.IntPtr first, global::System.IntPtr last)
        {
            var arg0 = it;
            var arg1 = first;
            var arg2 = last;
            Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        protected void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        protected void push_back(global::System.IntPtr v)
        {
            var arg0 = v;
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        protected void resize(uint count, global::System.IntPtr defval)
        {
            var arg1 = defval;
            Internal.resize_0((__Instance + __PointerAdjustment), count, arg1);
        }

        protected global::System.IntPtr begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected global::System.IntPtr end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void swap(wxBaseArrayPtrVoid other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected global::System.IntPtr this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return __ret;
            }

            set
            {
                *(global::System.IntPtr.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = *(global::System.IntPtr.Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class wxBaseArrayChar : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public sbyte* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayCharC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayCharC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayCharD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar5AllocEm")]
            internal static extern void Alloc_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar6ShrinkEv")]
            internal static extern void Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar8SetCountEmc")]
            internal static extern void SetCount_0(global::System.IntPtr instance, uint n, sbyte defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar5CountEv")]
            internal static extern uint Count_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar4ItemEm")]
            internal static extern sbyte* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar5IndexEcb")]
            internal static extern int Index_0(global::System.IntPtr instance, sbyte lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar5IndexEcPFiPKvS1_E")]
            internal static extern int Index_1(global::System.IntPtr instance, sbyte lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar14IndexForInsertEcPFiPKvS1_E")]
            internal static extern uint IndexForInsert_0(global::System.IntPtr instance, sbyte lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar3AddEcm")]
            internal static extern void Add_0(global::System.IntPtr instance, sbyte lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar3AddEcPFiPKvS1_E")]
            internal static extern uint Add_1(global::System.IntPtr instance, sbyte lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar6InsertEcmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, sbyte lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar6RemoveEc")]
            internal static extern void Remove_0(global::System.IntPtr instance, sbyte lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar4SortEPFiPKvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar6assignEPKcS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar6assignEmRKc")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar5eraseEPcS0_")]
            internal static extern sbyte* erase_0(global::System.IntPtr instance, sbyte* first, sbyte* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar5eraseEPc")]
            internal static extern sbyte* erase_1(global::System.IntPtr instance, sbyte* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar6insertEPcmRKc")]
            internal static extern void insert_0(global::System.IntPtr instance, sbyte* it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar6insertEPcRKc")]
            internal static extern sbyte* insert_1(global::System.IntPtr instance, sbyte* it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar6insertEPcPKcS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, sbyte* it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar9push_backERKc")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar6resizeEmc")]
            internal static extern void resize_0(global::System.IntPtr instance, uint count, sbyte defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar5beginEv")]
            internal static extern sbyte* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar3endEv")]
            internal static extern sbyte* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayChar5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayChar4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayCharixEm")]
            internal static extern sbyte* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayChar> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayChar>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxBaseArrayChar __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBaseArrayChar(native.ToPointer(), skipVTables);
        }

        public static wxBaseArrayChar __CreateInstance(wxBaseArrayChar.Internal native, bool skipVTables = false)
        {
            return new wxBaseArrayChar(native, skipVTables);
        }

        private static void* __CopyValue(wxBaseArrayChar.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxBaseArrayChar.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxBaseArrayChar(wxBaseArrayChar.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBaseArrayChar(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxBaseArrayChar()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxBaseArrayChar(wxBaseArrayChar array)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxBaseArrayChar __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void Alloc(uint n)
        {
            Internal.Alloc_0((__Instance + __PointerAdjustment), n);
        }

        public void Shrink()
        {
            Internal.Shrink_0((__Instance + __PointerAdjustment));
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetCount(uint n, sbyte defval)
        {
            var arg1 = defval;
            Internal.SetCount_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Count()
        {
            var __ret = Internal.Count_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected sbyte* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        protected int Index(sbyte lItem, bool bFromEnd)
        {
            var arg0 = lItem;
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        protected int Index(sbyte lItem, CMPFUNC fnCompare)
        {
            var arg0 = lItem;
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Index_1((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected uint IndexForInsert(sbyte lItem, CMPFUNC fnCompare)
        {
            var arg0 = lItem;
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.IndexForInsert_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected void Add(sbyte lItem, uint nInsert)
        {
            var arg0 = lItem;
            Internal.Add_0((__Instance + __PointerAdjustment), arg0, nInsert);
        }

        protected uint Add(sbyte lItem, CMPFUNC fnCompare)
        {
            var arg0 = lItem;
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected void Insert(sbyte lItem, uint uiIndex, uint nInsert)
        {
            var arg0 = lItem;
            Internal.Insert_0((__Instance + __PointerAdjustment), arg0, uiIndex, nInsert);
        }

        protected void Remove(sbyte lItem)
        {
            var arg0 = lItem;
            Internal.Remove_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        protected void Sort(CMPFUNC fnCompare)
        {
            var arg0 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void assign(string first, string last)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(first);
            var arg1 = Marshal.StringToHGlobalAnsi(last);
            Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
        }

        protected void assign(uint n, string v)
        {
            var arg1 = Marshal.StringToHGlobalAnsi(v);
            Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            Marshal.FreeHGlobal(arg1);
        }

        protected uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected sbyte* erase(sbyte* first, sbyte* last)
        {
            var arg0 = first;
            var arg1 = last;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected sbyte* erase(sbyte* it)
        {
            var arg0 = it;
            var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected void insert(sbyte* it, uint n, string v)
        {
            var arg0 = it;
            var arg2 = Marshal.StringToHGlobalAnsi(v);
            Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
            Marshal.FreeHGlobal(arg2);
        }

        protected sbyte* insert(sbyte* it, string v)
        {
            var arg0 = it;
            var arg1 = Marshal.StringToHGlobalAnsi(v);
            var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        protected void insert(sbyte* it, string first, string last)
        {
            var arg0 = it;
            var arg1 = Marshal.StringToHGlobalAnsi(first);
            var arg2 = Marshal.StringToHGlobalAnsi(last);
            Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
        }

        protected void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        protected void push_back(string v)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(v);
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        protected void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        protected void resize(uint count, sbyte defval)
        {
            var arg1 = defval;
            Internal.resize_0((__Instance + __PointerAdjustment), count, arg1);
        }

        protected sbyte* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected sbyte* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void swap(wxBaseArrayChar other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected sbyte this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxBaseArrayShort : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public short* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShortC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShortC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShortD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort5AllocEm")]
            internal static extern void Alloc_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort6ShrinkEv")]
            internal static extern void Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort8SetCountEms")]
            internal static extern void SetCount_0(global::System.IntPtr instance, uint n, short defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort5CountEv")]
            internal static extern uint Count_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort4ItemEm")]
            internal static extern short* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort5IndexEsb")]
            internal static extern int Index_0(global::System.IntPtr instance, short lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort5IndexEsPFiPKvS1_E")]
            internal static extern int Index_1(global::System.IntPtr instance, short lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort14IndexForInsertEsPFiPKvS1_E")]
            internal static extern uint IndexForInsert_0(global::System.IntPtr instance, short lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort3AddEsm")]
            internal static extern void Add_0(global::System.IntPtr instance, short lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort3AddEsPFiPKvS1_E")]
            internal static extern uint Add_1(global::System.IntPtr instance, short lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort6InsertEsmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, short lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort6RemoveEs")]
            internal static extern void Remove_0(global::System.IntPtr instance, short lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort4SortEPFiPKvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort6assignEPKsS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, short* first, short* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort6assignEmRKs")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort5eraseEPsS0_")]
            internal static extern short* erase_0(global::System.IntPtr instance, short* first, short* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort5eraseEPs")]
            internal static extern short* erase_1(global::System.IntPtr instance, short* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort6insertEPsmRKs")]
            internal static extern void insert_0(global::System.IntPtr instance, short* it, uint n, short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort6insertEPsRKs")]
            internal static extern short* insert_1(global::System.IntPtr instance, short* it, short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort6insertEPsPKsS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, short* it, short* first, short* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort9push_backERKs")]
            internal static extern void push_back_0(global::System.IntPtr instance, short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort6resizeEms")]
            internal static extern void resize_0(global::System.IntPtr instance, uint count, short defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort5beginEv")]
            internal static extern short* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort3endEv")]
            internal static extern short* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArrayShort5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShort4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArrayShortixEm")]
            internal static extern short* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayShort> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayShort>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxBaseArrayShort __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBaseArrayShort(native.ToPointer(), skipVTables);
        }

        public static wxBaseArrayShort __CreateInstance(wxBaseArrayShort.Internal native, bool skipVTables = false)
        {
            return new wxBaseArrayShort(native, skipVTables);
        }

        private static void* __CopyValue(wxBaseArrayShort.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxBaseArrayShort.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxBaseArrayShort(wxBaseArrayShort.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBaseArrayShort(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxBaseArrayShort()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxBaseArrayShort(wxBaseArrayShort array)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxBaseArrayShort __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void Alloc(uint n)
        {
            Internal.Alloc_0((__Instance + __PointerAdjustment), n);
        }

        public void Shrink()
        {
            Internal.Shrink_0((__Instance + __PointerAdjustment));
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetCount(uint n, short defval)
        {
            Internal.SetCount_0((__Instance + __PointerAdjustment), n, defval);
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Count()
        {
            var __ret = Internal.Count_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected short* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        protected int Index(short lItem, bool bFromEnd)
        {
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), lItem, bFromEnd);
            return __ret;
        }

        protected int Index(short lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Index_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected uint IndexForInsert(short lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.IndexForInsert_0((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Add(short lItem, uint nInsert)
        {
            Internal.Add_0((__Instance + __PointerAdjustment), lItem, nInsert);
        }

        protected uint Add(short lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Insert(short lItem, uint uiIndex, uint nInsert)
        {
            Internal.Insert_0((__Instance + __PointerAdjustment), lItem, uiIndex, nInsert);
        }

        protected void Remove(short lItem)
        {
            Internal.Remove_0((__Instance + __PointerAdjustment), lItem);
        }

        protected void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        protected void Sort(CMPFUNC fnCompare)
        {
            var arg0 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void assign(short* first, short* last)
        {
            fixed (short* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        protected void assign(uint n, short* v)
        {
            fixed (short* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        protected uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected short* erase(short* first, short* last)
        {
            fixed (short* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected short* erase(short* it)
        {
            fixed (short* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        protected void insert(short* it, uint n, ref short v)
        {
            fixed (short* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr2 = &v)
                {
                    var arg2 = __refParamPtr2;
                    Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
                }
            }
        }

        protected short* insert(short* it, ref short v)
        {
            fixed (short* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &v)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected void insert(short* it, short* first, short* last)
        {
            fixed (short* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &first)
                {
                    var arg1 = __refParamPtr1;
                    fixed (short* __refParamPtr2 = &last)
                    {
                        var arg2 = __refParamPtr2;
                        Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
                    }
                }
            }
        }

        protected void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        protected void push_back(ref short v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var arg0 = __refParamPtr0;
                Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        protected void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        protected void resize(uint count, short defval)
        {
            Internal.resize_0((__Instance + __PointerAdjustment), count, defval);
        }

        protected short* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected short* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void swap(wxBaseArrayShort other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected short this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxBaseArrayInt : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public int* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayIntC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayIntC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayIntD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt5AllocEm")]
            internal static extern void Alloc_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt6ShrinkEv")]
            internal static extern void Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt8SetCountEmi")]
            internal static extern void SetCount_0(global::System.IntPtr instance, uint n, int defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt5CountEv")]
            internal static extern uint Count_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt4ItemEm")]
            internal static extern int* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt5IndexEib")]
            internal static extern int Index_0(global::System.IntPtr instance, int lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt5IndexEiPFiPKvS1_E")]
            internal static extern int Index_1(global::System.IntPtr instance, int lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt14IndexForInsertEiPFiPKvS1_E")]
            internal static extern uint IndexForInsert_0(global::System.IntPtr instance, int lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt3AddEim")]
            internal static extern void Add_0(global::System.IntPtr instance, int lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt3AddEiPFiPKvS1_E")]
            internal static extern uint Add_1(global::System.IntPtr instance, int lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt6InsertEimm")]
            internal static extern void Insert_0(global::System.IntPtr instance, int lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt6RemoveEi")]
            internal static extern void Remove_0(global::System.IntPtr instance, int lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt4SortEPFiPKvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt6assignEPKiS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt6assignEmRKi")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt5eraseEPiS0_")]
            internal static extern int* erase_0(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt5eraseEPi")]
            internal static extern int* erase_1(global::System.IntPtr instance, int* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt6insertEPimRKi")]
            internal static extern void insert_0(global::System.IntPtr instance, int* it, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt6insertEPiRKi")]
            internal static extern int* insert_1(global::System.IntPtr instance, int* it, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt6insertEPiPKiS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, int* it, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt9push_backERKi")]
            internal static extern void push_back_0(global::System.IntPtr instance, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt6resizeEmi")]
            internal static extern void resize_0(global::System.IntPtr instance, uint count, int defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt5beginEv")]
            internal static extern int* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt3endEv")]
            internal static extern int* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxBaseArrayInt5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayInt4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxBaseArrayIntixEm")]
            internal static extern int* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayInt> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayInt>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxBaseArrayInt __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBaseArrayInt(native.ToPointer(), skipVTables);
        }

        public static wxBaseArrayInt __CreateInstance(wxBaseArrayInt.Internal native, bool skipVTables = false)
        {
            return new wxBaseArrayInt(native, skipVTables);
        }

        private static void* __CopyValue(wxBaseArrayInt.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxBaseArrayInt.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxBaseArrayInt(wxBaseArrayInt.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBaseArrayInt(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxBaseArrayInt()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxBaseArrayInt(wxBaseArrayInt array)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxBaseArrayInt __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void Alloc(uint n)
        {
            Internal.Alloc_0((__Instance + __PointerAdjustment), n);
        }

        public void Shrink()
        {
            Internal.Shrink_0((__Instance + __PointerAdjustment));
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetCount(uint n, int defval)
        {
            Internal.SetCount_0((__Instance + __PointerAdjustment), n, defval);
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Count()
        {
            var __ret = Internal.Count_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected int* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        protected int Index(int lItem, bool bFromEnd)
        {
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), lItem, bFromEnd);
            return __ret;
        }

        protected int Index(int lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Index_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected uint IndexForInsert(int lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.IndexForInsert_0((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Add(int lItem, uint nInsert)
        {
            Internal.Add_0((__Instance + __PointerAdjustment), lItem, nInsert);
        }

        protected uint Add(int lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Insert(int lItem, uint uiIndex, uint nInsert)
        {
            Internal.Insert_0((__Instance + __PointerAdjustment), lItem, uiIndex, nInsert);
        }

        protected void Remove(int lItem)
        {
            Internal.Remove_0((__Instance + __PointerAdjustment), lItem);
        }

        protected void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        protected void Sort(CMPFUNC fnCompare)
        {
            var arg0 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void assign(int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        protected void assign(uint n, int* v)
        {
            fixed (int* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        protected uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected int* erase(int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected int* erase(int* it)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        protected void insert(int* it, uint n, ref int v)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr2 = &v)
                {
                    var arg2 = __refParamPtr2;
                    Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
                }
            }
        }

        protected int* insert(int* it, ref int v)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &v)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected void insert(int* it, int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &first)
                {
                    var arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &last)
                    {
                        var arg2 = __refParamPtr2;
                        Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
                    }
                }
            }
        }

        protected void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        protected void push_back(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var arg0 = __refParamPtr0;
                Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        protected void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        protected void resize(uint count, int defval)
        {
            Internal.resize_0((__Instance + __PointerAdjustment), count, defval);
        }

        protected int* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected int* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void swap(wxBaseArrayInt other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected int this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxBaseArrayLong : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public int* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLongC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLongC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLongD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong5AllocEm")]
            internal static extern void Alloc_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong6ShrinkEv")]
            internal static extern void Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong8SetCountEml")]
            internal static extern void SetCount_0(global::System.IntPtr instance, uint n, int defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong5CountEv")]
            internal static extern uint Count_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong4ItemEm")]
            internal static extern int* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong5IndexElb")]
            internal static extern int Index_0(global::System.IntPtr instance, int lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong5IndexElPFiPKvS1_E")]
            internal static extern int Index_1(global::System.IntPtr instance, int lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong14IndexForInsertElPFiPKvS1_E")]
            internal static extern uint IndexForInsert_0(global::System.IntPtr instance, int lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong3AddElm")]
            internal static extern void Add_0(global::System.IntPtr instance, int lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong3AddElPFiPKvS1_E")]
            internal static extern uint Add_1(global::System.IntPtr instance, int lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong6InsertElmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, int lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong6RemoveEl")]
            internal static extern void Remove_0(global::System.IntPtr instance, int lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong4SortEPFiPKvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong6assignEPKlS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong6assignEmRKl")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong5eraseEPlS0_")]
            internal static extern int* erase_0(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong5eraseEPl")]
            internal static extern int* erase_1(global::System.IntPtr instance, int* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong6insertEPlmRKl")]
            internal static extern void insert_0(global::System.IntPtr instance, int* it, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong6insertEPlRKl")]
            internal static extern int* insert_1(global::System.IntPtr instance, int* it, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong6insertEPlPKlS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, int* it, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong9push_backERKl")]
            internal static extern void push_back_0(global::System.IntPtr instance, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong6resizeEml")]
            internal static extern void resize_0(global::System.IntPtr instance, uint count, int defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong5beginEv")]
            internal static extern int* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong3endEv")]
            internal static extern int* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxBaseArrayLong5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLong4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxBaseArrayLongixEm")]
            internal static extern int* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayLong> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayLong>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxBaseArrayLong __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBaseArrayLong(native.ToPointer(), skipVTables);
        }

        public static wxBaseArrayLong __CreateInstance(wxBaseArrayLong.Internal native, bool skipVTables = false)
        {
            return new wxBaseArrayLong(native, skipVTables);
        }

        private static void* __CopyValue(wxBaseArrayLong.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxBaseArrayLong.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxBaseArrayLong(wxBaseArrayLong.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBaseArrayLong(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxBaseArrayLong()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxBaseArrayLong(wxBaseArrayLong array)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxBaseArrayLong __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void Alloc(uint n)
        {
            Internal.Alloc_0((__Instance + __PointerAdjustment), n);
        }

        public void Shrink()
        {
            Internal.Shrink_0((__Instance + __PointerAdjustment));
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetCount(uint n, int defval)
        {
            Internal.SetCount_0((__Instance + __PointerAdjustment), n, defval);
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Count()
        {
            var __ret = Internal.Count_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected int* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        protected int Index(int lItem, bool bFromEnd)
        {
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), lItem, bFromEnd);
            return __ret;
        }

        protected int Index(int lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Index_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected uint IndexForInsert(int lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.IndexForInsert_0((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Add(int lItem, uint nInsert)
        {
            Internal.Add_0((__Instance + __PointerAdjustment), lItem, nInsert);
        }

        protected uint Add(int lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Insert(int lItem, uint uiIndex, uint nInsert)
        {
            Internal.Insert_0((__Instance + __PointerAdjustment), lItem, uiIndex, nInsert);
        }

        protected void Remove(int lItem)
        {
            Internal.Remove_0((__Instance + __PointerAdjustment), lItem);
        }

        protected void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        protected void Sort(CMPFUNC fnCompare)
        {
            var arg0 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void assign(int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        protected void assign(uint n, int* v)
        {
            fixed (int* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        protected uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected int* erase(int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected int* erase(int* it)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        protected void insert(int* it, uint n, ref int v)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr2 = &v)
                {
                    var arg2 = __refParamPtr2;
                    Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
                }
            }
        }

        protected int* insert(int* it, ref int v)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &v)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected void insert(int* it, int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &first)
                {
                    var arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &last)
                    {
                        var arg2 = __refParamPtr2;
                        Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
                    }
                }
            }
        }

        protected void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        protected void push_back(ref int v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var arg0 = __refParamPtr0;
                Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        protected void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        protected void resize(uint count, int defval)
        {
            Internal.resize_0((__Instance + __PointerAdjustment), count, defval);
        }

        protected int* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected int* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void swap(wxBaseArrayLong other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected int this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxBaseArraySizeT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public uint* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeTC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeTC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeTD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT5AllocEm")]
            internal static extern void Alloc_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT6ShrinkEv")]
            internal static extern void Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT8SetCountEmm")]
            internal static extern void SetCount_0(global::System.IntPtr instance, uint n, uint defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT5CountEv")]
            internal static extern uint Count_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT4ItemEm")]
            internal static extern uint* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT5IndexEmb")]
            internal static extern int Index_0(global::System.IntPtr instance, uint lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT5IndexEmPFiPKvS1_E")]
            internal static extern int Index_1(global::System.IntPtr instance, uint lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT14IndexForInsertEmPFiPKvS1_E")]
            internal static extern uint IndexForInsert_0(global::System.IntPtr instance, uint lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT3AddEmm")]
            internal static extern void Add_0(global::System.IntPtr instance, uint lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT3AddEmPFiPKvS1_E")]
            internal static extern uint Add_1(global::System.IntPtr instance, uint lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT6InsertEmmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, uint lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT6RemoveEm")]
            internal static extern void Remove_0(global::System.IntPtr instance, uint lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT4SortEPFiPKvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT6assignEPKmS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, uint* first, uint* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT6assignEmRKm")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, uint* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT5eraseEPmS0_")]
            internal static extern uint* erase_0(global::System.IntPtr instance, uint* first, uint* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT5eraseEPm")]
            internal static extern uint* erase_1(global::System.IntPtr instance, uint* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT6insertEPmmRKm")]
            internal static extern void insert_0(global::System.IntPtr instance, uint* it, uint n, uint* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT6insertEPmRKm")]
            internal static extern uint* insert_1(global::System.IntPtr instance, uint* it, uint* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT6insertEPmPKmS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, uint* it, uint* first, uint* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT9push_backERKm")]
            internal static extern void push_back_0(global::System.IntPtr instance, uint* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT6resizeEmm")]
            internal static extern void resize_0(global::System.IntPtr instance, uint count, uint defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT5beginEv")]
            internal static extern uint* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT3endEv")]
            internal static extern uint* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxBaseArraySizeT5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeT4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxBaseArraySizeTixEm")]
            internal static extern uint* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArraySizeT> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArraySizeT>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxBaseArraySizeT __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBaseArraySizeT(native.ToPointer(), skipVTables);
        }

        public static wxBaseArraySizeT __CreateInstance(wxBaseArraySizeT.Internal native, bool skipVTables = false)
        {
            return new wxBaseArraySizeT(native, skipVTables);
        }

        private static void* __CopyValue(wxBaseArraySizeT.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxBaseArraySizeT.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxBaseArraySizeT(wxBaseArraySizeT.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBaseArraySizeT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxBaseArraySizeT()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxBaseArraySizeT(wxBaseArraySizeT array)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxBaseArraySizeT __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void Alloc(uint n)
        {
            Internal.Alloc_0((__Instance + __PointerAdjustment), n);
        }

        public void Shrink()
        {
            Internal.Shrink_0((__Instance + __PointerAdjustment));
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetCount(uint n, uint defval)
        {
            Internal.SetCount_0((__Instance + __PointerAdjustment), n, defval);
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Count()
        {
            var __ret = Internal.Count_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected uint* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        protected int Index(uint lItem, bool bFromEnd)
        {
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), lItem, bFromEnd);
            return __ret;
        }

        protected int Index(uint lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Index_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected uint IndexForInsert(uint lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.IndexForInsert_0((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Add(uint lItem, uint nInsert)
        {
            Internal.Add_0((__Instance + __PointerAdjustment), lItem, nInsert);
        }

        protected uint Add(uint lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Insert(uint lItem, uint uiIndex, uint nInsert)
        {
            Internal.Insert_0((__Instance + __PointerAdjustment), lItem, uiIndex, nInsert);
        }

        protected void Remove(uint lItem)
        {
            Internal.Remove_0((__Instance + __PointerAdjustment), lItem);
        }

        protected void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        protected void Sort(CMPFUNC fnCompare)
        {
            var arg0 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void assign(uint* first, uint* last)
        {
            fixed (uint* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        protected void assign(uint n, uint* v)
        {
            fixed (uint* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        protected uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected uint* erase(uint* first, uint* last)
        {
            fixed (uint* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected uint* erase(uint* it)
        {
            fixed (uint* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        protected void insert(uint* it, uint n, ref uint v)
        {
            fixed (uint* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr2 = &v)
                {
                    var arg2 = __refParamPtr2;
                    Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
                }
            }
        }

        protected uint* insert(uint* it, ref uint v)
        {
            fixed (uint* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &v)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected void insert(uint* it, uint* first, uint* last)
        {
            fixed (uint* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (uint* __refParamPtr1 = &first)
                {
                    var arg1 = __refParamPtr1;
                    fixed (uint* __refParamPtr2 = &last)
                    {
                        var arg2 = __refParamPtr2;
                        Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
                    }
                }
            }
        }

        protected void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        protected void push_back(ref uint v)
        {
            fixed (uint* __refParamPtr0 = &v)
            {
                var arg0 = __refParamPtr0;
                Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        protected void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        protected void resize(uint count, uint defval)
        {
            Internal.resize_0((__Instance + __PointerAdjustment), count, defval);
        }

        protected uint* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected uint* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void swap(wxBaseArraySizeT other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected uint this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxBaseArrayDouble : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public double* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDoubleC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDoubleC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr array);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDoubleD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble5AllocEm")]
            internal static extern void Alloc_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble6ShrinkEv")]
            internal static extern void Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble8GetCountEv")]
            internal static extern uint GetCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble8SetCountEmd")]
            internal static extern void SetCount_0(global::System.IntPtr instance, uint n, double defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble5CountEv")]
            internal static extern uint Count_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble4ItemEm")]
            internal static extern double* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble5IndexEdb")]
            internal static extern int Index_0(global::System.IntPtr instance, double lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble5IndexEdPFiPKvS1_E")]
            internal static extern int Index_1(global::System.IntPtr instance, double lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble14IndexForInsertEdPFiPKvS1_E")]
            internal static extern uint IndexForInsert_0(global::System.IntPtr instance, double lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble3AddEdm")]
            internal static extern void Add_0(global::System.IntPtr instance, double lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble3AddEdPFiPKvS1_E")]
            internal static extern uint Add_1(global::System.IntPtr instance, double lItem, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble6InsertEdmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, double lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble6RemoveEd")]
            internal static extern void Remove_0(global::System.IntPtr instance, double lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble4SortEPFiPKvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fnCompare);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble6assignEPKdS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, double* first, double* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble6assignEmRKd")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble5eraseEPdS0_")]
            internal static extern double* erase_0(global::System.IntPtr instance, double* first, double* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble5eraseEPd")]
            internal static extern double* erase_1(global::System.IntPtr instance, double* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble6insertEPdmRKd")]
            internal static extern void insert_0(global::System.IntPtr instance, double* it, uint n, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble6insertEPdRKd")]
            internal static extern double* insert_1(global::System.IntPtr instance, double* it, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble6insertEPdPKdS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, double* it, double* first, double* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble9push_backERKd")]
            internal static extern void push_back_0(global::System.IntPtr instance, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble6resizeEmd")]
            internal static extern void resize_0(global::System.IntPtr instance, uint count, double defval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble5beginEv")]
            internal static extern double* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble3endEv")]
            internal static extern double* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxBaseArrayDouble5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDouble4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxBaseArrayDoubleixEm")]
            internal static extern double* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayDouble> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxBaseArrayDouble>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxBaseArrayDouble __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBaseArrayDouble(native.ToPointer(), skipVTables);
        }

        public static wxBaseArrayDouble __CreateInstance(wxBaseArrayDouble.Internal native, bool skipVTables = false)
        {
            return new wxBaseArrayDouble(native, skipVTables);
        }

        private static void* __CopyValue(wxBaseArrayDouble.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxBaseArrayDouble.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxBaseArrayDouble(wxBaseArrayDouble.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBaseArrayDouble(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxBaseArrayDouble()
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxBaseArrayDouble(wxBaseArrayDouble array)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(array, null))
                throw new global::System.ArgumentNullException("array", "Cannot be null because it is a C++ reference (&).");
            var arg0 = array.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxBaseArrayDouble __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public void Alloc(uint n)
        {
            Internal.Alloc_0((__Instance + __PointerAdjustment), n);
        }

        public void Shrink()
        {
            Internal.Shrink_0((__Instance + __PointerAdjustment));
        }

        public uint GetCount()
        {
            var __ret = Internal.GetCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetCount(uint n, double defval)
        {
            Internal.SetCount_0((__Instance + __PointerAdjustment), n, defval);
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Count()
        {
            var __ret = Internal.Count_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected double* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        protected int Index(double lItem, bool bFromEnd)
        {
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), lItem, bFromEnd);
            return __ret;
        }

        protected int Index(double lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Index_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected uint IndexForInsert(double lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.IndexForInsert_0((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Add(double lItem, uint nInsert)
        {
            Internal.Add_0((__Instance + __PointerAdjustment), lItem, nInsert);
        }

        protected uint Add(double lItem, CMPFUNC fnCompare)
        {
            var arg1 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            var __ret = Internal.Add_1((__Instance + __PointerAdjustment), lItem, arg1);
            return __ret;
        }

        protected void Insert(double lItem, uint uiIndex, uint nInsert)
        {
            Internal.Insert_0((__Instance + __PointerAdjustment), lItem, uiIndex, nInsert);
        }

        protected void Remove(double lItem)
        {
            Internal.Remove_0((__Instance + __PointerAdjustment), lItem);
        }

        protected void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        protected void Sort(CMPFUNC fnCompare)
        {
            var arg0 = fnCompare == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fnCompare);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void assign(double* first, double* last)
        {
            fixed (double* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        protected void assign(uint n, double* v)
        {
            fixed (double* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        protected uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected double* erase(double* first, double* last)
        {
            fixed (double* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected double* erase(double* it)
        {
            fixed (double* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        protected void insert(double* it, uint n, ref double v)
        {
            fixed (double* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr2 = &v)
                {
                    var arg2 = __refParamPtr2;
                    Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
                }
            }
        }

        protected double* insert(double* it, ref double v)
        {
            fixed (double* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &v)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        protected void insert(double* it, double* first, double* last)
        {
            fixed (double* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &first)
                {
                    var arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &last)
                    {
                        var arg2 = __refParamPtr2;
                        Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
                    }
                }
            }
        }

        protected void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        protected void push_back(ref double v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var arg0 = __refParamPtr0;
                Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        protected void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        protected void resize(uint count, double defval)
        {
            Internal.resize_0((__Instance + __PointerAdjustment), count, defval);
        }

        protected double* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected double* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void swap(wxBaseArrayDouble other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected double this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxAssert_wxArrayShort : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint TypeTooBigToBeStoredInwxBaseArrayShort;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxAssert_wxArrayShortC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayShort> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayShort>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_wxArrayShort __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayShort(native.ToPointer(), skipVTables);
        }

        public static wxAssert_wxArrayShort __CreateInstance(wxAssert_wxArrayShort.Internal native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayShort(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_wxArrayShort.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_wxArrayShort.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_wxArrayShort(wxAssert_wxArrayShort.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_wxArrayShort(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_wxArrayShort()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_wxArrayShort(wxAssert_wxArrayShort _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_wxArrayShort.Internal*) __Instance) = *((wxAssert_wxArrayShort.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_wxArrayShort __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint TypeTooBigToBeStoredInwxBaseArrayShort
        {
            get
            {
                return ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayShort;
            }

            set
            {
                ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayShort = value;
            }
        }
    }

    public unsafe partial class wxArrayShort : wxBaseArrayShort, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public short* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShortC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShortC2Em")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShortC2EmRKs")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint n, short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShortC2EPKsS1_")]
            internal static extern void ctor_3(global::System.IntPtr instance, short* first, short* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShortC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShortD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxArrayShort4ItemEm")]
            internal static extern short* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxArrayShort4LastEv")]
            internal static extern short* Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxArrayShort5IndexEsb")]
            internal static extern int Index_0(global::System.IntPtr instance, short lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort3AddEsm")]
            internal static extern void Add_0(global::System.IntPtr instance, short lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort6InsertEsmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, short lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort6RemoveEs")]
            internal static extern void Remove_0(global::System.IntPtr instance, short lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort4SortEPFiPsS0_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fCmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort6assignEPKsS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, short* first, short* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort6assignEmRKs")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort4backEv")]
            internal static extern short* back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort5beginEv")]
            internal static extern short* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxArrayShort8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort3endEv")]
            internal static extern short* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort5eraseEPsS0_")]
            internal static extern short* erase_0(global::System.IntPtr instance, short* first, short* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort5eraseEPs")]
            internal static extern short* erase_1(global::System.IntPtr instance, short* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort5frontEv")]
            internal static extern short* front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort6insertEPsmRKs")]
            internal static extern void insert_0(global::System.IntPtr instance, short* it, uint n, short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort6insertEPsRKs")]
            internal static extern short* insert_1(global::System.IntPtr instance, short* it, short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort6insertEPsPKsS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, short* it, short* first, short* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort9push_backERKs")]
            internal static extern void push_back_0(global::System.IntPtr instance, short* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort6rbeginEv")]
            internal static extern void rbegin_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort4rendEv")]
            internal static extern void rend_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort6resizeEms")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, short v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxArrayShort4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxArrayShortixEm")]
            internal static extern short* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public short* m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxArrayShort16reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayShort.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public short* m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxArrayShort22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN12wxArrayShort22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxArrayShort.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayShort.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public static new wxArrayShort __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxArrayShort(native.ToPointer(), skipVTables);
        }

        public static wxArrayShort __CreateInstance(wxArrayShort.Internal native, bool skipVTables = false)
        {
            return new wxArrayShort(native, skipVTables);
        }

        private static void* __CopyValue(wxArrayShort.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxArrayShort.Internal.cctor_4(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxArrayShort(wxArrayShort.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxArrayShort(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxArrayShort()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxArrayShort(uint n)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), n);
        }

        public wxArrayShort(uint n, short* v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (short* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.ctor_2((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        public wxArrayShort(short* first, short* last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (short* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public wxArrayShort(wxArrayShort _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_4((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxBaseArrayShort __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public short* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        public short* Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int Index(short lItem, bool bFromEnd)
        {
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), lItem, bFromEnd);
            return __ret;
        }

        public void Add(short lItem, uint nInsert)
        {
            Internal.Add_0((__Instance + __PointerAdjustment), lItem, nInsert);
        }

        public void Insert(short lItem, uint uiIndex, uint nInsert)
        {
            Internal.Insert_0((__Instance + __PointerAdjustment), lItem, uiIndex, nInsert);
        }

        public void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        public void Remove(short lItem)
        {
            Internal.Remove_0((__Instance + __PointerAdjustment), lItem);
        }

        public void Sort(CMPFUNC_wxArraywxArrayShort fCmp)
        {
            var arg0 = fCmp == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fCmp);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void assign(short* first, short* last)
        {
            fixed (short* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public void assign(uint n, short* v)
        {
            fixed (short* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        public short* back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public short* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public short* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public short* erase(short* first, short* last)
        {
            fixed (short* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        public short* erase(short* it)
        {
            fixed (short* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public short* front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void insert(short* it, uint n, short* v)
        {
            fixed (short* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr2 = &v)
                {
                    var arg2 = __refParamPtr2;
                    Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
                }
            }
        }

        public short* insert(short* it, short* v)
        {
            fixed (short* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &v)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        public void insert(short* it, short* first, short* last)
        {
            fixed (short* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (short* __refParamPtr1 = &first)
                {
                    var arg1 = __refParamPtr1;
                    fixed (short* __refParamPtr2 = &last)
                    {
                        var arg2 = __refParamPtr2;
                        Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
                    }
                }
            }
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void push_back(short* v)
        {
            fixed (short* __refParamPtr0 = &v)
            {
                var arg0 = __refParamPtr0;
                Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public wxArrayShort.reverse_iterator rbegin()
        {
            var __ret = new wxArrayShort.reverse_iterator.Internal();
            Internal.rbegin_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayShort.reverse_iterator.__CreateInstance(__ret);
        }

        public wxArrayShort.reverse_iterator rend()
        {
            var __ret = new wxArrayShort.reverse_iterator.Internal();
            Internal.rend_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayShort.reverse_iterator.__CreateInstance(__ret);
        }

        public void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        public void resize(uint n, short v)
        {
            Internal.resize_0((__Instance + __PointerAdjustment), n, v);
        }

        public void swap(wxArrayShort other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public short this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxAssert_wxArrayInt : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint TypeTooBigToBeStoredInwxBaseArrayInt;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxAssert_wxArrayIntC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayInt> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayInt>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_wxArrayInt __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayInt(native.ToPointer(), skipVTables);
        }

        public static wxAssert_wxArrayInt __CreateInstance(wxAssert_wxArrayInt.Internal native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayInt(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_wxArrayInt.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_wxArrayInt.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_wxArrayInt(wxAssert_wxArrayInt.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_wxArrayInt(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_wxArrayInt()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_wxArrayInt(wxAssert_wxArrayInt _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_wxArrayInt.Internal*) __Instance) = *((wxAssert_wxArrayInt.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_wxArrayInt __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint TypeTooBigToBeStoredInwxBaseArrayInt
        {
            get
            {
                return ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayInt;
            }

            set
            {
                ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayInt = value;
            }
        }
    }

    public unsafe partial class wxArrayInt : wxBaseArrayInt, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public int* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayIntC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayIntC2Em")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayIntC2EmRKi")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayIntC2EPKiS1_")]
            internal static extern void ctor_3(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayIntC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayIntD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxArrayInt4ItemEm")]
            internal static extern int* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxArrayInt4LastEv")]
            internal static extern int* Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxArrayInt5IndexEib")]
            internal static extern int Index_0(global::System.IntPtr instance, int lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt3AddEim")]
            internal static extern void Add_0(global::System.IntPtr instance, int lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt6InsertEimm")]
            internal static extern void Insert_0(global::System.IntPtr instance, int lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt6RemoveEi")]
            internal static extern void Remove_0(global::System.IntPtr instance, int lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt4SortEPFiPiS0_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fCmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt6assignEPKiS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt6assignEmRKi")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt4backEv")]
            internal static extern int* back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt5beginEv")]
            internal static extern int* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxArrayInt8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt3endEv")]
            internal static extern int* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt5eraseEPiS0_")]
            internal static extern int* erase_0(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt5eraseEPi")]
            internal static extern int* erase_1(global::System.IntPtr instance, int* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt5frontEv")]
            internal static extern int* front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt6insertEPimRKi")]
            internal static extern void insert_0(global::System.IntPtr instance, int* it, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt6insertEPiRKi")]
            internal static extern int* insert_1(global::System.IntPtr instance, int* it, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt6insertEPiPKiS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, int* it, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt9push_backERKi")]
            internal static extern void push_back_0(global::System.IntPtr instance, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt6rbeginEv")]
            internal static extern void rbegin_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt4rendEv")]
            internal static extern void rend_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt6resizeEmi")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, int v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxArrayInt4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxArrayIntixEm")]
            internal static extern int* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public int* m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxArrayInt16reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayInt.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public int* m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxArrayInt22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN10wxArrayInt22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxArrayInt.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayInt.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public static new wxArrayInt __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxArrayInt(native.ToPointer(), skipVTables);
        }

        public static wxArrayInt __CreateInstance(wxArrayInt.Internal native, bool skipVTables = false)
        {
            return new wxArrayInt(native, skipVTables);
        }

        private static void* __CopyValue(wxArrayInt.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxArrayInt.Internal.cctor_4(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxArrayInt(wxArrayInt.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxArrayInt(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxArrayInt()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxArrayInt(uint n)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), n);
        }

        public wxArrayInt(uint n, int* v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.ctor_2((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        public wxArrayInt(int* first, int* last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public wxArrayInt(wxArrayInt _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_4((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxBaseArrayInt __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        public int* Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int Index(int lItem, bool bFromEnd)
        {
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), lItem, bFromEnd);
            return __ret;
        }

        public void Add(int lItem, uint nInsert)
        {
            Internal.Add_0((__Instance + __PointerAdjustment), lItem, nInsert);
        }

        public void Insert(int lItem, uint uiIndex, uint nInsert)
        {
            Internal.Insert_0((__Instance + __PointerAdjustment), lItem, uiIndex, nInsert);
        }

        public void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        public void Remove(int lItem)
        {
            Internal.Remove_0((__Instance + __PointerAdjustment), lItem);
        }

        public void Sort(CMPFUNC_wxArraywxArrayInt fCmp)
        {
            var arg0 = fCmp == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fCmp);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void assign(int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public void assign(uint n, int* v)
        {
            fixed (int* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        public int* back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int* erase(int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        public int* erase(int* it)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public int* front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void insert(int* it, uint n, int* v)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr2 = &v)
                {
                    var arg2 = __refParamPtr2;
                    Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
                }
            }
        }

        public int* insert(int* it, int* v)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &v)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        public void insert(int* it, int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &first)
                {
                    var arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &last)
                    {
                        var arg2 = __refParamPtr2;
                        Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
                    }
                }
            }
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void push_back(int* v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var arg0 = __refParamPtr0;
                Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public wxArrayInt.reverse_iterator rbegin()
        {
            var __ret = new wxArrayInt.reverse_iterator.Internal();
            Internal.rbegin_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayInt.reverse_iterator.__CreateInstance(__ret);
        }

        public wxArrayInt.reverse_iterator rend()
        {
            var __ret = new wxArrayInt.reverse_iterator.Internal();
            Internal.rend_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayInt.reverse_iterator.__CreateInstance(__ret);
        }

        public void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        public void resize(uint n, int v)
        {
            Internal.resize_0((__Instance + __PointerAdjustment), n, v);
        }

        public void swap(wxArrayInt other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public int this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxAssert_wxArrayDouble : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint TypeTooBigToBeStoredInwxBaseArrayDouble;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxAssert_wxArrayDoubleC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayDouble> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayDouble>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_wxArrayDouble __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayDouble(native.ToPointer(), skipVTables);
        }

        public static wxAssert_wxArrayDouble __CreateInstance(wxAssert_wxArrayDouble.Internal native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayDouble(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_wxArrayDouble.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_wxArrayDouble.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_wxArrayDouble(wxAssert_wxArrayDouble.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_wxArrayDouble(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_wxArrayDouble()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_wxArrayDouble(wxAssert_wxArrayDouble _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_wxArrayDouble.Internal*) __Instance) = *((wxAssert_wxArrayDouble.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_wxArrayDouble __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint TypeTooBigToBeStoredInwxBaseArrayDouble
        {
            get
            {
                return ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayDouble;
            }

            set
            {
                ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayDouble = value;
            }
        }
    }

    public unsafe partial class wxArrayDouble : wxBaseArrayDouble, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public double* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDoubleC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDoubleC2Em")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDoubleC2EmRKd")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint n, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDoubleC2EPKdS1_")]
            internal static extern void ctor_3(global::System.IntPtr instance, double* first, double* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDoubleC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDoubleD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayDouble4ItemEm")]
            internal static extern double* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayDouble4LastEv")]
            internal static extern double* Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayDouble5IndexEdb")]
            internal static extern int Index_0(global::System.IntPtr instance, double lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble3AddEdm")]
            internal static extern void Add_0(global::System.IntPtr instance, double lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble6InsertEdmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, double lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble6RemoveEd")]
            internal static extern void Remove_0(global::System.IntPtr instance, double lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble4SortEPFiPdS0_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fCmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble6assignEPKdS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, double* first, double* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble6assignEmRKd")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble4backEv")]
            internal static extern double* back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble5beginEv")]
            internal static extern double* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayDouble8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble3endEv")]
            internal static extern double* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble5eraseEPdS0_")]
            internal static extern double* erase_0(global::System.IntPtr instance, double* first, double* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble5eraseEPd")]
            internal static extern double* erase_1(global::System.IntPtr instance, double* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble5frontEv")]
            internal static extern double* front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble6insertEPdmRKd")]
            internal static extern void insert_0(global::System.IntPtr instance, double* it, uint n, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble6insertEPdRKd")]
            internal static extern double* insert_1(global::System.IntPtr instance, double* it, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble6insertEPdPKdS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, double* it, double* first, double* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble9push_backERKd")]
            internal static extern void push_back_0(global::System.IntPtr instance, double* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble6rbeginEv")]
            internal static extern void rbegin_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble4rendEv")]
            internal static extern void rend_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble6resizeEmd")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, double v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxArrayDouble4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxArrayDoubleixEm")]
            internal static extern double* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public double* m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxArrayDouble16reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayDouble.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public double* m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxArrayDouble22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN13wxArrayDouble22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxArrayDouble.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayDouble.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public static new wxArrayDouble __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxArrayDouble(native.ToPointer(), skipVTables);
        }

        public static wxArrayDouble __CreateInstance(wxArrayDouble.Internal native, bool skipVTables = false)
        {
            return new wxArrayDouble(native, skipVTables);
        }

        private static void* __CopyValue(wxArrayDouble.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxArrayDouble.Internal.cctor_4(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxArrayDouble(wxArrayDouble.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxArrayDouble(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxArrayDouble()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxArrayDouble(uint n)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), n);
        }

        public wxArrayDouble(uint n, double* v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (double* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.ctor_2((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        public wxArrayDouble(double* first, double* last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (double* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public wxArrayDouble(wxArrayDouble _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_4((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxBaseArrayDouble __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public double* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        public double* Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int Index(double lItem, bool bFromEnd)
        {
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), lItem, bFromEnd);
            return __ret;
        }

        public void Add(double lItem, uint nInsert)
        {
            Internal.Add_0((__Instance + __PointerAdjustment), lItem, nInsert);
        }

        public void Insert(double lItem, uint uiIndex, uint nInsert)
        {
            Internal.Insert_0((__Instance + __PointerAdjustment), lItem, uiIndex, nInsert);
        }

        public void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        public void Remove(double lItem)
        {
            Internal.Remove_0((__Instance + __PointerAdjustment), lItem);
        }

        public void Sort(CMPFUNC_wxArraywxArrayDouble fCmp)
        {
            var arg0 = fCmp == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fCmp);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void assign(double* first, double* last)
        {
            fixed (double* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public void assign(uint n, double* v)
        {
            fixed (double* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        public double* back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double* erase(double* first, double* last)
        {
            fixed (double* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        public double* erase(double* it)
        {
            fixed (double* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public double* front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void insert(double* it, uint n, double* v)
        {
            fixed (double* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr2 = &v)
                {
                    var arg2 = __refParamPtr2;
                    Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
                }
            }
        }

        public double* insert(double* it, double* v)
        {
            fixed (double* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &v)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        public void insert(double* it, double* first, double* last)
        {
            fixed (double* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (double* __refParamPtr1 = &first)
                {
                    var arg1 = __refParamPtr1;
                    fixed (double* __refParamPtr2 = &last)
                    {
                        var arg2 = __refParamPtr2;
                        Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
                    }
                }
            }
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void push_back(double* v)
        {
            fixed (double* __refParamPtr0 = &v)
            {
                var arg0 = __refParamPtr0;
                Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public wxArrayDouble.reverse_iterator rbegin()
        {
            var __ret = new wxArrayDouble.reverse_iterator.Internal();
            Internal.rbegin_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayDouble.reverse_iterator.__CreateInstance(__ret);
        }

        public wxArrayDouble.reverse_iterator rend()
        {
            var __ret = new wxArrayDouble.reverse_iterator.Internal();
            Internal.rend_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayDouble.reverse_iterator.__CreateInstance(__ret);
        }

        public void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        public void resize(uint n, double v)
        {
            Internal.resize_0((__Instance + __PointerAdjustment), n, v);
        }

        public void swap(wxArrayDouble other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public double this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxAssert_wxArrayLong : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint TypeTooBigToBeStoredInwxBaseArrayLong;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxAssert_wxArrayLongC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayLong> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayLong>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_wxArrayLong __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayLong(native.ToPointer(), skipVTables);
        }

        public static wxAssert_wxArrayLong __CreateInstance(wxAssert_wxArrayLong.Internal native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayLong(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_wxArrayLong.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_wxArrayLong.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_wxArrayLong(wxAssert_wxArrayLong.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_wxArrayLong(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_wxArrayLong()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_wxArrayLong(wxAssert_wxArrayLong _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_wxArrayLong.Internal*) __Instance) = *((wxAssert_wxArrayLong.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_wxArrayLong __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint TypeTooBigToBeStoredInwxBaseArrayLong
        {
            get
            {
                return ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayLong;
            }

            set
            {
                ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayLong = value;
            }
        }
    }

    public unsafe partial class wxArrayLong : wxBaseArrayLong, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public int* m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLongC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLongC2Em")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLongC2EmRKl")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLongC2EPKlS1_")]
            internal static extern void ctor_3(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLongC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLongD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxArrayLong4ItemEm")]
            internal static extern int* Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxArrayLong4LastEv")]
            internal static extern int* Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxArrayLong5IndexElb")]
            internal static extern int Index_0(global::System.IntPtr instance, int lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong3AddElm")]
            internal static extern void Add_0(global::System.IntPtr instance, int lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong6InsertElmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, int lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong6RemoveEl")]
            internal static extern void Remove_0(global::System.IntPtr instance, int lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong4SortEPFiPlS0_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fCmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong6assignEPKlS1_")]
            internal static extern void assign_0(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong6assignEmRKl")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong4backEv")]
            internal static extern int* back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong5beginEv")]
            internal static extern int* begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxArrayLong8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong3endEv")]
            internal static extern int* end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong5eraseEPlS0_")]
            internal static extern int* erase_0(global::System.IntPtr instance, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong5eraseEPl")]
            internal static extern int* erase_1(global::System.IntPtr instance, int* it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong5frontEv")]
            internal static extern int* front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong6insertEPlmRKl")]
            internal static extern void insert_0(global::System.IntPtr instance, int* it, uint n, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong6insertEPlRKl")]
            internal static extern int* insert_1(global::System.IntPtr instance, int* it, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong6insertEPlPKlS2_")]
            internal static extern void insert_2(global::System.IntPtr instance, int* it, int* first, int* last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong9push_backERKl")]
            internal static extern void push_back_0(global::System.IntPtr instance, int* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong6rbeginEv")]
            internal static extern void rbegin_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong4rendEv")]
            internal static extern void rend_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong6resizeEml")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, int v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxArrayLong4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxArrayLongixEm")]
            internal static extern int* OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public int* m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxArrayLong16reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayLong.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public int* m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxArrayLong22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxArrayLong22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxArrayLong.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayLong.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public static new wxArrayLong __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxArrayLong(native.ToPointer(), skipVTables);
        }

        public static wxArrayLong __CreateInstance(wxArrayLong.Internal native, bool skipVTables = false)
        {
            return new wxArrayLong(native, skipVTables);
        }

        private static void* __CopyValue(wxArrayLong.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxArrayLong.Internal.cctor_4(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxArrayLong(wxArrayLong.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxArrayLong(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxArrayLong()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxArrayLong(uint n)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), n);
        }

        public wxArrayLong(uint n, int* v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.ctor_2((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        public wxArrayLong(int* first, int* last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public wxArrayLong(wxArrayLong _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_4((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxBaseArrayLong __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int* Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        public int* Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int Index(int lItem, bool bFromEnd)
        {
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), lItem, bFromEnd);
            return __ret;
        }

        public void Add(int lItem, uint nInsert)
        {
            Internal.Add_0((__Instance + __PointerAdjustment), lItem, nInsert);
        }

        public void Insert(int lItem, uint uiIndex, uint nInsert)
        {
            Internal.Insert_0((__Instance + __PointerAdjustment), lItem, uiIndex, nInsert);
        }

        public void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        public void Remove(int lItem)
        {
            Internal.Remove_0((__Instance + __PointerAdjustment), lItem);
        }

        public void Sort(CMPFUNC_wxArraywxArrayLong fCmp)
        {
            var arg0 = fCmp == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fCmp);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void assign(int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public void assign(uint n, int* v)
        {
            fixed (int* __refParamPtr1 = &v)
            {
                var arg1 = __refParamPtr1;
                Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
            }
        }

        public int* back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int* begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int* end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int* erase(int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &first)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &last)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        public int* erase(int* it)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public int* front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void insert(int* it, uint n, int* v)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr2 = &v)
                {
                    var arg2 = __refParamPtr2;
                    Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
                }
            }
        }

        public int* insert(int* it, int* v)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &v)
                {
                    var arg1 = __refParamPtr1;
                    var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
                    return __ret;
                }
            }
        }

        public void insert(int* it, int* first, int* last)
        {
            fixed (int* __refParamPtr0 = &it)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &first)
                {
                    var arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &last)
                    {
                        var arg2 = __refParamPtr2;
                        Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
                    }
                }
            }
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void push_back(int* v)
        {
            fixed (int* __refParamPtr0 = &v)
            {
                var arg0 = __refParamPtr0;
                Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
            }
        }

        public wxArrayLong.reverse_iterator rbegin()
        {
            var __ret = new wxArrayLong.reverse_iterator.Internal();
            Internal.rbegin_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayLong.reverse_iterator.__CreateInstance(__ret);
        }

        public wxArrayLong.reverse_iterator rend()
        {
            var __ret = new wxArrayLong.reverse_iterator.Internal();
            Internal.rend_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayLong.reverse_iterator.__CreateInstance(__ret);
        }

        public void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        public void resize(uint n, int v)
        {
            Internal.resize_0((__Instance + __PointerAdjustment), n, v);
        }

        public void swap(wxArrayLong other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public int this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = value;
            }
        }
    }

    public unsafe partial class wxAssert_wxArrayPtrVoid : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint TypeTooBigToBeStoredInwxBaseArrayPtrVoid;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxAssert_wxArrayPtrVoidC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayPtrVoid> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxArrayPtrVoid>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_wxArrayPtrVoid __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayPtrVoid(native.ToPointer(), skipVTables);
        }

        public static wxAssert_wxArrayPtrVoid __CreateInstance(wxAssert_wxArrayPtrVoid.Internal native, bool skipVTables = false)
        {
            return new wxAssert_wxArrayPtrVoid(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_wxArrayPtrVoid.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_wxArrayPtrVoid.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_wxArrayPtrVoid(wxAssert_wxArrayPtrVoid.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_wxArrayPtrVoid(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_wxArrayPtrVoid()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_wxArrayPtrVoid(wxAssert_wxArrayPtrVoid _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_wxArrayPtrVoid.Internal*) __Instance) = *((wxAssert_wxArrayPtrVoid.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_wxArrayPtrVoid __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint TypeTooBigToBeStoredInwxBaseArrayPtrVoid
        {
            get
            {
                return ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayPtrVoid;
            }

            set
            {
                ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayPtrVoid = value;
            }
        }
    }

    public unsafe partial class wxArrayPtrVoid : wxBaseArrayPtrVoid, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public global::System.IntPtr m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoidC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoidC2Em")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoidC2EmRKPv")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoidC2EPKPvS2_")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoidC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoidD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxArrayPtrVoid4ItemEm")]
            internal static extern global::System.IntPtr Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxArrayPtrVoid4LastEv")]
            internal static extern global::System.IntPtr Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxArrayPtrVoid5IndexEPvb")]
            internal static extern int Index_0(global::System.IntPtr instance, global::System.IntPtr lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid3AddEPvm")]
            internal static extern void Add_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid6InsertEPvmm")]
            internal static extern void Insert_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid6RemoveEPv")]
            internal static extern void Remove_0(global::System.IntPtr instance, global::System.IntPtr lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid4SortEPFiPPvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fCmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid6assignEPKPvS2_")]
            internal static extern void assign_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid6assignEmRKPv")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid4backEv")]
            internal static extern global::System.IntPtr back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid5beginEv")]
            internal static extern global::System.IntPtr begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxArrayPtrVoid8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid3endEv")]
            internal static extern global::System.IntPtr end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid5eraseEPPvS1_")]
            internal static extern global::System.IntPtr erase_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid5eraseEPPv")]
            internal static extern global::System.IntPtr erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid5frontEv")]
            internal static extern global::System.IntPtr front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid6insertEPPvmRKS0_")]
            internal static extern void insert_0(global::System.IntPtr instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid6insertEPPvRKS0_")]
            internal static extern global::System.IntPtr insert_1(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid6insertEPPvPKS0_S3_")]
            internal static extern void insert_2(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid9push_backERKPv")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid6rbeginEv")]
            internal static extern void rbegin_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid4rendEv")]
            internal static extern void rend_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid6resizeEmPv")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxArrayPtrVoid4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxArrayPtrVoidixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN14wxArrayPtrVoid16reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayPtrVoid.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN14wxArrayPtrVoid22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN14wxArrayPtrVoid22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxArrayPtrVoid.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxArrayPtrVoid.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public static new wxArrayPtrVoid __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxArrayPtrVoid(native.ToPointer(), skipVTables);
        }

        public static wxArrayPtrVoid __CreateInstance(wxArrayPtrVoid.Internal native, bool skipVTables = false)
        {
            return new wxArrayPtrVoid(native, skipVTables);
        }

        private static void* __CopyValue(wxArrayPtrVoid.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxArrayPtrVoid.Internal.cctor_4(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxArrayPtrVoid(wxArrayPtrVoid.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxArrayPtrVoid(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxArrayPtrVoid()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxArrayPtrVoid(uint n)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), n);
        }

        public wxArrayPtrVoid(uint n, global::System.IntPtr v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = v;
            Internal.ctor_2((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxArrayPtrVoid(global::System.IntPtr first, global::System.IntPtr last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = first;
            var arg1 = last;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxArrayPtrVoid(wxArrayPtrVoid _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_4((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxBaseArrayPtrVoid __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public global::System.IntPtr Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            return __ret;
        }

        public global::System.IntPtr Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int Index(global::System.IntPtr lItem, bool bFromEnd)
        {
            var arg0 = lItem;
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        public void Add(global::System.IntPtr lItem, uint nInsert)
        {
            var arg0 = lItem;
            Internal.Add_0((__Instance + __PointerAdjustment), arg0, nInsert);
        }

        public void Insert(global::System.IntPtr lItem, uint uiIndex, uint nInsert)
        {
            var arg0 = lItem;
            Internal.Insert_0((__Instance + __PointerAdjustment), arg0, uiIndex, nInsert);
        }

        public void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        public void Remove(global::System.IntPtr lItem)
        {
            var arg0 = lItem;
            Internal.Remove_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Sort(CMPFUNC_wxArraywxArrayPtrVoid fCmp)
        {
            var arg0 = fCmp == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fCmp);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void assign(global::System.IntPtr first, global::System.IntPtr last)
        {
            var arg0 = first;
            var arg1 = last;
            Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void assign(uint n, global::System.IntPtr v)
        {
            var arg1 = v;
            Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
        }

        public global::System.IntPtr back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public global::System.IntPtr begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public global::System.IntPtr end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public global::System.IntPtr erase(global::System.IntPtr first, global::System.IntPtr last)
        {
            var arg0 = first;
            var arg1 = last;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public global::System.IntPtr erase(global::System.IntPtr it)
        {
            var arg0 = it;
            var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public global::System.IntPtr front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void insert(global::System.IntPtr it, uint n, global::System.IntPtr v)
        {
            var arg0 = it;
            var arg2 = v;
            Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
        }

        public global::System.IntPtr insert(global::System.IntPtr it, global::System.IntPtr v)
        {
            var arg0 = it;
            var arg1 = v;
            var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public void insert(global::System.IntPtr it, global::System.IntPtr first, global::System.IntPtr last)
        {
            var arg0 = it;
            var arg1 = first;
            var arg2 = last;
            Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void push_back(global::System.IntPtr v)
        {
            var arg0 = v;
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxArrayPtrVoid.reverse_iterator rbegin()
        {
            var __ret = new wxArrayPtrVoid.reverse_iterator.Internal();
            Internal.rbegin_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayPtrVoid.reverse_iterator.__CreateInstance(__ret);
        }

        public wxArrayPtrVoid.reverse_iterator rend()
        {
            var __ret = new wxArrayPtrVoid.reverse_iterator.Internal();
            Internal.rend_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxArrayPtrVoid.reverse_iterator.__CreateInstance(__ret);
        }

        public void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        public void resize(uint n, global::System.IntPtr v)
        {
            var arg1 = v;
            Internal.resize_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public void swap(wxArrayPtrVoid other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public global::System.IntPtr this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                return __ret;
            }

            set
            {
                *(global::System.IntPtr.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = *(global::System.IntPtr.Internal*) value.__Instance;
            }
        }
    }
}
