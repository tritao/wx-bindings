//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum wxEventCategory : uint
    {
        wxEVT_CATEGORY_UI = 1,
        wxEVT_CATEGORY_USER_INPUT = 2,
        wxEVT_CATEGORY_SOCKET = 4,
        wxEVT_CATEGORY_TIMER = 8,
        wxEVT_CATEGORY_THREAD = 16,
        wxEVT_CATEGORY_UNKNOWN = 32,
        wxEVT_CATEGORY_CLIPBOARD = 64,
        wxEVT_CATEGORY_NATIVE_EVENTS = 3,
        wxEVT_CATEGORY_ALL = 127
    }

    public enum wxMouseWheelAxis : uint
    {
        wxMOUSE_WHEEL_VERTICAL = 0,
        wxMOUSE_WHEEL_HORIZONTAL = 1
    }

    public enum wxJOYSTICK : uint
    {
        wxJOYSTICK1 = 0,
        wxJOYSTICK2 = 1
    }

    public enum wxJOY_BUTTON
    {
        wxJOY_BUTTON_ANY = -1,
        wxJOY_BUTTON1 = 1,
        wxJOY_BUTTON2 = 2,
        wxJOY_BUTTON3 = 4,
        wxJOY_BUTTON4 = 8
    }

    public enum wxIdleMode : uint
    {
        wxIDLE_PROCESS_ALL = 0,
        wxIDLE_PROCESS_SPECIFIED = 1
    }

    public enum wxUpdateUIMode : uint
    {
        wxUPDATE_UI_PROCESS_ALL = 0,
        wxUPDATE_UI_PROCESS_SPECIFIED = 1
    }

    public enum wxEventPropagation : uint
    {
        wxEVENT_PROPAGATE_NONE = 0,
        wxEVENT_PROPAGATE_MAX = 2147483647
    }

    public enum wxKeyCategoryFlags : uint
    {
        WXK_CATEGORY_ARROW = 1,
        WXK_CATEGORY_PAGING = 2,
        WXK_CATEGORY_JUMP = 4,
        WXK_CATEGORY_TAB = 8,
        WXK_CATEGORY_CUT = 16,
        WXK_CATEGORY_NAVIGATION = 7
    }

    public class _wxArraywxEventTableEntryPointerArray { }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC_wxArraywxEventTableEntryPointerArray(global::System.IntPtr pItem1, global::System.IntPtr pItem2);

    public class _wxArraywxEvtHandlerArray { }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int CMPFUNC_wxArraywxEvtHandlerArray(global::System.IntPtr pItem1, global::System.IntPtr pItem2);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void __AnonymousDelegate0(global::System.IntPtr _0);

    public unsafe partial class wxEventTypeTag
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int m_type;
        }
    }

    public unsafe partial class wxEventFunctorMethod
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_handler;

            [FieldOffset(0)]
            public global::System.IntPtr m_method;
        }
    }

    public unsafe partial class wxEventFunctorFunction
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_handler;
        }
    }

    public unsafe partial class wxEventFunctorFunctor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_handlerAddr;
        }
    }

    public unsafe partial class wxAsyncMethodCallEvent0
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(167772160)]
            public global::System.IntPtr m_object;
        }
    }

    public unsafe partial class wxAsyncMethodCallEvent1
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr m_object;
        }
    }

    public unsafe partial class wxAsyncMethodCallEvent2
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr m_object;
        }
    }

    public unsafe partial class wxAsyncMethodCallEventFunctor
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;
        }
    }

    public unsafe abstract partial class wxEventFunctor : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventFunctorC2ERKS_")]
            internal static extern void cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventFunctorC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventFunctorD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventFunctor> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventFunctor>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxEventFunctor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventFunctorInternal(native.ToPointer(), skipVTables);
        }

        public static wxEventFunctor __CreateInstance(wxEventFunctor.Internal native, bool skipVTables = false)
        {
            return new wxEventFunctorInternal(native, skipVTables);
        }

        protected wxEventFunctor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxEventFunctor(wxEventFunctor _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxEventFunctor");
        }

        protected wxEventFunctor()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxEventFunctor");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxEventFunctor __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract bool IsMatching(wxEventFunctor functor);

        public virtual wxEvtHandler GetEvtHandler()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___GetEvtHandler_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetEvtHandler_0Delegate((__Instance + __PointerAdjustment));
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxEventFunctor()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventFunctor) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // bool IsMatching(const wxEventFunctor& functor) const = 0
        private static Delegates.Func_bool_IntPtr_IntPtr _IsMatching_0DelegateInstance;

        private static bool _IsMatching_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr functor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventFunctor) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEventFunctor __result0;
            if (functor == IntPtr.Zero) __result0 = null;
            else if (wxEventFunctor.NativeToManagedMap.ContainsKey(functor))
                __result0 = (wxEventFunctor) wxEventFunctor.NativeToManagedMap[functor];
            else __result0 = (wxEventFunctor) wxEventFunctor.__CreateInstance(functor, skipVTables: true);
            var __ret = __target.IsMatching(__result0);
            return __ret;
        }

        // wxEvtHandler *GetEvtHandler() const
        private static Delegates.Func_IntPtr_IntPtr _GetEvtHandler_0DelegateInstance;

        private static global::System.IntPtr _GetEvtHandler_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventFunctor) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEvtHandler();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _IsMatching_0DelegateInstance += _IsMatching_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_IsMatching_0DelegateInstance).ToPointer();
                _GetEvtHandler_0DelegateInstance += _GetEvtHandler_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetEvtHandler_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = _Thunks[1];
                    *(void**)(vfptr0 + 16) = _Thunks[2];
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxObjectEventFunctor : wxEventFunctor, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_handler;

            [FieldOffset(8)]
            public global::System.IntPtr m_method;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxObjectEventFunctorC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxObjectEventFunctor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxObjectEventFunctor(native.ToPointer(), skipVTables);
        }

        public static wxObjectEventFunctor __CreateInstance(wxObjectEventFunctor.Internal native, bool skipVTables = false)
        {
            return new wxObjectEventFunctor(native, skipVTables);
        }

        private static void* __CopyValue(wxObjectEventFunctor.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxObjectEventFunctor.Internal.cctor_3(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxObjectEventFunctor(wxObjectEventFunctor.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxObjectEventFunctor(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxObjectEventFunctor(wxObjectEventFunctor _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_3((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxObjectEventFunctor");
        }

        public override bool IsMatching(wxEventFunctor functor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___IsMatching_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(functor, null))
                throw new global::System.ArgumentNullException("functor", "Cannot be null because it is a C++ reference (&).");
            var arg0 = functor.__Instance;
            var __ret = ___IsMatching_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public override wxEvtHandler GetEvtHandler()
        {
            return base.GetEvtHandler();
        }

        #region Virtual table interop

        // wxObjectEventFunctor
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxObjectEventFunctor) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // bool IsMatching(const wxEventFunctor& functor) const wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_IntPtr _IsMatching_0DelegateInstance;

        private static bool _IsMatching_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr functor)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxObjectEventFunctor) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEventFunctor __result0;
            if (functor == IntPtr.Zero) __result0 = null;
            else if (wxEventFunctor.NativeToManagedMap.ContainsKey(functor))
                __result0 = (wxEventFunctor) wxEventFunctor.NativeToManagedMap[functor];
            else __result0 = (wxEventFunctor) wxEventFunctor.__CreateInstance(functor, skipVTables: true);
            var __ret = __target.IsMatching(__result0);
            return __ret;
        }

        // wxEvtHandler *GetEvtHandler() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _GetEvtHandler_0DelegateInstance;

        private static global::System.IntPtr _GetEvtHandler_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxObjectEventFunctor) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEvtHandler();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _IsMatching_0DelegateInstance += _IsMatching_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_IsMatching_0DelegateInstance).ToPointer();
                _GetEvtHandler_0DelegateInstance += _GetEvtHandler_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetEvtHandler_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = _Thunks[1];
                    *(void**)(vfptr0 + 16) = _Thunks[2];
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe abstract partial class wxEvent : wxObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEventC2Eii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int winid, int commandType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEventD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent12SetEventTypeEi")]
            internal static extern void SetEventType_0(global::System.IntPtr instance, int typ);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent12GetEventTypeEv")]
            internal static extern int GetEventType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent14GetEventObjectEv")]
            internal static extern global::System.IntPtr GetEventObject_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent14SetEventObjectEP8wxObject")]
            internal static extern void SetEventObject_0(global::System.IntPtr instance, global::System.IntPtr obj);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent12GetTimestampEv")]
            internal static extern int GetTimestamp_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent12SetTimestampEl")]
            internal static extern void SetTimestamp_0(global::System.IntPtr instance, int ts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent5GetIdEv")]
            internal static extern int GetId_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent5SetIdEi")]
            internal static extern void SetId_0(global::System.IntPtr instance, int Id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent16GetEventUserDataEv")]
            internal static extern global::System.IntPtr GetEventUserData_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent4SkipEb")]
            internal static extern void Skip_0(global::System.IntPtr instance, bool skip);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent10GetSkippedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetSkipped_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent14IsCommandEventEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsCommandEvent_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent15ShouldPropagateEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ShouldPropagate_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent15StopPropagationEv")]
            internal static extern int StopPropagation_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent17ResumePropagationEi")]
            internal static extern void ResumePropagation_0(global::System.IntPtr instance, int propagationLevel);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent17GetPropagatedFromEv")]
            internal static extern global::System.IntPtr GetPropagatedFrom_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent12WasProcessedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool WasProcessed_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent23SetWillBeProcessedAgainEv")]
            internal static extern void SetWillBeProcessedAgain_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent20WillBeProcessedAgainEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool WillBeProcessedAgain_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxEvent19ShouldProcessOnlyInEP12wxEvtHandler")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ShouldProcessOnlyIn_0(global::System.IntPtr instance, global::System.IntPtr h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxEvent24DidntHonourProcessOnlyInEv")]
            internal static extern void DidntHonourProcessOnlyIn_0(global::System.IntPtr instance);
        }

        public static new wxEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventInternal(native.ToPointer(), skipVTables);
        }

        public static wxEvent __CreateInstance(wxEvent.Internal native, bool skipVTables = false)
        {
            return new wxEventInternal(native, skipVTables);
        }

        protected wxEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxEvent(int winid, int commandType)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), winid, commandType);
            SetupVTables(GetType().FullName == "wxSharp.wxEvent");
        }

        protected wxEvent(wxEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxEvent");
        }

        protected override void Dispose(bool disposing)
        {
            wxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void SetEventType(int typ)
        {
            Internal.SetEventType_0((__Instance + __PointerAdjustment), typ);
        }

        public int GetEventType()
        {
            var __ret = Internal.GetEventType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxObject GetEventObject()
        {
            var __ret = Internal.GetEventObject_0((__Instance + __PointerAdjustment));
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public void SetEventObject(wxObject obj)
        {
            var arg0 = ReferenceEquals(obj, null) ? global::System.IntPtr.Zero : obj.__Instance;
            Internal.SetEventObject_0((__Instance + __PointerAdjustment), arg0);
        }

        public int GetTimestamp()
        {
            var __ret = Internal.GetTimestamp_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetTimestamp(int ts)
        {
            Internal.SetTimestamp_0((__Instance + __PointerAdjustment), ts);
        }

        public int GetId()
        {
            var __ret = Internal.GetId_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetId(int Id)
        {
            Internal.SetId_0((__Instance + __PointerAdjustment), Id);
        }

        public wxObject GetEventUserData()
        {
            var __ret = Internal.GetEventUserData_0((__Instance + __PointerAdjustment));
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public void Skip(bool skip)
        {
            Internal.Skip_0((__Instance + __PointerAdjustment), skip);
        }

        public bool GetSkipped()
        {
            var __ret = Internal.GetSkipped_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public abstract wxEvent Clone();

        public virtual wxEventCategory GetEventCategory()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___GetEventCategory_0Delegate = (Delegates.Func_wxEventCategory_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_wxEventCategory_IntPtr));
            var __ret = ___GetEventCategory_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsCommandEvent()
        {
            var __ret = Internal.IsCommandEvent_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool ShouldPropagate()
        {
            var __ret = Internal.ShouldPropagate_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int StopPropagation()
        {
            var __ret = Internal.StopPropagation_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void ResumePropagation(int propagationLevel)
        {
            Internal.ResumePropagation_0((__Instance + __PointerAdjustment), propagationLevel);
        }

        public wxEvtHandler GetPropagatedFrom()
        {
            var __ret = Internal.GetPropagatedFrom_0((__Instance + __PointerAdjustment));
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public bool WasProcessed()
        {
            var __ret = Internal.WasProcessed_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetWillBeProcessedAgain()
        {
            Internal.SetWillBeProcessedAgain_0((__Instance + __PointerAdjustment));
        }

        public bool WillBeProcessedAgain()
        {
            var __ret = Internal.WillBeProcessedAgain_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool ShouldProcessOnlyIn(wxEvtHandler h)
        {
            var arg0 = ReferenceEquals(h, null) ? global::System.IntPtr.Zero : h.__Instance;
            var __ret = Internal.ShouldProcessOnlyIn_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void DidntHonourProcessOnlyIn()
        {
            Internal.DidntHonourProcessOnlyIn_0((__Instance + __PointerAdjustment));
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN7wxEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected wxObject m_eventObject
        {
            get
            {
                wxObject __result0;
                if (((Internal*) __Instance)->m_eventObject == IntPtr.Zero) __result0 = null;
                else if (wxObject.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_eventObject))
                    __result0 = (wxObject) wxObject.NativeToManagedMap[((Internal*) __Instance)->m_eventObject];
                else wxObject.NativeToManagedMap[((Internal*) __Instance)->m_eventObject] = __result0 = (wxObject) wxObject.__CreateInstance(((Internal*) __Instance)->m_eventObject);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_eventObject = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected int m_eventType
        {
            get
            {
                return ((Internal*) __Instance)->m_eventType;
            }

            set
            {
                ((Internal*) __Instance)->m_eventType = value;
            }
        }

        protected int m_timeStamp
        {
            get
            {
                return ((Internal*) __Instance)->m_timeStamp;
            }

            set
            {
                ((Internal*) __Instance)->m_timeStamp = value;
            }
        }

        protected int m_id
        {
            get
            {
                return ((Internal*) __Instance)->m_id;
            }

            set
            {
                ((Internal*) __Instance)->m_id = value;
            }
        }

        public wxObject m_callbackUserData
        {
            get
            {
                wxObject __result0;
                if (((Internal*) __Instance)->m_callbackUserData == IntPtr.Zero) __result0 = null;
                else if (wxObject.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_callbackUserData))
                    __result0 = (wxObject) wxObject.NativeToManagedMap[((Internal*) __Instance)->m_callbackUserData];
                else wxObject.NativeToManagedMap[((Internal*) __Instance)->m_callbackUserData] = __result0 = (wxObject) wxObject.__CreateInstance(((Internal*) __Instance)->m_callbackUserData);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_callbackUserData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected int m_propagationLevel
        {
            get
            {
                return ((Internal*) __Instance)->m_propagationLevel;
            }

            set
            {
                ((Internal*) __Instance)->m_propagationLevel = value;
            }
        }

        protected wxEvtHandler m_propagatedFrom
        {
            get
            {
                wxEvtHandler __result0;
                if (((Internal*) __Instance)->m_propagatedFrom == IntPtr.Zero) __result0 = null;
                else if (wxEvtHandler.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_propagatedFrom))
                    __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[((Internal*) __Instance)->m_propagatedFrom];
                else wxEvtHandler.NativeToManagedMap[((Internal*) __Instance)->m_propagatedFrom] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(((Internal*) __Instance)->m_propagatedFrom);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_propagatedFrom = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_skipped
        {
            get
            {
                return ((Internal*) __Instance)->m_skipped != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_skipped = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_isCommandEvent
        {
            get
            {
                return ((Internal*) __Instance)->m_isCommandEvent != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_isCommandEvent = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_wasProcessed
        {
            get
            {
                return ((Internal*) __Instance)->m_wasProcessed != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_wasProcessed = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_willBeProcessedAgain
        {
            get
            {
                return ((Internal*) __Instance)->m_willBeProcessedAgain != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_willBeProcessedAgain = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const = 0
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxPropagationDisabler : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_event;

            [FieldOffset(4)]
            public int m_propagationLevelOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxPropagationDisablerC2ER7wxEvent")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxPropagationDisablerD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPropagationDisabler> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPropagationDisabler>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxPropagationDisabler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPropagationDisabler(native.ToPointer(), skipVTables);
        }

        public static wxPropagationDisabler __CreateInstance(wxPropagationDisabler.Internal native, bool skipVTables = false)
        {
            return new wxPropagationDisabler(native, skipVTables);
        }

        private static void* __CopyValue(wxPropagationDisabler.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxPropagationDisabler.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxPropagationDisabler(wxPropagationDisabler.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPropagationDisabler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxPropagationDisabler(wxEvent @event)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxPropagationDisabler __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxPropagateOnce : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_event;

            [FieldOffset(4)]
            public global::System.IntPtr m_propagatedFromOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxPropagateOnceC2ER7wxEventP12wxEvtHandler")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr @event, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxPropagateOnceD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPropagateOnce> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPropagateOnce>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxPropagateOnce __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPropagateOnce(native.ToPointer(), skipVTables);
        }

        public static wxPropagateOnce __CreateInstance(wxPropagateOnce.Internal native, bool skipVTables = false)
        {
            return new wxPropagateOnce(native, skipVTables);
        }

        private static void* __CopyValue(wxPropagateOnce.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxPropagateOnce.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxPropagateOnce(wxPropagateOnce.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPropagateOnce(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxPropagateOnce(wxEvent @event, wxEvtHandler handler)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var arg1 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxPropagateOnce __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxEventProcessInHandlerOnly : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_event;

            [FieldOffset(4)]
            public global::System.IntPtr m_handlerToProcessOnlyInOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN27wxEventProcessInHandlerOnlyC2ER7wxEventP12wxEvtHandler")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr @event, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN27wxEventProcessInHandlerOnlyD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventProcessInHandlerOnly> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventProcessInHandlerOnly>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxEventProcessInHandlerOnly __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventProcessInHandlerOnly(native.ToPointer(), skipVTables);
        }

        public static wxEventProcessInHandlerOnly __CreateInstance(wxEventProcessInHandlerOnly.Internal native, bool skipVTables = false)
        {
            return new wxEventProcessInHandlerOnly(native, skipVTables);
        }

        private static void* __CopyValue(wxEventProcessInHandlerOnly.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxEventProcessInHandlerOnly.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxEventProcessInHandlerOnly(wxEventProcessInHandlerOnly.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventProcessInHandlerOnly(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxEventProcessInHandlerOnly(wxEvent @event, wxEvtHandler handler)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var arg1 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxEventProcessInHandlerOnly __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxEventBasicPayloadMixin : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxEventBasicPayloadMixinC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxEventBasicPayloadMixinC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxEventBasicPayloadMixinD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxEventBasicPayloadMixin9SetStringERK8wxString")]
            internal static extern void SetString_0(global::System.IntPtr instance, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK24wxEventBasicPayloadMixin9GetStringEv")]
            internal static extern global::System.IntPtr GetString_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxEventBasicPayloadMixin6SetIntEi")]
            internal static extern void SetInt_0(global::System.IntPtr instance, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK24wxEventBasicPayloadMixin6GetIntEv")]
            internal static extern int GetInt_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxEventBasicPayloadMixin12SetExtraLongEl")]
            internal static extern void SetExtraLong_0(global::System.IntPtr instance, int extraLong);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK24wxEventBasicPayloadMixin12GetExtraLongEv")]
            internal static extern int GetExtraLong_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventBasicPayloadMixin> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventBasicPayloadMixin>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxEventBasicPayloadMixin __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventBasicPayloadMixin(native.ToPointer(), skipVTables);
        }

        public static wxEventBasicPayloadMixin __CreateInstance(wxEventBasicPayloadMixin.Internal native, bool skipVTables = false)
        {
            return new wxEventBasicPayloadMixin(native, skipVTables);
        }

        private static void* __CopyValue(wxEventBasicPayloadMixin.Internal native)
        {
            var ret = Marshal.AllocHGlobal(28);
            wxEventBasicPayloadMixin.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxEventBasicPayloadMixin(wxEventBasicPayloadMixin.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventBasicPayloadMixin(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxEventBasicPayloadMixin()
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxEventBasicPayloadMixin(wxEventBasicPayloadMixin _0)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxEventBasicPayloadMixin __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void SetString(wxString s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            Internal.SetString_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxString GetString()
        {
            var __ret = Internal.GetString_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public void SetInt(int i)
        {
            Internal.SetInt_0((__Instance + __PointerAdjustment), i);
        }

        public int GetInt()
        {
            var __ret = Internal.GetInt_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetExtraLong(int extraLong)
        {
            Internal.SetExtraLong_0((__Instance + __PointerAdjustment), extraLong);
        }

        public int GetExtraLong()
        {
            var __ret = Internal.GetExtraLong_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected wxString m_cmdString
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_cmdString);
            }

            set
            {
                ((Internal*) __Instance)->m_cmdString = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        protected int m_commandInt
        {
            get
            {
                return ((Internal*) __Instance)->m_commandInt;
            }

            set
            {
                ((Internal*) __Instance)->m_commandInt = value;
            }
        }

        protected int m_extraLong
        {
            get
            {
                return ((Internal*) __Instance)->m_extraLong;
            }

            set
            {
                ((Internal*) __Instance)->m_extraLong = value;
            }
        }
    }

    public unsafe partial class wxEventAnyPayloadMixin : wxEventBasicPayloadMixin, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(32)]
            public wxAny.Internal m_payload;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxEventAnyPayloadMixinC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxEventAnyPayloadMixinC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxEventAnyPayloadMixinD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public static new wxEventAnyPayloadMixin __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventAnyPayloadMixin(native.ToPointer(), skipVTables);
        }

        public static wxEventAnyPayloadMixin __CreateInstance(wxEventAnyPayloadMixin.Internal native, bool skipVTables = false)
        {
            return new wxEventAnyPayloadMixin(native, skipVTables);
        }

        private static void* __CopyValue(wxEventAnyPayloadMixin.Internal native)
        {
            var ret = Marshal.AllocHGlobal(64);
            wxEventAnyPayloadMixin.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxEventAnyPayloadMixin(wxEventAnyPayloadMixin.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventAnyPayloadMixin(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxEventAnyPayloadMixin()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(64);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxEventAnyPayloadMixin(wxEventAnyPayloadMixin _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(64);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxEventBasicPayloadMixin __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        protected wxAny m_payload
        {
            get
            {
                return wxAny.__CreateInstance(((Internal*) __Instance)->m_payload);
            }

            set
            {
                ((Internal*) __Instance)->m_payload = ReferenceEquals(value, null) ? new wxAny.Internal() : *(wxAny.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxIdleEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public byte m_requestMore;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEventC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEvent11RequestMoreEb")]
            internal static extern void RequestMore_0(global::System.IntPtr instance, bool needMore);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxIdleEvent13MoreRequestedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool MoreRequested_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEvent7SetModeE10wxIdleMode")]
            internal static extern void SetMode_0(wxIdleMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEvent7GetModeEv")]
            internal static extern wxIdleMode GetMode_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxIdleEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxIdleEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxIdleEvent(native.ToPointer(), skipVTables);
        }

        public static wxIdleEvent __CreateInstance(wxIdleEvent.Internal native, bool skipVTables = false)
        {
            return new wxIdleEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxIdleEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(48);
            wxIdleEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxIdleEvent(wxIdleEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxIdleEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxIdleEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxIdleEvent");
        }

        public wxIdleEvent(wxIdleEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxIdleEvent");
        }

        public void RequestMore(bool needMore)
        {
            Internal.RequestMore_0((__Instance + __PointerAdjustment), needMore);
        }

        public bool MoreRequested()
        {
            var __ret = Internal.MoreRequested_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static void SetMode(wxIdleMode mode)
        {
            var arg0 = mode;
            Internal.SetMode_0(arg0);
        }

        public static wxIdleMode GetMode()
        {
            var __ret = Internal.GetMode_0();
            return __ret;
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN11wxIdleEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected bool m_requestMore
        {
            get
            {
                return ((Internal*) __Instance)->m_requestMore != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_requestMore = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIdleEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxIdleEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIdleEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIdleEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIdleEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIdleEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIdleEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxThreadEvent : wxEvent, wxEventAnyPayloadMixin, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 112)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(48)]
            public wxString.Internal m_cmdString;

            [FieldOffset(68)]
            public int m_commandInt;

            [FieldOffset(72)]
            public int m_extraLong;

            [FieldOffset(80)]
            public wxAny.Internal m_payload;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxThreadEventC2Eii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int eventType, int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxThreadEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxThreadEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxThreadEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxThreadEvent(native.ToPointer(), skipVTables);
        }

        public static wxThreadEvent __CreateInstance(wxThreadEvent.Internal native, bool skipVTables = false)
        {
            return new wxThreadEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxThreadEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(112);
            wxThreadEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxThreadEvent(wxThreadEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxThreadEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxThreadEvent(int eventType, int id)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(112);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), eventType, id);
            SetupVTables(GetType().FullName == "wxSharp.wxThreadEvent");
        }

        public wxThreadEvent(wxThreadEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(112);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxThreadEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxEventCategory GetEventCategory()
        {
            return base.GetEventCategory();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN13wxThreadEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxThreadEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxThreadEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxThreadEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxThreadEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxThreadEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxThreadEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxThreadEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe abstract partial class wxAsyncMethodCallEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxAsyncMethodCallEventC2EP8wxObject")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxAsyncMethodCallEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxAsyncMethodCallEventD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public static new wxAsyncMethodCallEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAsyncMethodCallEventInternal(native.ToPointer(), skipVTables);
        }

        public static wxAsyncMethodCallEvent __CreateInstance(wxAsyncMethodCallEvent.Internal native, bool skipVTables = false)
        {
            return new wxAsyncMethodCallEventInternal(native, skipVTables);
        }

        protected wxAsyncMethodCallEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxAsyncMethodCallEvent(wxObject @object)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxAsyncMethodCallEvent");
        }

        protected wxAsyncMethodCallEvent(wxAsyncMethodCallEvent other)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxAsyncMethodCallEvent");
        }

        protected override void Dispose(bool disposing)
        {
            wxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract void Execute();

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxAsyncMethodCallEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxAsyncMethodCallEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxAsyncMethodCallEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxAsyncMethodCallEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxAsyncMethodCallEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const = 0
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxAsyncMethodCallEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxAsyncMethodCallEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        // void Execute() = 0
        private static Delegates.Action_IntPtr _Execute_0DelegateInstance;

        private static void _Execute_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxAsyncMethodCallEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Execute();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
                _Execute_0DelegateInstance += _Execute_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_Execute_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxCommandEvent : wxEvent, wxEventBasicPayloadMixin, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public wxString.Internal m_cmdString;

            [FieldOffset(64)]
            public int m_commandInt;

            [FieldOffset(68)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCommandEventC2Eii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int commandType, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCommandEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCommandEvent13SetClientDataEPv")]
            internal static extern void SetClientData_0(global::System.IntPtr instance, global::System.IntPtr clientData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent13GetClientDataEv")]
            internal static extern global::System.IntPtr GetClientData_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCommandEvent15SetClientObjectEP12wxClientData")]
            internal static extern void SetClientObject_0(global::System.IntPtr instance, global::System.IntPtr clientObject);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent15GetClientObjectEv")]
            internal static extern global::System.IntPtr GetClientObject_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent9GetStringEv")]
            internal static extern void GetString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent12GetSelectionEv")]
            internal static extern int GetSelection_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent9IsCheckedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsChecked_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxCommandEvent11IsSelectionEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSelection_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxCommandEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxCommandEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxCommandEvent(native.ToPointer(), skipVTables);
        }

        public static wxCommandEvent __CreateInstance(wxCommandEvent.Internal native, bool skipVTables = false)
        {
            return new wxCommandEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxCommandEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(80);
            wxCommandEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxCommandEvent(wxCommandEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxCommandEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxCommandEvent(int commandType, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), commandType, winid);
            SetupVTables(GetType().FullName == "wxSharp.wxCommandEvent");
        }

        public wxCommandEvent(wxCommandEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxCommandEvent");
        }

        public void SetClientData(global::System.IntPtr clientData)
        {
            var arg0 = clientData;
            Internal.SetClientData_0((__Instance + __PointerAdjustment), arg0);
        }

        public global::System.IntPtr GetClientData()
        {
            var __ret = Internal.GetClientData_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetClientObject(wxClientData clientObject)
        {
            var arg0 = ReferenceEquals(clientObject, null) ? global::System.IntPtr.Zero : clientObject.__Instance;
            Internal.SetClientObject_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxClientData GetClientObject()
        {
            var __ret = Internal.GetClientObject_0((__Instance + __PointerAdjustment));
            wxClientData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClientData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClientData) wxClientData.NativeToManagedMap[__ret];
            else wxClientData.NativeToManagedMap[__ret] = __result0 = (wxClientData) wxClientData.__CreateInstance(__ret);
            return __result0;
        }

        public wxString GetString()
        {
            var __ret = new wxString.Internal();
            Internal.GetString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public int GetSelection()
        {
            var __ret = Internal.GetSelection_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsChecked()
        {
            var __ret = Internal.IsChecked_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsSelection()
        {
            var __ret = Internal.IsSelection_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxEventCategory GetEventCategory()
        {
            return base.GetEventCategory();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN14wxCommandEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected global::System.IntPtr m_clientData
        {
            get
            {
                return ((Internal*) __Instance)->m_clientData;
            }

            set
            {
                ((Internal*) __Instance)->m_clientData = value;
            }
        }

        protected wxClientData m_clientObject
        {
            get
            {
                wxClientData __result0;
                if (((Internal*) __Instance)->m_clientObject == IntPtr.Zero) __result0 = null;
                else if (wxClientData.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_clientObject))
                    __result0 = (wxClientData) wxClientData.NativeToManagedMap[((Internal*) __Instance)->m_clientObject];
                else wxClientData.NativeToManagedMap[((Internal*) __Instance)->m_clientObject] = __result0 = (wxClientData) wxClientData.__CreateInstance(((Internal*) __Instance)->m_clientObject);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_clientObject = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCommandEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxCommandEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCommandEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCommandEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCommandEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCommandEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCommandEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxNotifyEvent : wxCommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 84)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(80)]
            public byte m_bAllow;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEventC2Eii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int commandType, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEvent4VetoEv")]
            internal static extern void Veto_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEvent5AllowEv")]
            internal static extern void Allow_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxNotifyEvent9IsAllowedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsAllowed_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxNotifyEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxNotifyEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxNotifyEvent(native.ToPointer(), skipVTables);
        }

        public static wxNotifyEvent __CreateInstance(wxNotifyEvent.Internal native, bool skipVTables = false)
        {
            return new wxNotifyEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxNotifyEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(84);
            wxNotifyEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxNotifyEvent(wxNotifyEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxNotifyEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxNotifyEvent(int commandType, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(84);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), commandType, winid);
            SetupVTables(GetType().FullName == "wxSharp.wxNotifyEvent");
        }

        public wxNotifyEvent(wxNotifyEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(84);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxNotifyEvent");
        }

        public void Veto()
        {
            Internal.Veto_0((__Instance + __PointerAdjustment));
        }

        public void Allow()
        {
            Internal.Allow_0((__Instance + __PointerAdjustment));
        }

        public bool IsAllowed()
        {
            var __ret = Internal.IsAllowed_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            return base.Clone();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN13wxNotifyEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNotifyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxNotifyEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNotifyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNotifyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNotifyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNotifyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNotifyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxScrollEvent : wxCommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEventC2Eiiii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int commandType, int winid, int pos, int orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxScrollEvent14GetOrientationEv")]
            internal static extern int GetOrientation_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK13wxScrollEvent11GetPositionEv")]
            internal static extern int GetPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEvent14SetOrientationEi")]
            internal static extern void SetOrientation_0(global::System.IntPtr instance, int orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEvent11SetPositionEi")]
            internal static extern void SetPosition_0(global::System.IntPtr instance, int pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxScrollEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxScrollEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxScrollEvent(native.ToPointer(), skipVTables);
        }

        public static wxScrollEvent __CreateInstance(wxScrollEvent.Internal native, bool skipVTables = false)
        {
            return new wxScrollEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxScrollEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(80);
            wxScrollEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxScrollEvent(wxScrollEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxScrollEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxScrollEvent(int commandType, int winid, int pos, int orient)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), commandType, winid, pos, orient);
            SetupVTables(GetType().FullName == "wxSharp.wxScrollEvent");
        }

        public wxScrollEvent(wxScrollEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxScrollEvent");
        }

        public int GetOrientation()
        {
            var __ret = Internal.GetOrientation_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetPosition()
        {
            var __ret = Internal.GetPosition_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetOrientation(int orient)
        {
            Internal.SetOrientation_0((__Instance + __PointerAdjustment), orient);
        }

        public void SetPosition(int pos)
        {
            Internal.SetPosition_0((__Instance + __PointerAdjustment), pos);
        }

        public override wxEvent Clone()
        {
            return base.Clone();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN13wxScrollEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxScrollEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxScrollWinEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public int m_commandInt;

            [FieldOffset(48)]
            public int m_extraLong;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEventC2Eiii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int commandType, int pos, int orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxScrollWinEvent14GetOrientationEv")]
            internal static extern int GetOrientation_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxScrollWinEvent11GetPositionEv")]
            internal static extern int GetPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEvent14SetOrientationEi")]
            internal static extern void SetOrientation_0(global::System.IntPtr instance, int orient);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEvent11SetPositionEi")]
            internal static extern void SetPosition_0(global::System.IntPtr instance, int pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxScrollWinEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxScrollWinEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxScrollWinEvent(native.ToPointer(), skipVTables);
        }

        public static wxScrollWinEvent __CreateInstance(wxScrollWinEvent.Internal native, bool skipVTables = false)
        {
            return new wxScrollWinEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxScrollWinEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(52);
            wxScrollWinEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxScrollWinEvent(wxScrollWinEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxScrollWinEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxScrollWinEvent(int commandType, int pos, int orient)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(52);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), commandType, pos, orient);
            SetupVTables(GetType().FullName == "wxSharp.wxScrollWinEvent");
        }

        public wxScrollWinEvent(wxScrollWinEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(52);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxScrollWinEvent");
        }

        public int GetOrientation()
        {
            var __ret = Internal.GetOrientation_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetPosition()
        {
            var __ret = Internal.GetPosition_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetOrientation(int orient)
        {
            Internal.SetOrientation_0((__Instance + __PointerAdjustment), orient);
        }

        public void SetPosition(int pos)
        {
            Internal.SetPosition_0((__Instance + __PointerAdjustment), pos);
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN16wxScrollWinEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected int m_commandInt
        {
            get
            {
                return ((Internal*) __Instance)->m_commandInt;
            }

            set
            {
                ((Internal*) __Instance)->m_commandInt = value;
            }
        }

        protected int m_extraLong
        {
            get
            {
                return ((Internal*) __Instance)->m_extraLong;
            }

            set
            {
                ((Internal*) __Instance)->m_extraLong = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollWinEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxScrollWinEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollWinEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollWinEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollWinEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollWinEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxScrollWinEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMouseEvent : wxEvent, wxMouseState, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 84)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public byte m_controlDown;

            [FieldOffset(44)]
            public byte m_shiftDown;

            [FieldOffset(44)]
            public byte m_altDown;

            [FieldOffset(44)]
            public byte m_metaDown;

            [FieldOffset(44)]
            public byte m_rawControlDown;

            [FieldOffset(45)]
            public byte m_leftDown;

            [FieldOffset(45)]
            public byte m_middleDown;

            [FieldOffset(45)]
            public byte m_rightDown;

            [FieldOffset(45)]
            public byte m_aux1Down;

            [FieldOffset(45)]
            public byte m_aux2Down;

            [FieldOffset(48)]
            public int m_x;

            [FieldOffset(52)]
            public int m_y;

            [FieldOffset(56)]
            public int m_clickCount;

            [FieldOffset(60)]
            public wxMouseWheelAxis m_wheelAxis;

            [FieldOffset(64)]
            public int m_wheelRotation;

            [FieldOffset(68)]
            public int m_wheelDelta;

            [FieldOffset(72)]
            public int m_linesPerAction;

            [FieldOffset(76)]
            public int m_columnsPerAction;

            [FieldOffset(80)]
            public float m_magnification;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMouseEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int mouseType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMouseEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8IsButtonEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsButton_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10ButtonDownEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ButtonDown_0(global::System.IntPtr instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent12ButtonDClickEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ButtonDClick_0(global::System.IntPtr instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8ButtonUpEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ButtonUp_0(global::System.IntPtr instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6ButtonEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Button_0(global::System.IntPtr instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent9GetButtonEv")]
            internal static extern int GetButton_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8LeftDownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool LeftDown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10MiddleDownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool MiddleDown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent9RightDownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool RightDown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8Aux1DownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Aux1Down_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8Aux2DownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Aux2Down_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6LeftUpEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool LeftUp_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8MiddleUpEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool MiddleUp_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent7RightUpEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool RightUp_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6Aux1UpEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Aux1Up_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6Aux2UpEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Aux2Up_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10LeftDClickEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool LeftDClick_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent12MiddleDClickEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool MiddleDClick_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent11RightDClickEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool RightDClick_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10Aux1DClickEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Aux1DClick_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent10Aux2DClickEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Aux2DClick_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent7MagnifyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Magnify_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8DraggingEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Dragging_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent6MovingEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Moving_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent8EnteringEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Entering_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent7LeavingEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Leaving_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent13GetClickCountEv")]
            internal static extern int GetClickCount_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent16GetWheelRotationEv")]
            internal static extern int GetWheelRotation_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent13GetWheelDeltaEv")]
            internal static extern int GetWheelDelta_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent12GetWheelAxisEv")]
            internal static extern wxMouseWheelAxis GetWheelAxis_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent17GetLinesPerActionEv")]
            internal static extern int GetLinesPerAction_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent19GetColumnsPerActionEv")]
            internal static extern int GetColumnsPerAction_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent12IsPageScrollEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsPageScroll_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMouseEvent16GetMagnificationEv")]
            internal static extern float GetMagnification_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMouseEvent6AssignERKS_")]
            internal static extern void Assign_0(global::System.IntPtr instance, global::System.IntPtr evt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMouseEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxMouseEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMouseEvent(native.ToPointer(), skipVTables);
        }

        public static wxMouseEvent __CreateInstance(wxMouseEvent.Internal native, bool skipVTables = false)
        {
            return new wxMouseEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxMouseEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(84);
            wxMouseEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMouseEvent(wxMouseEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMouseEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMouseEvent(int mouseType)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(84);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), mouseType);
            SetupVTables(GetType().FullName == "wxSharp.wxMouseEvent");
        }

        public wxMouseEvent(wxMouseEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(84);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMouseEvent");
        }

        public bool IsButton()
        {
            var __ret = Internal.IsButton_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool ButtonDown(int but)
        {
            var __ret = Internal.ButtonDown_0((__Instance + __PointerAdjustment), but);
            return __ret;
        }

        public bool ButtonDClick(int but)
        {
            var __ret = Internal.ButtonDClick_0((__Instance + __PointerAdjustment), but);
            return __ret;
        }

        public bool ButtonUp(int but)
        {
            var __ret = Internal.ButtonUp_0((__Instance + __PointerAdjustment), but);
            return __ret;
        }

        public bool Button(int but)
        {
            var __ret = Internal.Button_0((__Instance + __PointerAdjustment), but);
            return __ret;
        }

        public int GetButton()
        {
            var __ret = Internal.GetButton_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool LeftDown()
        {
            var __ret = Internal.LeftDown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool MiddleDown()
        {
            var __ret = Internal.MiddleDown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool RightDown()
        {
            var __ret = Internal.RightDown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Aux1Down()
        {
            var __ret = Internal.Aux1Down_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Aux2Down()
        {
            var __ret = Internal.Aux2Down_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool LeftUp()
        {
            var __ret = Internal.LeftUp_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool MiddleUp()
        {
            var __ret = Internal.MiddleUp_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool RightUp()
        {
            var __ret = Internal.RightUp_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Aux1Up()
        {
            var __ret = Internal.Aux1Up_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Aux2Up()
        {
            var __ret = Internal.Aux2Up_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool LeftDClick()
        {
            var __ret = Internal.LeftDClick_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool MiddleDClick()
        {
            var __ret = Internal.MiddleDClick_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool RightDClick()
        {
            var __ret = Internal.RightDClick_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Aux1DClick()
        {
            var __ret = Internal.Aux1DClick_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Aux2DClick()
        {
            var __ret = Internal.Aux2DClick_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Magnify()
        {
            var __ret = Internal.Magnify_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Dragging()
        {
            var __ret = Internal.Dragging_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Moving()
        {
            var __ret = Internal.Moving_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Entering()
        {
            var __ret = Internal.Entering_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool Leaving()
        {
            var __ret = Internal.Leaving_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetClickCount()
        {
            var __ret = Internal.GetClickCount_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetWheelRotation()
        {
            var __ret = Internal.GetWheelRotation_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetWheelDelta()
        {
            var __ret = Internal.GetWheelDelta_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxMouseWheelAxis GetWheelAxis()
        {
            var __ret = Internal.GetWheelAxis_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetLinesPerAction()
        {
            var __ret = Internal.GetLinesPerAction_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetColumnsPerAction()
        {
            var __ret = Internal.GetColumnsPerAction_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsPageScroll()
        {
            var __ret = Internal.IsPageScroll_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public float GetMagnification()
        {
            var __ret = Internal.GetMagnification_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxEventCategory GetEventCategory()
        {
            return base.GetEventCategory();
        }

        protected void Assign(wxMouseEvent evt)
        {
            if (ReferenceEquals(evt, null))
                throw new global::System.ArgumentNullException("evt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = evt.__Instance;
            Internal.Assign_0((__Instance + __PointerAdjustment), arg0);
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN12wxMouseEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        public int m_clickCount
        {
            get
            {
                return ((Internal*) __Instance)->m_clickCount;
            }

            set
            {
                ((Internal*) __Instance)->m_clickCount = value;
            }
        }

        public wxMouseWheelAxis m_wheelAxis
        {
            get
            {
                return ((Internal*) __Instance)->m_wheelAxis;
            }

            set
            {
                ((Internal*) __Instance)->m_wheelAxis = value;
            }
        }

        public int m_wheelRotation
        {
            get
            {
                return ((Internal*) __Instance)->m_wheelRotation;
            }

            set
            {
                ((Internal*) __Instance)->m_wheelRotation = value;
            }
        }

        public int m_wheelDelta
        {
            get
            {
                return ((Internal*) __Instance)->m_wheelDelta;
            }

            set
            {
                ((Internal*) __Instance)->m_wheelDelta = value;
            }
        }

        public int m_linesPerAction
        {
            get
            {
                return ((Internal*) __Instance)->m_linesPerAction;
            }

            set
            {
                ((Internal*) __Instance)->m_linesPerAction = value;
            }
        }

        public int m_columnsPerAction
        {
            get
            {
                return ((Internal*) __Instance)->m_columnsPerAction;
            }

            set
            {
                ((Internal*) __Instance)->m_columnsPerAction = value;
            }
        }

        public float m_magnification
        {
            get
            {
                return ((Internal*) __Instance)->m_magnification;
            }

            set
            {
                ((Internal*) __Instance)->m_magnification = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMouseEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxSetCursorEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 60)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public int m_x;

            [FieldOffset(48)]
            public int m_y;

            [FieldOffset(52)]
            public wxCursor.Internal m_cursor;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxSetCursorEventC2Eii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxSetCursorEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxSetCursorEvent4GetXEv")]
            internal static extern int GetX_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxSetCursorEvent4GetYEv")]
            internal static extern int GetY_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxSetCursorEvent9SetCursorERK8wxCursor")]
            internal static extern void SetCursor_0(global::System.IntPtr instance, global::System.IntPtr cursor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxSetCursorEvent9GetCursorEv")]
            internal static extern global::System.IntPtr GetCursor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxSetCursorEvent9HasCursorEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasCursor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxSetCursorEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxSetCursorEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxSetCursorEvent(native.ToPointer(), skipVTables);
        }

        public static wxSetCursorEvent __CreateInstance(wxSetCursorEvent.Internal native, bool skipVTables = false)
        {
            return new wxSetCursorEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxSetCursorEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(60);
            wxSetCursorEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxSetCursorEvent(wxSetCursorEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxSetCursorEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxSetCursorEvent(int x, int y)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(60);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), x, y);
            SetupVTables(GetType().FullName == "wxSharp.wxSetCursorEvent");
        }

        public wxSetCursorEvent(wxSetCursorEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(60);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxSetCursorEvent");
        }

        public int GetX()
        {
            var __ret = Internal.GetX_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetY()
        {
            var __ret = Internal.GetY_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetCursor(wxCursor cursor)
        {
            if (ReferenceEquals(cursor, null))
                throw new global::System.ArgumentNullException("cursor", "Cannot be null because it is a C++ reference (&).");
            var arg0 = cursor.__Instance;
            Internal.SetCursor_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxCursor GetCursor()
        {
            var __ret = Internal.GetCursor_0((__Instance + __PointerAdjustment));
            wxCursor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxCursor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxCursor) wxCursor.NativeToManagedMap[__ret];
            else wxCursor.NativeToManagedMap[__ret] = __result0 = (wxCursor) wxCursor.__CreateInstance(__ret);
            return __result0;
        }

        public bool HasCursor()
        {
            var __ret = Internal.HasCursor_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN16wxSetCursorEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSetCursorEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSetCursorEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSetCursorEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSetCursorEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSetCursorEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSetCursorEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSetCursorEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxKeyEvent : wxEvent, wxKeyboardState, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 76)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public byte m_controlDown;

            [FieldOffset(44)]
            public byte m_shiftDown;

            [FieldOffset(44)]
            public byte m_altDown;

            [FieldOffset(44)]
            public byte m_metaDown;

            [FieldOffset(44)]
            public byte m_rawControlDown;

            [FieldOffset(48)]
            public int m_x;

            [FieldOffset(52)]
            public int m_y;

            [FieldOffset(56)]
            public int m_keyCode;

            [FieldOffset(60)]
            public char m_uniChar;

            [FieldOffset(64)]
            public uint m_rawCode;

            [FieldOffset(68)]
            public uint m_rawFlags;

            [FieldOffset(72)]
            public byte m_allowNext;

            [FieldOffset(73)]
            public byte m_hasPosition;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int keyType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr evt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEventC2EiRKS_")]
            internal static extern void ctor_2(global::System.IntPtr instance, int eventType, global::System.IntPtr evt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent10GetKeyCodeEv")]
            internal static extern int GetKeyCode_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent15IsKeyInCategoryEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsKeyInCategory_0(global::System.IntPtr instance, int category);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent13GetUnicodeKeyEv")]
            internal static extern char GetUnicodeKey_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent13GetRawKeyCodeEv")]
            internal static extern uint GetRawKeyCode_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent14GetRawKeyFlagsEv")]
            internal static extern uint GetRawKeyFlags_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent11GetPositionEPiS0_")]
            internal static extern void GetPosition_0(global::System.IntPtr instance, int* xpos, int* ypos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent11GetPositionEPlS0_")]
            internal static extern void GetPosition1_0(global::System.IntPtr instance, int* xpos, int* ypos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent11GetPositionEv")]
            internal static extern wxPoint.Internal GetPosition_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent4GetXEv")]
            internal static extern int GetX_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent4GetYEv")]
            internal static extern int GetY_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEvent16DoAllowNextEventEv")]
            internal static extern void DoAllowNextEvent_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxKeyEvent18IsNextEventAllowedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsNextEventAllowed_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxKeyEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxKeyEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxKeyEvent(native.ToPointer(), skipVTables);
        }

        public static wxKeyEvent __CreateInstance(wxKeyEvent.Internal native, bool skipVTables = false)
        {
            return new wxKeyEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxKeyEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(76);
            wxKeyEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxKeyEvent(wxKeyEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxKeyEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxKeyEvent(int keyType)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(76);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), keyType);
            SetupVTables(GetType().FullName == "wxSharp.wxKeyEvent");
        }

        public wxKeyEvent(wxKeyEvent evt)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(76);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(evt, null))
                throw new global::System.ArgumentNullException("evt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = evt.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxKeyEvent");
        }

        public wxKeyEvent(int eventType, wxKeyEvent evt)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(76);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(evt, null))
                throw new global::System.ArgumentNullException("evt", "Cannot be null because it is a C++ reference (&).");
            var arg1 = evt.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), eventType, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxKeyEvent");
        }

        public int GetKeyCode()
        {
            var __ret = Internal.GetKeyCode_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsKeyInCategory(int category)
        {
            var __ret = Internal.IsKeyInCategory_0((__Instance + __PointerAdjustment), category);
            return __ret;
        }

        public char GetUnicodeKey()
        {
            var __ret = Internal.GetUnicodeKey_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetRawKeyCode()
        {
            var __ret = Internal.GetRawKeyCode_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetRawKeyFlags()
        {
            var __ret = Internal.GetRawKeyFlags_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void GetPosition(ref int xpos, ref int ypos)
        {
            fixed (int* __refParamPtr0 = &xpos)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &ypos)
                {
                    var arg1 = __refParamPtr1;
                    Internal.GetPosition_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public void GetPosition1(ref int xpos, ref int ypos)
        {
            fixed (int* __refParamPtr0 = &xpos)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &ypos)
                {
                    var arg1 = __refParamPtr1;
                    Internal.GetPosition1_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public wxPoint GetPosition()
        {
            var __ret = Internal.GetPosition_1((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public int GetX()
        {
            var __ret = Internal.GetX_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetY()
        {
            var __ret = Internal.GetY_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void DoAllowNextEvent()
        {
            Internal.DoAllowNextEvent_0((__Instance + __PointerAdjustment));
        }

        public bool IsNextEventAllowed()
        {
            var __ret = Internal.IsNextEventAllowed_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxEventCategory GetEventCategory()
        {
            return base.GetEventCategory();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN10wxKeyEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        public int m_x
        {
            get
            {
                return ((Internal*) __Instance)->m_x;
            }

            set
            {
                ((Internal*) __Instance)->m_x = value;
            }
        }

        public int m_y
        {
            get
            {
                return ((Internal*) __Instance)->m_y;
            }

            set
            {
                ((Internal*) __Instance)->m_y = value;
            }
        }

        public int m_keyCode
        {
            get
            {
                return ((Internal*) __Instance)->m_keyCode;
            }

            set
            {
                ((Internal*) __Instance)->m_keyCode = value;
            }
        }

        public char m_uniChar
        {
            get
            {
                return ((Internal*) __Instance)->m_uniChar;
            }

            set
            {
                ((Internal*) __Instance)->m_uniChar = value;
            }
        }

        public uint m_rawCode
        {
            get
            {
                return ((Internal*) __Instance)->m_rawCode;
            }

            set
            {
                ((Internal*) __Instance)->m_rawCode = value;
            }
        }

        public uint m_rawFlags
        {
            get
            {
                return ((Internal*) __Instance)->m_rawFlags;
            }

            set
            {
                ((Internal*) __Instance)->m_rawFlags = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxKeyEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxSizeEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public wxSize.Internal m_size;

            [FieldOffset(52)]
            public wxRect.Internal m_rect;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEventC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEventC2ERK6wxSizei")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr sz, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEventC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEventC2ERK6wxRecti")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr rect, int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizeEvent7GetSizeEv")]
            internal static extern wxSize.Internal GetSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEvent7SetSizeE6wxSize")]
            internal static extern void SetSize_0(global::System.IntPtr instance, wxSize.Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxSizeEvent7GetRectEv")]
            internal static extern void GetRect_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEvent7SetRectERK6wxRect")]
            internal static extern void SetRect_0(global::System.IntPtr instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxSizeEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxSizeEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxSizeEvent(native.ToPointer(), skipVTables);
        }

        public static wxSizeEvent __CreateInstance(wxSizeEvent.Internal native, bool skipVTables = false)
        {
            return new wxSizeEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxSizeEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(68);
            wxSizeEvent.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxSizeEvent(wxSizeEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxSizeEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxSizeEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxSizeEvent");
        }

        public wxSizeEvent(wxSize sz, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0, winid);
            SetupVTables(GetType().FullName == "wxSharp.wxSizeEvent");
        }

        public wxSizeEvent(wxSizeEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxSizeEvent");
        }

        public wxSizeEvent(wxRect rect, int id)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, id);
            SetupVTables(GetType().FullName == "wxSharp.wxSizeEvent");
        }

        public wxSize GetSize()
        {
            var __ret = Internal.GetSize_0((__Instance + __PointerAdjustment));
            return wxSize.__CreateInstance(__ret);
        }

        public void SetSize(wxSize size)
        {
            var arg0 = ReferenceEquals(size, null) ? new wxSize.Internal() : *(wxSize.Internal*) (size.__Instance);
            Internal.SetSize_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxRect GetRect()
        {
            var __ret = new wxRect.Internal();
            Internal.GetRect_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxRect.__CreateInstance(__ret);
        }

        public void SetRect(wxRect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            Internal.SetRect_0((__Instance + __PointerAdjustment), arg0);
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN11wxSizeEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        public wxSize m_size
        {
            get
            {
                return wxSize.__CreateInstance(((Internal*) __Instance)->m_size);
            }

            set
            {
                ((Internal*) __Instance)->m_size = ReferenceEquals(value, null) ? new wxSize.Internal() : *(wxSize.Internal*) (value.__Instance);
            }
        }

        public wxRect m_rect
        {
            get
            {
                return wxRect.__CreateInstance(((Internal*) __Instance)->m_rect);
            }

            set
            {
                ((Internal*) __Instance)->m_rect = ReferenceEquals(value, null) ? new wxRect.Internal() : *(wxRect.Internal*) (value.__Instance);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSizeEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMoveEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public wxPoint.Internal m_pos;

            [FieldOffset(52)]
            public wxRect.Internal m_rect;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEventC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEventC2ERK7wxPointi")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr pos, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEventC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEventC2ERK6wxRecti")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr rect, int id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxMoveEvent11GetPositionEv")]
            internal static extern wxPoint.Internal GetPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEvent11SetPositionERK7wxPoint")]
            internal static extern void SetPosition_0(global::System.IntPtr instance, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxMoveEvent7GetRectEv")]
            internal static extern void GetRect_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEvent7SetRectERK6wxRect")]
            internal static extern void SetRect_0(global::System.IntPtr instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMoveEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxMoveEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMoveEvent(native.ToPointer(), skipVTables);
        }

        public static wxMoveEvent __CreateInstance(wxMoveEvent.Internal native, bool skipVTables = false)
        {
            return new wxMoveEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxMoveEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(68);
            wxMoveEvent.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMoveEvent(wxMoveEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMoveEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMoveEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMoveEvent");
        }

        public wxMoveEvent(wxPoint pos, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pos.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0, winid);
            SetupVTables(GetType().FullName == "wxSharp.wxMoveEvent");
        }

        public wxMoveEvent(wxMoveEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMoveEvent");
        }

        public wxMoveEvent(wxRect rect, int id)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, id);
            SetupVTables(GetType().FullName == "wxSharp.wxMoveEvent");
        }

        public wxPoint GetPosition()
        {
            var __ret = Internal.GetPosition_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public void SetPosition(wxPoint pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pos.__Instance;
            Internal.SetPosition_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxRect GetRect()
        {
            var __ret = new wxRect.Internal();
            Internal.GetRect_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxRect.__CreateInstance(__ret);
        }

        public void SetRect(wxRect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            Internal.SetRect_0((__Instance + __PointerAdjustment), arg0);
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN11wxMoveEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected wxPoint m_pos
        {
            get
            {
                return wxPoint.__CreateInstance(((Internal*) __Instance)->m_pos);
            }

            set
            {
                ((Internal*) __Instance)->m_pos = ReferenceEquals(value, null) ? new wxPoint.Internal() : *(wxPoint.Internal*) (value.__Instance);
            }
        }

        protected wxRect m_rect
        {
            get
            {
                return wxRect.__CreateInstance(((Internal*) __Instance)->m_rect);
            }

            set
            {
                ((Internal*) __Instance)->m_rect = ReferenceEquals(value, null) ? new wxRect.Internal() : *(wxRect.Internal*) (value.__Instance);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMoveEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMoveEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMoveEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMoveEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMoveEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMoveEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMoveEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxPaintEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxPaintEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int Id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxPaintEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxPaintEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxPaintEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPaintEvent(native.ToPointer(), skipVTables);
        }

        public static wxPaintEvent __CreateInstance(wxPaintEvent.Internal native, bool skipVTables = false)
        {
            return new wxPaintEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxPaintEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            wxPaintEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxPaintEvent(wxPaintEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPaintEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxPaintEvent(int Id)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), Id);
            SetupVTables(GetType().FullName == "wxSharp.wxPaintEvent");
        }

        public wxPaintEvent(wxPaintEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxPaintEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN12wxPaintEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxPaintEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxNcPaintEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxNcPaintEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxNcPaintEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxNcPaintEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxNcPaintEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxNcPaintEvent(native.ToPointer(), skipVTables);
        }

        public static wxNcPaintEvent __CreateInstance(wxNcPaintEvent.Internal native, bool skipVTables = false)
        {
            return new wxNcPaintEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxNcPaintEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            wxNcPaintEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxNcPaintEvent(wxNcPaintEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxNcPaintEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxNcPaintEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), winid);
            SetupVTables(GetType().FullName == "wxSharp.wxNcPaintEvent");
        }

        public wxNcPaintEvent(wxNcPaintEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxNcPaintEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN14wxNcPaintEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNcPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxNcPaintEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNcPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNcPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNcPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNcPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNcPaintEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxEraseEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public global::System.IntPtr m_dc;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEraseEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEraseEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxEraseEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEraseEvent(native.ToPointer(), skipVTables);
        }

        public static wxEraseEvent __CreateInstance(wxEraseEvent.Internal native, bool skipVTables = false)
        {
            return new wxEraseEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxEraseEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(48);
            wxEraseEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxEraseEvent(wxEraseEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEraseEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxEraseEvent(wxEraseEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxEraseEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN12wxEraseEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEraseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEraseEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEraseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEraseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEraseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEraseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEraseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxFocusEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public global::System.IntPtr m_win;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxFocusEventC2Eii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int type, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxFocusEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxFocusEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxFocusEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxFocusEvent(native.ToPointer(), skipVTables);
        }

        public static wxFocusEvent __CreateInstance(wxFocusEvent.Internal native, bool skipVTables = false)
        {
            return new wxFocusEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxFocusEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(48);
            wxFocusEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxFocusEvent(wxFocusEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxFocusEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxFocusEvent(int type, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), type, winid);
            SetupVTables(GetType().FullName == "wxSharp.wxFocusEvent");
        }

        public wxFocusEvent(wxFocusEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxFocusEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN12wxFocusEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxFocusEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxChildFocusEvent : wxCommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxChildFocusEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxChildFocusEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxChildFocusEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxChildFocusEvent(native.ToPointer(), skipVTables);
        }

        public static wxChildFocusEvent __CreateInstance(wxChildFocusEvent.Internal native, bool skipVTables = false)
        {
            return new wxChildFocusEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxChildFocusEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(80);
            wxChildFocusEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxChildFocusEvent(wxChildFocusEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxChildFocusEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxChildFocusEvent(wxChildFocusEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxChildFocusEvent");
        }

        public override wxEvent Clone()
        {
            return base.Clone();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN17wxChildFocusEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxChildFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxChildFocusEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxChildFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxChildFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxChildFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxChildFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxChildFocusEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxActivateEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public byte m_active;

            [FieldOffset(48)]
            public wxActivateEvent.Reason m_activationReason;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxActivateEventC2EibiNS_6ReasonE")]
            internal static extern void ctor_0(global::System.IntPtr instance, int type, bool active, int Id, wxActivateEvent.Reason activationReason);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxActivateEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxActivateEvent9GetActiveEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetActive_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxActivateEvent19GetActivationReasonEv")]
            internal static extern wxActivateEvent.Reason GetActivationReason_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxActivateEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public enum Reason : uint
        {
            Reason_Mouse = 0,
            Reason_Unknown = 1
        }

        public static new wxActivateEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxActivateEvent(native.ToPointer(), skipVTables);
        }

        public static wxActivateEvent __CreateInstance(wxActivateEvent.Internal native, bool skipVTables = false)
        {
            return new wxActivateEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxActivateEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(52);
            wxActivateEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxActivateEvent(wxActivateEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxActivateEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxActivateEvent(int type, bool active, int Id, wxActivateEvent.Reason activationReason)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(52);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg3 = activationReason;
            Internal.ctor_0((__Instance + __PointerAdjustment), type, active, Id, arg3);
            SetupVTables(GetType().FullName == "wxSharp.wxActivateEvent");
        }

        public wxActivateEvent(wxActivateEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(52);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxActivateEvent");
        }

        public bool GetActive()
        {
            var __ret = Internal.GetActive_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxActivateEvent.Reason GetActivationReason()
        {
            var __ret = Internal.GetActivationReason_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN15wxActivateEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxActivateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxActivateEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxActivateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxActivateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxActivateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxActivateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxActivateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxInitDialogEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxInitDialogEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int Id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxInitDialogEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxInitDialogEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxInitDialogEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxInitDialogEvent(native.ToPointer(), skipVTables);
        }

        public static wxInitDialogEvent __CreateInstance(wxInitDialogEvent.Internal native, bool skipVTables = false)
        {
            return new wxInitDialogEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxInitDialogEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            wxInitDialogEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxInitDialogEvent(wxInitDialogEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxInitDialogEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxInitDialogEvent(int Id)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), Id);
            SetupVTables(GetType().FullName == "wxSharp.wxInitDialogEvent");
        }

        public wxInitDialogEvent(wxInitDialogEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxInitDialogEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN17wxInitDialogEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInitDialogEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxInitDialogEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInitDialogEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInitDialogEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInitDialogEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInitDialogEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInitDialogEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMenuEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public int m_menuId;

            [FieldOffset(48)]
            public global::System.IntPtr m_menu;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMenuEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxMenuEvent9GetMenuIdEv")]
            internal static extern int GetMenuId_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxMenuEvent7IsPopupEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsPopup_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxMenuEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxMenuEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMenuEvent(native.ToPointer(), skipVTables);
        }

        public static wxMenuEvent __CreateInstance(wxMenuEvent.Internal native, bool skipVTables = false)
        {
            return new wxMenuEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxMenuEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(52);
            wxMenuEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMenuEvent(wxMenuEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMenuEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMenuEvent(wxMenuEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(52);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMenuEvent");
        }

        public int GetMenuId()
        {
            var __ret = Internal.GetMenuId_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsPopup()
        {
            var __ret = Internal.IsPopup_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN11wxMenuEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMenuEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxCloseEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public byte m_loggingOff;

            [FieldOffset(45)]
            public byte m_veto;

            [FieldOffset(46)]
            public byte m_canVeto;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEventC2Eii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int type, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEvent13SetLoggingOffEb")]
            internal static extern void SetLoggingOff_0(global::System.IntPtr instance, bool logOff);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxCloseEvent13GetLoggingOffEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetLoggingOff_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEvent4VetoEb")]
            internal static extern void Veto_0(global::System.IntPtr instance, bool veto);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEvent10SetCanVetoEb")]
            internal static extern void SetCanVeto_0(global::System.IntPtr instance, bool canVeto);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxCloseEvent7CanVetoEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CanVeto_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxCloseEvent7GetVetoEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetVeto_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxCloseEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxCloseEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxCloseEvent(native.ToPointer(), skipVTables);
        }

        public static wxCloseEvent __CreateInstance(wxCloseEvent.Internal native, bool skipVTables = false)
        {
            return new wxCloseEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxCloseEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(48);
            wxCloseEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxCloseEvent(wxCloseEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxCloseEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxCloseEvent(int type, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), type, winid);
            SetupVTables(GetType().FullName == "wxSharp.wxCloseEvent");
        }

        public wxCloseEvent(wxCloseEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxCloseEvent");
        }

        public void SetLoggingOff(bool logOff)
        {
            Internal.SetLoggingOff_0((__Instance + __PointerAdjustment), logOff);
        }

        public bool GetLoggingOff()
        {
            var __ret = Internal.GetLoggingOff_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Veto(bool veto)
        {
            Internal.Veto_0((__Instance + __PointerAdjustment), veto);
        }

        public void SetCanVeto(bool canVeto)
        {
            Internal.SetCanVeto_0((__Instance + __PointerAdjustment), canVeto);
        }

        public bool CanVeto()
        {
            var __ret = Internal.CanVeto_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetVeto()
        {
            var __ret = Internal.GetVeto_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN12wxCloseEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected bool m_loggingOff
        {
            get
            {
                return ((Internal*) __Instance)->m_loggingOff != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_loggingOff = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_veto
        {
            get
            {
                return ((Internal*) __Instance)->m_veto != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_veto = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_canVeto
        {
            get
            {
                return ((Internal*) __Instance)->m_canVeto != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_canVeto = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCloseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxCloseEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCloseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCloseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCloseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCloseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCloseEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxShowEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public byte m_show;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxShowEventC2Eib")]
            internal static extern void ctor_0(global::System.IntPtr instance, int winid, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxShowEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxShowEvent7SetShowEb")]
            internal static extern void SetShow_0(global::System.IntPtr instance, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxShowEvent7IsShownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsShown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxShowEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxShowEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxShowEvent(native.ToPointer(), skipVTables);
        }

        public static wxShowEvent __CreateInstance(wxShowEvent.Internal native, bool skipVTables = false)
        {
            return new wxShowEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxShowEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(48);
            wxShowEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxShowEvent(wxShowEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxShowEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxShowEvent(int winid, bool show)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), winid, show);
            SetupVTables(GetType().FullName == "wxSharp.wxShowEvent");
        }

        public wxShowEvent(wxShowEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxShowEvent");
        }

        public void SetShow(bool show)
        {
            Internal.SetShow_0((__Instance + __PointerAdjustment), show);
        }

        public bool IsShown()
        {
            var __ret = Internal.IsShown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN11wxShowEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected bool m_show
        {
            get
            {
                return ((Internal*) __Instance)->m_show != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_show = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxShowEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxShowEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxShowEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxShowEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxShowEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxShowEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxShowEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxIconizeEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public byte m_iconized;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxIconizeEventC2Eib")]
            internal static extern void ctor_0(global::System.IntPtr instance, int winid, bool iconized);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxIconizeEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxIconizeEvent10IsIconizedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsIconized_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxIconizeEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxIconizeEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxIconizeEvent(native.ToPointer(), skipVTables);
        }

        public static wxIconizeEvent __CreateInstance(wxIconizeEvent.Internal native, bool skipVTables = false)
        {
            return new wxIconizeEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxIconizeEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(48);
            wxIconizeEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxIconizeEvent(wxIconizeEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxIconizeEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxIconizeEvent(int winid, bool iconized)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), winid, iconized);
            SetupVTables(GetType().FullName == "wxSharp.wxIconizeEvent");
        }

        public wxIconizeEvent(wxIconizeEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxIconizeEvent");
        }

        public bool IsIconized()
        {
            var __ret = Internal.IsIconized_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN14wxIconizeEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected bool m_iconized
        {
            get
            {
                return ((Internal*) __Instance)->m_iconized != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_iconized = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIconizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxIconizeEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIconizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIconizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIconizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIconizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxIconizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMaximizeEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMaximizeEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMaximizeEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMaximizeEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxMaximizeEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMaximizeEvent(native.ToPointer(), skipVTables);
        }

        public static wxMaximizeEvent __CreateInstance(wxMaximizeEvent.Internal native, bool skipVTables = false)
        {
            return new wxMaximizeEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxMaximizeEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            wxMaximizeEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMaximizeEvent(wxMaximizeEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMaximizeEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMaximizeEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), winid);
            SetupVTables(GetType().FullName == "wxSharp.wxMaximizeEvent");
        }

        public wxMaximizeEvent(wxMaximizeEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMaximizeEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN15wxMaximizeEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMaximizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMaximizeEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMaximizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMaximizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMaximizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMaximizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMaximizeEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxJoystickEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 68)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public wxPoint.Internal m_pos;

            [FieldOffset(52)]
            public int m_zPosition;

            [FieldOffset(56)]
            public int m_buttonChange;

            [FieldOffset(60)]
            public int m_buttonState;

            [FieldOffset(64)]
            public int m_joyStick;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEventC2Eiiii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int type, int state, int joystick, int change);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent11GetPositionEv")]
            internal static extern wxPoint.Internal GetPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent12GetZPositionEv")]
            internal static extern int GetZPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent14GetButtonStateEv")]
            internal static extern int GetButtonState_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent15GetButtonChangeEv")]
            internal static extern int GetButtonChange_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent11GetJoystickEv")]
            internal static extern int GetJoystick_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent11SetJoystickEi")]
            internal static extern void SetJoystick_0(global::System.IntPtr instance, int stick);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent14SetButtonStateEi")]
            internal static extern void SetButtonState_0(global::System.IntPtr instance, int state);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent15SetButtonChangeEi")]
            internal static extern void SetButtonChange_0(global::System.IntPtr instance, int change);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent11SetPositionERK7wxPoint")]
            internal static extern void SetPosition_0(global::System.IntPtr instance, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent12SetZPositionEi")]
            internal static extern void SetZPosition_0(global::System.IntPtr instance, int zPos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent8IsButtonEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsButton_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent6IsMoveEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsMove_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent7IsZMoveEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsZMove_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent10ButtonDownEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ButtonDown_0(global::System.IntPtr instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent8ButtonUpEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ButtonUp_0(global::System.IntPtr instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxJoystickEvent12ButtonIsDownEi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ButtonIsDown_0(global::System.IntPtr instance, int but);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxJoystickEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxJoystickEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxJoystickEvent(native.ToPointer(), skipVTables);
        }

        public static wxJoystickEvent __CreateInstance(wxJoystickEvent.Internal native, bool skipVTables = false)
        {
            return new wxJoystickEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxJoystickEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(68);
            wxJoystickEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxJoystickEvent(wxJoystickEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxJoystickEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxJoystickEvent(int type, int state, int joystick, int change)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), type, state, joystick, change);
            SetupVTables(GetType().FullName == "wxSharp.wxJoystickEvent");
        }

        public wxJoystickEvent(wxJoystickEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(68);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxJoystickEvent");
        }

        public wxPoint GetPosition()
        {
            var __ret = Internal.GetPosition_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public int GetZPosition()
        {
            var __ret = Internal.GetZPosition_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetButtonState()
        {
            var __ret = Internal.GetButtonState_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetButtonChange()
        {
            var __ret = Internal.GetButtonChange_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetJoystick()
        {
            var __ret = Internal.GetJoystick_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetJoystick(int stick)
        {
            Internal.SetJoystick_0((__Instance + __PointerAdjustment), stick);
        }

        public void SetButtonState(int state)
        {
            Internal.SetButtonState_0((__Instance + __PointerAdjustment), state);
        }

        public void SetButtonChange(int change)
        {
            Internal.SetButtonChange_0((__Instance + __PointerAdjustment), change);
        }

        public void SetPosition(wxPoint pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pos.__Instance;
            Internal.SetPosition_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetZPosition(int zPos)
        {
            Internal.SetZPosition_0((__Instance + __PointerAdjustment), zPos);
        }

        public bool IsButton()
        {
            var __ret = Internal.IsButton_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsMove()
        {
            var __ret = Internal.IsMove_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsZMove()
        {
            var __ret = Internal.IsZMove_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool ButtonDown(int but)
        {
            var __ret = Internal.ButtonDown_0((__Instance + __PointerAdjustment), but);
            return __ret;
        }

        public bool ButtonUp(int but)
        {
            var __ret = Internal.ButtonUp_0((__Instance + __PointerAdjustment), but);
            return __ret;
        }

        public bool ButtonIsDown(int but)
        {
            var __ret = Internal.ButtonIsDown_0((__Instance + __PointerAdjustment), but);
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN15wxJoystickEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected wxPoint m_pos
        {
            get
            {
                return wxPoint.__CreateInstance(((Internal*) __Instance)->m_pos);
            }

            set
            {
                ((Internal*) __Instance)->m_pos = ReferenceEquals(value, null) ? new wxPoint.Internal() : *(wxPoint.Internal*) (value.__Instance);
            }
        }

        protected int m_zPosition
        {
            get
            {
                return ((Internal*) __Instance)->m_zPosition;
            }

            set
            {
                ((Internal*) __Instance)->m_zPosition = value;
            }
        }

        protected int m_buttonChange
        {
            get
            {
                return ((Internal*) __Instance)->m_buttonChange;
            }

            set
            {
                ((Internal*) __Instance)->m_buttonChange = value;
            }
        }

        protected int m_buttonState
        {
            get
            {
                return ((Internal*) __Instance)->m_buttonState;
            }

            set
            {
                ((Internal*) __Instance)->m_buttonState = value;
            }
        }

        protected int m_joyStick
        {
            get
            {
                return ((Internal*) __Instance)->m_joyStick;
            }

            set
            {
                ((Internal*) __Instance)->m_joyStick = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJoystickEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxJoystickEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJoystickEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJoystickEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJoystickEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJoystickEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJoystickEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxDropFilesEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 60)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public int m_noFiles;

            [FieldOffset(48)]
            public wxPoint.Internal m_pos;

            [FieldOffset(56)]
            public global::System.IntPtr m_files;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxDropFilesEventC2EiiP8wxString")]
            internal static extern void ctor_0(global::System.IntPtr instance, int type, int noFiles, global::System.IntPtr files);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxDropFilesEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxDropFilesEvent11GetPositionEv")]
            internal static extern wxPoint.Internal GetPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxDropFilesEvent16GetNumberOfFilesEv")]
            internal static extern int GetNumberOfFiles_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxDropFilesEvent8GetFilesEv")]
            internal static extern global::System.IntPtr GetFiles_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxDropFilesEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxDropFilesEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxDropFilesEvent(native.ToPointer(), skipVTables);
        }

        public static wxDropFilesEvent __CreateInstance(wxDropFilesEvent.Internal native, bool skipVTables = false)
        {
            return new wxDropFilesEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxDropFilesEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(60);
            wxDropFilesEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxDropFilesEvent(wxDropFilesEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxDropFilesEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxDropFilesEvent(int type, int noFiles, wxString files)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(60);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg2 = ReferenceEquals(files, null) ? global::System.IntPtr.Zero : files.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), type, noFiles, arg2);
            SetupVTables(GetType().FullName == "wxSharp.wxDropFilesEvent");
        }

        public wxDropFilesEvent(wxDropFilesEvent other)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(60);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxDropFilesEvent");
        }

        public wxPoint GetPosition()
        {
            var __ret = Internal.GetPosition_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public int GetNumberOfFiles()
        {
            var __ret = Internal.GetNumberOfFiles_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString GetFiles()
        {
            var __ret = Internal.GetFiles_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN16wxDropFilesEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        public int m_noFiles
        {
            get
            {
                return ((Internal*) __Instance)->m_noFiles;
            }

            set
            {
                ((Internal*) __Instance)->m_noFiles = value;
            }
        }

        public wxPoint m_pos
        {
            get
            {
                return wxPoint.__CreateInstance(((Internal*) __Instance)->m_pos);
            }

            set
            {
                ((Internal*) __Instance)->m_pos = ReferenceEquals(value, null) ? new wxPoint.Internal() : *(wxPoint.Internal*) (value.__Instance);
            }
        }

        public wxString m_files
        {
            get
            {
                wxString __result0;
                if (((Internal*) __Instance)->m_files == IntPtr.Zero) __result0 = null;
                else if (wxString.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_files))
                    __result0 = (wxString) wxString.NativeToManagedMap[((Internal*) __Instance)->m_files];
                else __result0 = wxString.__CreateInstance(((Internal*) __Instance)->m_files);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_files = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDropFilesEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxDropFilesEvent()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDropFilesEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDropFilesEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDropFilesEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDropFilesEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDropFilesEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxUpdateUIEvent : wxCommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 108)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(80)]
            public byte m_checked;

            [FieldOffset(81)]
            public byte m_enabled;

            [FieldOffset(82)]
            public byte m_shown;

            [FieldOffset(83)]
            public byte m_setEnabled;

            [FieldOffset(84)]
            public byte m_setShown;

            [FieldOffset(85)]
            public byte m_setText;

            [FieldOffset(86)]
            public byte m_setChecked;

            [FieldOffset(88)]
            public wxString.Internal m_text;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int commandId);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent10GetCheckedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetChecked_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent10GetEnabledEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetEnabled_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent8GetShownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetShown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent7GetTextEv")]
            internal static extern void GetText_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent10GetSetTextEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetSetText_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent13GetSetCheckedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetSetChecked_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent13GetSetEnabledEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetSetEnabled_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxUpdateUIEvent11GetSetShownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetSetShown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent5CheckEb")]
            internal static extern void Check_0(global::System.IntPtr instance, bool check);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent6EnableEb")]
            internal static extern void Enable_0(global::System.IntPtr instance, bool enable);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent4ShowEb")]
            internal static extern void Show_0(global::System.IntPtr instance, bool show);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent7SetTextERK8wxString")]
            internal static extern void SetText_0(global::System.IntPtr instance, global::System.IntPtr text);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent17SetUpdateIntervalEl")]
            internal static extern void SetUpdateInterval_0(int updateInterval);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent17GetUpdateIntervalEv")]
            internal static extern int GetUpdateInterval_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent15ResetUpdateTimeEv")]
            internal static extern void ResetUpdateTime_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent7SetModeE14wxUpdateUIMode")]
            internal static extern void SetMode_0(wxUpdateUIMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent7GetModeEv")]
            internal static extern wxUpdateUIMode GetMode_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxUpdateUIEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxUpdateUIEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxUpdateUIEvent(native.ToPointer(), skipVTables);
        }

        public static wxUpdateUIEvent __CreateInstance(wxUpdateUIEvent.Internal native, bool skipVTables = false)
        {
            return new wxUpdateUIEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxUpdateUIEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(108);
            wxUpdateUIEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxUpdateUIEvent(wxUpdateUIEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxUpdateUIEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxUpdateUIEvent(int commandId)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(108);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), commandId);
            SetupVTables(GetType().FullName == "wxSharp.wxUpdateUIEvent");
        }

        public wxUpdateUIEvent(wxUpdateUIEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(108);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxUpdateUIEvent");
        }

        public bool GetChecked()
        {
            var __ret = Internal.GetChecked_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetEnabled()
        {
            var __ret = Internal.GetEnabled_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetShown()
        {
            var __ret = Internal.GetShown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString GetText()
        {
            var __ret = new wxString.Internal();
            Internal.GetText_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public bool GetSetText()
        {
            var __ret = Internal.GetSetText_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetSetChecked()
        {
            var __ret = Internal.GetSetChecked_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetSetEnabled()
        {
            var __ret = Internal.GetSetEnabled_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool GetSetShown()
        {
            var __ret = Internal.GetSetShown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Check(bool check)
        {
            Internal.Check_0((__Instance + __PointerAdjustment), check);
        }

        public void Enable(bool enable)
        {
            Internal.Enable_0((__Instance + __PointerAdjustment), enable);
        }

        public void Show(bool show)
        {
            Internal.Show_0((__Instance + __PointerAdjustment), show);
        }

        public void SetText(wxString text)
        {
            if (ReferenceEquals(text, null))
                throw new global::System.ArgumentNullException("text", "Cannot be null because it is a C++ reference (&).");
            var arg0 = text.__Instance;
            Internal.SetText_0((__Instance + __PointerAdjustment), arg0);
        }

        public override wxEvent Clone()
        {
            return base.Clone();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static void SetUpdateInterval(int updateInterval)
        {
            Internal.SetUpdateInterval_0(updateInterval);
        }

        public static int GetUpdateInterval()
        {
            var __ret = Internal.GetUpdateInterval_0();
            return __ret;
        }

        public static void ResetUpdateTime()
        {
            Internal.ResetUpdateTime_0();
        }

        public static void SetMode(wxUpdateUIMode mode)
        {
            var arg0 = mode;
            Internal.SetMode_0(arg0);
        }

        public static wxUpdateUIMode GetMode()
        {
            var __ret = Internal.GetMode_0();
            return __ret;
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN15wxUpdateUIEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected bool m_checked
        {
            get
            {
                return ((Internal*) __Instance)->m_checked != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_checked = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_enabled
        {
            get
            {
                return ((Internal*) __Instance)->m_enabled != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_enabled = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_shown
        {
            get
            {
                return ((Internal*) __Instance)->m_shown != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_shown = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_setEnabled
        {
            get
            {
                return ((Internal*) __Instance)->m_setEnabled != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_setEnabled = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_setShown
        {
            get
            {
                return ((Internal*) __Instance)->m_setShown != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_setShown = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_setText
        {
            get
            {
                return ((Internal*) __Instance)->m_setText != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_setText = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_setChecked
        {
            get
            {
                return ((Internal*) __Instance)->m_setChecked != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_setChecked = (byte) (value ? 1 : 0);
            }
        }

        protected wxString m_text
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_text);
            }

            set
            {
                ((Internal*) __Instance)->m_text = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxUpdateUIEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxUpdateUIEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxUpdateUIEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxUpdateUIEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxUpdateUIEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxUpdateUIEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxUpdateUIEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxSysColourChangedEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxSysColourChangedEventC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxSysColourChangedEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxSysColourChangedEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxSysColourChangedEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxSysColourChangedEvent(native.ToPointer(), skipVTables);
        }

        public static wxSysColourChangedEvent __CreateInstance(wxSysColourChangedEvent.Internal native, bool skipVTables = false)
        {
            return new wxSysColourChangedEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxSysColourChangedEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            wxSysColourChangedEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxSysColourChangedEvent(wxSysColourChangedEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxSysColourChangedEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxSysColourChangedEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxSysColourChangedEvent");
        }

        public wxSysColourChangedEvent(wxSysColourChangedEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxSysColourChangedEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN23wxSysColourChangedEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSysColourChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxSysColourChangedEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSysColourChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSysColourChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSysColourChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSysColourChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxSysColourChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMouseCaptureChangedEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public global::System.IntPtr m_gainedCapture;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxMouseCaptureChangedEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxMouseCaptureChangedEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxMouseCaptureChangedEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMouseCaptureChangedEvent(native.ToPointer(), skipVTables);
        }

        public static wxMouseCaptureChangedEvent __CreateInstance(wxMouseCaptureChangedEvent.Internal native, bool skipVTables = false)
        {
            return new wxMouseCaptureChangedEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxMouseCaptureChangedEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(48);
            wxMouseCaptureChangedEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMouseCaptureChangedEvent(wxMouseCaptureChangedEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMouseCaptureChangedEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMouseCaptureChangedEvent(wxMouseCaptureChangedEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMouseCaptureChangedEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN26wxMouseCaptureChangedEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMouseCaptureChangedEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMouseCaptureLostEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxMouseCaptureLostEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxMouseCaptureLostEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxMouseCaptureLostEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxMouseCaptureLostEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMouseCaptureLostEvent(native.ToPointer(), skipVTables);
        }

        public static wxMouseCaptureLostEvent __CreateInstance(wxMouseCaptureLostEvent.Internal native, bool skipVTables = false)
        {
            return new wxMouseCaptureLostEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxMouseCaptureLostEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            wxMouseCaptureLostEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMouseCaptureLostEvent(wxMouseCaptureLostEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMouseCaptureLostEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMouseCaptureLostEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), winid);
            SetupVTables(GetType().FullName == "wxSharp.wxMouseCaptureLostEvent");
        }

        public wxMouseCaptureLostEvent(wxMouseCaptureLostEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMouseCaptureLostEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN23wxMouseCaptureLostEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureLostEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMouseCaptureLostEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureLostEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureLostEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureLostEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureLostEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMouseCaptureLostEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxDisplayChangedEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDisplayChangedEventC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDisplayChangedEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxDisplayChangedEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxDisplayChangedEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxDisplayChangedEvent(native.ToPointer(), skipVTables);
        }

        public static wxDisplayChangedEvent __CreateInstance(wxDisplayChangedEvent.Internal native, bool skipVTables = false)
        {
            return new wxDisplayChangedEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxDisplayChangedEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            wxDisplayChangedEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxDisplayChangedEvent(wxDisplayChangedEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxDisplayChangedEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxDisplayChangedEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxDisplayChangedEvent");
        }

        public wxDisplayChangedEvent(wxDisplayChangedEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxDisplayChangedEvent");
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN21wxDisplayChangedEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDisplayChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxDisplayChangedEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDisplayChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDisplayChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDisplayChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDisplayChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxDisplayChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxPaletteChangedEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public global::System.IntPtr m_changedWindow;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxPaletteChangedEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxPaletteChangedEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxPaletteChangedEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxPaletteChangedEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPaletteChangedEvent(native.ToPointer(), skipVTables);
        }

        public static wxPaletteChangedEvent __CreateInstance(wxPaletteChangedEvent.Internal native, bool skipVTables = false)
        {
            return new wxPaletteChangedEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxPaletteChangedEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(48);
            wxPaletteChangedEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxPaletteChangedEvent(wxPaletteChangedEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPaletteChangedEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxPaletteChangedEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), winid);
            SetupVTables(GetType().FullName == "wxSharp.wxPaletteChangedEvent");
        }

        public wxPaletteChangedEvent(wxPaletteChangedEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxPaletteChangedEvent");
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN21wxPaletteChangedEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaletteChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxPaletteChangedEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaletteChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaletteChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaletteChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaletteChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPaletteChangedEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxQueryNewPaletteEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public byte m_paletteRealized;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxQueryNewPaletteEventC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxQueryNewPaletteEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxQueryNewPaletteEvent18SetPaletteRealizedEb")]
            internal static extern void SetPaletteRealized_0(global::System.IntPtr instance, bool realized);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxQueryNewPaletteEvent18GetPaletteRealizedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetPaletteRealized_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxQueryNewPaletteEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxQueryNewPaletteEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxQueryNewPaletteEvent(native.ToPointer(), skipVTables);
        }

        public static wxQueryNewPaletteEvent __CreateInstance(wxQueryNewPaletteEvent.Internal native, bool skipVTables = false)
        {
            return new wxQueryNewPaletteEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxQueryNewPaletteEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(48);
            wxQueryNewPaletteEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxQueryNewPaletteEvent(wxQueryNewPaletteEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxQueryNewPaletteEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxQueryNewPaletteEvent(int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), winid);
            SetupVTables(GetType().FullName == "wxSharp.wxQueryNewPaletteEvent");
        }

        public wxQueryNewPaletteEvent(wxQueryNewPaletteEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(48);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxQueryNewPaletteEvent");
        }

        public void SetPaletteRealized(bool realized)
        {
            Internal.SetPaletteRealized_0((__Instance + __PointerAdjustment), realized);
        }

        public bool GetPaletteRealized()
        {
            var __ret = Internal.GetPaletteRealized_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN22wxQueryNewPaletteEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected bool m_paletteRealized
        {
            get
            {
                return ((Internal*) __Instance)->m_paletteRealized != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_paletteRealized = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxQueryNewPaletteEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxQueryNewPaletteEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxQueryNewPaletteEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxQueryNewPaletteEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxQueryNewPaletteEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxQueryNewPaletteEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxQueryNewPaletteEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxNavigationKeyEvent : wxEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 52)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(44)]
            public int m_flags;

            [FieldOffset(48)]
            public global::System.IntPtr m_focus;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEventC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxNavigationKeyEvent12GetDirectionEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetDirection_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent12SetDirectionEb")]
            internal static extern void SetDirection_0(global::System.IntPtr instance, bool bForward);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxNavigationKeyEvent14IsWindowChangeEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsWindowChange_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent15SetWindowChangeEb")]
            internal static extern void SetWindowChange_0(global::System.IntPtr instance, bool bIs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxNavigationKeyEvent9IsFromTabEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsFromTab_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent10SetFromTabEb")]
            internal static extern void SetFromTab_0(global::System.IntPtr instance, bool bIs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent8SetFlagsEl")]
            internal static extern void SetFlags_0(global::System.IntPtr instance, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxNavigationKeyEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        [Flags]
        public enum wxNavigationKeyEventFlags : uint
        {
            IsBackward = 0x0,
            IsForward = 0x1,
            WinChange = 0x2,
            FromTab = 0x4
        }

        public static new wxNavigationKeyEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxNavigationKeyEvent(native.ToPointer(), skipVTables);
        }

        public static wxNavigationKeyEvent __CreateInstance(wxNavigationKeyEvent.Internal native, bool skipVTables = false)
        {
            return new wxNavigationKeyEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxNavigationKeyEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(52);
            wxNavigationKeyEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxNavigationKeyEvent(wxNavigationKeyEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxNavigationKeyEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxNavigationKeyEvent()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(52);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxNavigationKeyEvent");
        }

        public wxNavigationKeyEvent(wxNavigationKeyEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(52);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxNavigationKeyEvent");
        }

        public bool GetDirection()
        {
            var __ret = Internal.GetDirection_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetDirection(bool bForward)
        {
            Internal.SetDirection_0((__Instance + __PointerAdjustment), bForward);
        }

        public bool IsWindowChange()
        {
            var __ret = Internal.IsWindowChange_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetWindowChange(bool bIs)
        {
            Internal.SetWindowChange_0((__Instance + __PointerAdjustment), bIs);
        }

        public bool IsFromTab()
        {
            var __ret = Internal.IsFromTab_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetFromTab(bool bIs)
        {
            Internal.SetFromTab_0((__Instance + __PointerAdjustment), bIs);
        }

        public void SetFlags(int flags)
        {
            Internal.SetFlags_0((__Instance + __PointerAdjustment), flags);
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN20wxNavigationKeyEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        public int m_flags
        {
            get
            {
                return ((Internal*) __Instance)->m_flags;
            }

            set
            {
                ((Internal*) __Instance)->m_flags = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNavigationKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxNavigationKeyEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNavigationKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNavigationKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNavigationKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNavigationKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxNavigationKeyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxWindowCreateEvent : wxCommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxWindowCreateEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxWindowCreateEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxWindowCreateEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxWindowCreateEvent(native.ToPointer(), skipVTables);
        }

        public static wxWindowCreateEvent __CreateInstance(wxWindowCreateEvent.Internal native, bool skipVTables = false)
        {
            return new wxWindowCreateEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxWindowCreateEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(80);
            wxWindowCreateEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxWindowCreateEvent(wxWindowCreateEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxWindowCreateEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxWindowCreateEvent(wxWindowCreateEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxWindowCreateEvent");
        }

        public override wxEvent Clone()
        {
            return base.Clone();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN19wxWindowCreateEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowCreateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxWindowCreateEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowCreateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowCreateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowCreateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowCreateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowCreateEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxWindowDestroyEvent : wxCommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxWindowDestroyEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxWindowDestroyEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxWindowDestroyEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxWindowDestroyEvent(native.ToPointer(), skipVTables);
        }

        public static wxWindowDestroyEvent __CreateInstance(wxWindowDestroyEvent.Internal native, bool skipVTables = false)
        {
            return new wxWindowDestroyEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxWindowDestroyEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(80);
            wxWindowDestroyEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxWindowDestroyEvent(wxWindowDestroyEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxWindowDestroyEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxWindowDestroyEvent(wxWindowDestroyEvent _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxWindowDestroyEvent");
        }

        public override wxEvent Clone()
        {
            return base.Clone();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN20wxWindowDestroyEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowDestroyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxWindowDestroyEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowDestroyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowDestroyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowDestroyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowDestroyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWindowDestroyEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxHelpEvent : wxCommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 132)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(80)]
            public wxPoint.Internal m_pos;

            [FieldOffset(88)]
            public wxString.Internal m_target;

            [FieldOffset(108)]
            public wxString.Internal m_link;

            [FieldOffset(128)]
            public wxHelpEvent.Origin m_origin;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEventC2EiiRK7wxPointNS_6OriginE")]
            internal static extern void ctor_0(global::System.IntPtr instance, int type, int winid, global::System.IntPtr pt, wxHelpEvent.Origin origin);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxHelpEvent11GetPositionEv")]
            internal static extern global::System.IntPtr GetPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent11SetPositionERK7wxPoint")]
            internal static extern void SetPosition_0(global::System.IntPtr instance, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxHelpEvent7GetLinkEv")]
            internal static extern global::System.IntPtr GetLink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent7SetLinkERK8wxString")]
            internal static extern void SetLink_0(global::System.IntPtr instance, global::System.IntPtr link);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxHelpEvent9GetTargetEv")]
            internal static extern global::System.IntPtr GetTarget_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent9SetTargetERK8wxString")]
            internal static extern void SetTarget_0(global::System.IntPtr instance, global::System.IntPtr target);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxHelpEvent9GetOriginEv")]
            internal static extern wxHelpEvent.Origin GetOrigin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent9SetOriginENS_6OriginE")]
            internal static extern void SetOrigin_0(global::System.IntPtr instance, wxHelpEvent.Origin origin);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent11GuessOriginENS_6OriginE")]
            internal static extern wxHelpEvent.Origin GuessOrigin_0(wxHelpEvent.Origin origin);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxHelpEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public enum Origin : uint
        {
            Origin_Unknown = 0,
            Origin_Keyboard = 1,
            Origin_HelpButton = 2
        }

        public static new wxHelpEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxHelpEvent(native.ToPointer(), skipVTables);
        }

        public static wxHelpEvent __CreateInstance(wxHelpEvent.Internal native, bool skipVTables = false)
        {
            return new wxHelpEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxHelpEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(132);
            wxHelpEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxHelpEvent(wxHelpEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxHelpEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxHelpEvent(int type, int winid, wxPoint pt, wxHelpEvent.Origin origin)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(132);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg2 = pt.__Instance;
            var arg3 = origin;
            Internal.ctor_0((__Instance + __PointerAdjustment), type, winid, arg2, arg3);
            SetupVTables(GetType().FullName == "wxSharp.wxHelpEvent");
        }

        public wxHelpEvent(wxHelpEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(132);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxHelpEvent");
        }

        public wxPoint GetPosition()
        {
            var __ret = Internal.GetPosition_0((__Instance + __PointerAdjustment));
            wxPoint __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPoint.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPoint) wxPoint.NativeToManagedMap[__ret];
            else __result0 = wxPoint.__CreateInstance(__ret);
            return __result0;
        }

        public void SetPosition(wxPoint pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pos.__Instance;
            Internal.SetPosition_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxString GetLink()
        {
            var __ret = Internal.GetLink_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public void SetLink(wxString link)
        {
            if (ReferenceEquals(link, null))
                throw new global::System.ArgumentNullException("link", "Cannot be null because it is a C++ reference (&).");
            var arg0 = link.__Instance;
            Internal.SetLink_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxString GetTarget()
        {
            var __ret = Internal.GetTarget_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public void SetTarget(wxString target)
        {
            if (ReferenceEquals(target, null))
                throw new global::System.ArgumentNullException("target", "Cannot be null because it is a C++ reference (&).");
            var arg0 = target.__Instance;
            Internal.SetTarget_0((__Instance + __PointerAdjustment), arg0);
        }

        public override wxEvent Clone()
        {
            return base.Clone();
        }

        public wxHelpEvent.Origin GetOrigin()
        {
            var __ret = Internal.GetOrigin_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetOrigin(wxHelpEvent.Origin origin)
        {
            var arg0 = origin;
            Internal.SetOrigin_0((__Instance + __PointerAdjustment), arg0);
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        protected static wxHelpEvent.Origin GuessOrigin(wxHelpEvent.Origin origin)
        {
            var arg0 = origin;
            var __ret = Internal.GuessOrigin_0(arg0);
            return __ret;
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN11wxHelpEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected wxPoint m_pos
        {
            get
            {
                return wxPoint.__CreateInstance(((Internal*) __Instance)->m_pos);
            }

            set
            {
                ((Internal*) __Instance)->m_pos = ReferenceEquals(value, null) ? new wxPoint.Internal() : *(wxPoint.Internal*) (value.__Instance);
            }
        }

        protected wxString m_target
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_target);
            }

            set
            {
                ((Internal*) __Instance)->m_target = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        protected wxString m_link
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_link);
            }

            set
            {
                ((Internal*) __Instance)->m_link = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        protected wxHelpEvent.Origin m_origin
        {
            get
            {
                return ((Internal*) __Instance)->m_origin;
            }

            set
            {
                ((Internal*) __Instance)->m_origin = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxHelpEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxHelpEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxHelpEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxHelpEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxHelpEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxHelpEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxHelpEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxClipboardTextEvent : wxCommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxClipboardTextEventC2Eii")]
            internal static extern void ctor_0(global::System.IntPtr instance, int type, int winid);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxClipboardTextEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxClipboardTextEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxClipboardTextEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxClipboardTextEvent(native.ToPointer(), skipVTables);
        }

        public static wxClipboardTextEvent __CreateInstance(wxClipboardTextEvent.Internal native, bool skipVTables = false)
        {
            return new wxClipboardTextEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxClipboardTextEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(80);
            wxClipboardTextEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxClipboardTextEvent(wxClipboardTextEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxClipboardTextEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxClipboardTextEvent(int type, int winid)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), type, winid);
            SetupVTables(GetType().FullName == "wxSharp.wxClipboardTextEvent");
        }

        public wxClipboardTextEvent(wxClipboardTextEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxClipboardTextEvent");
        }

        public override wxEvent Clone()
        {
            return base.Clone();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN20wxClipboardTextEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClipboardTextEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxClipboardTextEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClipboardTextEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClipboardTextEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClipboardTextEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClipboardTextEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxClipboardTextEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxContextMenuEvent : wxCommandEvent, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 88)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_eventObject;

            [FieldOffset(12)]
            public int m_eventType;

            [FieldOffset(16)]
            public int m_timeStamp;

            [FieldOffset(20)]
            public int m_id;

            [FieldOffset(24)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(28)]
            public global::System.IntPtr m_handlerToProcessOnlyIn;

            [FieldOffset(32)]
            public int m_propagationLevel;

            [FieldOffset(36)]
            public global::System.IntPtr m_propagatedFrom;

            [FieldOffset(40)]
            public byte m_skipped;

            [FieldOffset(41)]
            public byte m_isCommandEvent;

            [FieldOffset(42)]
            public byte m_wasProcessed;

            [FieldOffset(43)]
            public byte m_willBeProcessedAgain;

            [FieldOffset(0)]
            public wxString.Internal m_cmdString;

            [FieldOffset(20)]
            public int m_commandInt;

            [FieldOffset(24)]
            public int m_extraLong;

            [FieldOffset(72)]
            public global::System.IntPtr m_clientData;

            [FieldOffset(76)]
            public global::System.IntPtr m_clientObject;

            [FieldOffset(80)]
            public wxPoint.Internal m_pos;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxContextMenuEventC2EiiRK7wxPoint")]
            internal static extern void ctor_0(global::System.IntPtr instance, int type, int winid, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxContextMenuEventC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK18wxContextMenuEvent11GetPositionEv")]
            internal static extern global::System.IntPtr GetPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxContextMenuEvent11SetPositionERK7wxPoint")]
            internal static extern void SetPosition_0(global::System.IntPtr instance, global::System.IntPtr pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxContextMenuEvent14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxContextMenuEvent __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxContextMenuEvent(native.ToPointer(), skipVTables);
        }

        public static wxContextMenuEvent __CreateInstance(wxContextMenuEvent.Internal native, bool skipVTables = false)
        {
            return new wxContextMenuEvent(native, skipVTables);
        }

        private static void* __CopyValue(wxContextMenuEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(88);
            wxContextMenuEvent.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxContextMenuEvent(wxContextMenuEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxContextMenuEvent(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxContextMenuEvent(int type, int winid, wxPoint pt)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(88);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg2 = pt.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), type, winid, arg2);
            SetupVTables(GetType().FullName == "wxSharp.wxContextMenuEvent");
        }

        public wxContextMenuEvent(wxContextMenuEvent @event)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(88);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxContextMenuEvent");
        }

        public wxPoint GetPosition()
        {
            var __ret = Internal.GetPosition_0((__Instance + __PointerAdjustment));
            wxPoint __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPoint.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPoint) wxPoint.NativeToManagedMap[__ret];
            else __result0 = wxPoint.__CreateInstance(__ret);
            return __result0;
        }

        public void SetPosition(wxPoint pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pos.__Instance;
            Internal.SetPosition_0((__Instance + __PointerAdjustment), arg0);
        }

        public override wxEvent Clone()
        {
            return base.Clone();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN18wxContextMenuEvent12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected wxPoint m_pos
        {
            get
            {
                return wxPoint.__CreateInstance(((Internal*) __Instance)->m_pos);
            }

            set
            {
                ((Internal*) __Instance)->m_pos = ReferenceEquals(value, null) ? new wxPoint.Internal() : *(wxPoint.Internal*) (value.__Instance);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxContextMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxContextMenuEvent
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxContextMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxContextMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxContextMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEvent *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxContextMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventCategory GetEventCategory() const wxOVERRIDE
        private static Delegates.Func_wxEventCategory_IntPtr _GetEventCategory_0DelegateInstance;

        private static wxEventCategory _GetEventCategory_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxContextMenuEvent) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventCategory();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[6];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _GetEventCategory_0DelegateInstance += _GetEventCategory_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetEventCategory_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(9 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxEventTableEntryBase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int m_id;

            [FieldOffset(4)]
            public int m_lastId;

            [FieldOffset(8)]
            public global::System.IntPtr m_fn;

            [FieldOffset(12)]
            public global::System.IntPtr m_callbackUserData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxEventTableEntryBaseC2EiiP14wxEventFunctorP8wxObject")]
            internal static extern void ctor_0(global::System.IntPtr instance, int winid, int idLast, global::System.IntPtr fn, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxEventTableEntryBaseC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr entry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxEventTableEntryBaseD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventTableEntryBase> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventTableEntryBase>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxEventTableEntryBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventTableEntryBase(native.ToPointer(), skipVTables);
        }

        public static wxEventTableEntryBase __CreateInstance(wxEventTableEntryBase.Internal native, bool skipVTables = false)
        {
            return new wxEventTableEntryBase(native, skipVTables);
        }

        private static void* __CopyValue(wxEventTableEntryBase.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxEventTableEntryBase.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxEventTableEntryBase(wxEventTableEntryBase.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventTableEntryBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxEventTableEntryBase(int winid, int idLast, wxEventFunctor fn, wxObject data)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg2 = ReferenceEquals(fn, null) ? global::System.IntPtr.Zero : fn.__Instance;
            var arg3 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), winid, idLast, arg2, arg3);
        }

        public wxEventTableEntryBase(wxEventTableEntryBase entry)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(entry, null))
                throw new global::System.ArgumentNullException("entry", "Cannot be null because it is a C++ reference (&).");
            var arg0 = entry.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxEventTableEntryBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int m_id
        {
            get
            {
                return ((Internal*) __Instance)->m_id;
            }

            set
            {
                ((Internal*) __Instance)->m_id = value;
            }
        }

        public int m_lastId
        {
            get
            {
                return ((Internal*) __Instance)->m_lastId;
            }

            set
            {
                ((Internal*) __Instance)->m_lastId = value;
            }
        }

        public wxEventFunctor m_fn
        {
            get
            {
                wxEventFunctor __result0;
                if (((Internal*) __Instance)->m_fn == IntPtr.Zero) __result0 = null;
                else if (wxEventFunctor.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_fn))
                    __result0 = (wxEventFunctor) wxEventFunctor.NativeToManagedMap[((Internal*) __Instance)->m_fn];
                else wxEventFunctor.NativeToManagedMap[((Internal*) __Instance)->m_fn] = __result0 = (wxEventFunctor) wxEventFunctor.__CreateInstance(((Internal*) __Instance)->m_fn);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_fn = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public wxObject m_callbackUserData
        {
            get
            {
                wxObject __result0;
                if (((Internal*) __Instance)->m_callbackUserData == IntPtr.Zero) __result0 = null;
                else if (wxObject.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_callbackUserData))
                    __result0 = (wxObject) wxObject.NativeToManagedMap[((Internal*) __Instance)->m_callbackUserData];
                else wxObject.NativeToManagedMap[((Internal*) __Instance)->m_callbackUserData] = __result0 = (wxObject) wxObject.__CreateInstance(((Internal*) __Instance)->m_callbackUserData);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_callbackUserData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class wxEventTableEntry : wxEventTableEntryBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public int m_id;

            [FieldOffset(4)]
            public int m_lastId;

            [FieldOffset(8)]
            public global::System.IntPtr m_fn;

            [FieldOffset(12)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(16)]
            public int* m_eventType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEventTableEntryC2ERKiiiP14wxEventFunctorP8wxObject")]
            internal static extern void ctor_0(global::System.IntPtr instance, int* evType, int winid, int idLast, global::System.IntPtr fn, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEventTableEntryC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEventTableEntryD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public static new wxEventTableEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventTableEntry(native.ToPointer(), skipVTables);
        }

        public static wxEventTableEntry __CreateInstance(wxEventTableEntry.Internal native, bool skipVTables = false)
        {
            return new wxEventTableEntry(native, skipVTables);
        }

        private static void* __CopyValue(wxEventTableEntry.Internal native)
        {
            var ret = Marshal.AllocHGlobal(20);
            wxEventTableEntry.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxEventTableEntry(wxEventTableEntry.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventTableEntry(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxEventTableEntry(ref int evType, int winid, int idLast, wxEventFunctor fn, wxObject data)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr0 = &evType)
            {
                var arg0 = __refParamPtr0;
                var arg3 = ReferenceEquals(fn, null) ? global::System.IntPtr.Zero : fn.__Instance;
                var arg4 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, winid, idLast, arg3, arg4);
            }
        }

        public wxEventTableEntry(wxEventTableEntry _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxEventTableEntryBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int* m_eventType
        {
            get
            {
                return ((Internal*) __Instance)->m_eventType;
            }

            set
            {
                ((Internal*) __Instance)->m_eventType = value;
            }
        }
    }

    public unsafe partial class wxDynamicEventTableEntry : wxEventTableEntryBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public int m_id;

            [FieldOffset(4)]
            public int m_lastId;

            [FieldOffset(8)]
            public global::System.IntPtr m_fn;

            [FieldOffset(12)]
            public global::System.IntPtr m_callbackUserData;

            [FieldOffset(16)]
            public int m_eventType;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxDynamicEventTableEntryC2EiiiP14wxEventFunctorP8wxObject")]
            internal static extern void ctor_0(global::System.IntPtr instance, int evType, int winid, int idLast, global::System.IntPtr fn, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxDynamicEventTableEntryC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxDynamicEventTableEntryD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public static new wxDynamicEventTableEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxDynamicEventTableEntry(native.ToPointer(), skipVTables);
        }

        public static wxDynamicEventTableEntry __CreateInstance(wxDynamicEventTableEntry.Internal native, bool skipVTables = false)
        {
            return new wxDynamicEventTableEntry(native, skipVTables);
        }

        private static void* __CopyValue(wxDynamicEventTableEntry.Internal native)
        {
            var ret = Marshal.AllocHGlobal(20);
            wxDynamicEventTableEntry.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxDynamicEventTableEntry(wxDynamicEventTableEntry.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxDynamicEventTableEntry(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxDynamicEventTableEntry(int evType, int winid, int idLast, wxEventFunctor fn, wxObject data)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg3 = ReferenceEquals(fn, null) ? global::System.IntPtr.Zero : fn.__Instance;
            var arg4 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), evType, winid, idLast, arg3, arg4);
        }

        public wxDynamicEventTableEntry(wxDynamicEventTableEntry _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxEventTableEntryBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int m_eventType
        {
            get
            {
                return ((Internal*) __Instance)->m_eventType;
            }

            set
            {
                ((Internal*) __Instance)->m_eventType = value;
            }
        }
    }

    public unsafe partial class wxEventTable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr baseTable;

            [FieldOffset(4)]
            public global::System.IntPtr entries;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEventTableC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventTable> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventTable>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxEventTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventTable(native.ToPointer(), skipVTables);
        }

        public static wxEventTable __CreateInstance(wxEventTable.Internal native, bool skipVTables = false)
        {
            return new wxEventTable(native, skipVTables);
        }

        private static void* __CopyValue(wxEventTable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxEventTable.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxEventTable(wxEventTable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxEventTable()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxEventTable(wxEventTable _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxEventTable.Internal*) __Instance) = *((wxEventTable.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxEventTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxEventTable baseTable
        {
            get
            {
                wxEventTable __result0;
                if (((Internal*) __Instance)->baseTable == IntPtr.Zero) __result0 = null;
                else if (wxEventTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->baseTable))
                    __result0 = (wxEventTable) wxEventTable.NativeToManagedMap[((Internal*) __Instance)->baseTable];
                else __result0 = wxEventTable.__CreateInstance(((Internal*) __Instance)->baseTable);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->baseTable = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public wxEventTableEntry entries
        {
            get
            {
                wxEventTableEntry __result0;
                if (((Internal*) __Instance)->entries == IntPtr.Zero) __result0 = null;
                else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->entries))
                    __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[((Internal*) __Instance)->entries];
                else __result0 = wxEventTableEntry.__CreateInstance(((Internal*) __Instance)->entries);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->entries = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class wxAssert_wxEventTableEntryPointerArray : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint TypeTooBigToBeStoredInwxBaseArrayPtrVoid;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN38wxAssert_wxEventTableEntryPointerArrayC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxEventTableEntryPointerArray> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxEventTableEntryPointerArray>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_wxEventTableEntryPointerArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_wxEventTableEntryPointerArray(native.ToPointer(), skipVTables);
        }

        public static wxAssert_wxEventTableEntryPointerArray __CreateInstance(wxAssert_wxEventTableEntryPointerArray.Internal native, bool skipVTables = false)
        {
            return new wxAssert_wxEventTableEntryPointerArray(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_wxEventTableEntryPointerArray.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_wxEventTableEntryPointerArray.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_wxEventTableEntryPointerArray(wxAssert_wxEventTableEntryPointerArray.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_wxEventTableEntryPointerArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_wxEventTableEntryPointerArray()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_wxEventTableEntryPointerArray(wxAssert_wxEventTableEntryPointerArray _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_wxEventTableEntryPointerArray.Internal*) __Instance) = *((wxAssert_wxEventTableEntryPointerArray.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_wxEventTableEntryPointerArray __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint TypeTooBigToBeStoredInwxBaseArrayPtrVoid
        {
            get
            {
                return ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayPtrVoid;
            }

            set
            {
                ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayPtrVoid = value;
            }
        }
    }

    public unsafe partial class wxEventTableEntryPointerArray : wxBaseArrayPtrVoid, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public global::System.IntPtr m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArrayC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArrayC2Em")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArrayC2EmRKPK17wxEventTableEntry")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArrayC2EPKPK17wxEventTableEntryS4_")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArrayC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArrayD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK29wxEventTableEntryPointerArray4ItemEm")]
            internal static extern global::System.IntPtr Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK29wxEventTableEntryPointerArray4LastEv")]
            internal static extern global::System.IntPtr Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK29wxEventTableEntryPointerArray5IndexEPK17wxEventTableEntryb")]
            internal static extern int Index_0(global::System.IntPtr instance, global::System.IntPtr lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray3AddEPK17wxEventTableEntrym")]
            internal static extern void Add_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray6InsertEPK17wxEventTableEntrymm")]
            internal static extern void Insert_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray6RemoveEPK17wxEventTableEntry")]
            internal static extern void Remove_0(global::System.IntPtr instance, global::System.IntPtr lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray4SortEPFiPPK17wxEventTableEntryS3_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fCmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray6assignEPKPK17wxEventTableEntryS4_")]
            internal static extern void assign_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray6assignEmRKPK17wxEventTableEntry")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray4backEv")]
            internal static extern global::System.IntPtr back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray5beginEv")]
            internal static extern global::System.IntPtr begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK29wxEventTableEntryPointerArray8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray3endEv")]
            internal static extern global::System.IntPtr end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray5eraseEPPK17wxEventTableEntryS3_")]
            internal static extern global::System.IntPtr erase_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray5eraseEPPK17wxEventTableEntry")]
            internal static extern global::System.IntPtr erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray5frontEv")]
            internal static extern global::System.IntPtr front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray6insertEPPK17wxEventTableEntrymRKS2_")]
            internal static extern void insert_0(global::System.IntPtr instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray6insertEPPK17wxEventTableEntryRKS2_")]
            internal static extern global::System.IntPtr insert_1(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray6insertEPPK17wxEventTableEntryPKS2_S5_")]
            internal static extern void insert_2(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray9push_backERKPK17wxEventTableEntry")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray6rbeginEv")]
            internal static extern void rbegin_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray4rendEv")]
            internal static extern void rend_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray6resizeEmPK17wxEventTableEntry")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN29wxEventTableEntryPointerArray4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK29wxEventTableEntryPointerArrayixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN29wxEventTableEntryPointerArray16reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxEventTableEntryPointerArray.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN29wxEventTableEntryPointerArray22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN29wxEventTableEntryPointerArray22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxEventTableEntryPointerArray.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxEventTableEntryPointerArray.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public static new wxEventTableEntryPointerArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventTableEntryPointerArray(native.ToPointer(), skipVTables);
        }

        public static wxEventTableEntryPointerArray __CreateInstance(wxEventTableEntryPointerArray.Internal native, bool skipVTables = false)
        {
            return new wxEventTableEntryPointerArray(native, skipVTables);
        }

        private static void* __CopyValue(wxEventTableEntryPointerArray.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxEventTableEntryPointerArray.Internal.cctor_4(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxEventTableEntryPointerArray(wxEventTableEntryPointerArray.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventTableEntryPointerArray(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxEventTableEntryPointerArray()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxEventTableEntryPointerArray(uint n)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), n);
        }

        public wxEventTableEntryPointerArray(uint n, wxEventTableEntry v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxEventTableEntryPointerArray(wxEventTableEntry first, wxEventTableEntry last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxEventTableEntryPointerArray(wxEventTableEntryPointerArray _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_4((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxBaseArrayPtrVoid __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxEventTableEntry Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            wxEventTableEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
            else __result0 = wxEventTableEntry.__CreateInstance(__ret);
            return __result0;
        }

        public wxEventTableEntry Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            wxEventTableEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
            else __result0 = wxEventTableEntry.__CreateInstance(__ret);
            return __result0;
        }

        public int Index(wxEventTableEntry lItem, bool bFromEnd)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        public void Add(wxEventTableEntry lItem, uint nInsert)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            Internal.Add_0((__Instance + __PointerAdjustment), arg0, nInsert);
        }

        public void Insert(wxEventTableEntry lItem, uint uiIndex, uint nInsert)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            Internal.Insert_0((__Instance + __PointerAdjustment), arg0, uiIndex, nInsert);
        }

        public void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        public void Remove(wxEventTableEntry lItem)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            Internal.Remove_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Sort(CMPFUNC_wxArraywxEventTableEntryPointerArray fCmp)
        {
            var arg0 = fCmp == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fCmp);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void assign(wxEventTableEntry first, wxEventTableEntry last)
        {
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void assign(uint n, wxEventTableEntry v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxEventTableEntry back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            wxEventTableEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
            else __result0 = wxEventTableEntry.__CreateInstance(__ret);
            return __result0;
        }

        public wxEventTableEntry begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            wxEventTableEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
            else __result0 = wxEventTableEntry.__CreateInstance(__ret);
            return __result0;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxEventTableEntry end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            wxEventTableEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
            else __result0 = wxEventTableEntry.__CreateInstance(__ret);
            return __result0;
        }

        public wxEventTableEntry erase(wxEventTableEntry first, wxEventTableEntry last)
        {
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
            wxEventTableEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
            else __result0 = wxEventTableEntry.__CreateInstance(__ret);
            return __result0;
        }

        public wxEventTableEntry erase(wxEventTableEntry it)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
            wxEventTableEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
            else __result0 = wxEventTableEntry.__CreateInstance(__ret);
            return __result0;
        }

        public wxEventTableEntry front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            wxEventTableEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
            else __result0 = wxEventTableEntry.__CreateInstance(__ret);
            return __result0;
        }

        public void insert(wxEventTableEntry it, uint n, wxEventTableEntry v)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg2 = v.__Instance;
            Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
        }

        public wxEventTableEntry insert(wxEventTableEntry it, wxEventTableEntry v)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
            wxEventTableEntry __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
            else __result0 = wxEventTableEntry.__CreateInstance(__ret);
            return __result0;
        }

        public void insert(wxEventTableEntry it, wxEventTableEntry first, wxEventTableEntry last)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            var arg1 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg2 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void push_back(wxEventTableEntry v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxEventTableEntryPointerArray.reverse_iterator rbegin()
        {
            var __ret = new wxEventTableEntryPointerArray.reverse_iterator.Internal();
            Internal.rbegin_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxEventTableEntryPointerArray.reverse_iterator.__CreateInstance(__ret);
        }

        public wxEventTableEntryPointerArray.reverse_iterator rend()
        {
            var __ret = new wxEventTableEntryPointerArray.reverse_iterator.Internal();
            Internal.rend_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxEventTableEntryPointerArray.reverse_iterator.__CreateInstance(__ret);
        }

        public void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        public void resize(uint n, wxEventTableEntry v)
        {
            var arg1 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            Internal.resize_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public void swap(wxEventTableEntryPointerArray other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxEventTableEntry this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                wxEventTableEntry __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxEventTableEntry) wxEventTableEntry.NativeToManagedMap[__ret];
                else __result0 = wxEventTableEntry.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                *(wxEventTableEntry.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = *(wxEventTableEntry.Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class wxEventHashTable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public byte m_rebuildHash;

            [FieldOffset(8)]
            public uint m_size;

            [FieldOffset(12)]
            public global::System.IntPtr m_eventTypeTable;

            [FieldOffset(16)]
            public global::System.IntPtr m_previous;

            [FieldOffset(20)]
            public global::System.IntPtr m_next;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxEventHashTableC2ERK12wxEventTable")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr table);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxEventHashTableD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxEventHashTable11HandleEventER7wxEventP12wxEvtHandler")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HandleEvent_0(global::System.IntPtr instance, global::System.IntPtr @event, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxEventHashTable5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxEventHashTable13InitHashTableEv")]
            internal static extern void InitHashTable_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxEventHashTable8AddEntryERK17wxEventTableEntry")]
            internal static extern void AddEntry_0(global::System.IntPtr instance, global::System.IntPtr entry);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxEventHashTable19AllocEventTypeTableEm")]
            internal static extern void AllocEventTypeTable_0(global::System.IntPtr instance, uint size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxEventHashTable18GrowEventTypeTableEv")]
            internal static extern void GrowEventTypeTable_0(global::System.IntPtr instance);
        }

        internal unsafe partial class EventTypeTable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public int eventType;

                [FieldOffset(4)]
                public wxEventTableEntryPointerArray.Internal eventEntryTable;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventHashTable> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxEventHashTable>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxEventHashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventHashTable(native.ToPointer(), skipVTables);
        }

        public static wxEventHashTable __CreateInstance(wxEventHashTable.Internal native, bool skipVTables = false)
        {
            return new wxEventHashTable(native, skipVTables);
        }

        private static void* __CopyValue(wxEventHashTable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            *(wxEventHashTable.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxEventHashTable(wxEventHashTable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventHashTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxEventHashTable(wxEventTable table)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(table, null))
                throw new global::System.ArgumentNullException("table", "Cannot be null because it is a C++ reference (&).");
            var arg0 = table.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxEventHashTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool HandleEvent(wxEvent @event, wxEvtHandler self)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = Internal.HandleEvent_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        protected void InitHashTable()
        {
            Internal.InitHashTable_0((__Instance + __PointerAdjustment));
        }

        protected void AddEntry(wxEventTableEntry entry)
        {
            if (ReferenceEquals(entry, null))
                throw new global::System.ArgumentNullException("entry", "Cannot be null because it is a C++ reference (&).");
            var arg0 = entry.__Instance;
            Internal.AddEntry_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void AllocEventTypeTable(uint size)
        {
            Internal.AllocEventTypeTable_0((__Instance + __PointerAdjustment), size);
        }

        protected void GrowEventTypeTable()
        {
            Internal.GrowEventTypeTable_0((__Instance + __PointerAdjustment));
        }

        protected wxEventTable m_table
        {
            get
            {
                wxEventTable __result0;
                if (((Internal*) __Instance)->m_table == IntPtr.Zero) __result0 = null;
                else if (wxEventTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_table))
                    __result0 = (wxEventTable) wxEventTable.NativeToManagedMap[((Internal*) __Instance)->m_table];
                else __result0 = wxEventTable.__CreateInstance(((Internal*) __Instance)->m_table);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                ((Internal*) __Instance)->m_table = value.__Instance;
            }
        }

        protected bool m_rebuildHash
        {
            get
            {
                return ((Internal*) __Instance)->m_rebuildHash != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_rebuildHash = (byte) (value ? 1 : 0);
            }
        }

        protected uint m_size
        {
            get
            {
                return ((Internal*) __Instance)->m_size;
            }

            set
            {
                ((Internal*) __Instance)->m_size = value;
            }
        }

        protected wxEventHashTable m_previous
        {
            get
            {
                wxEventHashTable __result0;
                if (((Internal*) __Instance)->m_previous == IntPtr.Zero) __result0 = null;
                else if (wxEventHashTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_previous))
                    __result0 = (wxEventHashTable) wxEventHashTable.NativeToManagedMap[((Internal*) __Instance)->m_previous];
                else __result0 = wxEventHashTable.__CreateInstance(((Internal*) __Instance)->m_previous);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_previous = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected wxEventHashTable m_next
        {
            get
            {
                wxEventHashTable __result0;
                if (((Internal*) __Instance)->m_next == IntPtr.Zero) __result0 = null;
                else if (wxEventHashTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_next))
                    __result0 = (wxEventHashTable) wxEventHashTable.NativeToManagedMap[((Internal*) __Instance)->m_next];
                else __result0 = wxEventHashTable.__CreateInstance(((Internal*) __Instance)->m_next);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class wxEvtHandler : wxObject, wxTrackable, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_first;

            [FieldOffset(12)]
            public global::System.IntPtr m_nextHandler;

            [FieldOffset(16)]
            public global::System.IntPtr m_previousHandler;

            [FieldOffset(20)]
            public global::System.IntPtr m_dynamicEvents;

            [FieldOffset(24)]
            public global::System.IntPtr m_pendingEvents;

            [FieldOffset(28)]
            public wxCriticalSection.Internal m_pendingEventsLock;

            [FieldOffset(32)]
            public byte m_enabled;

            [FieldOffset(36)]
            internal wxEvtHandler._.Internal __;

            [FieldOffset(40)]
            public wxClientDataType m_clientDataType;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandlerC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler14GetNextHandlerEv")]
            internal static extern global::System.IntPtr GetNextHandler_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler18GetPreviousHandlerEv")]
            internal static extern global::System.IntPtr GetPreviousHandler_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler20SetEvtHandlerEnabledEb")]
            internal static extern void SetEvtHandlerEnabled_0(global::System.IntPtr instance, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler20GetEvtHandlerEnabledEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetEvtHandlerEnabled_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler6UnlinkEv")]
            internal static extern void Unlink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler10IsUnlinkedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsUnlinked_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler9AddFilterEP13wxEventFilter")]
            internal static extern void AddFilter_0(global::System.IntPtr filter);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler12RemoveFilterEP13wxEventFilter")]
            internal static extern void RemoveFilter_0(global::System.IntPtr filter);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18SafelyProcessEventER7wxEvent")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SafelyProcessEvent_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ProcessEventLocallyER7wxEvent")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ProcessEventLocally_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler20ProcessPendingEventsEv")]
            internal static extern void ProcessPendingEvents_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19DeletePendingEventsEv")]
            internal static extern void DeletePendingEvents_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler18ProcessThreadEventERK7wxEvent")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ProcessThreadEvent_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler15SetClientObjectEP12wxClientData")]
            internal static extern void SetClientObject_0(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler15GetClientObjectEv")]
            internal static extern global::System.IntPtr GetClientObject_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler13SetClientDataEPv")]
            internal static extern void SetClientData_0(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler13GetClientDataEv")]
            internal static extern global::System.IntPtr GetClientData_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler23ProcessEventIfMatchesIdERK21wxEventTableEntryBasePS_R7wxEvent")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ProcessEventIfMatchesId_0(global::System.IntPtr tableEntry, global::System.IntPtr handler, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler20GetFirstDynamicEntryERm")]
            internal static extern global::System.IntPtr GetFirstDynamicEntry_0(global::System.IntPtr instance, uint* cookie);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxEvtHandler19GetNextDynamicEntryERm")]
            internal static extern global::System.IntPtr GetNextDynamicEntry_0(global::System.IntPtr instance, uint* cookie);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler23SearchDynamicEventTableER7wxEvent")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SearchDynamicEventTable_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler19ClearEventHashTableEv")]
            internal static extern void ClearEventHashTable_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler15OnSinkDestroyedEPS_")]
            internal static extern void OnSinkDestroyed_0(global::System.IntPtr instance, global::System.IntPtr sink);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler11TryHereOnlyER7wxEvent")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool TryHereOnly_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler16TryBeforeAndHereER7wxEvent")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool TryBeforeAndHere_0(global::System.IntPtr instance, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler20FindRefInTrackerListEPS_")]
            internal static extern global::System.IntPtr FindRefInTrackerList_0(global::System.IntPtr instance, global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxEvtHandler14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void __AnonymousDelegate0(global::System.IntPtr _0);

        protected internal unsafe partial struct _
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_clientObject;

                [FieldOffset(0)]
                public global::System.IntPtr m_clientData;
            }
        }

        public static new wxEvtHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEvtHandler(native.ToPointer(), skipVTables);
        }

        public static wxEvtHandler __CreateInstance(wxEvtHandler.Internal native, bool skipVTables = false)
        {
            return new wxEvtHandler(native, skipVTables);
        }

        private static void* __CopyValue(wxEvtHandler.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            *(wxEvtHandler.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxEvtHandler(wxEvtHandler.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEvtHandler(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxEvtHandler()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxEvtHandler");
        }

        public wxEvtHandler GetNextHandler()
        {
            var __ret = Internal.GetNextHandler_0((__Instance + __PointerAdjustment));
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public wxEvtHandler GetPreviousHandler()
        {
            var __ret = Internal.GetPreviousHandler_0((__Instance + __PointerAdjustment));
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public virtual void SetNextHandler(wxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___SetNextHandler_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__Instance;
            ___SetNextHandler_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public virtual void SetPreviousHandler(wxEvtHandler handler)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___SetPreviousHandler_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__Instance;
            ___SetPreviousHandler_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public void SetEvtHandlerEnabled(bool enabled)
        {
            Internal.SetEvtHandlerEnabled_0((__Instance + __PointerAdjustment), enabled);
        }

        public bool GetEvtHandlerEnabled()
        {
            var __ret = Internal.GetEvtHandlerEnabled_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Unlink()
        {
            Internal.Unlink_0((__Instance + __PointerAdjustment));
        }

        public bool IsUnlinked()
        {
            var __ret = Internal.IsUnlinked_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual bool ProcessEvent(wxEvent @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___ProcessEvent_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = ___ProcessEvent_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool SafelyProcessEvent(wxEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = Internal.SafelyProcessEvent_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool ProcessEventLocally(wxEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = Internal.ProcessEventLocally_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public virtual void QueueEvent(wxEvent @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___QueueEvent_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            ___QueueEvent_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public virtual void AddPendingEvent(wxEvent @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___AddPendingEvent_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            ___AddPendingEvent_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public void ProcessPendingEvents()
        {
            Internal.ProcessPendingEvents_0((__Instance + __PointerAdjustment));
        }

        public void DeletePendingEvents()
        {
            Internal.DeletePendingEvents_0((__Instance + __PointerAdjustment));
        }

        public bool ProcessThreadEvent(wxEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = Internal.ProcessThreadEvent_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void SetClientObject(wxClientData data)
        {
            var arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            Internal.SetClientObject_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxClientData GetClientObject()
        {
            var __ret = Internal.GetClientObject_0((__Instance + __PointerAdjustment));
            wxClientData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClientData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClientData) wxClientData.NativeToManagedMap[__ret];
            else wxClientData.NativeToManagedMap[__ret] = __result0 = (wxClientData) wxClientData.__CreateInstance(__ret);
            return __result0;
        }

        public void SetClientData(global::System.IntPtr data)
        {
            var arg0 = data;
            Internal.SetClientData_0((__Instance + __PointerAdjustment), arg0);
        }

        public global::System.IntPtr GetClientData()
        {
            var __ret = Internal.GetClientData_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxDynamicEventTableEntry GetFirstDynamicEntry(ref uint cookie)
        {
            fixed (uint* __refParamPtr0 = &cookie)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.GetFirstDynamicEntry_0((__Instance + __PointerAdjustment), arg0);
                wxDynamicEventTableEntry __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxDynamicEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxDynamicEventTableEntry) wxDynamicEventTableEntry.NativeToManagedMap[__ret];
                else __result0 = wxDynamicEventTableEntry.__CreateInstance(__ret);
                return __result0;
            }
        }

        public wxDynamicEventTableEntry GetNextDynamicEntry(ref uint cookie)
        {
            fixed (uint* __refParamPtr0 = &cookie)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.GetNextDynamicEntry_0((__Instance + __PointerAdjustment), arg0);
                wxDynamicEventTableEntry __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxDynamicEventTableEntry.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxDynamicEventTableEntry) wxDynamicEventTableEntry.NativeToManagedMap[__ret];
                else __result0 = wxDynamicEventTableEntry.__CreateInstance(__ret);
                return __result0;
            }
        }

        public virtual bool SearchEventTable(wxEventTable table, wxEvent @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___SearchEventTable_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(table, null))
                throw new global::System.ArgumentNullException("table", "Cannot be null because it is a C++ reference (&).");
            var arg0 = table.__Instance;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg1 = @event.__Instance;
            var __ret = ___SearchEventTable_0Delegate((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool SearchDynamicEventTable(wxEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = Internal.SearchDynamicEventTable_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void ClearEventHashTable()
        {
            Internal.ClearEventHashTable_0((__Instance + __PointerAdjustment));
        }

        public void OnSinkDestroyed(wxEvtHandler sink)
        {
            var arg0 = ReferenceEquals(sink, null) ? global::System.IntPtr.Zero : sink.__Instance;
            Internal.OnSinkDestroyed_0((__Instance + __PointerAdjustment), arg0);
        }

        protected virtual bool TryBefore(wxEvent @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___TryBefore_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = ___TryBefore_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected bool TryHereOnly(wxEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = Internal.TryHereOnly_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected bool TryBeforeAndHere(wxEvent @event)
        {
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = Internal.TryBeforeAndHere_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected virtual bool TryAfter(wxEvent @event)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___TryAfter_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @event.__Instance;
            var __ret = ___TryAfter_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected virtual bool OnDynamicBind(wxDynamicEventTableEntry _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___OnDynamicBind_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            var __ret = ___OnDynamicBind_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected virtual wxEventTable GetEventTable()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___GetEventTable_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetEventTable_0Delegate((__Instance + __PointerAdjustment));
            wxEventTable __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventTable.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventTable) wxEventTable.NativeToManagedMap[__ret];
            else __result0 = wxEventTable.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual wxEventHashTable GetEventHashTable()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___GetEventHashTable_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___GetEventHashTable_0Delegate((__Instance + __PointerAdjustment));
            wxEventHashTable __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventHashTable.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventHashTable) wxEventHashTable.NativeToManagedMap[__ret];
            else __result0 = wxEventHashTable.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual void DoSetClientObject(wxClientData data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___DoSetClientObject_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            ___DoSetClientObject_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        protected virtual wxClientData DoGetClientObject()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___DoGetClientObject_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___DoGetClientObject_0Delegate((__Instance + __PointerAdjustment));
            wxClientData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClientData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClientData) wxClientData.NativeToManagedMap[__ret];
            else wxClientData.NativeToManagedMap[__ret] = __result0 = (wxClientData) wxClientData.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual void DoSetClientData(global::System.IntPtr data)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___DoSetClientData_0Delegate = (Delegates.Action_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr));
            var arg0 = data;
            ___DoSetClientData_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        protected virtual global::System.IntPtr DoGetClientData()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 19 * 4);
            var ___DoGetClientData_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___DoGetClientData_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected wxEventConnectionRef FindRefInTrackerList(wxEvtHandler handler)
        {
            var arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__Instance;
            var __ret = Internal.FindRefInTrackerList_0((__Instance + __PointerAdjustment), arg0);
            wxEventConnectionRef __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventConnectionRef.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventConnectionRef) wxEventConnectionRef.NativeToManagedMap[__ret];
            else wxEventConnectionRef.NativeToManagedMap[__ret] = __result0 = (wxEventConnectionRef) wxEventConnectionRef.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static void AddFilter(wxEventFilter filter)
        {
            var arg0 = ReferenceEquals(filter, null) ? global::System.IntPtr.Zero : filter.__Instance;
            Internal.AddFilter_0(arg0);
        }

        public static void RemoveFilter(wxEventFilter filter)
        {
            var arg0 = ReferenceEquals(filter, null) ? global::System.IntPtr.Zero : filter.__Instance;
            Internal.RemoveFilter_0(arg0);
        }

        public static bool ProcessEventIfMatchesId(wxEventTableEntryBase tableEntry, wxEvtHandler handler, wxEvent @event)
        {
            if (ReferenceEquals(tableEntry, null))
                throw new global::System.ArgumentNullException("tableEntry", "Cannot be null because it is a C++ reference (&).");
            var arg0 = tableEntry.__Instance;
            var arg1 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__Instance;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg2 = @event.__Instance;
            var __ret = Internal.ProcessEventIfMatchesId_0(arg0, arg1, arg2);
            return __ret;
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN12wxEvtHandler12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected wxEvtHandler m_nextHandler
        {
            get
            {
                wxEvtHandler __result0;
                if (((Internal*) __Instance)->m_nextHandler == IntPtr.Zero) __result0 = null;
                else if (wxEvtHandler.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_nextHandler))
                    __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[((Internal*) __Instance)->m_nextHandler];
                else wxEvtHandler.NativeToManagedMap[((Internal*) __Instance)->m_nextHandler] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(((Internal*) __Instance)->m_nextHandler);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_nextHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected wxEvtHandler m_previousHandler
        {
            get
            {
                wxEvtHandler __result0;
                if (((Internal*) __Instance)->m_previousHandler == IntPtr.Zero) __result0 = null;
                else if (wxEvtHandler.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_previousHandler))
                    __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[((Internal*) __Instance)->m_previousHandler];
                else wxEvtHandler.NativeToManagedMap[((Internal*) __Instance)->m_previousHandler] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(((Internal*) __Instance)->m_previousHandler);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_previousHandler = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected wxList m_pendingEvents
        {
            get
            {
                wxList __result0;
                if (((Internal*) __Instance)->m_pendingEvents == IntPtr.Zero) __result0 = null;
                else if (wxList.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_pendingEvents))
                    __result0 = (wxList) wxList.NativeToManagedMap[((Internal*) __Instance)->m_pendingEvents];
                else wxList.NativeToManagedMap[((Internal*) __Instance)->m_pendingEvents] = __result0 = (wxList) wxList.__CreateInstance(((Internal*) __Instance)->m_pendingEvents);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_pendingEvents = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected wxCriticalSection m_pendingEventsLock
        {
            get
            {
                return wxCriticalSection.__CreateInstance(((Internal*) __Instance)->m_pendingEventsLock);
            }

            set
            {
                ((Internal*) __Instance)->m_pendingEventsLock = ReferenceEquals(value, null) ? new wxCriticalSection.Internal() : *(wxCriticalSection.Internal*) (value.__Instance);
            }
        }

        protected bool m_enabled
        {
            get
            {
                return ((Internal*) __Instance)->m_enabled != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_enabled = (byte) (value ? 1 : 0);
            }
        }

        protected wxClientDataType m_clientDataType
        {
            get
            {
                return ((Internal*) __Instance)->m_clientDataType;
            }

            set
            {
                ((Internal*) __Instance)->m_clientDataType = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxEvtHandler()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetNextHandler(wxEvtHandler *handler)
        private static Delegates.Action_IntPtr_IntPtr _SetNextHandler_0DelegateInstance;

        private static void _SetNextHandler_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[handler];
            else __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetNextHandler(__result0);
        }

        // void SetPreviousHandler(wxEvtHandler *handler)
        private static Delegates.Action_IntPtr_IntPtr _SetPreviousHandler_0DelegateInstance;

        private static void _SetPreviousHandler_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[handler];
            else __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetPreviousHandler(__result0);
        }

        // bool ProcessEvent(wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr _ProcessEvent_0DelegateInstance;

        private static bool _ProcessEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.ProcessEvent(__result0);
            return __ret;
        }

        // void QueueEvent(wxEvent *event)
        private static Delegates.Action_IntPtr_IntPtr _QueueEvent_0DelegateInstance;

        private static void _QueueEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            __target.QueueEvent(__result0);
        }

        // void AddPendingEvent(const wxEvent& event)
        private static Delegates.Action_IntPtr_IntPtr _AddPendingEvent_0DelegateInstance;

        private static void _AddPendingEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            __target.AddPendingEvent(__result0);
        }

        // bool SearchEventTable(wxEventTable& table, wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr _SearchEventTable_0DelegateInstance;

        private static bool _SearchEventTable_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr table, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEventTable __result0;
            if (table == IntPtr.Zero) __result0 = null;
            else if (wxEventTable.NativeToManagedMap.ContainsKey(table))
                __result0 = (wxEventTable) wxEventTable.NativeToManagedMap[table];
            else __result0 = wxEventTable.__CreateInstance(table);
            wxEvent __result1;
            if (@event == IntPtr.Zero) __result1 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result1 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result1 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.SearchEventTable(__result0, __result1);
            return __ret;
        }

        // bool TryBefore(wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr _TryBefore_0DelegateInstance;

        private static bool _TryBefore_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.TryBefore(__result0);
            return __ret;
        }

        // bool TryAfter(wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr _TryAfter_0DelegateInstance;

        private static bool _TryAfter_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.TryAfter(__result0);
            return __ret;
        }

        // bool OnDynamicBind(wxDynamicEventTableEntry& WXUNUSED(entry))
        private static Delegates.Func_bool_IntPtr_IntPtr _OnDynamicBind_0DelegateInstance;

        private static bool _OnDynamicBind_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxDynamicEventTableEntry __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxDynamicEventTableEntry.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxDynamicEventTableEntry) wxDynamicEventTableEntry.NativeToManagedMap[_0];
            else __result0 = wxDynamicEventTableEntry.__CreateInstance(_0);
            var __ret = __target.OnDynamicBind(__result0);
            return __ret;
        }

        // wxEventTable *GetEventTable() const
        private static Delegates.Func_IntPtr_IntPtr _GetEventTable_0DelegateInstance;

        private static global::System.IntPtr _GetEventTable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventTable();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventHashTable& GetEventHashTable() const
        private static Delegates.Func_IntPtr_IntPtr _GetEventHashTable_0DelegateInstance;

        private static global::System.IntPtr _GetEventHashTable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventHashTable();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // void DoSetClientObject( wxClientData *data )
        private static Delegates.Action_IntPtr_IntPtr _DoSetClientObject_0DelegateInstance;

        private static void _DoSetClientObject_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxClientData __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxClientData.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxClientData) wxClientData.NativeToManagedMap[data];
            else __result0 = (wxClientData) wxClientData.__CreateInstance(data, skipVTables: true);
            __target.DoSetClientObject(__result0);
        }

        // wxClientData *DoGetClientObject() const
        private static Delegates.Func_IntPtr_IntPtr _DoGetClientObject_0DelegateInstance;

        private static global::System.IntPtr _DoGetClientObject_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientObject();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DoSetClientData( void *data )
        private static Delegates.Action_IntPtr_IntPtr _DoSetClientData_0DelegateInstance;

        private static void _DoSetClientData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static Delegates.Func_IntPtr_IntPtr _DoGetClientData_0DelegateInstance;

        private static global::System.IntPtr _DoGetClientData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEvtHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[19];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _SetNextHandler_0DelegateInstance += _SetNextHandler_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_SetNextHandler_0DelegateInstance).ToPointer();
                _SetPreviousHandler_0DelegateInstance += _SetPreviousHandler_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetPreviousHandler_0DelegateInstance).ToPointer();
                _ProcessEvent_0DelegateInstance += _ProcessEvent_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_ProcessEvent_0DelegateInstance).ToPointer();
                _QueueEvent_0DelegateInstance += _QueueEvent_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_QueueEvent_0DelegateInstance).ToPointer();
                _AddPendingEvent_0DelegateInstance += _AddPendingEvent_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_AddPendingEvent_0DelegateInstance).ToPointer();
                _SearchEventTable_0DelegateInstance += _SearchEventTable_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_SearchEventTable_0DelegateInstance).ToPointer();
                _TryBefore_0DelegateInstance += _TryBefore_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_TryBefore_0DelegateInstance).ToPointer();
                _TryAfter_0DelegateInstance += _TryAfter_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_TryAfter_0DelegateInstance).ToPointer();
                _OnDynamicBind_0DelegateInstance += _OnDynamicBind_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_OnDynamicBind_0DelegateInstance).ToPointer();
                _GetEventTable_0DelegateInstance += _GetEventTable_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_GetEventTable_0DelegateInstance).ToPointer();
                _GetEventHashTable_0DelegateInstance += _GetEventHashTable_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_GetEventHashTable_0DelegateInstance).ToPointer();
                _DoSetClientObject_0DelegateInstance += _DoSetClientObject_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_DoSetClientObject_0DelegateInstance).ToPointer();
                _DoGetClientObject_0DelegateInstance += _DoGetClientObject_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_DoGetClientObject_0DelegateInstance).ToPointer();
                _DoSetClientData_0DelegateInstance += _DoSetClientData_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_DoSetClientData_0DelegateInstance).ToPointer();
                _DoGetClientData_0DelegateInstance += _DoGetClientData_0DelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_DoGetClientData_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(22 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                    *(void**)(vfptr0 + 72) = *(void**)(native->vfptr0 + 72);
                    *(void**)(vfptr0 + 76) = *(void**)(native->vfptr0 + 76);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(22 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                    *(void**)(vfptr0 + 72) = _Thunks[17];
                    *(void**)(vfptr0 + 76) = _Thunks[18];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxAssert_wxEvtHandlerArray : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint TypeTooBigToBeStoredInwxBaseArrayPtrVoid;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxAssert_wxEvtHandlerArrayC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxEvtHandlerArray> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxAssert_wxEvtHandlerArray>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxAssert_wxEvtHandlerArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxAssert_wxEvtHandlerArray(native.ToPointer(), skipVTables);
        }

        public static wxAssert_wxEvtHandlerArray __CreateInstance(wxAssert_wxEvtHandlerArray.Internal native, bool skipVTables = false)
        {
            return new wxAssert_wxEvtHandlerArray(native, skipVTables);
        }

        private static void* __CopyValue(wxAssert_wxEvtHandlerArray.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxAssert_wxEvtHandlerArray.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxAssert_wxEvtHandlerArray(wxAssert_wxEvtHandlerArray.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxAssert_wxEvtHandlerArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxAssert_wxEvtHandlerArray()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxAssert_wxEvtHandlerArray(wxAssert_wxEvtHandlerArray _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxAssert_wxEvtHandlerArray.Internal*) __Instance) = *((wxAssert_wxEvtHandlerArray.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxAssert_wxEvtHandlerArray __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint TypeTooBigToBeStoredInwxBaseArrayPtrVoid
        {
            get
            {
                return ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayPtrVoid;
            }

            set
            {
                ((Internal*) __Instance)->TypeTooBigToBeStoredInwxBaseArrayPtrVoid = value;
            }
        }
    }

    public unsafe partial class wxEvtHandlerArray : wxBaseArrayPtrVoid, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public uint m_nSize;

            [FieldOffset(4)]
            public uint m_nCount;

            [FieldOffset(8)]
            public global::System.IntPtr m_pItems;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArrayC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArrayC2Em")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArrayC2EmRKP12wxEvtHandler")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArrayC2EPKP12wxEvtHandlerS3_")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArrayC2ERKS_")]
            internal static extern void cctor_4(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArrayD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxEvtHandlerArray4ItemEm")]
            internal static extern global::System.IntPtr Item_0(global::System.IntPtr instance, uint uiIndex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxEvtHandlerArray4LastEv")]
            internal static extern global::System.IntPtr Last_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxEvtHandlerArray5IndexEP12wxEvtHandlerb")]
            internal static extern int Index_0(global::System.IntPtr instance, global::System.IntPtr lItem, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray3AddEP12wxEvtHandlerm")]
            internal static extern void Add_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray6InsertEP12wxEvtHandlermm")]
            internal static extern void Insert_0(global::System.IntPtr instance, global::System.IntPtr lItem, uint uiIndex, uint nInsert);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray8RemoveAtEmm")]
            internal static extern void RemoveAt_0(global::System.IntPtr instance, uint uiIndex, uint nRemove);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray6RemoveEP12wxEvtHandler")]
            internal static extern void Remove_0(global::System.IntPtr instance, global::System.IntPtr lItem);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray4SortEPFiPP12wxEvtHandlerS2_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr fCmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray6assignEPKP12wxEvtHandlerS3_")]
            internal static extern void assign_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray6assignEmRKP12wxEvtHandler")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray4backEv")]
            internal static extern global::System.IntPtr back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray5beginEv")]
            internal static extern global::System.IntPtr begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxEvtHandlerArray8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray3endEv")]
            internal static extern global::System.IntPtr end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray5eraseEPP12wxEvtHandlerS2_")]
            internal static extern global::System.IntPtr erase_0(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray5eraseEPP12wxEvtHandler")]
            internal static extern global::System.IntPtr erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray5frontEv")]
            internal static extern global::System.IntPtr front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray6insertEPP12wxEvtHandlermRKS1_")]
            internal static extern void insert_0(global::System.IntPtr instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray6insertEPP12wxEvtHandlerRKS1_")]
            internal static extern global::System.IntPtr insert_1(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray6insertEPP12wxEvtHandlerPKS1_S4_")]
            internal static extern void insert_2(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray9push_backERKP12wxEvtHandler")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray6rbeginEv")]
            internal static extern void rbegin_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray4rendEv")]
            internal static extern void rend_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray6resizeEmP12wxEvtHandler")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxEvtHandlerArray4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxEvtHandlerArrayixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint uiIndex);
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN17wxEvtHandlerArray16reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxEvtHandlerArray.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN17wxEvtHandlerArray22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN17wxEvtHandlerArray22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxEvtHandlerArray.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_3((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxEvtHandlerArray.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }

        public static new wxEvtHandlerArray __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEvtHandlerArray(native.ToPointer(), skipVTables);
        }

        public static wxEvtHandlerArray __CreateInstance(wxEvtHandlerArray.Internal native, bool skipVTables = false)
        {
            return new wxEvtHandlerArray(native, skipVTables);
        }

        private static void* __CopyValue(wxEvtHandlerArray.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxEvtHandlerArray.Internal.cctor_4(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxEvtHandlerArray(wxEvtHandlerArray.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEvtHandlerArray(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxEvtHandlerArray()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxEvtHandlerArray(uint n)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), n);
        }

        public wxEvtHandlerArray(uint n, wxEvtHandler v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxEvtHandlerArray(wxEvtHandler first, wxEvtHandler last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxEvtHandlerArray(wxEvtHandlerArray _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_4((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxBaseArrayPtrVoid __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxEvtHandler Item(uint uiIndex)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), uiIndex);
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public wxEvtHandler Last()
        {
            var __ret = Internal.Last_0((__Instance + __PointerAdjustment));
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public int Index(wxEvtHandler lItem, bool bFromEnd)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        public void Add(wxEvtHandler lItem, uint nInsert)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            Internal.Add_0((__Instance + __PointerAdjustment), arg0, nInsert);
        }

        public void Insert(wxEvtHandler lItem, uint uiIndex, uint nInsert)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            Internal.Insert_0((__Instance + __PointerAdjustment), arg0, uiIndex, nInsert);
        }

        public void RemoveAt(uint uiIndex, uint nRemove)
        {
            Internal.RemoveAt_0((__Instance + __PointerAdjustment), uiIndex, nRemove);
        }

        public void Remove(wxEvtHandler lItem)
        {
            var arg0 = ReferenceEquals(lItem, null) ? global::System.IntPtr.Zero : lItem.__Instance;
            Internal.Remove_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Sort(CMPFUNC_wxArraywxEvtHandlerArray fCmp)
        {
            var arg0 = fCmp == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(fCmp);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void assign(wxEvtHandler first, wxEvtHandler last)
        {
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void assign(uint n, wxEvtHandler v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxEvtHandler back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public wxEvtHandler begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxEvtHandler end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public wxEvtHandler erase(wxEvtHandler first, wxEvtHandler last)
        {
            var arg0 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg1 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0, arg1);
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public wxEvtHandler erase(wxEvtHandler it)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0);
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public wxEvtHandler front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public void insert(wxEvtHandler it, uint n, wxEvtHandler v)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg2 = v.__Instance;
            Internal.insert_0((__Instance + __PointerAdjustment), arg0, n, arg2);
        }

        public wxEvtHandler insert(wxEvtHandler it, wxEvtHandler v)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            var __ret = Internal.insert_1((__Instance + __PointerAdjustment), arg0, arg1);
            wxEvtHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
            else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
            return __result0;
        }

        public void insert(wxEvtHandler it, wxEvtHandler first, wxEvtHandler last)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            var arg1 = ReferenceEquals(first, null) ? global::System.IntPtr.Zero : first.__Instance;
            var arg2 = ReferenceEquals(last, null) ? global::System.IntPtr.Zero : last.__Instance;
            Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void push_back(wxEvtHandler v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxEvtHandlerArray.reverse_iterator rbegin()
        {
            var __ret = new wxEvtHandlerArray.reverse_iterator.Internal();
            Internal.rbegin_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxEvtHandlerArray.reverse_iterator.__CreateInstance(__ret);
        }

        public wxEvtHandlerArray.reverse_iterator rend()
        {
            var __ret = new wxEvtHandlerArray.reverse_iterator.Internal();
            Internal.rend_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxEvtHandlerArray.reverse_iterator.__CreateInstance(__ret);
        }

        public void reserve(uint n)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), n);
        }

        public void resize(uint n, wxEvtHandler v)
        {
            var arg1 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            Internal.resize_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public void swap(wxEvtHandlerArray other)
        {
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxEvtHandler this[uint uiIndex]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex);
                wxEvtHandler __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxEvtHandler.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[__ret];
                else wxEvtHandler.NativeToManagedMap[__ret] = __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                *(wxEvtHandler.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), uiIndex) = *(wxEvtHandler.Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class wxEventConnectionRef : wxTrackerNode, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_nxt;

            [FieldOffset(8)]
            public global::System.IntPtr m_src;

            [FieldOffset(12)]
            public global::System.IntPtr m_sink;

            [FieldOffset(16)]
            public int m_refCount;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxEventConnectionRefC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxEventConnectionRefC2EP12wxEvtHandlerS1_")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr src, global::System.IntPtr sink);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxEventConnectionRefC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxEventConnectionRef6IncRefEv")]
            internal static extern void IncRef_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxEventConnectionRef6DecRefEv")]
            internal static extern void DecRef_0(global::System.IntPtr instance);
        }

        public static new wxEventConnectionRef __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventConnectionRef(native.ToPointer(), skipVTables);
        }

        public static wxEventConnectionRef __CreateInstance(wxEventConnectionRef.Internal native, bool skipVTables = false)
        {
            return new wxEventConnectionRef(native, skipVTables);
        }

        private static void* __CopyValue(wxEventConnectionRef.Internal native)
        {
            var ret = Marshal.AllocHGlobal(20);
            wxEventConnectionRef.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxEventConnectionRef(wxEventConnectionRef.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventConnectionRef(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxEventConnectionRef()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxEventConnectionRef");
        }

        public wxEventConnectionRef(wxEvtHandler src, wxEvtHandler sink)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(src, null) ? global::System.IntPtr.Zero : src.__Instance;
            var arg1 = ReferenceEquals(sink, null) ? global::System.IntPtr.Zero : sink.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxEventConnectionRef");
        }

        public wxEventConnectionRef(wxEventConnectionRef _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxEventConnectionRef");
        }

        public override void OnObjectDestroy()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___OnObjectDestroy_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___OnObjectDestroy_0Delegate((__Instance + __PointerAdjustment));
        }

        public override wxEventConnectionRef ToEventConnection()
        {
            return base.ToEventConnection();
        }

        public void IncRef()
        {
            Internal.IncRef_0((__Instance + __PointerAdjustment));
        }

        public void DecRef()
        {
            Internal.DecRef_0((__Instance + __PointerAdjustment));
        }

        #region Virtual table interop

        // wxEventConnectionRef
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventConnectionRef) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // void OnObjectDestroy( ) wxOVERRIDE
        private static Delegates.Action_IntPtr _OnObjectDestroy_0DelegateInstance;

        private static void _OnObjectDestroy_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventConnectionRef) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnObjectDestroy();
        }

        // wxEventConnectionRef *ToEventConnection() wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _ToEventConnection_0DelegateInstance;

        private static global::System.IntPtr _ToEventConnection_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventConnectionRef) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToEventConnection();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _OnObjectDestroy_0DelegateInstance += _OnObjectDestroy_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_OnObjectDestroy_0DelegateInstance).ToPointer();
                _ToEventConnection_0DelegateInstance += _ToEventConnection_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ToEventConnection_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxEventBlocker : wxEvtHandler, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 60)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(0)]
            public global::System.IntPtr m_first;

            [FieldOffset(12)]
            public global::System.IntPtr m_nextHandler;

            [FieldOffset(16)]
            public global::System.IntPtr m_previousHandler;

            [FieldOffset(20)]
            public global::System.IntPtr m_dynamicEvents;

            [FieldOffset(24)]
            public global::System.IntPtr m_pendingEvents;

            [FieldOffset(28)]
            public wxCriticalSection.Internal m_pendingEventsLock;

            [FieldOffset(32)]
            public byte m_enabled;

            [FieldOffset(36)]
            internal wxEvtHandler._.Internal __;

            [FieldOffset(40)]
            public wxClientDataType m_clientDataType;

            [FieldOffset(44)]
            public wxArrayInt.Internal m_eventsToBlock;

            [FieldOffset(56)]
            public global::System.IntPtr m_window;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxEventBlocker5BlockEi")]
            internal static extern void Block_0(global::System.IntPtr instance, int type);
        }

        public static new wxEventBlocker __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxEventBlocker(native.ToPointer(), skipVTables);
        }

        public static wxEventBlocker __CreateInstance(wxEventBlocker.Internal native, bool skipVTables = false)
        {
            return new wxEventBlocker(native, skipVTables);
        }

        private static void* __CopyValue(wxEventBlocker.Internal native)
        {
            var ret = Marshal.AllocHGlobal(60);
            *(wxEventBlocker.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxEventBlocker(wxEventBlocker.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxEventBlocker(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public void Block(int type)
        {
            Internal.Block_0((__Instance + __PointerAdjustment), type);
        }

        public override bool ProcessEvent(wxEvent @event)
        {
            return base.ProcessEvent(@event);
        }

        protected wxArrayInt m_eventsToBlock
        {
            get
            {
                return wxArrayInt.__CreateInstance(((Internal*) __Instance)->m_eventsToBlock);
            }

            set
            {
                ((Internal*) __Instance)->m_eventsToBlock = ReferenceEquals(value, null) ? new wxArrayInt.Internal() : *(wxArrayInt.Internal*) (value.__Instance);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxEventBlocker()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void SetNextHandler(wxEvtHandler *handler)
        private static Delegates.Action_IntPtr_IntPtr _SetNextHandler_0DelegateInstance;

        private static void _SetNextHandler_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[handler];
            else __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetNextHandler(__result0);
        }

        // void SetPreviousHandler(wxEvtHandler *handler)
        private static Delegates.Action_IntPtr_IntPtr _SetPreviousHandler_0DelegateInstance;

        private static void _SetPreviousHandler_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr handler)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvtHandler __result0;
            if (handler == IntPtr.Zero) __result0 = null;
            else if (wxEvtHandler.NativeToManagedMap.ContainsKey(handler))
                __result0 = (wxEvtHandler) wxEvtHandler.NativeToManagedMap[handler];
            else __result0 = (wxEvtHandler) wxEvtHandler.__CreateInstance(handler, skipVTables: true);
            __target.SetPreviousHandler(__result0);
        }

        // bool ProcessEvent(wxEvent& event) wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_IntPtr _ProcessEvent_0DelegateInstance;

        private static bool _ProcessEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.ProcessEvent(__result0);
            return __ret;
        }

        // void QueueEvent(wxEvent *event)
        private static Delegates.Action_IntPtr_IntPtr _QueueEvent_0DelegateInstance;

        private static void _QueueEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            __target.QueueEvent(__result0);
        }

        // void AddPendingEvent(const wxEvent& event)
        private static Delegates.Action_IntPtr_IntPtr _AddPendingEvent_0DelegateInstance;

        private static void _AddPendingEvent_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            __target.AddPendingEvent(__result0);
        }

        // bool SearchEventTable(wxEventTable& table, wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr _SearchEventTable_0DelegateInstance;

        private static bool _SearchEventTable_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr table, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEventTable __result0;
            if (table == IntPtr.Zero) __result0 = null;
            else if (wxEventTable.NativeToManagedMap.ContainsKey(table))
                __result0 = (wxEventTable) wxEventTable.NativeToManagedMap[table];
            else __result0 = wxEventTable.__CreateInstance(table);
            wxEvent __result1;
            if (@event == IntPtr.Zero) __result1 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result1 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result1 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.SearchEventTable(__result0, __result1);
            return __ret;
        }

        // bool TryBefore(wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr _TryBefore_0DelegateInstance;

        private static bool _TryBefore_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.TryBefore(__result0);
            return __ret;
        }

        // bool TryAfter(wxEvent& event)
        private static Delegates.Func_bool_IntPtr_IntPtr _TryAfter_0DelegateInstance;

        private static bool _TryAfter_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr @event)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxEvent __result0;
            if (@event == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(@event))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[@event];
            else __result0 = (wxEvent) wxEvent.__CreateInstance(@event, skipVTables: true);
            var __ret = __target.TryAfter(__result0);
            return __ret;
        }

        // bool OnDynamicBind(wxDynamicEventTableEntry& WXUNUSED(entry))
        private static Delegates.Func_bool_IntPtr_IntPtr _OnDynamicBind_0DelegateInstance;

        private static bool _OnDynamicBind_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxDynamicEventTableEntry __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxDynamicEventTableEntry.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxDynamicEventTableEntry) wxDynamicEventTableEntry.NativeToManagedMap[_0];
            else __result0 = wxDynamicEventTableEntry.__CreateInstance(_0);
            var __ret = __target.OnDynamicBind(__result0);
            return __ret;
        }

        // wxEventTable *GetEventTable() const
        private static Delegates.Func_IntPtr_IntPtr _GetEventTable_0DelegateInstance;

        private static global::System.IntPtr _GetEventTable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventTable();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxEventHashTable& GetEventHashTable() const
        private static Delegates.Func_IntPtr_IntPtr _GetEventHashTable_0DelegateInstance;

        private static global::System.IntPtr _GetEventHashTable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetEventHashTable();
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // void DoSetClientObject( wxClientData *data )
        private static Delegates.Action_IntPtr_IntPtr _DoSetClientObject_0DelegateInstance;

        private static void _DoSetClientObject_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxClientData __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxClientData.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxClientData) wxClientData.NativeToManagedMap[data];
            else __result0 = (wxClientData) wxClientData.__CreateInstance(data, skipVTables: true);
            __target.DoSetClientObject(__result0);
        }

        // wxClientData *DoGetClientObject() const
        private static Delegates.Func_IntPtr_IntPtr _DoGetClientObject_0DelegateInstance;

        private static global::System.IntPtr _DoGetClientObject_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientObject();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // void DoSetClientData( void *data )
        private static Delegates.Action_IntPtr_IntPtr _DoSetClientData_0DelegateInstance;

        private static void _DoSetClientData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DoSetClientData(data);
        }

        // void *DoGetClientData() const
        private static Delegates.Func_IntPtr_IntPtr _DoGetClientData_0DelegateInstance;

        private static global::System.IntPtr _DoGetClientData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxEventBlocker) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.DoGetClientData();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[19];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _SetNextHandler_0DelegateInstance += _SetNextHandler_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_SetNextHandler_0DelegateInstance).ToPointer();
                _SetPreviousHandler_0DelegateInstance += _SetPreviousHandler_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetPreviousHandler_0DelegateInstance).ToPointer();
                _ProcessEvent_0DelegateInstance += _ProcessEvent_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_ProcessEvent_0DelegateInstance).ToPointer();
                _QueueEvent_0DelegateInstance += _QueueEvent_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_QueueEvent_0DelegateInstance).ToPointer();
                _AddPendingEvent_0DelegateInstance += _AddPendingEvent_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_AddPendingEvent_0DelegateInstance).ToPointer();
                _SearchEventTable_0DelegateInstance += _SearchEventTable_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_SearchEventTable_0DelegateInstance).ToPointer();
                _TryBefore_0DelegateInstance += _TryBefore_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_TryBefore_0DelegateInstance).ToPointer();
                _TryAfter_0DelegateInstance += _TryAfter_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_TryAfter_0DelegateInstance).ToPointer();
                _OnDynamicBind_0DelegateInstance += _OnDynamicBind_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_OnDynamicBind_0DelegateInstance).ToPointer();
                _GetEventTable_0DelegateInstance += _GetEventTable_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_GetEventTable_0DelegateInstance).ToPointer();
                _GetEventHashTable_0DelegateInstance += _GetEventHashTable_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_GetEventHashTable_0DelegateInstance).ToPointer();
                _DoSetClientObject_0DelegateInstance += _DoSetClientObject_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_DoSetClientObject_0DelegateInstance).ToPointer();
                _DoGetClientObject_0DelegateInstance += _DoGetClientObject_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_DoGetClientObject_0DelegateInstance).ToPointer();
                _DoSetClientData_0DelegateInstance += _DoSetClientData_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_DoSetClientData_0DelegateInstance).ToPointer();
                _DoGetClientData_0DelegateInstance += _DoGetClientData_0DelegateHook;
                _Thunks[18] = Marshal.GetFunctionPointerForDelegate(_DoGetClientData_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(22 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                    *(void**)(vfptr0 + 72) = *(void**)(native->vfptr0 + 72);
                    *(void**)(vfptr0 + 76) = *(void**)(native->vfptr0 + 76);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(22 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                    *(void**)(vfptr0 + 72) = _Thunks[17];
                    *(void**)(vfptr0 + 76) = _Thunks[18];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    internal unsafe partial class wxEventInternal : wxEvent, IDisposable
    {
        private static void* __CopyValue(wxEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            *(wxEvent.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxEventInternal(wxEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxEventInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }
    }

    internal unsafe partial class wxEventFunctorInternal : wxEventFunctor, IDisposable
    {
        private static void* __CopyValue(wxEventFunctor.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxEventFunctor.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxEventFunctorInternal(wxEventFunctor.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxEventFunctorInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override bool IsMatching(wxEventFunctor functor)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___IsMatching_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(functor, null))
                throw new global::System.ArgumentNullException("functor", "Cannot be null because it is a C++ reference (&).");
            var arg0 = functor.__Instance;
            var __ret = ___IsMatching_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }
    }

    internal unsafe partial class wxAsyncMethodCallEventInternal : wxAsyncMethodCallEvent, IDisposable
    {
        private static void* __CopyValue(wxAsyncMethodCallEvent.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            *(wxAsyncMethodCallEvent.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxAsyncMethodCallEventInternal(wxAsyncMethodCallEvent.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxAsyncMethodCallEventInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override void Execute()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___Execute_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___Execute_0Delegate((__Instance + __PointerAdjustment));
        }

        public override wxEvent Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance));
            wxEvent __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEvent.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEvent) wxEvent.NativeToManagedMap[__ret];
            else wxEvent.NativeToManagedMap[__ret] = __result0 = (wxEvent) wxEvent.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class @event
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxNewEventTypev")]
            internal static extern int wxNewEventType_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxPostEventP12wxEvtHandlerRK7wxEvent")]
            internal static extern void wxPostEvent_0(global::System.IntPtr dest, global::System.IntPtr @event);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxQueueEventP12wxEvtHandlerP7wxEvent")]
            internal static extern void wxQueueEvent_0(global::System.IntPtr dest, global::System.IntPtr @event);
        }

        public static int wxNewEventType()
        {
            var __ret = Internal.wxNewEventType_0();
            return __ret;
        }

        public static void wxPostEvent(wxEvtHandler dest, wxEvent @event)
        {
            var arg0 = ReferenceEquals(dest, null) ? global::System.IntPtr.Zero : dest.__Instance;
            if (ReferenceEquals(@event, null))
                throw new global::System.ArgumentNullException("@event", "Cannot be null because it is a C++ reference (&).");
            var arg1 = @event.__Instance;
            Internal.wxPostEvent_0(arg0, arg1);
        }

        public static void wxQueueEvent(wxEvtHandler dest, wxEvent @event)
        {
            var arg0 = ReferenceEquals(dest, null) ? global::System.IntPtr.Zero : dest.__Instance;
            var arg1 = ReferenceEquals(@event, null) ? global::System.IntPtr.Zero : @event.__Instance;
            Internal.wxQueueEvent_0(arg0, arg1);
        }
    }

    namespace wxPrivate
    {
    }
}
