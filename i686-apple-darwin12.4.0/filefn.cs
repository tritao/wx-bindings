//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum wxSeekMode : uint
    {
        wxFromStart = 0,
        wxFromCurrent = 1,
        wxFromEnd = 2
    }

    public enum wxFileKind : uint
    {
        wxFILE_KIND_UNKNOWN = 0,
        wxFILE_KIND_DISK = 1,
        wxFILE_KIND_TERMINAL = 2,
        wxFILE_KIND_PIPE = 3
    }

    public enum wxPosixPermissions : uint
    {
        wxS_IRUSR = 256,
        wxS_IWUSR = 128,
        wxS_IXUSR = 64,
        wxS_IRGRP = 32,
        wxS_IWGRP = 16,
        wxS_IXGRP = 8,
        wxS_IROTH = 4,
        wxS_IWOTH = 2,
        wxS_IXOTH = 1,
        wxPOSIX_USER_READ = 256,
        wxPOSIX_USER_WRITE = 128,
        wxPOSIX_USER_EXECUTE = 64,
        wxPOSIX_GROUP_READ = 32,
        wxPOSIX_GROUP_WRITE = 16,
        wxPOSIX_GROUP_EXECUTE = 8,
        wxPOSIX_OTHERS_READ = 4,
        wxPOSIX_OTHERS_WRITE = 2,
        wxPOSIX_OTHERS_EXECUTE = 1,
        wxS_DEFAULT = 438,
        wxS_DIR_DEFAULT = 511
    }

    public unsafe partial class wxUmaskChanger : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int m_umaskOld;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxUmaskChangerC2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int umaskNew);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxUmaskChangerC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxUmaskChangerD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxUmaskChanger> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxUmaskChanger>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxUmaskChanger __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxUmaskChanger(native.ToPointer(), skipVTables);
        }

        public static wxUmaskChanger __CreateInstance(wxUmaskChanger.Internal native, bool skipVTables = false)
        {
            return new wxUmaskChanger(native, skipVTables);
        }

        private static void* __CopyValue(wxUmaskChanger.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxUmaskChanger.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxUmaskChanger(wxUmaskChanger.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxUmaskChanger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxUmaskChanger(int umaskNew)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), umaskNew);
        }

        public wxUmaskChanger(wxUmaskChanger _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxUmaskChanger.Internal*) __Instance) = *((wxUmaskChanger.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxUmaskChanger __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxPathList : wxArrayString, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_compareFunction;

            [FieldOffset(4)]
            public uint m_nSize;

            [FieldOffset(8)]
            public uint m_nCount;

            [FieldOffset(12)]
            public global::System.IntPtr m_pItems;

            [FieldOffset(16)]
            public byte m_autoSort;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPathListC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPathListC2ERK13wxArrayString")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr arr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPathListC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPathListD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPathList10AddEnvListERK8wxString")]
            internal static extern void AddEnvList_0(global::System.IntPtr instance, global::System.IntPtr envVariable);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPathList3AddERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Add_0(global::System.IntPtr instance, global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPathList3AddERK13wxArrayString")]
            internal static extern void Add_1(global::System.IntPtr instance, global::System.IntPtr paths);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxPathList13FindValidPathERK8wxString")]
            internal static extern void FindValidPath_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxPathList21FindAbsoluteValidPathERK8wxString")]
            internal static extern void FindAbsoluteValidPath_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxPathList20EnsureFileAccessibleERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool EnsureFileAccessible_0(global::System.IntPtr instance, global::System.IntPtr path);
        }

        public static new wxPathList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPathList(native.ToPointer(), skipVTables);
        }

        public static wxPathList __CreateInstance(wxPathList.Internal native, bool skipVTables = false)
        {
            return new wxPathList(native, skipVTables);
        }

        private static void* __CopyValue(wxPathList.Internal native)
        {
            var ret = Marshal.AllocHGlobal(20);
            wxPathList.Internal.cctor_3(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxPathList(wxPathList.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPathList(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxPathList()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxPathList(wxArrayString arr)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(arr, null))
                throw new global::System.ArgumentNullException("arr", "Cannot be null because it is a C++ reference (&).");
            var arg0 = arr.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public wxPathList(wxPathList _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_3((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            wxArrayString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void AddEnvList(wxString envVariable)
        {
            if (ReferenceEquals(envVariable, null))
                throw new global::System.ArgumentNullException("envVariable", "Cannot be null because it is a C++ reference (&).");
            var arg0 = envVariable.__Instance;
            Internal.AddEnvList_0((__Instance + __PointerAdjustment), arg0);
        }

        public bool Add(wxString path)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.Add_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void Add(wxArrayString paths)
        {
            if (ReferenceEquals(paths, null))
                throw new global::System.ArgumentNullException("paths", "Cannot be null because it is a C++ reference (&).");
            var arg0 = paths.__Instance;
            Internal.Add_1((__Instance + __PointerAdjustment), arg0);
        }

        public wxString FindValidPath(wxString filename)
        {
            if (ReferenceEquals(filename, null))
                throw new global::System.ArgumentNullException("filename", "Cannot be null because it is a C++ reference (&).");
            var arg0 = filename.__Instance;
            var __ret = new wxString.Internal();
            Internal.FindValidPath_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public wxString FindAbsoluteValidPath(wxString filename)
        {
            if (ReferenceEquals(filename, null))
                throw new global::System.ArgumentNullException("filename", "Cannot be null because it is a C++ reference (&).");
            var arg0 = filename.__Instance;
            var __ret = new wxString.Internal();
            Internal.FindAbsoluteValidPath_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public bool EnsureFileAccessible(wxString path)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.EnsureFileAccessible_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }
    }

    public unsafe partial class filefn
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z8wxAccessRK8wxStringt")]
            internal static extern int wxAccess_0(global::System.IntPtr path, ushort mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxChmodRK8wxStringt")]
            internal static extern int wxChmod_0(global::System.IntPtr path, ushort mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z6wxOpenRK8wxStringit")]
            internal static extern int wxOpen_0(global::System.IntPtr path, int flags, ushort mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z6wxStatRK8wxStringP4stat")]
            internal static extern int wxStat_0(global::System.IntPtr path, global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxLstatRK8wxStringP4stat")]
            internal static extern int wxLstat_0(global::System.IntPtr path, global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxRmDirRK8wxString")]
            internal static extern int wxRmDir_0(global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxMkDirRK8wxStringt")]
            internal static extern int wxMkDir_0(global::System.IntPtr path, ushort mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxFileExistsRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxFileExists_0(global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxDirExistsRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxDirExists_0(global::System.IntPtr pathName);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxIsAbsolutePathRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsAbsolutePath_0(global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxFileNameFromPathPw")]
            internal static extern char* wxFileNameFromPath_0(char* path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxFileNameFromPathRK8wxString")]
            internal static extern void wxFileNameFromPath_1(global::System.IntPtr @return, global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxPathOnlyRK8wxString")]
            internal static extern void wxPathOnly_0(global::System.IntPtr @return, global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxFindFirstFileRK8wxStringi")]
            internal static extern void wxFindFirstFile_0(global::System.IntPtr @return, global::System.IntPtr spec, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxFindNextFilev")]
            internal static extern void wxFindNextFile_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z8wxIsWildRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsWild_0(global::System.IntPtr pattern);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxMatchWildRK8wxStringS1_b")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxMatchWild_0(global::System.IntPtr pattern, global::System.IntPtr text, bool dot_special);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxConcatFilesRK8wxStringS1_S1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxConcatFiles_0(global::System.IntPtr file1, global::System.IntPtr file2, global::System.IntPtr file3);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10wxCopyFileRK8wxStringS1_b")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxCopyFile_0(global::System.IntPtr file1, global::System.IntPtr file2, bool overwrite);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxRemoveFileRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxRemoveFile_0(global::System.IntPtr file);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxRenameFileRK8wxStringS1_b")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxRenameFile_0(global::System.IntPtr file1, global::System.IntPtr file2, bool overwrite);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z8wxGetCwdv")]
            internal static extern void wxGetCwd_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z21wxSetWorkingDirectoryRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxSetWorkingDirectory_0(global::System.IntPtr d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxMkdirRK8wxStringi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxMkdir_0(global::System.IntPtr dir, int perm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z7wxRmdirRK8wxStringi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxRmdir_0(global::System.IntPtr dir, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxGetFileKindi")]
            internal static extern wxFileKind wxGetFileKind_0(int fd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxGetFileKindP7__sFILE")]
            internal static extern wxFileKind wxGetFileKind_1(global::System.IntPtr fp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxIsWritableRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsWritable_0(global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12wxIsReadableRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsReadable_0(global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxIsExecutableRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsExecutable_0(global::System.IntPtr path);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z17wxIsPathSeparatorw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxIsPathSeparator_0(char c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z23wxEndsWithPathSeparatorRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxEndsWithPathSeparator_0(global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxFindFileInPathP8wxStringRKS_S2_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxFindFileInPath_0(global::System.IntPtr pStr, global::System.IntPtr szPath, global::System.IntPtr szFile);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxGetOSDirectoryv")]
            internal static extern void wxGetOSDirectory_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z22wxFileModificationTimeRK8wxString")]
            internal static extern int wxFileModificationTime_0(global::System.IntPtr filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z26wxParseCommonDialogsFilterRK8wxStringR13wxArrayStringS3_")]
            internal static extern int wxParseCommonDialogsFilter_0(global::System.IntPtr wildCard, global::System.IntPtr descriptions, global::System.IntPtr filters);
        }

        public static int wxAccess(wxString path, ushort mode)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.wxAccess_0(arg0, mode);
            return __ret;
        }

        public static int wxChmod(wxString path, ushort mode)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.wxChmod_0(arg0, mode);
            return __ret;
        }

        public static int wxOpen(wxString path, int flags, ushort mode)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.wxOpen_0(arg0, flags, mode);
            return __ret;
        }

        public static int wxStat(wxString path, stat buf)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var arg1 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = Internal.wxStat_0(arg0, arg1);
            return __ret;
        }

        public static int wxLstat(wxString path, stat buf)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var arg1 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = Internal.wxLstat_0(arg0, arg1);
            return __ret;
        }

        public static int wxRmDir(wxString path)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.wxRmDir_0(arg0);
            return __ret;
        }

        public static int wxMkDir(wxString path, ushort mode)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.wxMkDir_0(arg0, mode);
            return __ret;
        }

        public static bool wxFileExists(wxString filename)
        {
            if (ReferenceEquals(filename, null))
                throw new global::System.ArgumentNullException("filename", "Cannot be null because it is a C++ reference (&).");
            var arg0 = filename.__Instance;
            var __ret = Internal.wxFileExists_0(arg0);
            return __ret;
        }

        public static bool wxDirExists(wxString pathName)
        {
            if (ReferenceEquals(pathName, null))
                throw new global::System.ArgumentNullException("pathName", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pathName.__Instance;
            var __ret = Internal.wxDirExists_0(arg0);
            return __ret;
        }

        public static bool wxIsAbsolutePath(wxString filename)
        {
            if (ReferenceEquals(filename, null))
                throw new global::System.ArgumentNullException("filename", "Cannot be null because it is a C++ reference (&).");
            var arg0 = filename.__Instance;
            var __ret = Internal.wxIsAbsolutePath_0(arg0);
            return __ret;
        }

        public static char* wxFileNameFromPath(char* path)
        {
            var arg0 = path;
            var __ret = Internal.wxFileNameFromPath_0(arg0);
            return __ret;
        }

        public static wxString wxFileNameFromPath(wxString path)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = new wxString.Internal();
            Internal.wxFileNameFromPath_1(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString wxPathOnly(wxString path)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = new wxString.Internal();
            Internal.wxPathOnly_0(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString wxFindFirstFile(wxString spec, int flags)
        {
            if (ReferenceEquals(spec, null))
                throw new global::System.ArgumentNullException("spec", "Cannot be null because it is a C++ reference (&).");
            var arg0 = spec.__Instance;
            var __ret = new wxString.Internal();
            Internal.wxFindFirstFile_0(new IntPtr(&__ret), arg0, flags);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString wxFindNextFile()
        {
            var __ret = new wxString.Internal();
            Internal.wxFindNextFile_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static bool wxIsWild(wxString pattern)
        {
            if (ReferenceEquals(pattern, null))
                throw new global::System.ArgumentNullException("pattern", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pattern.__Instance;
            var __ret = Internal.wxIsWild_0(arg0);
            return __ret;
        }

        public static bool wxMatchWild(wxString pattern, wxString text, bool dot_special)
        {
            if (ReferenceEquals(pattern, null))
                throw new global::System.ArgumentNullException("pattern", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pattern.__Instance;
            if (ReferenceEquals(text, null))
                throw new global::System.ArgumentNullException("text", "Cannot be null because it is a C++ reference (&).");
            var arg1 = text.__Instance;
            var __ret = Internal.wxMatchWild_0(arg0, arg1, dot_special);
            return __ret;
        }

        public static bool wxConcatFiles(wxString file1, wxString file2, wxString file3)
        {
            if (ReferenceEquals(file1, null))
                throw new global::System.ArgumentNullException("file1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = file1.__Instance;
            if (ReferenceEquals(file2, null))
                throw new global::System.ArgumentNullException("file2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = file2.__Instance;
            if (ReferenceEquals(file3, null))
                throw new global::System.ArgumentNullException("file3", "Cannot be null because it is a C++ reference (&).");
            var arg2 = file3.__Instance;
            var __ret = Internal.wxConcatFiles_0(arg0, arg1, arg2);
            return __ret;
        }

        public static bool wxCopyFile(wxString file1, wxString file2, bool overwrite)
        {
            if (ReferenceEquals(file1, null))
                throw new global::System.ArgumentNullException("file1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = file1.__Instance;
            if (ReferenceEquals(file2, null))
                throw new global::System.ArgumentNullException("file2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = file2.__Instance;
            var __ret = Internal.wxCopyFile_0(arg0, arg1, overwrite);
            return __ret;
        }

        public static bool wxRemoveFile(wxString file)
        {
            if (ReferenceEquals(file, null))
                throw new global::System.ArgumentNullException("file", "Cannot be null because it is a C++ reference (&).");
            var arg0 = file.__Instance;
            var __ret = Internal.wxRemoveFile_0(arg0);
            return __ret;
        }

        public static bool wxRenameFile(wxString file1, wxString file2, bool overwrite)
        {
            if (ReferenceEquals(file1, null))
                throw new global::System.ArgumentNullException("file1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = file1.__Instance;
            if (ReferenceEquals(file2, null))
                throw new global::System.ArgumentNullException("file2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = file2.__Instance;
            var __ret = Internal.wxRenameFile_0(arg0, arg1, overwrite);
            return __ret;
        }

        public static wxString wxGetCwd()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetCwd_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static bool wxSetWorkingDirectory(wxString d)
        {
            if (ReferenceEquals(d, null))
                throw new global::System.ArgumentNullException("d", "Cannot be null because it is a C++ reference (&).");
            var arg0 = d.__Instance;
            var __ret = Internal.wxSetWorkingDirectory_0(arg0);
            return __ret;
        }

        public static bool wxMkdir(wxString dir, int perm)
        {
            if (ReferenceEquals(dir, null))
                throw new global::System.ArgumentNullException("dir", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dir.__Instance;
            var __ret = Internal.wxMkdir_0(arg0, perm);
            return __ret;
        }

        public static bool wxRmdir(wxString dir, int flags)
        {
            if (ReferenceEquals(dir, null))
                throw new global::System.ArgumentNullException("dir", "Cannot be null because it is a C++ reference (&).");
            var arg0 = dir.__Instance;
            var __ret = Internal.wxRmdir_0(arg0, flags);
            return __ret;
        }

        public static wxFileKind wxGetFileKind(int fd)
        {
            var __ret = Internal.wxGetFileKind_0(fd);
            return __ret;
        }

        public static wxFileKind wxGetFileKind(global::System.IntPtr fp)
        {
            var arg0 = fp;
            var __ret = Internal.wxGetFileKind_1(arg0);
            return __ret;
        }

        public static bool wxIsWritable(wxString path)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.wxIsWritable_0(arg0);
            return __ret;
        }

        public static bool wxIsReadable(wxString path)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.wxIsReadable_0(arg0);
            return __ret;
        }

        public static bool wxIsExecutable(wxString path)
        {
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is a C++ reference (&).");
            var arg0 = path.__Instance;
            var __ret = Internal.wxIsExecutable_0(arg0);
            return __ret;
        }

        public static bool wxIsPathSeparator(char c)
        {
            var __ret = Internal.wxIsPathSeparator_0(c);
            return __ret;
        }

        public static bool wxEndsWithPathSeparator(wxString filename)
        {
            if (ReferenceEquals(filename, null))
                throw new global::System.ArgumentNullException("filename", "Cannot be null because it is a C++ reference (&).");
            var arg0 = filename.__Instance;
            var __ret = Internal.wxEndsWithPathSeparator_0(arg0);
            return __ret;
        }

        public static bool wxFindFileInPath(wxString pStr, wxString szPath, wxString szFile)
        {
            var arg0 = ReferenceEquals(pStr, null) ? global::System.IntPtr.Zero : pStr.__Instance;
            if (ReferenceEquals(szPath, null))
                throw new global::System.ArgumentNullException("szPath", "Cannot be null because it is a C++ reference (&).");
            var arg1 = szPath.__Instance;
            if (ReferenceEquals(szFile, null))
                throw new global::System.ArgumentNullException("szFile", "Cannot be null because it is a C++ reference (&).");
            var arg2 = szFile.__Instance;
            var __ret = Internal.wxFindFileInPath_0(arg0, arg1, arg2);
            return __ret;
        }

        public static wxString wxGetOSDirectory()
        {
            var __ret = new wxString.Internal();
            Internal.wxGetOSDirectory_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static int wxFileModificationTime(wxString filename)
        {
            if (ReferenceEquals(filename, null))
                throw new global::System.ArgumentNullException("filename", "Cannot be null because it is a C++ reference (&).");
            var arg0 = filename.__Instance;
            var __ret = Internal.wxFileModificationTime_0(arg0);
            return __ret;
        }

        public static int wxParseCommonDialogsFilter(wxString wildCard, wxArrayString descriptions, wxArrayString filters)
        {
            if (ReferenceEquals(wildCard, null))
                throw new global::System.ArgumentNullException("wildCard", "Cannot be null because it is a C++ reference (&).");
            var arg0 = wildCard.__Instance;
            if (ReferenceEquals(descriptions, null))
                throw new global::System.ArgumentNullException("descriptions", "Cannot be null because it is a C++ reference (&).");
            var arg1 = descriptions.__Instance;
            if (ReferenceEquals(filters, null))
                throw new global::System.ArgumentNullException("filters", "Cannot be null because it is a C++ reference (&).");
            var arg2 = filters.__Instance;
            var __ret = Internal.wxParseCommonDialogsFilter_0(arg0, arg1, arg2);
            return __ret;
        }
    }
}
