//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum wxBitmapType : uint
    {
        wxBITMAP_TYPE_INVALID = 0,
        wxBITMAP_TYPE_BMP = 1,
        wxBITMAP_TYPE_BMP_RESOURCE = 2,
        wxBITMAP_TYPE_RESOURCE = 2,
        wxBITMAP_TYPE_ICO = 3,
        wxBITMAP_TYPE_ICO_RESOURCE = 4,
        wxBITMAP_TYPE_CUR = 5,
        wxBITMAP_TYPE_CUR_RESOURCE = 6,
        wxBITMAP_TYPE_XBM = 7,
        wxBITMAP_TYPE_XBM_DATA = 8,
        wxBITMAP_TYPE_XPM = 9,
        wxBITMAP_TYPE_XPM_DATA = 10,
        wxBITMAP_TYPE_TIFF = 11,
        wxBITMAP_TYPE_TIF = 11,
        wxBITMAP_TYPE_TIFF_RESOURCE = 12,
        wxBITMAP_TYPE_TIF_RESOURCE = 12,
        wxBITMAP_TYPE_GIF = 13,
        wxBITMAP_TYPE_GIF_RESOURCE = 14,
        wxBITMAP_TYPE_PNG = 15,
        wxBITMAP_TYPE_PNG_RESOURCE = 16,
        wxBITMAP_TYPE_JPEG = 17,
        wxBITMAP_TYPE_JPEG_RESOURCE = 18,
        wxBITMAP_TYPE_PNM = 19,
        wxBITMAP_TYPE_PNM_RESOURCE = 20,
        wxBITMAP_TYPE_PCX = 21,
        wxBITMAP_TYPE_PCX_RESOURCE = 22,
        wxBITMAP_TYPE_PICT = 23,
        wxBITMAP_TYPE_PICT_RESOURCE = 24,
        wxBITMAP_TYPE_ICON = 25,
        wxBITMAP_TYPE_ICON_RESOURCE = 26,
        wxBITMAP_TYPE_ANI = 27,
        wxBITMAP_TYPE_IFF = 28,
        wxBITMAP_TYPE_TGA = 29,
        wxBITMAP_TYPE_MACCURSOR = 30,
        wxBITMAP_TYPE_MACCURSOR_RESOURCE = 31,
        wxBITMAP_TYPE_MAX = 32,
        wxBITMAP_TYPE_ANY = 50
    }

    public enum wxPolygonFillMode : uint
    {
        wxODDEVEN_RULE = 1,
        wxWINDING_RULE = 2
    }

    public enum wxStockCursor : uint
    {
        wxCURSOR_NONE = 0,
        wxCURSOR_ARROW = 1,
        wxCURSOR_RIGHT_ARROW = 2,
        wxCURSOR_BULLSEYE = 3,
        wxCURSOR_CHAR = 4,
        wxCURSOR_CROSS = 5,
        wxCURSOR_HAND = 6,
        wxCURSOR_IBEAM = 7,
        wxCURSOR_LEFT_BUTTON = 8,
        wxCURSOR_MAGNIFIER = 9,
        wxCURSOR_MIDDLE_BUTTON = 10,
        wxCURSOR_NO_ENTRY = 11,
        wxCURSOR_PAINT_BRUSH = 12,
        wxCURSOR_PENCIL = 13,
        wxCURSOR_POINT_LEFT = 14,
        wxCURSOR_POINT_RIGHT = 15,
        wxCURSOR_QUESTION_ARROW = 16,
        wxCURSOR_RIGHT_BUTTON = 17,
        wxCURSOR_SIZENESW = 18,
        wxCURSOR_SIZENS = 19,
        wxCURSOR_SIZENWSE = 20,
        wxCURSOR_SIZEWE = 21,
        wxCURSOR_SIZING = 22,
        wxCURSOR_SPRAYCAN = 23,
        wxCURSOR_WAIT = 24,
        wxCURSOR_WATCH = 25,
        wxCURSOR_BLANK = 26,
        wxCURSOR_COPY_ARROW = 27,
        wxCURSOR_ARROWWAIT = 28,
        wxCURSOR_OPEN_HAND = 29,
        wxCURSOR_CLOSED_HAND = 30,
        wxCURSOR_MAX = 31
    }

    public enum wxEllipsizeFlags : uint
    {
        wxELLIPSIZE_FLAGS_NONE = 0,
        wxELLIPSIZE_FLAGS_PROCESS_MNEMONICS = 1,
        wxELLIPSIZE_FLAGS_EXPAND_TABS = 2,
        wxELLIPSIZE_FLAGS_DEFAULT = 3
    }

    public enum wxEllipsizeMode : uint
    {
        wxELLIPSIZE_NONE = 0,
        wxELLIPSIZE_START = 1,
        wxELLIPSIZE_MIDDLE = 2,
        wxELLIPSIZE_END = 3
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int wxSortFuncFor_wxPointList(global::System.IntPtr _0, global::System.IntPtr _1);

    public unsafe partial class wxSize : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int x;

            [FieldOffset(4)]
            public int y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSizeC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSizeC2Eii")]
            internal static extern void ctor_1(global::System.IntPtr instance, int xx, int yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSizeC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncToERKS_")]
            internal static extern void IncTo_0(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecToERKS_")]
            internal static extern void DecTo_0(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize16DecToIfSpecifiedERKS_")]
            internal static extern void DecToIfSpecified_0(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncByEii")]
            internal static extern void IncBy_0(global::System.IntPtr instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncByERK7wxPoint")]
            internal static extern void IncBy_1(global::System.IntPtr instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncByERKS_")]
            internal static extern void IncBy_2(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5IncByEi")]
            internal static extern void IncBy_3(global::System.IntPtr instance, int d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecByEii")]
            internal static extern void DecBy_0(global::System.IntPtr instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecByERK7wxPoint")]
            internal static extern void DecBy_1(global::System.IntPtr instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecByERKS_")]
            internal static extern void DecBy_2(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5DecByEi")]
            internal static extern void DecBy_3(global::System.IntPtr instance, int d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize5ScaleEff")]
            internal static extern global::System.IntPtr Scale_0(global::System.IntPtr instance, float xscale, float yscale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize3SetEii")]
            internal static extern void Set_0(global::System.IntPtr instance, int xx, int yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize8SetWidthEi")]
            internal static extern void SetWidth_0(global::System.IntPtr instance, int w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize9SetHeightEi")]
            internal static extern void SetHeight_0(global::System.IntPtr instance, int h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize8GetWidthEv")]
            internal static extern int GetWidth_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize9GetHeightEv")]
            internal static extern int GetHeight_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize16IsFullySpecifiedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsFullySpecified_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxSize11SetDefaultsERKS_")]
            internal static extern void SetDefaults_0(global::System.IntPtr instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize4GetXEv")]
            internal static extern int GetX_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxSize4GetYEv")]
            internal static extern int GetY_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK6wxSizeS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK6wxSizeS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK6wxSizeS1_")]
            internal static extern wxSize.Internal OperatorPlus_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK6wxSizeS1_")]
            internal static extern wxSize.Internal OperatorMinus_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK6wxSizei")]
            internal static extern wxSize.Internal OperatorSlash_0(global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK6wxSizei")]
            internal static extern wxSize.Internal OperatorStar_0(global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmliRK6wxSize")]
            internal static extern wxSize.Internal OperatorStar_1(int i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK6wxSizej")]
            internal static extern wxSize.Internal OperatorSlash_1(global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK6wxSizej")]
            internal static extern wxSize.Internal OperatorStar_2(global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmljRK6wxSize")]
            internal static extern wxSize.Internal OperatorStar_3(uint i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK6wxSized")]
            internal static extern wxSize.Internal OperatorStar_8(global::System.IntPtr s, double i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmldRK6wxSize")]
            internal static extern wxSize.Internal OperatorStar_9(double i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK6wxSizeRK7wxPoint")]
            internal static extern wxPoint.Internal OperatorPlus_1(global::System.IntPtr s, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK6wxSizeRK7wxPoint")]
            internal static extern wxPoint.Internal OperatorMinus_1(global::System.IntPtr s, global::System.IntPtr p);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxSize> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxSize>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxSize __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxSize(native.ToPointer(), skipVTables);
        }

        public static wxSize __CreateInstance(wxSize.Internal native, bool skipVTables = false)
        {
            return new wxSize(native, skipVTables);
        }

        private static void* __CopyValue(wxSize.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxSize.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxSize(wxSize.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxSize(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxSize()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxSize(int xx, int yy)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), xx, yy);
        }

        public wxSize(wxSize _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxSize.Internal*) __Instance) = *((wxSize.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxSize __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void IncTo(wxSize sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            Internal.IncTo_0((__Instance + __PointerAdjustment), arg0);
        }

        public void DecTo(wxSize sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            Internal.DecTo_0((__Instance + __PointerAdjustment), arg0);
        }

        public void DecToIfSpecified(wxSize sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            Internal.DecToIfSpecified_0((__Instance + __PointerAdjustment), arg0);
        }

        public void IncBy(int dx, int dy)
        {
            Internal.IncBy_0((__Instance + __PointerAdjustment), dx, dy);
        }

        public void IncBy(wxPoint pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pt.__Instance;
            Internal.IncBy_1((__Instance + __PointerAdjustment), arg0);
        }

        public void IncBy(wxSize sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            Internal.IncBy_2((__Instance + __PointerAdjustment), arg0);
        }

        public void IncBy(int d)
        {
            Internal.IncBy_3((__Instance + __PointerAdjustment), d);
        }

        public void DecBy(int dx, int dy)
        {
            Internal.DecBy_0((__Instance + __PointerAdjustment), dx, dy);
        }

        public void DecBy(wxPoint pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pt.__Instance;
            Internal.DecBy_1((__Instance + __PointerAdjustment), arg0);
        }

        public void DecBy(wxSize sz)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            Internal.DecBy_2((__Instance + __PointerAdjustment), arg0);
        }

        public void DecBy(int d)
        {
            Internal.DecBy_3((__Instance + __PointerAdjustment), d);
        }

        public wxSize Scale(float xscale, float yscale)
        {
            var __ret = Internal.Scale_0((__Instance + __PointerAdjustment), xscale, yscale);
            wxSize __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxSize.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxSize) wxSize.NativeToManagedMap[__ret];
            else __result0 = wxSize.__CreateInstance(__ret);
            return __result0;
        }

        public void Set(int xx, int yy)
        {
            Internal.Set_0((__Instance + __PointerAdjustment), xx, yy);
        }

        public void SetWidth(int w)
        {
            Internal.SetWidth_0((__Instance + __PointerAdjustment), w);
        }

        public void SetHeight(int h)
        {
            Internal.SetHeight_0((__Instance + __PointerAdjustment), h);
        }

        public int GetWidth()
        {
            var __ret = Internal.GetWidth_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetHeight()
        {
            var __ret = Internal.GetHeight_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsFullySpecified()
        {
            var __ret = Internal.IsFullySpecified_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetDefaults(wxSize size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var arg0 = size.__Instance;
            Internal.SetDefaults_0((__Instance + __PointerAdjustment), arg0);
        }

        public int GetX()
        {
            var __ret = Internal.GetX_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetY()
        {
            var __ret = Internal.GetY_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static bool operator ==(wxSize s1, wxSize s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return s1Null && s2Null;
            var arg0 = s1.__Instance;
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxSize;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxSize s1, wxSize s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return !(s1Null && s2Null);
            var arg0 = s1.__Instance;
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static wxSize operator +(wxSize s1, wxSize s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorPlus_0(arg0, arg1);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize operator -(wxSize s1, wxSize s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorMinus_0(arg0, arg1);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize operator /(wxSize s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorSlash_0(arg0, i);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize operator *(wxSize s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorStar_0(arg0, i);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize operator *(int i, wxSize s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorStar_1(i, arg1);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize operator /(wxSize s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorSlash_1(arg0, i);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize operator *(wxSize s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorStar_2(arg0, i);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize operator *(uint i, wxSize s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorStar_3(i, arg1);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize operator *(wxSize s, double i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorStar_8(arg0, i);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize operator *(double i, wxSize s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorStar_9(i, arg1);
            return wxSize.__CreateInstance(__ret);
        }

        public static wxPoint operator +(wxSize s, wxPoint p)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg1 = p.__Instance;
            var __ret = Internal.OperatorPlus_1(arg0, arg1);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator -(wxSize s, wxPoint p)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg1 = p.__Instance;
            var __ret = Internal.OperatorMinus_1(arg0, arg1);
            return wxPoint.__CreateInstance(__ret);
        }

        public int x
        {
            get
            {
                return ((Internal*) __Instance)->x;
            }

            set
            {
                ((Internal*) __Instance)->x = value;
            }
        }

        public int y
        {
            get
            {
                return ((Internal*) __Instance)->y;
            }

            set
            {
                ((Internal*) __Instance)->y = value;
            }
        }
    }

    public unsafe partial class wxRealPoint : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public double x;

            [FieldOffset(8)]
            public double y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxRealPointC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxRealPointC2Edd")]
            internal static extern void ctor_1(global::System.IntPtr instance, double xx, double yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxRealPointC2ERK7wxPoint")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxRealPointC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK11wxRealPointS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK11wxRealPointS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK11wxRealPointS1_")]
            internal static extern void OperatorPlus_0(global::System.IntPtr @return, global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK11wxRealPointS1_")]
            internal static extern void OperatorMinus_0(global::System.IntPtr @return, global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK11wxRealPointi")]
            internal static extern void OperatorSlash_0(global::System.IntPtr @return, global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK11wxRealPointi")]
            internal static extern void OperatorStar_0(global::System.IntPtr @return, global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmliRK11wxRealPoint")]
            internal static extern void OperatorStar_1(global::System.IntPtr @return, int i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK11wxRealPointj")]
            internal static extern void OperatorSlash_1(global::System.IntPtr @return, global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK11wxRealPointj")]
            internal static extern void OperatorStar_2(global::System.IntPtr @return, global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmljRK11wxRealPoint")]
            internal static extern void OperatorStar_3(global::System.IntPtr @return, uint i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK11wxRealPointd")]
            internal static extern void OperatorStar_8(global::System.IntPtr @return, global::System.IntPtr s, double i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmldRK11wxRealPoint")]
            internal static extern void OperatorStar_9(global::System.IntPtr @return, double i, global::System.IntPtr s);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxRealPoint> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxRealPoint>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxRealPoint __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxRealPoint(native.ToPointer(), skipVTables);
        }

        public static wxRealPoint __CreateInstance(wxRealPoint.Internal native, bool skipVTables = false)
        {
            return new wxRealPoint(native, skipVTables);
        }

        private static void* __CopyValue(wxRealPoint.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            *(wxRealPoint.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxRealPoint(wxRealPoint.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxRealPoint(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxRealPoint()
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxRealPoint(double xx, double yy)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), xx, yy);
        }

        public wxRealPoint(wxPoint pt)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pt.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public wxRealPoint(wxRealPoint _0)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxRealPoint.Internal*) __Instance) = *((wxRealPoint.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxRealPoint __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static bool operator ==(wxRealPoint p1, wxRealPoint p2)
        {
            bool p1Null = ReferenceEquals(p1, null);
            bool p2Null = ReferenceEquals(p2, null);
            if (p1Null || p2Null)
                return p1Null && p2Null;
            var arg0 = p1.__Instance;
            var arg1 = p2.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxRealPoint;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxRealPoint p1, wxRealPoint p2)
        {
            bool p1Null = ReferenceEquals(p1, null);
            bool p2Null = ReferenceEquals(p2, null);
            if (p1Null || p2Null)
                return !(p1Null && p2Null);
            var arg0 = p1.__Instance;
            var arg1 = p2.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static wxRealPoint operator +(wxRealPoint p1, wxRealPoint p2)
        {
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = p2.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorPlus_0(new IntPtr(&__ret), arg0, arg1);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public static wxRealPoint operator -(wxRealPoint p1, wxRealPoint p2)
        {
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = p2.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorMinus_0(new IntPtr(&__ret), arg0, arg1);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public static wxRealPoint operator /(wxRealPoint s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorSlash_0(new IntPtr(&__ret), arg0, i);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public static wxRealPoint operator *(wxRealPoint s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorStar_0(new IntPtr(&__ret), arg0, i);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public static wxRealPoint operator *(int i, wxRealPoint s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorStar_1(new IntPtr(&__ret), i, arg1);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public static wxRealPoint operator /(wxRealPoint s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorSlash_1(new IntPtr(&__ret), arg0, i);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public static wxRealPoint operator *(wxRealPoint s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorStar_2(new IntPtr(&__ret), arg0, i);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public static wxRealPoint operator *(uint i, wxRealPoint s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorStar_3(new IntPtr(&__ret), i, arg1);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public static wxRealPoint operator *(wxRealPoint s, double i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorStar_8(new IntPtr(&__ret), arg0, i);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public static wxRealPoint operator *(double i, wxRealPoint s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = new wxRealPoint.Internal();
            Internal.OperatorStar_9(new IntPtr(&__ret), i, arg1);
            return wxRealPoint.__CreateInstance(__ret);
        }

        public double x
        {
            get
            {
                return ((Internal*) __Instance)->x;
            }

            set
            {
                ((Internal*) __Instance)->x = value;
            }
        }

        public double y
        {
            get
            {
                return ((Internal*) __Instance)->y;
            }

            set
            {
                ((Internal*) __Instance)->y = value;
            }
        }
    }

    public unsafe partial class wxPoint : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int x;

            [FieldOffset(4)]
            public int y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPointC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPointC2Eii")]
            internal static extern void ctor_1(global::System.IntPtr instance, int xx, int yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPointC2ERK11wxRealPoint")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPointC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxPoint16IsFullySpecifiedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsFullySpecified_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxPoint11SetDefaultsERKS_")]
            internal static extern void SetDefaults_0(global::System.IntPtr instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK7wxPointS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK7wxPointS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK7wxPointS1_")]
            internal static extern wxPoint.Internal OperatorPlus_0(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK7wxPointS1_")]
            internal static extern wxPoint.Internal OperatorMinus_0(global::System.IntPtr p1, global::System.IntPtr p2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK7wxPointRK6wxSize")]
            internal static extern wxPoint.Internal OperatorPlus_1(global::System.IntPtr p, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiRK7wxPointRK6wxSize")]
            internal static extern wxPoint.Internal OperatorMinus_1(global::System.IntPtr p, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZngRK7wxPoint")]
            internal static extern wxPoint.Internal OperatorMinus_2(global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK7wxPointi")]
            internal static extern wxPoint.Internal OperatorSlash_0(global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK7wxPointi")]
            internal static extern wxPoint.Internal OperatorStar_0(global::System.IntPtr s, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmliRK7wxPoint")]
            internal static extern wxPoint.Internal OperatorStar_1(int i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZdvRK7wxPointj")]
            internal static extern wxPoint.Internal OperatorSlash_1(global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK7wxPointj")]
            internal static extern wxPoint.Internal OperatorStar_2(global::System.IntPtr s, uint i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmljRK7wxPoint")]
            internal static extern wxPoint.Internal OperatorStar_3(uint i, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK7wxPointd")]
            internal static extern wxPoint.Internal OperatorStar_8(global::System.IntPtr s, double i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmldRK7wxPoint")]
            internal static extern wxPoint.Internal OperatorStar_9(double i, global::System.IntPtr s);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPoint> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPoint>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxPoint __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPoint(native.ToPointer(), skipVTables);
        }

        public static wxPoint __CreateInstance(wxPoint.Internal native, bool skipVTables = false)
        {
            return new wxPoint(native, skipVTables);
        }

        private static void* __CopyValue(wxPoint.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxPoint.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxPoint(wxPoint.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPoint(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxPoint()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxPoint(int xx, int yy)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), xx, yy);
        }

        public wxPoint(wxRealPoint pt)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pt.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public wxPoint(wxPoint _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxPoint.Internal*) __Instance) = *((wxPoint.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxPoint __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool IsFullySpecified()
        {
            var __ret = Internal.IsFullySpecified_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetDefaults(wxPoint pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pt.__Instance;
            Internal.SetDefaults_0((__Instance + __PointerAdjustment), arg0);
        }

        public static bool operator ==(wxPoint p1, wxPoint p2)
        {
            bool p1Null = ReferenceEquals(p1, null);
            bool p2Null = ReferenceEquals(p2, null);
            if (p1Null || p2Null)
                return p1Null && p2Null;
            var arg0 = p1.__Instance;
            var arg1 = p2.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxPoint;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxPoint p1, wxPoint p2)
        {
            bool p1Null = ReferenceEquals(p1, null);
            bool p2Null = ReferenceEquals(p2, null);
            if (p1Null || p2Null)
                return !(p1Null && p2Null);
            var arg0 = p1.__Instance;
            var arg1 = p2.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static wxPoint operator +(wxPoint p1, wxPoint p2)
        {
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = p2.__Instance;
            var __ret = Internal.OperatorPlus_0(arg0, arg1);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator -(wxPoint p1, wxPoint p2)
        {
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = p2.__Instance;
            var __ret = Internal.OperatorMinus_0(arg0, arg1);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator +(wxPoint p, wxSize s)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorPlus_1(arg0, arg1);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator -(wxPoint p, wxSize s)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorMinus_1(arg0, arg1);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator -(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            var __ret = Internal.OperatorMinus_2(arg0);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator /(wxPoint s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorSlash_0(arg0, i);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator *(wxPoint s, int i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorStar_0(arg0, i);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator *(int i, wxPoint s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorStar_1(i, arg1);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator /(wxPoint s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorSlash_1(arg0, i);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator *(wxPoint s, uint i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorStar_2(arg0, i);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator *(uint i, wxPoint s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorStar_3(i, arg1);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator *(wxPoint s, double i)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorStar_8(arg0, i);
            return wxPoint.__CreateInstance(__ret);
        }

        public static wxPoint operator *(double i, wxPoint s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorStar_9(i, arg1);
            return wxPoint.__CreateInstance(__ret);
        }

        public int x
        {
            get
            {
                return ((Internal*) __Instance)->x;
            }

            set
            {
                ((Internal*) __Instance)->x = value;
            }
        }

        public int y
        {
            get
            {
                return ((Internal*) __Instance)->y;
            }

            set
            {
                ((Internal*) __Instance)->y = value;
            }
        }
    }

    public unsafe partial class wxwxPointListNode : wxNodeBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public wxListKeyValue.Internal m_key;

            [FieldOffset(8)]
            public global::System.IntPtr m_data;

            [FieldOffset(12)]
            public global::System.IntPtr m_next;

            [FieldOffset(16)]
            public global::System.IntPtr m_previous;

            [FieldOffset(20)]
            public global::System.IntPtr m_list;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxwxPointListNodeC2EP10wxListBasePS_S2_P7wxPointRK9wxListKey")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr list, global::System.IntPtr previous, global::System.IntPtr next, global::System.IntPtr data, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxwxPointListNode7GetNextEv")]
            internal static extern global::System.IntPtr GetNext_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxwxPointListNode11GetPreviousEv")]
            internal static extern global::System.IntPtr GetPrevious_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxwxPointListNode7GetDataEv")]
            internal static extern global::System.IntPtr GetData_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxwxPointListNode7SetDataEP7wxPoint")]
            internal static extern void SetData_0(global::System.IntPtr instance, global::System.IntPtr data);
        }

        public static new wxwxPointListNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxwxPointListNode(native.ToPointer(), skipVTables);
        }

        public static wxwxPointListNode __CreateInstance(wxwxPointListNode.Internal native, bool skipVTables = false)
        {
            return new wxwxPointListNode(native, skipVTables);
        }

        private static void* __CopyValue(wxwxPointListNode.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            *(wxwxPointListNode.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxwxPointListNode(wxwxPointListNode.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxwxPointListNode(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxwxPointListNode(wxListBase list, wxwxPointListNode previous, wxwxPointListNode next, wxPoint data, wxListKey key)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(list, null) ? global::System.IntPtr.Zero : list.__Instance;
            var arg1 = ReferenceEquals(previous, null) ? global::System.IntPtr.Zero : previous.__Instance;
            var arg2 = ReferenceEquals(next, null) ? global::System.IntPtr.Zero : next.__Instance;
            var arg3 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg4 = key.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3, arg4);
            SetupVTables(GetType().FullName == "wxSharp.wxwxPointListNode");
        }

        public wxwxPointListNode GetNext()
        {
            var __ret = Internal.GetNext_0((__Instance + __PointerAdjustment));
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode GetPrevious()
        {
            var __ret = Internal.GetPrevious_0((__Instance + __PointerAdjustment));
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxPoint GetData()
        {
            var __ret = Internal.GetData_0((__Instance + __PointerAdjustment));
            wxPoint __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPoint.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPoint) wxPoint.NativeToManagedMap[__ret];
            else __result0 = wxPoint.__CreateInstance(__ret);
            return __result0;
        }

        public void SetData(wxPoint data)
        {
            var arg0 = ReferenceEquals(data, null) ? global::System.IntPtr.Zero : data.__Instance;
            Internal.SetData_0((__Instance + __PointerAdjustment), arg0);
        }

        protected override void DeleteData()
        {
            base.DeleteData();
        }

        #region Virtual table interop

        // 
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxwxPointListNode) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // 
        private static Delegates.Action_IntPtr _DeleteData_0DelegateInstance;

        private static void _DeleteData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxwxPointListNode) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.DeleteData();
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[2];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _DeleteData_0DelegateInstance += _DeleteData_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_DeleteData_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxPointList : wxListBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public uint m_count;

            [FieldOffset(8)]
            public byte m_destroy;

            [FieldOffset(12)]
            public global::System.IntPtr m_nodeFirst;

            [FieldOffset(16)]
            public global::System.IntPtr m_nodeLast;

            [FieldOffset(20)]
            public wxKeyType m_keyType;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointListC2E9wxKeyType")]
            internal static extern void ctor_0(global::System.IntPtr instance, wxKeyType keyType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointListC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr list);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointListC2EmRKP7wxPoint")]
            internal static extern void ctor_3(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointListC2ERKNS_14const_iteratorES2_")]
            internal static extern void ctor_4(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList8GetFirstEv")]
            internal static extern global::System.IntPtr GetFirst_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList7GetLastEv")]
            internal static extern global::System.IntPtr GetLast_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList4ItemEm")]
            internal static extern global::System.IntPtr Item_0(global::System.IntPtr instance, uint index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6AppendEP7wxPoint")]
            internal static extern global::System.IntPtr Append_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6InsertEP7wxPoint")]
            internal static extern global::System.IntPtr Insert_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6InsertEmP7wxPoint")]
            internal static extern global::System.IntPtr Insert_1(global::System.IntPtr instance, uint pos, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6InsertEP17wxwxPointListNodeP7wxPoint")]
            internal static extern global::System.IntPtr Insert_2(global::System.IntPtr instance, global::System.IntPtr prev, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6AppendElPv")]
            internal static extern global::System.IntPtr Append_1(global::System.IntPtr instance, int key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6AppendEPKwPv")]
            internal static extern global::System.IntPtr Append_2(global::System.IntPtr instance, global::System.IntPtr key, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList10DetachNodeEP17wxwxPointListNode")]
            internal static extern global::System.IntPtr DetachNode_0(global::System.IntPtr instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList10DeleteNodeEP17wxwxPointListNode")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool DeleteNode_0(global::System.IntPtr instance, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList12DeleteObjectEP7wxPoint")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool DeleteObject_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5EraseEP17wxwxPointListNode")]
            internal static extern void Erase_0(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList4FindEPK7wxPoint")]
            internal static extern global::System.IntPtr Find_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList6MemberEPK7wxPoint")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Member_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList7IndexOfEP7wxPoint")]
            internal static extern int IndexOf_0(global::System.IntPtr instance, global::System.IntPtr @object);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList4SortEPFiPKvS1_E")]
            internal static extern void Sort_0(global::System.IntPtr instance, global::System.IntPtr func);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList4SortEPFiPPK7wxPointS3_E")]
            internal static extern void Sort_1(global::System.IntPtr instance, global::System.IntPtr func);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5beginEv")]
            internal static extern wxPointList.iterator.Internal begin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList3endEv")]
            internal static extern wxPointList.iterator.Internal end_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6rbeginEv")]
            internal static extern wxPointList.reverse_iterator.Internal rbegin_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList4rendEv")]
            internal static extern wxPointList.reverse_iterator.Internal rend_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6resizeEmP7wxPoint")]
            internal static extern void resize_0(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointList5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5frontEv")]
            internal static extern global::System.IntPtr front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList4backEv")]
            internal static extern global::System.IntPtr back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList10push_frontERKP7wxPoint")]
            internal static extern void push_front_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList9pop_frontEv")]
            internal static extern void pop_front_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList9push_backERKP7wxPoint")]
            internal static extern void push_back_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList8pop_backEv")]
            internal static extern void pop_back_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6assignENS_14const_iteratorERKS0_")]
            internal static extern void assign_0(global::System.IntPtr instance, wxPointList.const_iterator.Internal first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6assignEmRKP7wxPoint")]
            internal static extern void assign_1(global::System.IntPtr instance, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6insertERKNS_8iteratorERKP7wxPoint")]
            internal static extern wxPointList.iterator.Internal insert_0(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6insertERKNS_8iteratorEmRKP7wxPoint")]
            internal static extern void insert_1(global::System.IntPtr instance, global::System.IntPtr it, uint n, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6insertERKNS_8iteratorENS_14const_iteratorERKS3_")]
            internal static extern void insert_2(global::System.IntPtr instance, global::System.IntPtr it, wxPointList.const_iterator.Internal first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5eraseERKNS_8iteratorE")]
            internal static extern wxPointList.iterator.Internal erase_0(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5eraseERKNS_8iteratorES2_")]
            internal static extern wxPointList.iterator.Internal erase_1(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6spliceERKNS_8iteratorERS_S2_S2_")]
            internal static extern void splice_0(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr l, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6spliceERKNS_8iteratorERS_")]
            internal static extern void splice_1(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6spliceERKNS_8iteratorERS_S2_")]
            internal static extern void splice_2(global::System.IntPtr instance, global::System.IntPtr it, global::System.IntPtr l, global::System.IntPtr first);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList6removeERKP7wxPoint")]
            internal static extern void remove_0(global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxPointList7reverseEv")]
            internal static extern void reverse_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxPointListixEm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint index);
        }

        public class value_type { }

        public class base_value_type { }

        public unsafe partial class compatibility_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_ptr;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22compatibility_iteratorC2EP17wxwxPointListNode")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr ptr);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22compatibility_iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList22compatibility_iteratorcvP17wxwxPointListNodeEv")]
                internal static extern global::System.IntPtr OperatorConversion_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, compatibility_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, compatibility_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static compatibility_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new compatibility_iterator(native.ToPointer(), skipVTables);
            }

            public static compatibility_iterator __CreateInstance(compatibility_iterator.Internal native, bool skipVTables = false)
            {
                return new compatibility_iterator(native, skipVTables);
            }

            private static void* __CopyValue(compatibility_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                *(compatibility_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private compatibility_iterator(compatibility_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected compatibility_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public compatibility_iterator(wxwxPointListNode ptr)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(ptr, null) ? global::System.IntPtr.Zero : ptr.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public compatibility_iterator(wxPointList.compatibility_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((compatibility_iterator.Internal*) __Instance) = *((compatibility_iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxPointList.compatibility_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static implicit operator wxwxPointListNode(wxPointList.compatibility_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorConversion_0(arg0);
                wxwxPointListNode __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
                else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList8iteratorC2EP17wxwxPointListNodeS2_")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList8iteratorC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList8iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList8iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList8iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList8iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public class value_type { }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator(wxwxPointListNode node, wxwxPointListNode init)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment));
            }

            public iterator(wxPointList.iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((iterator.Internal*) __Instance) = *((iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxPointList.iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxPointList.iterator operator ++(wxPointList.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxPointList.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPointList.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPointList.iterator) wxPointList.iterator.NativeToManagedMap[__ret];
                else __result0 = wxPointList.iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxPointList.iterator operator --(wxPointList.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxPointList.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPointList.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPointList.iterator) wxPointList.iterator.NativeToManagedMap[__ret];
                else __result0 = wxPointList.iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static bool operator !=(wxPointList.iterator __op, wxPointList.iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxPointList.iterator __op, wxPointList.iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public wxwxPointListNode m_node
            {
                get
                {
                    wxwxPointListNode __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_node] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxwxPointListNode m_init
            {
                get
                {
                    wxwxPointListNode __result0;
                    if (((Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_init))
                        __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_init];
                    else wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_init] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(((Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class const_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratorC2EP17wxwxPointListNodeS2_")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratorC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratorC2ERKNS_8iteratorE")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList14const_iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList14const_iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList14const_iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public class value_type { }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator(wxwxPointListNode node, wxwxPointListNode init)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxPointList.iterator it)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxPointList.const_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxPointList.const_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxPointList.const_iterator operator ++(wxPointList.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxPointList.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPointList.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPointList.const_iterator) wxPointList.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxPointList.const_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxPointList.const_iterator operator --(wxPointList.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxPointList.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPointList.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPointList.const_iterator) wxPointList.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxPointList.const_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static bool operator !=(wxPointList.const_iterator __op, wxPointList.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxPointList.const_iterator __op, wxPointList.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as const_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public wxwxPointListNode m_node
            {
                get
                {
                    wxwxPointListNode __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_node] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxwxPointListNode m_init
            {
                get
                {
                    wxwxPointListNode __result0;
                    if (((Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_init))
                        __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_init];
                    else wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_init] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(((Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList16reverse_iteratorC2EP17wxwxPointListNodeS2_")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList16reverse_iteratorC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList16reverse_iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList16reverse_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList16reverse_iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList16reverse_iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList16reverse_iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public class value_type { }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static reverse_iterator __CreateInstance(reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private reverse_iterator(reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public reverse_iterator(wxwxPointListNode node, wxwxPointListNode init)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment));
            }

            public reverse_iterator(wxPointList.reverse_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((reverse_iterator.Internal*) __Instance) = *((reverse_iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxPointList.reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxPointList.reverse_iterator operator ++(wxPointList.reverse_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxPointList.reverse_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPointList.reverse_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPointList.reverse_iterator) wxPointList.reverse_iterator.NativeToManagedMap[__ret];
                else __result0 = wxPointList.reverse_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxPointList.reverse_iterator operator --(wxPointList.reverse_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxPointList.reverse_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPointList.reverse_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPointList.reverse_iterator) wxPointList.reverse_iterator.NativeToManagedMap[__ret];
                else __result0 = wxPointList.reverse_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static bool operator !=(wxPointList.reverse_iterator __op, wxPointList.reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxPointList.reverse_iterator __op, wxPointList.reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as reverse_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public wxwxPointListNode m_node
            {
                get
                {
                    wxwxPointListNode __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_node] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxwxPointListNode m_init
            {
                get
                {
                    wxwxPointListNode __result0;
                    if (((Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_init))
                        __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_init];
                    else wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_init] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(((Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class const_reverse_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_init;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratorC2EP17wxwxPointListNodeS2_")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr init);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratorC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratorC2ERKNS_16reverse_iteratorE")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxPointList22const_reverse_iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList22const_reverse_iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxPointList22const_reverse_iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public class value_type { }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_reverse_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_reverse_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native.ToPointer(), skipVTables);
            }

            public static const_reverse_iterator __CreateInstance(const_reverse_iterator.Internal native, bool skipVTables = false)
            {
                return new const_reverse_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_reverse_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_reverse_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_reverse_iterator(const_reverse_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_reverse_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_reverse_iterator(wxwxPointListNode node, wxwxPointListNode init)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(init, null) ? global::System.IntPtr.Zero : init.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_reverse_iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment));
            }

            public const_reverse_iterator(wxPointList.reverse_iterator it)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(it, null))
                    throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
                var arg0 = it.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
            }

            public const_reverse_iterator(wxPointList.const_reverse_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_reverse_iterator.Internal*) __Instance) = *((const_reverse_iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxPointList.const_reverse_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxPointList.const_reverse_iterator operator ++(wxPointList.const_reverse_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxPointList.const_reverse_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPointList.const_reverse_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPointList.const_reverse_iterator) wxPointList.const_reverse_iterator.NativeToManagedMap[__ret];
                else __result0 = wxPointList.const_reverse_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxPointList.const_reverse_iterator operator --(wxPointList.const_reverse_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxPointList.const_reverse_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPointList.const_reverse_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPointList.const_reverse_iterator) wxPointList.const_reverse_iterator.NativeToManagedMap[__ret];
                else __result0 = wxPointList.const_reverse_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static bool operator !=(wxPointList.const_reverse_iterator __op, wxPointList.const_reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxPointList.const_reverse_iterator __op, wxPointList.const_reverse_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as const_reverse_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public wxwxPointListNode m_node
            {
                get
                {
                    wxwxPointListNode __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_node] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxwxPointListNode m_init
            {
                get
                {
                    wxwxPointListNode __result0;
                    if (((Internal*) __Instance)->m_init == IntPtr.Zero) __result0 = null;
                    else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_init))
                        __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_init];
                    else wxwxPointListNode.NativeToManagedMap[((Internal*) __Instance)->m_init] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(((Internal*) __Instance)->m_init);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_init = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public static new wxPointList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPointList(native.ToPointer(), skipVTables);
        }

        public static wxPointList __CreateInstance(wxPointList.Internal native, bool skipVTables = false)
        {
            return new wxPointList(native, skipVTables);
        }

        private static void* __CopyValue(wxPointList.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            wxPointList.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxPointList(wxPointList.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPointList(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxPointList(wxKeyType keyType)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = keyType;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxPointList");
        }

        public wxPointList(wxPointList list)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(list, null))
                throw new global::System.ArgumentNullException("list", "Cannot be null because it is a C++ reference (&).");
            var arg0 = list.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxPointList");
        }

        public wxPointList(uint n, wxPoint v)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), n, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxPointList");
        }

        public wxPointList(wxPointList.const_iterator first, wxPointList.const_iterator last)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg1 = last.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxPointList");
        }

        public wxwxPointListNode GetFirst()
        {
            var __ret = Internal.GetFirst_0((__Instance + __PointerAdjustment));
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode GetLast()
        {
            var __ret = Internal.GetLast_0((__Instance + __PointerAdjustment));
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode Item(uint index)
        {
            var __ret = Internal.Item_0((__Instance + __PointerAdjustment), index);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode Append(wxPoint @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Append_0((__Instance + __PointerAdjustment), arg0);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode Insert(wxPoint @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Insert_0((__Instance + __PointerAdjustment), arg0);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode Insert(uint pos, wxPoint @object)
        {
            var arg1 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Insert_1((__Instance + __PointerAdjustment), pos, arg1);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode Insert(wxwxPointListNode prev, wxPoint @object)
        {
            var arg0 = ReferenceEquals(prev, null) ? global::System.IntPtr.Zero : prev.__Instance;
            var arg1 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Insert_2((__Instance + __PointerAdjustment), arg0, arg1);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode Append(int key, global::System.IntPtr @object)
        {
            var arg1 = @object;
            var __ret = Internal.Append_1((__Instance + __PointerAdjustment), key, arg1);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode Append(string key, global::System.IntPtr @object)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(key);
            var arg1 = @object;
            var __ret = Internal.Append_2((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public wxwxPointListNode DetachNode(wxwxPointListNode node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.DetachNode_0((__Instance + __PointerAdjustment), arg0);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public bool DeleteNode(wxwxPointListNode node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.DeleteNode_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool DeleteObject(wxPoint @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.DeleteObject_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void Erase(wxwxPointListNode it)
        {
            var arg0 = ReferenceEquals(it, null) ? global::System.IntPtr.Zero : it.__Instance;
            Internal.Erase_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxwxPointListNode Find(wxPoint @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Find_0((__Instance + __PointerAdjustment), arg0);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public virtual wxwxPointListNode Find(wxListKey key)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___Find_1Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = ___Find_1Delegate((__Instance + __PointerAdjustment), arg0);
            wxwxPointListNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxwxPointListNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxwxPointListNode) wxwxPointListNode.NativeToManagedMap[__ret];
            else wxwxPointListNode.NativeToManagedMap[__ret] = __result0 = (wxwxPointListNode) wxwxPointListNode.__CreateInstance(__ret);
            return __result0;
        }

        public bool Member(wxPoint @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.Member_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int IndexOf(wxPoint @object)
        {
            var arg0 = ReferenceEquals(@object, null) ? global::System.IntPtr.Zero : @object.__Instance;
            var __ret = Internal.IndexOf_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void Sort(wxSortCompareFunction func)
        {
            var arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            Internal.Sort_0((__Instance + __PointerAdjustment), arg0);
        }

        public void Sort(wxSortFuncFor_wxPointList func)
        {
            var arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            Internal.Sort_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override wxNodeBase CreateNode(wxNodeBase prev, wxNodeBase next, global::System.IntPtr data, wxListKey key)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___CreateNode_0Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(prev, null) ? global::System.IntPtr.Zero : prev.__Instance;
            var arg1 = ReferenceEquals(next, null) ? global::System.IntPtr.Zero : next.__Instance;
            var arg2 = data;
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg3 = key.__Instance;
            var __ret = ___CreateNode_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
            wxNodeBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxNodeBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxNodeBase) wxNodeBase.NativeToManagedMap[__ret];
            else wxNodeBase.NativeToManagedMap[__ret] = __result0 = (wxNodeBase) wxNodeBase.__CreateInstance(__ret);
            return __result0;
        }

        public wxPointList.iterator begin()
        {
            var __ret = Internal.begin_0((__Instance + __PointerAdjustment));
            return wxPointList.iterator.__CreateInstance(__ret);
        }

        public wxPointList.iterator end()
        {
            var __ret = Internal.end_0((__Instance + __PointerAdjustment));
            return wxPointList.iterator.__CreateInstance(__ret);
        }

        public wxPointList.reverse_iterator rbegin()
        {
            var __ret = Internal.rbegin_0((__Instance + __PointerAdjustment));
            return wxPointList.reverse_iterator.__CreateInstance(__ret);
        }

        public wxPointList.reverse_iterator rend()
        {
            var __ret = Internal.rend_0((__Instance + __PointerAdjustment));
            return wxPointList.reverse_iterator.__CreateInstance(__ret);
        }

        public void resize(uint n, wxPoint v)
        {
            var arg1 = ReferenceEquals(v, null) ? global::System.IntPtr.Zero : v.__Instance;
            Internal.resize_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxPoint front()
        {
            var __ret = Internal.front_0((__Instance + __PointerAdjustment));
            wxPoint __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPoint.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPoint) wxPoint.NativeToManagedMap[__ret];
            else __result0 = wxPoint.__CreateInstance(__ret);
            return __result0;
        }

        public wxPoint back()
        {
            var __ret = Internal.back_0((__Instance + __PointerAdjustment));
            wxPoint __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPoint.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPoint) wxPoint.NativeToManagedMap[__ret];
            else __result0 = wxPoint.__CreateInstance(__ret);
            return __result0;
        }

        public void push_front(wxPoint v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.push_front_0((__Instance + __PointerAdjustment), arg0);
        }

        public void pop_front()
        {
            Internal.pop_front_0((__Instance + __PointerAdjustment));
        }

        public void push_back(wxPoint v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.push_back_0((__Instance + __PointerAdjustment), arg0);
        }

        public void pop_back()
        {
            Internal.pop_back_0((__Instance + __PointerAdjustment));
        }

        public void assign(wxPointList.const_iterator first, wxPointList.const_iterator last)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxPointList.const_iterator.Internal() : *(wxPointList.const_iterator.Internal*) (first.__Instance);
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg1 = last.__Instance;
            Internal.assign_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void assign(uint n, wxPoint v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            Internal.assign_1((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxPointList.iterator insert(wxPointList.iterator it, wxPoint v)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg1 = v.__Instance;
            var __ret = Internal.insert_0((__Instance + __PointerAdjustment), arg0, arg1);
            return wxPointList.iterator.__CreateInstance(__ret);
        }

        public void insert(wxPointList.iterator it, uint n, wxPoint v)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg2 = v.__Instance;
            Internal.insert_1((__Instance + __PointerAdjustment), arg0, n, arg2);
        }

        public void insert(wxPointList.iterator it, wxPointList.const_iterator first, wxPointList.const_iterator last)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            var arg1 = ReferenceEquals(first, null) ? new wxPointList.const_iterator.Internal() : *(wxPointList.const_iterator.Internal*) (first.__Instance);
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg2 = last.__Instance;
            Internal.insert_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public wxPointList.iterator erase(wxPointList.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return wxPointList.iterator.__CreateInstance(__ret);
        }

        public wxPointList.iterator erase(wxPointList.iterator first, wxPointList.iterator last)
        {
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg1 = last.__Instance;
            var __ret = Internal.erase_1((__Instance + __PointerAdjustment), arg0, arg1);
            return wxPointList.iterator.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public void splice(wxPointList.iterator it, wxPointList l, wxPointList.iterator first, wxPointList.iterator last)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var arg1 = l.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg2 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg3 = last.__Instance;
            Internal.splice_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
        }

        public void splice(wxPointList.iterator it, wxPointList l)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var arg1 = l.__Instance;
            Internal.splice_1((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void splice(wxPointList.iterator it, wxPointList l, wxPointList.iterator first)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            if (ReferenceEquals(l, null))
                throw new global::System.ArgumentNullException("l", "Cannot be null because it is a C++ reference (&).");
            var arg1 = l.__Instance;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg2 = first.__Instance;
            Internal.splice_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public void remove(wxPoint v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            Internal.remove_0((__Instance + __PointerAdjustment), arg0);
        }

        public void reverse()
        {
            Internal.reverse_0((__Instance + __PointerAdjustment));
        }

        public wxPoint this[uint index]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), index);
                wxPoint __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxPoint.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxPoint) wxPoint.NativeToManagedMap[__ret];
                else __result0 = wxPoint.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                *(wxPoint.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), index) = *(wxPoint.Internal*) value.__Instance;
            }
        }

        #region Virtual table interop

        // wxPointList
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPointList) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // 
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr _CreateNode_0DelegateInstance;

        private static global::System.IntPtr _CreateNode_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr prev, global::System.IntPtr next, global::System.IntPtr data, global::System.IntPtr key)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPointList) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxNodeBase __result0;
            if (prev == IntPtr.Zero) __result0 = null;
            else if (wxNodeBase.NativeToManagedMap.ContainsKey(prev))
                __result0 = (wxNodeBase) wxNodeBase.NativeToManagedMap[prev];
            else __result0 = (wxNodeBase) wxNodeBase.__CreateInstance(prev, skipVTables: true);
            wxNodeBase __result1;
            if (next == IntPtr.Zero) __result1 = null;
            else if (wxNodeBase.NativeToManagedMap.ContainsKey(next))
                __result1 = (wxNodeBase) wxNodeBase.NativeToManagedMap[next];
            else __result1 = (wxNodeBase) wxNodeBase.__CreateInstance(next, skipVTables: true);
            wxListKey __result3;
            if (key == IntPtr.Zero) __result3 = null;
            else if (wxListKey.NativeToManagedMap.ContainsKey(key))
                __result3 = (wxListKey) wxListKey.NativeToManagedMap[key];
            else __result3 = wxListKey.__CreateInstance(key);
            var __ret = __target.CreateNode(__result0, __result1, data, __result3);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // 
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _Find_1DelegateInstance;

        private static global::System.IntPtr _Find_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr key)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxPointList) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxListKey __result0;
            if (key == IntPtr.Zero) __result0 = null;
            else if (wxListKey.NativeToManagedMap.ContainsKey(key))
                __result0 = (wxListKey) wxListKey.NativeToManagedMap[key];
            else __result0 = wxListKey.__CreateInstance(key);
            var __ret = __target.Find(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateNode_0DelegateInstance += _CreateNode_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateNode_0DelegateInstance).ToPointer();
                _Find_1DelegateInstance += _Find_1DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_Find_1DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxRect : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int x;

            [FieldOffset(4)]
            public int y;

            [FieldOffset(8)]
            public int width;

            [FieldOffset(12)]
            public int height;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2Eiiii")]
            internal static extern void ctor_1(global::System.IntPtr instance, int xx, int yy, int ww, int hh);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2ERK7wxPointS2_")]
            internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr topLeft, global::System.IntPtr bottomRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2ERK7wxPointRK6wxSize")]
            internal static extern void ctor_3(global::System.IntPtr instance, global::System.IntPtr pt, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2ERK6wxSize")]
            internal static extern void ctor_4(global::System.IntPtr instance, global::System.IntPtr size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRectC2ERKS_")]
            internal static extern void cctor_5(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect4GetXEv")]
            internal static extern int GetX_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect4SetXEi")]
            internal static extern void SetX_0(global::System.IntPtr instance, int xx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect4GetYEv")]
            internal static extern int GetY_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect4SetYEi")]
            internal static extern void SetY_0(global::System.IntPtr instance, int yy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8GetWidthEv")]
            internal static extern int GetWidth_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect8SetWidthEi")]
            internal static extern void SetWidth_0(global::System.IntPtr instance, int w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect9GetHeightEv")]
            internal static extern int GetHeight_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect9SetHeightEi")]
            internal static extern void SetHeight_0(global::System.IntPtr instance, int h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect11GetPositionEv")]
            internal static extern wxPoint.Internal GetPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect11SetPositionERK7wxPoint")]
            internal static extern void SetPosition_0(global::System.IntPtr instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect7GetSizeEv")]
            internal static extern wxSize.Internal GetSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7SetSizeERK6wxSize")]
            internal static extern void SetSize_0(global::System.IntPtr instance, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect7GetLeftEv")]
            internal static extern int GetLeft_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect6GetTopEv")]
            internal static extern int GetTop_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect9GetBottomEv")]
            internal static extern int GetBottom_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8GetRightEv")]
            internal static extern int GetRight_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7SetLeftEi")]
            internal static extern void SetLeft_0(global::System.IntPtr instance, int left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect8SetRightEi")]
            internal static extern void SetRight_0(global::System.IntPtr instance, int right);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect6SetTopEi")]
            internal static extern void SetTop_0(global::System.IntPtr instance, int top);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect9SetBottomEi")]
            internal static extern void SetBottom_0(global::System.IntPtr instance, int bottom);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect10GetTopLeftEv")]
            internal static extern wxPoint.Internal GetTopLeft_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect10GetLeftTopEv")]
            internal static extern wxPoint.Internal GetLeftTop_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect10SetTopLeftERK7wxPoint")]
            internal static extern void SetTopLeft_0(global::System.IntPtr instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect10SetLeftTopERK7wxPoint")]
            internal static extern void SetLeftTop_0(global::System.IntPtr instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect14GetBottomRightEv")]
            internal static extern wxPoint.Internal GetBottomRight_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect14GetRightBottomEv")]
            internal static extern wxPoint.Internal GetRightBottom_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect14SetBottomRightERK7wxPoint")]
            internal static extern void SetBottomRight_0(global::System.IntPtr instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect14SetRightBottomERK7wxPoint")]
            internal static extern void SetRightBottom_0(global::System.IntPtr instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect11GetTopRightEv")]
            internal static extern wxPoint.Internal GetTopRight_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect11GetRightTopEv")]
            internal static extern wxPoint.Internal GetRightTop_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect11SetTopRightERK7wxPoint")]
            internal static extern void SetTopRight_0(global::System.IntPtr instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect11SetRightTopERK7wxPoint")]
            internal static extern void SetRightTop_0(global::System.IntPtr instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect13GetBottomLeftEv")]
            internal static extern wxPoint.Internal GetBottomLeft_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect13GetLeftBottomEv")]
            internal static extern wxPoint.Internal GetLeftBottom_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect13SetBottomLeftERK7wxPoint")]
            internal static extern void SetBottomLeft_0(global::System.IntPtr instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect13SetLeftBottomERK7wxPoint")]
            internal static extern void SetLeftBottom_0(global::System.IntPtr instance, global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7InflateEii")]
            internal static extern global::System.IntPtr Inflate_0(global::System.IntPtr instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7InflateERK6wxSize")]
            internal static extern global::System.IntPtr Inflate_1(global::System.IntPtr instance, global::System.IntPtr d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7InflateEi")]
            internal static extern global::System.IntPtr Inflate_2(global::System.IntPtr instance, int d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7DeflateEii")]
            internal static extern global::System.IntPtr Deflate_0(global::System.IntPtr instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7DeflateERK6wxSize")]
            internal static extern global::System.IntPtr Deflate_1(global::System.IntPtr instance, global::System.IntPtr d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect7DeflateEi")]
            internal static extern global::System.IntPtr Deflate_2(global::System.IntPtr instance, int d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect6OffsetEii")]
            internal static extern void Offset_0(global::System.IntPtr instance, int dx, int dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect6OffsetERK7wxPoint")]
            internal static extern void Offset_1(global::System.IntPtr instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect9IntersectERKS_")]
            internal static extern global::System.IntPtr Intersect_0(global::System.IntPtr instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN6wxRect5UnionERKS_")]
            internal static extern global::System.IntPtr Union_0(global::System.IntPtr instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8ContainsEii")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Contains_0(global::System.IntPtr instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8ContainsERK7wxPoint")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Contains_1(global::System.IntPtr instance, global::System.IntPtr pt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8ContainsERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Contains_2(global::System.IntPtr instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect10IntersectsERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Intersects_0(global::System.IntPtr instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8CentreInERKS_i")]
            internal static extern void CentreIn_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr r, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK6wxRect8CenterInERKS_i")]
            internal static extern void CenterIn_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr r, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK6wxRectS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr r1, global::System.IntPtr r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK6wxRectS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr r1, global::System.IntPtr r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK6wxRectS1_")]
            internal static extern void OperatorPlus_0(global::System.IntPtr @return, global::System.IntPtr r1, global::System.IntPtr r2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmlRK6wxRectS1_")]
            internal static extern void OperatorStar_0(global::System.IntPtr @return, global::System.IntPtr r1, global::System.IntPtr r2);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxRect> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxRect>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxRect __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxRect(native.ToPointer(), skipVTables);
        }

        public static wxRect __CreateInstance(wxRect.Internal native, bool skipVTables = false)
        {
            return new wxRect(native, skipVTables);
        }

        private static void* __CopyValue(wxRect.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            *(wxRect.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxRect(wxRect.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxRect(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxRect()
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxRect(int xx, int yy, int ww, int hh)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), xx, yy, ww, hh);
        }

        public wxRect(wxPoint topLeft, wxPoint bottomRight)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(topLeft, null))
                throw new global::System.ArgumentNullException("topLeft", "Cannot be null because it is a C++ reference (&).");
            var arg0 = topLeft.__Instance;
            if (ReferenceEquals(bottomRight, null))
                throw new global::System.ArgumentNullException("bottomRight", "Cannot be null because it is a C++ reference (&).");
            var arg1 = bottomRight.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxRect(wxPoint pt, wxSize size)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pt.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var arg1 = size.__Instance;
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxRect(wxSize size)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var arg0 = size.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0);
        }

        public wxRect(wxRect _0)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxRect.Internal*) __Instance) = *((wxRect.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxRect __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int GetX()
        {
            var __ret = Internal.GetX_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetX(int xx)
        {
            Internal.SetX_0((__Instance + __PointerAdjustment), xx);
        }

        public int GetY()
        {
            var __ret = Internal.GetY_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetY(int yy)
        {
            Internal.SetY_0((__Instance + __PointerAdjustment), yy);
        }

        public int GetWidth()
        {
            var __ret = Internal.GetWidth_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetWidth(int w)
        {
            Internal.SetWidth_0((__Instance + __PointerAdjustment), w);
        }

        public int GetHeight()
        {
            var __ret = Internal.GetHeight_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetHeight(int h)
        {
            Internal.SetHeight_0((__Instance + __PointerAdjustment), h);
        }

        public wxPoint GetPosition()
        {
            var __ret = Internal.GetPosition_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public void SetPosition(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            Internal.SetPosition_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxSize GetSize()
        {
            var __ret = Internal.GetSize_0((__Instance + __PointerAdjustment));
            return wxSize.__CreateInstance(__ret);
        }

        public void SetSize(wxSize s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            Internal.SetSize_0((__Instance + __PointerAdjustment), arg0);
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetLeft()
        {
            var __ret = Internal.GetLeft_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetTop()
        {
            var __ret = Internal.GetTop_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetBottom()
        {
            var __ret = Internal.GetBottom_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetRight()
        {
            var __ret = Internal.GetRight_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetLeft(int left)
        {
            Internal.SetLeft_0((__Instance + __PointerAdjustment), left);
        }

        public void SetRight(int right)
        {
            Internal.SetRight_0((__Instance + __PointerAdjustment), right);
        }

        public void SetTop(int top)
        {
            Internal.SetTop_0((__Instance + __PointerAdjustment), top);
        }

        public void SetBottom(int bottom)
        {
            Internal.SetBottom_0((__Instance + __PointerAdjustment), bottom);
        }

        public wxPoint GetTopLeft()
        {
            var __ret = Internal.GetTopLeft_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public wxPoint GetLeftTop()
        {
            var __ret = Internal.GetLeftTop_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public void SetTopLeft(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            Internal.SetTopLeft_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetLeftTop(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            Internal.SetLeftTop_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxPoint GetBottomRight()
        {
            var __ret = Internal.GetBottomRight_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public wxPoint GetRightBottom()
        {
            var __ret = Internal.GetRightBottom_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public void SetBottomRight(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            Internal.SetBottomRight_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetRightBottom(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            Internal.SetRightBottom_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxPoint GetTopRight()
        {
            var __ret = Internal.GetTopRight_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public wxPoint GetRightTop()
        {
            var __ret = Internal.GetRightTop_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public void SetTopRight(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            Internal.SetTopRight_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetRightTop(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            Internal.SetRightTop_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxPoint GetBottomLeft()
        {
            var __ret = Internal.GetBottomLeft_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public wxPoint GetLeftBottom()
        {
            var __ret = Internal.GetLeftBottom_0((__Instance + __PointerAdjustment));
            return wxPoint.__CreateInstance(__ret);
        }

        public void SetBottomLeft(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            Internal.SetBottomLeft_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetLeftBottom(wxPoint p)
        {
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is a C++ reference (&).");
            var arg0 = p.__Instance;
            Internal.SetLeftBottom_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxRect Inflate(int dx, int dy)
        {
            var __ret = Internal.Inflate_0((__Instance + __PointerAdjustment), dx, dy);
            wxRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxRect) wxRect.NativeToManagedMap[__ret];
            else __result0 = wxRect.__CreateInstance(__ret);
            return __result0;
        }

        public wxRect Inflate(wxSize d)
        {
            if (ReferenceEquals(d, null))
                throw new global::System.ArgumentNullException("d", "Cannot be null because it is a C++ reference (&).");
            var arg0 = d.__Instance;
            var __ret = Internal.Inflate_1((__Instance + __PointerAdjustment), arg0);
            wxRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxRect) wxRect.NativeToManagedMap[__ret];
            else __result0 = wxRect.__CreateInstance(__ret);
            return __result0;
        }

        public wxRect Inflate(int d)
        {
            var __ret = Internal.Inflate_2((__Instance + __PointerAdjustment), d);
            wxRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxRect) wxRect.NativeToManagedMap[__ret];
            else __result0 = wxRect.__CreateInstance(__ret);
            return __result0;
        }

        public wxRect Deflate(int dx, int dy)
        {
            var __ret = Internal.Deflate_0((__Instance + __PointerAdjustment), dx, dy);
            wxRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxRect) wxRect.NativeToManagedMap[__ret];
            else __result0 = wxRect.__CreateInstance(__ret);
            return __result0;
        }

        public wxRect Deflate(wxSize d)
        {
            if (ReferenceEquals(d, null))
                throw new global::System.ArgumentNullException("d", "Cannot be null because it is a C++ reference (&).");
            var arg0 = d.__Instance;
            var __ret = Internal.Deflate_1((__Instance + __PointerAdjustment), arg0);
            wxRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxRect) wxRect.NativeToManagedMap[__ret];
            else __result0 = wxRect.__CreateInstance(__ret);
            return __result0;
        }

        public wxRect Deflate(int d)
        {
            var __ret = Internal.Deflate_2((__Instance + __PointerAdjustment), d);
            wxRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxRect) wxRect.NativeToManagedMap[__ret];
            else __result0 = wxRect.__CreateInstance(__ret);
            return __result0;
        }

        public void Offset(int dx, int dy)
        {
            Internal.Offset_0((__Instance + __PointerAdjustment), dx, dy);
        }

        public void Offset(wxPoint pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pt.__Instance;
            Internal.Offset_1((__Instance + __PointerAdjustment), arg0);
        }

        public wxRect Intersect(wxRect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            var __ret = Internal.Intersect_0((__Instance + __PointerAdjustment), arg0);
            wxRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxRect) wxRect.NativeToManagedMap[__ret];
            else __result0 = wxRect.__CreateInstance(__ret);
            return __result0;
        }

        public wxRect Union(wxRect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            var __ret = Internal.Union_0((__Instance + __PointerAdjustment), arg0);
            wxRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxRect) wxRect.NativeToManagedMap[__ret];
            else __result0 = wxRect.__CreateInstance(__ret);
            return __result0;
        }

        public bool Contains(int x, int y)
        {
            var __ret = Internal.Contains_0((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public bool Contains(wxPoint pt)
        {
            if (ReferenceEquals(pt, null))
                throw new global::System.ArgumentNullException("pt", "Cannot be null because it is a C++ reference (&).");
            var arg0 = pt.__Instance;
            var __ret = Internal.Contains_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Contains(wxRect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            var __ret = Internal.Contains_2((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Intersects(wxRect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            var __ret = Internal.Intersects_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxRect CentreIn(wxRect r, int dir)
        {
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is a C++ reference (&).");
            var arg0 = r.__Instance;
            var __ret = new wxRect.Internal();
            Internal.CentreIn_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, dir);
            return wxRect.__CreateInstance(__ret);
        }

        public wxRect CenterIn(wxRect r, int dir)
        {
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is a C++ reference (&).");
            var arg0 = r.__Instance;
            var __ret = new wxRect.Internal();
            Internal.CenterIn_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, dir);
            return wxRect.__CreateInstance(__ret);
        }

        public static bool operator ==(wxRect r1, wxRect r2)
        {
            bool r1Null = ReferenceEquals(r1, null);
            bool r2Null = ReferenceEquals(r2, null);
            if (r1Null || r2Null)
                return r1Null && r2Null;
            var arg0 = r1.__Instance;
            var arg1 = r2.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxRect;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxRect r1, wxRect r2)
        {
            bool r1Null = ReferenceEquals(r1, null);
            bool r2Null = ReferenceEquals(r2, null);
            if (r1Null || r2Null)
                return !(r1Null && r2Null);
            var arg0 = r1.__Instance;
            var arg1 = r2.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static wxRect operator +(wxRect r1, wxRect r2)
        {
            if (ReferenceEquals(r1, null))
                throw new global::System.ArgumentNullException("r1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = r1.__Instance;
            if (ReferenceEquals(r2, null))
                throw new global::System.ArgumentNullException("r2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = r2.__Instance;
            var __ret = new wxRect.Internal();
            Internal.OperatorPlus_0(new IntPtr(&__ret), arg0, arg1);
            return wxRect.__CreateInstance(__ret);
        }

        public static wxRect operator *(wxRect r1, wxRect r2)
        {
            if (ReferenceEquals(r1, null))
                throw new global::System.ArgumentNullException("r1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = r1.__Instance;
            if (ReferenceEquals(r2, null))
                throw new global::System.ArgumentNullException("r2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = r2.__Instance;
            var __ret = new wxRect.Internal();
            Internal.OperatorStar_0(new IntPtr(&__ret), arg0, arg1);
            return wxRect.__CreateInstance(__ret);
        }

        public int x
        {
            get
            {
                return ((Internal*) __Instance)->x;
            }

            set
            {
                ((Internal*) __Instance)->x = value;
            }
        }

        public int y
        {
            get
            {
                return ((Internal*) __Instance)->y;
            }

            set
            {
                ((Internal*) __Instance)->y = value;
            }
        }

        public int width
        {
            get
            {
                return ((Internal*) __Instance)->width;
            }

            set
            {
                ((Internal*) __Instance)->width = value;
            }
        }

        public int height
        {
            get
            {
                return ((Internal*) __Instance)->height;
            }

            set
            {
                ((Internal*) __Instance)->height = value;
            }
        }
    }

    public unsafe partial class wxGDIObjListBase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxList.Internal list;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGDIObjListBaseC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGDIObjListBaseC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxGDIObjListBaseD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxGDIObjListBase> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxGDIObjListBase>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxGDIObjListBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxGDIObjListBase(native.ToPointer(), skipVTables);
        }

        public static wxGDIObjListBase __CreateInstance(wxGDIObjListBase.Internal native, bool skipVTables = false)
        {
            return new wxGDIObjListBase(native, skipVTables);
        }

        private static void* __CopyValue(wxGDIObjListBase.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            wxGDIObjListBase.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxGDIObjListBase(wxGDIObjListBase.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxGDIObjListBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxGDIObjListBase()
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxGDIObjListBase(wxGDIObjListBase _0)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxGDIObjListBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        protected wxList list
        {
            get
            {
                return wxList.__CreateInstance(((Internal*) __Instance)->list);
            }

            set
            {
                ((Internal*) __Instance)->list = ReferenceEquals(value, null) ? new wxList.Internal() : *(wxList.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxStringToColourHashMap_wxImplementation_Pair : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal first;

            [FieldOffset(20)]
            public global::System.IntPtr second;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN45wxStringToColourHashMap_wxImplementation_PairC2ERK8wxStringRKPK8wxColour")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN45wxStringToColourHashMap_wxImplementation_PairC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN45wxStringToColourHashMap_wxImplementation_PairD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public class second_type { }

        public class t2 { }

        public class const_t2 { }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToColourHashMap_wxImplementation_Pair> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToColourHashMap_wxImplementation_Pair>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringToColourHashMap_wxImplementation_Pair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToColourHashMap_wxImplementation_Pair(native.ToPointer(), skipVTables);
        }

        public static wxStringToColourHashMap_wxImplementation_Pair __CreateInstance(wxStringToColourHashMap_wxImplementation_Pair.Internal native, bool skipVTables = false)
        {
            return new wxStringToColourHashMap_wxImplementation_Pair(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToColourHashMap_wxImplementation_Pair.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            wxStringToColourHashMap_wxImplementation_Pair.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringToColourHashMap_wxImplementation_Pair(wxStringToColourHashMap_wxImplementation_Pair.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToColourHashMap_wxImplementation_Pair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToColourHashMap_wxImplementation_Pair(wxString f, wxColour s)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(f, null))
                throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
            var arg0 = f.__Instance;
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxStringToColourHashMap_wxImplementation_Pair(wxStringToColourHashMap_wxImplementation_Pair _0)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringToColourHashMap_wxImplementation_Pair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString first
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->first);
            }

            set
            {
                ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        public wxColour second
        {
            get
            {
                wxColour __result0;
                if (((Internal*) __Instance)->second == IntPtr.Zero) __result0 = null;
                else if (wxColour.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->second))
                    __result0 = (wxColour) wxColour.NativeToManagedMap[((Internal*) __Instance)->second];
                else wxColour.NativeToManagedMap[((Internal*) __Instance)->second] = __result0 = (wxColour) wxColour.__CreateInstance(((Internal*) __Instance)->second);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->second = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class wxStringToColourHashMap_wxImplementation_KeyEx : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxStringToColourHashMap_wxImplementation_KeyExC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxStringToColourHashMap_wxImplementation_KeyExC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToColourHashMap_wxImplementation_KeyEx> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToColourHashMap_wxImplementation_KeyEx>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringToColourHashMap_wxImplementation_KeyEx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToColourHashMap_wxImplementation_KeyEx(native.ToPointer(), skipVTables);
        }

        public static wxStringToColourHashMap_wxImplementation_KeyEx __CreateInstance(wxStringToColourHashMap_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
        {
            return new wxStringToColourHashMap_wxImplementation_KeyEx(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToColourHashMap_wxImplementation_KeyEx.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxStringToColourHashMap_wxImplementation_KeyEx.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStringToColourHashMap_wxImplementation_KeyEx(wxStringToColourHashMap_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToColourHashMap_wxImplementation_KeyEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToColourHashMap_wxImplementation_KeyEx()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxStringToColourHashMap_wxImplementation_KeyEx(wxStringToColourHashMap_wxImplementation_KeyEx _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxStringToColourHashMap_wxImplementation_KeyEx.Internal*) __Instance) = *((wxStringToColourHashMap_wxImplementation_KeyEx.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringToColourHashMap_wxImplementation_KeyEx __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxStringToColourHashMap_wxImplementation_HashTable : _wxHashTableBase2, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxStringToColourHashMap_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTableC2EmRK12wxStringHashRK13wxStringEqualRK46wxStringToColourHashMap_wxImplementation_KeyEx")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint sz, global::System.IntPtr hfun, global::System.IntPtr k_eq, global::System.IntPtr k_ex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTableC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr ht);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTableD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable10DeleteNodeEP21_wxHashTable_NodeBase")]
            internal static extern void DeleteNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable10hash_functEv")]
            internal static extern wxStringHash.Internal hash_funct_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable6key_eqEv")]
            internal static extern wxStringEqual.Internal key_eq_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable3endEv")]
            internal static extern wxStringToColourHashMap_wxImplementation_HashTable.iterator.Internal end_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable5beginEv")]
            internal static extern wxStringToColourHashMap_wxImplementation_HashTable.iterator.Internal begin_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable16GetBucketForNodeEPS_PNS_4NodeE")]
            internal static extern uint GetBucketForNode_0(global::System.IntPtr ht, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8CopyNodeEPNS_4NodeE")]
            internal static extern global::System.IntPtr CopyNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable15GetOrCreateNodeERK45wxStringToColourHashMap_wxImplementation_PairRb")]
            internal static extern global::System.IntPtr GetOrCreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, bool* created);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable10CreateNodeERK45wxStringToColourHashMap_wxImplementation_Pairm")]
            internal static extern global::System.IntPtr CreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, uint bucket);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable10CreateNodeERK45wxStringToColourHashMap_wxImplementation_Pair")]
            internal static extern void CreateNode_1(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable10GetNodePtrERK8wxString")]
            internal static extern global::System.IntPtr GetNodePtr_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable7GetNodeERK8wxString")]
            internal static extern global::System.IntPtr GetNode_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable11ResizeTableEm")]
            internal static extern void ResizeTable_0(global::System.IntPtr instance, uint newSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8HashCopyERKS_")]
            internal static extern void HashCopy_0(global::System.IntPtr instance, global::System.IntPtr ht);
        }

        public unsafe partial class Node : _wxHashTable_NodeBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_next;

                [FieldOffset(4)]
                public wxStringToColourHashMap_wxImplementation_Pair.Internal m_value;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable4NodeC2ERK45wxStringToColourHashMap_wxImplementation_Pair")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable4NodeC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable4NodeD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable4Node4nextEv")]
                internal static extern global::System.IntPtr next_0(global::System.IntPtr instance);
            }

            public static new Node __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Node(native.ToPointer(), skipVTables);
            }

            public static Node __CreateInstance(Node.Internal native, bool skipVTables = false)
            {
                return new Node(native, skipVTables);
            }

            private static void* __CopyValue(Node.Internal native)
            {
                var ret = Marshal.AllocHGlobal(28);
                wxStringToColourHashMap_wxImplementation_HashTable.Node.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Node(Node.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Node(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Node(wxStringToColourHashMap_wxImplementation_Pair value)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var arg0 = value.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public Node(wxStringToColourHashMap_wxImplementation_HashTable.Node _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            }

            protected override void Dispose(bool disposing)
            {
                _wxHashTable_NodeBase __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxStringToColourHashMap_wxImplementation_HashTable.Node next()
            {
                var __ret = Internal.next_0((__Instance + __PointerAdjustment));
                wxStringToColourHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToColourHashMap_wxImplementation_HashTable.Node) wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            public wxStringToColourHashMap_wxImplementation_Pair m_value
            {
                get
                {
                    return wxStringToColourHashMap_wxImplementation_Pair.__CreateInstance(((Internal*) __Instance)->m_value);
                }

                set
                {
                    ((Internal*) __Instance)->m_value = ReferenceEquals(value, null) ? new wxStringToColourHashMap_wxImplementation_Pair.Internal() : *(wxStringToColourHashMap_wxImplementation_Pair.Internal*) (value.__Instance);
                }
            }
        }

        public unsafe partial class Iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8IteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8IteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8IteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable8IteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK50wxStringToColourHashMap_wxImplementation_HashTable8IteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8Iterator11GetNextNodeEv")]
                internal static extern global::System.IntPtr GetNextNode_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8Iterator8PlusPlusEv")]
                internal static extern void PlusPlus_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Iterator(native.ToPointer(), skipVTables);
            }

            public static Iterator __CreateInstance(Iterator.Internal native, bool skipVTables = false)
            {
                return new Iterator(native, skipVTables);
            }

            private static void* __CopyValue(Iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(Iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Iterator(Iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public Iterator(wxStringToColourHashMap_wxImplementation_HashTable.Node node, wxStringToColourHashMap_wxImplementation_HashTable ht)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public Iterator(wxStringToColourHashMap_wxImplementation_HashTable.Iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Iterator.Internal*) __Instance) = *((Iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxStringToColourHashMap_wxImplementation_HashTable.Iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static bool operator ==(wxStringToColourHashMap_wxImplementation_HashTable.Iterator __op, wxStringToColourHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as Iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(wxStringToColourHashMap_wxImplementation_HashTable.Iterator __op, wxStringToColourHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            protected wxStringToColourHashMap_wxImplementation_HashTable.Node GetNextNode()
            {
                var __ret = Internal.GetNextNode_0((__Instance + __PointerAdjustment));
                wxStringToColourHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToColourHashMap_wxImplementation_HashTable.Node) wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            protected void PlusPlus()
            {
                Internal.PlusPlus_0((__Instance + __PointerAdjustment));
            }

            public wxStringToColourHashMap_wxImplementation_HashTable.Node m_node
            {
                get
                {
                    wxStringToColourHashMap_wxImplementation_HashTable.Node __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxStringToColourHashMap_wxImplementation_HashTable.Node) wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxStringToColourHashMap_wxImplementation_HashTable m_ht
            {
                get
                {
                    wxStringToColourHashMap_wxImplementation_HashTable __result0;
                    if (((Internal*) __Instance)->m_ht == IntPtr.Zero) __result0 = null;
                    else if (wxStringToColourHashMap_wxImplementation_HashTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_ht))
                        __result0 = (wxStringToColourHashMap_wxImplementation_HashTable) wxStringToColourHashMap_wxImplementation_HashTable.NativeToManagedMap[((Internal*) __Instance)->m_ht];
                    else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.__CreateInstance(((Internal*) __Instance)->m_ht);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_ht = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class iterator : wxStringToColourHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorC2EPNS_4NodeEPS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public iterator(wxStringToColourHashMap_wxImplementation_HashTable.Node node, wxStringToColourHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public iterator(wxStringToColourHashMap_wxImplementation_HashTable.iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((iterator.Internal*) __Instance) = *((iterator.Internal*) _0.__Instance);
            }

            public static wxStringToColourHashMap_wxImplementation_HashTable.iterator operator ++(wxStringToColourHashMap_wxImplementation_HashTable.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxStringToColourHashMap_wxImplementation_HashTable.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToColourHashMap_wxImplementation_HashTable.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToColourHashMap_wxImplementation_HashTable.iterator) wxStringToColourHashMap_wxImplementation_HashTable.iterator.NativeToManagedMap[__ret];
                else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class const_iterator : wxStringToColourHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable14const_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable14const_iteratorC2ENS_8iteratorE")]
                internal static extern void ctor_1(global::System.IntPtr instance, wxStringToColourHashMap_wxImplementation_HashTable.iterator.Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable14const_iteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable14const_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToColourHashMap_wxImplementation_HashTable14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxStringToColourHashMap_wxImplementation_HashTable.iterator i)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(i, null) ? new wxStringToColourHashMap_wxImplementation_HashTable.iterator.Internal() : *(wxStringToColourHashMap_wxImplementation_HashTable.iterator.Internal*) (i.__Instance);
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxStringToColourHashMap_wxImplementation_HashTable.Node node, wxStringToColourHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_iterator(wxStringToColourHashMap_wxImplementation_HashTable.const_iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public static wxStringToColourHashMap_wxImplementation_HashTable.const_iterator operator ++(wxStringToColourHashMap_wxImplementation_HashTable.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxStringToColourHashMap_wxImplementation_HashTable.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToColourHashMap_wxImplementation_HashTable.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToColourHashMap_wxImplementation_HashTable.const_iterator) wxStringToColourHashMap_wxImplementation_HashTable.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.const_iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static new wxStringToColourHashMap_wxImplementation_HashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToColourHashMap_wxImplementation_HashTable(native.ToPointer(), skipVTables);
        }

        public static wxStringToColourHashMap_wxImplementation_HashTable __CreateInstance(wxStringToColourHashMap_wxImplementation_HashTable.Internal native, bool skipVTables = false)
        {
            return new wxStringToColourHashMap_wxImplementation_HashTable(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToColourHashMap_wxImplementation_HashTable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxStringToColourHashMap_wxImplementation_HashTable.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringToColourHashMap_wxImplementation_HashTable(wxStringToColourHashMap_wxImplementation_HashTable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToColourHashMap_wxImplementation_HashTable(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToColourHashMap_wxImplementation_HashTable(uint sz, wxStringHash hfun, wxStringEqual k_eq, wxStringToColourHashMap_wxImplementation_KeyEx k_ex)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(hfun, null))
                throw new global::System.ArgumentNullException("hfun", "Cannot be null because it is a C++ reference (&).");
            var arg1 = hfun.__Instance;
            if (ReferenceEquals(k_eq, null))
                throw new global::System.ArgumentNullException("k_eq", "Cannot be null because it is a C++ reference (&).");
            var arg2 = k_eq.__Instance;
            if (ReferenceEquals(k_ex, null))
                throw new global::System.ArgumentNullException("k_ex", "Cannot be null because it is a C++ reference (&).");
            var arg3 = k_ex.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), sz, arg1, arg2, arg3);
        }

        public wxStringToColourHashMap_wxImplementation_HashTable(wxStringToColourHashMap_wxImplementation_HashTable ht)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxStringHash hash_funct()
        {
            var __ret = Internal.hash_funct_0((__Instance + __PointerAdjustment));
            return wxStringHash.__CreateInstance(__ret);
        }

        public wxStringEqual key_eq()
        {
            var __ret = Internal.key_eq_0((__Instance + __PointerAdjustment));
            return wxStringEqual.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxStringToColourHashMap_wxImplementation_HashTable.iterator end()
        {
            var __ret = Internal.end_1((__Instance + __PointerAdjustment));
            return wxStringToColourHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxStringToColourHashMap_wxImplementation_HashTable.iterator begin()
        {
            var __ret = Internal.begin_1((__Instance + __PointerAdjustment));
            return wxStringToColourHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public uint erase(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected wxStringToColourHashMap_wxImplementation_HashTable.Node GetOrCreateNode(wxStringToColourHashMap_wxImplementation_Pair value, ref bool created)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            fixed (bool* __refParamPtr1 = &created)
            {
                var arg1 = __refParamPtr1;
                var __ret = Internal.GetOrCreateNode_0((__Instance + __PointerAdjustment), arg0, arg1);
                wxStringToColourHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToColourHashMap_wxImplementation_HashTable.Node) wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected wxStringToColourHashMap_wxImplementation_HashTable.Node CreateNode(wxStringToColourHashMap_wxImplementation_Pair value, uint bucket)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            var __ret = Internal.CreateNode_0((__Instance + __PointerAdjustment), arg0, bucket);
            wxStringToColourHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStringToColourHashMap_wxImplementation_HashTable.Node) wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void CreateNode(wxStringToColourHashMap_wxImplementation_Pair value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            Internal.CreateNode_1((__Instance + __PointerAdjustment), arg0);
        }

        protected _wxHashTable_NodeBase GetNodePtr(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNodePtr_0((__Instance + __PointerAdjustment), arg0);
            _wxHashTable_NodeBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[__ret];
            else __result0 = _wxHashTable_NodeBase.__CreateInstance(__ret);
            return __result0;
        }

        protected wxStringToColourHashMap_wxImplementation_HashTable.Node GetNode(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNode_0((__Instance + __PointerAdjustment), arg0);
            wxStringToColourHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStringToColourHashMap_wxImplementation_HashTable.Node) wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void ResizeTable(uint newSize)
        {
            Internal.ResizeTable_0((__Instance + __PointerAdjustment), newSize);
        }

        protected void HashCopy(wxStringToColourHashMap_wxImplementation_HashTable ht)
        {
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.HashCopy_0((__Instance + __PointerAdjustment), arg0);
        }

        protected static void DeleteNode(_wxHashTable_NodeBase node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            Internal.DeleteNode_0(arg0);
        }

        protected static uint GetBucketForNode(wxStringToColourHashMap_wxImplementation_HashTable ht, wxStringToColourHashMap_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
            var arg1 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.GetBucketForNode_0(arg0, arg1);
            return __ret;
        }

        protected static wxStringToColourHashMap_wxImplementation_HashTable.Node CopyNode(wxStringToColourHashMap_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.CopyNode_0(arg0);
            wxStringToColourHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStringToColourHashMap_wxImplementation_HashTable.Node) wxStringToColourHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxStringToColourHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected _wxHashTable_NodeBase m_table
        {
            get
            {
                _wxHashTable_NodeBase __result0;
                if (((Internal*) __Instance)->m_table == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_table))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[((Internal*) __Instance)->m_table];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(((Internal*) __Instance)->m_table);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_table = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected uint m_tableBuckets
        {
            get
            {
                return ((Internal*) __Instance)->m_tableBuckets;
            }

            set
            {
                ((Internal*) __Instance)->m_tableBuckets = value;
            }
        }

        protected uint m_items
        {
            get
            {
                return ((Internal*) __Instance)->m_items;
            }

            set
            {
                ((Internal*) __Instance)->m_items = value;
            }
        }

        protected wxStringHash m_hasher
        {
            get
            {
                return wxStringHash.__CreateInstance(((Internal*) __Instance)->m_hasher);
            }

            set
            {
                ((Internal*) __Instance)->m_hasher = ReferenceEquals(value, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (value.__Instance);
            }
        }

        protected wxStringEqual m_equals
        {
            get
            {
                return wxStringEqual.__CreateInstance(((Internal*) __Instance)->m_equals);
            }

            set
            {
                ((Internal*) __Instance)->m_equals = ReferenceEquals(value, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (value.__Instance);
            }
        }

        protected wxStringToColourHashMap_wxImplementation_KeyEx m_getKey
        {
            get
            {
                return wxStringToColourHashMap_wxImplementation_KeyEx.__CreateInstance(((Internal*) __Instance)->m_getKey);
            }

            set
            {
                ((Internal*) __Instance)->m_getKey = ReferenceEquals(value, null) ? new wxStringToColourHashMap_wxImplementation_KeyEx.Internal() : *(wxStringToColourHashMap_wxImplementation_KeyEx.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxStringToColourHashMap : wxStringToColourHashMap_wxImplementation_HashTable, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxStringToColourHashMap_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMapC2Em12wxStringHash13wxStringEqual")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint hint, wxStringHash.Internal hf, wxStringEqual.Internal eq);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMapC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMapD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMap4findERK8wxString")]
            internal static extern wxStringToColourHashMap_wxImplementation_HashTable.iterator.Internal find_1(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMap6insertERK45wxStringToColourHashMap_wxImplementation_Pair")]
            internal static extern void insert_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMap5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr k);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMap5eraseERKN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorE")]
            internal static extern void erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMap5countERK8wxString")]
            internal static extern uint count_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToColourHashMapixERK8wxString")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, global::System.IntPtr key);
        }

        public class mapped_type { }

        public unsafe partial class Insert_Result : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxStringToColourHashMap_wxImplementation_HashTable.iterator.Internal first;

                [FieldOffset(8)]
                public byte second;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN23wxStringToColourHashMap13Insert_ResultC2ERKN50wxStringToColourHashMap_wxImplementation_HashTable8iteratorERKb")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, bool* s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN23wxStringToColourHashMap13Insert_ResultC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Insert_Result __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Insert_Result(native.ToPointer(), skipVTables);
            }

            public static Insert_Result __CreateInstance(Insert_Result.Internal native, bool skipVTables = false)
            {
                return new Insert_Result(native, skipVTables);
            }

            private static void* __CopyValue(Insert_Result.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(Insert_Result.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Insert_Result(Insert_Result.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Insert_Result(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Insert_Result(wxStringToColourHashMap_wxImplementation_HashTable.iterator f, ref bool s)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(f, null))
                    throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
                var arg0 = f.__Instance;
                fixed (bool* __refParamPtr1 = &s)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }

            public Insert_Result(wxStringToColourHashMap.Insert_Result _0)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Insert_Result.Internal*) __Instance) = *((Insert_Result.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxStringToColourHashMap.Insert_Result __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxStringToColourHashMap_wxImplementation_HashTable.iterator first
            {
                get
                {
                    return wxStringToColourHashMap_wxImplementation_HashTable.iterator.__CreateInstance(((Internal*) __Instance)->first);
                }

                set
                {
                    ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxStringToColourHashMap_wxImplementation_HashTable.iterator.Internal() : *(wxStringToColourHashMap_wxImplementation_HashTable.iterator.Internal*) (value.__Instance);
                }
            }

            public bool second
            {
                get
                {
                    return ((Internal*) __Instance)->second != 0;
                }

                set
                {
                    ((Internal*) __Instance)->second = (byte) (value ? 1 : 0);
                }
            }
        }

        public static new wxStringToColourHashMap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToColourHashMap(native.ToPointer(), skipVTables);
        }

        public static wxStringToColourHashMap __CreateInstance(wxStringToColourHashMap.Internal native, bool skipVTables = false)
        {
            return new wxStringToColourHashMap(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToColourHashMap.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxStringToColourHashMap.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringToColourHashMap(wxStringToColourHashMap.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToColourHashMap(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToColourHashMap(uint hint, wxStringHash hf, wxStringEqual eq)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(hf, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (hf.__Instance);
            var arg2 = ReferenceEquals(eq, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (eq.__Instance);
            Internal.ctor_0((__Instance + __PointerAdjustment), hint, arg1, arg2);
        }

        public wxStringToColourHashMap(wxStringToColourHashMap _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxStringToColourHashMap_wxImplementation_HashTable.iterator find(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.find_1((__Instance + __PointerAdjustment), arg0);
            return wxStringToColourHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxStringToColourHashMap.Insert_Result insert(wxStringToColourHashMap_wxImplementation_Pair v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            var __ret = new wxStringToColourHashMap.Insert_Result.Internal();
            Internal.insert_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxStringToColourHashMap.Insert_Result.__CreateInstance(__ret);
        }

        public uint erase(wxString k)
        {
            if (ReferenceEquals(k, null))
                throw new global::System.ArgumentNullException("k", "Cannot be null because it is a C++ reference (&).");
            var arg0 = k.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void erase(wxStringToColourHashMap_wxImplementation_HashTable.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            Internal.erase_1((__Instance + __PointerAdjustment), arg0);
        }

        public uint count(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.count_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxColour this[wxString key]
        {
            get
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var arg0 = key.__Instance;
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), arg0);
                wxColour __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxColour.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxColour) wxColour.NativeToManagedMap[__ret];
                else wxColour.NativeToManagedMap[__ret] = __result0 = (wxColour) wxColour.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var arg0 = key.__Instance;
                *(wxColour.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), key.__Instance) = *(wxColour.Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class wxColourDatabase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_map;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxColourDatabaseC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxColourDatabaseC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxColourDatabaseD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxColourDatabase4FindERK8wxString")]
            internal static extern void Find_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxColourDatabase8FindNameERK8wxColour")]
            internal static extern void FindName_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr colour);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxColourDatabase9AddColourERK8wxStringRK8wxColour")]
            internal static extern void AddColour_0(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr colour);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxColourDatabase> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxColourDatabase>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxColourDatabase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxColourDatabase(native.ToPointer(), skipVTables);
        }

        public static wxColourDatabase __CreateInstance(wxColourDatabase.Internal native, bool skipVTables = false)
        {
            return new wxColourDatabase(native, skipVTables);
        }

        private static void* __CopyValue(wxColourDatabase.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxColourDatabase.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxColourDatabase(wxColourDatabase.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxColourDatabase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxColourDatabase()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxColourDatabase(wxColourDatabase _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxColourDatabase.Internal*) __Instance) = *((wxColourDatabase.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxColourDatabase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxColour Find(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = new wxColour.Internal();
            Internal.Find_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxColour.__CreateInstance(__ret);
        }

        public wxString FindName(wxColour colour)
        {
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var arg0 = colour.__Instance;
            var __ret = new wxString.Internal();
            Internal.FindName_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public void AddColour(wxString name, wxColour colour)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            if (ReferenceEquals(colour, null))
                throw new global::System.ArgumentNullException("colour", "Cannot be null because it is a C++ reference (&).");
            var arg1 = colour.__Instance;
            Internal.AddColour_0((__Instance + __PointerAdjustment), arg0, arg1);
        }
    }

    public unsafe partial class wxResourceCache : wxList, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public uint m_count;

            [FieldOffset(8)]
            public byte m_destroy;

            [FieldOffset(12)]
            public global::System.IntPtr m_nodeFirst;

            [FieldOffset(16)]
            public global::System.IntPtr m_nodeLast;

            [FieldOffset(20)]
            public wxKeyType m_keyType;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxResourceCacheC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxResourceCacheC2Ej")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint keyType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxResourceCacheC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxResourceCache __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxResourceCache(native.ToPointer(), skipVTables);
        }

        public static wxResourceCache __CreateInstance(wxResourceCache.Internal native, bool skipVTables = false)
        {
            return new wxResourceCache(native, skipVTables);
        }

        private static void* __CopyValue(wxResourceCache.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            wxResourceCache.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxResourceCache(wxResourceCache.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxResourceCache(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxResourceCache()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxResourceCache");
        }

        public wxResourceCache(uint keyType)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), keyType);
            SetupVTables(GetType().FullName == "wxSharp.wxResourceCache");
        }

        public wxResourceCache(wxResourceCache _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxResourceCache");
        }

        #region Virtual table interop

        // virtual ~wxResourceCache()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxResourceCache) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // 
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr_IntPtr _CreateNode_0DelegateInstance;

        private static global::System.IntPtr _CreateNode_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr prev, global::System.IntPtr next, global::System.IntPtr data, global::System.IntPtr key)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxResourceCache) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxNodeBase __result0;
            if (prev == IntPtr.Zero) __result0 = null;
            else if (wxNodeBase.NativeToManagedMap.ContainsKey(prev))
                __result0 = (wxNodeBase) wxNodeBase.NativeToManagedMap[prev];
            else __result0 = (wxNodeBase) wxNodeBase.__CreateInstance(prev, skipVTables: true);
            wxNodeBase __result1;
            if (next == IntPtr.Zero) __result1 = null;
            else if (wxNodeBase.NativeToManagedMap.ContainsKey(next))
                __result1 = (wxNodeBase) wxNodeBase.NativeToManagedMap[next];
            else __result1 = (wxNodeBase) wxNodeBase.__CreateInstance(next, skipVTables: true);
            wxListKey __result3;
            if (key == IntPtr.Zero) __result3 = null;
            else if (wxListKey.NativeToManagedMap.ContainsKey(key))
                __result3 = (wxListKey) wxListKey.NativeToManagedMap[key];
            else __result3 = wxListKey.__CreateInstance(key);
            var __ret = __target.CreateNode(__result0, __result1, data, __result3);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // 
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _Find_1DelegateInstance;

        private static global::System.IntPtr _Find_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr key)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxResourceCache) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxListKey __result0;
            if (key == IntPtr.Zero) __result0 = null;
            else if (wxListKey.NativeToManagedMap.ContainsKey(key))
                __result0 = (wxListKey) wxListKey.NativeToManagedMap[key];
            else __result0 = wxListKey.__CreateInstance(key);
            var __ret = __target.Find(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateNode_0DelegateInstance += _CreateNode_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_CreateNode_0DelegateInstance).ToPointer();
                _Find_1DelegateInstance += _Find_1DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_Find_1DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxStockGDI : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDIC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDI9DeleteAllEv")]
            internal static extern void DeleteAll_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDI8instanceEv")]
            internal static extern global::System.IntPtr instance_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDI9GetColourENS_4ItemE")]
            internal static extern global::System.IntPtr GetColour_0(wxStockGDI.Item item);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxStockGDI9GetCursorENS_4ItemE")]
            internal static extern global::System.IntPtr GetCursor_0(wxStockGDI.Item item);
        }

        public enum Item : uint
        {
            BRUSH_BLACK = 0,
            BRUSH_BLUE = 1,
            BRUSH_CYAN = 2,
            BRUSH_GREEN = 3,
            BRUSH_YELLOW = 4,
            BRUSH_GREY = 5,
            BRUSH_LIGHTGREY = 6,
            BRUSH_MEDIUMGREY = 7,
            BRUSH_RED = 8,
            BRUSH_TRANSPARENT = 9,
            BRUSH_WHITE = 10,
            COLOUR_BLACK = 11,
            COLOUR_BLUE = 12,
            COLOUR_CYAN = 13,
            COLOUR_GREEN = 14,
            COLOUR_YELLOW = 15,
            COLOUR_LIGHTGREY = 16,
            COLOUR_RED = 17,
            COLOUR_WHITE = 18,
            CURSOR_CROSS = 19,
            CURSOR_HOURGLASS = 20,
            CURSOR_STANDARD = 21,
            FONT_ITALIC = 22,
            FONT_NORMAL = 23,
            FONT_SMALL = 24,
            FONT_SWISS = 25,
            PEN_BLACK = 26,
            PEN_BLACKDASHED = 27,
            PEN_BLUE = 28,
            PEN_CYAN = 29,
            PEN_GREEN = 30,
            PEN_YELLOW = 31,
            PEN_GREY = 32,
            PEN_LIGHTGREY = 33,
            PEN_MEDIUMGREY = 34,
            PEN_RED = 35,
            PEN_TRANSPARENT = 36,
            PEN_WHITE = 37,
            ITEMCOUNT = 38
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStockGDI> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStockGDI>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStockGDI __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStockGDI(native.ToPointer(), skipVTables);
        }

        public static wxStockGDI __CreateInstance(wxStockGDI.Internal native, bool skipVTables = false)
        {
            return new wxStockGDI(native, skipVTables);
        }

        private static void* __CopyValue(wxStockGDI.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxStockGDI.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStockGDI(wxStockGDI.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStockGDI(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxStockGDI()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxStockGDI");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStockGDI __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___dtor_0Delegate((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static void DeleteAll()
        {
            Internal.DeleteAll_0();
        }

        public static wxStockGDI instance()
        {
            var __ret = Internal.instance_0();
            wxStockGDI __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStockGDI.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStockGDI) wxStockGDI.NativeToManagedMap[__ret];
            else wxStockGDI.NativeToManagedMap[__ret] = __result0 = (wxStockGDI) wxStockGDI.__CreateInstance(__ret);
            return __result0;
        }

        public static wxColour GetColour(wxStockGDI.Item item)
        {
            var arg0 = item;
            var __ret = Internal.GetColour_0(arg0);
            wxColour __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxColour.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxColour) wxColour.NativeToManagedMap[__ret];
            else wxColour.NativeToManagedMap[__ret] = __result0 = (wxColour) wxColour.__CreateInstance(__ret);
            return __result0;
        }

        public static wxCursor GetCursor(wxStockGDI.Item item)
        {
            var arg0 = item;
            var __ret = Internal.GetCursor_0(arg0);
            wxCursor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxCursor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxCursor) wxCursor.NativeToManagedMap[__ret];
            else wxCursor.NativeToManagedMap[__ret] = __result0 = (wxCursor) wxCursor.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxStockGDI()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStockGDI) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[1];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(5 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class gdicmn
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z22wxInitializeStockListsv")]
            internal static extern void wxInitializeStockLists_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxDeleteStockListsv")]
            internal static extern void wxDeleteStockLists_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxColourDisplayv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool wxColourDisplay_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z14wxDisplayDepthv")]
            internal static extern int wxDisplayDepth_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z13wxDisplaySizePiS_")]
            internal static extern void wxDisplaySize_0(int* width, int* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxGetDisplaySizev")]
            internal static extern wxSize.Internal wxGetDisplaySize_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxDisplaySizeMMPiS_")]
            internal static extern void wxDisplaySizeMM_0(int* width, int* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxGetDisplaySizeMMv")]
            internal static extern wxSize.Internal wxGetDisplaySizeMM_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z15wxGetDisplayPPIv")]
            internal static extern wxSize.Internal wxGetDisplayPPI_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z19wxClientDisplayRectPiS_S_S_")]
            internal static extern void wxClientDisplayRect_0(int* x, int* y, int* width, int* height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z22wxGetClientDisplayRectv")]
            internal static extern void wxGetClientDisplayRect_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z11wxSetCursorRK8wxCursor")]
            internal static extern void wxSetCursor_0(global::System.IntPtr cursor);
        }

        public static void wxInitializeStockLists()
        {
            Internal.wxInitializeStockLists_0();
        }

        public static void wxDeleteStockLists()
        {
            Internal.wxDeleteStockLists_0();
        }

        public static bool wxColourDisplay()
        {
            var __ret = Internal.wxColourDisplay_0();
            return __ret;
        }

        public static int wxDisplayDepth()
        {
            var __ret = Internal.wxDisplayDepth_0();
            return __ret;
        }

        public static void wxDisplaySize(ref int width, ref int height)
        {
            fixed (int* __refParamPtr0 = &width)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &height)
                {
                    var arg1 = __refParamPtr1;
                    Internal.wxDisplaySize_0(arg0, arg1);
                }
            }
        }

        public static wxSize wxGetDisplaySize()
        {
            var __ret = Internal.wxGetDisplaySize_0();
            return wxSize.__CreateInstance(__ret);
        }

        public static void wxDisplaySizeMM(ref int width, ref int height)
        {
            fixed (int* __refParamPtr0 = &width)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &height)
                {
                    var arg1 = __refParamPtr1;
                    Internal.wxDisplaySizeMM_0(arg0, arg1);
                }
            }
        }

        public static wxSize wxGetDisplaySizeMM()
        {
            var __ret = Internal.wxGetDisplaySizeMM_0();
            return wxSize.__CreateInstance(__ret);
        }

        public static wxSize wxGetDisplayPPI()
        {
            var __ret = Internal.wxGetDisplayPPI_0();
            return wxSize.__CreateInstance(__ret);
        }

        public static void wxClientDisplayRect(ref int x, ref int y, ref int width, ref int height)
        {
            fixed (int* __refParamPtr0 = &x)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &y)
                {
                    var arg1 = __refParamPtr1;
                    fixed (int* __refParamPtr2 = &width)
                    {
                        var arg2 = __refParamPtr2;
                        fixed (int* __refParamPtr3 = &height)
                        {
                            var arg3 = __refParamPtr3;
                            Internal.wxClientDisplayRect_0(arg0, arg1, arg2, arg3);
                        }
                    }
                }
            }
        }

        public static wxRect wxGetClientDisplayRect()
        {
            var __ret = new wxRect.Internal();
            Internal.wxGetClientDisplayRect_0(new IntPtr(&__ret));
            return wxRect.__CreateInstance(__ret);
        }

        public static void wxSetCursor(wxCursor cursor)
        {
            if (ReferenceEquals(cursor, null))
                throw new global::System.ArgumentNullException("cursor", "Cannot be null because it is a C++ reference (&).");
            var arg0 = cursor.__Instance;
            Internal.wxSetCursor_0(arg0);
        }
    }
}
