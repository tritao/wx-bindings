//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class _wxHashTable_NodeBase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_next;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21_wxHashTable_NodeBaseC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21_wxHashTable_NodeBaseC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, _wxHashTable_NodeBase> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, _wxHashTable_NodeBase>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static _wxHashTable_NodeBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new _wxHashTable_NodeBase(native.ToPointer(), skipVTables);
        }

        public static _wxHashTable_NodeBase __CreateInstance(_wxHashTable_NodeBase.Internal native, bool skipVTables = false)
        {
            return new _wxHashTable_NodeBase(native, skipVTables);
        }

        private static void* __CopyValue(_wxHashTable_NodeBase.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(_wxHashTable_NodeBase.Internal*) ret = native;
            return ret.ToPointer();
        }

        private _wxHashTable_NodeBase(_wxHashTable_NodeBase.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected _wxHashTable_NodeBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public _wxHashTable_NodeBase()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public _wxHashTable_NodeBase(_wxHashTable_NodeBase _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((_wxHashTable_NodeBase.Internal*) __Instance) = *((_wxHashTable_NodeBase.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            _wxHashTable_NodeBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public _wxHashTable_NodeBase m_next
        {
            get
            {
                _wxHashTable_NodeBase __result0;
                if (((Internal*) __Instance)->m_next == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_next))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[((Internal*) __Instance)->m_next];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(((Internal*) __Instance)->m_next);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_next = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class _wxHashTableBase2 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17_wxHashTableBase2C2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17_wxHashTableBase216DummyProcessNodeEP21_wxHashTable_NodeBase")]
            internal static extern global::System.IntPtr DummyProcessNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17_wxHashTableBase211DeleteNodesEmPP21_wxHashTable_NodeBasePFvS1_E")]
            internal static extern void DeleteNodes_0(uint buckets, global::System.IntPtr table, global::System.IntPtr dtor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17_wxHashTableBase212GetFirstNodeEmPP21_wxHashTable_NodeBase")]
            internal static extern global::System.IntPtr GetFirstNode_0(uint buckets, global::System.IntPtr table);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17_wxHashTableBase212GetNextPrimeEm")]
            internal static extern uint GetNextPrime_0(uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17_wxHashTableBase216GetPreviousPrimeEm")]
            internal static extern uint GetPreviousPrime_0(uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17_wxHashTableBase213CopyHashTableEPP21_wxHashTable_NodeBasemPS_S2_PFmS3_S1_EPFS1_S1_E")]
            internal static extern void CopyHashTable_0(global::System.IntPtr srcTable, uint srcBuckets, global::System.IntPtr dst, global::System.IntPtr dstTable, global::System.IntPtr func, global::System.IntPtr proc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17_wxHashTableBase210AllocTableEm")]
            internal static extern void** AllocTable_0(uint sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17_wxHashTableBase29FreeTableEPv")]
            internal static extern void FreeTable_0(global::System.IntPtr table);
        }

        protected enum prime_count : uint
        {
            prime_count = 31
        }

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void NodeDtor(global::System.IntPtr _0);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate uint BucketFromNode(global::System.IntPtr _0, global::System.IntPtr _1);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr ProcessNode(global::System.IntPtr _0);

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, _wxHashTableBase2> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, _wxHashTableBase2>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static _wxHashTableBase2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new _wxHashTableBase2(native.ToPointer(), skipVTables);
        }

        public static _wxHashTableBase2 __CreateInstance(_wxHashTableBase2.Internal native, bool skipVTables = false)
        {
            return new _wxHashTableBase2(native, skipVTables);
        }

        private static void* __CopyValue(_wxHashTableBase2.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(_wxHashTableBase2.Internal*) ret = native;
            return ret.ToPointer();
        }

        private _wxHashTableBase2(_wxHashTableBase2.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected _wxHashTableBase2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public _wxHashTableBase2()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public _wxHashTableBase2(_wxHashTableBase2 _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((_wxHashTableBase2.Internal*) __Instance) = *((_wxHashTableBase2.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        protected static _wxHashTable_NodeBase DummyProcessNode(_wxHashTable_NodeBase node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.DummyProcessNode_0(arg0);
            _wxHashTable_NodeBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[__ret];
            else __result0 = _wxHashTable_NodeBase.__CreateInstance(__ret);
            return __result0;
        }

        protected static void DeleteNodes(uint buckets, _wxHashTable_NodeBase table, _wxHashTableBase2.NodeDtor dtor)
        {
            var arg1 = ReferenceEquals(table, null) ? global::System.IntPtr.Zero : table.__Instance;
            var arg2 = dtor == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(dtor);
            Internal.DeleteNodes_0(buckets, arg1, arg2);
        }

        protected static _wxHashTable_NodeBase GetFirstNode(uint buckets, _wxHashTable_NodeBase table)
        {
            var arg1 = ReferenceEquals(table, null) ? global::System.IntPtr.Zero : table.__Instance;
            var __ret = Internal.GetFirstNode_0(buckets, arg1);
            _wxHashTable_NodeBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[__ret];
            else __result0 = _wxHashTable_NodeBase.__CreateInstance(__ret);
            return __result0;
        }

        protected static uint GetNextPrime(uint n)
        {
            var __ret = Internal.GetNextPrime_0(n);
            return __ret;
        }

        protected static uint GetPreviousPrime(uint n)
        {
            var __ret = Internal.GetPreviousPrime_0(n);
            return __ret;
        }

        protected static void CopyHashTable(_wxHashTable_NodeBase srcTable, uint srcBuckets, _wxHashTableBase2 dst, _wxHashTable_NodeBase dstTable, _wxHashTableBase2.BucketFromNode func, _wxHashTableBase2.ProcessNode proc)
        {
            var arg0 = ReferenceEquals(srcTable, null) ? global::System.IntPtr.Zero : srcTable.__Instance;
            var arg2 = ReferenceEquals(dst, null) ? global::System.IntPtr.Zero : dst.__Instance;
            var arg3 = ReferenceEquals(dstTable, null) ? global::System.IntPtr.Zero : dstTable.__Instance;
            var arg4 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            var arg5 = proc == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(proc);
            Internal.CopyHashTable_0(arg0, srcBuckets, arg2, arg3, arg4, arg5);
        }

        protected static void** AllocTable(uint sz)
        {
            var __ret = Internal.AllocTable_0(sz);
            return __ret;
        }

        protected static void FreeTable(global::System.IntPtr table)
        {
            var arg0 = table;
            Internal.FreeTable_0(arg0);
        }
    }

    public unsafe partial class wxIntegerHash : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxIntegerHashC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxIntegerHashC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxIntegerHash> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxIntegerHash>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxIntegerHash __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxIntegerHash(native.ToPointer(), skipVTables);
        }

        public static wxIntegerHash __CreateInstance(wxIntegerHash.Internal native, bool skipVTables = false)
        {
            return new wxIntegerHash(native, skipVTables);
        }

        private static void* __CopyValue(wxIntegerHash.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxIntegerHash.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxIntegerHash(wxIntegerHash.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxIntegerHash(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxIntegerHash()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxIntegerHash(wxIntegerHash _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxIntegerHash.Internal*) __Instance) = *((wxIntegerHash.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxIntegerHash __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxIntegerEqual : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxIntegerEqualC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxIntegerEqualC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxIntegerEqual> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxIntegerEqual>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxIntegerEqual __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxIntegerEqual(native.ToPointer(), skipVTables);
        }

        public static wxIntegerEqual __CreateInstance(wxIntegerEqual.Internal native, bool skipVTables = false)
        {
            return new wxIntegerEqual(native, skipVTables);
        }

        private static void* __CopyValue(wxIntegerEqual.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxIntegerEqual.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxIntegerEqual(wxIntegerEqual.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxIntegerEqual(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxIntegerEqual()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxIntegerEqual(wxIntegerEqual _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxIntegerEqual.Internal*) __Instance) = *((wxIntegerEqual.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxIntegerEqual __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxPointerHash : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxPointerHashC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxPointerHashC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPointerHash> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPointerHash>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxPointerHash __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPointerHash(native.ToPointer(), skipVTables);
        }

        public static wxPointerHash __CreateInstance(wxPointerHash.Internal native, bool skipVTables = false)
        {
            return new wxPointerHash(native, skipVTables);
        }

        private static void* __CopyValue(wxPointerHash.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxPointerHash.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxPointerHash(wxPointerHash.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPointerHash(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxPointerHash()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxPointerHash(wxPointerHash _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxPointerHash.Internal*) __Instance) = *((wxPointerHash.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxPointerHash __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxPointerEqual : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPointerEqualC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPointerEqualC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPointerEqual> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPointerEqual>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxPointerEqual __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPointerEqual(native.ToPointer(), skipVTables);
        }

        public static wxPointerEqual __CreateInstance(wxPointerEqual.Internal native, bool skipVTables = false)
        {
            return new wxPointerEqual(native, skipVTables);
        }

        private static void* __CopyValue(wxPointerEqual.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxPointerEqual.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxPointerEqual(wxPointerEqual.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPointerEqual(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxPointerEqual()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxPointerEqual(wxPointerEqual _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxPointerEqual.Internal*) __Instance) = *((wxPointerEqual.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxPointerEqual __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxStringHash : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxStringHashC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxStringHashC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxStringHash10stringHashEPKw")]
            internal static extern uint stringHash_0(global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxStringHash10stringHashEPKc")]
            internal static extern uint stringHash1_0(global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringHash> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringHash>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringHash __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringHash(native.ToPointer(), skipVTables);
        }

        public static wxStringHash __CreateInstance(wxStringHash.Internal native, bool skipVTables = false)
        {
            return new wxStringHash(native, skipVTables);
        }

        private static void* __CopyValue(wxStringHash.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxStringHash.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStringHash(wxStringHash.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringHash(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringHash()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxStringHash(wxStringHash _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxStringHash.Internal*) __Instance) = *((wxStringHash.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringHash __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static uint stringHash(string _0)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(_0);
            var __ret = Internal.stringHash_0(arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static uint stringHash1(string _0)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(_0);
            var __ret = Internal.stringHash1_0(arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }
    }

    public unsafe partial class wxStringEqual : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxStringEqualC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxStringEqualC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringEqual> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringEqual>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringEqual __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringEqual(native.ToPointer(), skipVTables);
        }

        public static wxStringEqual __CreateInstance(wxStringEqual.Internal native, bool skipVTables = false)
        {
            return new wxStringEqual(native, skipVTables);
        }

        private static void* __CopyValue(wxStringEqual.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxStringEqual.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStringEqual(wxStringEqual.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringEqual(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringEqual()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxStringEqual(wxStringEqual _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxStringEqual.Internal*) __Instance) = *((wxStringEqual.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringEqual __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxLongToLongHashMap_wxImplementation_Pair : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public int first;

            [FieldOffset(4)]
            public int second;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN41wxLongToLongHashMap_wxImplementation_PairC2ERKlS1_")]
            internal static extern void ctor_0(global::System.IntPtr instance, int* f, int* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN41wxLongToLongHashMap_wxImplementation_PairC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxLongToLongHashMap_wxImplementation_Pair> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxLongToLongHashMap_wxImplementation_Pair>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxLongToLongHashMap_wxImplementation_Pair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxLongToLongHashMap_wxImplementation_Pair(native.ToPointer(), skipVTables);
        }

        public static wxLongToLongHashMap_wxImplementation_Pair __CreateInstance(wxLongToLongHashMap_wxImplementation_Pair.Internal native, bool skipVTables = false)
        {
            return new wxLongToLongHashMap_wxImplementation_Pair(native, skipVTables);
        }

        private static void* __CopyValue(wxLongToLongHashMap_wxImplementation_Pair.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxLongToLongHashMap_wxImplementation_Pair.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxLongToLongHashMap_wxImplementation_Pair(wxLongToLongHashMap_wxImplementation_Pair.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxLongToLongHashMap_wxImplementation_Pair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxLongToLongHashMap_wxImplementation_Pair(ref int f, ref int s)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (int* __refParamPtr0 = &f)
            {
                var arg0 = __refParamPtr0;
                fixed (int* __refParamPtr1 = &s)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }
        }

        public wxLongToLongHashMap_wxImplementation_Pair(wxLongToLongHashMap_wxImplementation_Pair _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxLongToLongHashMap_wxImplementation_Pair.Internal*) __Instance) = *((wxLongToLongHashMap_wxImplementation_Pair.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxLongToLongHashMap_wxImplementation_Pair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int first
        {
            get
            {
                return ((Internal*) __Instance)->first;
            }

            set
            {
                ((Internal*) __Instance)->first = value;
            }
        }

        public int second
        {
            get
            {
                return ((Internal*) __Instance)->second;
            }

            set
            {
                ((Internal*) __Instance)->second = value;
            }
        }
    }

    public unsafe partial class wxLongToLongHashMap_wxImplementation_KeyEx : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxLongToLongHashMap_wxImplementation_KeyExC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxLongToLongHashMap_wxImplementation_KeyExC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxLongToLongHashMap_wxImplementation_KeyEx> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxLongToLongHashMap_wxImplementation_KeyEx>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxLongToLongHashMap_wxImplementation_KeyEx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxLongToLongHashMap_wxImplementation_KeyEx(native.ToPointer(), skipVTables);
        }

        public static wxLongToLongHashMap_wxImplementation_KeyEx __CreateInstance(wxLongToLongHashMap_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
        {
            return new wxLongToLongHashMap_wxImplementation_KeyEx(native, skipVTables);
        }

        private static void* __CopyValue(wxLongToLongHashMap_wxImplementation_KeyEx.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxLongToLongHashMap_wxImplementation_KeyEx.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxLongToLongHashMap_wxImplementation_KeyEx(wxLongToLongHashMap_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxLongToLongHashMap_wxImplementation_KeyEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxLongToLongHashMap_wxImplementation_KeyEx()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxLongToLongHashMap_wxImplementation_KeyEx(wxLongToLongHashMap_wxImplementation_KeyEx _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxLongToLongHashMap_wxImplementation_KeyEx.Internal*) __Instance) = *((wxLongToLongHashMap_wxImplementation_KeyEx.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxLongToLongHashMap_wxImplementation_KeyEx __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxLongToLongHashMap_wxImplementation_HashTable : _wxHashTableBase2, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxIntegerHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxIntegerEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxLongToLongHashMap_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTableC2EmRK13wxIntegerHashRK14wxIntegerEqualRK42wxLongToLongHashMap_wxImplementation_KeyEx")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint sz, global::System.IntPtr hfun, global::System.IntPtr k_eq, global::System.IntPtr k_ex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTableC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr ht);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTableD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable10DeleteNodeEP21_wxHashTable_NodeBase")]
            internal static extern void DeleteNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable10hash_functEv")]
            internal static extern wxIntegerHash.Internal hash_funct_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable6key_eqEv")]
            internal static extern wxIntegerEqual.Internal key_eq_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK46wxLongToLongHashMap_wxImplementation_HashTable4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK46wxLongToLongHashMap_wxImplementation_HashTable8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK46wxLongToLongHashMap_wxImplementation_HashTable5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable3endEv")]
            internal static extern wxLongToLongHashMap_wxImplementation_HashTable.iterator.Internal end_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable5beginEv")]
            internal static extern wxLongToLongHashMap_wxImplementation_HashTable.iterator.Internal begin_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable5eraseERKl")]
            internal static extern uint erase_0(global::System.IntPtr instance, int* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable16GetBucketForNodeEPS_PNS_4NodeE")]
            internal static extern uint GetBucketForNode_0(global::System.IntPtr ht, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8CopyNodeEPNS_4NodeE")]
            internal static extern global::System.IntPtr CopyNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable15GetOrCreateNodeERK41wxLongToLongHashMap_wxImplementation_PairRb")]
            internal static extern global::System.IntPtr GetOrCreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, bool* created);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable10CreateNodeERK41wxLongToLongHashMap_wxImplementation_Pairm")]
            internal static extern global::System.IntPtr CreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, uint bucket);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable10CreateNodeERK41wxLongToLongHashMap_wxImplementation_Pair")]
            internal static extern void CreateNode_1(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK46wxLongToLongHashMap_wxImplementation_HashTable10GetNodePtrERKl")]
            internal static extern global::System.IntPtr GetNodePtr_0(global::System.IntPtr instance, int* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK46wxLongToLongHashMap_wxImplementation_HashTable7GetNodeERKl")]
            internal static extern global::System.IntPtr GetNode_0(global::System.IntPtr instance, int* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable11ResizeTableEm")]
            internal static extern void ResizeTable_0(global::System.IntPtr instance, uint newSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8HashCopyERKS_")]
            internal static extern void HashCopy_0(global::System.IntPtr instance, global::System.IntPtr ht);
        }

        public unsafe partial class Node : _wxHashTable_NodeBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_next;

                [FieldOffset(4)]
                public wxLongToLongHashMap_wxImplementation_Pair.Internal m_value;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable4NodeC2ERK41wxLongToLongHashMap_wxImplementation_Pair")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable4NodeC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable4Node4nextEv")]
                internal static extern global::System.IntPtr next_0(global::System.IntPtr instance);
            }

            public static new Node __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Node(native.ToPointer(), skipVTables);
            }

            public static Node __CreateInstance(Node.Internal native, bool skipVTables = false)
            {
                return new Node(native, skipVTables);
            }

            private static void* __CopyValue(Node.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(Node.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Node(Node.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Node(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Node(wxLongToLongHashMap_wxImplementation_Pair value)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var arg0 = value.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public Node(wxLongToLongHashMap_wxImplementation_HashTable.Node _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Node.Internal*) __Instance) = *((Node.Internal*) _0.__Instance);
            }

            public wxLongToLongHashMap_wxImplementation_HashTable.Node next()
            {
                var __ret = Internal.next_0((__Instance + __PointerAdjustment));
                wxLongToLongHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxLongToLongHashMap_wxImplementation_HashTable.Node) wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            public wxLongToLongHashMap_wxImplementation_Pair m_value
            {
                get
                {
                    return wxLongToLongHashMap_wxImplementation_Pair.__CreateInstance(((Internal*) __Instance)->m_value);
                }

                set
                {
                    ((Internal*) __Instance)->m_value = ReferenceEquals(value, null) ? new wxLongToLongHashMap_wxImplementation_Pair.Internal() : *(wxLongToLongHashMap_wxImplementation_Pair.Internal*) (value.__Instance);
                }
            }
        }

        public unsafe partial class Iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8IteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8IteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8IteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK46wxLongToLongHashMap_wxImplementation_HashTable8IteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK46wxLongToLongHashMap_wxImplementation_HashTable8IteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8Iterator11GetNextNodeEv")]
                internal static extern global::System.IntPtr GetNextNode_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8Iterator8PlusPlusEv")]
                internal static extern void PlusPlus_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Iterator(native.ToPointer(), skipVTables);
            }

            public static Iterator __CreateInstance(Iterator.Internal native, bool skipVTables = false)
            {
                return new Iterator(native, skipVTables);
            }

            private static void* __CopyValue(Iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(Iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Iterator(Iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public Iterator(wxLongToLongHashMap_wxImplementation_HashTable.Node node, wxLongToLongHashMap_wxImplementation_HashTable ht)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public Iterator(wxLongToLongHashMap_wxImplementation_HashTable.Iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Iterator.Internal*) __Instance) = *((Iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxLongToLongHashMap_wxImplementation_HashTable.Iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static bool operator ==(wxLongToLongHashMap_wxImplementation_HashTable.Iterator __op, wxLongToLongHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as Iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(wxLongToLongHashMap_wxImplementation_HashTable.Iterator __op, wxLongToLongHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            protected wxLongToLongHashMap_wxImplementation_HashTable.Node GetNextNode()
            {
                var __ret = Internal.GetNextNode_0((__Instance + __PointerAdjustment));
                wxLongToLongHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxLongToLongHashMap_wxImplementation_HashTable.Node) wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            protected void PlusPlus()
            {
                Internal.PlusPlus_0((__Instance + __PointerAdjustment));
            }

            public wxLongToLongHashMap_wxImplementation_HashTable.Node m_node
            {
                get
                {
                    wxLongToLongHashMap_wxImplementation_HashTable.Node __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxLongToLongHashMap_wxImplementation_HashTable.Node) wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.Node.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxLongToLongHashMap_wxImplementation_HashTable m_ht
            {
                get
                {
                    wxLongToLongHashMap_wxImplementation_HashTable __result0;
                    if (((Internal*) __Instance)->m_ht == IntPtr.Zero) __result0 = null;
                    else if (wxLongToLongHashMap_wxImplementation_HashTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_ht))
                        __result0 = (wxLongToLongHashMap_wxImplementation_HashTable) wxLongToLongHashMap_wxImplementation_HashTable.NativeToManagedMap[((Internal*) __Instance)->m_ht];
                    else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.__CreateInstance(((Internal*) __Instance)->m_ht);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_ht = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class iterator : wxLongToLongHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8iteratorC2EPNS_4NodeEPS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public iterator(wxLongToLongHashMap_wxImplementation_HashTable.Node node, wxLongToLongHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public iterator(wxLongToLongHashMap_wxImplementation_HashTable.iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((iterator.Internal*) __Instance) = *((iterator.Internal*) _0.__Instance);
            }

            public static wxLongToLongHashMap_wxImplementation_HashTable.iterator operator ++(wxLongToLongHashMap_wxImplementation_HashTable.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxLongToLongHashMap_wxImplementation_HashTable.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxLongToLongHashMap_wxImplementation_HashTable.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxLongToLongHashMap_wxImplementation_HashTable.iterator) wxLongToLongHashMap_wxImplementation_HashTable.iterator.NativeToManagedMap[__ret];
                else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class const_iterator : wxLongToLongHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable14const_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable14const_iteratorC2ENS_8iteratorE")]
                internal static extern void ctor_1(global::System.IntPtr instance, wxLongToLongHashMap_wxImplementation_HashTable.iterator.Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable14const_iteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable14const_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN46wxLongToLongHashMap_wxImplementation_HashTable14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxLongToLongHashMap_wxImplementation_HashTable.iterator i)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(i, null) ? new wxLongToLongHashMap_wxImplementation_HashTable.iterator.Internal() : *(wxLongToLongHashMap_wxImplementation_HashTable.iterator.Internal*) (i.__Instance);
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxLongToLongHashMap_wxImplementation_HashTable.Node node, wxLongToLongHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_iterator(wxLongToLongHashMap_wxImplementation_HashTable.const_iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public static wxLongToLongHashMap_wxImplementation_HashTable.const_iterator operator ++(wxLongToLongHashMap_wxImplementation_HashTable.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxLongToLongHashMap_wxImplementation_HashTable.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxLongToLongHashMap_wxImplementation_HashTable.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxLongToLongHashMap_wxImplementation_HashTable.const_iterator) wxLongToLongHashMap_wxImplementation_HashTable.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.const_iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static new wxLongToLongHashMap_wxImplementation_HashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxLongToLongHashMap_wxImplementation_HashTable(native.ToPointer(), skipVTables);
        }

        public static wxLongToLongHashMap_wxImplementation_HashTable __CreateInstance(wxLongToLongHashMap_wxImplementation_HashTable.Internal native, bool skipVTables = false)
        {
            return new wxLongToLongHashMap_wxImplementation_HashTable(native, skipVTables);
        }

        private static void* __CopyValue(wxLongToLongHashMap_wxImplementation_HashTable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxLongToLongHashMap_wxImplementation_HashTable.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxLongToLongHashMap_wxImplementation_HashTable(wxLongToLongHashMap_wxImplementation_HashTable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxLongToLongHashMap_wxImplementation_HashTable(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxLongToLongHashMap_wxImplementation_HashTable(uint sz, wxIntegerHash hfun, wxIntegerEqual k_eq, wxLongToLongHashMap_wxImplementation_KeyEx k_ex)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(hfun, null))
                throw new global::System.ArgumentNullException("hfun", "Cannot be null because it is a C++ reference (&).");
            var arg1 = hfun.__Instance;
            if (ReferenceEquals(k_eq, null))
                throw new global::System.ArgumentNullException("k_eq", "Cannot be null because it is a C++ reference (&).");
            var arg2 = k_eq.__Instance;
            if (ReferenceEquals(k_ex, null))
                throw new global::System.ArgumentNullException("k_ex", "Cannot be null because it is a C++ reference (&).");
            var arg3 = k_ex.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), sz, arg1, arg2, arg3);
        }

        public wxLongToLongHashMap_wxImplementation_HashTable(wxLongToLongHashMap_wxImplementation_HashTable ht)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxIntegerHash hash_funct()
        {
            var __ret = Internal.hash_funct_0((__Instance + __PointerAdjustment));
            return wxIntegerHash.__CreateInstance(__ret);
        }

        public wxIntegerEqual key_eq()
        {
            var __ret = Internal.key_eq_0((__Instance + __PointerAdjustment));
            return wxIntegerEqual.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxLongToLongHashMap_wxImplementation_HashTable.iterator end()
        {
            var __ret = Internal.end_1((__Instance + __PointerAdjustment));
            return wxLongToLongHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxLongToLongHashMap_wxImplementation_HashTable.iterator begin()
        {
            var __ret = Internal.begin_1((__Instance + __PointerAdjustment));
            return wxLongToLongHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public uint erase(ref int key)
        {
            fixed (int* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        protected wxLongToLongHashMap_wxImplementation_HashTable.Node GetOrCreateNode(wxLongToLongHashMap_wxImplementation_Pair value, ref bool created)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            fixed (bool* __refParamPtr1 = &created)
            {
                var arg1 = __refParamPtr1;
                var __ret = Internal.GetOrCreateNode_0((__Instance + __PointerAdjustment), arg0, arg1);
                wxLongToLongHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxLongToLongHashMap_wxImplementation_HashTable.Node) wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected wxLongToLongHashMap_wxImplementation_HashTable.Node CreateNode(wxLongToLongHashMap_wxImplementation_Pair value, uint bucket)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            var __ret = Internal.CreateNode_0((__Instance + __PointerAdjustment), arg0, bucket);
            wxLongToLongHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxLongToLongHashMap_wxImplementation_HashTable.Node) wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void CreateNode(wxLongToLongHashMap_wxImplementation_Pair value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            Internal.CreateNode_1((__Instance + __PointerAdjustment), arg0);
        }

        protected _wxHashTable_NodeBase GetNodePtr(ref int key)
        {
            fixed (int* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.GetNodePtr_0((__Instance + __PointerAdjustment), arg0);
                _wxHashTable_NodeBase __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[__ret];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected wxLongToLongHashMap_wxImplementation_HashTable.Node GetNode(ref int key)
        {
            fixed (int* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.GetNode_0((__Instance + __PointerAdjustment), arg0);
                wxLongToLongHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxLongToLongHashMap_wxImplementation_HashTable.Node) wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected void ResizeTable(uint newSize)
        {
            Internal.ResizeTable_0((__Instance + __PointerAdjustment), newSize);
        }

        protected void HashCopy(wxLongToLongHashMap_wxImplementation_HashTable ht)
        {
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.HashCopy_0((__Instance + __PointerAdjustment), arg0);
        }

        protected static void DeleteNode(_wxHashTable_NodeBase node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            Internal.DeleteNode_0(arg0);
        }

        protected static uint GetBucketForNode(wxLongToLongHashMap_wxImplementation_HashTable ht, wxLongToLongHashMap_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
            var arg1 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.GetBucketForNode_0(arg0, arg1);
            return __ret;
        }

        protected static wxLongToLongHashMap_wxImplementation_HashTable.Node CopyNode(wxLongToLongHashMap_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.CopyNode_0(arg0);
            wxLongToLongHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxLongToLongHashMap_wxImplementation_HashTable.Node) wxLongToLongHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxLongToLongHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected _wxHashTable_NodeBase m_table
        {
            get
            {
                _wxHashTable_NodeBase __result0;
                if (((Internal*) __Instance)->m_table == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_table))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[((Internal*) __Instance)->m_table];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(((Internal*) __Instance)->m_table);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_table = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected uint m_tableBuckets
        {
            get
            {
                return ((Internal*) __Instance)->m_tableBuckets;
            }

            set
            {
                ((Internal*) __Instance)->m_tableBuckets = value;
            }
        }

        protected uint m_items
        {
            get
            {
                return ((Internal*) __Instance)->m_items;
            }

            set
            {
                ((Internal*) __Instance)->m_items = value;
            }
        }

        protected wxIntegerHash m_hasher
        {
            get
            {
                return wxIntegerHash.__CreateInstance(((Internal*) __Instance)->m_hasher);
            }

            set
            {
                ((Internal*) __Instance)->m_hasher = ReferenceEquals(value, null) ? new wxIntegerHash.Internal() : *(wxIntegerHash.Internal*) (value.__Instance);
            }
        }

        protected wxIntegerEqual m_equals
        {
            get
            {
                return wxIntegerEqual.__CreateInstance(((Internal*) __Instance)->m_equals);
            }

            set
            {
                ((Internal*) __Instance)->m_equals = ReferenceEquals(value, null) ? new wxIntegerEqual.Internal() : *(wxIntegerEqual.Internal*) (value.__Instance);
            }
        }

        protected wxLongToLongHashMap_wxImplementation_KeyEx m_getKey
        {
            get
            {
                return wxLongToLongHashMap_wxImplementation_KeyEx.__CreateInstance(((Internal*) __Instance)->m_getKey);
            }

            set
            {
                ((Internal*) __Instance)->m_getKey = ReferenceEquals(value, null) ? new wxLongToLongHashMap_wxImplementation_KeyEx.Internal() : *(wxLongToLongHashMap_wxImplementation_KeyEx.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxLongToLongHashMap : wxLongToLongHashMap_wxImplementation_HashTable, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxIntegerHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxIntegerEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxLongToLongHashMap_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxLongToLongHashMapC2Em13wxIntegerHash14wxIntegerEqual")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint hint, wxIntegerHash.Internal hf, wxIntegerEqual.Internal eq);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxLongToLongHashMapC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxLongToLongHashMapD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxLongToLongHashMap4findERKl")]
            internal static extern wxLongToLongHashMap_wxImplementation_HashTable.iterator.Internal find_1(global::System.IntPtr instance, int* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxLongToLongHashMap6insertERK41wxLongToLongHashMap_wxImplementation_Pair")]
            internal static extern void insert_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxLongToLongHashMap5eraseERKl")]
            internal static extern uint erase_0(global::System.IntPtr instance, int* k);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxLongToLongHashMap5eraseERKN46wxLongToLongHashMap_wxImplementation_HashTable8iteratorE")]
            internal static extern void erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxLongToLongHashMap5countERKl")]
            internal static extern uint count_0(global::System.IntPtr instance, int* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxLongToLongHashMapixERKl")]
            internal static extern int* OperatorSubscript_0(global::System.IntPtr instance, int* key);
        }

        public unsafe partial class Insert_Result : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxLongToLongHashMap_wxImplementation_HashTable.iterator.Internal first;

                [FieldOffset(8)]
                public byte second;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN19wxLongToLongHashMap13Insert_ResultC2ERKN46wxLongToLongHashMap_wxImplementation_HashTable8iteratorERKb")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, bool* s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN19wxLongToLongHashMap13Insert_ResultC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Insert_Result __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Insert_Result(native.ToPointer(), skipVTables);
            }

            public static Insert_Result __CreateInstance(Insert_Result.Internal native, bool skipVTables = false)
            {
                return new Insert_Result(native, skipVTables);
            }

            private static void* __CopyValue(Insert_Result.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(Insert_Result.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Insert_Result(Insert_Result.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Insert_Result(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Insert_Result(wxLongToLongHashMap_wxImplementation_HashTable.iterator f, ref bool s)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(f, null))
                    throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
                var arg0 = f.__Instance;
                fixed (bool* __refParamPtr1 = &s)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }

            public Insert_Result(wxLongToLongHashMap.Insert_Result _0)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Insert_Result.Internal*) __Instance) = *((Insert_Result.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxLongToLongHashMap.Insert_Result __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxLongToLongHashMap_wxImplementation_HashTable.iterator first
            {
                get
                {
                    return wxLongToLongHashMap_wxImplementation_HashTable.iterator.__CreateInstance(((Internal*) __Instance)->first);
                }

                set
                {
                    ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxLongToLongHashMap_wxImplementation_HashTable.iterator.Internal() : *(wxLongToLongHashMap_wxImplementation_HashTable.iterator.Internal*) (value.__Instance);
                }
            }

            public bool second
            {
                get
                {
                    return ((Internal*) __Instance)->second != 0;
                }

                set
                {
                    ((Internal*) __Instance)->second = (byte) (value ? 1 : 0);
                }
            }
        }

        public static new wxLongToLongHashMap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxLongToLongHashMap(native.ToPointer(), skipVTables);
        }

        public static wxLongToLongHashMap __CreateInstance(wxLongToLongHashMap.Internal native, bool skipVTables = false)
        {
            return new wxLongToLongHashMap(native, skipVTables);
        }

        private static void* __CopyValue(wxLongToLongHashMap.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxLongToLongHashMap.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxLongToLongHashMap(wxLongToLongHashMap.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxLongToLongHashMap(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxLongToLongHashMap(uint hint, wxIntegerHash hf, wxIntegerEqual eq)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(hf, null) ? new wxIntegerHash.Internal() : *(wxIntegerHash.Internal*) (hf.__Instance);
            var arg2 = ReferenceEquals(eq, null) ? new wxIntegerEqual.Internal() : *(wxIntegerEqual.Internal*) (eq.__Instance);
            Internal.ctor_0((__Instance + __PointerAdjustment), hint, arg1, arg2);
        }

        public wxLongToLongHashMap(wxLongToLongHashMap _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxLongToLongHashMap_wxImplementation_HashTable.iterator find(ref int key)
        {
            fixed (int* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.find_1((__Instance + __PointerAdjustment), arg0);
                return wxLongToLongHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
            }
        }

        public wxLongToLongHashMap.Insert_Result insert(wxLongToLongHashMap_wxImplementation_Pair v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            var __ret = new wxLongToLongHashMap.Insert_Result.Internal();
            Internal.insert_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxLongToLongHashMap.Insert_Result.__CreateInstance(__ret);
        }

        public uint erase(ref int k)
        {
            fixed (int* __refParamPtr0 = &k)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public void erase(wxLongToLongHashMap_wxImplementation_HashTable.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            Internal.erase_1((__Instance + __PointerAdjustment), arg0);
        }

        public uint count(ref int key)
        {
            fixed (int* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.count_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public int this[int* key]
        {
            get
            {
                fixed (int* __refParamPtr0 = &key)
                {
                    var arg0 = __refParamPtr0;
                    var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), arg0);
                    return *__ret;
                }
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), key) = value;
            }
        }
    }

    public unsafe partial class wxStringToStringHashMap_wxImplementation_Pair : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal first;

            [FieldOffset(20)]
            public wxString.Internal second;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN45wxStringToStringHashMap_wxImplementation_PairC2ERK8wxStringS2_")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN45wxStringToStringHashMap_wxImplementation_PairC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN45wxStringToStringHashMap_wxImplementation_PairD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToStringHashMap_wxImplementation_Pair> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToStringHashMap_wxImplementation_Pair>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringToStringHashMap_wxImplementation_Pair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToStringHashMap_wxImplementation_Pair(native.ToPointer(), skipVTables);
        }

        public static wxStringToStringHashMap_wxImplementation_Pair __CreateInstance(wxStringToStringHashMap_wxImplementation_Pair.Internal native, bool skipVTables = false)
        {
            return new wxStringToStringHashMap_wxImplementation_Pair(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToStringHashMap_wxImplementation_Pair.Internal native)
        {
            var ret = Marshal.AllocHGlobal(40);
            wxStringToStringHashMap_wxImplementation_Pair.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringToStringHashMap_wxImplementation_Pair(wxStringToStringHashMap_wxImplementation_Pair.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToStringHashMap_wxImplementation_Pair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToStringHashMap_wxImplementation_Pair(wxString f, wxString s)
        {
            __Instance = Marshal.AllocHGlobal(40);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(f, null))
                throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
            var arg0 = f.__Instance;
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxStringToStringHashMap_wxImplementation_Pair(wxStringToStringHashMap_wxImplementation_Pair _0)
        {
            __Instance = Marshal.AllocHGlobal(40);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringToStringHashMap_wxImplementation_Pair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString first
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->first);
            }

            set
            {
                ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        public wxString second
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->second);
            }

            set
            {
                ((Internal*) __Instance)->second = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxStringToStringHashMap_wxImplementation_KeyEx : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxStringToStringHashMap_wxImplementation_KeyExC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN46wxStringToStringHashMap_wxImplementation_KeyExC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToStringHashMap_wxImplementation_KeyEx> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToStringHashMap_wxImplementation_KeyEx>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringToStringHashMap_wxImplementation_KeyEx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToStringHashMap_wxImplementation_KeyEx(native.ToPointer(), skipVTables);
        }

        public static wxStringToStringHashMap_wxImplementation_KeyEx __CreateInstance(wxStringToStringHashMap_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
        {
            return new wxStringToStringHashMap_wxImplementation_KeyEx(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToStringHashMap_wxImplementation_KeyEx.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxStringToStringHashMap_wxImplementation_KeyEx.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStringToStringHashMap_wxImplementation_KeyEx(wxStringToStringHashMap_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToStringHashMap_wxImplementation_KeyEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToStringHashMap_wxImplementation_KeyEx()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxStringToStringHashMap_wxImplementation_KeyEx(wxStringToStringHashMap_wxImplementation_KeyEx _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxStringToStringHashMap_wxImplementation_KeyEx.Internal*) __Instance) = *((wxStringToStringHashMap_wxImplementation_KeyEx.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringToStringHashMap_wxImplementation_KeyEx __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxStringToStringHashMap_wxImplementation_HashTable : _wxHashTableBase2, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxStringToStringHashMap_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTableC2EmRK12wxStringHashRK13wxStringEqualRK46wxStringToStringHashMap_wxImplementation_KeyEx")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint sz, global::System.IntPtr hfun, global::System.IntPtr k_eq, global::System.IntPtr k_ex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTableC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr ht);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTableD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable10DeleteNodeEP21_wxHashTable_NodeBase")]
            internal static extern void DeleteNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable10hash_functEv")]
            internal static extern wxStringHash.Internal hash_funct_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable6key_eqEv")]
            internal static extern wxStringEqual.Internal key_eq_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToStringHashMap_wxImplementation_HashTable4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToStringHashMap_wxImplementation_HashTable8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToStringHashMap_wxImplementation_HashTable5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable3endEv")]
            internal static extern wxStringToStringHashMap_wxImplementation_HashTable.iterator.Internal end_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable5beginEv")]
            internal static extern wxStringToStringHashMap_wxImplementation_HashTable.iterator.Internal begin_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable16GetBucketForNodeEPS_PNS_4NodeE")]
            internal static extern uint GetBucketForNode_0(global::System.IntPtr ht, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8CopyNodeEPNS_4NodeE")]
            internal static extern global::System.IntPtr CopyNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable15GetOrCreateNodeERK45wxStringToStringHashMap_wxImplementation_PairRb")]
            internal static extern global::System.IntPtr GetOrCreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, bool* created);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable10CreateNodeERK45wxStringToStringHashMap_wxImplementation_Pairm")]
            internal static extern global::System.IntPtr CreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, uint bucket);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable10CreateNodeERK45wxStringToStringHashMap_wxImplementation_Pair")]
            internal static extern void CreateNode_1(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToStringHashMap_wxImplementation_HashTable10GetNodePtrERK8wxString")]
            internal static extern global::System.IntPtr GetNodePtr_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK50wxStringToStringHashMap_wxImplementation_HashTable7GetNodeERK8wxString")]
            internal static extern global::System.IntPtr GetNode_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable11ResizeTableEm")]
            internal static extern void ResizeTable_0(global::System.IntPtr instance, uint newSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8HashCopyERKS_")]
            internal static extern void HashCopy_0(global::System.IntPtr instance, global::System.IntPtr ht);
        }

        public unsafe partial class Node : _wxHashTable_NodeBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 44)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_next;

                [FieldOffset(4)]
                public wxStringToStringHashMap_wxImplementation_Pair.Internal m_value;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable4NodeC2ERK45wxStringToStringHashMap_wxImplementation_Pair")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable4NodeC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable4NodeD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable4Node4nextEv")]
                internal static extern global::System.IntPtr next_0(global::System.IntPtr instance);
            }

            public static new Node __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Node(native.ToPointer(), skipVTables);
            }

            public static Node __CreateInstance(Node.Internal native, bool skipVTables = false)
            {
                return new Node(native, skipVTables);
            }

            private static void* __CopyValue(Node.Internal native)
            {
                var ret = Marshal.AllocHGlobal(44);
                wxStringToStringHashMap_wxImplementation_HashTable.Node.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Node(Node.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Node(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Node(wxStringToStringHashMap_wxImplementation_Pair value)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(44);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var arg0 = value.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public Node(wxStringToStringHashMap_wxImplementation_HashTable.Node _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(44);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            }

            protected override void Dispose(bool disposing)
            {
                _wxHashTable_NodeBase __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxStringToStringHashMap_wxImplementation_HashTable.Node next()
            {
                var __ret = Internal.next_0((__Instance + __PointerAdjustment));
                wxStringToStringHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToStringHashMap_wxImplementation_HashTable.Node) wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            public wxStringToStringHashMap_wxImplementation_Pair m_value
            {
                get
                {
                    return wxStringToStringHashMap_wxImplementation_Pair.__CreateInstance(((Internal*) __Instance)->m_value);
                }

                set
                {
                    ((Internal*) __Instance)->m_value = ReferenceEquals(value, null) ? new wxStringToStringHashMap_wxImplementation_Pair.Internal() : *(wxStringToStringHashMap_wxImplementation_Pair.Internal*) (value.__Instance);
                }
            }
        }

        public unsafe partial class Iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8IteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8IteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8IteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK50wxStringToStringHashMap_wxImplementation_HashTable8IteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK50wxStringToStringHashMap_wxImplementation_HashTable8IteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8Iterator11GetNextNodeEv")]
                internal static extern global::System.IntPtr GetNextNode_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8Iterator8PlusPlusEv")]
                internal static extern void PlusPlus_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Iterator(native.ToPointer(), skipVTables);
            }

            public static Iterator __CreateInstance(Iterator.Internal native, bool skipVTables = false)
            {
                return new Iterator(native, skipVTables);
            }

            private static void* __CopyValue(Iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(Iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Iterator(Iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public Iterator(wxStringToStringHashMap_wxImplementation_HashTable.Node node, wxStringToStringHashMap_wxImplementation_HashTable ht)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public Iterator(wxStringToStringHashMap_wxImplementation_HashTable.Iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Iterator.Internal*) __Instance) = *((Iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxStringToStringHashMap_wxImplementation_HashTable.Iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static bool operator ==(wxStringToStringHashMap_wxImplementation_HashTable.Iterator __op, wxStringToStringHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as Iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(wxStringToStringHashMap_wxImplementation_HashTable.Iterator __op, wxStringToStringHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            protected wxStringToStringHashMap_wxImplementation_HashTable.Node GetNextNode()
            {
                var __ret = Internal.GetNextNode_0((__Instance + __PointerAdjustment));
                wxStringToStringHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToStringHashMap_wxImplementation_HashTable.Node) wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            protected void PlusPlus()
            {
                Internal.PlusPlus_0((__Instance + __PointerAdjustment));
            }

            public wxStringToStringHashMap_wxImplementation_HashTable.Node m_node
            {
                get
                {
                    wxStringToStringHashMap_wxImplementation_HashTable.Node __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxStringToStringHashMap_wxImplementation_HashTable.Node) wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.Node.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxStringToStringHashMap_wxImplementation_HashTable m_ht
            {
                get
                {
                    wxStringToStringHashMap_wxImplementation_HashTable __result0;
                    if (((Internal*) __Instance)->m_ht == IntPtr.Zero) __result0 = null;
                    else if (wxStringToStringHashMap_wxImplementation_HashTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_ht))
                        __result0 = (wxStringToStringHashMap_wxImplementation_HashTable) wxStringToStringHashMap_wxImplementation_HashTable.NativeToManagedMap[((Internal*) __Instance)->m_ht];
                    else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.__CreateInstance(((Internal*) __Instance)->m_ht);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_ht = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class iterator : wxStringToStringHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8iteratorC2EPNS_4NodeEPS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public iterator(wxStringToStringHashMap_wxImplementation_HashTable.Node node, wxStringToStringHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public iterator(wxStringToStringHashMap_wxImplementation_HashTable.iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((iterator.Internal*) __Instance) = *((iterator.Internal*) _0.__Instance);
            }

            public static wxStringToStringHashMap_wxImplementation_HashTable.iterator operator ++(wxStringToStringHashMap_wxImplementation_HashTable.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxStringToStringHashMap_wxImplementation_HashTable.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToStringHashMap_wxImplementation_HashTable.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToStringHashMap_wxImplementation_HashTable.iterator) wxStringToStringHashMap_wxImplementation_HashTable.iterator.NativeToManagedMap[__ret];
                else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class const_iterator : wxStringToStringHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable14const_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable14const_iteratorC2ENS_8iteratorE")]
                internal static extern void ctor_1(global::System.IntPtr instance, wxStringToStringHashMap_wxImplementation_HashTable.iterator.Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable14const_iteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable14const_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN50wxStringToStringHashMap_wxImplementation_HashTable14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxStringToStringHashMap_wxImplementation_HashTable.iterator i)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(i, null) ? new wxStringToStringHashMap_wxImplementation_HashTable.iterator.Internal() : *(wxStringToStringHashMap_wxImplementation_HashTable.iterator.Internal*) (i.__Instance);
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxStringToStringHashMap_wxImplementation_HashTable.Node node, wxStringToStringHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_iterator(wxStringToStringHashMap_wxImplementation_HashTable.const_iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public static wxStringToStringHashMap_wxImplementation_HashTable.const_iterator operator ++(wxStringToStringHashMap_wxImplementation_HashTable.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxStringToStringHashMap_wxImplementation_HashTable.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToStringHashMap_wxImplementation_HashTable.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToStringHashMap_wxImplementation_HashTable.const_iterator) wxStringToStringHashMap_wxImplementation_HashTable.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.const_iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static new wxStringToStringHashMap_wxImplementation_HashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToStringHashMap_wxImplementation_HashTable(native.ToPointer(), skipVTables);
        }

        public static wxStringToStringHashMap_wxImplementation_HashTable __CreateInstance(wxStringToStringHashMap_wxImplementation_HashTable.Internal native, bool skipVTables = false)
        {
            return new wxStringToStringHashMap_wxImplementation_HashTable(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToStringHashMap_wxImplementation_HashTable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxStringToStringHashMap_wxImplementation_HashTable.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringToStringHashMap_wxImplementation_HashTable(wxStringToStringHashMap_wxImplementation_HashTable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToStringHashMap_wxImplementation_HashTable(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToStringHashMap_wxImplementation_HashTable(uint sz, wxStringHash hfun, wxStringEqual k_eq, wxStringToStringHashMap_wxImplementation_KeyEx k_ex)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(hfun, null))
                throw new global::System.ArgumentNullException("hfun", "Cannot be null because it is a C++ reference (&).");
            var arg1 = hfun.__Instance;
            if (ReferenceEquals(k_eq, null))
                throw new global::System.ArgumentNullException("k_eq", "Cannot be null because it is a C++ reference (&).");
            var arg2 = k_eq.__Instance;
            if (ReferenceEquals(k_ex, null))
                throw new global::System.ArgumentNullException("k_ex", "Cannot be null because it is a C++ reference (&).");
            var arg3 = k_ex.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), sz, arg1, arg2, arg3);
        }

        public wxStringToStringHashMap_wxImplementation_HashTable(wxStringToStringHashMap_wxImplementation_HashTable ht)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxStringHash hash_funct()
        {
            var __ret = Internal.hash_funct_0((__Instance + __PointerAdjustment));
            return wxStringHash.__CreateInstance(__ret);
        }

        public wxStringEqual key_eq()
        {
            var __ret = Internal.key_eq_0((__Instance + __PointerAdjustment));
            return wxStringEqual.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxStringToStringHashMap_wxImplementation_HashTable.iterator end()
        {
            var __ret = Internal.end_1((__Instance + __PointerAdjustment));
            return wxStringToStringHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxStringToStringHashMap_wxImplementation_HashTable.iterator begin()
        {
            var __ret = Internal.begin_1((__Instance + __PointerAdjustment));
            return wxStringToStringHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public uint erase(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected wxStringToStringHashMap_wxImplementation_HashTable.Node GetOrCreateNode(wxStringToStringHashMap_wxImplementation_Pair value, ref bool created)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            fixed (bool* __refParamPtr1 = &created)
            {
                var arg1 = __refParamPtr1;
                var __ret = Internal.GetOrCreateNode_0((__Instance + __PointerAdjustment), arg0, arg1);
                wxStringToStringHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToStringHashMap_wxImplementation_HashTable.Node) wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected wxStringToStringHashMap_wxImplementation_HashTable.Node CreateNode(wxStringToStringHashMap_wxImplementation_Pair value, uint bucket)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            var __ret = Internal.CreateNode_0((__Instance + __PointerAdjustment), arg0, bucket);
            wxStringToStringHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStringToStringHashMap_wxImplementation_HashTable.Node) wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void CreateNode(wxStringToStringHashMap_wxImplementation_Pair value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            Internal.CreateNode_1((__Instance + __PointerAdjustment), arg0);
        }

        protected _wxHashTable_NodeBase GetNodePtr(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNodePtr_0((__Instance + __PointerAdjustment), arg0);
            _wxHashTable_NodeBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[__ret];
            else __result0 = _wxHashTable_NodeBase.__CreateInstance(__ret);
            return __result0;
        }

        protected wxStringToStringHashMap_wxImplementation_HashTable.Node GetNode(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNode_0((__Instance + __PointerAdjustment), arg0);
            wxStringToStringHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStringToStringHashMap_wxImplementation_HashTable.Node) wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void ResizeTable(uint newSize)
        {
            Internal.ResizeTable_0((__Instance + __PointerAdjustment), newSize);
        }

        protected void HashCopy(wxStringToStringHashMap_wxImplementation_HashTable ht)
        {
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.HashCopy_0((__Instance + __PointerAdjustment), arg0);
        }

        protected static void DeleteNode(_wxHashTable_NodeBase node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            Internal.DeleteNode_0(arg0);
        }

        protected static uint GetBucketForNode(wxStringToStringHashMap_wxImplementation_HashTable ht, wxStringToStringHashMap_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
            var arg1 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.GetBucketForNode_0(arg0, arg1);
            return __ret;
        }

        protected static wxStringToStringHashMap_wxImplementation_HashTable.Node CopyNode(wxStringToStringHashMap_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.CopyNode_0(arg0);
            wxStringToStringHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStringToStringHashMap_wxImplementation_HashTable.Node) wxStringToStringHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxStringToStringHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected _wxHashTable_NodeBase m_table
        {
            get
            {
                _wxHashTable_NodeBase __result0;
                if (((Internal*) __Instance)->m_table == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_table))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[((Internal*) __Instance)->m_table];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(((Internal*) __Instance)->m_table);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_table = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected uint m_tableBuckets
        {
            get
            {
                return ((Internal*) __Instance)->m_tableBuckets;
            }

            set
            {
                ((Internal*) __Instance)->m_tableBuckets = value;
            }
        }

        protected uint m_items
        {
            get
            {
                return ((Internal*) __Instance)->m_items;
            }

            set
            {
                ((Internal*) __Instance)->m_items = value;
            }
        }

        protected wxStringHash m_hasher
        {
            get
            {
                return wxStringHash.__CreateInstance(((Internal*) __Instance)->m_hasher);
            }

            set
            {
                ((Internal*) __Instance)->m_hasher = ReferenceEquals(value, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (value.__Instance);
            }
        }

        protected wxStringEqual m_equals
        {
            get
            {
                return wxStringEqual.__CreateInstance(((Internal*) __Instance)->m_equals);
            }

            set
            {
                ((Internal*) __Instance)->m_equals = ReferenceEquals(value, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (value.__Instance);
            }
        }

        protected wxStringToStringHashMap_wxImplementation_KeyEx m_getKey
        {
            get
            {
                return wxStringToStringHashMap_wxImplementation_KeyEx.__CreateInstance(((Internal*) __Instance)->m_getKey);
            }

            set
            {
                ((Internal*) __Instance)->m_getKey = ReferenceEquals(value, null) ? new wxStringToStringHashMap_wxImplementation_KeyEx.Internal() : *(wxStringToStringHashMap_wxImplementation_KeyEx.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxStringToStringHashMap : wxStringToStringHashMap_wxImplementation_HashTable, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxStringToStringHashMap_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToStringHashMapC2Em12wxStringHash13wxStringEqual")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint hint, wxStringHash.Internal hf, wxStringEqual.Internal eq);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToStringHashMapC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToStringHashMapD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToStringHashMap4findERK8wxString")]
            internal static extern wxStringToStringHashMap_wxImplementation_HashTable.iterator.Internal find_1(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToStringHashMap6insertERK45wxStringToStringHashMap_wxImplementation_Pair")]
            internal static extern void insert_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToStringHashMap5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr k);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToStringHashMap5eraseERKN50wxStringToStringHashMap_wxImplementation_HashTable8iteratorE")]
            internal static extern void erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToStringHashMap5countERK8wxString")]
            internal static extern uint count_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringToStringHashMapixERK8wxString")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, global::System.IntPtr key);
        }

        public unsafe partial class Insert_Result : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxStringToStringHashMap_wxImplementation_HashTable.iterator.Internal first;

                [FieldOffset(8)]
                public byte second;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN23wxStringToStringHashMap13Insert_ResultC2ERKN50wxStringToStringHashMap_wxImplementation_HashTable8iteratorERKb")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, bool* s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN23wxStringToStringHashMap13Insert_ResultC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Insert_Result __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Insert_Result(native.ToPointer(), skipVTables);
            }

            public static Insert_Result __CreateInstance(Insert_Result.Internal native, bool skipVTables = false)
            {
                return new Insert_Result(native, skipVTables);
            }

            private static void* __CopyValue(Insert_Result.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(Insert_Result.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Insert_Result(Insert_Result.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Insert_Result(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Insert_Result(wxStringToStringHashMap_wxImplementation_HashTable.iterator f, ref bool s)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(f, null))
                    throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
                var arg0 = f.__Instance;
                fixed (bool* __refParamPtr1 = &s)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }

            public Insert_Result(wxStringToStringHashMap.Insert_Result _0)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Insert_Result.Internal*) __Instance) = *((Insert_Result.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxStringToStringHashMap.Insert_Result __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxStringToStringHashMap_wxImplementation_HashTable.iterator first
            {
                get
                {
                    return wxStringToStringHashMap_wxImplementation_HashTable.iterator.__CreateInstance(((Internal*) __Instance)->first);
                }

                set
                {
                    ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxStringToStringHashMap_wxImplementation_HashTable.iterator.Internal() : *(wxStringToStringHashMap_wxImplementation_HashTable.iterator.Internal*) (value.__Instance);
                }
            }

            public bool second
            {
                get
                {
                    return ((Internal*) __Instance)->second != 0;
                }

                set
                {
                    ((Internal*) __Instance)->second = (byte) (value ? 1 : 0);
                }
            }
        }

        public static new wxStringToStringHashMap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToStringHashMap(native.ToPointer(), skipVTables);
        }

        public static wxStringToStringHashMap __CreateInstance(wxStringToStringHashMap.Internal native, bool skipVTables = false)
        {
            return new wxStringToStringHashMap(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToStringHashMap.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxStringToStringHashMap.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringToStringHashMap(wxStringToStringHashMap.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToStringHashMap(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToStringHashMap(uint hint, wxStringHash hf, wxStringEqual eq)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(hf, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (hf.__Instance);
            var arg2 = ReferenceEquals(eq, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (eq.__Instance);
            Internal.ctor_0((__Instance + __PointerAdjustment), hint, arg1, arg2);
        }

        public wxStringToStringHashMap(wxStringToStringHashMap _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxStringToStringHashMap_wxImplementation_HashTable.iterator find(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.find_1((__Instance + __PointerAdjustment), arg0);
            return wxStringToStringHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxStringToStringHashMap.Insert_Result insert(wxStringToStringHashMap_wxImplementation_Pair v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            var __ret = new wxStringToStringHashMap.Insert_Result.Internal();
            Internal.insert_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxStringToStringHashMap.Insert_Result.__CreateInstance(__ret);
        }

        public uint erase(wxString k)
        {
            if (ReferenceEquals(k, null))
                throw new global::System.ArgumentNullException("k", "Cannot be null because it is a C++ reference (&).");
            var arg0 = k.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void erase(wxStringToStringHashMap_wxImplementation_HashTable.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            Internal.erase_1((__Instance + __PointerAdjustment), arg0);
        }

        public uint count(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.count_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxString this[wxString key]
        {
            get
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var arg0 = key.__Instance;
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), arg0);
                wxString __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxString) wxString.NativeToManagedMap[__ret];
                else __result0 = wxString.__CreateInstance(__ret);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var arg0 = key.__Instance;
                *(wxString.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), key.__Instance) = *(wxString.Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class wxStringToNumHashMap_wxImplementation_Pair : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal first;

            [FieldOffset(20)]
            public uint second;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxStringToNumHashMap_wxImplementation_PairC2ERK8wxStringRKm")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, uint* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxStringToNumHashMap_wxImplementation_PairC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxStringToNumHashMap_wxImplementation_PairD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToNumHashMap_wxImplementation_Pair> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToNumHashMap_wxImplementation_Pair>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringToNumHashMap_wxImplementation_Pair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToNumHashMap_wxImplementation_Pair(native.ToPointer(), skipVTables);
        }

        public static wxStringToNumHashMap_wxImplementation_Pair __CreateInstance(wxStringToNumHashMap_wxImplementation_Pair.Internal native, bool skipVTables = false)
        {
            return new wxStringToNumHashMap_wxImplementation_Pair(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToNumHashMap_wxImplementation_Pair.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            wxStringToNumHashMap_wxImplementation_Pair.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringToNumHashMap_wxImplementation_Pair(wxStringToNumHashMap_wxImplementation_Pair.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToNumHashMap_wxImplementation_Pair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToNumHashMap_wxImplementation_Pair(wxString f, ref uint s)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(f, null))
                throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
            var arg0 = f.__Instance;
            fixed (uint* __refParamPtr1 = &s)
            {
                var arg1 = __refParamPtr1;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }
        }

        public wxStringToNumHashMap_wxImplementation_Pair(wxStringToNumHashMap_wxImplementation_Pair _0)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringToNumHashMap_wxImplementation_Pair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString first
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->first);
            }

            set
            {
                ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        public uint second
        {
            get
            {
                return ((Internal*) __Instance)->second;
            }

            set
            {
                ((Internal*) __Instance)->second = value;
            }
        }
    }

    public unsafe partial class wxStringToNumHashMap_wxImplementation_KeyEx : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN43wxStringToNumHashMap_wxImplementation_KeyExC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN43wxStringToNumHashMap_wxImplementation_KeyExC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToNumHashMap_wxImplementation_KeyEx> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringToNumHashMap_wxImplementation_KeyEx>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringToNumHashMap_wxImplementation_KeyEx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToNumHashMap_wxImplementation_KeyEx(native.ToPointer(), skipVTables);
        }

        public static wxStringToNumHashMap_wxImplementation_KeyEx __CreateInstance(wxStringToNumHashMap_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
        {
            return new wxStringToNumHashMap_wxImplementation_KeyEx(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToNumHashMap_wxImplementation_KeyEx.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxStringToNumHashMap_wxImplementation_KeyEx.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStringToNumHashMap_wxImplementation_KeyEx(wxStringToNumHashMap_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToNumHashMap_wxImplementation_KeyEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToNumHashMap_wxImplementation_KeyEx()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxStringToNumHashMap_wxImplementation_KeyEx(wxStringToNumHashMap_wxImplementation_KeyEx _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxStringToNumHashMap_wxImplementation_KeyEx.Internal*) __Instance) = *((wxStringToNumHashMap_wxImplementation_KeyEx.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringToNumHashMap_wxImplementation_KeyEx __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxStringToNumHashMap_wxImplementation_HashTable : _wxHashTableBase2, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxStringToNumHashMap_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTableC2EmRK12wxStringHashRK13wxStringEqualRK43wxStringToNumHashMap_wxImplementation_KeyEx")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint sz, global::System.IntPtr hfun, global::System.IntPtr k_eq, global::System.IntPtr k_ex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTableC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr ht);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTableD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable10DeleteNodeEP21_wxHashTable_NodeBase")]
            internal static extern void DeleteNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable10hash_functEv")]
            internal static extern wxStringHash.Internal hash_funct_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable6key_eqEv")]
            internal static extern wxStringEqual.Internal key_eq_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxStringToNumHashMap_wxImplementation_HashTable4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxStringToNumHashMap_wxImplementation_HashTable8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxStringToNumHashMap_wxImplementation_HashTable5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable3endEv")]
            internal static extern wxStringToNumHashMap_wxImplementation_HashTable.iterator.Internal end_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable5beginEv")]
            internal static extern wxStringToNumHashMap_wxImplementation_HashTable.iterator.Internal begin_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable16GetBucketForNodeEPS_PNS_4NodeE")]
            internal static extern uint GetBucketForNode_0(global::System.IntPtr ht, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8CopyNodeEPNS_4NodeE")]
            internal static extern global::System.IntPtr CopyNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable15GetOrCreateNodeERK42wxStringToNumHashMap_wxImplementation_PairRb")]
            internal static extern global::System.IntPtr GetOrCreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, bool* created);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable10CreateNodeERK42wxStringToNumHashMap_wxImplementation_Pairm")]
            internal static extern global::System.IntPtr CreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, uint bucket);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable10CreateNodeERK42wxStringToNumHashMap_wxImplementation_Pair")]
            internal static extern void CreateNode_1(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxStringToNumHashMap_wxImplementation_HashTable10GetNodePtrERK8wxString")]
            internal static extern global::System.IntPtr GetNodePtr_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxStringToNumHashMap_wxImplementation_HashTable7GetNodeERK8wxString")]
            internal static extern global::System.IntPtr GetNode_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable11ResizeTableEm")]
            internal static extern void ResizeTable_0(global::System.IntPtr instance, uint newSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8HashCopyERKS_")]
            internal static extern void HashCopy_0(global::System.IntPtr instance, global::System.IntPtr ht);
        }

        public unsafe partial class Node : _wxHashTable_NodeBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 28)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_next;

                [FieldOffset(4)]
                public wxStringToNumHashMap_wxImplementation_Pair.Internal m_value;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable4NodeC2ERK42wxStringToNumHashMap_wxImplementation_Pair")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable4NodeC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable4NodeD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable4Node4nextEv")]
                internal static extern global::System.IntPtr next_0(global::System.IntPtr instance);
            }

            public static new Node __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Node(native.ToPointer(), skipVTables);
            }

            public static Node __CreateInstance(Node.Internal native, bool skipVTables = false)
            {
                return new Node(native, skipVTables);
            }

            private static void* __CopyValue(Node.Internal native)
            {
                var ret = Marshal.AllocHGlobal(28);
                wxStringToNumHashMap_wxImplementation_HashTable.Node.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private Node(Node.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Node(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Node(wxStringToNumHashMap_wxImplementation_Pair value)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var arg0 = value.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public Node(wxStringToNumHashMap_wxImplementation_HashTable.Node _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(28);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            }

            protected override void Dispose(bool disposing)
            {
                _wxHashTable_NodeBase __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxStringToNumHashMap_wxImplementation_HashTable.Node next()
            {
                var __ret = Internal.next_0((__Instance + __PointerAdjustment));
                wxStringToNumHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToNumHashMap_wxImplementation_HashTable.Node) wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            public wxStringToNumHashMap_wxImplementation_Pair m_value
            {
                get
                {
                    return wxStringToNumHashMap_wxImplementation_Pair.__CreateInstance(((Internal*) __Instance)->m_value);
                }

                set
                {
                    ((Internal*) __Instance)->m_value = ReferenceEquals(value, null) ? new wxStringToNumHashMap_wxImplementation_Pair.Internal() : *(wxStringToNumHashMap_wxImplementation_Pair.Internal*) (value.__Instance);
                }
            }
        }

        public unsafe partial class Iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8IteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8IteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8IteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK47wxStringToNumHashMap_wxImplementation_HashTable8IteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK47wxStringToNumHashMap_wxImplementation_HashTable8IteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8Iterator11GetNextNodeEv")]
                internal static extern global::System.IntPtr GetNextNode_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8Iterator8PlusPlusEv")]
                internal static extern void PlusPlus_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Iterator(native.ToPointer(), skipVTables);
            }

            public static Iterator __CreateInstance(Iterator.Internal native, bool skipVTables = false)
            {
                return new Iterator(native, skipVTables);
            }

            private static void* __CopyValue(Iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(Iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Iterator(Iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public Iterator(wxStringToNumHashMap_wxImplementation_HashTable.Node node, wxStringToNumHashMap_wxImplementation_HashTable ht)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public Iterator(wxStringToNumHashMap_wxImplementation_HashTable.Iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Iterator.Internal*) __Instance) = *((Iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxStringToNumHashMap_wxImplementation_HashTable.Iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static bool operator ==(wxStringToNumHashMap_wxImplementation_HashTable.Iterator __op, wxStringToNumHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as Iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(wxStringToNumHashMap_wxImplementation_HashTable.Iterator __op, wxStringToNumHashMap_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            protected wxStringToNumHashMap_wxImplementation_HashTable.Node GetNextNode()
            {
                var __ret = Internal.GetNextNode_0((__Instance + __PointerAdjustment));
                wxStringToNumHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToNumHashMap_wxImplementation_HashTable.Node) wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            protected void PlusPlus()
            {
                Internal.PlusPlus_0((__Instance + __PointerAdjustment));
            }

            public wxStringToNumHashMap_wxImplementation_HashTable.Node m_node
            {
                get
                {
                    wxStringToNumHashMap_wxImplementation_HashTable.Node __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxStringToNumHashMap_wxImplementation_HashTable.Node) wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.Node.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxStringToNumHashMap_wxImplementation_HashTable m_ht
            {
                get
                {
                    wxStringToNumHashMap_wxImplementation_HashTable __result0;
                    if (((Internal*) __Instance)->m_ht == IntPtr.Zero) __result0 = null;
                    else if (wxStringToNumHashMap_wxImplementation_HashTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_ht))
                        __result0 = (wxStringToNumHashMap_wxImplementation_HashTable) wxStringToNumHashMap_wxImplementation_HashTable.NativeToManagedMap[((Internal*) __Instance)->m_ht];
                    else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.__CreateInstance(((Internal*) __Instance)->m_ht);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_ht = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class iterator : wxStringToNumHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8iteratorC2EPNS_4NodeEPS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public iterator(wxStringToNumHashMap_wxImplementation_HashTable.Node node, wxStringToNumHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public iterator(wxStringToNumHashMap_wxImplementation_HashTable.iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((iterator.Internal*) __Instance) = *((iterator.Internal*) _0.__Instance);
            }

            public static wxStringToNumHashMap_wxImplementation_HashTable.iterator operator ++(wxStringToNumHashMap_wxImplementation_HashTable.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxStringToNumHashMap_wxImplementation_HashTable.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToNumHashMap_wxImplementation_HashTable.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToNumHashMap_wxImplementation_HashTable.iterator) wxStringToNumHashMap_wxImplementation_HashTable.iterator.NativeToManagedMap[__ret];
                else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class const_iterator : wxStringToNumHashMap_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable14const_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable14const_iteratorC2ENS_8iteratorE")]
                internal static extern void ctor_1(global::System.IntPtr instance, wxStringToNumHashMap_wxImplementation_HashTable.iterator.Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable14const_iteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable14const_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxStringToNumHashMap_wxImplementation_HashTable14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxStringToNumHashMap_wxImplementation_HashTable.iterator i)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(i, null) ? new wxStringToNumHashMap_wxImplementation_HashTable.iterator.Internal() : *(wxStringToNumHashMap_wxImplementation_HashTable.iterator.Internal*) (i.__Instance);
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxStringToNumHashMap_wxImplementation_HashTable.Node node, wxStringToNumHashMap_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_iterator(wxStringToNumHashMap_wxImplementation_HashTable.const_iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public static wxStringToNumHashMap_wxImplementation_HashTable.const_iterator operator ++(wxStringToNumHashMap_wxImplementation_HashTable.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxStringToNumHashMap_wxImplementation_HashTable.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToNumHashMap_wxImplementation_HashTable.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToNumHashMap_wxImplementation_HashTable.const_iterator) wxStringToNumHashMap_wxImplementation_HashTable.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.const_iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static new wxStringToNumHashMap_wxImplementation_HashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToNumHashMap_wxImplementation_HashTable(native.ToPointer(), skipVTables);
        }

        public static wxStringToNumHashMap_wxImplementation_HashTable __CreateInstance(wxStringToNumHashMap_wxImplementation_HashTable.Internal native, bool skipVTables = false)
        {
            return new wxStringToNumHashMap_wxImplementation_HashTable(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToNumHashMap_wxImplementation_HashTable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxStringToNumHashMap_wxImplementation_HashTable.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringToNumHashMap_wxImplementation_HashTable(wxStringToNumHashMap_wxImplementation_HashTable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToNumHashMap_wxImplementation_HashTable(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToNumHashMap_wxImplementation_HashTable(uint sz, wxStringHash hfun, wxStringEqual k_eq, wxStringToNumHashMap_wxImplementation_KeyEx k_ex)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(hfun, null))
                throw new global::System.ArgumentNullException("hfun", "Cannot be null because it is a C++ reference (&).");
            var arg1 = hfun.__Instance;
            if (ReferenceEquals(k_eq, null))
                throw new global::System.ArgumentNullException("k_eq", "Cannot be null because it is a C++ reference (&).");
            var arg2 = k_eq.__Instance;
            if (ReferenceEquals(k_ex, null))
                throw new global::System.ArgumentNullException("k_ex", "Cannot be null because it is a C++ reference (&).");
            var arg3 = k_ex.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), sz, arg1, arg2, arg3);
        }

        public wxStringToNumHashMap_wxImplementation_HashTable(wxStringToNumHashMap_wxImplementation_HashTable ht)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxStringHash hash_funct()
        {
            var __ret = Internal.hash_funct_0((__Instance + __PointerAdjustment));
            return wxStringHash.__CreateInstance(__ret);
        }

        public wxStringEqual key_eq()
        {
            var __ret = Internal.key_eq_0((__Instance + __PointerAdjustment));
            return wxStringEqual.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxStringToNumHashMap_wxImplementation_HashTable.iterator end()
        {
            var __ret = Internal.end_1((__Instance + __PointerAdjustment));
            return wxStringToNumHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxStringToNumHashMap_wxImplementation_HashTable.iterator begin()
        {
            var __ret = Internal.begin_1((__Instance + __PointerAdjustment));
            return wxStringToNumHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public uint erase(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected wxStringToNumHashMap_wxImplementation_HashTable.Node GetOrCreateNode(wxStringToNumHashMap_wxImplementation_Pair value, ref bool created)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            fixed (bool* __refParamPtr1 = &created)
            {
                var arg1 = __refParamPtr1;
                var __ret = Internal.GetOrCreateNode_0((__Instance + __PointerAdjustment), arg0, arg1);
                wxStringToNumHashMap_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxStringToNumHashMap_wxImplementation_HashTable.Node) wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected wxStringToNumHashMap_wxImplementation_HashTable.Node CreateNode(wxStringToNumHashMap_wxImplementation_Pair value, uint bucket)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            var __ret = Internal.CreateNode_0((__Instance + __PointerAdjustment), arg0, bucket);
            wxStringToNumHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStringToNumHashMap_wxImplementation_HashTable.Node) wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void CreateNode(wxStringToNumHashMap_wxImplementation_Pair value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            Internal.CreateNode_1((__Instance + __PointerAdjustment), arg0);
        }

        protected _wxHashTable_NodeBase GetNodePtr(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNodePtr_0((__Instance + __PointerAdjustment), arg0);
            _wxHashTable_NodeBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[__ret];
            else __result0 = _wxHashTable_NodeBase.__CreateInstance(__ret);
            return __result0;
        }

        protected wxStringToNumHashMap_wxImplementation_HashTable.Node GetNode(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.GetNode_0((__Instance + __PointerAdjustment), arg0);
            wxStringToNumHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStringToNumHashMap_wxImplementation_HashTable.Node) wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void ResizeTable(uint newSize)
        {
            Internal.ResizeTable_0((__Instance + __PointerAdjustment), newSize);
        }

        protected void HashCopy(wxStringToNumHashMap_wxImplementation_HashTable ht)
        {
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.HashCopy_0((__Instance + __PointerAdjustment), arg0);
        }

        protected static void DeleteNode(_wxHashTable_NodeBase node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            Internal.DeleteNode_0(arg0);
        }

        protected static uint GetBucketForNode(wxStringToNumHashMap_wxImplementation_HashTable ht, wxStringToNumHashMap_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
            var arg1 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.GetBucketForNode_0(arg0, arg1);
            return __ret;
        }

        protected static wxStringToNumHashMap_wxImplementation_HashTable.Node CopyNode(wxStringToNumHashMap_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.CopyNode_0(arg0);
            wxStringToNumHashMap_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStringToNumHashMap_wxImplementation_HashTable.Node) wxStringToNumHashMap_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxStringToNumHashMap_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected _wxHashTable_NodeBase m_table
        {
            get
            {
                _wxHashTable_NodeBase __result0;
                if (((Internal*) __Instance)->m_table == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_table))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[((Internal*) __Instance)->m_table];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(((Internal*) __Instance)->m_table);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_table = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected uint m_tableBuckets
        {
            get
            {
                return ((Internal*) __Instance)->m_tableBuckets;
            }

            set
            {
                ((Internal*) __Instance)->m_tableBuckets = value;
            }
        }

        protected uint m_items
        {
            get
            {
                return ((Internal*) __Instance)->m_items;
            }

            set
            {
                ((Internal*) __Instance)->m_items = value;
            }
        }

        protected wxStringHash m_hasher
        {
            get
            {
                return wxStringHash.__CreateInstance(((Internal*) __Instance)->m_hasher);
            }

            set
            {
                ((Internal*) __Instance)->m_hasher = ReferenceEquals(value, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (value.__Instance);
            }
        }

        protected wxStringEqual m_equals
        {
            get
            {
                return wxStringEqual.__CreateInstance(((Internal*) __Instance)->m_equals);
            }

            set
            {
                ((Internal*) __Instance)->m_equals = ReferenceEquals(value, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (value.__Instance);
            }
        }

        protected wxStringToNumHashMap_wxImplementation_KeyEx m_getKey
        {
            get
            {
                return wxStringToNumHashMap_wxImplementation_KeyEx.__CreateInstance(((Internal*) __Instance)->m_getKey);
            }

            set
            {
                ((Internal*) __Instance)->m_getKey = ReferenceEquals(value, null) ? new wxStringToNumHashMap_wxImplementation_KeyEx.Internal() : *(wxStringToNumHashMap_wxImplementation_KeyEx.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxStringToNumHashMap : wxStringToNumHashMap_wxImplementation_HashTable, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxStringHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxStringEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxStringToNumHashMap_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxStringToNumHashMapC2Em12wxStringHash13wxStringEqual")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint hint, wxStringHash.Internal hf, wxStringEqual.Internal eq);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxStringToNumHashMapC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxStringToNumHashMapD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxStringToNumHashMap4findERK8wxString")]
            internal static extern wxStringToNumHashMap_wxImplementation_HashTable.iterator.Internal find_1(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxStringToNumHashMap6insertERK42wxStringToNumHashMap_wxImplementation_Pair")]
            internal static extern void insert_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxStringToNumHashMap5eraseERK8wxString")]
            internal static extern uint erase_0(global::System.IntPtr instance, global::System.IntPtr k);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxStringToNumHashMap5eraseERKN47wxStringToNumHashMap_wxImplementation_HashTable8iteratorE")]
            internal static extern void erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxStringToNumHashMap5countERK8wxString")]
            internal static extern uint count_0(global::System.IntPtr instance, global::System.IntPtr key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxStringToNumHashMapixERK8wxString")]
            internal static extern uint* OperatorSubscript_0(global::System.IntPtr instance, global::System.IntPtr key);
        }

        public unsafe partial class Insert_Result : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxStringToNumHashMap_wxImplementation_HashTable.iterator.Internal first;

                [FieldOffset(8)]
                public byte second;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN20wxStringToNumHashMap13Insert_ResultC2ERKN47wxStringToNumHashMap_wxImplementation_HashTable8iteratorERKb")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, bool* s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN20wxStringToNumHashMap13Insert_ResultC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Insert_Result __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Insert_Result(native.ToPointer(), skipVTables);
            }

            public static Insert_Result __CreateInstance(Insert_Result.Internal native, bool skipVTables = false)
            {
                return new Insert_Result(native, skipVTables);
            }

            private static void* __CopyValue(Insert_Result.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(Insert_Result.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Insert_Result(Insert_Result.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Insert_Result(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Insert_Result(wxStringToNumHashMap_wxImplementation_HashTable.iterator f, ref bool s)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(f, null))
                    throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
                var arg0 = f.__Instance;
                fixed (bool* __refParamPtr1 = &s)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }

            public Insert_Result(wxStringToNumHashMap.Insert_Result _0)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Insert_Result.Internal*) __Instance) = *((Insert_Result.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxStringToNumHashMap.Insert_Result __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxStringToNumHashMap_wxImplementation_HashTable.iterator first
            {
                get
                {
                    return wxStringToNumHashMap_wxImplementation_HashTable.iterator.__CreateInstance(((Internal*) __Instance)->first);
                }

                set
                {
                    ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxStringToNumHashMap_wxImplementation_HashTable.iterator.Internal() : *(wxStringToNumHashMap_wxImplementation_HashTable.iterator.Internal*) (value.__Instance);
                }
            }

            public bool second
            {
                get
                {
                    return ((Internal*) __Instance)->second != 0;
                }

                set
                {
                    ((Internal*) __Instance)->second = (byte) (value ? 1 : 0);
                }
            }
        }

        public static new wxStringToNumHashMap __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringToNumHashMap(native.ToPointer(), skipVTables);
        }

        public static wxStringToNumHashMap __CreateInstance(wxStringToNumHashMap.Internal native, bool skipVTables = false)
        {
            return new wxStringToNumHashMap(native, skipVTables);
        }

        private static void* __CopyValue(wxStringToNumHashMap.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxStringToNumHashMap.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStringToNumHashMap(wxStringToNumHashMap.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringToNumHashMap(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringToNumHashMap(uint hint, wxStringHash hf, wxStringEqual eq)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(hf, null) ? new wxStringHash.Internal() : *(wxStringHash.Internal*) (hf.__Instance);
            var arg2 = ReferenceEquals(eq, null) ? new wxStringEqual.Internal() : *(wxStringEqual.Internal*) (eq.__Instance);
            Internal.ctor_0((__Instance + __PointerAdjustment), hint, arg1, arg2);
        }

        public wxStringToNumHashMap(wxStringToNumHashMap _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxStringToNumHashMap_wxImplementation_HashTable.iterator find(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.find_1((__Instance + __PointerAdjustment), arg0);
            return wxStringToNumHashMap_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxStringToNumHashMap.Insert_Result insert(wxStringToNumHashMap_wxImplementation_Pair v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            var __ret = new wxStringToNumHashMap.Insert_Result.Internal();
            Internal.insert_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxStringToNumHashMap.Insert_Result.__CreateInstance(__ret);
        }

        public uint erase(wxString k)
        {
            if (ReferenceEquals(k, null))
                throw new global::System.ArgumentNullException("k", "Cannot be null because it is a C++ reference (&).");
            var arg0 = k.__Instance;
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void erase(wxStringToNumHashMap_wxImplementation_HashTable.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            Internal.erase_1((__Instance + __PointerAdjustment), arg0);
        }

        public uint count(wxString key)
        {
            if (ReferenceEquals(key, null))
                throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
            var arg0 = key.__Instance;
            var __ret = Internal.count_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public uint this[wxString key]
        {
            get
            {
                if (ReferenceEquals(key, null))
                    throw new global::System.ArgumentNullException("key", "Cannot be null because it is a C++ reference (&).");
                var arg0 = key.__Instance;
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), arg0);
                return *__ret;
            }

            set
            {
                *Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), key) = value;
            }
        }
    }

    public unsafe partial class hashmap
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z10never_growmm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool never_grow_0(uint _0, uint _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z12never_shrinkmm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool never_shrink_0(uint _0, uint _1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z9grow_lf70mm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool grow_lf70_0(uint buckets, uint items);
        }

        public static bool never_grow(uint _0, uint _1)
        {
            var __ret = Internal.never_grow_0(_0, _1);
            return __ret;
        }

        public static bool never_shrink(uint _0, uint _1)
        {
            var __ret = Internal.never_shrink_0(_0, _1);
            return __ret;
        }

        public static bool grow_lf70(uint buckets, uint items)
        {
            var __ret = Internal.grow_lf70_0(buckets, items);
            return __ret;
        }
    }
}
