//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum wxImageResizeQuality : uint
    {
        wxIMAGE_QUALITY_NEAREST = 0,
        wxIMAGE_QUALITY_BILINEAR = 1,
        wxIMAGE_QUALITY_BICUBIC = 2,
        wxIMAGE_QUALITY_BOX_AVERAGE = 3,
        wxIMAGE_QUALITY_NORMAL = 0,
        wxIMAGE_QUALITY_HIGH = 4
    }

    public enum wxImageResolution : uint
    {
        wxIMAGE_RESOLUTION_NONE = 0,
        wxIMAGE_RESOLUTION_INCHES = 1,
        wxIMAGE_RESOLUTION_CM = 2
    }

    public unsafe abstract partial class wxImageHandler : wxObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 92)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public wxString.Internal m_name;

            [FieldOffset(28)]
            public wxString.Internal m_extension;

            [FieldOffset(48)]
            public wxArrayString.Internal m_altExtensions;

            [FieldOffset(68)]
            public wxString.Internal m_mime;

            [FieldOffset(88)]
            public wxBitmapType m_type;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandlerC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandlerC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandlerD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler13GetImageCountER13wxInputStream")]
            internal static extern int GetImageCount_0(global::System.IntPtr instance, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler7CanReadER13wxInputStream")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CanRead_0(global::System.IntPtr instance, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler7CanReadERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CanRead_1(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler7SetNameERK8wxString")]
            internal static extern void SetName_0(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler12SetExtensionERK8wxString")]
            internal static extern void SetExtension_0(global::System.IntPtr instance, global::System.IntPtr ext);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler16SetAltExtensionsERK13wxArrayString")]
            internal static extern void SetAltExtensions_0(global::System.IntPtr instance, global::System.IntPtr exts);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler7SetTypeE12wxBitmapType")]
            internal static extern void SetType_0(global::System.IntPtr instance, wxBitmapType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler11SetMimeTypeERK8wxString")]
            internal static extern void SetMimeType_0(global::System.IntPtr instance, global::System.IntPtr type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxImageHandler7GetNameEv")]
            internal static extern global::System.IntPtr GetName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxImageHandler12GetExtensionEv")]
            internal static extern global::System.IntPtr GetExtension_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxImageHandler16GetAltExtensionsEv")]
            internal static extern global::System.IntPtr GetAltExtensions_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxImageHandler7GetTypeEv")]
            internal static extern wxBitmapType GetType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxImageHandler11GetMimeTypeEv")]
            internal static extern global::System.IntPtr GetMimeType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler13CallDoCanReadER13wxInputStream")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CallDoCanRead_0(global::System.IntPtr instance, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxImageHandler24GetResolutionFromOptionsERK7wxImagePiS3_")]
            internal static extern wxImageResolution GetResolutionFromOptions_0(global::System.IntPtr image, int* x, int* y);
        }

        public static new wxImageHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxImageHandlerInternal(native.ToPointer(), skipVTables);
        }

        public static wxImageHandler __CreateInstance(wxImageHandler.Internal native, bool skipVTables = false)
        {
            return new wxImageHandlerInternal(native, skipVTables);
        }

        protected wxImageHandler(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxImageHandler()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(92);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxImageHandler");
        }

        protected wxImageHandler(wxImageHandler _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(92);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxImageHandler");
        }

        protected override void Dispose(bool disposing)
        {
            wxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public virtual bool LoadFile(wxImage _0, wxInputStream _1, bool _2, int _3)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___LoadFile_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool_int));
            var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            if (ReferenceEquals(_1, null))
                throw new global::System.ArgumentNullException("_1", "Cannot be null because it is a C++ reference (&).");
            var arg1 = _1.__Instance;
            var __ret = ___LoadFile_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, _2, _3);
            return __ret;
        }

        public virtual bool SaveFile(wxImage _0, wxOutputStream _1, bool _2)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___SaveFile_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool));
            var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            if (ReferenceEquals(_1, null))
                throw new global::System.ArgumentNullException("_1", "Cannot be null because it is a C++ reference (&).");
            var arg1 = _1.__Instance;
            var __ret = ___SaveFile_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, _2);
            return __ret;
        }

        public int GetImageCount(wxInputStream stream)
        {
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var __ret = Internal.GetImageCount_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool CanRead(wxInputStream stream)
        {
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var __ret = Internal.CanRead_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool CanRead(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = Internal.CanRead_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void SetName(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            Internal.SetName_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetExtension(wxString ext)
        {
            if (ReferenceEquals(ext, null))
                throw new global::System.ArgumentNullException("ext", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ext.__Instance;
            Internal.SetExtension_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetAltExtensions(wxArrayString exts)
        {
            if (ReferenceEquals(exts, null))
                throw new global::System.ArgumentNullException("exts", "Cannot be null because it is a C++ reference (&).");
            var arg0 = exts.__Instance;
            Internal.SetAltExtensions_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetType(wxBitmapType type)
        {
            var arg0 = type;
            Internal.SetType_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetMimeType(wxString type)
        {
            if (ReferenceEquals(type, null))
                throw new global::System.ArgumentNullException("type", "Cannot be null because it is a C++ reference (&).");
            var arg0 = type.__Instance;
            Internal.SetMimeType_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxString GetName()
        {
            var __ret = Internal.GetName_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString GetExtension()
        {
            var __ret = Internal.GetExtension_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxArrayString GetAltExtensions()
        {
            var __ret = Internal.GetAltExtensions_0((__Instance + __PointerAdjustment));
            wxArrayString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxArrayString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxArrayString) wxArrayString.NativeToManagedMap[__ret];
            else __result0 = wxArrayString.__CreateInstance(__ret);
            return __result0;
        }

        public wxBitmapType GetType()
        {
            var __ret = Internal.GetType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString GetMimeType()
        {
            var __ret = Internal.GetMimeType_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        protected virtual int DoGetImageCount(wxInputStream _0)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___DoGetImageCount_0Delegate = (Delegates.Func_int_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_int_IntPtr_IntPtr));
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            var __ret = ___DoGetImageCount_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected abstract bool DoCanRead(wxInputStream stream);

        protected bool CallDoCanRead(wxInputStream stream)
        {
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var __ret = Internal.CallDoCanRead_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        protected static wxImageResolution GetResolutionFromOptions(wxImage image, ref int x, ref int y)
        {
            if (ReferenceEquals(image, null))
                throw new global::System.ArgumentNullException("image", "Cannot be null because it is a C++ reference (&).");
            var arg0 = image.__Instance;
            fixed (int* __refParamPtr1 = &x)
            {
                var arg1 = __refParamPtr1;
                fixed (int* __refParamPtr2 = &y)
                {
                    var arg2 = __refParamPtr2;
                    var __ret = Internal.GetResolutionFromOptions_0(arg0, arg1, arg2);
                    return __ret;
                }
            }
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN14wxImageHandler12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected wxString m_name
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_name);
            }

            set
            {
                ((Internal*) __Instance)->m_name = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        protected wxString m_extension
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_extension);
            }

            set
            {
                ((Internal*) __Instance)->m_extension = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        protected wxArrayString m_altExtensions
        {
            get
            {
                return wxArrayString.__CreateInstance(((Internal*) __Instance)->m_altExtensions);
            }

            set
            {
                ((Internal*) __Instance)->m_altExtensions = ReferenceEquals(value, null) ? new wxArrayString.Internal() : *(wxArrayString.Internal*) (value.__Instance);
            }
        }

        protected wxString m_mime
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_mime);
            }

            set
            {
                ((Internal*) __Instance)->m_mime = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        protected wxBitmapType m_type
        {
            get
            {
                return ((Internal*) __Instance)->m_type;
            }

            set
            {
                ((Internal*) __Instance)->m_type = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImageHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxImageHandler
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImageHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImageHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImageHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool LoadFile( wxImage *WXUNUSED(image), wxInputStream& WXUNUSED(stream), bool WXUNUSED(verbose)=true, int WXUNUSED(index)=-1 )
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool_int _LoadFile_0DelegateInstance;

        private static bool _LoadFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0, global::System.IntPtr _1, bool _2, int _3)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImageHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxImage __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxImage.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxImage) wxImage.NativeToManagedMap[_0];
            else __result0 = (wxImage) wxImage.__CreateInstance(_0, skipVTables: true);
            wxInputStream __result1;
            if (_1 == IntPtr.Zero) __result1 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(_1))
                __result1 = (wxInputStream) wxInputStream.NativeToManagedMap[_1];
            else __result1 = (wxInputStream) wxInputStream.__CreateInstance(_1, skipVTables: true);
            var __ret = __target.LoadFile(__result0, __result1, _2, _3);
            return __ret;
        }

        // bool SaveFile( wxImage *WXUNUSED(image), wxOutputStream& WXUNUSED(stream), bool WXUNUSED(verbose)=true )
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _SaveFile_0DelegateInstance;

        private static bool _SaveFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0, global::System.IntPtr _1, bool _2)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImageHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxImage __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxImage.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxImage) wxImage.NativeToManagedMap[_0];
            else __result0 = (wxImage) wxImage.__CreateInstance(_0, skipVTables: true);
            wxOutputStream __result1;
            if (_1 == IntPtr.Zero) __result1 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(_1))
                __result1 = (wxOutputStream) wxOutputStream.NativeToManagedMap[_1];
            else __result1 = (wxOutputStream) wxOutputStream.__CreateInstance(_1, skipVTables: true);
            var __ret = __target.SaveFile(__result0, __result1, _2);
            return __ret;
        }

        // int DoGetImageCount( wxInputStream& WXUNUSED(stream) )
        private static Delegates.Func_int_IntPtr_IntPtr _DoGetImageCount_0DelegateInstance;

        private static int _DoGetImageCount_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImageHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[_0];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(_0, skipVTables: true);
            var __ret = __target.DoGetImageCount(__result0);
            return __ret;
        }

        // bool DoCanRead( wxInputStream& stream ) = 0
        private static Delegates.Func_bool_IntPtr_IntPtr _DoCanRead_0DelegateInstance;

        private static bool _DoCanRead_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImageHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.DoCanRead(__result0);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[8];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _LoadFile_0DelegateInstance += _LoadFile_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_LoadFile_0DelegateInstance).ToPointer();
                _SaveFile_0DelegateInstance += _SaveFile_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SaveFile_0DelegateInstance).ToPointer();
                _DoGetImageCount_0DelegateInstance += _DoGetImageCount_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_DoGetImageCount_0DelegateInstance).ToPointer();
                _DoCanRead_0DelegateInstance += _DoCanRead_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_DoCanRead_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(11 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(11 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxImageHistogramEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint index;

            [FieldOffset(4)]
            public uint value;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxImageHistogramEntryC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxImageHistogramEntryC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxImageHistogramEntry> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxImageHistogramEntry>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxImageHistogramEntry __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxImageHistogramEntry(native.ToPointer(), skipVTables);
        }

        public static wxImageHistogramEntry __CreateInstance(wxImageHistogramEntry.Internal native, bool skipVTables = false)
        {
            return new wxImageHistogramEntry(native, skipVTables);
        }

        private static void* __CopyValue(wxImageHistogramEntry.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxImageHistogramEntry.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxImageHistogramEntry(wxImageHistogramEntry.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxImageHistogramEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxImageHistogramEntry()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxImageHistogramEntry(wxImageHistogramEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxImageHistogramEntry.Internal*) __Instance) = *((wxImageHistogramEntry.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxImageHistogramEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint index
        {
            get
            {
                return ((Internal*) __Instance)->index;
            }

            set
            {
                ((Internal*) __Instance)->index = value;
            }
        }

        public uint value
        {
            get
            {
                return ((Internal*) __Instance)->value;
            }

            set
            {
                ((Internal*) __Instance)->value = value;
            }
        }
    }

    public unsafe partial class wxImageHistogramBase_wxImplementation_Pair : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public uint first;

            [FieldOffset(4)]
            public wxImageHistogramEntry.Internal second;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxImageHistogramBase_wxImplementation_PairC2ERKmRK21wxImageHistogramEntry")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint* f, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN42wxImageHistogramBase_wxImplementation_PairC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxImageHistogramBase_wxImplementation_Pair> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxImageHistogramBase_wxImplementation_Pair>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxImageHistogramBase_wxImplementation_Pair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxImageHistogramBase_wxImplementation_Pair(native.ToPointer(), skipVTables);
        }

        public static wxImageHistogramBase_wxImplementation_Pair __CreateInstance(wxImageHistogramBase_wxImplementation_Pair.Internal native, bool skipVTables = false)
        {
            return new wxImageHistogramBase_wxImplementation_Pair(native, skipVTables);
        }

        private static void* __CopyValue(wxImageHistogramBase_wxImplementation_Pair.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            *(wxImageHistogramBase_wxImplementation_Pair.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxImageHistogramBase_wxImplementation_Pair(wxImageHistogramBase_wxImplementation_Pair.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxImageHistogramBase_wxImplementation_Pair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxImageHistogramBase_wxImplementation_Pair(ref uint f, wxImageHistogramEntry s)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            fixed (uint* __refParamPtr0 = &f)
            {
                var arg0 = __refParamPtr0;
                if (ReferenceEquals(s, null))
                    throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
                var arg1 = s.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            }
        }

        public wxImageHistogramBase_wxImplementation_Pair(wxImageHistogramBase_wxImplementation_Pair _0)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxImageHistogramBase_wxImplementation_Pair.Internal*) __Instance) = *((wxImageHistogramBase_wxImplementation_Pair.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxImageHistogramBase_wxImplementation_Pair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint first
        {
            get
            {
                return ((Internal*) __Instance)->first;
            }

            set
            {
                ((Internal*) __Instance)->first = value;
            }
        }

        public wxImageHistogramEntry second
        {
            get
            {
                return wxImageHistogramEntry.__CreateInstance(((Internal*) __Instance)->second);
            }

            set
            {
                ((Internal*) __Instance)->second = ReferenceEquals(value, null) ? new wxImageHistogramEntry.Internal() : *(wxImageHistogramEntry.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxImageHistogramBase_wxImplementation_KeyEx : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN43wxImageHistogramBase_wxImplementation_KeyExC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN43wxImageHistogramBase_wxImplementation_KeyExC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxImageHistogramBase_wxImplementation_KeyEx> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxImageHistogramBase_wxImplementation_KeyEx>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxImageHistogramBase_wxImplementation_KeyEx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxImageHistogramBase_wxImplementation_KeyEx(native.ToPointer(), skipVTables);
        }

        public static wxImageHistogramBase_wxImplementation_KeyEx __CreateInstance(wxImageHistogramBase_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
        {
            return new wxImageHistogramBase_wxImplementation_KeyEx(native, skipVTables);
        }

        private static void* __CopyValue(wxImageHistogramBase_wxImplementation_KeyEx.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxImageHistogramBase_wxImplementation_KeyEx.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxImageHistogramBase_wxImplementation_KeyEx(wxImageHistogramBase_wxImplementation_KeyEx.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxImageHistogramBase_wxImplementation_KeyEx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxImageHistogramBase_wxImplementation_KeyEx()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxImageHistogramBase_wxImplementation_KeyEx(wxImageHistogramBase_wxImplementation_KeyEx _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxImageHistogramBase_wxImplementation_KeyEx.Internal*) __Instance) = *((wxImageHistogramBase_wxImplementation_KeyEx.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxImageHistogramBase_wxImplementation_KeyEx __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxImageHistogramBase_wxImplementation_HashTable : _wxHashTableBase2, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxIntegerHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxIntegerEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxImageHistogramBase_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTableC2EmRK13wxIntegerHashRK14wxIntegerEqualRK43wxImageHistogramBase_wxImplementation_KeyEx")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint sz, global::System.IntPtr hfun, global::System.IntPtr k_eq, global::System.IntPtr k_ex);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTableC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr ht);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTableD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable10DeleteNodeEP21_wxHashTable_NodeBase")]
            internal static extern void DeleteNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable10hash_functEv")]
            internal static extern wxIntegerHash.Internal hash_funct_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable6key_eqEv")]
            internal static extern wxIntegerEqual.Internal key_eq_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxImageHistogramBase_wxImplementation_HashTable4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxImageHistogramBase_wxImplementation_HashTable8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxImageHistogramBase_wxImplementation_HashTable5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable3endEv")]
            internal static extern wxImageHistogramBase_wxImplementation_HashTable.iterator.Internal end_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable5beginEv")]
            internal static extern wxImageHistogramBase_wxImplementation_HashTable.iterator.Internal begin_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable5eraseERKm")]
            internal static extern uint erase_0(global::System.IntPtr instance, uint* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable16GetBucketForNodeEPS_PNS_4NodeE")]
            internal static extern uint GetBucketForNode_0(global::System.IntPtr ht, global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8CopyNodeEPNS_4NodeE")]
            internal static extern global::System.IntPtr CopyNode_0(global::System.IntPtr node);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable15GetOrCreateNodeERK42wxImageHistogramBase_wxImplementation_PairRb")]
            internal static extern global::System.IntPtr GetOrCreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, bool* created);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable10CreateNodeERK42wxImageHistogramBase_wxImplementation_Pairm")]
            internal static extern global::System.IntPtr CreateNode_0(global::System.IntPtr instance, global::System.IntPtr value, uint bucket);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable10CreateNodeERK42wxImageHistogramBase_wxImplementation_Pair")]
            internal static extern void CreateNode_1(global::System.IntPtr instance, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxImageHistogramBase_wxImplementation_HashTable10GetNodePtrERKm")]
            internal static extern global::System.IntPtr GetNodePtr_0(global::System.IntPtr instance, uint* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK47wxImageHistogramBase_wxImplementation_HashTable7GetNodeERKm")]
            internal static extern global::System.IntPtr GetNode_0(global::System.IntPtr instance, uint* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable11ResizeTableEm")]
            internal static extern void ResizeTable_0(global::System.IntPtr instance, uint newSize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8HashCopyERKS_")]
            internal static extern void HashCopy_0(global::System.IntPtr instance, global::System.IntPtr ht);
        }

        public unsafe partial class Node : _wxHashTable_NodeBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_next;

                [FieldOffset(4)]
                public wxImageHistogramBase_wxImplementation_Pair.Internal m_value;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable4NodeC2ERK42wxImageHistogramBase_wxImplementation_Pair")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr value);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable4NodeC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable4Node4nextEv")]
                internal static extern global::System.IntPtr next_0(global::System.IntPtr instance);
            }

            public static new Node __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Node(native.ToPointer(), skipVTables);
            }

            public static Node __CreateInstance(Node.Internal native, bool skipVTables = false)
            {
                return new Node(native, skipVTables);
            }

            private static void* __CopyValue(Node.Internal native)
            {
                var ret = Marshal.AllocHGlobal(16);
                *(Node.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Node(Node.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Node(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Node(wxImageHistogramBase_wxImplementation_Pair value)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(16);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var arg0 = value.__Instance;
                Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public Node(wxImageHistogramBase_wxImplementation_HashTable.Node _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(16);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Node.Internal*) __Instance) = *((Node.Internal*) _0.__Instance);
            }

            public wxImageHistogramBase_wxImplementation_HashTable.Node next()
            {
                var __ret = Internal.next_0((__Instance + __PointerAdjustment));
                wxImageHistogramBase_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxImageHistogramBase_wxImplementation_HashTable.Node) wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxImageHistogramBase_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            public wxImageHistogramBase_wxImplementation_Pair m_value
            {
                get
                {
                    return wxImageHistogramBase_wxImplementation_Pair.__CreateInstance(((Internal*) __Instance)->m_value);
                }

                set
                {
                    ((Internal*) __Instance)->m_value = ReferenceEquals(value, null) ? new wxImageHistogramBase_wxImplementation_Pair.Internal() : *(wxImageHistogramBase_wxImplementation_Pair.Internal*) (value.__Instance);
                }
            }
        }

        public unsafe partial class Iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8IteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8IteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8IteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK47wxImageHistogramBase_wxImplementation_HashTable8IteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK47wxImageHistogramBase_wxImplementation_HashTable8IteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8Iterator11GetNextNodeEv")]
                internal static extern global::System.IntPtr GetNextNode_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8Iterator8PlusPlusEv")]
                internal static extern void PlusPlus_0(global::System.IntPtr instance);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Iterator(native.ToPointer(), skipVTables);
            }

            public static Iterator __CreateInstance(Iterator.Internal native, bool skipVTables = false)
            {
                return new Iterator(native, skipVTables);
            }

            private static void* __CopyValue(Iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(Iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Iterator(Iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public Iterator(wxImageHistogramBase_wxImplementation_HashTable.Node node, wxImageHistogramBase_wxImplementation_HashTable ht)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public Iterator(wxImageHistogramBase_wxImplementation_HashTable.Iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Iterator.Internal*) __Instance) = *((Iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxImageHistogramBase_wxImplementation_HashTable.Iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static bool operator ==(wxImageHistogramBase_wxImplementation_HashTable.Iterator __op, wxImageHistogramBase_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as Iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(wxImageHistogramBase_wxImplementation_HashTable.Iterator __op, wxImageHistogramBase_wxImplementation_HashTable.Iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            protected wxImageHistogramBase_wxImplementation_HashTable.Node GetNextNode()
            {
                var __ret = Internal.GetNextNode_0((__Instance + __PointerAdjustment));
                wxImageHistogramBase_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxImageHistogramBase_wxImplementation_HashTable.Node) wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxImageHistogramBase_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }

            protected void PlusPlus()
            {
                Internal.PlusPlus_0((__Instance + __PointerAdjustment));
            }

            public wxImageHistogramBase_wxImplementation_HashTable.Node m_node
            {
                get
                {
                    wxImageHistogramBase_wxImplementation_HashTable.Node __result0;
                    if (((Internal*) __Instance)->m_node == IntPtr.Zero) __result0 = null;
                    else if (wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_node))
                        __result0 = (wxImageHistogramBase_wxImplementation_HashTable.Node) wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap[((Internal*) __Instance)->m_node];
                    else __result0 = wxImageHistogramBase_wxImplementation_HashTable.Node.__CreateInstance(((Internal*) __Instance)->m_node);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_node = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }

            public wxImageHistogramBase_wxImplementation_HashTable m_ht
            {
                get
                {
                    wxImageHistogramBase_wxImplementation_HashTable __result0;
                    if (((Internal*) __Instance)->m_ht == IntPtr.Zero) __result0 = null;
                    else if (wxImageHistogramBase_wxImplementation_HashTable.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_ht))
                        __result0 = (wxImageHistogramBase_wxImplementation_HashTable) wxImageHistogramBase_wxImplementation_HashTable.NativeToManagedMap[((Internal*) __Instance)->m_ht];
                    else __result0 = wxImageHistogramBase_wxImplementation_HashTable.__CreateInstance(((Internal*) __Instance)->m_ht);
                    return __result0;
                }

                set
                {
                    ((Internal*) __Instance)->m_ht = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                }
            }
        }

        public unsafe partial class iterator : wxImageHistogramBase_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8iteratorC2EPNS_4NodeEPS_")]
                internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public iterator(wxImageHistogramBase_wxImplementation_HashTable.Node node, wxImageHistogramBase_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public iterator(wxImageHistogramBase_wxImplementation_HashTable.iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((iterator.Internal*) __Instance) = *((iterator.Internal*) _0.__Instance);
            }

            public static wxImageHistogramBase_wxImplementation_HashTable.iterator operator ++(wxImageHistogramBase_wxImplementation_HashTable.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxImageHistogramBase_wxImplementation_HashTable.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxImageHistogramBase_wxImplementation_HashTable.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxImageHistogramBase_wxImplementation_HashTable.iterator) wxImageHistogramBase_wxImplementation_HashTable.iterator.NativeToManagedMap[__ret];
                else __result0 = wxImageHistogramBase_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public unsafe partial class const_iterator : wxImageHistogramBase_wxImplementation_HashTable.Iterator, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_ht;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable14const_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable14const_iteratorC2ENS_8iteratorE")]
                internal static extern void ctor_1(global::System.IntPtr instance, wxImageHistogramBase_wxImplementation_HashTable.iterator.Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable14const_iteratorC2EPNS_4NodeEPKS_")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr node, global::System.IntPtr ht);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable14const_iteratorC2ERKS0_")]
                internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN47wxImageHistogramBase_wxImplementation_HashTable14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);
            }

            public static new const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxImageHistogramBase_wxImplementation_HashTable.iterator i)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(i, null) ? new wxImageHistogramBase_wxImplementation_HashTable.iterator.Internal() : *(wxImageHistogramBase_wxImplementation_HashTable.iterator.Internal*) (i.__Instance);
                Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxImageHistogramBase_wxImplementation_HashTable.Node node, wxImageHistogramBase_wxImplementation_HashTable ht)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
                var arg1 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0, arg1);
            }

            public const_iterator(wxImageHistogramBase_wxImplementation_HashTable.const_iterator _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public static wxImageHistogramBase_wxImplementation_HashTable.const_iterator operator ++(wxImageHistogramBase_wxImplementation_HashTable.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxImageHistogramBase_wxImplementation_HashTable.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxImageHistogramBase_wxImplementation_HashTable.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxImageHistogramBase_wxImplementation_HashTable.const_iterator) wxImageHistogramBase_wxImplementation_HashTable.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxImageHistogramBase_wxImplementation_HashTable.const_iterator.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static new wxImageHistogramBase_wxImplementation_HashTable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxImageHistogramBase_wxImplementation_HashTable(native.ToPointer(), skipVTables);
        }

        public static wxImageHistogramBase_wxImplementation_HashTable __CreateInstance(wxImageHistogramBase_wxImplementation_HashTable.Internal native, bool skipVTables = false)
        {
            return new wxImageHistogramBase_wxImplementation_HashTable(native, skipVTables);
        }

        private static void* __CopyValue(wxImageHistogramBase_wxImplementation_HashTable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxImageHistogramBase_wxImplementation_HashTable.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxImageHistogramBase_wxImplementation_HashTable(wxImageHistogramBase_wxImplementation_HashTable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxImageHistogramBase_wxImplementation_HashTable(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxImageHistogramBase_wxImplementation_HashTable(uint sz, wxIntegerHash hfun, wxIntegerEqual k_eq, wxImageHistogramBase_wxImplementation_KeyEx k_ex)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(hfun, null))
                throw new global::System.ArgumentNullException("hfun", "Cannot be null because it is a C++ reference (&).");
            var arg1 = hfun.__Instance;
            if (ReferenceEquals(k_eq, null))
                throw new global::System.ArgumentNullException("k_eq", "Cannot be null because it is a C++ reference (&).");
            var arg2 = k_eq.__Instance;
            if (ReferenceEquals(k_ex, null))
                throw new global::System.ArgumentNullException("k_ex", "Cannot be null because it is a C++ reference (&).");
            var arg3 = k_ex.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), sz, arg1, arg2, arg3);
        }

        public wxImageHistogramBase_wxImplementation_HashTable(wxImageHistogramBase_wxImplementation_HashTable ht)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxIntegerHash hash_funct()
        {
            var __ret = Internal.hash_funct_0((__Instance + __PointerAdjustment));
            return wxIntegerHash.__CreateInstance(__ret);
        }

        public wxIntegerEqual key_eq()
        {
            var __ret = Internal.key_eq_0((__Instance + __PointerAdjustment));
            return wxIntegerEqual.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxImageHistogramBase_wxImplementation_HashTable.iterator end()
        {
            var __ret = Internal.end_1((__Instance + __PointerAdjustment));
            return wxImageHistogramBase_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public wxImageHistogramBase_wxImplementation_HashTable.iterator begin()
        {
            var __ret = Internal.begin_1((__Instance + __PointerAdjustment));
            return wxImageHistogramBase_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
        }

        public uint erase(ref uint key)
        {
            fixed (uint* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        protected wxImageHistogramBase_wxImplementation_HashTable.Node GetOrCreateNode(wxImageHistogramBase_wxImplementation_Pair value, ref bool created)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            fixed (bool* __refParamPtr1 = &created)
            {
                var arg1 = __refParamPtr1;
                var __ret = Internal.GetOrCreateNode_0((__Instance + __PointerAdjustment), arg0, arg1);
                wxImageHistogramBase_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxImageHistogramBase_wxImplementation_HashTable.Node) wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxImageHistogramBase_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected wxImageHistogramBase_wxImplementation_HashTable.Node CreateNode(wxImageHistogramBase_wxImplementation_Pair value, uint bucket)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            var __ret = Internal.CreateNode_0((__Instance + __PointerAdjustment), arg0, bucket);
            wxImageHistogramBase_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxImageHistogramBase_wxImplementation_HashTable.Node) wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxImageHistogramBase_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected void CreateNode(wxImageHistogramBase_wxImplementation_Pair value)
        {
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg0 = value.__Instance;
            Internal.CreateNode_1((__Instance + __PointerAdjustment), arg0);
        }

        protected _wxHashTable_NodeBase GetNodePtr(ref uint key)
        {
            fixed (uint* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.GetNodePtr_0((__Instance + __PointerAdjustment), arg0);
                _wxHashTable_NodeBase __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[__ret];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected wxImageHistogramBase_wxImplementation_HashTable.Node GetNode(ref uint key)
        {
            fixed (uint* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.GetNode_0((__Instance + __PointerAdjustment), arg0);
                wxImageHistogramBase_wxImplementation_HashTable.Node __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxImageHistogramBase_wxImplementation_HashTable.Node) wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
                else __result0 = wxImageHistogramBase_wxImplementation_HashTable.Node.__CreateInstance(__ret);
                return __result0;
            }
        }

        protected void ResizeTable(uint newSize)
        {
            Internal.ResizeTable_0((__Instance + __PointerAdjustment), newSize);
        }

        protected void HashCopy(wxImageHistogramBase_wxImplementation_HashTable ht)
        {
            if (ReferenceEquals(ht, null))
                throw new global::System.ArgumentNullException("ht", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ht.__Instance;
            Internal.HashCopy_0((__Instance + __PointerAdjustment), arg0);
        }

        protected static void DeleteNode(_wxHashTable_NodeBase node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            Internal.DeleteNode_0(arg0);
        }

        protected static uint GetBucketForNode(wxImageHistogramBase_wxImplementation_HashTable ht, wxImageHistogramBase_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(ht, null) ? global::System.IntPtr.Zero : ht.__Instance;
            var arg1 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.GetBucketForNode_0(arg0, arg1);
            return __ret;
        }

        protected static wxImageHistogramBase_wxImplementation_HashTable.Node CopyNode(wxImageHistogramBase_wxImplementation_HashTable.Node node)
        {
            var arg0 = ReferenceEquals(node, null) ? global::System.IntPtr.Zero : node.__Instance;
            var __ret = Internal.CopyNode_0(arg0);
            wxImageHistogramBase_wxImplementation_HashTable.Node __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxImageHistogramBase_wxImplementation_HashTable.Node) wxImageHistogramBase_wxImplementation_HashTable.Node.NativeToManagedMap[__ret];
            else __result0 = wxImageHistogramBase_wxImplementation_HashTable.Node.__CreateInstance(__ret);
            return __result0;
        }

        protected _wxHashTable_NodeBase m_table
        {
            get
            {
                _wxHashTable_NodeBase __result0;
                if (((Internal*) __Instance)->m_table == IntPtr.Zero) __result0 = null;
                else if (_wxHashTable_NodeBase.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_table))
                    __result0 = (_wxHashTable_NodeBase) _wxHashTable_NodeBase.NativeToManagedMap[((Internal*) __Instance)->m_table];
                else __result0 = _wxHashTable_NodeBase.__CreateInstance(((Internal*) __Instance)->m_table);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_table = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected uint m_tableBuckets
        {
            get
            {
                return ((Internal*) __Instance)->m_tableBuckets;
            }

            set
            {
                ((Internal*) __Instance)->m_tableBuckets = value;
            }
        }

        protected uint m_items
        {
            get
            {
                return ((Internal*) __Instance)->m_items;
            }

            set
            {
                ((Internal*) __Instance)->m_items = value;
            }
        }

        protected wxIntegerHash m_hasher
        {
            get
            {
                return wxIntegerHash.__CreateInstance(((Internal*) __Instance)->m_hasher);
            }

            set
            {
                ((Internal*) __Instance)->m_hasher = ReferenceEquals(value, null) ? new wxIntegerHash.Internal() : *(wxIntegerHash.Internal*) (value.__Instance);
            }
        }

        protected wxIntegerEqual m_equals
        {
            get
            {
                return wxIntegerEqual.__CreateInstance(((Internal*) __Instance)->m_equals);
            }

            set
            {
                ((Internal*) __Instance)->m_equals = ReferenceEquals(value, null) ? new wxIntegerEqual.Internal() : *(wxIntegerEqual.Internal*) (value.__Instance);
            }
        }

        protected wxImageHistogramBase_wxImplementation_KeyEx m_getKey
        {
            get
            {
                return wxImageHistogramBase_wxImplementation_KeyEx.__CreateInstance(((Internal*) __Instance)->m_getKey);
            }

            set
            {
                ((Internal*) __Instance)->m_getKey = ReferenceEquals(value, null) ? new wxImageHistogramBase_wxImplementation_KeyEx.Internal() : *(wxImageHistogramBase_wxImplementation_KeyEx.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxImageHistogramBase : wxImageHistogramBase_wxImplementation_HashTable, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxIntegerHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxIntegerEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxImageHistogramBase_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxImageHistogramBaseC2Em13wxIntegerHash14wxIntegerEqual")]
            internal static extern void ctor_0(global::System.IntPtr instance, uint hint, wxIntegerHash.Internal hf, wxIntegerEqual.Internal eq);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxImageHistogramBaseC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxImageHistogramBaseD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxImageHistogramBase4findERKm")]
            internal static extern wxImageHistogramBase_wxImplementation_HashTable.iterator.Internal find_1(global::System.IntPtr instance, uint* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxImageHistogramBase6insertERK42wxImageHistogramBase_wxImplementation_Pair")]
            internal static extern void insert_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxImageHistogramBase5eraseERKm")]
            internal static extern uint erase_0(global::System.IntPtr instance, uint* k);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxImageHistogramBase5eraseERKN47wxImageHistogramBase_wxImplementation_HashTable8iteratorE")]
            internal static extern void erase_1(global::System.IntPtr instance, global::System.IntPtr it);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxImageHistogramBase5countERKm")]
            internal static extern uint count_0(global::System.IntPtr instance, uint* key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxImageHistogramBaseixERKm")]
            internal static extern global::System.IntPtr OperatorSubscript_0(global::System.IntPtr instance, uint* key);
        }

        public unsafe partial class Insert_Result : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxImageHistogramBase_wxImplementation_HashTable.iterator.Internal first;

                [FieldOffset(8)]
                public byte second;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN20wxImageHistogramBase13Insert_ResultC2ERKN47wxImageHistogramBase_wxImplementation_HashTable8iteratorERKb")]
                internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr f, bool* s);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN20wxImageHistogramBase13Insert_ResultC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, Insert_Result>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static Insert_Result __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new Insert_Result(native.ToPointer(), skipVTables);
            }

            public static Insert_Result __CreateInstance(Insert_Result.Internal native, bool skipVTables = false)
            {
                return new Insert_Result(native, skipVTables);
            }

            private static void* __CopyValue(Insert_Result.Internal native)
            {
                var ret = Marshal.AllocHGlobal(12);
                *(Insert_Result.Internal*) ret = native;
                return ret.ToPointer();
            }

            private Insert_Result(Insert_Result.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected Insert_Result(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public Insert_Result(wxImageHistogramBase_wxImplementation_HashTable.iterator f, ref bool s)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(f, null))
                    throw new global::System.ArgumentNullException("f", "Cannot be null because it is a C++ reference (&).");
                var arg0 = f.__Instance;
                fixed (bool* __refParamPtr1 = &s)
                {
                    var arg1 = __refParamPtr1;
                    Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
                }
            }

            public Insert_Result(wxImageHistogramBase.Insert_Result _0)
            {
                __Instance = Marshal.AllocHGlobal(12);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((Insert_Result.Internal*) __Instance) = *((Insert_Result.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxImageHistogramBase.Insert_Result __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public wxImageHistogramBase_wxImplementation_HashTable.iterator first
            {
                get
                {
                    return wxImageHistogramBase_wxImplementation_HashTable.iterator.__CreateInstance(((Internal*) __Instance)->first);
                }

                set
                {
                    ((Internal*) __Instance)->first = ReferenceEquals(value, null) ? new wxImageHistogramBase_wxImplementation_HashTable.iterator.Internal() : *(wxImageHistogramBase_wxImplementation_HashTable.iterator.Internal*) (value.__Instance);
                }
            }

            public bool second
            {
                get
                {
                    return ((Internal*) __Instance)->second != 0;
                }

                set
                {
                    ((Internal*) __Instance)->second = (byte) (value ? 1 : 0);
                }
            }
        }

        public static new wxImageHistogramBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxImageHistogramBase(native.ToPointer(), skipVTables);
        }

        public static wxImageHistogramBase __CreateInstance(wxImageHistogramBase.Internal native, bool skipVTables = false)
        {
            return new wxImageHistogramBase(native, skipVTables);
        }

        private static void* __CopyValue(wxImageHistogramBase.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxImageHistogramBase.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxImageHistogramBase(wxImageHistogramBase.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxImageHistogramBase(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxImageHistogramBase(uint hint, wxIntegerHash hf, wxIntegerEqual eq)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(hf, null) ? new wxIntegerHash.Internal() : *(wxIntegerHash.Internal*) (hf.__Instance);
            var arg2 = ReferenceEquals(eq, null) ? new wxIntegerEqual.Internal() : *(wxIntegerEqual.Internal*) (eq.__Instance);
            Internal.ctor_0((__Instance + __PointerAdjustment), hint, arg1, arg2);
        }

        public wxImageHistogramBase(wxImageHistogramBase _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxImageHistogramBase_wxImplementation_HashTable.iterator find(ref uint key)
        {
            fixed (uint* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.find_1((__Instance + __PointerAdjustment), arg0);
                return wxImageHistogramBase_wxImplementation_HashTable.iterator.__CreateInstance(__ret);
            }
        }

        public wxImageHistogramBase.Insert_Result insert(wxImageHistogramBase_wxImplementation_Pair v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is a C++ reference (&).");
            var arg0 = v.__Instance;
            var __ret = new wxImageHistogramBase.Insert_Result.Internal();
            Internal.insert_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxImageHistogramBase.Insert_Result.__CreateInstance(__ret);
        }

        public uint erase(ref uint k)
        {
            fixed (uint* __refParamPtr0 = &k)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.erase_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public void erase(wxImageHistogramBase_wxImplementation_HashTable.iterator it)
        {
            if (ReferenceEquals(it, null))
                throw new global::System.ArgumentNullException("it", "Cannot be null because it is a C++ reference (&).");
            var arg0 = it.__Instance;
            Internal.erase_1((__Instance + __PointerAdjustment), arg0);
        }

        public uint count(ref uint key)
        {
            fixed (uint* __refParamPtr0 = &key)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.count_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public wxImageHistogramEntry this[uint* key]
        {
            get
            {
                fixed (uint* __refParamPtr0 = &key)
                {
                    var arg0 = __refParamPtr0;
                    var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), arg0);
                    wxImageHistogramEntry __result0;
                    if (__ret == IntPtr.Zero) __result0 = null;
                    else if (wxImageHistogramEntry.NativeToManagedMap.ContainsKey(__ret))
                        __result0 = (wxImageHistogramEntry) wxImageHistogramEntry.NativeToManagedMap[__ret];
                    else __result0 = wxImageHistogramEntry.__CreateInstance(__ret);
                    return __result0;
                }
            }

            set
            {
                fixed (uint* __refParamPtr0 = &key)
                {
                    var arg0 = __refParamPtr0;
                    *(wxImageHistogramEntry.Internal*) Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), __refParamPtr0) = *(wxImageHistogramEntry.Internal*) value.__Instance;
                }
        }
    }

    public unsafe partial class wxImageHistogram : wxImageHistogramBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_table;

            [FieldOffset(4)]
            public uint m_tableBuckets;

            [FieldOffset(8)]
            public uint m_items;

            [FieldOffset(12)]
            public wxIntegerHash.Internal m_hasher;

            [FieldOffset(13)]
            public wxIntegerEqual.Internal m_equals;

            [FieldOffset(14)]
            public wxImageHistogramBase_wxImplementation_KeyEx.Internal m_getKey;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxImageHistogramC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxImageHistogramC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxImageHistogramD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxImageHistogram7MakeKeyEhhh")]
            internal static extern uint MakeKey_0(byte r, byte g, byte b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxImageHistogram21FindFirstUnusedColourEPhS0_S0_hhh")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool FindFirstUnusedColour_0(global::System.IntPtr instance, byte* r, byte* g, byte* b, byte startR, byte startG, byte startB);
        }

        public static new wxImageHistogram __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxImageHistogram(native.ToPointer(), skipVTables);
        }

        public static wxImageHistogram __CreateInstance(wxImageHistogram.Internal native, bool skipVTables = false)
        {
            return new wxImageHistogram(native, skipVTables);
        }

        private static void* __CopyValue(wxImageHistogram.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxImageHistogram.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxImageHistogram(wxImageHistogram.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxImageHistogram(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxImageHistogram()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxImageHistogram(wxImageHistogram _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        protected override void Dispose(bool disposing)
        {
            _wxHashTableBase2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public bool FindFirstUnusedColour(byte* r, byte* g, byte* b, byte startR, byte startG, byte startB)
        {
            var arg0 = r;
            var arg1 = g;
            var arg2 = b;
            var __ret = Internal.FindFirstUnusedColour_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, startR, startG, startB);
            return __ret;
        }

        public static uint MakeKey(byte r, byte g, byte b)
        {
            var __ret = Internal.MakeKey_0(r, g, b);
            return __ret;
        }
    }

    public unsafe partial class wxImage : wxObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2Eiib")]
            internal static extern void ctor_1(global::System.IntPtr instance, int width, int height, bool clear);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2EiiPhb")]
            internal static extern void ctor_2(global::System.IntPtr instance, int width, int height, byte* data, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2EiiPhS0_b")]
            internal static extern void ctor_3(global::System.IntPtr instance, int width, int height, byte* data, byte* alpha, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2ERK6wxSizeb")]
            internal static extern void ctor_4(global::System.IntPtr instance, global::System.IntPtr sz, bool clear);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2ERK6wxSizePhb")]
            internal static extern void ctor_5(global::System.IntPtr instance, global::System.IntPtr sz, byte* data, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2ERK6wxSizePhS3_b")]
            internal static extern void ctor_6(global::System.IntPtr instance, global::System.IntPtr sz, byte* data, byte* alpha, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2ERK8wxString12wxBitmapTypei")]
            internal static extern void ctor_7(global::System.IntPtr instance, global::System.IntPtr name, wxBitmapType type, int index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2ERK8wxStringS2_i")]
            internal static extern void ctor_8(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr mimetype, int index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2EPKPKc")]
            internal static extern void ctor_9(global::System.IntPtr instance, sbyte** xpmData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2ER13wxInputStream12wxBitmapTypei")]
            internal static extern void ctor_10(global::System.IntPtr instance, global::System.IntPtr stream, wxBitmapType type, int index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2ER13wxInputStreamRK8wxStringi")]
            internal static extern void ctor_11(global::System.IntPtr instance, global::System.IntPtr stream, global::System.IntPtr mimetype, int index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImageC2ERKS_")]
            internal static extern void cctor_13(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6CreateEPKPKc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_0(global::System.IntPtr instance, sbyte** xpmData);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6CreateEiib")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_1(global::System.IntPtr instance, int width, int height, bool clear);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6CreateEiiPhb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_2(global::System.IntPtr instance, int width, int height, byte* data, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6CreateEiiPhS0_b")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_3(global::System.IntPtr instance, int width, int height, byte* data, byte* alpha, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6CreateERK6wxSizeb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_4(global::System.IntPtr instance, global::System.IntPtr sz, bool clear);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6CreateERK6wxSizePhb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_5(global::System.IntPtr instance, global::System.IntPtr sz, byte* data, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6CreateERK6wxSizePhS3_b")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Create_6(global::System.IntPtr instance, global::System.IntPtr sz, byte* data, byte* alpha, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage7DestroyEv")]
            internal static extern void Destroy_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage5ClearEh")]
            internal static extern void Clear_0(global::System.IntPtr instance, byte value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage4CopyEv")]
            internal static extern void Copy_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage11GetSubImageERK6wxRect")]
            internal static extern void GetSubImage_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage4SizeERK6wxSizeRK7wxPointiii")]
            internal static extern void Size_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr size, global::System.IntPtr pos, int r, int g, int b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage5PasteERKS_ii")]
            internal static extern void Paste_0(global::System.IntPtr instance, global::System.IntPtr image, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage5ScaleEii20wxImageResizeQuality")]
            internal static extern void Scale_0(global::System.IntPtr @return, global::System.IntPtr instance, int width, int height, wxImageResizeQuality quality);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage15ResampleNearestEii")]
            internal static extern void ResampleNearest_0(global::System.IntPtr @return, global::System.IntPtr instance, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage11ResampleBoxEii")]
            internal static extern void ResampleBox_0(global::System.IntPtr @return, global::System.IntPtr instance, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage16ResampleBilinearEii")]
            internal static extern void ResampleBilinear_0(global::System.IntPtr @return, global::System.IntPtr instance, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage15ResampleBicubicEii")]
            internal static extern void ResampleBicubic_0(global::System.IntPtr @return, global::System.IntPtr instance, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage4BlurEi")]
            internal static extern void Blur_0(global::System.IntPtr @return, global::System.IntPtr instance, int radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage14BlurHorizontalEi")]
            internal static extern void BlurHorizontal_0(global::System.IntPtr @return, global::System.IntPtr instance, int radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage12BlurVerticalEi")]
            internal static extern void BlurVertical_0(global::System.IntPtr @return, global::System.IntPtr instance, int radius);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage8ShrinkByEii")]
            internal static extern void ShrinkBy_0(global::System.IntPtr @return, global::System.IntPtr instance, int xFactor, int yFactor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage7RescaleEii20wxImageResizeQuality")]
            internal static extern global::System.IntPtr Rescale_0(global::System.IntPtr instance, int width, int height, wxImageResizeQuality quality);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6ResizeERK6wxSizeRK7wxPointiii")]
            internal static extern global::System.IntPtr Resize_0(global::System.IntPtr instance, global::System.IntPtr size, global::System.IntPtr pos, int r, int g, int b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage6RotateEdRK7wxPointbPS0_")]
            internal static extern void Rotate_0(global::System.IntPtr @return, global::System.IntPtr instance, double angle, global::System.IntPtr centre_of_rotation, bool interpolating, global::System.IntPtr offset_after_rotation);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage8Rotate90Eb")]
            internal static extern void Rotate90_0(global::System.IntPtr @return, global::System.IntPtr instance, bool clockwise);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage9Rotate180Ev")]
            internal static extern void Rotate180_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage6MirrorEb")]
            internal static extern void Mirror_0(global::System.IntPtr @return, global::System.IntPtr instance, bool horizontally);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage7ReplaceEhhhhhh")]
            internal static extern void Replace_0(global::System.IntPtr instance, byte r1, byte g1, byte b1, byte r2, byte g2, byte b2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage18ConvertToGreyscaleEddd")]
            internal static extern void ConvertToGreyscale_0(global::System.IntPtr @return, global::System.IntPtr instance, double weight_r, double weight_g, double weight_b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage18ConvertToGreyscaleEv")]
            internal static extern void ConvertToGreyscale_1(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage13ConvertToMonoEhhh")]
            internal static extern void ConvertToMono_0(global::System.IntPtr @return, global::System.IntPtr instance, byte r, byte g, byte b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage17ConvertToDisabledEh")]
            internal static extern void ConvertToDisabled_0(global::System.IntPtr @return, global::System.IntPtr instance, byte brightness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6SetRGBEiihhh")]
            internal static extern void SetRGB_0(global::System.IntPtr instance, int x, int y, byte r, byte g, byte b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage6SetRGBERK6wxRecthhh")]
            internal static extern void SetRGB_1(global::System.IntPtr instance, global::System.IntPtr rect, byte r, byte g, byte b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage6GetRedEii")]
            internal static extern byte GetRed_0(global::System.IntPtr instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage8GetGreenEii")]
            internal static extern byte GetGreen_0(global::System.IntPtr instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage7GetBlueEii")]
            internal static extern byte GetBlue_0(global::System.IntPtr instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage8SetAlphaEiih")]
            internal static extern void SetAlpha_0(global::System.IntPtr instance, int x, int y, byte alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage8GetAlphaEii")]
            internal static extern byte GetAlpha_0(global::System.IntPtr instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage21FindFirstUnusedColourEPhS0_S0_hhh")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool FindFirstUnusedColour_0(global::System.IntPtr instance, byte* r, byte* g, byte* b, byte startR, byte startG, byte startB);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage16SetMaskFromImageERKS_hhh")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetMaskFromImage_0(global::System.IntPtr instance, global::System.IntPtr mask, byte mr, byte mg, byte mb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage18ConvertAlphaToMaskEh")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ConvertAlphaToMask_0(global::System.IntPtr instance, byte threshold);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage18ConvertAlphaToMaskEhhhh")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ConvertAlphaToMask_1(global::System.IntPtr instance, byte mr, byte mg, byte mb, byte threshold);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage20ConvertColourToAlphaEhhh")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ConvertColourToAlpha_0(global::System.IntPtr instance, byte r, byte g, byte b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage19SetDefaultLoadFlagsEi")]
            internal static extern void SetDefaultLoadFlags_0(int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage19GetDefaultLoadFlagsEv")]
            internal static extern int GetDefaultLoadFlags_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage12SetLoadFlagsEi")]
            internal static extern void SetLoadFlags_0(global::System.IntPtr instance, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage12GetLoadFlagsEv")]
            internal static extern int GetLoadFlags_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage7CanReadERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CanRead_0(global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage13GetImageCountERK8wxString12wxBitmapType")]
            internal static extern int GetImageCount_0(global::System.IntPtr name, wxBitmapType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage7CanReadER13wxInputStream")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CanRead_1(global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage13GetImageCountER13wxInputStream12wxBitmapType")]
            internal static extern int GetImageCount_1(global::System.IntPtr stream, wxBitmapType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage2OkEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Ok_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage4IsOkEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsOk_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage8GetWidthEv")]
            internal static extern int GetWidth_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage9GetHeightEv")]
            internal static extern int GetHeight_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage7GetSizeEv")]
            internal static extern wxSize.Internal GetSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage7GetTypeEv")]
            internal static extern wxBitmapType GetType_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage7SetTypeE12wxBitmapType")]
            internal static extern void SetType_0(global::System.IntPtr instance, wxBitmapType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage7GetDataEv")]
            internal static extern byte* GetData_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage7SetDataEPhb")]
            internal static extern void SetData_0(global::System.IntPtr instance, byte* data, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage7SetDataEPhiib")]
            internal static extern void SetData_1(global::System.IntPtr instance, byte* data, int new_width, int new_height, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage8GetAlphaEv")]
            internal static extern byte* GetAlpha_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage8HasAlphaEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasAlpha_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage8SetAlphaEPhb")]
            internal static extern void SetAlpha_1(global::System.IntPtr instance, byte* alpha, bool static_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage9InitAlphaEv")]
            internal static extern void InitAlpha_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage10ClearAlphaEv")]
            internal static extern void ClearAlpha_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage13IsTransparentEiih")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsTransparent_0(global::System.IntPtr instance, int x, int y, byte threshold);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage13SetMaskColourEhhh")]
            internal static extern void SetMaskColour_0(global::System.IntPtr instance, byte r, byte g, byte b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage19GetOrFindMaskColourEPhS0_S0_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool GetOrFindMaskColour_0(global::System.IntPtr instance, byte* r, byte* g, byte* b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage10GetMaskRedEv")]
            internal static extern byte GetMaskRed_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage12GetMaskGreenEv")]
            internal static extern byte GetMaskGreen_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage11GetMaskBlueEv")]
            internal static extern byte GetMaskBlue_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage7SetMaskEb")]
            internal static extern void SetMask_0(global::System.IntPtr instance, bool mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage7HasMaskEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasMask_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage10HasPaletteEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasPalette_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage10GetPaletteEv")]
            internal static extern global::System.IntPtr GetPalette_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage10SetPaletteERK9wxPalette")]
            internal static extern void SetPalette_0(global::System.IntPtr instance, global::System.IntPtr palette);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage9SetOptionERK8wxStringS2_")]
            internal static extern void SetOption_0(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage9SetOptionERK8wxStringi")]
            internal static extern void SetOption_1(global::System.IntPtr instance, global::System.IntPtr name, int value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage9GetOptionERK8wxString")]
            internal static extern void GetOption_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage12GetOptionIntERK8wxString")]
            internal static extern int GetOptionInt_0(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage9HasOptionERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasOption_0(global::System.IntPtr instance, global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage12CountColoursEm")]
            internal static extern uint CountColours_0(global::System.IntPtr instance, uint stopafter);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage16ComputeHistogramER16wxImageHistogram")]
            internal static extern uint ComputeHistogram_0(global::System.IntPtr instance, global::System.IntPtr h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage9RotateHueEd")]
            internal static extern void RotateHue_0(global::System.IntPtr instance, double angle);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage11GetHandlersEv")]
            internal static extern global::System.IntPtr GetHandlers_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage10AddHandlerEP14wxImageHandler")]
            internal static extern void AddHandler_0(global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage13InsertHandlerEP14wxImageHandler")]
            internal static extern void InsertHandler_0(global::System.IntPtr handler);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage13RemoveHandlerERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool RemoveHandler_0(global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage11FindHandlerERK8wxString")]
            internal static extern global::System.IntPtr FindHandler_0(global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage11FindHandlerERK8wxString12wxBitmapType")]
            internal static extern global::System.IntPtr FindHandler_1(global::System.IntPtr extension, wxBitmapType imageType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage11FindHandlerE12wxBitmapType")]
            internal static extern global::System.IntPtr FindHandler_2(wxBitmapType imageType);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage15FindHandlerMimeERK8wxString")]
            internal static extern global::System.IntPtr FindHandlerMime_0(global::System.IntPtr mimetype);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage19GetImageExtWildcardEv")]
            internal static extern void GetImageExtWildcard_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage15CleanUpHandlersEv")]
            internal static extern void CleanUpHandlers_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage20InitStandardHandlersEv")]
            internal static extern void InitStandardHandlers_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage8RGBtoHSVERKNS_8RGBValueE")]
            internal static extern void RGBtoHSV_0(global::System.IntPtr @return, global::System.IntPtr rgb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage8HSVtoRGBERKNS_8HSVValueE")]
            internal static extern void HSVtoRGB_0(global::System.IntPtr @return, global::System.IntPtr hsv);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK7wxImage9XYToIndexEii")]
            internal static extern int XYToIndex_0(global::System.IntPtr instance, int x, int y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN7wxImage14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public enum Load_Verbose : uint
        {
            Load_Verbose = 1
        }

        public unsafe partial class RGBValue : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 3)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public byte red;

                [FieldOffset(1)]
                public byte green;

                [FieldOffset(2)]
                public byte blue;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN7wxImage8RGBValueC2Ehhh")]
                internal static extern void ctor_0(global::System.IntPtr instance, byte r, byte g, byte b);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN7wxImage8RGBValueC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RGBValue> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, RGBValue>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static RGBValue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new RGBValue(native.ToPointer(), skipVTables);
            }

            public static RGBValue __CreateInstance(RGBValue.Internal native, bool skipVTables = false)
            {
                return new RGBValue(native, skipVTables);
            }

            private static void* __CopyValue(RGBValue.Internal native)
            {
                var ret = Marshal.AllocHGlobal(3);
                *(RGBValue.Internal*) ret = native;
                return ret.ToPointer();
            }

            private RGBValue(RGBValue.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected RGBValue(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public RGBValue(byte r, byte g, byte b)
            {
                __Instance = Marshal.AllocHGlobal(3);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment), r, g, b);
            }

            public RGBValue(wxImage.RGBValue _0)
            {
                __Instance = Marshal.AllocHGlobal(3);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((RGBValue.Internal*) __Instance) = *((RGBValue.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxImage.RGBValue __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public byte red
            {
                get
                {
                    return ((Internal*) __Instance)->red;
                }

                set
                {
                    ((Internal*) __Instance)->red = value;
                }
            }

            public byte green
            {
                get
                {
                    return ((Internal*) __Instance)->green;
                }

                set
                {
                    ((Internal*) __Instance)->green = value;
                }
            }

            public byte blue
            {
                get
                {
                    return ((Internal*) __Instance)->blue;
                }

                set
                {
                    ((Internal*) __Instance)->blue = value;
                }
            }
        }

        public unsafe partial class HSVValue : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 24)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public double hue;

                [FieldOffset(8)]
                public double saturation;

                [FieldOffset(16)]
                public double value;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN7wxImage8HSVValueC2Eddd")]
                internal static extern void ctor_0(global::System.IntPtr instance, double h, double s, double v);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN7wxImage8HSVValueC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, HSVValue> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, HSVValue>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static HSVValue __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new HSVValue(native.ToPointer(), skipVTables);
            }

            public static HSVValue __CreateInstance(HSVValue.Internal native, bool skipVTables = false)
            {
                return new HSVValue(native, skipVTables);
            }

            private static void* __CopyValue(HSVValue.Internal native)
            {
                var ret = Marshal.AllocHGlobal(24);
                *(HSVValue.Internal*) ret = native;
                return ret.ToPointer();
            }

            private HSVValue(HSVValue.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected HSVValue(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public HSVValue(double h, double s, double v)
            {
                __Instance = Marshal.AllocHGlobal(24);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment), h, s, v);
            }

            public HSVValue(wxImage.HSVValue _0)
            {
                __Instance = Marshal.AllocHGlobal(24);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((HSVValue.Internal*) __Instance) = *((HSVValue.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxImage.HSVValue __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public double hue
            {
                get
                {
                    return ((Internal*) __Instance)->hue;
                }

                set
                {
                    ((Internal*) __Instance)->hue = value;
                }
            }

            public double saturation
            {
                get
                {
                    return ((Internal*) __Instance)->saturation;
                }

                set
                {
                    ((Internal*) __Instance)->saturation = value;
                }
            }

            public double value
            {
                get
                {
                    return ((Internal*) __Instance)->value;
                }

                set
                {
                    ((Internal*) __Instance)->value = value;
                }
            }
        }

        public static new wxImage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxImage(native.ToPointer(), skipVTables);
        }

        public static wxImage __CreateInstance(wxImage.Internal native, bool skipVTables = false)
        {
            return new wxImage(native, skipVTables);
        }

        private static void* __CopyValue(wxImage.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            wxImage.Internal.cctor_13(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxImage(wxImage.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxImage(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxImage()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(int width, int height, bool clear)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), width, height, clear);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(int width, int height, byte* data, bool static_data)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg2 = data;
            Internal.ctor_2((__Instance + __PointerAdjustment), width, height, arg2, static_data);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(int width, int height, byte* data, byte* alpha, bool static_data)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg2 = data;
            var arg3 = alpha;
            Internal.ctor_3((__Instance + __PointerAdjustment), width, height, arg2, arg3, static_data);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(wxSize sz, bool clear)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0, clear);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(wxSize sz, byte* data, bool static_data)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var arg1 = data;
            Internal.ctor_5((__Instance + __PointerAdjustment), arg0, arg1, static_data);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(wxSize sz, byte* data, byte* alpha, bool static_data)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var arg1 = data;
            var arg2 = alpha;
            Internal.ctor_6((__Instance + __PointerAdjustment), arg0, arg1, arg2, static_data);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(wxString name, wxBitmapType type, int index)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = type;
            Internal.ctor_7((__Instance + __PointerAdjustment), arg0, arg1, index);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(wxString name, wxString mimetype, int index)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            if (ReferenceEquals(mimetype, null))
                throw new global::System.ArgumentNullException("mimetype", "Cannot be null because it is a C++ reference (&).");
            var arg1 = mimetype.__Instance;
            Internal.ctor_8((__Instance + __PointerAdjustment), arg0, arg1, index);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(sbyte** xpmData)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = xpmData;
            Internal.ctor_9((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(wxInputStream stream, wxBitmapType type, int index)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var arg1 = type;
            Internal.ctor_10((__Instance + __PointerAdjustment), arg0, arg1, index);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(wxInputStream stream, wxString mimetype, int index)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            if (ReferenceEquals(mimetype, null))
                throw new global::System.ArgumentNullException("mimetype", "Cannot be null because it is a C++ reference (&).");
            var arg1 = mimetype.__Instance;
            Internal.ctor_11((__Instance + __PointerAdjustment), arg0, arg1, index);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public wxImage(wxImage _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_13((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxImage");
        }

        public bool Create(sbyte** xpmData)
        {
            var arg0 = xpmData;
            var __ret = Internal.Create_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Create(int width, int height, bool clear)
        {
            var __ret = Internal.Create_1((__Instance + __PointerAdjustment), width, height, clear);
            return __ret;
        }

        public bool Create(int width, int height, byte* data, bool static_data)
        {
            var arg2 = data;
            var __ret = Internal.Create_2((__Instance + __PointerAdjustment), width, height, arg2, static_data);
            return __ret;
        }

        public bool Create(int width, int height, byte* data, byte* alpha, bool static_data)
        {
            var arg2 = data;
            var arg3 = alpha;
            var __ret = Internal.Create_3((__Instance + __PointerAdjustment), width, height, arg2, arg3, static_data);
            return __ret;
        }

        public bool Create(wxSize sz, bool clear)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.Create_4((__Instance + __PointerAdjustment), arg0, clear);
            return __ret;
        }

        public bool Create(wxSize sz, byte* data, bool static_data)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var arg1 = data;
            var __ret = Internal.Create_5((__Instance + __PointerAdjustment), arg0, arg1, static_data);
            return __ret;
        }

        public bool Create(wxSize sz, byte* data, byte* alpha, bool static_data)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var arg1 = data;
            var arg2 = alpha;
            var __ret = Internal.Create_6((__Instance + __PointerAdjustment), arg0, arg1, arg2, static_data);
            return __ret;
        }

        public void Destroy()
        {
            Internal.Destroy_0((__Instance + __PointerAdjustment));
        }

        public void Clear(byte value)
        {
            Internal.Clear_0((__Instance + __PointerAdjustment), value);
        }

        public wxImage Copy()
        {
            var __ret = new wxImage.Internal();
            Internal.Copy_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage GetSubImage(wxRect rect)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            var __ret = new wxImage.Internal();
            Internal.GetSubImage_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage Size(wxSize size, wxPoint pos, int r, int g, int b)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var arg0 = size.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var arg1 = pos.__Instance;
            var __ret = new wxImage.Internal();
            Internal.Size_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1, r, g, b);
            return wxImage.__CreateInstance(__ret);
        }

        public void Paste(wxImage image, int x, int y)
        {
            if (ReferenceEquals(image, null))
                throw new global::System.ArgumentNullException("image", "Cannot be null because it is a C++ reference (&).");
            var arg0 = image.__Instance;
            Internal.Paste_0((__Instance + __PointerAdjustment), arg0, x, y);
        }

        public wxImage Scale(int width, int height, wxImageResizeQuality quality)
        {
            var arg2 = quality;
            var __ret = new wxImage.Internal();
            Internal.Scale_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), width, height, arg2);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage ResampleNearest(int width, int height)
        {
            var __ret = new wxImage.Internal();
            Internal.ResampleNearest_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), width, height);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage ResampleBox(int width, int height)
        {
            var __ret = new wxImage.Internal();
            Internal.ResampleBox_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), width, height);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage ResampleBilinear(int width, int height)
        {
            var __ret = new wxImage.Internal();
            Internal.ResampleBilinear_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), width, height);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage ResampleBicubic(int width, int height)
        {
            var __ret = new wxImage.Internal();
            Internal.ResampleBicubic_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), width, height);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage Blur(int radius)
        {
            var __ret = new wxImage.Internal();
            Internal.Blur_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), radius);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage BlurHorizontal(int radius)
        {
            var __ret = new wxImage.Internal();
            Internal.BlurHorizontal_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), radius);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage BlurVertical(int radius)
        {
            var __ret = new wxImage.Internal();
            Internal.BlurVertical_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), radius);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage ShrinkBy(int xFactor, int yFactor)
        {
            var __ret = new wxImage.Internal();
            Internal.ShrinkBy_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), xFactor, yFactor);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage Rescale(int width, int height, wxImageResizeQuality quality)
        {
            var arg2 = quality;
            var __ret = Internal.Rescale_0((__Instance + __PointerAdjustment), width, height, arg2);
            wxImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxImage) wxImage.NativeToManagedMap[__ret];
            else wxImage.NativeToManagedMap[__ret] = __result0 = (wxImage) wxImage.__CreateInstance(__ret);
            return __result0;
        }

        public wxImage Resize(wxSize size, wxPoint pos, int r, int g, int b)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is a C++ reference (&).");
            var arg0 = size.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is a C++ reference (&).");
            var arg1 = pos.__Instance;
            var __ret = Internal.Resize_0((__Instance + __PointerAdjustment), arg0, arg1, r, g, b);
            wxImage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxImage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxImage) wxImage.NativeToManagedMap[__ret];
            else wxImage.NativeToManagedMap[__ret] = __result0 = (wxImage) wxImage.__CreateInstance(__ret);
            return __result0;
        }

        public wxImage Rotate(double angle, wxPoint centre_of_rotation, bool interpolating, wxPoint offset_after_rotation)
        {
            if (ReferenceEquals(centre_of_rotation, null))
                throw new global::System.ArgumentNullException("centre_of_rotation", "Cannot be null because it is a C++ reference (&).");
            var arg1 = centre_of_rotation.__Instance;
            var arg3 = ReferenceEquals(offset_after_rotation, null) ? global::System.IntPtr.Zero : offset_after_rotation.__Instance;
            var __ret = new wxImage.Internal();
            Internal.Rotate_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), angle, arg1, interpolating, arg3);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage Rotate90(bool clockwise)
        {
            var __ret = new wxImage.Internal();
            Internal.Rotate90_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), clockwise);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage Rotate180()
        {
            var __ret = new wxImage.Internal();
            Internal.Rotate180_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage Mirror(bool horizontally)
        {
            var __ret = new wxImage.Internal();
            Internal.Mirror_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), horizontally);
            return wxImage.__CreateInstance(__ret);
        }

        public void Replace(byte r1, byte g1, byte b1, byte r2, byte g2, byte b2)
        {
            Internal.Replace_0((__Instance + __PointerAdjustment), r1, g1, b1, r2, g2, b2);
        }

        public wxImage ConvertToGreyscale(double weight_r, double weight_g, double weight_b)
        {
            var __ret = new wxImage.Internal();
            Internal.ConvertToGreyscale_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), weight_r, weight_g, weight_b);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage ConvertToGreyscale()
        {
            var __ret = new wxImage.Internal();
            Internal.ConvertToGreyscale_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage ConvertToMono(byte r, byte g, byte b)
        {
            var __ret = new wxImage.Internal();
            Internal.ConvertToMono_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), r, g, b);
            return wxImage.__CreateInstance(__ret);
        }

        public wxImage ConvertToDisabled(byte brightness)
        {
            var __ret = new wxImage.Internal();
            Internal.ConvertToDisabled_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), brightness);
            return wxImage.__CreateInstance(__ret);
        }

        public void SetRGB(int x, int y, byte r, byte g, byte b)
        {
            Internal.SetRGB_0((__Instance + __PointerAdjustment), x, y, r, g, b);
        }

        public void SetRGB(wxRect rect, byte r, byte g, byte b)
        {
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rect.__Instance;
            Internal.SetRGB_1((__Instance + __PointerAdjustment), arg0, r, g, b);
        }

        public byte GetRed(int x, int y)
        {
            var __ret = Internal.GetRed_0((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public byte GetGreen(int x, int y)
        {
            var __ret = Internal.GetGreen_0((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public byte GetBlue(int x, int y)
        {
            var __ret = Internal.GetBlue_0((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public void SetAlpha(int x, int y, byte alpha)
        {
            Internal.SetAlpha_0((__Instance + __PointerAdjustment), x, y, alpha);
        }

        public byte GetAlpha(int x, int y)
        {
            var __ret = Internal.GetAlpha_0((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        public bool FindFirstUnusedColour(byte* r, byte* g, byte* b, byte startR, byte startG, byte startB)
        {
            var arg0 = r;
            var arg1 = g;
            var arg2 = b;
            var __ret = Internal.FindFirstUnusedColour_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, startR, startG, startB);
            return __ret;
        }

        public bool SetMaskFromImage(wxImage mask, byte mr, byte mg, byte mb)
        {
            if (ReferenceEquals(mask, null))
                throw new global::System.ArgumentNullException("mask", "Cannot be null because it is a C++ reference (&).");
            var arg0 = mask.__Instance;
            var __ret = Internal.SetMaskFromImage_0((__Instance + __PointerAdjustment), arg0, mr, mg, mb);
            return __ret;
        }

        public bool ConvertAlphaToMask(byte threshold)
        {
            var __ret = Internal.ConvertAlphaToMask_0((__Instance + __PointerAdjustment), threshold);
            return __ret;
        }

        public bool ConvertAlphaToMask(byte mr, byte mg, byte mb, byte threshold)
        {
            var __ret = Internal.ConvertAlphaToMask_1((__Instance + __PointerAdjustment), mr, mg, mb, threshold);
            return __ret;
        }

        public bool ConvertColourToAlpha(byte r, byte g, byte b)
        {
            var __ret = Internal.ConvertColourToAlpha_0((__Instance + __PointerAdjustment), r, g, b);
            return __ret;
        }

        public void SetLoadFlags(int flags)
        {
            Internal.SetLoadFlags_0((__Instance + __PointerAdjustment), flags);
        }

        public int GetLoadFlags()
        {
            var __ret = Internal.GetLoadFlags_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual bool LoadFile(wxString name, wxBitmapType type, int index)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___LoadFile_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_int));
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = type;
            var __ret = ___LoadFile_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, index);
            return __ret;
        }

        public virtual bool LoadFile(wxString name, wxString mimetype, int index)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___LoadFile_1Delegate = (Delegates.Func_bool_IntPtr_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_IntPtr_int));
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            if (ReferenceEquals(mimetype, null))
                throw new global::System.ArgumentNullException("mimetype", "Cannot be null because it is a C++ reference (&).");
            var arg1 = mimetype.__Instance;
            var __ret = ___LoadFile_1Delegate((__Instance + __PointerAdjustment), arg0, arg1, index);
            return __ret;
        }

        public virtual bool LoadFile(wxInputStream stream, wxBitmapType type, int index)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___LoadFile_2Delegate = (Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_int));
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var arg1 = type;
            var __ret = ___LoadFile_2Delegate((__Instance + __PointerAdjustment), arg0, arg1, index);
            return __ret;
        }

        public virtual bool LoadFile(wxInputStream stream, wxString mimetype, int index)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___LoadFile_3Delegate = (Delegates.Func_bool_IntPtr_IntPtr_IntPtr_int) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_IntPtr_int));
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            if (ReferenceEquals(mimetype, null))
                throw new global::System.ArgumentNullException("mimetype", "Cannot be null because it is a C++ reference (&).");
            var arg1 = mimetype.__Instance;
            var __ret = ___LoadFile_3Delegate((__Instance + __PointerAdjustment), arg0, arg1, index);
            return __ret;
        }

        public virtual bool SaveFile(wxString name)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___SaveFile_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = ___SaveFile_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public virtual bool SaveFile(wxString name, wxBitmapType type)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___SaveFile_1Delegate = (Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType));
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = type;
            var __ret = ___SaveFile_1Delegate((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public virtual bool SaveFile(wxString name, wxString mimetype)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___SaveFile_2Delegate = (Delegates.Func_bool_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            if (ReferenceEquals(mimetype, null))
                throw new global::System.ArgumentNullException("mimetype", "Cannot be null because it is a C++ reference (&).");
            var arg1 = mimetype.__Instance;
            var __ret = ___SaveFile_2Delegate((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public virtual bool SaveFile(wxOutputStream stream, wxBitmapType type)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___SaveFile_3Delegate = (Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType));
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var arg1 = type;
            var __ret = ___SaveFile_3Delegate((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public virtual bool SaveFile(wxOutputStream stream, wxString mimetype)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___SaveFile_4Delegate = (Delegates.Func_bool_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            if (ReferenceEquals(mimetype, null))
                throw new global::System.ArgumentNullException("mimetype", "Cannot be null because it is a C++ reference (&).");
            var arg1 = mimetype.__Instance;
            var __ret = ___SaveFile_4Delegate((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool Ok()
        {
            var __ret = Internal.Ok_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsOk()
        {
            var __ret = Internal.IsOk_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetWidth()
        {
            var __ret = Internal.GetWidth_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetHeight()
        {
            var __ret = Internal.GetHeight_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxSize GetSize()
        {
            var __ret = Internal.GetSize_0((__Instance + __PointerAdjustment));
            return wxSize.__CreateInstance(__ret);
        }

        public wxBitmapType GetType()
        {
            var __ret = Internal.GetType_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetType(wxBitmapType type)
        {
            var arg0 = type;
            Internal.SetType_0((__Instance + __PointerAdjustment), arg0);
        }

        public byte* GetData()
        {
            var __ret = Internal.GetData_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetData(byte* data, bool static_data)
        {
            var arg0 = data;
            Internal.SetData_0((__Instance + __PointerAdjustment), arg0, static_data);
        }

        public void SetData(byte* data, int new_width, int new_height, bool static_data)
        {
            var arg0 = data;
            Internal.SetData_1((__Instance + __PointerAdjustment), arg0, new_width, new_height, static_data);
        }

        public byte* GetAlpha()
        {
            var __ret = Internal.GetAlpha_1((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool HasAlpha()
        {
            var __ret = Internal.HasAlpha_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetAlpha(byte* alpha, bool static_data)
        {
            var arg0 = alpha;
            Internal.SetAlpha_1((__Instance + __PointerAdjustment), arg0, static_data);
        }

        public void InitAlpha()
        {
            Internal.InitAlpha_0((__Instance + __PointerAdjustment));
        }

        public void ClearAlpha()
        {
            Internal.ClearAlpha_0((__Instance + __PointerAdjustment));
        }

        public bool IsTransparent(int x, int y, byte threshold)
        {
            var __ret = Internal.IsTransparent_0((__Instance + __PointerAdjustment), x, y, threshold);
            return __ret;
        }

        public void SetMaskColour(byte r, byte g, byte b)
        {
            Internal.SetMaskColour_0((__Instance + __PointerAdjustment), r, g, b);
        }

        public bool GetOrFindMaskColour(byte* r, byte* g, byte* b)
        {
            var arg0 = r;
            var arg1 = g;
            var arg2 = b;
            var __ret = Internal.GetOrFindMaskColour_0((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            return __ret;
        }

        public byte GetMaskRed()
        {
            var __ret = Internal.GetMaskRed_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public byte GetMaskGreen()
        {
            var __ret = Internal.GetMaskGreen_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public byte GetMaskBlue()
        {
            var __ret = Internal.GetMaskBlue_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetMask(bool mask)
        {
            Internal.SetMask_0((__Instance + __PointerAdjustment), mask);
        }

        public bool HasMask()
        {
            var __ret = Internal.HasMask_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool HasPalette()
        {
            var __ret = Internal.HasPalette_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxPalette GetPalette()
        {
            var __ret = Internal.GetPalette_0((__Instance + __PointerAdjustment));
            wxPalette __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPalette.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPalette) wxPalette.NativeToManagedMap[__ret];
            else wxPalette.NativeToManagedMap[__ret] = __result0 = (wxPalette) wxPalette.__CreateInstance(__ret);
            return __result0;
        }

        public void SetPalette(wxPalette palette)
        {
            if (ReferenceEquals(palette, null))
                throw new global::System.ArgumentNullException("palette", "Cannot be null because it is a C++ reference (&).");
            var arg0 = palette.__Instance;
            Internal.SetPalette_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetOption(wxString name, wxString value)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            if (ReferenceEquals(value, null))
                throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
            var arg1 = value.__Instance;
            Internal.SetOption_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void SetOption(wxString name, int value)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            Internal.SetOption_1((__Instance + __PointerAdjustment), arg0, value);
        }

        public wxString GetOption(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = new wxString.Internal();
            Internal.GetOption_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public int GetOptionInt(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = Internal.GetOptionInt_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool HasOption(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = Internal.HasOption_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public uint CountColours(uint stopafter)
        {
            var __ret = Internal.CountColours_0((__Instance + __PointerAdjustment), stopafter);
            return __ret;
        }

        public uint ComputeHistogram(wxImageHistogram h)
        {
            if (ReferenceEquals(h, null))
                throw new global::System.ArgumentNullException("h", "Cannot be null because it is a C++ reference (&).");
            var arg0 = h.__Instance;
            var __ret = Internal.ComputeHistogram_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void RotateHue(double angle)
        {
            Internal.RotateHue_0((__Instance + __PointerAdjustment), angle);
        }

        protected int XYToIndex(int x, int y)
        {
            var __ret = Internal.XYToIndex_0((__Instance + __PointerAdjustment), x, y);
            return __ret;
        }

        protected override wxRefCounter CreateRefData()
        {
            return base.CreateRefData();
        }

        protected override wxRefCounter CloneRefData(wxRefCounter data)
        {
            return base.CloneRefData(data);
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static void SetDefaultLoadFlags(int flags)
        {
            Internal.SetDefaultLoadFlags_0(flags);
        }

        public static int GetDefaultLoadFlags()
        {
            var __ret = Internal.GetDefaultLoadFlags_0();
            return __ret;
        }

        public static bool CanRead(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = Internal.CanRead_0(arg0);
            return __ret;
        }

        public static int GetImageCount(wxString name, wxBitmapType type)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var arg1 = type;
            var __ret = Internal.GetImageCount_0(arg0, arg1);
            return __ret;
        }

        public static bool CanRead(wxInputStream stream)
        {
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var __ret = Internal.CanRead_1(arg0);
            return __ret;
        }

        public static int GetImageCount(wxInputStream stream, wxBitmapType type)
        {
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var arg1 = type;
            var __ret = Internal.GetImageCount_1(arg0, arg1);
            return __ret;
        }

        public static wxList GetHandlers()
        {
            var __ret = Internal.GetHandlers_0();
            wxList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxList) wxList.NativeToManagedMap[__ret];
            else wxList.NativeToManagedMap[__ret] = __result0 = (wxList) wxList.__CreateInstance(__ret);
            return __result0;
        }

        public static void AddHandler(wxImageHandler handler)
        {
            var arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__Instance;
            Internal.AddHandler_0(arg0);
        }

        public static void InsertHandler(wxImageHandler handler)
        {
            var arg0 = ReferenceEquals(handler, null) ? global::System.IntPtr.Zero : handler.__Instance;
            Internal.InsertHandler_0(arg0);
        }

        public static bool RemoveHandler(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = Internal.RemoveHandler_0(arg0);
            return __ret;
        }

        public static wxImageHandler FindHandler(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = Internal.FindHandler_0(arg0);
            wxImageHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxImageHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxImageHandler) wxImageHandler.NativeToManagedMap[__ret];
            else wxImageHandler.NativeToManagedMap[__ret] = __result0 = (wxImageHandler) wxImageHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static wxImageHandler FindHandler(wxString extension, wxBitmapType imageType)
        {
            if (ReferenceEquals(extension, null))
                throw new global::System.ArgumentNullException("extension", "Cannot be null because it is a C++ reference (&).");
            var arg0 = extension.__Instance;
            var arg1 = imageType;
            var __ret = Internal.FindHandler_1(arg0, arg1);
            wxImageHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxImageHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxImageHandler) wxImageHandler.NativeToManagedMap[__ret];
            else wxImageHandler.NativeToManagedMap[__ret] = __result0 = (wxImageHandler) wxImageHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static wxImageHandler FindHandler(wxBitmapType imageType)
        {
            var arg0 = imageType;
            var __ret = Internal.FindHandler_2(arg0);
            wxImageHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxImageHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxImageHandler) wxImageHandler.NativeToManagedMap[__ret];
            else wxImageHandler.NativeToManagedMap[__ret] = __result0 = (wxImageHandler) wxImageHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static wxImageHandler FindHandlerMime(wxString mimetype)
        {
            if (ReferenceEquals(mimetype, null))
                throw new global::System.ArgumentNullException("mimetype", "Cannot be null because it is a C++ reference (&).");
            var arg0 = mimetype.__Instance;
            var __ret = Internal.FindHandlerMime_0(arg0);
            wxImageHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxImageHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxImageHandler) wxImageHandler.NativeToManagedMap[__ret];
            else wxImageHandler.NativeToManagedMap[__ret] = __result0 = (wxImageHandler) wxImageHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static wxString GetImageExtWildcard()
        {
            var __ret = new wxString.Internal();
            Internal.GetImageExtWildcard_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        public static void CleanUpHandlers()
        {
            Internal.CleanUpHandlers_0();
        }

        public static void InitStandardHandlers()
        {
            Internal.InitStandardHandlers_0();
        }

        public static wxImage.HSVValue RGBtoHSV(wxImage.RGBValue rgb)
        {
            if (ReferenceEquals(rgb, null))
                throw new global::System.ArgumentNullException("rgb", "Cannot be null because it is a C++ reference (&).");
            var arg0 = rgb.__Instance;
            var __ret = new wxImage.HSVValue.Internal();
            Internal.RGBtoHSV_0(new IntPtr(&__ret), arg0);
            return wxImage.HSVValue.__CreateInstance(__ret);
        }

        public static wxImage.RGBValue HSVtoRGB(wxImage.HSVValue hsv)
        {
            if (ReferenceEquals(hsv, null))
                throw new global::System.ArgumentNullException("hsv", "Cannot be null because it is a C++ reference (&).");
            var arg0 = hsv.__Instance;
            var __ret = new wxImage.RGBValue.Internal();
            Internal.HSVtoRGB_0(new IntPtr(&__ret), arg0);
            return wxImage.RGBValue.__CreateInstance(__ret);
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN7wxImage12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxImage
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData* CreateRefData() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData* CloneRefData(const wxObjectRefData* data) const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool LoadFile( const wxString& name, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 )
        private static Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_int _LoadFile_0DelegateInstance;

        private static bool _LoadFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr name, wxBitmapType type, int index)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (name == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(name))
                __result0 = (wxString) wxString.NativeToManagedMap[name];
            else __result0 = wxString.__CreateInstance(name);
            var __ret = __target.LoadFile(__result0, type, index);
            return __ret;
        }

        // bool LoadFile( const wxString& name, const wxString& mimetype, int index = -1 )
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr_int _LoadFile_1DelegateInstance;

        private static bool _LoadFile_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr mimetype, int index)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (name == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(name))
                __result0 = (wxString) wxString.NativeToManagedMap[name];
            else __result0 = wxString.__CreateInstance(name);
            wxString __result1;
            if (mimetype == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(mimetype))
                __result1 = (wxString) wxString.NativeToManagedMap[mimetype];
            else __result1 = wxString.__CreateInstance(mimetype);
            var __ret = __target.LoadFile(__result0, __result1, index);
            return __ret;
        }

        // bool LoadFile( wxInputStream& stream, wxBitmapType type = wxBITMAP_TYPE_ANY, int index = -1 )
        private static Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType_int _LoadFile_2DelegateInstance;

        private static bool _LoadFile_2DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream, wxBitmapType type, int index)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.LoadFile(__result0, type, index);
            return __ret;
        }

        // bool LoadFile( wxInputStream& stream, const wxString& mimetype, int index = -1 )
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr_int _LoadFile_3DelegateInstance;

        private static bool _LoadFile_3DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream, global::System.IntPtr mimetype, int index)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            wxString __result1;
            if (mimetype == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(mimetype))
                __result1 = (wxString) wxString.NativeToManagedMap[mimetype];
            else __result1 = wxString.__CreateInstance(mimetype);
            var __ret = __target.LoadFile(__result0, __result1, index);
            return __ret;
        }

        // bool SaveFile( const wxString& name ) const
        private static Delegates.Func_bool_IntPtr_IntPtr _SaveFile_0DelegateInstance;

        private static bool _SaveFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr name)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (name == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(name))
                __result0 = (wxString) wxString.NativeToManagedMap[name];
            else __result0 = wxString.__CreateInstance(name);
            var __ret = __target.SaveFile(__result0);
            return __ret;
        }

        // bool SaveFile( const wxString& name, wxBitmapType type ) const
        private static Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType _SaveFile_1DelegateInstance;

        private static bool _SaveFile_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr name, wxBitmapType type)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (name == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(name))
                __result0 = (wxString) wxString.NativeToManagedMap[name];
            else __result0 = wxString.__CreateInstance(name);
            var __ret = __target.SaveFile(__result0, type);
            return __ret;
        }

        // bool SaveFile( const wxString& name, const wxString& mimetype ) const
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr _SaveFile_2DelegateInstance;

        private static bool _SaveFile_2DelegateHook(global::System.IntPtr instance, global::System.IntPtr name, global::System.IntPtr mimetype)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (name == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(name))
                __result0 = (wxString) wxString.NativeToManagedMap[name];
            else __result0 = wxString.__CreateInstance(name);
            wxString __result1;
            if (mimetype == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(mimetype))
                __result1 = (wxString) wxString.NativeToManagedMap[mimetype];
            else __result1 = wxString.__CreateInstance(mimetype);
            var __ret = __target.SaveFile(__result0, __result1);
            return __ret;
        }

        // bool SaveFile( wxOutputStream& stream, wxBitmapType type ) const
        private static Delegates.Func_bool_IntPtr_IntPtr_wxBitmapType _SaveFile_3DelegateInstance;

        private static bool _SaveFile_3DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream, wxBitmapType type)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxOutputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[stream];
            else __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.SaveFile(__result0, type);
            return __ret;
        }

        // bool SaveFile( wxOutputStream& stream, const wxString& mimetype ) const
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr _SaveFile_4DelegateInstance;

        private static bool _SaveFile_4DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream, global::System.IntPtr mimetype)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxImage) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxOutputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[stream];
            else __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(stream, skipVTables: true);
            wxString __result1;
            if (mimetype == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(mimetype))
                __result1 = (wxString) wxString.NativeToManagedMap[mimetype];
            else __result1 = wxString.__CreateInstance(mimetype);
            var __ret = __target.SaveFile(__result0, __result1);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[13];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _LoadFile_0DelegateInstance += _LoadFile_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_LoadFile_0DelegateInstance).ToPointer();
                _LoadFile_1DelegateInstance += _LoadFile_1DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_LoadFile_1DelegateInstance).ToPointer();
                _LoadFile_2DelegateInstance += _LoadFile_2DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_LoadFile_2DelegateInstance).ToPointer();
                _LoadFile_3DelegateInstance += _LoadFile_3DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_LoadFile_3DelegateInstance).ToPointer();
                _SaveFile_0DelegateInstance += _SaveFile_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_SaveFile_0DelegateInstance).ToPointer();
                _SaveFile_1DelegateInstance += _SaveFile_1DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_SaveFile_1DelegateInstance).ToPointer();
                _SaveFile_2DelegateInstance += _SaveFile_2DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_SaveFile_2DelegateInstance).ToPointer();
                _SaveFile_3DelegateInstance += _SaveFile_3DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_SaveFile_3DelegateInstance).ToPointer();
                _SaveFile_4DelegateInstance += _SaveFile_4DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_SaveFile_4DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(16 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(16 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    internal unsafe partial class wxImageHandlerInternal : wxImageHandler, IDisposable
    {
        private static void* __CopyValue(wxImageHandler.Internal native)
        {
            var ret = Marshal.AllocHGlobal(92);
            *(wxImageHandler.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxImageHandlerInternal(wxImageHandler.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxImageHandlerInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        protected override bool DoCanRead(wxInputStream stream)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___DoCanRead_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var __ret = ___DoCanRead_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }
    }


}
