//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxGIFHandler : wxImageHandler, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 376)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public wxString.Internal m_name;

            [FieldOffset(28)]
            public wxString.Internal m_extension;

            [FieldOffset(48)]
            public wxArrayString.Internal m_altExtensions;

            [FieldOffset(68)]
            public wxString.Internal m_mime;

            [FieldOffset(88)]
            public wxBitmapType m_type;

            [FieldOffset(92)]
            public uint m_crntShiftDWord;

            [FieldOffset(96)]
            public int m_pixelCount;

            [FieldOffset(100)]
            public global::System.IntPtr m_hashTable;

            [FieldOffset(104)]
            public short m_EOFCode;

            [FieldOffset(106)]
            public short m_clearCode;

            [FieldOffset(108)]
            public short m_runningCode;

            [FieldOffset(110)]
            public short m_runningBits;

            [FieldOffset(112)]
            public short m_maxCode1;

            [FieldOffset(114)]
            public short m_crntCode;

            [FieldOffset(116)]
            public short m_crntShiftState;

            [FieldOffset(118)]
            public fixed byte m_LZBuf[256];

            [FieldOffset(119)]
            public byte __dummy_m_LZBuf_1;

            [FieldOffset(120)]
            public byte __dummy_m_LZBuf_2;

            [FieldOffset(121)]
            public byte __dummy_m_LZBuf_3;

            [FieldOffset(122)]
            public byte __dummy_m_LZBuf_4;

            [FieldOffset(123)]
            public byte __dummy_m_LZBuf_5;

            [FieldOffset(124)]
            public byte __dummy_m_LZBuf_6;

            [FieldOffset(125)]
            public byte __dummy_m_LZBuf_7;

            [FieldOffset(126)]
            public byte __dummy_m_LZBuf_8;

            [FieldOffset(127)]
            public byte __dummy_m_LZBuf_9;

            [FieldOffset(128)]
            public byte __dummy_m_LZBuf_10;

            [FieldOffset(129)]
            public byte __dummy_m_LZBuf_11;

            [FieldOffset(130)]
            public byte __dummy_m_LZBuf_12;

            [FieldOffset(131)]
            public byte __dummy_m_LZBuf_13;

            [FieldOffset(132)]
            public byte __dummy_m_LZBuf_14;

            [FieldOffset(133)]
            public byte __dummy_m_LZBuf_15;

            [FieldOffset(134)]
            public byte __dummy_m_LZBuf_16;

            [FieldOffset(135)]
            public byte __dummy_m_LZBuf_17;

            [FieldOffset(136)]
            public byte __dummy_m_LZBuf_18;

            [FieldOffset(137)]
            public byte __dummy_m_LZBuf_19;

            [FieldOffset(138)]
            public byte __dummy_m_LZBuf_20;

            [FieldOffset(139)]
            public byte __dummy_m_LZBuf_21;

            [FieldOffset(140)]
            public byte __dummy_m_LZBuf_22;

            [FieldOffset(141)]
            public byte __dummy_m_LZBuf_23;

            [FieldOffset(142)]
            public byte __dummy_m_LZBuf_24;

            [FieldOffset(143)]
            public byte __dummy_m_LZBuf_25;

            [FieldOffset(144)]
            public byte __dummy_m_LZBuf_26;

            [FieldOffset(145)]
            public byte __dummy_m_LZBuf_27;

            [FieldOffset(146)]
            public byte __dummy_m_LZBuf_28;

            [FieldOffset(147)]
            public byte __dummy_m_LZBuf_29;

            [FieldOffset(148)]
            public byte __dummy_m_LZBuf_30;

            [FieldOffset(149)]
            public byte __dummy_m_LZBuf_31;

            [FieldOffset(150)]
            public byte __dummy_m_LZBuf_32;

            [FieldOffset(151)]
            public byte __dummy_m_LZBuf_33;

            [FieldOffset(152)]
            public byte __dummy_m_LZBuf_34;

            [FieldOffset(153)]
            public byte __dummy_m_LZBuf_35;

            [FieldOffset(154)]
            public byte __dummy_m_LZBuf_36;

            [FieldOffset(155)]
            public byte __dummy_m_LZBuf_37;

            [FieldOffset(156)]
            public byte __dummy_m_LZBuf_38;

            [FieldOffset(157)]
            public byte __dummy_m_LZBuf_39;

            [FieldOffset(158)]
            public byte __dummy_m_LZBuf_40;

            [FieldOffset(159)]
            public byte __dummy_m_LZBuf_41;

            [FieldOffset(160)]
            public byte __dummy_m_LZBuf_42;

            [FieldOffset(161)]
            public byte __dummy_m_LZBuf_43;

            [FieldOffset(162)]
            public byte __dummy_m_LZBuf_44;

            [FieldOffset(163)]
            public byte __dummy_m_LZBuf_45;

            [FieldOffset(164)]
            public byte __dummy_m_LZBuf_46;

            [FieldOffset(165)]
            public byte __dummy_m_LZBuf_47;

            [FieldOffset(166)]
            public byte __dummy_m_LZBuf_48;

            [FieldOffset(167)]
            public byte __dummy_m_LZBuf_49;

            [FieldOffset(168)]
            public byte __dummy_m_LZBuf_50;

            [FieldOffset(169)]
            public byte __dummy_m_LZBuf_51;

            [FieldOffset(170)]
            public byte __dummy_m_LZBuf_52;

            [FieldOffset(171)]
            public byte __dummy_m_LZBuf_53;

            [FieldOffset(172)]
            public byte __dummy_m_LZBuf_54;

            [FieldOffset(173)]
            public byte __dummy_m_LZBuf_55;

            [FieldOffset(174)]
            public byte __dummy_m_LZBuf_56;

            [FieldOffset(175)]
            public byte __dummy_m_LZBuf_57;

            [FieldOffset(176)]
            public byte __dummy_m_LZBuf_58;

            [FieldOffset(177)]
            public byte __dummy_m_LZBuf_59;

            [FieldOffset(178)]
            public byte __dummy_m_LZBuf_60;

            [FieldOffset(179)]
            public byte __dummy_m_LZBuf_61;

            [FieldOffset(180)]
            public byte __dummy_m_LZBuf_62;

            [FieldOffset(181)]
            public byte __dummy_m_LZBuf_63;

            [FieldOffset(182)]
            public byte __dummy_m_LZBuf_64;

            [FieldOffset(183)]
            public byte __dummy_m_LZBuf_65;

            [FieldOffset(184)]
            public byte __dummy_m_LZBuf_66;

            [FieldOffset(185)]
            public byte __dummy_m_LZBuf_67;

            [FieldOffset(186)]
            public byte __dummy_m_LZBuf_68;

            [FieldOffset(187)]
            public byte __dummy_m_LZBuf_69;

            [FieldOffset(188)]
            public byte __dummy_m_LZBuf_70;

            [FieldOffset(189)]
            public byte __dummy_m_LZBuf_71;

            [FieldOffset(190)]
            public byte __dummy_m_LZBuf_72;

            [FieldOffset(191)]
            public byte __dummy_m_LZBuf_73;

            [FieldOffset(192)]
            public byte __dummy_m_LZBuf_74;

            [FieldOffset(193)]
            public byte __dummy_m_LZBuf_75;

            [FieldOffset(194)]
            public byte __dummy_m_LZBuf_76;

            [FieldOffset(195)]
            public byte __dummy_m_LZBuf_77;

            [FieldOffset(196)]
            public byte __dummy_m_LZBuf_78;

            [FieldOffset(197)]
            public byte __dummy_m_LZBuf_79;

            [FieldOffset(198)]
            public byte __dummy_m_LZBuf_80;

            [FieldOffset(199)]
            public byte __dummy_m_LZBuf_81;

            [FieldOffset(200)]
            public byte __dummy_m_LZBuf_82;

            [FieldOffset(201)]
            public byte __dummy_m_LZBuf_83;

            [FieldOffset(202)]
            public byte __dummy_m_LZBuf_84;

            [FieldOffset(203)]
            public byte __dummy_m_LZBuf_85;

            [FieldOffset(204)]
            public byte __dummy_m_LZBuf_86;

            [FieldOffset(205)]
            public byte __dummy_m_LZBuf_87;

            [FieldOffset(206)]
            public byte __dummy_m_LZBuf_88;

            [FieldOffset(207)]
            public byte __dummy_m_LZBuf_89;

            [FieldOffset(208)]
            public byte __dummy_m_LZBuf_90;

            [FieldOffset(209)]
            public byte __dummy_m_LZBuf_91;

            [FieldOffset(210)]
            public byte __dummy_m_LZBuf_92;

            [FieldOffset(211)]
            public byte __dummy_m_LZBuf_93;

            [FieldOffset(212)]
            public byte __dummy_m_LZBuf_94;

            [FieldOffset(213)]
            public byte __dummy_m_LZBuf_95;

            [FieldOffset(214)]
            public byte __dummy_m_LZBuf_96;

            [FieldOffset(215)]
            public byte __dummy_m_LZBuf_97;

            [FieldOffset(216)]
            public byte __dummy_m_LZBuf_98;

            [FieldOffset(217)]
            public byte __dummy_m_LZBuf_99;

            [FieldOffset(218)]
            public byte __dummy_m_LZBuf_100;

            [FieldOffset(219)]
            public byte __dummy_m_LZBuf_101;

            [FieldOffset(220)]
            public byte __dummy_m_LZBuf_102;

            [FieldOffset(221)]
            public byte __dummy_m_LZBuf_103;

            [FieldOffset(222)]
            public byte __dummy_m_LZBuf_104;

            [FieldOffset(223)]
            public byte __dummy_m_LZBuf_105;

            [FieldOffset(224)]
            public byte __dummy_m_LZBuf_106;

            [FieldOffset(225)]
            public byte __dummy_m_LZBuf_107;

            [FieldOffset(226)]
            public byte __dummy_m_LZBuf_108;

            [FieldOffset(227)]
            public byte __dummy_m_LZBuf_109;

            [FieldOffset(228)]
            public byte __dummy_m_LZBuf_110;

            [FieldOffset(229)]
            public byte __dummy_m_LZBuf_111;

            [FieldOffset(230)]
            public byte __dummy_m_LZBuf_112;

            [FieldOffset(231)]
            public byte __dummy_m_LZBuf_113;

            [FieldOffset(232)]
            public byte __dummy_m_LZBuf_114;

            [FieldOffset(233)]
            public byte __dummy_m_LZBuf_115;

            [FieldOffset(234)]
            public byte __dummy_m_LZBuf_116;

            [FieldOffset(235)]
            public byte __dummy_m_LZBuf_117;

            [FieldOffset(236)]
            public byte __dummy_m_LZBuf_118;

            [FieldOffset(237)]
            public byte __dummy_m_LZBuf_119;

            [FieldOffset(238)]
            public byte __dummy_m_LZBuf_120;

            [FieldOffset(239)]
            public byte __dummy_m_LZBuf_121;

            [FieldOffset(240)]
            public byte __dummy_m_LZBuf_122;

            [FieldOffset(241)]
            public byte __dummy_m_LZBuf_123;

            [FieldOffset(242)]
            public byte __dummy_m_LZBuf_124;

            [FieldOffset(243)]
            public byte __dummy_m_LZBuf_125;

            [FieldOffset(244)]
            public byte __dummy_m_LZBuf_126;

            [FieldOffset(245)]
            public byte __dummy_m_LZBuf_127;

            [FieldOffset(246)]
            public byte __dummy_m_LZBuf_128;

            [FieldOffset(247)]
            public byte __dummy_m_LZBuf_129;

            [FieldOffset(248)]
            public byte __dummy_m_LZBuf_130;

            [FieldOffset(249)]
            public byte __dummy_m_LZBuf_131;

            [FieldOffset(250)]
            public byte __dummy_m_LZBuf_132;

            [FieldOffset(251)]
            public byte __dummy_m_LZBuf_133;

            [FieldOffset(252)]
            public byte __dummy_m_LZBuf_134;

            [FieldOffset(253)]
            public byte __dummy_m_LZBuf_135;

            [FieldOffset(254)]
            public byte __dummy_m_LZBuf_136;

            [FieldOffset(255)]
            public byte __dummy_m_LZBuf_137;

            [FieldOffset(256)]
            public byte __dummy_m_LZBuf_138;

            [FieldOffset(257)]
            public byte __dummy_m_LZBuf_139;

            [FieldOffset(258)]
            public byte __dummy_m_LZBuf_140;

            [FieldOffset(259)]
            public byte __dummy_m_LZBuf_141;

            [FieldOffset(260)]
            public byte __dummy_m_LZBuf_142;

            [FieldOffset(261)]
            public byte __dummy_m_LZBuf_143;

            [FieldOffset(262)]
            public byte __dummy_m_LZBuf_144;

            [FieldOffset(263)]
            public byte __dummy_m_LZBuf_145;

            [FieldOffset(264)]
            public byte __dummy_m_LZBuf_146;

            [FieldOffset(265)]
            public byte __dummy_m_LZBuf_147;

            [FieldOffset(266)]
            public byte __dummy_m_LZBuf_148;

            [FieldOffset(267)]
            public byte __dummy_m_LZBuf_149;

            [FieldOffset(268)]
            public byte __dummy_m_LZBuf_150;

            [FieldOffset(269)]
            public byte __dummy_m_LZBuf_151;

            [FieldOffset(270)]
            public byte __dummy_m_LZBuf_152;

            [FieldOffset(271)]
            public byte __dummy_m_LZBuf_153;

            [FieldOffset(272)]
            public byte __dummy_m_LZBuf_154;

            [FieldOffset(273)]
            public byte __dummy_m_LZBuf_155;

            [FieldOffset(274)]
            public byte __dummy_m_LZBuf_156;

            [FieldOffset(275)]
            public byte __dummy_m_LZBuf_157;

            [FieldOffset(276)]
            public byte __dummy_m_LZBuf_158;

            [FieldOffset(277)]
            public byte __dummy_m_LZBuf_159;

            [FieldOffset(278)]
            public byte __dummy_m_LZBuf_160;

            [FieldOffset(279)]
            public byte __dummy_m_LZBuf_161;

            [FieldOffset(280)]
            public byte __dummy_m_LZBuf_162;

            [FieldOffset(281)]
            public byte __dummy_m_LZBuf_163;

            [FieldOffset(282)]
            public byte __dummy_m_LZBuf_164;

            [FieldOffset(283)]
            public byte __dummy_m_LZBuf_165;

            [FieldOffset(284)]
            public byte __dummy_m_LZBuf_166;

            [FieldOffset(285)]
            public byte __dummy_m_LZBuf_167;

            [FieldOffset(286)]
            public byte __dummy_m_LZBuf_168;

            [FieldOffset(287)]
            public byte __dummy_m_LZBuf_169;

            [FieldOffset(288)]
            public byte __dummy_m_LZBuf_170;

            [FieldOffset(289)]
            public byte __dummy_m_LZBuf_171;

            [FieldOffset(290)]
            public byte __dummy_m_LZBuf_172;

            [FieldOffset(291)]
            public byte __dummy_m_LZBuf_173;

            [FieldOffset(292)]
            public byte __dummy_m_LZBuf_174;

            [FieldOffset(293)]
            public byte __dummy_m_LZBuf_175;

            [FieldOffset(294)]
            public byte __dummy_m_LZBuf_176;

            [FieldOffset(295)]
            public byte __dummy_m_LZBuf_177;

            [FieldOffset(296)]
            public byte __dummy_m_LZBuf_178;

            [FieldOffset(297)]
            public byte __dummy_m_LZBuf_179;

            [FieldOffset(298)]
            public byte __dummy_m_LZBuf_180;

            [FieldOffset(299)]
            public byte __dummy_m_LZBuf_181;

            [FieldOffset(300)]
            public byte __dummy_m_LZBuf_182;

            [FieldOffset(301)]
            public byte __dummy_m_LZBuf_183;

            [FieldOffset(302)]
            public byte __dummy_m_LZBuf_184;

            [FieldOffset(303)]
            public byte __dummy_m_LZBuf_185;

            [FieldOffset(304)]
            public byte __dummy_m_LZBuf_186;

            [FieldOffset(305)]
            public byte __dummy_m_LZBuf_187;

            [FieldOffset(306)]
            public byte __dummy_m_LZBuf_188;

            [FieldOffset(307)]
            public byte __dummy_m_LZBuf_189;

            [FieldOffset(308)]
            public byte __dummy_m_LZBuf_190;

            [FieldOffset(309)]
            public byte __dummy_m_LZBuf_191;

            [FieldOffset(310)]
            public byte __dummy_m_LZBuf_192;

            [FieldOffset(311)]
            public byte __dummy_m_LZBuf_193;

            [FieldOffset(312)]
            public byte __dummy_m_LZBuf_194;

            [FieldOffset(313)]
            public byte __dummy_m_LZBuf_195;

            [FieldOffset(314)]
            public byte __dummy_m_LZBuf_196;

            [FieldOffset(315)]
            public byte __dummy_m_LZBuf_197;

            [FieldOffset(316)]
            public byte __dummy_m_LZBuf_198;

            [FieldOffset(317)]
            public byte __dummy_m_LZBuf_199;

            [FieldOffset(318)]
            public byte __dummy_m_LZBuf_200;

            [FieldOffset(319)]
            public byte __dummy_m_LZBuf_201;

            [FieldOffset(320)]
            public byte __dummy_m_LZBuf_202;

            [FieldOffset(321)]
            public byte __dummy_m_LZBuf_203;

            [FieldOffset(322)]
            public byte __dummy_m_LZBuf_204;

            [FieldOffset(323)]
            public byte __dummy_m_LZBuf_205;

            [FieldOffset(324)]
            public byte __dummy_m_LZBuf_206;

            [FieldOffset(325)]
            public byte __dummy_m_LZBuf_207;

            [FieldOffset(326)]
            public byte __dummy_m_LZBuf_208;

            [FieldOffset(327)]
            public byte __dummy_m_LZBuf_209;

            [FieldOffset(328)]
            public byte __dummy_m_LZBuf_210;

            [FieldOffset(329)]
            public byte __dummy_m_LZBuf_211;

            [FieldOffset(330)]
            public byte __dummy_m_LZBuf_212;

            [FieldOffset(331)]
            public byte __dummy_m_LZBuf_213;

            [FieldOffset(332)]
            public byte __dummy_m_LZBuf_214;

            [FieldOffset(333)]
            public byte __dummy_m_LZBuf_215;

            [FieldOffset(334)]
            public byte __dummy_m_LZBuf_216;

            [FieldOffset(335)]
            public byte __dummy_m_LZBuf_217;

            [FieldOffset(336)]
            public byte __dummy_m_LZBuf_218;

            [FieldOffset(337)]
            public byte __dummy_m_LZBuf_219;

            [FieldOffset(338)]
            public byte __dummy_m_LZBuf_220;

            [FieldOffset(339)]
            public byte __dummy_m_LZBuf_221;

            [FieldOffset(340)]
            public byte __dummy_m_LZBuf_222;

            [FieldOffset(341)]
            public byte __dummy_m_LZBuf_223;

            [FieldOffset(342)]
            public byte __dummy_m_LZBuf_224;

            [FieldOffset(343)]
            public byte __dummy_m_LZBuf_225;

            [FieldOffset(344)]
            public byte __dummy_m_LZBuf_226;

            [FieldOffset(345)]
            public byte __dummy_m_LZBuf_227;

            [FieldOffset(346)]
            public byte __dummy_m_LZBuf_228;

            [FieldOffset(347)]
            public byte __dummy_m_LZBuf_229;

            [FieldOffset(348)]
            public byte __dummy_m_LZBuf_230;

            [FieldOffset(349)]
            public byte __dummy_m_LZBuf_231;

            [FieldOffset(350)]
            public byte __dummy_m_LZBuf_232;

            [FieldOffset(351)]
            public byte __dummy_m_LZBuf_233;

            [FieldOffset(352)]
            public byte __dummy_m_LZBuf_234;

            [FieldOffset(353)]
            public byte __dummy_m_LZBuf_235;

            [FieldOffset(354)]
            public byte __dummy_m_LZBuf_236;

            [FieldOffset(355)]
            public byte __dummy_m_LZBuf_237;

            [FieldOffset(356)]
            public byte __dummy_m_LZBuf_238;

            [FieldOffset(357)]
            public byte __dummy_m_LZBuf_239;

            [FieldOffset(358)]
            public byte __dummy_m_LZBuf_240;

            [FieldOffset(359)]
            public byte __dummy_m_LZBuf_241;

            [FieldOffset(360)]
            public byte __dummy_m_LZBuf_242;

            [FieldOffset(361)]
            public byte __dummy_m_LZBuf_243;

            [FieldOffset(362)]
            public byte __dummy_m_LZBuf_244;

            [FieldOffset(363)]
            public byte __dummy_m_LZBuf_245;

            [FieldOffset(364)]
            public byte __dummy_m_LZBuf_246;

            [FieldOffset(365)]
            public byte __dummy_m_LZBuf_247;

            [FieldOffset(366)]
            public byte __dummy_m_LZBuf_248;

            [FieldOffset(367)]
            public byte __dummy_m_LZBuf_249;

            [FieldOffset(368)]
            public byte __dummy_m_LZBuf_250;

            [FieldOffset(369)]
            public byte __dummy_m_LZBuf_251;

            [FieldOffset(370)]
            public byte __dummy_m_LZBuf_252;

            [FieldOffset(371)]
            public byte __dummy_m_LZBuf_253;

            [FieldOffset(372)]
            public byte __dummy_m_LZBuf_254;

            [FieldOffset(373)]
            public byte __dummy_m_LZBuf_255;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandlerC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandlerC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandler13InitHashTableEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool InitHashTable_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandler14ClearHashTableEv")]
            internal static extern void ClearHashTable_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandler15InsertHashTableEmi")]
            internal static extern void InsertHashTable_0(global::System.IntPtr instance, uint key, int code);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandler15ExistsHashTableEm")]
            internal static extern int ExistsHashTable_0(global::System.IntPtr instance, uint key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandler14CompressOutputEP14wxOutputStreami")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CompressOutput_0(global::System.IntPtr instance, global::System.IntPtr _0, int code);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandler13SetupCompressEP14wxOutputStreami")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool SetupCompress_0(global::System.IntPtr instance, global::System.IntPtr _0, int bpp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandler12CompressLineEP14wxOutputStreamPKhi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CompressLine_0(global::System.IntPtr instance, global::System.IntPtr _0, byte* line, int lineLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxGIFHandler14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxGIFHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxGIFHandler(native.ToPointer(), skipVTables);
        }

        public static wxGIFHandler __CreateInstance(wxGIFHandler.Internal native, bool skipVTables = false)
        {
            return new wxGIFHandler(native, skipVTables);
        }

        private static void* __CopyValue(wxGIFHandler.Internal native)
        {
            var ret = Marshal.AllocHGlobal(376);
            wxGIFHandler.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxGIFHandler(wxGIFHandler.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxGIFHandler(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxGIFHandler()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(376);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxGIFHandler");
        }

        public wxGIFHandler(wxGIFHandler _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(376);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxGIFHandler");
        }

        public override bool LoadFile(wxImage image, wxInputStream stream, bool verbose, int index)
        {
            return base.LoadFile(image, stream, verbose, index);
        }

        public override bool SaveFile(wxImage image, wxOutputStream stream, bool verbose)
        {
            return base.SaveFile(image, stream, verbose);
        }

        protected override int DoGetImageCount(wxInputStream stream)
        {
            return base.DoGetImageCount(stream);
        }

        protected override bool DoCanRead(wxInputStream stream)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___DoCanRead_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var __ret = ___DoCanRead_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected bool InitHashTable()
        {
            var __ret = Internal.InitHashTable_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void ClearHashTable()
        {
            Internal.ClearHashTable_0((__Instance + __PointerAdjustment));
        }

        protected void InsertHashTable(uint key, int code)
        {
            Internal.InsertHashTable_0((__Instance + __PointerAdjustment), key, code);
        }

        protected int ExistsHashTable(uint key)
        {
            var __ret = Internal.ExistsHashTable_0((__Instance + __PointerAdjustment), key);
            return __ret;
        }

        protected bool CompressOutput(wxOutputStream _0, int code)
        {
            var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = Internal.CompressOutput_0((__Instance + __PointerAdjustment), arg0, code);
            return __ret;
        }

        protected bool SetupCompress(wxOutputStream _0, int bpp)
        {
            var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var __ret = Internal.SetupCompress_0((__Instance + __PointerAdjustment), arg0, bpp);
            return __ret;
        }

        protected bool CompressLine(wxOutputStream _0, byte* line, int lineLen)
        {
            var arg0 = ReferenceEquals(_0, null) ? global::System.IntPtr.Zero : _0.__Instance;
            var arg1 = line;
            var __ret = Internal.CompressLine_0((__Instance + __PointerAdjustment), arg0, arg1, lineLen);
            return __ret;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN12wxGIFHandler12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected uint m_crntShiftDWord
        {
            get
            {
                return ((Internal*) __Instance)->m_crntShiftDWord;
            }

            set
            {
                ((Internal*) __Instance)->m_crntShiftDWord = value;
            }
        }

        protected int m_pixelCount
        {
            get
            {
                return ((Internal*) __Instance)->m_pixelCount;
            }

            set
            {
                ((Internal*) __Instance)->m_pixelCount = value;
            }
        }

        protected short m_EOFCode
        {
            get
            {
                return ((Internal*) __Instance)->m_EOFCode;
            }

            set
            {
                ((Internal*) __Instance)->m_EOFCode = value;
            }
        }

        protected short m_clearCode
        {
            get
            {
                return ((Internal*) __Instance)->m_clearCode;
            }

            set
            {
                ((Internal*) __Instance)->m_clearCode = value;
            }
        }

        protected short m_runningCode
        {
            get
            {
                return ((Internal*) __Instance)->m_runningCode;
            }

            set
            {
                ((Internal*) __Instance)->m_runningCode = value;
            }
        }

        protected short m_runningBits
        {
            get
            {
                return ((Internal*) __Instance)->m_runningBits;
            }

            set
            {
                ((Internal*) __Instance)->m_runningBits = value;
            }
        }

        protected short m_maxCode1
        {
            get
            {
                return ((Internal*) __Instance)->m_maxCode1;
            }

            set
            {
                ((Internal*) __Instance)->m_maxCode1 = value;
            }
        }

        protected short m_crntCode
        {
            get
            {
                return ((Internal*) __Instance)->m_crntCode;
            }

            set
            {
                ((Internal*) __Instance)->m_crntCode = value;
            }
        }

        protected short m_crntShiftState
        {
            get
            {
                return ((Internal*) __Instance)->m_crntShiftState;
            }

            set
            {
                ((Internal*) __Instance)->m_crntShiftState = value;
            }
        }

        protected byte[] m_LZBuf
        {
            get
            {
                byte[] __value = null;
                if (((Internal*) __Instance)->m_LZBuf != null)
                {
                    __value = new byte[256];
                    for (int i = 0; i < 256; i++)
                        __value[i] = ((Internal*) __Instance)->m_LZBuf[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((Internal*) __Instance)->m_LZBuf[i] = value[i];
                }
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxGIFHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxGIFHandler
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxGIFHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxGIFHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxGIFHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool LoadFile(wxImage *image, wxInputStream& stream, bool verbose = true, int index = -1) wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool_int _LoadFile_0DelegateInstance;

        private static bool _LoadFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr image, global::System.IntPtr stream, bool verbose, int index)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxGIFHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxImage __result0;
            if (image == IntPtr.Zero) __result0 = null;
            else if (wxImage.NativeToManagedMap.ContainsKey(image))
                __result0 = (wxImage) wxImage.NativeToManagedMap[image];
            else __result0 = (wxImage) wxImage.__CreateInstance(image, skipVTables: true);
            wxInputStream __result1;
            if (stream == IntPtr.Zero) __result1 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result1 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result1 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.LoadFile(__result0, __result1, verbose, index);
            return __ret;
        }

        // bool SaveFile(wxImage *image, wxOutputStream& stream, bool verbose=true) wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _SaveFile_0DelegateInstance;

        private static bool _SaveFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr image, global::System.IntPtr stream, bool verbose)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxGIFHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxImage __result0;
            if (image == IntPtr.Zero) __result0 = null;
            else if (wxImage.NativeToManagedMap.ContainsKey(image))
                __result0 = (wxImage) wxImage.NativeToManagedMap[image];
            else __result0 = (wxImage) wxImage.__CreateInstance(image, skipVTables: true);
            wxOutputStream __result1;
            if (stream == IntPtr.Zero) __result1 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(stream))
                __result1 = (wxOutputStream) wxOutputStream.NativeToManagedMap[stream];
            else __result1 = (wxOutputStream) wxOutputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.SaveFile(__result0, __result1, verbose);
            return __ret;
        }

        // int DoGetImageCount(wxInputStream& stream) wxOVERRIDE
        private static Delegates.Func_int_IntPtr_IntPtr _DoGetImageCount_0DelegateInstance;

        private static int _DoGetImageCount_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxGIFHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.DoGetImageCount(__result0);
            return __ret;
        }

        // bool DoCanRead(wxInputStream& stream) wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_IntPtr _DoCanRead_0DelegateInstance;

        private static bool _DoCanRead_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxGIFHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.DoCanRead(__result0);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[8];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _LoadFile_0DelegateInstance += _LoadFile_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_LoadFile_0DelegateInstance).ToPointer();
                _SaveFile_0DelegateInstance += _SaveFile_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SaveFile_0DelegateInstance).ToPointer();
                _DoGetImageCount_0DelegateInstance += _DoGetImageCount_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_DoGetImageCount_0DelegateInstance).ToPointer();
                _DoCanRead_0DelegateInstance += _DoCanRead_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_DoCanRead_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(11 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(11 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }
}
