//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxJPEGHandler : wxImageHandler, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 92)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public wxString.Internal m_name;

            [FieldOffset(28)]
            public wxString.Internal m_extension;

            [FieldOffset(48)]
            public wxArrayString.Internal m_altExtensions;

            [FieldOffset(68)]
            public wxString.Internal m_mime;

            [FieldOffset(88)]
            public wxBitmapType m_type;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxJPEGHandlerC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxJPEGHandlerC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxJPEGHandler21GetLibraryVersionInfoEv")]
            internal static extern void GetLibraryVersionInfo_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxJPEGHandler14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxJPEGHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxJPEGHandler(native.ToPointer(), skipVTables);
        }

        public static wxJPEGHandler __CreateInstance(wxJPEGHandler.Internal native, bool skipVTables = false)
        {
            return new wxJPEGHandler(native, skipVTables);
        }

        private static void* __CopyValue(wxJPEGHandler.Internal native)
        {
            var ret = Marshal.AllocHGlobal(92);
            wxJPEGHandler.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxJPEGHandler(wxJPEGHandler.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxJPEGHandler(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxJPEGHandler()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(92);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxJPEGHandler");
        }

        public wxJPEGHandler(wxJPEGHandler _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(92);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxJPEGHandler");
        }

        public override bool LoadFile(wxImage image, wxInputStream stream, bool verbose, int index)
        {
            return base.LoadFile(image, stream, verbose, index);
        }

        public override bool SaveFile(wxImage image, wxOutputStream stream, bool verbose)
        {
            return base.SaveFile(image, stream, verbose);
        }

        protected override bool DoCanRead(wxInputStream stream)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___DoCanRead_0Delegate = (Delegates.Func_bool_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr_IntPtr));
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var __ret = ___DoCanRead_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxVersionInfo GetLibraryVersionInfo()
        {
            var __ret = new wxVersionInfo.Internal();
            Internal.GetLibraryVersionInfo_0(new IntPtr(&__ret));
            return wxVersionInfo.__CreateInstance(__ret);
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN13wxJPEGHandler12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJPEGHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxJPEGHandler
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJPEGHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJPEGHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJPEGHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool LoadFile( wxImage *image, wxInputStream& stream, bool verbose=true, int index=-1 ) wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool_int _LoadFile_0DelegateInstance;

        private static bool _LoadFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr image, global::System.IntPtr stream, bool verbose, int index)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJPEGHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxImage __result0;
            if (image == IntPtr.Zero) __result0 = null;
            else if (wxImage.NativeToManagedMap.ContainsKey(image))
                __result0 = (wxImage) wxImage.NativeToManagedMap[image];
            else __result0 = (wxImage) wxImage.__CreateInstance(image, skipVTables: true);
            wxInputStream __result1;
            if (stream == IntPtr.Zero) __result1 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result1 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result1 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.LoadFile(__result0, __result1, verbose, index);
            return __ret;
        }

        // bool SaveFile( wxImage *image, wxOutputStream& stream, bool verbose=true ) wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_IntPtr_IntPtr_bool _SaveFile_0DelegateInstance;

        private static bool _SaveFile_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr image, global::System.IntPtr stream, bool verbose)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJPEGHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxImage __result0;
            if (image == IntPtr.Zero) __result0 = null;
            else if (wxImage.NativeToManagedMap.ContainsKey(image))
                __result0 = (wxImage) wxImage.NativeToManagedMap[image];
            else __result0 = (wxImage) wxImage.__CreateInstance(image, skipVTables: true);
            wxOutputStream __result1;
            if (stream == IntPtr.Zero) __result1 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(stream))
                __result1 = (wxOutputStream) wxOutputStream.NativeToManagedMap[stream];
            else __result1 = (wxOutputStream) wxOutputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.SaveFile(__result0, __result1, verbose);
            return __ret;
        }

        // int DoGetImageCount( wxInputStream& WXUNUSED(stream) )
        private static Delegates.Func_int_IntPtr_IntPtr _DoGetImageCount_0DelegateInstance;

        private static int _DoGetImageCount_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr _0)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJPEGHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (_0 == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(_0))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[_0];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(_0, skipVTables: true);
            var __ret = __target.DoGetImageCount(__result0);
            return __ret;
        }

        // bool DoCanRead( wxInputStream& stream ) wxOVERRIDE
        private static Delegates.Func_bool_IntPtr_IntPtr _DoCanRead_0DelegateInstance;

        private static bool _DoCanRead_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxJPEGHandler) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.DoCanRead(__result0);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[8];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _LoadFile_0DelegateInstance += _LoadFile_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_LoadFile_0DelegateInstance).ToPointer();
                _SaveFile_0DelegateInstance += _SaveFile_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SaveFile_0DelegateInstance).ToPointer();
                _DoGetImageCount_0DelegateInstance += _DoGetImageCount_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_DoGetImageCount_0DelegateInstance).ToPointer();
                _DoCanRead_0DelegateInstance += _DoCanRead_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_DoCanRead_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(11 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(11 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }
}
