//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxKeyboardState : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 1)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_controlDown;

            [FieldOffset(0)]
            public byte m_shiftDown;

            [FieldOffset(0)]
            public byte m_altDown;

            [FieldOffset(0)]
            public byte m_metaDown;

            [FieldOffset(0)]
            public byte m_rawControlDown;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxKeyboardStateC2Ebbbb")]
            internal static extern void ctor_0(global::System.IntPtr instance, bool controlDown, bool shiftDown, bool altDown, bool metaDown);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxKeyboardStateC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxKeyboardState12GetModifiersEv")]
            internal static extern int GetModifiers_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxKeyboardState15HasAnyModifiersEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasAnyModifiers_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxKeyboardState12HasModifiersEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasModifiers_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxKeyboardState11ControlDownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ControlDown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxKeyboardState14RawControlDownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool RawControlDown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxKeyboardState9ShiftDownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ShiftDown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxKeyboardState8MetaDownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool MetaDown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxKeyboardState7AltDownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool AltDown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK15wxKeyboardState7CmdDownEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CmdDown_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxKeyboardState14SetControlDownEb")]
            internal static extern void SetControlDown_0(global::System.IntPtr instance, bool down);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxKeyboardState17SetRawControlDownEb")]
            internal static extern void SetRawControlDown_0(global::System.IntPtr instance, bool down);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxKeyboardState12SetShiftDownEb")]
            internal static extern void SetShiftDown_0(global::System.IntPtr instance, bool down);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxKeyboardState10SetAltDownEb")]
            internal static extern void SetAltDown_0(global::System.IntPtr instance, bool down);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxKeyboardState11SetMetaDownEb")]
            internal static extern void SetMetaDown_0(global::System.IntPtr instance, bool down);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxKeyboardState> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxKeyboardState>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxKeyboardState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxKeyboardState(native.ToPointer(), skipVTables);
        }

        public static wxKeyboardState __CreateInstance(wxKeyboardState.Internal native, bool skipVTables = false)
        {
            return new wxKeyboardState(native, skipVTables);
        }

        private static void* __CopyValue(wxKeyboardState.Internal native)
        {
            var ret = Marshal.AllocHGlobal(1);
            *(wxKeyboardState.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxKeyboardState(wxKeyboardState.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxKeyboardState(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxKeyboardState(bool controlDown, bool shiftDown, bool altDown, bool metaDown)
        {
            __Instance = Marshal.AllocHGlobal(1);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), controlDown, shiftDown, altDown, metaDown);
        }

        public wxKeyboardState(wxKeyboardState _0)
        {
            __Instance = Marshal.AllocHGlobal(1);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxKeyboardState.Internal*) __Instance) = *((wxKeyboardState.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxKeyboardState __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public int GetModifiers()
        {
            var __ret = Internal.GetModifiers_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool HasAnyModifiers()
        {
            var __ret = Internal.HasAnyModifiers_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool HasModifiers()
        {
            var __ret = Internal.HasModifiers_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool ControlDown()
        {
            var __ret = Internal.ControlDown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool RawControlDown()
        {
            var __ret = Internal.RawControlDown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool ShiftDown()
        {
            var __ret = Internal.ShiftDown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool MetaDown()
        {
            var __ret = Internal.MetaDown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool AltDown()
        {
            var __ret = Internal.AltDown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool CmdDown()
        {
            var __ret = Internal.CmdDown_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetControlDown(bool down)
        {
            Internal.SetControlDown_0((__Instance + __PointerAdjustment), down);
        }

        public void SetRawControlDown(bool down)
        {
            Internal.SetRawControlDown_0((__Instance + __PointerAdjustment), down);
        }

        public void SetShiftDown(bool down)
        {
            Internal.SetShiftDown_0((__Instance + __PointerAdjustment), down);
        }

        public void SetAltDown(bool down)
        {
            Internal.SetAltDown_0((__Instance + __PointerAdjustment), down);
        }

        public void SetMetaDown(bool down)
        {
            Internal.SetMetaDown_0((__Instance + __PointerAdjustment), down);
        }

        public bool m_controlDown
        {
            get
            {
                return ((Internal*) __Instance)->m_controlDown != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_controlDown = (byte) (value ? 1 : 0);
            }
        }

        public bool m_shiftDown
        {
            get
            {
                return ((Internal*) __Instance)->m_shiftDown != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_shiftDown = (byte) (value ? 1 : 0);
            }
        }

        public bool m_altDown
        {
            get
            {
                return ((Internal*) __Instance)->m_altDown != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_altDown = (byte) (value ? 1 : 0);
            }
        }

        public bool m_metaDown
        {
            get
            {
                return ((Internal*) __Instance)->m_metaDown != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_metaDown = (byte) (value ? 1 : 0);
            }
        }

        public bool m_rawControlDown
        {
            get
            {
                return ((Internal*) __Instance)->m_rawControlDown != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_rawControlDown = (byte) (value ? 1 : 0);
            }
        }
    }
}
