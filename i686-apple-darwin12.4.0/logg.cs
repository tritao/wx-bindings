//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxLogTextCtrl : wxLog, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_formatter;

            [FieldOffset(8)]
            public global::System.IntPtr m_pTextCtrl;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;
        }

        public static new wxLogTextCtrl __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxLogTextCtrl(native.ToPointer(), skipVTables);
        }

        public static wxLogTextCtrl __CreateInstance(wxLogTextCtrl.Internal native, bool skipVTables = false)
        {
            return new wxLogTextCtrl(native, skipVTables);
        }

        private static void* __CopyValue(wxLogTextCtrl.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            *(wxLogTextCtrl.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxLogTextCtrl(wxLogTextCtrl.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxLogTextCtrl(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected override void DoLogText(wxString msg)
        {
            base.DoLogText(msg);
        }

        #region Virtual table interop

        // wxLogTextCtrl
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogTextCtrl) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // void Flush()
        private static Delegates.Action_IntPtr _Flush_0DelegateInstance;

        private static void _Flush_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogTextCtrl) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Flush();
        }

        // void DoLogRecord(wxLogLevel level, const wxString& msg, const wxLogRecordInfo& info)
        private static Delegates.Action_IntPtr_uint_IntPtr_IntPtr _DoLogRecord_0DelegateInstance;

        private static void _DoLogRecord_0DelegateHook(global::System.IntPtr instance, uint level, global::System.IntPtr msg, global::System.IntPtr info)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogTextCtrl) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result1;
            if (msg == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(msg))
                __result1 = (wxString) wxString.NativeToManagedMap[msg];
            else __result1 = wxString.__CreateInstance(msg);
            wxLogRecordInfo __result2;
            if (info == IntPtr.Zero) __result2 = null;
            else if (wxLogRecordInfo.NativeToManagedMap.ContainsKey(info))
                __result2 = (wxLogRecordInfo) wxLogRecordInfo.NativeToManagedMap[info];
            else __result2 = wxLogRecordInfo.__CreateInstance(info);
            __target.DoLogRecord(level, __result1, __result2);
        }

        // void DoLogTextAtLevel(wxLogLevel level, const wxString& msg)
        private static Delegates.Action_IntPtr_uint_IntPtr _DoLogTextAtLevel_0DelegateInstance;

        private static void _DoLogTextAtLevel_0DelegateHook(global::System.IntPtr instance, uint level, global::System.IntPtr msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogTextCtrl) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result1;
            if (msg == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(msg))
                __result1 = (wxString) wxString.NativeToManagedMap[msg];
            else __result1 = wxString.__CreateInstance(msg);
            __target.DoLogTextAtLevel(level, __result1);
        }

        // void DoLogText(const wxString& msg) wxOVERRIDE
        private static Delegates.Action_IntPtr_IntPtr _DoLogText_0DelegateInstance;

        private static void _DoLogText_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogTextCtrl) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (msg == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(msg))
                __result0 = (wxString) wxString.NativeToManagedMap[msg];
            else __result0 = wxString.__CreateInstance(msg);
            __target.DoLogText(__result0);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _Flush_0DelegateInstance += _Flush_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_Flush_0DelegateInstance).ToPointer();
                _DoLogRecord_0DelegateInstance += _DoLogRecord_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_DoLogRecord_0DelegateInstance).ToPointer();
                _DoLogTextAtLevel_0DelegateInstance += _DoLogTextAtLevel_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_DoLogTextAtLevel_0DelegateInstance).ToPointer();
                _DoLogText_0DelegateInstance += _DoLogText_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_DoLogText_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxLogGui : wxLog, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_formatter;

            [FieldOffset(8)]
            public wxArrayString.Internal m_aMessages;

            [FieldOffset(28)]
            public wxArrayInt.Internal m_aSeverity;

            [FieldOffset(40)]
            public wxArrayLong.Internal m_aTimes;

            [FieldOffset(52)]
            public byte m_bErrors;

            [FieldOffset(53)]
            public byte m_bWarnings;

            [FieldOffset(54)]
            public byte m_bHasMessages;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxLogGuiC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxLogGuiC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxLogGui8GetTitleEv")]
            internal static extern void GetTitle_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxLogGui15GetSeverityIconEv")]
            internal static extern int GetSeverityIcon_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxLogGui5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);
        }

        public static new wxLogGui __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxLogGui(native.ToPointer(), skipVTables);
        }

        public static wxLogGui __CreateInstance(wxLogGui.Internal native, bool skipVTables = false)
        {
            return new wxLogGui(native, skipVTables);
        }

        private static void* __CopyValue(wxLogGui.Internal native)
        {
            var ret = Marshal.AllocHGlobal(56);
            wxLogGui.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxLogGui(wxLogGui.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxLogGui(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxLogGui()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(56);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxLogGui");
        }

        public wxLogGui(wxLogGui _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(56);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxLogGui");
        }

        public override void Flush()
        {
            base.Flush();
        }

        protected override void DoLogRecord(uint level, wxString msg, wxLogRecordInfo info)
        {
            base.DoLogRecord(level, msg, info);
        }

        protected wxString GetTitle()
        {
            var __ret = new wxString.Internal();
            Internal.GetTitle_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        protected int GetSeverityIcon()
        {
            var __ret = Internal.GetSeverityIcon_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        protected wxArrayString m_aMessages
        {
            get
            {
                return wxArrayString.__CreateInstance(((Internal*) __Instance)->m_aMessages);
            }

            set
            {
                ((Internal*) __Instance)->m_aMessages = ReferenceEquals(value, null) ? new wxArrayString.Internal() : *(wxArrayString.Internal*) (value.__Instance);
            }
        }

        protected wxArrayInt m_aSeverity
        {
            get
            {
                return wxArrayInt.__CreateInstance(((Internal*) __Instance)->m_aSeverity);
            }

            set
            {
                ((Internal*) __Instance)->m_aSeverity = ReferenceEquals(value, null) ? new wxArrayInt.Internal() : *(wxArrayInt.Internal*) (value.__Instance);
            }
        }

        protected wxArrayLong m_aTimes
        {
            get
            {
                return wxArrayLong.__CreateInstance(((Internal*) __Instance)->m_aTimes);
            }

            set
            {
                ((Internal*) __Instance)->m_aTimes = ReferenceEquals(value, null) ? new wxArrayLong.Internal() : *(wxArrayLong.Internal*) (value.__Instance);
            }
        }

        protected bool m_bErrors
        {
            get
            {
                return ((Internal*) __Instance)->m_bErrors != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_bErrors = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_bWarnings
        {
            get
            {
                return ((Internal*) __Instance)->m_bWarnings != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_bWarnings = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_bHasMessages
        {
            get
            {
                return ((Internal*) __Instance)->m_bHasMessages != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_bHasMessages = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // wxLogGui
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogGui) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // void Flush() wxOVERRIDE
        private static Delegates.Action_IntPtr _Flush_0DelegateInstance;

        private static void _Flush_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogGui) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Flush();
        }

        // void DoLogRecord(wxLogLevel level, const wxString& msg, const wxLogRecordInfo& info) wxOVERRIDE
        private static Delegates.Action_IntPtr_uint_IntPtr_IntPtr _DoLogRecord_0DelegateInstance;

        private static void _DoLogRecord_0DelegateHook(global::System.IntPtr instance, uint level, global::System.IntPtr msg, global::System.IntPtr info)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogGui) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result1;
            if (msg == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(msg))
                __result1 = (wxString) wxString.NativeToManagedMap[msg];
            else __result1 = wxString.__CreateInstance(msg);
            wxLogRecordInfo __result2;
            if (info == IntPtr.Zero) __result2 = null;
            else if (wxLogRecordInfo.NativeToManagedMap.ContainsKey(info))
                __result2 = (wxLogRecordInfo) wxLogRecordInfo.NativeToManagedMap[info];
            else __result2 = wxLogRecordInfo.__CreateInstance(info);
            __target.DoLogRecord(level, __result1, __result2);
        }

        // void DoLogTextAtLevel(wxLogLevel level, const wxString& msg)
        private static Delegates.Action_IntPtr_uint_IntPtr _DoLogTextAtLevel_0DelegateInstance;

        private static void _DoLogTextAtLevel_0DelegateHook(global::System.IntPtr instance, uint level, global::System.IntPtr msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogGui) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result1;
            if (msg == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(msg))
                __result1 = (wxString) wxString.NativeToManagedMap[msg];
            else __result1 = wxString.__CreateInstance(msg);
            __target.DoLogTextAtLevel(level, __result1);
        }

        // void DoLogText(const wxString& msg)
        private static Delegates.Action_IntPtr_IntPtr _DoLogText_0DelegateInstance;

        private static void _DoLogText_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogGui) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (msg == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(msg))
                __result0 = (wxString) wxString.NativeToManagedMap[msg];
            else __result0 = wxString.__CreateInstance(msg);
            __target.DoLogText(__result0);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _Flush_0DelegateInstance += _Flush_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_Flush_0DelegateInstance).ToPointer();
                _DoLogRecord_0DelegateInstance += _DoLogRecord_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_DoLogRecord_0DelegateInstance).ToPointer();
                _DoLogTextAtLevel_0DelegateInstance += _DoLogTextAtLevel_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_DoLogTextAtLevel_0DelegateInstance).ToPointer();
                _DoLogText_0DelegateInstance += _DoLogText_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_DoLogText_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxLogWindow : wxLogInterposer, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_formatter;

            [FieldOffset(8)]
            public global::System.IntPtr m_logNew;

            [FieldOffset(12)]
            public global::System.IntPtr m_logOld;

            [FieldOffset(16)]
            public byte m_bPassMessages;

            [FieldOffset(20)]
            public global::System.IntPtr m_pLogFrame;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxLogWindow4ShowEb")]
            internal static extern void Show_0(global::System.IntPtr instance, bool bShow);
        }

        public static new wxLogWindow __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxLogWindow(native.ToPointer(), skipVTables);
        }

        public static wxLogWindow __CreateInstance(wxLogWindow.Internal native, bool skipVTables = false)
        {
            return new wxLogWindow(native, skipVTables);
        }

        private static void* __CopyValue(wxLogWindow.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            *(wxLogWindow.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxLogWindow(wxLogWindow.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxLogWindow(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public void Show(bool bShow)
        {
            Internal.Show_0((__Instance + __PointerAdjustment), bShow);
        }

        protected override void DoLogTextAtLevel(uint level, wxString msg)
        {
            base.DoLogTextAtLevel(level, msg);
        }

        #region Virtual table interop

        // virtual ~wxLogWindow()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogWindow) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // void Flush() wxOVERRIDE
        private static Delegates.Action_IntPtr _Flush_0DelegateInstance;

        private static void _Flush_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogWindow) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Flush();
        }

        // void DoLogRecord(wxLogLevel level, const wxString& msg, const wxLogRecordInfo& info) wxOVERRIDE
        private static Delegates.Action_IntPtr_uint_IntPtr_IntPtr _DoLogRecord_0DelegateInstance;

        private static void _DoLogRecord_0DelegateHook(global::System.IntPtr instance, uint level, global::System.IntPtr msg, global::System.IntPtr info)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogWindow) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result1;
            if (msg == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(msg))
                __result1 = (wxString) wxString.NativeToManagedMap[msg];
            else __result1 = wxString.__CreateInstance(msg);
            wxLogRecordInfo __result2;
            if (info == IntPtr.Zero) __result2 = null;
            else if (wxLogRecordInfo.NativeToManagedMap.ContainsKey(info))
                __result2 = (wxLogRecordInfo) wxLogRecordInfo.NativeToManagedMap[info];
            else __result2 = wxLogRecordInfo.__CreateInstance(info);
            __target.DoLogRecord(level, __result1, __result2);
        }

        // void DoLogTextAtLevel(wxLogLevel level, const wxString& msg) wxOVERRIDE
        private static Delegates.Action_IntPtr_uint_IntPtr _DoLogTextAtLevel_0DelegateInstance;

        private static void _DoLogTextAtLevel_0DelegateHook(global::System.IntPtr instance, uint level, global::System.IntPtr msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogWindow) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result1;
            if (msg == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(msg))
                __result1 = (wxString) wxString.NativeToManagedMap[msg];
            else __result1 = wxString.__CreateInstance(msg);
            __target.DoLogTextAtLevel(level, __result1);
        }

        // void DoLogText(const wxString& msg)
        private static Delegates.Action_IntPtr_IntPtr _DoLogText_0DelegateInstance;

        private static void _DoLogText_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr msg)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxLogWindow) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (msg == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(msg))
                __result0 = (wxString) wxString.NativeToManagedMap[msg];
            else __result0 = wxString.__CreateInstance(msg);
            __target.DoLogText(__result0);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _Flush_0DelegateInstance += _Flush_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_Flush_0DelegateInstance).ToPointer();
                _DoLogRecord_0DelegateInstance += _DoLogRecord_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_DoLogRecord_0DelegateInstance).ToPointer();
                _DoLogTextAtLevel_0DelegateInstance += _DoLogTextAtLevel_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_DoLogTextAtLevel_0DelegateInstance).ToPointer();
                _DoLogText_0DelegateInstance += _DoLogText_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_DoLogText_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }
}
