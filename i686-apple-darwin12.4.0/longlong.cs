//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxLongLongNative : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public long m_ll;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongLongNativeC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongLongNativeC2Ex")]
            internal static extern void ctor_1(global::System.IntPtr instance, long ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongLongNativeC2Eij")]
            internal static extern void ctor_2(global::System.IntPtr instance, int hi, uint lo);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongLongNativeC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongLongNative6AssignEd")]
            internal static extern global::System.IntPtr Assign_0(global::System.IntPtr instance, double d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNative5GetHiEv")]
            internal static extern int GetHi_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNative5GetLoEv")]
            internal static extern uint GetLo_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongLongNative3AbsEv")]
            internal static extern global::System.IntPtr Abs_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNative8GetValueEv")]
            internal static extern long GetValue_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNative6ToLongEv")]
            internal static extern int ToLong_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNative8ToDoubleEv")]
            internal static extern double ToDouble_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeplERKS_")]
            internal static extern wxLongLongNative.Internal OperatorPlus_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeplEx")]
            internal static extern wxLongLongNative.Internal OperatorPlus_1(global::System.IntPtr instance, long ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongLongNativeppEv")]
            internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativengEv")]
            internal static extern wxLongLongNative.Internal OperatorMinus_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongLongNative6NegateEv")]
            internal static extern global::System.IntPtr Negate_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativemiERKS_")]
            internal static extern wxLongLongNative.Internal OperatorMinus_1(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativemiEx")]
            internal static extern wxLongLongNative.Internal OperatorMinus_2(global::System.IntPtr instance, long ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN16wxLongLongNativemmEv")]
            internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativelsEi")]
            internal static extern wxLongLongNative.Internal OperatorLessLess_0(global::System.IntPtr instance, int shift);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativersEi")]
            internal static extern wxLongLongNative.Internal OperatorGreaterGreater_0(global::System.IntPtr instance, int shift);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeanERKS_")]
            internal static extern wxLongLongNative.Internal OperatorAmp_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeorERKS_")]
            internal static extern wxLongLongNative.Internal OperatorPipe_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeeoERKS_")]
            internal static extern wxLongLongNative.Internal OperatorCaret_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativemlERKS_")]
            internal static extern wxLongLongNative.Internal OperatorStar_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativemlEl")]
            internal static extern wxLongLongNative.Internal OperatorStar_1(global::System.IntPtr instance, int l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativedvERKS_")]
            internal static extern wxLongLongNative.Internal OperatorSlash_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativedvEl")]
            internal static extern wxLongLongNative.Internal OperatorSlash_1(global::System.IntPtr instance, int l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativermERKS_")]
            internal static extern wxLongLongNative.Internal OperatorPercent_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativermEl")]
            internal static extern wxLongLongNative.Internal OperatorPercent_1(global::System.IntPtr instance, int l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeeqERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeeqEl")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_1(global::System.IntPtr instance, int l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeneERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeneEl")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_1(global::System.IntPtr instance, int l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeltERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeltEl")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_1(global::System.IntPtr instance, int l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativegtERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativegtEl")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_1(global::System.IntPtr instance, int l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeleERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativeleEl")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_1(global::System.IntPtr instance, int l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativegeERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNativegeEl")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_1(global::System.IntPtr instance, int l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNative8ToStringEv")]
            internal static extern void ToString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK16wxLongLongNative7asArrayEv")]
            internal static extern global::System.IntPtr asArray_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxLongLongNative> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxLongLongNative>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxLongLongNative __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxLongLongNative(native.ToPointer(), skipVTables);
        }

        public static wxLongLongNative __CreateInstance(wxLongLongNative.Internal native, bool skipVTables = false)
        {
            return new wxLongLongNative(native, skipVTables);
        }

        private static void* __CopyValue(wxLongLongNative.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxLongLongNative.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxLongLongNative(wxLongLongNative.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxLongLongNative(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxLongLongNative()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxLongLongNative(long ll)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), ll);
        }

        public wxLongLongNative(int hi, uint lo)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_2((__Instance + __PointerAdjustment), hi, lo);
        }

        public wxLongLongNative(wxLongLongNative _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxLongLongNative.Internal*) __Instance) = *((wxLongLongNative.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxLongLongNative __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxLongLongNative Assign(double d)
        {
            var __ret = Internal.Assign_0((__Instance + __PointerAdjustment), d);
            wxLongLongNative __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxLongLongNative.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxLongLongNative) wxLongLongNative.NativeToManagedMap[__ret];
            else __result0 = wxLongLongNative.__CreateInstance(__ret);
            return __result0;
        }

        public int GetHi()
        {
            var __ret = Internal.GetHi_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetLo()
        {
            var __ret = Internal.GetLo_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxLongLongNative Abs()
        {
            var __ret = Internal.Abs_1((__Instance + __PointerAdjustment));
            wxLongLongNative __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxLongLongNative.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxLongLongNative) wxLongLongNative.NativeToManagedMap[__ret];
            else __result0 = wxLongLongNative.__CreateInstance(__ret);
            return __result0;
        }

        public long GetValue()
        {
            var __ret = Internal.GetValue_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int ToLong()
        {
            var __ret = Internal.ToLong_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double ToDouble()
        {
            var __ret = Internal.ToDouble_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static wxLongLongNative operator +(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorPlus_0(arg0, arg1);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator +(wxLongLongNative __op, long ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorPlus_1(arg0, ll);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator ++(wxLongLongNative __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorPlusPlus_0(arg0);
            wxLongLongNative __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxLongLongNative.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxLongLongNative) wxLongLongNative.NativeToManagedMap[__ret];
            else __result0 = wxLongLongNative.__CreateInstance(__ret);
            return __result0;
        }

        public static wxLongLongNative operator -(wxLongLongNative __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorMinus_0(arg0);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public wxLongLongNative Negate()
        {
            var __ret = Internal.Negate_0((__Instance + __PointerAdjustment));
            wxLongLongNative __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxLongLongNative.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxLongLongNative) wxLongLongNative.NativeToManagedMap[__ret];
            else __result0 = wxLongLongNative.__CreateInstance(__ret);
            return __result0;
        }

        public static wxLongLongNative operator -(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorMinus_1(arg0, arg1);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator -(wxLongLongNative __op, long ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorMinus_2(arg0, ll);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator --(wxLongLongNative __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorMinusMinus_0(arg0);
            wxLongLongNative __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxLongLongNative.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxLongLongNative) wxLongLongNative.NativeToManagedMap[__ret];
            else __result0 = wxLongLongNative.__CreateInstance(__ret);
            return __result0;
        }

        public static wxLongLongNative operator <<(wxLongLongNative __op, int shift)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorLessLess_0(arg0, shift);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator >>(wxLongLongNative __op, int shift)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorGreaterGreater_0(arg0, shift);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator &(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorAmp_0(arg0, arg1);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator |(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorPipe_0(arg0, arg1);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator ^(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorCaret_0(arg0, arg1);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator *(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorStar_0(arg0, arg1);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator *(wxLongLongNative __op, int l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorStar_1(arg0, l);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator /(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorSlash_0(arg0, arg1);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator /(wxLongLongNative __op, int l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorSlash_1(arg0, l);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator +(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorPercent_0(arg0, arg1);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static wxLongLongNative operator +(wxLongLongNative __op, int l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorPercent_1(arg0, l);
            return wxLongLongNative.__CreateInstance(__ret);
        }

        public static bool operator ==(wxLongLongNative __op, wxLongLongNative ll)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool llNull = ReferenceEquals(ll, null);
            if (__opNull || llNull)
                return __opNull && llNull;
            var arg0 = __op.__Instance;
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxLongLongNative;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator ==(wxLongLongNative __op, int l)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool lNull = ReferenceEquals(l, null);
            if (__opNull || lNull)
                return __opNull && lNull;
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorEqualEqual_1(arg0, l);
            return __ret;
        }

        public static bool operator !=(wxLongLongNative __op, wxLongLongNative ll)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool llNull = ReferenceEquals(ll, null);
            if (__opNull || llNull)
                return !(__opNull && llNull);
            var arg0 = __op.__Instance;
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxLongLongNative __op, int l)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool lNull = ReferenceEquals(l, null);
            if (__opNull || lNull)
                return !(__opNull && lNull);
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaimEqual_1(arg0, l);
            return __ret;
        }

        public static bool operator <(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorLess_0(arg0, arg1);
            return __ret;
        }

        public static bool operator <(wxLongLongNative __op, int l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorLess_1(arg0, l);
            return __ret;
        }

        public static bool operator >(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorGreater_0(arg0, arg1);
            return __ret;
        }

        public static bool operator >(wxLongLongNative __op, int l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorGreater_1(arg0, l);
            return __ret;
        }

        public static bool operator <=(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator <=(wxLongLongNative __op, int l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorLessEqual_1(arg0, l);
            return __ret;
        }

        public static bool operator >=(wxLongLongNative __op, wxLongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator >=(wxLongLongNative __op, int l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorGreaterEqual_1(arg0, l);
            return __ret;
        }

        public wxString ToString()
        {
            var __ret = new wxString.Internal();
            Internal.ToString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public global::System.IntPtr asArray()
        {
            var __ret = Internal.asArray_0((__Instance + __PointerAdjustment));
            return __ret;
        }
    }

    public unsafe partial class wxULongLongNative : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public ulong m_ll;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxULongLongNativeC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxULongLongNativeC2Ey")]
            internal static extern void ctor_1(global::System.IntPtr instance, ulong ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxULongLongNativeC2Ejj")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint hi, uint lo);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxULongLongNativeC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNative5GetHiEv")]
            internal static extern uint GetHi_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNative5GetLoEv")]
            internal static extern uint GetLo_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNative8GetValueEv")]
            internal static extern ulong GetValue_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNative7ToULongEv")]
            internal static extern uint ToULong_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNative8ToDoubleEv")]
            internal static extern double ToDouble_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeplERKS_")]
            internal static extern wxULongLongNative.Internal OperatorPlus_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeplEy")]
            internal static extern wxULongLongNative.Internal OperatorPlus_1(global::System.IntPtr instance, ulong ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxULongLongNativeppEv")]
            internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativemiERKS_")]
            internal static extern wxULongLongNative.Internal OperatorMinus_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativemiEy")]
            internal static extern wxULongLongNative.Internal OperatorMinus_1(global::System.IntPtr instance, ulong ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxULongLongNativemmEv")]
            internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativelsEi")]
            internal static extern wxULongLongNative.Internal OperatorLessLess_0(global::System.IntPtr instance, int shift);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativersEi")]
            internal static extern wxULongLongNative.Internal OperatorGreaterGreater_0(global::System.IntPtr instance, int shift);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeanERKS_")]
            internal static extern wxULongLongNative.Internal OperatorAmp_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeorERKS_")]
            internal static extern wxULongLongNative.Internal OperatorPipe_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeeoERKS_")]
            internal static extern wxULongLongNative.Internal OperatorCaret_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativemlERKS_")]
            internal static extern wxULongLongNative.Internal OperatorStar_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativemlEm")]
            internal static extern wxULongLongNative.Internal OperatorStar_1(global::System.IntPtr instance, uint l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativedvERKS_")]
            internal static extern wxULongLongNative.Internal OperatorSlash_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativedvEm")]
            internal static extern wxULongLongNative.Internal OperatorSlash_1(global::System.IntPtr instance, uint l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativermERKS_")]
            internal static extern wxULongLongNative.Internal OperatorPercent_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativermEm")]
            internal static extern wxULongLongNative.Internal OperatorPercent_1(global::System.IntPtr instance, uint l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeeqERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeeqEm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_1(global::System.IntPtr instance, uint l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeneERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeneEm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_1(global::System.IntPtr instance, uint l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeltERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeltEm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_1(global::System.IntPtr instance, uint l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativegtERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativegtEm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_1(global::System.IntPtr instance, uint l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeleERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativeleEm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_1(global::System.IntPtr instance, uint l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativegeERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr instance, global::System.IntPtr ll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNativegeEm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_1(global::System.IntPtr instance, uint l);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNative8ToStringEv")]
            internal static extern void ToString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK17wxULongLongNative7asArrayEv")]
            internal static extern global::System.IntPtr asArray_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxULongLongNative> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxULongLongNative>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxULongLongNative __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxULongLongNative(native.ToPointer(), skipVTables);
        }

        public static wxULongLongNative __CreateInstance(wxULongLongNative.Internal native, bool skipVTables = false)
        {
            return new wxULongLongNative(native, skipVTables);
        }

        private static void* __CopyValue(wxULongLongNative.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxULongLongNative.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxULongLongNative(wxULongLongNative.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxULongLongNative(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxULongLongNative()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxULongLongNative(ulong ll)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment), ll);
        }

        public wxULongLongNative(uint hi, uint lo)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_2((__Instance + __PointerAdjustment), hi, lo);
        }

        public wxULongLongNative(wxULongLongNative _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxULongLongNative.Internal*) __Instance) = *((wxULongLongNative.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxULongLongNative __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public uint GetHi()
        {
            var __ret = Internal.GetHi_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetLo()
        {
            var __ret = Internal.GetLo_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public ulong GetValue()
        {
            var __ret = Internal.GetValue_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint ToULong()
        {
            var __ret = Internal.ToULong_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public double ToDouble()
        {
            var __ret = Internal.ToDouble_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static wxULongLongNative operator +(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorPlus_0(arg0, arg1);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator +(wxULongLongNative __op, ulong ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorPlus_1(arg0, ll);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator ++(wxULongLongNative __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorPlusPlus_0(arg0);
            wxULongLongNative __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxULongLongNative.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxULongLongNative) wxULongLongNative.NativeToManagedMap[__ret];
            else __result0 = wxULongLongNative.__CreateInstance(__ret);
            return __result0;
        }

        public static wxULongLongNative operator -(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorMinus_0(arg0, arg1);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator -(wxULongLongNative __op, ulong ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorMinus_1(arg0, ll);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator --(wxULongLongNative __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorMinusMinus_0(arg0);
            wxULongLongNative __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxULongLongNative.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxULongLongNative) wxULongLongNative.NativeToManagedMap[__ret];
            else __result0 = wxULongLongNative.__CreateInstance(__ret);
            return __result0;
        }

        public static wxULongLongNative operator <<(wxULongLongNative __op, int shift)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorLessLess_0(arg0, shift);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator >>(wxULongLongNative __op, int shift)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorGreaterGreater_0(arg0, shift);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator &(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorAmp_0(arg0, arg1);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator |(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorPipe_0(arg0, arg1);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator ^(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorCaret_0(arg0, arg1);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator *(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorStar_0(arg0, arg1);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator *(wxULongLongNative __op, uint l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorStar_1(arg0, l);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator /(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorSlash_0(arg0, arg1);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator /(wxULongLongNative __op, uint l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorSlash_1(arg0, l);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator +(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorPercent_0(arg0, arg1);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static wxULongLongNative operator +(wxULongLongNative __op, uint l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorPercent_1(arg0, l);
            return wxULongLongNative.__CreateInstance(__ret);
        }

        public static bool operator ==(wxULongLongNative __op, wxULongLongNative ll)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool llNull = ReferenceEquals(ll, null);
            if (__opNull || llNull)
                return __opNull && llNull;
            var arg0 = __op.__Instance;
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxULongLongNative;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator ==(wxULongLongNative __op, uint l)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool lNull = ReferenceEquals(l, null);
            if (__opNull || lNull)
                return __opNull && lNull;
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorEqualEqual_1(arg0, l);
            return __ret;
        }

        public static bool operator !=(wxULongLongNative __op, wxULongLongNative ll)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool llNull = ReferenceEquals(ll, null);
            if (__opNull || llNull)
                return !(__opNull && llNull);
            var arg0 = __op.__Instance;
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxULongLongNative __op, uint l)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool lNull = ReferenceEquals(l, null);
            if (__opNull || lNull)
                return !(__opNull && lNull);
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaimEqual_1(arg0, l);
            return __ret;
        }

        public static bool operator <(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorLess_0(arg0, arg1);
            return __ret;
        }

        public static bool operator <(wxULongLongNative __op, uint l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorLess_1(arg0, l);
            return __ret;
        }

        public static bool operator >(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorGreater_0(arg0, arg1);
            return __ret;
        }

        public static bool operator >(wxULongLongNative __op, uint l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorGreater_1(arg0, l);
            return __ret;
        }

        public static bool operator <=(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator <=(wxULongLongNative __op, uint l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorLessEqual_1(arg0, l);
            return __ret;
        }

        public static bool operator >=(wxULongLongNative __op, wxULongLongNative ll)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            if (ReferenceEquals(ll, null))
                throw new global::System.ArgumentNullException("ll", "Cannot be null because it is a C++ reference (&).");
            var arg1 = ll.__Instance;
            var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator >=(wxULongLongNative __op, uint l)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorGreaterEqual_1(arg0, l);
            return __ret;
        }

        public wxString ToString()
        {
            var __ret = new wxString.Internal();
            Internal.ToString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public global::System.IntPtr asArray()
        {
            var __ret = Internal.asArray_0((__Instance + __PointerAdjustment));
            return __ret;
        }
    }

    namespace std
    {
        namespace __1
        {
        }
    }
}
