//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum wxOperatingSystemId : uint
    {
        wxOS_UNKNOWN = 0,
        wxOS_MAC_OS = 1,
        wxOS_MAC_OSX_DARWIN = 2,
        wxOS_MAC = 3,
        wxOS_WINDOWS_9X = 4,
        wxOS_WINDOWS_NT = 8,
        wxOS_WINDOWS_MICRO = 16,
        wxOS_WINDOWS_CE = 32,
        wxOS_WINDOWS = 60,
        wxOS_UNIX_LINUX = 64,
        wxOS_UNIX_FREEBSD = 128,
        wxOS_UNIX_OPENBSD = 256,
        wxOS_UNIX_NETBSD = 512,
        wxOS_UNIX_SOLARIS = 1024,
        wxOS_UNIX_AIX = 2048,
        wxOS_UNIX_HPUX = 4096,
        wxOS_UNIX = 8128,
        wxOS_DOS = 32768,
        wxOS_OS2 = 65536
    }

    [Flags]
    public enum wxPortId : uint
    {
        wxPORT_UNKNOWN = 0,
        wxPORT_BASE = 1,
        wxPORT_MSW = 2,
        wxPORT_MOTIF = 4,
        wxPORT_GTK = 8,
        wxPORT_DFB = 16,
        wxPORT_X11 = 32,
        wxPORT_PM = 64,
        wxPORT_OS2 = 64,
        wxPORT_MAC = 128,
        wxPORT_OSX = 128,
        wxPORT_COCOA = 256,
        wxPORT_WINCE = 512,
        wxPORT_QT = 1024
    }

    public enum wxArchitecture
    {
        wxARCH_INVALID = -1,
        wxARCH_32 = 0,
        wxARCH_64 = 1,
        wxARCH_MAX = 2
    }

    public enum wxEndianness
    {
        wxENDIAN_INVALID = -1,
        wxENDIAN_BIG = 0,
        wxENDIAN_LITTLE = 1,
        wxENDIAN_PDP = 2,
        wxENDIAN_MAX = 3
    }

    public unsafe partial class wxLinuxDistributionInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal Id;

            [FieldOffset(20)]
            public wxString.Internal Release;

            [FieldOffset(40)]
            public wxString.Internal CodeName;

            [FieldOffset(60)]
            public wxString.Internal Description;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxLinuxDistributionInfoC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxLinuxDistributionInfoC2Ev")]
            internal static extern void ctor_2(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxLinuxDistributionInfoD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK23wxLinuxDistributionInfoeqERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr ldi);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK23wxLinuxDistributionInfoneERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr ldi);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxLinuxDistributionInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxLinuxDistributionInfo>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxLinuxDistributionInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxLinuxDistributionInfo(native.ToPointer(), skipVTables);
        }

        public static wxLinuxDistributionInfo __CreateInstance(wxLinuxDistributionInfo.Internal native, bool skipVTables = false)
        {
            return new wxLinuxDistributionInfo(native, skipVTables);
        }

        private static void* __CopyValue(wxLinuxDistributionInfo.Internal native)
        {
            var ret = Marshal.AllocHGlobal(80);
            wxLinuxDistributionInfo.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxLinuxDistributionInfo(wxLinuxDistributionInfo.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxLinuxDistributionInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxLinuxDistributionInfo(wxLinuxDistributionInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public wxLinuxDistributionInfo()
        {
            __Instance = Marshal.AllocHGlobal(80);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_2((__Instance + __PointerAdjustment));
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxLinuxDistributionInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static bool operator ==(wxLinuxDistributionInfo __op, wxLinuxDistributionInfo ldi)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool ldiNull = ReferenceEquals(ldi, null);
            if (__opNull || ldiNull)
                return __opNull && ldiNull;
            var arg0 = __op.__Instance;
            var arg1 = ldi.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxLinuxDistributionInfo;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxLinuxDistributionInfo __op, wxLinuxDistributionInfo ldi)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool ldiNull = ReferenceEquals(ldi, null);
            if (__opNull || ldiNull)
                return !(__opNull && ldiNull);
            var arg0 = __op.__Instance;
            var arg1 = ldi.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public wxString Id
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->Id);
            }

            set
            {
                ((Internal*) __Instance)->Id = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        public wxString Release
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->Release);
            }

            set
            {
                ((Internal*) __Instance)->Release = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        public wxString CodeName
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->CodeName);
            }

            set
            {
                ((Internal*) __Instance)->CodeName = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        public wxString Description
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->Description);
            }

            set
            {
                ((Internal*) __Instance)->Description = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }
    }

    public unsafe partial class wxPlatformInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 160)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_initializedForCurrentPlatform;

            [FieldOffset(4)]
            public int m_osVersionMajor;

            [FieldOffset(8)]
            public int m_osVersionMinor;

            [FieldOffset(12)]
            public wxOperatingSystemId m_os;

            [FieldOffset(16)]
            public wxString.Internal m_osDesc;

            [FieldOffset(36)]
            public wxString.Internal m_desktopEnv;

            [FieldOffset(56)]
            public wxLinuxDistributionInfo.Internal m_ldi;

            [FieldOffset(136)]
            public int m_tkVersionMajor;

            [FieldOffset(140)]
            public int m_tkVersionMinor;

            [FieldOffset(144)]
            public wxPortId m_port;

            [FieldOffset(148)]
            public byte m_usingUniversal;

            [FieldOffset(152)]
            public wxArchitecture m_arch;

            [FieldOffset(156)]
            public wxEndianness m_endian;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfoC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfoC2E8wxPortIdii19wxOperatingSystemIdii14wxArchitecture12wxEndiannessb")]
            internal static extern void ctor_1(global::System.IntPtr instance, wxPortId pid, int tkMajor, int tkMinor, wxOperatingSystemId id, int osMajor, int osMinor, wxArchitecture arch, wxEndianness endian, bool usingUniversal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfoC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfoD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfoeqERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfoneERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo3GetEv")]
            internal static extern global::System.IntPtr Get_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo20GetOperatingSystemIdERK8wxString")]
            internal static extern wxOperatingSystemId GetOperatingSystemId_0(global::System.IntPtr name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo9GetPortIdERK8wxString")]
            internal static extern wxPortId GetPortId_0(global::System.IntPtr portname);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo7GetArchERK8wxString")]
            internal static extern wxArchitecture GetArch_0(global::System.IntPtr arch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo13GetEndiannessERK8wxString")]
            internal static extern wxEndianness GetEndianness_0(global::System.IntPtr end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo28GetOperatingSystemFamilyNameE19wxOperatingSystemId")]
            internal static extern void GetOperatingSystemFamilyName_0(global::System.IntPtr @return, wxOperatingSystemId os);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo24GetOperatingSystemIdNameE19wxOperatingSystemId")]
            internal static extern void GetOperatingSystemIdName_0(global::System.IntPtr @return, wxOperatingSystemId os);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo13GetPortIdNameE8wxPortIdb")]
            internal static extern void GetPortIdName_0(global::System.IntPtr @return, wxPortId port, bool usingUniversal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo18GetPortIdShortNameE8wxPortIdb")]
            internal static extern void GetPortIdShortName_0(global::System.IntPtr @return, wxPortId port, bool usingUniversal);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo11GetArchNameE14wxArchitecture")]
            internal static extern void GetArchName_0(global::System.IntPtr @return, wxArchitecture arch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo17GetEndiannessNameE12wxEndianness")]
            internal static extern void GetEndiannessName_0(global::System.IntPtr @return, wxEndianness end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo17GetOSMajorVersionEv")]
            internal static extern int GetOSMajorVersion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo17GetOSMinorVersionEv")]
            internal static extern int GetOSMinorVersion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo14CheckOSVersionEii")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CheckOSVersion_0(global::System.IntPtr instance, int major, int minor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo22GetToolkitMajorVersionEv")]
            internal static extern int GetToolkitMajorVersion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo22GetToolkitMinorVersionEv")]
            internal static extern int GetToolkitMinorVersion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo19CheckToolkitVersionEii")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CheckToolkitVersion_0(global::System.IntPtr instance, int major, int minor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo23IsUsingUniversalWidgetsEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsUsingUniversalWidgets_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo20GetOperatingSystemIdEv")]
            internal static extern wxOperatingSystemId GetOperatingSystemId_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo24GetLinuxDistributionInfoEv")]
            internal static extern void GetLinuxDistributionInfo_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo9GetPortIdEv")]
            internal static extern wxPortId GetPortId_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo15GetArchitectureEv")]
            internal static extern wxArchitecture GetArchitecture_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo13GetEndiannessEv")]
            internal static extern wxEndianness GetEndianness_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo28GetOperatingSystemFamilyNameEv")]
            internal static extern void GetOperatingSystemFamilyName_1(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo24GetOperatingSystemIdNameEv")]
            internal static extern void GetOperatingSystemIdName_1(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo13GetPortIdNameEv")]
            internal static extern void GetPortIdName_1(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo18GetPortIdShortNameEv")]
            internal static extern void GetPortIdShortName_1(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo11GetArchNameEv")]
            internal static extern void GetArchName_1(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo17GetEndiannessNameEv")]
            internal static extern void GetEndiannessName_1(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo29GetOperatingSystemDescriptionEv")]
            internal static extern void GetOperatingSystemDescription_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo21GetDesktopEnvironmentEv")]
            internal static extern void GetDesktopEnvironment_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo27GetOperatingSystemDirectoryEv")]
            internal static extern void GetOperatingSystemDirectory_0(global::System.IntPtr @return);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo12SetOSVersionEii")]
            internal static extern void SetOSVersion_0(global::System.IntPtr instance, int major, int minor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo17SetToolkitVersionEii")]
            internal static extern void SetToolkitVersion_0(global::System.IntPtr instance, int major, int minor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo20SetOperatingSystemIdE19wxOperatingSystemId")]
            internal static extern void SetOperatingSystemId_0(global::System.IntPtr instance, wxOperatingSystemId n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo29SetOperatingSystemDescriptionERK8wxString")]
            internal static extern void SetOperatingSystemDescription_0(global::System.IntPtr instance, global::System.IntPtr desc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo9SetPortIdE8wxPortId")]
            internal static extern void SetPortId_0(global::System.IntPtr instance, wxPortId n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo15SetArchitectureE14wxArchitecture")]
            internal static extern void SetArchitecture_0(global::System.IntPtr instance, wxArchitecture n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo13SetEndiannessE12wxEndianness")]
            internal static extern void SetEndianness_0(global::System.IntPtr instance, wxEndianness n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo21SetDesktopEnvironmentERK8wxString")]
            internal static extern void SetDesktopEnvironment_0(global::System.IntPtr instance, global::System.IntPtr de);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo24SetLinuxDistributionInfoERK23wxLinuxDistributionInfo")]
            internal static extern void SetLinuxDistributionInfo_0(global::System.IntPtr instance, global::System.IntPtr di);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxPlatformInfo4IsOkEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsOk_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo14DoCheckVersionEiiii")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool DoCheckVersion_0(int majorCur, int minorCur, int major, int minor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxPlatformInfo22InitForCurrentPlatformEv")]
            internal static extern void InitForCurrentPlatform_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPlatformInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPlatformInfo>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxPlatformInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPlatformInfo(native.ToPointer(), skipVTables);
        }

        public static wxPlatformInfo __CreateInstance(wxPlatformInfo.Internal native, bool skipVTables = false)
        {
            return new wxPlatformInfo(native, skipVTables);
        }

        private static void* __CopyValue(wxPlatformInfo.Internal native)
        {
            var ret = Marshal.AllocHGlobal(160);
            wxPlatformInfo.Internal.cctor_3(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxPlatformInfo(wxPlatformInfo.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPlatformInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxPlatformInfo()
        {
            __Instance = Marshal.AllocHGlobal(160);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxPlatformInfo(wxPortId pid, int tkMajor, int tkMinor, wxOperatingSystemId id, int osMajor, int osMinor, wxArchitecture arch, wxEndianness endian, bool usingUniversal)
        {
            __Instance = Marshal.AllocHGlobal(160);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = pid;
            var arg3 = id;
            var arg6 = arch;
            var arg7 = endian;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0, tkMajor, tkMinor, arg3, osMajor, osMinor, arg6, arg7, usingUniversal);
        }

        public wxPlatformInfo(wxPlatformInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(160);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_3((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxPlatformInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static bool operator ==(wxPlatformInfo __op, wxPlatformInfo t)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool tNull = ReferenceEquals(t, null);
            if (__opNull || tNull)
                return __opNull && tNull;
            var arg0 = __op.__Instance;
            var arg1 = t.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxPlatformInfo;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxPlatformInfo __op, wxPlatformInfo t)
        {
            bool __opNull = ReferenceEquals(__op, null);
            bool tNull = ReferenceEquals(t, null);
            if (__opNull || tNull)
                return !(__opNull && tNull);
            var arg0 = __op.__Instance;
            var arg1 = t.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public int GetOSMajorVersion()
        {
            var __ret = Internal.GetOSMajorVersion_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetOSMinorVersion()
        {
            var __ret = Internal.GetOSMinorVersion_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool CheckOSVersion(int major, int minor)
        {
            var __ret = Internal.CheckOSVersion_0((__Instance + __PointerAdjustment), major, minor);
            return __ret;
        }

        public int GetToolkitMajorVersion()
        {
            var __ret = Internal.GetToolkitMajorVersion_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetToolkitMinorVersion()
        {
            var __ret = Internal.GetToolkitMinorVersion_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool CheckToolkitVersion(int major, int minor)
        {
            var __ret = Internal.CheckToolkitVersion_0((__Instance + __PointerAdjustment), major, minor);
            return __ret;
        }

        public bool IsUsingUniversalWidgets()
        {
            var __ret = Internal.IsUsingUniversalWidgets_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxOperatingSystemId GetOperatingSystemId()
        {
            var __ret = Internal.GetOperatingSystemId_1((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxLinuxDistributionInfo GetLinuxDistributionInfo()
        {
            var __ret = new wxLinuxDistributionInfo.Internal();
            Internal.GetLinuxDistributionInfo_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxLinuxDistributionInfo.__CreateInstance(__ret);
        }

        public wxPortId GetPortId()
        {
            var __ret = Internal.GetPortId_1((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxArchitecture GetArchitecture()
        {
            var __ret = Internal.GetArchitecture_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxEndianness GetEndianness()
        {
            var __ret = Internal.GetEndianness_1((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString GetOperatingSystemFamilyName()
        {
            var __ret = new wxString.Internal();
            Internal.GetOperatingSystemFamilyName_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetOperatingSystemIdName()
        {
            var __ret = new wxString.Internal();
            Internal.GetOperatingSystemIdName_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetPortIdName()
        {
            var __ret = new wxString.Internal();
            Internal.GetPortIdName_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetPortIdShortName()
        {
            var __ret = new wxString.Internal();
            Internal.GetPortIdShortName_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetArchName()
        {
            var __ret = new wxString.Internal();
            Internal.GetArchName_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetEndiannessName()
        {
            var __ret = new wxString.Internal();
            Internal.GetEndiannessName_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetOperatingSystemDescription()
        {
            var __ret = new wxString.Internal();
            Internal.GetOperatingSystemDescription_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetDesktopEnvironment()
        {
            var __ret = new wxString.Internal();
            Internal.GetDesktopEnvironment_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public void SetOSVersion(int major, int minor)
        {
            Internal.SetOSVersion_0((__Instance + __PointerAdjustment), major, minor);
        }

        public void SetToolkitVersion(int major, int minor)
        {
            Internal.SetToolkitVersion_0((__Instance + __PointerAdjustment), major, minor);
        }

        public void SetOperatingSystemId(wxOperatingSystemId n)
        {
            var arg0 = n;
            Internal.SetOperatingSystemId_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetOperatingSystemDescription(wxString desc)
        {
            if (ReferenceEquals(desc, null))
                throw new global::System.ArgumentNullException("desc", "Cannot be null because it is a C++ reference (&).");
            var arg0 = desc.__Instance;
            Internal.SetOperatingSystemDescription_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetPortId(wxPortId n)
        {
            var arg0 = n;
            Internal.SetPortId_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetArchitecture(wxArchitecture n)
        {
            var arg0 = n;
            Internal.SetArchitecture_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetEndianness(wxEndianness n)
        {
            var arg0 = n;
            Internal.SetEndianness_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetDesktopEnvironment(wxString de)
        {
            if (ReferenceEquals(de, null))
                throw new global::System.ArgumentNullException("de", "Cannot be null because it is a C++ reference (&).");
            var arg0 = de.__Instance;
            Internal.SetDesktopEnvironment_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetLinuxDistributionInfo(wxLinuxDistributionInfo di)
        {
            if (ReferenceEquals(di, null))
                throw new global::System.ArgumentNullException("di", "Cannot be null because it is a C++ reference (&).");
            var arg0 = di.__Instance;
            Internal.SetLinuxDistributionInfo_0((__Instance + __PointerAdjustment), arg0);
        }

        public bool IsOk()
        {
            var __ret = Internal.IsOk_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected void InitForCurrentPlatform()
        {
            Internal.InitForCurrentPlatform_0((__Instance + __PointerAdjustment));
        }

        public static wxPlatformInfo Get()
        {
            var __ret = Internal.Get_0();
            wxPlatformInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxPlatformInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxPlatformInfo) wxPlatformInfo.NativeToManagedMap[__ret];
            else __result0 = wxPlatformInfo.__CreateInstance(__ret);
            return __result0;
        }

        public static wxOperatingSystemId GetOperatingSystemId(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = Internal.GetOperatingSystemId_0(arg0);
            return __ret;
        }

        public static wxPortId GetPortId(wxString portname)
        {
            if (ReferenceEquals(portname, null))
                throw new global::System.ArgumentNullException("portname", "Cannot be null because it is a C++ reference (&).");
            var arg0 = portname.__Instance;
            var __ret = Internal.GetPortId_0(arg0);
            return __ret;
        }

        public static wxArchitecture GetArch(wxString arch)
        {
            if (ReferenceEquals(arch, null))
                throw new global::System.ArgumentNullException("arch", "Cannot be null because it is a C++ reference (&).");
            var arg0 = arch.__Instance;
            var __ret = Internal.GetArch_0(arg0);
            return __ret;
        }

        public static wxEndianness GetEndianness(wxString end)
        {
            if (ReferenceEquals(end, null))
                throw new global::System.ArgumentNullException("end", "Cannot be null because it is a C++ reference (&).");
            var arg0 = end.__Instance;
            var __ret = Internal.GetEndianness_0(arg0);
            return __ret;
        }

        public static wxString GetOperatingSystemFamilyName(wxOperatingSystemId os)
        {
            var arg0 = os;
            var __ret = new wxString.Internal();
            Internal.GetOperatingSystemFamilyName_0(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString GetOperatingSystemIdName(wxOperatingSystemId os)
        {
            var arg0 = os;
            var __ret = new wxString.Internal();
            Internal.GetOperatingSystemIdName_0(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString GetPortIdName(wxPortId port, bool usingUniversal)
        {
            var arg0 = port;
            var __ret = new wxString.Internal();
            Internal.GetPortIdName_0(new IntPtr(&__ret), arg0, usingUniversal);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString GetPortIdShortName(wxPortId port, bool usingUniversal)
        {
            var arg0 = port;
            var __ret = new wxString.Internal();
            Internal.GetPortIdShortName_0(new IntPtr(&__ret), arg0, usingUniversal);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString GetArchName(wxArchitecture arch)
        {
            var arg0 = arch;
            var __ret = new wxString.Internal();
            Internal.GetArchName_0(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString GetEndiannessName(wxEndianness end)
        {
            var arg0 = end;
            var __ret = new wxString.Internal();
            Internal.GetEndiannessName_0(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString GetOperatingSystemDirectory()
        {
            var __ret = new wxString.Internal();
            Internal.GetOperatingSystemDirectory_0(new IntPtr(&__ret));
            return wxString.__CreateInstance(__ret);
        }

        protected static bool DoCheckVersion(int majorCur, int minorCur, int major, int minor)
        {
            var __ret = Internal.DoCheckVersion_0(majorCur, minorCur, major, minor);
            return __ret;
        }

        protected bool m_initializedForCurrentPlatform
        {
            get
            {
                return ((Internal*) __Instance)->m_initializedForCurrentPlatform != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_initializedForCurrentPlatform = (byte) (value ? 1 : 0);
            }
        }

        protected int m_osVersionMajor
        {
            get
            {
                return ((Internal*) __Instance)->m_osVersionMajor;
            }

            set
            {
                ((Internal*) __Instance)->m_osVersionMajor = value;
            }
        }

        protected int m_osVersionMinor
        {
            get
            {
                return ((Internal*) __Instance)->m_osVersionMinor;
            }

            set
            {
                ((Internal*) __Instance)->m_osVersionMinor = value;
            }
        }

        protected wxOperatingSystemId m_os
        {
            get
            {
                return ((Internal*) __Instance)->m_os;
            }

            set
            {
                ((Internal*) __Instance)->m_os = value;
            }
        }

        protected wxString m_osDesc
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_osDesc);
            }

            set
            {
                ((Internal*) __Instance)->m_osDesc = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        protected wxString m_desktopEnv
        {
            get
            {
                return wxString.__CreateInstance(((Internal*) __Instance)->m_desktopEnv);
            }

            set
            {
                ((Internal*) __Instance)->m_desktopEnv = ReferenceEquals(value, null) ? new wxString.Internal() : *(wxString.Internal*) (value.__Instance);
            }
        }

        protected wxLinuxDistributionInfo m_ldi
        {
            get
            {
                return wxLinuxDistributionInfo.__CreateInstance(((Internal*) __Instance)->m_ldi);
            }

            set
            {
                ((Internal*) __Instance)->m_ldi = ReferenceEquals(value, null) ? new wxLinuxDistributionInfo.Internal() : *(wxLinuxDistributionInfo.Internal*) (value.__Instance);
            }
        }

        protected int m_tkVersionMajor
        {
            get
            {
                return ((Internal*) __Instance)->m_tkVersionMajor;
            }

            set
            {
                ((Internal*) __Instance)->m_tkVersionMajor = value;
            }
        }

        protected int m_tkVersionMinor
        {
            get
            {
                return ((Internal*) __Instance)->m_tkVersionMinor;
            }

            set
            {
                ((Internal*) __Instance)->m_tkVersionMinor = value;
            }
        }

        protected wxPortId m_port
        {
            get
            {
                return ((Internal*) __Instance)->m_port;
            }

            set
            {
                ((Internal*) __Instance)->m_port = value;
            }
        }

        protected bool m_usingUniversal
        {
            get
            {
                return ((Internal*) __Instance)->m_usingUniversal != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_usingUniversal = (byte) (value ? 1 : 0);
            }
        }

        protected wxArchitecture m_arch
        {
            get
            {
                return ((Internal*) __Instance)->m_arch;
            }

            set
            {
                ((Internal*) __Instance)->m_arch = value;
            }
        }

        protected wxEndianness m_endian
        {
            get
            {
                return ((Internal*) __Instance)->m_endian;
            }

            set
            {
                ((Internal*) __Instance)->m_endian = value;
            }
        }
    }
}
