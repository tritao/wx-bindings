//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr wxObjectConstructorFn();

    public unsafe partial class wxClassInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_className;

            [FieldOffset(4)]
            public int m_objectSize;

            [FieldOffset(8)]
            public global::System.IntPtr m_objectConstructor;

            [FieldOffset(12)]
            public global::System.IntPtr m_baseInfo1;

            [FieldOffset(16)]
            public global::System.IntPtr m_baseInfo2;

            [FieldOffset(20)]
            public global::System.IntPtr m_next;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxClassInfoC2EPKwPKS_S3_iPFP8wxObjectvE")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr className, global::System.IntPtr baseInfo1, global::System.IntPtr baseInfo2, int size, global::System.IntPtr ctor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxClassInfoD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo12CreateObjectEv")]
            internal static extern global::System.IntPtr CreateObject_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo9IsDynamicEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsDynamic_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo12GetClassNameEv")]
            internal static extern global::System.IntPtr GetClassName_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo17GetBaseClassName1Ev")]
            internal static extern global::System.IntPtr GetBaseClassName1_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo17GetBaseClassName2Ev")]
            internal static extern global::System.IntPtr GetBaseClassName2_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo13GetBaseClass1Ev")]
            internal static extern global::System.IntPtr GetBaseClass1_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo13GetBaseClass2Ev")]
            internal static extern global::System.IntPtr GetBaseClass2_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo7GetSizeEv")]
            internal static extern int GetSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo14GetConstructorEv")]
            internal static extern global::System.IntPtr GetConstructor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxClassInfo8GetFirstEv")]
            internal static extern global::System.IntPtr GetFirst_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo7GetNextEv")]
            internal static extern global::System.IntPtr GetNext_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxClassInfo9FindClassERK8wxString")]
            internal static extern global::System.IntPtr FindClass_0(global::System.IntPtr className);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxClassInfo8IsKindOfEPKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsKindOf_0(global::System.IntPtr instance, global::System.IntPtr info);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxClassInfo15begin_classinfoEv")]
            internal static extern wxClassInfo.const_iterator.Internal begin_classinfo_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxClassInfo13end_classinfoEv")]
            internal static extern wxClassInfo.const_iterator.Internal end_classinfo_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxClassInfo8RegisterEv")]
            internal static extern void Register_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxClassInfo10UnregisterEv")]
            internal static extern void Unregister_0(global::System.IntPtr instance);
        }

        public unsafe partial class const_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_node;

                [FieldOffset(4)]
                public global::System.IntPtr m_table;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxClassInfo14const_iteratorC2Ev")]
                internal static extern void ctor_1(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxClassInfo14const_iteratorC2ERKS0_")]
                internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN11wxClassInfo14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxClassInfo14const_iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr it);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK11wxClassInfo14const_iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr it);
            }

            public class value_type { }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(8);
                *(const_iterator.Internal*) ret = native;
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_1((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxClassInfo.const_iterator _0)
            {
                __Instance = Marshal.AllocHGlobal(8);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                *((const_iterator.Internal*) __Instance) = *((const_iterator.Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxClassInfo.const_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxClassInfo.const_iterator operator ++(wxClassInfo.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxClassInfo.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxClassInfo.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxClassInfo.const_iterator) wxClassInfo.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxClassInfo.const_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static bool operator !=(wxClassInfo.const_iterator __op, wxClassInfo.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return !(__opNull && itNull);
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxClassInfo.const_iterator __op, wxClassInfo.const_iterator it)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool itNull = ReferenceEquals(it, null);
                if (__opNull || itNull)
                    return __opNull && itNull;
                var arg0 = __op.__Instance;
                var arg1 = it.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as const_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxClassInfo> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxClassInfo>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxClassInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxClassInfo(native.ToPointer(), skipVTables);
        }

        public static wxClassInfo __CreateInstance(wxClassInfo.Internal native, bool skipVTables = false)
        {
            return new wxClassInfo(native, skipVTables);
        }

        private static void* __CopyValue(wxClassInfo.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            *(wxClassInfo.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxClassInfo(wxClassInfo.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxClassInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxClassInfo(string className, wxClassInfo baseInfo1, wxClassInfo baseInfo2, int size, wxObjectConstructorFn ctor)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(className);
            var arg1 = ReferenceEquals(baseInfo1, null) ? global::System.IntPtr.Zero : baseInfo1.__Instance;
            var arg2 = ReferenceEquals(baseInfo2, null) ? global::System.IntPtr.Zero : baseInfo2.__Instance;
            var arg4 = ctor == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(ctor);
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1, arg2, size, arg4);
            Marshal.FreeHGlobal(arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxClassInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxObject CreateObject()
        {
            var __ret = Internal.CreateObject_0((__Instance + __PointerAdjustment));
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public bool IsDynamic()
        {
            var __ret = Internal.IsDynamic_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public string GetClassName()
        {
            var __ret = Internal.GetClassName_0((__Instance + __PointerAdjustment));
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public string GetBaseClassName1()
        {
            var __ret = Internal.GetBaseClassName1_0((__Instance + __PointerAdjustment));
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public string GetBaseClassName2()
        {
            var __ret = Internal.GetBaseClassName2_0((__Instance + __PointerAdjustment));
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public wxClassInfo GetBaseClass1()
        {
            var __ret = Internal.GetBaseClass1_0((__Instance + __PointerAdjustment));
            wxClassInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClassInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClassInfo) wxClassInfo.NativeToManagedMap[__ret];
            else __result0 = wxClassInfo.__CreateInstance(__ret);
            return __result0;
        }

        public wxClassInfo GetBaseClass2()
        {
            var __ret = Internal.GetBaseClass2_0((__Instance + __PointerAdjustment));
            wxClassInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClassInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClassInfo) wxClassInfo.NativeToManagedMap[__ret];
            else __result0 = wxClassInfo.__CreateInstance(__ret);
            return __result0;
        }

        public int GetSize()
        {
            var __ret = Internal.GetSize_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxObjectConstructorFn GetConstructor()
        {
            var __ret = Internal.GetConstructor_0((__Instance + __PointerAdjustment));
            var __ptr0 = __ret;
            return (wxObjectConstructorFn)Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(wxObjectConstructorFn));
        }

        public wxClassInfo GetNext()
        {
            var __ret = Internal.GetNext_0((__Instance + __PointerAdjustment));
            wxClassInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClassInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClassInfo) wxClassInfo.NativeToManagedMap[__ret];
            else __result0 = wxClassInfo.__CreateInstance(__ret);
            return __result0;
        }

        public bool IsKindOf(wxClassInfo info)
        {
            var arg0 = ReferenceEquals(info, null) ? global::System.IntPtr.Zero : info.__Instance;
            var __ret = Internal.IsKindOf_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        protected void Register()
        {
            Internal.Register_0((__Instance + __PointerAdjustment));
        }

        protected void Unregister()
        {
            Internal.Unregister_0((__Instance + __PointerAdjustment));
        }

        public static wxClassInfo GetFirst()
        {
            var __ret = Internal.GetFirst_0();
            wxClassInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClassInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClassInfo) wxClassInfo.NativeToManagedMap[__ret];
            else __result0 = wxClassInfo.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo FindClass(wxString className)
        {
            if (ReferenceEquals(className, null))
                throw new global::System.ArgumentNullException("className", "Cannot be null because it is a C++ reference (&).");
            var arg0 = className.__Instance;
            var __ret = Internal.FindClass_0(arg0);
            wxClassInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxClassInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxClassInfo) wxClassInfo.NativeToManagedMap[__ret];
            else __result0 = wxClassInfo.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo.const_iterator begin_classinfo()
        {
            var __ret = Internal.begin_classinfo_0();
            return wxClassInfo.const_iterator.__CreateInstance(__ret);
        }

        public static wxClassInfo.const_iterator end_classinfo()
        {
            var __ret = Internal.end_classinfo_0();
            return wxClassInfo.const_iterator.__CreateInstance(__ret);
        }
    }

    public unsafe partial class rtti
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z21wxCreateDynamicObjectRK8wxString")]
            internal static extern global::System.IntPtr wxCreateDynamicObject_0(global::System.IntPtr name);
        }

        public static wxObject wxCreateDynamicObject(wxString name)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var arg0 = name.__Instance;
            var __ret = Internal.wxCreateDynamicObject_0(arg0);
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }
    }
}
