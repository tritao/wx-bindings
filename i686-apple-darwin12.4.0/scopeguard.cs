//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public class wxScopeGuard { }

    public unsafe partial class wxScopeGuardImpl0
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_wasDismissed;
        }
    }

    public unsafe partial class wxScopeGuardImpl1
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_wasDismissed;
        }
    }

    public unsafe partial class wxScopeGuardImpl2
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_wasDismissed;
        }
    }

    public unsafe partial class wxScopeGuardImpl3
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_wasDismissed;
        }
    }

    public unsafe partial class wxObjScopeGuardImpl0
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_wasDismissed;
        }
    }

    public unsafe partial class wxObjScopeGuardImpl1
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_wasDismissed;
        }
    }

    public unsafe partial class wxObjScopeGuardImpl2
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_wasDismissed;
        }
    }

    public unsafe partial class wxObjScopeGuardImpl3
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_wasDismissed;
        }
    }

    public unsafe partial class wxScopeGuardImplBase : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 1)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public byte m_wasDismissed;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxScopeGuardImplBaseC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxScopeGuardImplBaseC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr other);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxScopeGuardImplBaseD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxScopeGuardImplBase7DismissEv")]
            internal static extern void Dismiss_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxScopeGuardImplBase12WasDismissedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool WasDismissed_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxScopeGuardImplBase> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxScopeGuardImplBase>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxScopeGuardImplBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxScopeGuardImplBase(native.ToPointer(), skipVTables);
        }

        public static wxScopeGuardImplBase __CreateInstance(wxScopeGuardImplBase.Internal native, bool skipVTables = false)
        {
            return new wxScopeGuardImplBase(native, skipVTables);
        }

        private static void* __CopyValue(wxScopeGuardImplBase.Internal native)
        {
            var ret = Marshal.AllocHGlobal(1);
            wxScopeGuardImplBase.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxScopeGuardImplBase(wxScopeGuardImplBase.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxScopeGuardImplBase(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxScopeGuardImplBase()
        {
            __Instance = Marshal.AllocHGlobal(1);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxScopeGuardImplBase(wxScopeGuardImplBase other)
        {
            __Instance = Marshal.AllocHGlobal(1);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(other, null))
                throw new global::System.ArgumentNullException("other", "Cannot be null because it is a C++ reference (&).");
            var arg0 = other.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxScopeGuardImplBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void Dismiss()
        {
            Internal.Dismiss_0((__Instance + __PointerAdjustment));
        }

        public bool WasDismissed()
        {
            var __ret = Internal.WasDismissed_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected bool m_wasDismissed
        {
            get
            {
                return ((Internal*) __Instance)->m_wasDismissed != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_wasDismissed = (byte) (value ? 1 : 0);
            }
        }
    }

    namespace wxPrivate
    {
        public class VariableSetter { }

        public unsafe partial class VariableSetterImpl
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public byte m_wasDismissed;
            }
        }

        public unsafe partial class VariableNullerImpl
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public byte m_wasDismissed;
            }
        }

        public unsafe partial class VariableSetterBase : wxScopeGuardImplBase, IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 1)]
            public new partial struct Internal
            {
                [FieldOffset(0)]
                public byte m_wasDismissed;

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN9wxPrivate18VariableSetterBaseC2ERKS0_")]
                internal static extern void cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN9wxPrivate18VariableSetterBaseC2Ev")]
                internal static extern void ctor_2(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN9wxPrivate18VariableSetterBaseD2Ev")]
                internal static extern void dtor_0(global::System.IntPtr instance);
            }

            public static new VariableSetterBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new VariableSetterBase(native.ToPointer(), skipVTables);
            }

            public static VariableSetterBase __CreateInstance(VariableSetterBase.Internal native, bool skipVTables = false)
            {
                return new VariableSetterBase(native, skipVTables);
            }

            private static void* __CopyValue(VariableSetterBase.Internal native)
            {
                var ret = Marshal.AllocHGlobal(1);
                wxPrivate.VariableSetterBase.Internal.cctor_0(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private VariableSetterBase(VariableSetterBase.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected VariableSetterBase(void* native, bool skipVTables = false)
                : base((void*) null)
            {
                __PointerAdjustment = 0;
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public VariableSetterBase(wxPrivate.VariableSetterBase _0)
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(1);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
                var arg0 = _0.__Instance;
                Internal.cctor_0((__Instance + __PointerAdjustment), arg0);
            }

            public VariableSetterBase()
                : this((void*) null)
            {
                __Instance = Marshal.AllocHGlobal(1);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_2((__Instance + __PointerAdjustment));
            }

            protected override void Dispose(bool disposing)
            {
                wxScopeGuardImplBase __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                Internal.dtor_0((__Instance + __PointerAdjustment));
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }
        }
    }
}
