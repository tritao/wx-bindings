//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe abstract partial class wxMBConv : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxMBConvC2ERKS_")]
            internal static extern void cctor_0(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxMBConvC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxMBConvD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxMBConv6cMB2WCEPKc")]
            internal static extern void cMB2WC_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr @in);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxMBConv6cWC2MBEPKw")]
            internal static extern void cWC2MB_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr @in);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxMBConv6cMB2WCEPKcmPm")]
            internal static extern void cMB2WC_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr @in, uint inLen, uint* outLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxMBConv6cWC2MBEPKwmPm")]
            internal static extern void cWC2MB_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr @in, uint inLen, uint* outLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxMBConv6cMB2WXEPKc")]
            internal static extern void cMB2WX_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxMBConv6cWX2MBEPKw")]
            internal static extern void cWX2MB_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxMBConv6cWC2WXEPKw")]
            internal static extern global::System.IntPtr cWC2WX_0(global::System.IntPtr instance, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxMBConv6cWX2WCEPKw")]
            internal static extern global::System.IntPtr cWX2WC_0(global::System.IntPtr instance, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxMBConv14GetMaxMBNulLenEv")]
            internal static extern uint GetMaxMBNulLen_0();
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxMBConv> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxMBConv>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxMBConv __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvInternal(native.ToPointer(), skipVTables);
        }

        public static wxMBConv __CreateInstance(wxMBConv.Internal native, bool skipVTables = false)
        {
            return new wxMBConvInternal(native, skipVTables);
        }

        protected wxMBConv(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxMBConv(wxMBConv _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConv");
        }

        protected wxMBConv()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConv");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxMBConv __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public virtual uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___ToWChar_0Delegate = (Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint));
            var arg0 = dst;
            var arg2 = Marshal.StringToHGlobalAnsi(src);
            var __ret = ___ToWChar_0Delegate((__Instance + __PointerAdjustment), arg0, dstLen, arg2, srcLen);
            Marshal.FreeHGlobal(arg2);
            return __ret;
        }

        public virtual uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            var ___FromWChar_0Delegate = (Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint));
            var arg0 = dst;
            var arg2 = Marshal.StringToHGlobalAnsi(src);
            var __ret = ___FromWChar_0Delegate((__Instance + __PointerAdjustment), arg0, dstLen, arg2, srcLen);
            Marshal.FreeHGlobal(arg2);
            return __ret;
        }

        public wxWCharBuffer cMB2WC(string @in)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(@in);
            var __ret = new wxWCharBuffer.Internal();
            Internal.cMB2WC_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return wxWCharBuffer.__CreateInstance(__ret);
        }

        public wxCharBuffer cWC2MB(string @in)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(@in);
            var __ret = new wxCharBuffer.Internal();
            Internal.cWC2MB_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return wxCharBuffer.__CreateInstance(__ret);
        }

        public wxWCharBuffer cMB2WC(string @in, uint inLen, ref uint outLen)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(@in);
            fixed (uint* __refParamPtr2 = &outLen)
            {
                var arg2 = __refParamPtr2;
                var __ret = new wxWCharBuffer.Internal();
                Internal.cMB2WC_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, inLen, arg2);
                Marshal.FreeHGlobal(arg0);
                return wxWCharBuffer.__CreateInstance(__ret);
            }
        }

        public wxCharBuffer cWC2MB(string @in, uint inLen, ref uint outLen)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(@in);
            fixed (uint* __refParamPtr2 = &outLen)
            {
                var arg2 = __refParamPtr2;
                var __ret = new wxCharBuffer.Internal();
                Internal.cWC2MB_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, inLen, arg2);
                Marshal.FreeHGlobal(arg0);
                return wxCharBuffer.__CreateInstance(__ret);
            }
        }

        public wxWCharBuffer cMB2WX(string psz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            var __ret = new wxWCharBuffer.Internal();
            Internal.cMB2WX_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return wxWCharBuffer.__CreateInstance(__ret);
        }

        public wxCharBuffer cWX2MB(string psz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            var __ret = new wxCharBuffer.Internal();
            Internal.cWX2MB_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return wxCharBuffer.__CreateInstance(__ret);
        }

        public string cWC2WX(string psz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            var __ret = Internal.cWC2WX_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public string cWX2WC(string psz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            var __ret = Internal.cWX2WC_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public virtual uint GetMBNulLen()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___GetMBNulLen_0Delegate = (Delegates.Func_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr));
            var __ret = ___GetMBNulLen_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual uint MB2WC(char* @out, string @in, uint outLen)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___MB2WC_0Delegate = (Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint));
            var arg0 = @out;
            var arg1 = Marshal.StringToHGlobalAnsi(@in);
            var __ret = ___MB2WC_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, outLen);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public virtual uint WC2MB(sbyte* @out, string @in, uint outLen)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___WC2MB_0Delegate = (Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint));
            var arg0 = @out;
            var arg1 = Marshal.StringToHGlobalAnsi(@in);
            var __ret = ___WC2MB_0Delegate((__Instance + __PointerAdjustment), arg0, arg1, outLen);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public abstract wxMBConv Clone();

        public static uint GetMaxMBNulLen()
        {
            var __ret = Internal.GetMaxMBNulLen_0();
            return __ret;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const = 0
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxMBConv()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMBConvLibc : wxMBConv, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMBConvLibcC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMBConvLibcC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxMBConvLibc __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvLibc(native.ToPointer(), skipVTables);
        }

        public static wxMBConvLibc __CreateInstance(wxMBConvLibc.Internal native, bool skipVTables = false)
        {
            return new wxMBConvLibc(native, skipVTables);
        }

        private static void* __CopyValue(wxMBConvLibc.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxMBConvLibc.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMBConvLibc(wxMBConvLibc.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMBConvLibc(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMBConvLibc()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvLibc");
        }

        public wxMBConvLibc(wxMBConvLibc _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvLibc");
        }

        public override uint MB2WC(char* outputBuf, string psz, uint outputSize)
        {
            return base.MB2WC(outputBuf, psz, outputSize);
        }

        public override uint WC2MB(sbyte* outputBuf, string psz, uint outputSize)
        {
            return base.WC2MB(outputBuf, psz, outputSize);
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvLibc) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvLibc) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvLibc) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *outputBuf, const char *psz, size_t outputSize) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* outputBuf, global::System.IntPtr psz, uint outputSize)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvLibc) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(outputBuf, Marshal.PtrToStringAnsi(psz), outputSize);
            return __ret;
        }

        // size_t WC2MB(char *outputBuf, const wchar_t *psz, size_t outputSize) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* outputBuf, global::System.IntPtr psz, uint outputSize)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvLibc) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(outputBuf, CppSharp.Runtime.Helpers.MarshalEncodedString(psz, System.Text.Encoding.UTF32), outputSize);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvLibc) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvLibc
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvLibc) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxConvBrokenFileNames : wxMBConv, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_conv;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxConvBrokenFileNamesC2ERK8wxString")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr charset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxConvBrokenFileNamesC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr conv);
        }

        public static new wxConvBrokenFileNames __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxConvBrokenFileNames(native.ToPointer(), skipVTables);
        }

        public static wxConvBrokenFileNames __CreateInstance(wxConvBrokenFileNames.Internal native, bool skipVTables = false)
        {
            return new wxConvBrokenFileNames(native, skipVTables);
        }

        private static void* __CopyValue(wxConvBrokenFileNames.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            wxConvBrokenFileNames.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxConvBrokenFileNames(wxConvBrokenFileNames.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxConvBrokenFileNames(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxConvBrokenFileNames(wxString charset)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(charset, null))
                throw new global::System.ArgumentNullException("charset", "Cannot be null because it is a C++ reference (&).");
            var arg0 = charset.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxConvBrokenFileNames");
        }

        public wxConvBrokenFileNames(wxConvBrokenFileNames conv)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(conv, null))
                throw new global::System.ArgumentNullException("conv", "Cannot be null because it is a C++ reference (&).");
            var arg0 = conv.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxConvBrokenFileNames");
        }

        public override uint MB2WC(char* @out, string @in, uint outLen)
        {
            return base.MB2WC(@out, @in, outLen);
        }

        public override uint WC2MB(sbyte* @out, string @in, uint outLen)
        {
            return base.WC2MB(@out, @in, outLen);
        }

        public override uint GetMBNulLen()
        {
            return base.GetMBNulLen();
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxConvBrokenFileNames) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxConvBrokenFileNames) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxConvBrokenFileNames) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxConvBrokenFileNames) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxConvBrokenFileNames) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxConvBrokenFileNames) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxConvBrokenFileNames()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxConvBrokenFileNames) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMBConvUTF7 : wxMBConv, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            internal wxMBConvUTF7.DecoderState.Internal m_stateDecoder;

            [FieldOffset(20)]
            internal wxMBConvUTF7.EncoderState.Internal m_stateEncoder;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMBConvUTF7C2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMBConvUTF7C2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        internal unsafe partial class StateMode
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }
        }

        internal unsafe partial class DecoderState
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxMBConvUTF7.StateMode.Mode mode;

                [FieldOffset(4)]
                public uint accum;

                [FieldOffset(8)]
                public uint bit;

                [FieldOffset(12)]
                public byte msb;

                [FieldOffset(13)]
                public byte isLSB;
            }
        }

        internal unsafe partial class EncoderState
        {
            [StructLayout(LayoutKind.Explicit, Size = 12)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxMBConvUTF7.StateMode.Mode mode;

                [FieldOffset(4)]
                public uint accum;

                [FieldOffset(8)]
                public uint bit;
            }
        }

        public static new wxMBConvUTF7 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvUTF7(native.ToPointer(), skipVTables);
        }

        public static wxMBConvUTF7 __CreateInstance(wxMBConvUTF7.Internal native, bool skipVTables = false)
        {
            return new wxMBConvUTF7(native, skipVTables);
        }

        private static void* __CopyValue(wxMBConvUTF7.Internal native)
        {
            var ret = Marshal.AllocHGlobal(32);
            wxMBConvUTF7.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMBConvUTF7(wxMBConvUTF7.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMBConvUTF7(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMBConvUTF7()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(32);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF7");
        }

        public wxMBConvUTF7(wxMBConvUTF7 _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(32);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF7");
        }

        public override uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            return base.ToWChar(dst, dstLen, src, srcLen);
        }

        public override uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            return base.FromWChar(dst, dstLen, src, srcLen);
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF7) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF7) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF7) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF7) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF7) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF7) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvUTF7
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF7) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMBConvStrictUTF8 : wxMBConv, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxMBConvStrictUTF8C2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxMBConvStrictUTF8C2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxMBConvStrictUTF8 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvStrictUTF8(native.ToPointer(), skipVTables);
        }

        public static wxMBConvStrictUTF8 __CreateInstance(wxMBConvStrictUTF8.Internal native, bool skipVTables = false)
        {
            return new wxMBConvStrictUTF8(native, skipVTables);
        }

        private static void* __CopyValue(wxMBConvStrictUTF8.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxMBConvStrictUTF8.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMBConvStrictUTF8(wxMBConvStrictUTF8.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMBConvStrictUTF8(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMBConvStrictUTF8()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvStrictUTF8");
        }

        public wxMBConvStrictUTF8(wxMBConvStrictUTF8 _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvStrictUTF8");
        }

        public override uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            return base.ToWChar(dst, dstLen, src, srcLen);
        }

        public override uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            return base.FromWChar(dst, dstLen, src, srcLen);
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvStrictUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvStrictUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvStrictUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvStrictUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvStrictUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvStrictUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvStrictUTF8
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvStrictUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMBConvUTF8 : wxMBConvStrictUTF8, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public int m_options;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMBConvUTF8C2Ei")]
            internal static extern void ctor_0(global::System.IntPtr instance, int options);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMBConvUTF8C2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public enum MAP_INVALID_UTF8 : uint
        {
            MAP_INVALID_UTF8_NOT = 0,
            MAP_INVALID_UTF8_TO_PUA = 1,
            MAP_INVALID_UTF8_TO_OCTAL = 2
        }

        public static new wxMBConvUTF8 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvUTF8(native.ToPointer(), skipVTables);
        }

        public static wxMBConvUTF8 __CreateInstance(wxMBConvUTF8.Internal native, bool skipVTables = false)
        {
            return new wxMBConvUTF8(native, skipVTables);
        }

        private static void* __CopyValue(wxMBConvUTF8.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            wxMBConvUTF8.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMBConvUTF8(wxMBConvUTF8.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMBConvUTF8(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMBConvUTF8(int options)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment), options);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF8");
        }

        public wxMBConvUTF8(wxMBConvUTF8 _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF8");
        }

        public override uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            return base.ToWChar(dst, dstLen, src, srcLen);
        }

        public override uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            return base.FromWChar(dst, dstLen, src, srcLen);
        }

        public override wxMBConv Clone()
        {
            return base.Clone();
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvUTF8
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF8) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe abstract partial class wxMBConvUTF16Base : wxMBConv, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxMBConvUTF16BaseC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxMBConvUTF16BaseC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxMBConvUTF16BaseD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxMBConvUTF16Base9GetLengthEPKcm")]
            internal static extern uint GetLength_0(global::System.IntPtr src, uint srcLen);
        }

        public enum BYTES_PER_CHAR : uint
        {
            BYTES_PER_CHAR = 2
        }

        public static new wxMBConvUTF16Base __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvUTF16BaseInternal(native.ToPointer(), skipVTables);
        }

        public static wxMBConvUTF16Base __CreateInstance(wxMBConvUTF16Base.Internal native, bool skipVTables = false)
        {
            return new wxMBConvUTF16BaseInternal(native, skipVTables);
        }

        protected wxMBConvUTF16Base(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxMBConvUTF16Base()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF16Base");
        }

        protected wxMBConvUTF16Base(wxMBConvUTF16Base _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF16Base");
        }

        protected override void Dispose(bool disposing)
        {
            wxMBConv __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public override uint GetMBNulLen()
        {
            return base.GetMBNulLen();
        }

        protected static uint GetLength(string src, uint srcLen)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(src);
            var __ret = Internal.GetLength_0(arg0, srcLen);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const = 0
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvUTF16Base
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMBConvUTF16LE : wxMBConvUTF16Base, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMBConvUTF16LEC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMBConvUTF16LEC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxMBConvUTF16LE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvUTF16LE(native.ToPointer(), skipVTables);
        }

        public static wxMBConvUTF16LE __CreateInstance(wxMBConvUTF16LE.Internal native, bool skipVTables = false)
        {
            return new wxMBConvUTF16LE(native, skipVTables);
        }

        private static void* __CopyValue(wxMBConvUTF16LE.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxMBConvUTF16LE.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMBConvUTF16LE(wxMBConvUTF16LE.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMBConvUTF16LE(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMBConvUTF16LE()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF16LE");
        }

        public wxMBConvUTF16LE(wxMBConvUTF16LE _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF16LE");
        }

        public override uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            return base.ToWChar(dst, dstLen, src, srcLen);
        }

        public override uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            return base.FromWChar(dst, dstLen, src, srcLen);
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvUTF16LE
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMBConvUTF16BE : wxMBConvUTF16Base, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMBConvUTF16BEC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMBConvUTF16BEC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxMBConvUTF16BE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvUTF16BE(native.ToPointer(), skipVTables);
        }

        public static wxMBConvUTF16BE __CreateInstance(wxMBConvUTF16BE.Internal native, bool skipVTables = false)
        {
            return new wxMBConvUTF16BE(native, skipVTables);
        }

        private static void* __CopyValue(wxMBConvUTF16BE.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxMBConvUTF16BE.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMBConvUTF16BE(wxMBConvUTF16BE.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMBConvUTF16BE(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMBConvUTF16BE()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF16BE");
        }

        public wxMBConvUTF16BE(wxMBConvUTF16BE _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF16BE");
        }

        public override uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            return base.ToWChar(dst, dstLen, src, srcLen);
        }

        public override uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            return base.FromWChar(dst, dstLen, src, srcLen);
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvUTF16BE
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF16BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe abstract partial class wxMBConvUTF32Base : wxMBConv, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxMBConvUTF32BaseC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxMBConvUTF32BaseC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxMBConvUTF32BaseD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN17wxMBConvUTF32Base9GetLengthEPKcm")]
            internal static extern uint GetLength_0(global::System.IntPtr src, uint srcLen);
        }

        [Flags]
        public enum BYTES_PER_CHAR : uint
        {
            BYTES_PER_CHAR = 4
        }

        public static new wxMBConvUTF32Base __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvUTF32BaseInternal(native.ToPointer(), skipVTables);
        }

        public static wxMBConvUTF32Base __CreateInstance(wxMBConvUTF32Base.Internal native, bool skipVTables = false)
        {
            return new wxMBConvUTF32BaseInternal(native, skipVTables);
        }

        protected wxMBConvUTF32Base(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxMBConvUTF32Base()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF32Base");
        }

        protected wxMBConvUTF32Base(wxMBConvUTF32Base _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF32Base");
        }

        protected override void Dispose(bool disposing)
        {
            wxMBConv __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public override uint GetMBNulLen()
        {
            return base.GetMBNulLen();
        }

        protected static uint GetLength(string src, uint srcLen)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(src);
            var __ret = Internal.GetLength_0(arg0, srcLen);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const = 0
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvUTF32Base
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32Base) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMBConvUTF32LE : wxMBConvUTF32Base, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMBConvUTF32LEC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMBConvUTF32LEC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxMBConvUTF32LE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvUTF32LE(native.ToPointer(), skipVTables);
        }

        public static wxMBConvUTF32LE __CreateInstance(wxMBConvUTF32LE.Internal native, bool skipVTables = false)
        {
            return new wxMBConvUTF32LE(native, skipVTables);
        }

        private static void* __CopyValue(wxMBConvUTF32LE.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxMBConvUTF32LE.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMBConvUTF32LE(wxMBConvUTF32LE.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMBConvUTF32LE(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMBConvUTF32LE()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF32LE");
        }

        public wxMBConvUTF32LE(wxMBConvUTF32LE _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF32LE");
        }

        public override uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            return base.ToWChar(dst, dstLen, src, srcLen);
        }

        public override uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            return base.FromWChar(dst, dstLen, src, srcLen);
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvUTF32LE
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32LE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxMBConvUTF32BE : wxMBConvUTF32Base, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMBConvUTF32BEC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN15wxMBConvUTF32BEC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxMBConvUTF32BE __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMBConvUTF32BE(native.ToPointer(), skipVTables);
        }

        public static wxMBConvUTF32BE __CreateInstance(wxMBConvUTF32BE.Internal native, bool skipVTables = false)
        {
            return new wxMBConvUTF32BE(native, skipVTables);
        }

        private static void* __CopyValue(wxMBConvUTF32BE.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxMBConvUTF32BE.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMBConvUTF32BE(wxMBConvUTF32BE.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMBConvUTF32BE(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxMBConvUTF32BE()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF32BE");
        }

        public wxMBConvUTF32BE(wxMBConvUTF32BE _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxMBConvUTF32BE");
        }

        public override uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            return base.ToWChar(dst, dstLen, src, srcLen);
        }

        public override uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            return base.FromWChar(dst, dstLen, src, srcLen);
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxMBConvUTF32BE
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxMBConvUTF32BE) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxCSConv : wxMBConv, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public sbyte* m_name;

            [FieldOffset(8)]
            public wxFontEncoding m_encoding;

            [FieldOffset(12)]
            public global::System.IntPtr m_convReal;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxCSConvC2ERK8wxString")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr charset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxCSConvC2E14wxFontEncoding")]
            internal static extern void ctor_1(global::System.IntPtr instance, wxFontEncoding encoding);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxCSConvC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr conv);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxCSConv5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxCSConv4IsOkEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsOk_0(global::System.IntPtr instance);
        }

        public static new wxCSConv __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxCSConv(native.ToPointer(), skipVTables);
        }

        public static wxCSConv __CreateInstance(wxCSConv.Internal native, bool skipVTables = false)
        {
            return new wxCSConv(native, skipVTables);
        }

        private static void* __CopyValue(wxCSConv.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            wxCSConv.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxCSConv(wxCSConv.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxCSConv(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxCSConv(wxString charset)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(charset, null))
                throw new global::System.ArgumentNullException("charset", "Cannot be null because it is a C++ reference (&).");
            var arg0 = charset.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxCSConv");
        }

        public wxCSConv(wxFontEncoding encoding)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = encoding;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxCSConv");
        }

        public wxCSConv(wxCSConv conv)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(conv, null))
                throw new global::System.ArgumentNullException("conv", "Cannot be null because it is a C++ reference (&).");
            var arg0 = conv.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxCSConv");
        }

        public override uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            return base.ToWChar(dst, dstLen, src, srcLen);
        }

        public override uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            return base.FromWChar(dst, dstLen, src, srcLen);
        }

        public override uint GetMBNulLen()
        {
            return base.GetMBNulLen();
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public bool IsOk()
        {
            var __ret = Internal.IsOk_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCSConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCSConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCSConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCSConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCSConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCSConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxCSConv()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCSConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxWhateverWorksConv : wxMBConv, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxWhateverWorksConvC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxWhateverWorksConvC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);
        }

        public static new wxWhateverWorksConv __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxWhateverWorksConv(native.ToPointer(), skipVTables);
        }

        public static wxWhateverWorksConv __CreateInstance(wxWhateverWorksConv.Internal native, bool skipVTables = false)
        {
            return new wxWhateverWorksConv(native, skipVTables);
        }

        private static void* __CopyValue(wxWhateverWorksConv.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxWhateverWorksConv.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxWhateverWorksConv(wxWhateverWorksConv.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxWhateverWorksConv(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxWhateverWorksConv()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxWhateverWorksConv");
        }

        public wxWhateverWorksConv(wxWhateverWorksConv _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxWhateverWorksConv");
        }

        public override uint ToWChar(char* dst, uint dstLen, string src, uint srcLen)
        {
            return base.ToWChar(dst, dstLen, src, srcLen);
        }

        public override uint FromWChar(sbyte* dst, uint dstLen, string src, uint srcLen)
        {
            return base.FromWChar(dst, dstLen, src, srcLen);
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // size_t ToWChar(wchar_t *dst, size_t dstLen, const char *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_charPtr_uint_IntPtr_uint _ToWChar_0DelegateInstance;

        private static uint _ToWChar_0DelegateHook(global::System.IntPtr instance, char* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWhateverWorksConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToWChar(dst, dstLen, Marshal.PtrToStringAnsi(src), srcLen);
            return __ret;
        }

        // size_t FromWChar(char *dst, size_t dstLen, const wchar_t *src, size_t srcLen = wxNO_LEN) const wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_sbytePtr_uint_IntPtr_uint _FromWChar_0DelegateInstance;

        private static uint _FromWChar_0DelegateHook(global::System.IntPtr instance, sbyte* dst, uint dstLen, global::System.IntPtr src, uint srcLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWhateverWorksConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.FromWChar(dst, dstLen, CppSharp.Runtime.Helpers.MarshalEncodedString(src, System.Text.Encoding.UTF32), srcLen);
            return __ret;
        }

        // size_t GetMBNulLen() const
        private static Delegates.Func_uint_IntPtr _GetMBNulLen_0DelegateInstance;

        private static uint _GetMBNulLen_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWhateverWorksConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetMBNulLen();
            return __ret;
        }

        // size_t MB2WC(wchar_t *out, const char *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_charPtr_IntPtr_uint _MB2WC_0DelegateInstance;

        private static uint _MB2WC_0DelegateHook(global::System.IntPtr instance, char* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWhateverWorksConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.MB2WC(@out, Marshal.PtrToStringAnsi(@in), outLen);
            return __ret;
        }

        // size_t WC2MB(char *out, const wchar_t *in, size_t outLen) const
        private static Delegates.Func_uint_IntPtr_sbytePtr_IntPtr_uint _WC2MB_0DelegateInstance;

        private static uint _WC2MB_0DelegateHook(global::System.IntPtr instance, sbyte* @out, global::System.IntPtr @in, uint outLen)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWhateverWorksConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.WC2MB(@out, CppSharp.Runtime.Helpers.MarshalEncodedString(@in, System.Text.Encoding.UTF32), outLen);
            return __ret;
        }

        // wxMBConv *Clone() const wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr _Clone_0DelegateInstance;

        private static global::System.IntPtr _Clone_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWhateverWorksConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Clone();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxWhateverWorksConv
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWhateverWorksConv) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[7];
                _ToWChar_0DelegateInstance += _ToWChar_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_ToWChar_0DelegateInstance).ToPointer();
                _FromWChar_0DelegateInstance += _FromWChar_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_FromWChar_0DelegateInstance).ToPointer();
                _GetMBNulLen_0DelegateInstance += _GetMBNulLen_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetMBNulLen_0DelegateInstance).ToPointer();
                _MB2WC_0DelegateInstance += _MB2WC_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_MB2WC_0DelegateInstance).ToPointer();
                _WC2MB_0DelegateInstance += _WC2MB_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_WC2MB_0DelegateInstance).ToPointer();
                _Clone_0DelegateInstance += _Clone_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_Clone_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(10 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = _Thunks[1];
                    *(void**)(vfptr0 + 8) = _Thunks[2];
                    *(void**)(vfptr0 + 12) = _Thunks[3];
                    *(void**)(vfptr0 + 16) = _Thunks[4];
                    *(void**)(vfptr0 + 20) = _Thunks[5];
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    internal unsafe partial class wxMBConvInternal : wxMBConv, IDisposable
    {
        private static void* __CopyValue(wxMBConv.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxMBConv.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxMBConvInternal(wxMBConv.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxMBConvInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance + __PointerAdjustment));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }
    }

    internal unsafe partial class wxMBConvUTF16BaseInternal : wxMBConvUTF16Base, IDisposable
    {
        private static void* __CopyValue(wxMBConvUTF16Base.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxMBConvUTF16Base.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxMBConvUTF16BaseInternal(wxMBConvUTF16Base.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxMBConvUTF16BaseInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }
    }

    internal unsafe partial class wxMBConvUTF32BaseInternal : wxMBConvUTF32Base, IDisposable
    {
        private static void* __CopyValue(wxMBConvUTF32Base.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxMBConvUTF32Base.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxMBConvUTF32BaseInternal(wxMBConvUTF32Base.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxMBConvUTF32BaseInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override wxMBConv Clone()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___Clone_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___Clone_0Delegate((__Instance));
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class strconv
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxGet_wxConvLibcv")]
            internal static extern global::System.IntPtr wxGet_wxConvLibc_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z19wxGet_wxConvLibcPtrv")]
            internal static extern global::System.IntPtr wxGet_wxConvLibcPtr_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z24wxGet_wxConvISO8859_1Ptrv")]
            internal static extern global::System.IntPtr wxGet_wxConvISO8859_1Ptr_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z21wxGet_wxConvISO8859_1v")]
            internal static extern global::System.IntPtr wxGet_wxConvISO8859_1_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z19wxGet_wxConvUTF8Ptrv")]
            internal static extern global::System.IntPtr wxGet_wxConvUTF8Ptr_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxGet_wxConvUTF8v")]
            internal static extern global::System.IntPtr wxGet_wxConvUTF8_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z19wxGet_wxConvUTF7Ptrv")]
            internal static extern global::System.IntPtr wxGet_wxConvUTF7Ptr_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxGet_wxConvUTF7v")]
            internal static extern global::System.IntPtr wxGet_wxConvUTF7_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z28wxGet_wxConvWhateverWorksPtrv")]
            internal static extern global::System.IntPtr wxGet_wxConvWhateverWorksPtr_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z25wxGet_wxConvWhateverWorksv")]
            internal static extern global::System.IntPtr wxGet_wxConvWhateverWorks_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z20wxGet_wxConvLocalPtrv")]
            internal static extern global::System.IntPtr wxGet_wxConvLocalPtr_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z17wxGet_wxConvLocalv")]
            internal static extern global::System.IntPtr wxGet_wxConvLocal_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxSafeConvertMB2WXPKc")]
            internal static extern void wxSafeConvertMB2WX_0(global::System.IntPtr @return, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxSafeConvertWX2MBPKw")]
            internal static extern void wxSafeConvertWX2MB_0(global::System.IntPtr @return, global::System.IntPtr ws);
        }

        public static wxMBConv wxGet_wxConvLibc()
        {
            var __ret = Internal.wxGet_wxConvLibc_0();
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        public static wxMBConv wxGet_wxConvLibcPtr()
        {
            var __ret = Internal.wxGet_wxConvLibcPtr_0();
            wxMBConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConv) wxMBConv.NativeToManagedMap[__ret];
            else wxMBConv.NativeToManagedMap[__ret] = __result0 = (wxMBConv) wxMBConv.__CreateInstance(__ret);
            return __result0;
        }

        public static wxCSConv wxGet_wxConvISO8859_1Ptr()
        {
            var __ret = Internal.wxGet_wxConvISO8859_1Ptr_0();
            wxCSConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxCSConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxCSConv) wxCSConv.NativeToManagedMap[__ret];
            else wxCSConv.NativeToManagedMap[__ret] = __result0 = (wxCSConv) wxCSConv.__CreateInstance(__ret);
            return __result0;
        }

        public static wxCSConv wxGet_wxConvISO8859_1()
        {
            var __ret = Internal.wxGet_wxConvISO8859_1_0();
            wxCSConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxCSConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxCSConv) wxCSConv.NativeToManagedMap[__ret];
            else wxCSConv.NativeToManagedMap[__ret] = __result0 = (wxCSConv) wxCSConv.__CreateInstance(__ret);
            return __result0;
        }

        public static wxMBConvStrictUTF8 wxGet_wxConvUTF8Ptr()
        {
            var __ret = Internal.wxGet_wxConvUTF8Ptr_0();
            wxMBConvStrictUTF8 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConvStrictUTF8.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConvStrictUTF8) wxMBConvStrictUTF8.NativeToManagedMap[__ret];
            else wxMBConvStrictUTF8.NativeToManagedMap[__ret] = __result0 = (wxMBConvStrictUTF8) wxMBConvStrictUTF8.__CreateInstance(__ret);
            return __result0;
        }

        public static wxMBConvStrictUTF8 wxGet_wxConvUTF8()
        {
            var __ret = Internal.wxGet_wxConvUTF8_0();
            wxMBConvStrictUTF8 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConvStrictUTF8.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConvStrictUTF8) wxMBConvStrictUTF8.NativeToManagedMap[__ret];
            else wxMBConvStrictUTF8.NativeToManagedMap[__ret] = __result0 = (wxMBConvStrictUTF8) wxMBConvStrictUTF8.__CreateInstance(__ret);
            return __result0;
        }

        public static wxMBConvUTF7 wxGet_wxConvUTF7Ptr()
        {
            var __ret = Internal.wxGet_wxConvUTF7Ptr_0();
            wxMBConvUTF7 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConvUTF7.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConvUTF7) wxMBConvUTF7.NativeToManagedMap[__ret];
            else wxMBConvUTF7.NativeToManagedMap[__ret] = __result0 = (wxMBConvUTF7) wxMBConvUTF7.__CreateInstance(__ret);
            return __result0;
        }

        public static wxMBConvUTF7 wxGet_wxConvUTF7()
        {
            var __ret = Internal.wxGet_wxConvUTF7_0();
            wxMBConvUTF7 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMBConvUTF7.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMBConvUTF7) wxMBConvUTF7.NativeToManagedMap[__ret];
            else wxMBConvUTF7.NativeToManagedMap[__ret] = __result0 = (wxMBConvUTF7) wxMBConvUTF7.__CreateInstance(__ret);
            return __result0;
        }

        public static wxWhateverWorksConv wxGet_wxConvWhateverWorksPtr()
        {
            var __ret = Internal.wxGet_wxConvWhateverWorksPtr_0();
            wxWhateverWorksConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxWhateverWorksConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxWhateverWorksConv) wxWhateverWorksConv.NativeToManagedMap[__ret];
            else wxWhateverWorksConv.NativeToManagedMap[__ret] = __result0 = (wxWhateverWorksConv) wxWhateverWorksConv.__CreateInstance(__ret);
            return __result0;
        }

        public static wxWhateverWorksConv wxGet_wxConvWhateverWorks()
        {
            var __ret = Internal.wxGet_wxConvWhateverWorks_0();
            wxWhateverWorksConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxWhateverWorksConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxWhateverWorksConv) wxWhateverWorksConv.NativeToManagedMap[__ret];
            else wxWhateverWorksConv.NativeToManagedMap[__ret] = __result0 = (wxWhateverWorksConv) wxWhateverWorksConv.__CreateInstance(__ret);
            return __result0;
        }

        public static wxCSConv wxGet_wxConvLocalPtr()
        {
            var __ret = Internal.wxGet_wxConvLocalPtr_0();
            wxCSConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxCSConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxCSConv) wxCSConv.NativeToManagedMap[__ret];
            else wxCSConv.NativeToManagedMap[__ret] = __result0 = (wxCSConv) wxCSConv.__CreateInstance(__ret);
            return __result0;
        }

        public static wxCSConv wxGet_wxConvLocal()
        {
            var __ret = Internal.wxGet_wxConvLocal_0();
            wxCSConv __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxCSConv.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxCSConv) wxCSConv.NativeToManagedMap[__ret];
            else wxCSConv.NativeToManagedMap[__ret] = __result0 = (wxCSConv) wxCSConv.__CreateInstance(__ret);
            return __result0;
        }

        public static wxWCharBuffer wxSafeConvertMB2WX(string s)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(s);
            var __ret = new wxWCharBuffer.Internal();
            Internal.wxSafeConvertMB2WX_0(new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return wxWCharBuffer.__CreateInstance(__ret);
        }

        public static wxCharBuffer wxSafeConvertWX2MB(string ws)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(ws);
            var __ret = new wxCharBuffer.Internal();
            Internal.wxSafeConvertWX2MB_0(new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return wxCharBuffer.__CreateInstance(__ret);
        }
    }
}
