//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public enum wxStreamError : uint
    {
        wxSTREAM_NO_ERROR = 0,
        wxSTREAM_EOF = 1,
        wxSTREAM_WRITE_ERROR = 2,
        wxSTREAM_READ_ERROR = 3
    }

    public enum wxStreamProtocolType : uint
    {
        wxSTREAM_PROTOCOL = 0,
        wxSTREAM_MIMETYPE = 1,
        wxSTREAM_ENCODING = 2,
        wxSTREAM_FILEEXT = 3
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr __wxOutputManip(global::System.IntPtr _0);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointerAttribute(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate global::System.IntPtr __wxInputManip(global::System.IntPtr _0);

    public unsafe partial class wxStreamBase : wxObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public uint m_lastcount;

            [FieldOffset(12)]
            public wxStreamError m_lasterror;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxStreamBaseC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxStreamBase12GetLastErrorEv")]
            internal static extern wxStreamError GetLastError_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxStreamBasentEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaim_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxStreamBase5ResetE13wxStreamError")]
            internal static extern void Reset_0(global::System.IntPtr instance, wxStreamError error);
        }

        public static new wxStreamBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStreamBase(native.ToPointer(), skipVTables);
        }

        public static wxStreamBase __CreateInstance(wxStreamBase.Internal native, bool skipVTables = false)
        {
            return new wxStreamBase(native, skipVTables);
        }

        private static void* __CopyValue(wxStreamBase.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            *(wxStreamBase.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStreamBase(wxStreamBase.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStreamBase(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxStreamBase()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxStreamBase");
        }

        public wxStreamError GetLastError()
        {
            var __ret = Internal.GetLastError_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual bool IsOk()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___IsOk_0Delegate = (Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr));
            var __ret = ___IsOk_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static bool operator !(wxStreamBase __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaim_0(arg0);
            return __ret;
        }

        public void Reset(wxStreamError error)
        {
            var arg0 = error;
            Internal.Reset_0((__Instance + __PointerAdjustment), arg0);
        }

        public virtual uint GetSize()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___GetSize_0Delegate = (Delegates.Func_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr));
            var __ret = ___GetSize_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual long GetLength()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___GetLength_0Delegate = (Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_long_IntPtr));
            var __ret = ___GetLength_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual bool IsSeekable()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___IsSeekable_0Delegate = (Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr));
            var __ret = ___IsSeekable_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected virtual long OnSysSeek(long seek, wxSeekMode mode)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___OnSysSeek_0Delegate = (Delegates.Func_long_IntPtr_long_wxSeekMode) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_long_IntPtr_long_wxSeekMode));
            var arg1 = mode;
            var __ret = ___OnSysSeek_0Delegate((__Instance + __PointerAdjustment), seek, arg1);
            return __ret;
        }

        protected virtual long OnSysTell()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 10 * 4);
            var ___OnSysTell_0Delegate = (Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_long_IntPtr));
            var __ret = ___OnSysTell_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN12wxStreamBase12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected uint m_lastcount
        {
            get
            {
                return ((Internal*) __Instance)->m_lastcount;
            }

            set
            {
                ((Internal*) __Instance)->m_lastcount = value;
            }
        }

        protected wxStreamError m_lasterror
        {
            get
            {
                return ((Internal*) __Instance)->m_lasterror;
            }

            set
            {
                ((Internal*) __Instance)->m_lasterror = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxStreamBase()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // size_t GetSize() const
        private static Delegates.Func_uint_IntPtr _GetSize_0DelegateInstance;

        private static uint _GetSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            return __ret;
        }

        // wxFileOffset GetLength() const
        private static Delegates.Func_long_IntPtr _GetLength_0DelegateInstance;

        private static long _GetLength_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLength();
            return __ret;
        }

        // bool IsSeekable() const
        private static Delegates.Func_bool_IntPtr _IsSeekable_0DelegateInstance;

        private static bool _IsSeekable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsSeekable();
            return __ret;
        }

        // wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _OnSysSeek_0DelegateInstance;

        private static long _OnSysSeek_0DelegateHook(global::System.IntPtr instance, long seek, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysSeek(seek, mode);
            return __ret;
        }

        // wxFileOffset OnSysTell() const
        private static Delegates.Func_long_IntPtr _OnSysTell_0DelegateInstance;

        private static long _OnSysTell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysTell();
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[10];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _GetSize_0DelegateInstance += _GetSize_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSize_0DelegateInstance).ToPointer();
                _GetLength_0DelegateInstance += _GetLength_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetLength_0DelegateInstance).ToPointer();
                _IsSeekable_0DelegateInstance += _IsSeekable_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_IsSeekable_0DelegateInstance).ToPointer();
                _OnSysSeek_0DelegateInstance += _OnSysSeek_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnSysSeek_0DelegateInstance).ToPointer();
                _OnSysTell_0DelegateInstance += _OnSysTell_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnSysTell_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(13 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(13 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe abstract partial class wxInputStream : wxStreamBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public uint m_lastcount;

            [FieldOffset(12)]
            public wxStreamError m_lasterror;

            [FieldOffset(16)]
            public sbyte* m_wback;

            [FieldOffset(20)]
            public uint m_wbacksize;

            [FieldOffset(24)]
            public uint m_wbackcur;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxInputStreamC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxInputStreamD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxInputStream4GetCEv")]
            internal static extern int GetC_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxInputStream7ReadAllEPvm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ReadAll_0(global::System.IntPtr instance, global::System.IntPtr buffer, uint size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxInputStream4ReadER14wxOutputStream")]
            internal static extern global::System.IntPtr Read_1(global::System.IntPtr instance, global::System.IntPtr streamOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxInputStream7UngetchEPKvm")]
            internal static extern uint Ungetch_0(global::System.IntPtr instance, global::System.IntPtr buffer, uint size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxInputStream7UngetchEc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Ungetch_1(global::System.IntPtr instance, sbyte c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxInputStream15AllocSpaceWBackEm")]
            internal static extern sbyte* AllocSpaceWBack_0(global::System.IntPtr instance, uint sizeNeeded);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxInputStream8GetWBackEPvm")]
            internal static extern uint GetWBack_0(global::System.IntPtr instance, global::System.IntPtr buf, uint size);
        }

        public static new wxInputStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxInputStreamInternal(native.ToPointer(), skipVTables);
        }

        public static wxInputStream __CreateInstance(wxInputStream.Internal native, bool skipVTables = false)
        {
            return new wxInputStreamInternal(native, skipVTables);
        }

        protected wxInputStream(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxInputStream()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxInputStream");
        }

        protected override void Dispose(bool disposing)
        {
            wxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public virtual sbyte Peek()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___Peek_0Delegate = (Delegates.Func_sbyte_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_sbyte_IntPtr));
            var __ret = ___Peek_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int GetC()
        {
            var __ret = Internal.GetC_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual wxInputStream Read(global::System.IntPtr buffer, uint size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___Read_0Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr_uint));
            var arg0 = buffer;
            var __ret = ___Read_0Delegate((__Instance + __PointerAdjustment), arg0, size);
            wxInputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[__ret];
            else wxInputStream.NativeToManagedMap[__ret] = __result0 = (wxInputStream) wxInputStream.__CreateInstance(__ret);
            return __result0;
        }

        public bool ReadAll(global::System.IntPtr buffer, uint size)
        {
            var arg0 = buffer;
            var __ret = Internal.ReadAll_0((__Instance + __PointerAdjustment), arg0, size);
            return __ret;
        }

        public wxInputStream Read(wxOutputStream streamOut)
        {
            if (ReferenceEquals(streamOut, null))
                throw new global::System.ArgumentNullException("streamOut", "Cannot be null because it is a C++ reference (&).");
            var arg0 = streamOut.__Instance;
            var __ret = Internal.Read_1((__Instance + __PointerAdjustment), arg0);
            wxInputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[__ret];
            else wxInputStream.NativeToManagedMap[__ret] = __result0 = (wxInputStream) wxInputStream.__CreateInstance(__ret);
            return __result0;
        }

        public virtual uint LastRead()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___LastRead_0Delegate = (Delegates.Func_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr));
            var __ret = ___LastRead_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual bool CanRead()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___CanRead_0Delegate = (Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr));
            var __ret = ___CanRead_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual bool Eof()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___Eof_0Delegate = (Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr));
            var __ret = ___Eof_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint Ungetch(global::System.IntPtr buffer, uint size)
        {
            var arg0 = buffer;
            var __ret = Internal.Ungetch_0((__Instance + __PointerAdjustment), arg0, size);
            return __ret;
        }

        public bool Ungetch(sbyte c)
        {
            var arg0 = c;
            var __ret = Internal.Ungetch_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public virtual long SeekI(long pos, wxSeekMode mode)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___SeekI_0Delegate = (Delegates.Func_long_IntPtr_long_wxSeekMode) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_long_IntPtr_long_wxSeekMode));
            var arg1 = mode;
            var __ret = ___SeekI_0Delegate((__Instance + __PointerAdjustment), pos, arg1);
            return __ret;
        }

        public virtual long TellI()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___TellI_0Delegate = (Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_long_IntPtr));
            var __ret = ___TellI_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected abstract uint OnSysRead(global::System.IntPtr buffer, uint size);

        protected sbyte* AllocSpaceWBack(uint sizeNeeded)
        {
            var __ret = Internal.AllocSpaceWBack_0((__Instance + __PointerAdjustment), sizeNeeded);
            return __ret;
        }

        protected uint GetWBack(global::System.IntPtr buf, uint size)
        {
            var arg0 = buf;
            var __ret = Internal.GetWBack_0((__Instance + __PointerAdjustment), arg0, size);
            return __ret;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN13wxInputStream12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected sbyte* m_wback
        {
            get
            {
                return ((Internal*) __Instance)->m_wback;
            }

            set
            {
                ((Internal*) __Instance)->m_wback = value;
            }
        }

        protected uint m_wbacksize
        {
            get
            {
                return ((Internal*) __Instance)->m_wbacksize;
            }

            set
            {
                ((Internal*) __Instance)->m_wbacksize = value;
            }
        }

        protected uint m_wbackcur
        {
            get
            {
                return ((Internal*) __Instance)->m_wbackcur;
            }

            set
            {
                ((Internal*) __Instance)->m_wbackcur = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxInputStream()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // size_t GetSize() const
        private static Delegates.Func_uint_IntPtr _GetSize_0DelegateInstance;

        private static uint _GetSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            return __ret;
        }

        // wxFileOffset GetLength() const
        private static Delegates.Func_long_IntPtr _GetLength_0DelegateInstance;

        private static long _GetLength_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLength();
            return __ret;
        }

        // bool IsSeekable() const
        private static Delegates.Func_bool_IntPtr _IsSeekable_0DelegateInstance;

        private static bool _IsSeekable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsSeekable();
            return __ret;
        }

        // wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _OnSysSeek_0DelegateInstance;

        private static long _OnSysSeek_0DelegateHook(global::System.IntPtr instance, long seek, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysSeek(seek, mode);
            return __ret;
        }

        // wxFileOffset OnSysTell() const
        private static Delegates.Func_long_IntPtr _OnSysTell_0DelegateInstance;

        private static long _OnSysTell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysTell();
            return __ret;
        }

        // char Peek()
        private static Delegates.Func_sbyte_IntPtr _Peek_0DelegateInstance;

        private static sbyte _Peek_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Peek();
            return __ret;
        }

        // wxInputStream& Read(void *buffer, size_t size)
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_uint _Read_0DelegateInstance;

        private static global::System.IntPtr _Read_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Read(buffer, size);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // size_t LastRead() const
        private static Delegates.Func_uint_IntPtr _LastRead_0DelegateInstance;

        private static uint _LastRead_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.LastRead();
            return __ret;
        }

        // bool CanRead() const
        private static Delegates.Func_bool_IntPtr _CanRead_0DelegateInstance;

        private static bool _CanRead_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CanRead();
            return __ret;
        }

        // bool Eof() const
        private static Delegates.Func_bool_IntPtr _Eof_0DelegateInstance;

        private static bool _Eof_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Eof();
            return __ret;
        }

        // wxFileOffset SeekI(wxFileOffset pos, wxSeekMode mode = wxFromStart)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _SeekI_0DelegateInstance;

        private static long _SeekI_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SeekI(pos, mode);
            return __ret;
        }

        // wxFileOffset TellI() const
        private static Delegates.Func_long_IntPtr _TellI_0DelegateInstance;

        private static long _TellI_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TellI();
            return __ret;
        }

        // size_t OnSysRead(void *buffer, size_t size) = 0
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _OnSysRead_0DelegateInstance;

        private static uint _OnSysRead_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysRead(buffer, size);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[18];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _GetSize_0DelegateInstance += _GetSize_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSize_0DelegateInstance).ToPointer();
                _GetLength_0DelegateInstance += _GetLength_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetLength_0DelegateInstance).ToPointer();
                _IsSeekable_0DelegateInstance += _IsSeekable_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_IsSeekable_0DelegateInstance).ToPointer();
                _OnSysSeek_0DelegateInstance += _OnSysSeek_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnSysSeek_0DelegateInstance).ToPointer();
                _OnSysTell_0DelegateInstance += _OnSysTell_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnSysTell_0DelegateInstance).ToPointer();
                _Peek_0DelegateInstance += _Peek_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_Peek_0DelegateInstance).ToPointer();
                _Read_0DelegateInstance += _Read_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Read_0DelegateInstance).ToPointer();
                _LastRead_0DelegateInstance += _LastRead_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_LastRead_0DelegateInstance).ToPointer();
                _CanRead_0DelegateInstance += _CanRead_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_CanRead_0DelegateInstance).ToPointer();
                _Eof_0DelegateInstance += _Eof_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_Eof_0DelegateInstance).ToPointer();
                _SeekI_0DelegateInstance += _SeekI_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_SeekI_0DelegateInstance).ToPointer();
                _TellI_0DelegateInstance += _TellI_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_TellI_0DelegateInstance).ToPointer();
                _OnSysRead_0DelegateInstance += _OnSysRead_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_OnSysRead_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(21 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                    *(void**)(vfptr0 + 72) = *(void**)(native->vfptr0 + 72);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(21 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                    *(void**)(vfptr0 + 72) = _Thunks[17];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxOutputStream : wxStreamBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public uint m_lastcount;

            [FieldOffset(12)]
            public wxStreamError m_lasterror;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxOutputStreamC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxOutputStream4PutCEc")]
            internal static extern void PutC_0(global::System.IntPtr instance, sbyte c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxOutputStream8WriteAllEPKvm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool WriteAll_0(global::System.IntPtr instance, global::System.IntPtr buffer, uint size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxOutputStream5WriteER13wxInputStream")]
            internal static extern global::System.IntPtr Write_1(global::System.IntPtr instance, global::System.IntPtr stream_in);
        }

        public static new wxOutputStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxOutputStream(native.ToPointer(), skipVTables);
        }

        public static wxOutputStream __CreateInstance(wxOutputStream.Internal native, bool skipVTables = false)
        {
            return new wxOutputStream(native, skipVTables);
        }

        private static void* __CopyValue(wxOutputStream.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            *(wxOutputStream.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxOutputStream(wxOutputStream.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxOutputStream(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxOutputStream()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxOutputStream");
        }

        public void PutC(sbyte c)
        {
            var arg0 = c;
            Internal.PutC_0((__Instance + __PointerAdjustment), arg0);
        }

        public virtual wxOutputStream Write(global::System.IntPtr buffer, uint size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 11 * 4);
            var ___Write_0Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr_uint));
            var arg0 = buffer;
            var __ret = ___Write_0Delegate((__Instance + __PointerAdjustment), arg0, size);
            wxOutputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[__ret];
            else wxOutputStream.NativeToManagedMap[__ret] = __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(__ret);
            return __result0;
        }

        public bool WriteAll(global::System.IntPtr buffer, uint size)
        {
            var arg0 = buffer;
            var __ret = Internal.WriteAll_0((__Instance + __PointerAdjustment), arg0, size);
            return __ret;
        }

        public wxOutputStream Write(wxInputStream stream_in)
        {
            if (ReferenceEquals(stream_in, null))
                throw new global::System.ArgumentNullException("stream_in", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream_in.__Instance;
            var __ret = Internal.Write_1((__Instance + __PointerAdjustment), arg0);
            wxOutputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[__ret];
            else wxOutputStream.NativeToManagedMap[__ret] = __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(__ret);
            return __result0;
        }

        public virtual long SeekO(long pos, wxSeekMode mode)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 12 * 4);
            var ___SeekO_0Delegate = (Delegates.Func_long_IntPtr_long_wxSeekMode) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_long_IntPtr_long_wxSeekMode));
            var arg1 = mode;
            var __ret = ___SeekO_0Delegate((__Instance + __PointerAdjustment), pos, arg1);
            return __ret;
        }

        public virtual long TellO()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 4);
            var ___TellO_0Delegate = (Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_long_IntPtr));
            var __ret = ___TellO_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual uint LastWrite()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 14 * 4);
            var ___LastWrite_0Delegate = (Delegates.Func_uint_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr));
            var __ret = ___LastWrite_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual void Sync()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 15 * 4);
            var ___Sync_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___Sync_0Delegate((__Instance + __PointerAdjustment));
        }

        public virtual bool Close()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 16 * 4);
            var ___Close_0Delegate = (Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_bool_IntPtr));
            var __ret = ___Close_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        protected virtual uint OnSysWrite(global::System.IntPtr buffer, uint bufsize)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 17 * 4);
            var ___OnSysWrite_0Delegate = (Delegates.Func_uint_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_IntPtr_uint));
            var arg0 = buffer;
            var __ret = ___OnSysWrite_0Delegate((__Instance + __PointerAdjustment), arg0, bufsize);
            return __ret;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN14wxOutputStream12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxOutputStream()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // size_t GetSize() const
        private static Delegates.Func_uint_IntPtr _GetSize_0DelegateInstance;

        private static uint _GetSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            return __ret;
        }

        // wxFileOffset GetLength() const
        private static Delegates.Func_long_IntPtr _GetLength_0DelegateInstance;

        private static long _GetLength_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLength();
            return __ret;
        }

        // bool IsSeekable() const
        private static Delegates.Func_bool_IntPtr _IsSeekable_0DelegateInstance;

        private static bool _IsSeekable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsSeekable();
            return __ret;
        }

        // wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _OnSysSeek_0DelegateInstance;

        private static long _OnSysSeek_0DelegateHook(global::System.IntPtr instance, long seek, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysSeek(seek, mode);
            return __ret;
        }

        // wxFileOffset OnSysTell() const
        private static Delegates.Func_long_IntPtr _OnSysTell_0DelegateInstance;

        private static long _OnSysTell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysTell();
            return __ret;
        }

        // wxOutputStream& Write(const void *buffer, size_t size)
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_uint _Write_0DelegateInstance;

        private static global::System.IntPtr _Write_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Write(buffer, size);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _SeekO_0DelegateInstance;

        private static long _SeekO_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SeekO(pos, mode);
            return __ret;
        }

        // wxFileOffset TellO() const
        private static Delegates.Func_long_IntPtr _TellO_0DelegateInstance;

        private static long _TellO_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TellO();
            return __ret;
        }

        // size_t LastWrite() const
        private static Delegates.Func_uint_IntPtr _LastWrite_0DelegateInstance;

        private static uint _LastWrite_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.LastWrite();
            return __ret;
        }

        // void Sync()
        private static Delegates.Action_IntPtr _Sync_0DelegateInstance;

        private static void _Sync_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Sync();
        }

        // bool Close()
        private static Delegates.Func_bool_IntPtr _Close_0DelegateInstance;

        private static bool _Close_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Close();
            return __ret;
        }

        // size_t OnSysWrite(const void *buffer, size_t bufsize)
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _OnSysWrite_0DelegateInstance;

        private static uint _OnSysWrite_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint bufsize)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysWrite(buffer, bufsize);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[17];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _GetSize_0DelegateInstance += _GetSize_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSize_0DelegateInstance).ToPointer();
                _GetLength_0DelegateInstance += _GetLength_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetLength_0DelegateInstance).ToPointer();
                _IsSeekable_0DelegateInstance += _IsSeekable_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_IsSeekable_0DelegateInstance).ToPointer();
                _OnSysSeek_0DelegateInstance += _OnSysSeek_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnSysSeek_0DelegateInstance).ToPointer();
                _OnSysTell_0DelegateInstance += _OnSysTell_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnSysTell_0DelegateInstance).ToPointer();
                _Write_0DelegateInstance += _Write_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_Write_0DelegateInstance).ToPointer();
                _SeekO_0DelegateInstance += _SeekO_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_SeekO_0DelegateInstance).ToPointer();
                _TellO_0DelegateInstance += _TellO_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_TellO_0DelegateInstance).ToPointer();
                _LastWrite_0DelegateInstance += _LastWrite_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_LastWrite_0DelegateInstance).ToPointer();
                _Sync_0DelegateInstance += _Sync_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_Sync_0DelegateInstance).ToPointer();
                _Close_0DelegateInstance += _Close_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_Close_0DelegateInstance).ToPointer();
                _OnSysWrite_0DelegateInstance += _OnSysWrite_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_OnSysWrite_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(20 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(20 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxCountingOutputStream : wxOutputStream, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public uint m_lastcount;

            [FieldOffset(12)]
            public wxStreamError m_lasterror;

            [FieldOffset(16)]
            public uint m_currentPos;

            [FieldOffset(20)]
            public uint m_lastPos;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxCountingOutputStreamC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxCountingOutputStream2OkEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Ok_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxCountingOutputStream14wxCreateObjectEv")]
            internal static extern global::System.IntPtr wxCreateObject_0();
        }

        public static new wxCountingOutputStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxCountingOutputStream(native.ToPointer(), skipVTables);
        }

        public static wxCountingOutputStream __CreateInstance(wxCountingOutputStream.Internal native, bool skipVTables = false)
        {
            return new wxCountingOutputStream(native, skipVTables);
        }

        private static void* __CopyValue(wxCountingOutputStream.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            *(wxCountingOutputStream.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxCountingOutputStream(wxCountingOutputStream.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxCountingOutputStream(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxCountingOutputStream()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxCountingOutputStream");
        }

        public override long GetLength()
        {
            return base.GetLength();
        }

        public bool Ok()
        {
            var __ret = Internal.Ok_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public override bool IsOk()
        {
            return base.IsOk();
        }

        protected override uint OnSysWrite(global::System.IntPtr buffer, uint size)
        {
            return base.OnSysWrite(buffer, size);
        }

        protected override long OnSysSeek(long pos, wxSeekMode mode)
        {
            return base.OnSysSeek(pos, mode);
        }

        protected override long OnSysTell()
        {
            return base.OnSysTell();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxObject wxCreateObject()
        {
            var __ret = Internal.wxCreateObject_0();
            wxObject __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxObject.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxObject) wxObject.NativeToManagedMap[__ret];
            else wxObject.NativeToManagedMap[__ret] = __result0 = (wxObject) wxObject.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN22wxCountingOutputStream12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected uint m_currentPos
        {
            get
            {
                return ((Internal*) __Instance)->m_currentPos;
            }

            set
            {
                ((Internal*) __Instance)->m_currentPos = value;
            }
        }

        protected uint m_lastPos
        {
            get
            {
                return ((Internal*) __Instance)->m_lastPos;
            }

            set
            {
                ((Internal*) __Instance)->m_lastPos = value;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxCountingOutputStream
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // size_t GetSize() const
        private static Delegates.Func_uint_IntPtr _GetSize_0DelegateInstance;

        private static uint _GetSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            return __ret;
        }

        // wxFileOffset GetLength() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _GetLength_0DelegateInstance;

        private static long _GetLength_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLength();
            return __ret;
        }

        // bool IsSeekable() const
        private static Delegates.Func_bool_IntPtr _IsSeekable_0DelegateInstance;

        private static bool _IsSeekable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsSeekable();
            return __ret;
        }

        // wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode) wxOVERRIDE
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _OnSysSeek_0DelegateInstance;

        private static long _OnSysSeek_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysSeek(pos, mode);
            return __ret;
        }

        // wxFileOffset OnSysTell() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _OnSysTell_0DelegateInstance;

        private static long _OnSysTell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysTell();
            return __ret;
        }

        // wxOutputStream& Write(const void *buffer, size_t size)
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_uint _Write_0DelegateInstance;

        private static global::System.IntPtr _Write_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Write(buffer, size);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _SeekO_0DelegateInstance;

        private static long _SeekO_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SeekO(pos, mode);
            return __ret;
        }

        // wxFileOffset TellO() const
        private static Delegates.Func_long_IntPtr _TellO_0DelegateInstance;

        private static long _TellO_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TellO();
            return __ret;
        }

        // size_t LastWrite() const
        private static Delegates.Func_uint_IntPtr _LastWrite_0DelegateInstance;

        private static uint _LastWrite_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.LastWrite();
            return __ret;
        }

        // void Sync()
        private static Delegates.Action_IntPtr _Sync_0DelegateInstance;

        private static void _Sync_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Sync();
        }

        // bool Close()
        private static Delegates.Func_bool_IntPtr _Close_0DelegateInstance;

        private static bool _Close_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Close();
            return __ret;
        }

        // size_t OnSysWrite(const void *buffer, size_t size) wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _OnSysWrite_0DelegateInstance;

        private static uint _OnSysWrite_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxCountingOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysWrite(buffer, size);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[17];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _GetSize_0DelegateInstance += _GetSize_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSize_0DelegateInstance).ToPointer();
                _GetLength_0DelegateInstance += _GetLength_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetLength_0DelegateInstance).ToPointer();
                _IsSeekable_0DelegateInstance += _IsSeekable_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_IsSeekable_0DelegateInstance).ToPointer();
                _OnSysSeek_0DelegateInstance += _OnSysSeek_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnSysSeek_0DelegateInstance).ToPointer();
                _OnSysTell_0DelegateInstance += _OnSysTell_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnSysTell_0DelegateInstance).ToPointer();
                _Write_0DelegateInstance += _Write_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_Write_0DelegateInstance).ToPointer();
                _SeekO_0DelegateInstance += _SeekO_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_SeekO_0DelegateInstance).ToPointer();
                _TellO_0DelegateInstance += _TellO_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_TellO_0DelegateInstance).ToPointer();
                _LastWrite_0DelegateInstance += _LastWrite_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_LastWrite_0DelegateInstance).ToPointer();
                _Sync_0DelegateInstance += _Sync_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_Sync_0DelegateInstance).ToPointer();
                _Close_0DelegateInstance += _Close_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_Close_0DelegateInstance).ToPointer();
                _OnSysWrite_0DelegateInstance += _OnSysWrite_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_OnSysWrite_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(20 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(20 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe abstract partial class wxFilterInputStream : wxInputStream, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public uint m_lastcount;

            [FieldOffset(12)]
            public wxStreamError m_lasterror;

            [FieldOffset(16)]
            public sbyte* m_wback;

            [FieldOffset(20)]
            public uint m_wbacksize;

            [FieldOffset(24)]
            public uint m_wbackcur;

            [FieldOffset(28)]
            public global::System.IntPtr m_parent_i_stream;

            [FieldOffset(32)]
            public byte m_owns;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxFilterInputStreamC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxFilterInputStreamC2ER13wxInputStream")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN19wxFilterInputStreamD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK19wxFilterInputStream20GetFilterInputStreamEv")]
            internal static extern global::System.IntPtr GetFilterInputStream_0(global::System.IntPtr instance);
        }

        public static new wxFilterInputStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxFilterInputStreamInternal(native.ToPointer(), skipVTables);
        }

        public static wxFilterInputStream __CreateInstance(wxFilterInputStream.Internal native, bool skipVTables = false)
        {
            return new wxFilterInputStreamInternal(native, skipVTables);
        }

        protected wxFilterInputStream(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxFilterInputStream()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(36);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxFilterInputStream");
        }

        protected wxFilterInputStream(wxInputStream stream)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(36);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxFilterInputStream");
        }

        protected override void Dispose(bool disposing)
        {
            wxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public override sbyte Peek()
        {
            return base.Peek();
        }

        public override long GetLength()
        {
            return base.GetLength();
        }

        public wxInputStream GetFilterInputStream()
        {
            var __ret = Internal.GetFilterInputStream_0((__Instance + __PointerAdjustment));
            wxInputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[__ret];
            else wxInputStream.NativeToManagedMap[__ret] = __result0 = (wxInputStream) wxInputStream.__CreateInstance(__ret);
            return __result0;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN19wxFilterInputStream12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected wxInputStream m_parent_i_stream
        {
            get
            {
                wxInputStream __result0;
                if (((Internal*) __Instance)->m_parent_i_stream == IntPtr.Zero) __result0 = null;
                else if (wxInputStream.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_parent_i_stream))
                    __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[((Internal*) __Instance)->m_parent_i_stream];
                else wxInputStream.NativeToManagedMap[((Internal*) __Instance)->m_parent_i_stream] = __result0 = (wxInputStream) wxInputStream.__CreateInstance(((Internal*) __Instance)->m_parent_i_stream);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_parent_i_stream = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_owns
        {
            get
            {
                return ((Internal*) __Instance)->m_owns != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_owns = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxFilterInputStream()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // size_t GetSize() const
        private static Delegates.Func_uint_IntPtr _GetSize_0DelegateInstance;

        private static uint _GetSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            return __ret;
        }

        // wxFileOffset GetLength() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _GetLength_0DelegateInstance;

        private static long _GetLength_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLength();
            return __ret;
        }

        // bool IsSeekable() const
        private static Delegates.Func_bool_IntPtr _IsSeekable_0DelegateInstance;

        private static bool _IsSeekable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsSeekable();
            return __ret;
        }

        // wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _OnSysSeek_0DelegateInstance;

        private static long _OnSysSeek_0DelegateHook(global::System.IntPtr instance, long seek, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysSeek(seek, mode);
            return __ret;
        }

        // wxFileOffset OnSysTell() const
        private static Delegates.Func_long_IntPtr _OnSysTell_0DelegateInstance;

        private static long _OnSysTell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysTell();
            return __ret;
        }

        // char Peek() wxOVERRIDE
        private static Delegates.Func_sbyte_IntPtr _Peek_0DelegateInstance;

        private static sbyte _Peek_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Peek();
            return __ret;
        }

        // wxInputStream& Read(void *buffer, size_t size)
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_uint _Read_0DelegateInstance;

        private static global::System.IntPtr _Read_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Read(buffer, size);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // size_t LastRead() const
        private static Delegates.Func_uint_IntPtr _LastRead_0DelegateInstance;

        private static uint _LastRead_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.LastRead();
            return __ret;
        }

        // bool CanRead() const
        private static Delegates.Func_bool_IntPtr _CanRead_0DelegateInstance;

        private static bool _CanRead_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CanRead();
            return __ret;
        }

        // bool Eof() const
        private static Delegates.Func_bool_IntPtr _Eof_0DelegateInstance;

        private static bool _Eof_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Eof();
            return __ret;
        }

        // wxFileOffset SeekI(wxFileOffset pos, wxSeekMode mode = wxFromStart)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _SeekI_0DelegateInstance;

        private static long _SeekI_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SeekI(pos, mode);
            return __ret;
        }

        // wxFileOffset TellI() const
        private static Delegates.Func_long_IntPtr _TellI_0DelegateInstance;

        private static long _TellI_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TellI();
            return __ret;
        }

        // size_t OnSysRead(void *buffer, size_t size) = 0
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _OnSysRead_0DelegateInstance;

        private static uint _OnSysRead_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysRead(buffer, size);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[18];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _GetSize_0DelegateInstance += _GetSize_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSize_0DelegateInstance).ToPointer();
                _GetLength_0DelegateInstance += _GetLength_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetLength_0DelegateInstance).ToPointer();
                _IsSeekable_0DelegateInstance += _IsSeekable_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_IsSeekable_0DelegateInstance).ToPointer();
                _OnSysSeek_0DelegateInstance += _OnSysSeek_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnSysSeek_0DelegateInstance).ToPointer();
                _OnSysTell_0DelegateInstance += _OnSysTell_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnSysTell_0DelegateInstance).ToPointer();
                _Peek_0DelegateInstance += _Peek_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_Peek_0DelegateInstance).ToPointer();
                _Read_0DelegateInstance += _Read_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Read_0DelegateInstance).ToPointer();
                _LastRead_0DelegateInstance += _LastRead_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_LastRead_0DelegateInstance).ToPointer();
                _CanRead_0DelegateInstance += _CanRead_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_CanRead_0DelegateInstance).ToPointer();
                _Eof_0DelegateInstance += _Eof_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_Eof_0DelegateInstance).ToPointer();
                _SeekI_0DelegateInstance += _SeekI_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_SeekI_0DelegateInstance).ToPointer();
                _TellI_0DelegateInstance += _TellI_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_TellI_0DelegateInstance).ToPointer();
                _OnSysRead_0DelegateInstance += _OnSysRead_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_OnSysRead_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(21 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                    *(void**)(vfptr0 + 72) = *(void**)(native->vfptr0 + 72);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(21 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                    *(void**)(vfptr0 + 72) = _Thunks[17];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxFilterOutputStream : wxOutputStream, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public uint m_lastcount;

            [FieldOffset(12)]
            public wxStreamError m_lasterror;

            [FieldOffset(16)]
            public global::System.IntPtr m_parent_o_stream;

            [FieldOffset(20)]
            public byte m_owns;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxFilterOutputStreamC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxFilterOutputStreamC2ER14wxOutputStream")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxFilterOutputStream21GetFilterOutputStreamEv")]
            internal static extern global::System.IntPtr GetFilterOutputStream_0(global::System.IntPtr instance);
        }

        public static new wxFilterOutputStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxFilterOutputStream(native.ToPointer(), skipVTables);
        }

        public static wxFilterOutputStream __CreateInstance(wxFilterOutputStream.Internal native, bool skipVTables = false)
        {
            return new wxFilterOutputStream(native, skipVTables);
        }

        private static void* __CopyValue(wxFilterOutputStream.Internal native)
        {
            var ret = Marshal.AllocHGlobal(24);
            *(wxFilterOutputStream.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxFilterOutputStream(wxFilterOutputStream.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxFilterOutputStream(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxFilterOutputStream()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxFilterOutputStream");
        }

        public wxFilterOutputStream(wxOutputStream stream)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(24);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxFilterOutputStream");
        }

        public override long GetLength()
        {
            return base.GetLength();
        }

        public wxOutputStream GetFilterOutputStream()
        {
            var __ret = Internal.GetFilterOutputStream_0((__Instance + __PointerAdjustment));
            wxOutputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[__ret];
            else wxOutputStream.NativeToManagedMap[__ret] = __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(__ret);
            return __result0;
        }

        public override bool Close()
        {
            return base.Close();
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN20wxFilterOutputStream12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        protected wxOutputStream m_parent_o_stream
        {
            get
            {
                wxOutputStream __result0;
                if (((Internal*) __Instance)->m_parent_o_stream == IntPtr.Zero) __result0 = null;
                else if (wxOutputStream.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_parent_o_stream))
                    __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[((Internal*) __Instance)->m_parent_o_stream];
                else wxOutputStream.NativeToManagedMap[((Internal*) __Instance)->m_parent_o_stream] = __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(((Internal*) __Instance)->m_parent_o_stream);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_parent_o_stream = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected bool m_owns
        {
            get
            {
                return ((Internal*) __Instance)->m_owns != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_owns = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxFilterOutputStream()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // size_t GetSize() const
        private static Delegates.Func_uint_IntPtr _GetSize_0DelegateInstance;

        private static uint _GetSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            return __ret;
        }

        // wxFileOffset GetLength() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _GetLength_0DelegateInstance;

        private static long _GetLength_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLength();
            return __ret;
        }

        // bool IsSeekable() const
        private static Delegates.Func_bool_IntPtr _IsSeekable_0DelegateInstance;

        private static bool _IsSeekable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsSeekable();
            return __ret;
        }

        // wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _OnSysSeek_0DelegateInstance;

        private static long _OnSysSeek_0DelegateHook(global::System.IntPtr instance, long seek, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysSeek(seek, mode);
            return __ret;
        }

        // wxFileOffset OnSysTell() const
        private static Delegates.Func_long_IntPtr _OnSysTell_0DelegateInstance;

        private static long _OnSysTell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysTell();
            return __ret;
        }

        // wxOutputStream& Write(const void *buffer, size_t size)
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_uint _Write_0DelegateInstance;

        private static global::System.IntPtr _Write_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Write(buffer, size);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _SeekO_0DelegateInstance;

        private static long _SeekO_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SeekO(pos, mode);
            return __ret;
        }

        // wxFileOffset TellO() const
        private static Delegates.Func_long_IntPtr _TellO_0DelegateInstance;

        private static long _TellO_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TellO();
            return __ret;
        }

        // size_t LastWrite() const
        private static Delegates.Func_uint_IntPtr _LastWrite_0DelegateInstance;

        private static uint _LastWrite_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.LastWrite();
            return __ret;
        }

        // void Sync()
        private static Delegates.Action_IntPtr _Sync_0DelegateInstance;

        private static void _Sync_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Sync();
        }

        // bool Close() wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _Close_0DelegateInstance;

        private static bool _Close_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Close();
            return __ret;
        }

        // size_t OnSysWrite(const void *buffer, size_t bufsize)
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _OnSysWrite_0DelegateInstance;

        private static uint _OnSysWrite_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint bufsize)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysWrite(buffer, bufsize);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[17];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _GetSize_0DelegateInstance += _GetSize_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSize_0DelegateInstance).ToPointer();
                _GetLength_0DelegateInstance += _GetLength_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetLength_0DelegateInstance).ToPointer();
                _IsSeekable_0DelegateInstance += _IsSeekable_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_IsSeekable_0DelegateInstance).ToPointer();
                _OnSysSeek_0DelegateInstance += _OnSysSeek_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnSysSeek_0DelegateInstance).ToPointer();
                _OnSysTell_0DelegateInstance += _OnSysTell_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnSysTell_0DelegateInstance).ToPointer();
                _Write_0DelegateInstance += _Write_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_Write_0DelegateInstance).ToPointer();
                _SeekO_0DelegateInstance += _SeekO_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_SeekO_0DelegateInstance).ToPointer();
                _TellO_0DelegateInstance += _TellO_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_TellO_0DelegateInstance).ToPointer();
                _LastWrite_0DelegateInstance += _LastWrite_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_LastWrite_0DelegateInstance).ToPointer();
                _Sync_0DelegateInstance += _Sync_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_Sync_0DelegateInstance).ToPointer();
                _Close_0DelegateInstance += _Close_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_Close_0DelegateInstance).ToPointer();
                _OnSysWrite_0DelegateInstance += _OnSysWrite_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_OnSysWrite_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(20 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(20 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe abstract partial class wxFilterClassFactoryBase : wxObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxFilterClassFactoryBaseC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxFilterClassFactoryBaseC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxFilterClassFactoryBaseD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK24wxFilterClassFactoryBase11GetProtocolEv")]
            internal static extern void GetProtocol_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK24wxFilterClassFactoryBase12PopExtensionERK8wxString")]
            internal static extern void PopExtension_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr location);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK24wxFilterClassFactoryBase9CanHandleERK8wxString20wxStreamProtocolType")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool CanHandle_0(global::System.IntPtr instance, global::System.IntPtr protocol, wxStreamProtocolType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK24wxFilterClassFactoryBase13FindExtensionERK8wxString")]
            internal static extern uint FindExtension_0(global::System.IntPtr instance, global::System.IntPtr location);
        }

        public static new wxFilterClassFactoryBase __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxFilterClassFactoryBaseInternal(native.ToPointer(), skipVTables);
        }

        public static wxFilterClassFactoryBase __CreateInstance(wxFilterClassFactoryBase.Internal native, bool skipVTables = false)
        {
            return new wxFilterClassFactoryBaseInternal(native, skipVTables);
        }

        protected wxFilterClassFactoryBase(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxFilterClassFactoryBase()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxFilterClassFactoryBase");
        }

        protected wxFilterClassFactoryBase(wxFilterClassFactoryBase _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxFilterClassFactoryBase");
        }

        protected override void Dispose(bool disposing)
        {
            wxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString GetProtocol()
        {
            var __ret = new wxString.Internal();
            Internal.GetProtocol_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString PopExtension(wxString location)
        {
            if (ReferenceEquals(location, null))
                throw new global::System.ArgumentNullException("location", "Cannot be null because it is a C++ reference (&).");
            var arg0 = location.__Instance;
            var __ret = new wxString.Internal();
            Internal.PopExtension_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public abstract char** GetProtocols(wxStreamProtocolType type);

        public bool CanHandle(wxString protocol, wxStreamProtocolType type)
        {
            if (ReferenceEquals(protocol, null))
                throw new global::System.ArgumentNullException("protocol", "Cannot be null because it is a C++ reference (&).");
            var arg0 = protocol.__Instance;
            var arg1 = type;
            var __ret = Internal.CanHandle_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        protected uint FindExtension(wxString location)
        {
            if (ReferenceEquals(location, null))
                throw new global::System.ArgumentNullException("location", "Cannot be null because it is a C++ reference (&).");
            var arg0 = location.__Instance;
            var __ret = Internal.FindExtension_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN24wxFilterClassFactoryBase12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactoryBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxFilterClassFactoryBase()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactoryBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactoryBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactoryBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxChar * const *GetProtocols(wxStreamProtocolType type = wxSTREAM_PROTOCOL) const = 0
        private static Delegates.Func_charPtrPtr_IntPtr_wxStreamProtocolType _GetProtocols_0DelegateInstance;

        private static char** _GetProtocols_0DelegateHook(global::System.IntPtr instance, wxStreamProtocolType type)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactoryBase) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetProtocols(type);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[5];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _GetProtocols_0DelegateInstance += _GetProtocols_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetProtocols_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(8 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe abstract partial class wxFilterClassFactory : wxFilterClassFactoryBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public global::System.IntPtr m_next;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxFilterClassFactoryC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxFilterClassFactoryC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxFilterClassFactoryD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxFilterClassFactory4FindERK8wxString20wxStreamProtocolType")]
            internal static extern global::System.IntPtr Find_0(global::System.IntPtr protocol, wxStreamProtocolType type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxFilterClassFactory8GetFirstEv")]
            internal static extern global::System.IntPtr GetFirst_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxFilterClassFactory7GetNextEv")]
            internal static extern global::System.IntPtr GetNext_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxFilterClassFactory9PushFrontEv")]
            internal static extern void PushFront_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxFilterClassFactory6RemoveEv")]
            internal static extern void Remove_0(global::System.IntPtr instance);
        }

        public static new wxFilterClassFactory __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxFilterClassFactoryInternal(native.ToPointer(), skipVTables);
        }

        public static wxFilterClassFactory __CreateInstance(wxFilterClassFactory.Internal native, bool skipVTables = false)
        {
            return new wxFilterClassFactoryInternal(native, skipVTables);
        }

        protected wxFilterClassFactory(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxFilterClassFactory()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxFilterClassFactory");
        }

        protected wxFilterClassFactory(wxFilterClassFactory _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxFilterClassFactory");
        }

        protected override void Dispose(bool disposing)
        {
            wxObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 1 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract wxFilterInputStream NewStream(wxInputStream stream);

        public abstract wxFilterOutputStream NewStream(wxOutputStream stream);

        public abstract wxFilterInputStream NewStream1(wxInputStream stream);

        public abstract wxFilterOutputStream NewStream1(wxOutputStream stream);

        public wxFilterClassFactory GetNext()
        {
            var __ret = Internal.GetNext_0((__Instance + __PointerAdjustment));
            wxFilterClassFactory __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxFilterClassFactory.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxFilterClassFactory) wxFilterClassFactory.NativeToManagedMap[__ret];
            else wxFilterClassFactory.NativeToManagedMap[__ret] = __result0 = (wxFilterClassFactory) wxFilterClassFactory.__CreateInstance(__ret);
            return __result0;
        }

        public void PushFront()
        {
            Internal.PushFront_0((__Instance + __PointerAdjustment));
        }

        public void Remove()
        {
            Internal.Remove_0((__Instance + __PointerAdjustment));
        }

        public override wxClassInfo GetClassInfo()
        {
            return base.GetClassInfo();
        }

        public static wxFilterClassFactory Find(wxString protocol, wxStreamProtocolType type)
        {
            if (ReferenceEquals(protocol, null))
                throw new global::System.ArgumentNullException("protocol", "Cannot be null because it is a C++ reference (&).");
            var arg0 = protocol.__Instance;
            var arg1 = type;
            var __ret = Internal.Find_0(arg0, arg1);
            wxFilterClassFactory __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxFilterClassFactory.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxFilterClassFactory) wxFilterClassFactory.NativeToManagedMap[__ret];
            else wxFilterClassFactory.NativeToManagedMap[__ret] = __result0 = (wxFilterClassFactory) wxFilterClassFactory.__CreateInstance(__ret);
            return __result0;
        }

        public static wxFilterClassFactory GetFirst()
        {
            var __ret = Internal.GetFirst_0();
            wxFilterClassFactory __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxFilterClassFactory.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxFilterClassFactory) wxFilterClassFactory.NativeToManagedMap[__ret];
            else wxFilterClassFactory.NativeToManagedMap[__ret] = __result0 = (wxFilterClassFactory) wxFilterClassFactory.__CreateInstance(__ret);
            return __result0;
        }

        public static wxClassInfo ms_classInfo
        {
            get
            {
                var __ptr = (wxClassInfo.Internal*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN20wxFilterClassFactory12ms_classInfoE");
                return wxClassInfo.__CreateInstance(*__ptr);
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactory) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxFilterClassFactory()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactory) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactory) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactory) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxChar * const *GetProtocols(wxStreamProtocolType type = wxSTREAM_PROTOCOL) const = 0
        private static Delegates.Func_charPtrPtr_IntPtr_wxStreamProtocolType _GetProtocols_0DelegateInstance;

        private static char** _GetProtocols_0DelegateHook(global::System.IntPtr instance, wxStreamProtocolType type)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactory) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetProtocols(type);
            return __ret;
        }

        // wxFilterInputStream *NewStream(wxInputStream& stream) const = 0
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _NewStream_0DelegateInstance;

        private static global::System.IntPtr _NewStream_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactory) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.NewStream(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxFilterOutputStream *NewStream(wxOutputStream& stream) const = 0
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _NewStream_1DelegateInstance;

        private static global::System.IntPtr _NewStream_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactory) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxOutputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[stream];
            else __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.NewStream(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxFilterInputStream *NewStream(wxInputStream *stream) const = 0
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _NewStream1_0DelegateInstance;

        private static global::System.IntPtr _NewStream1_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactory) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxInputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[stream];
            else __result0 = (wxInputStream) wxInputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.NewStream1(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxFilterOutputStream *NewStream(wxOutputStream *stream) const = 0
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _NewStream1_1DelegateInstance;

        private static global::System.IntPtr _NewStream1_1DelegateHook(global::System.IntPtr instance, global::System.IntPtr stream)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFilterClassFactory) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxOutputStream __result0;
            if (stream == IntPtr.Zero) __result0 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(stream))
                __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[stream];
            else __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(stream, skipVTables: true);
            var __ret = __target.NewStream1(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[9];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _GetProtocols_0DelegateInstance += _GetProtocols_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetProtocols_0DelegateInstance).ToPointer();
                _NewStream_0DelegateInstance += _NewStream_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_NewStream_0DelegateInstance).ToPointer();
                _NewStream_1DelegateInstance += _NewStream_1DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_NewStream_1DelegateInstance).ToPointer();
                _NewStream1_0DelegateInstance += _NewStream1_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_NewStream1_0DelegateInstance).ToPointer();
                _NewStream1_1DelegateInstance += _NewStream1_1DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_NewStream1_1DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(12 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(12 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxStreamBuffer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public partial struct Internal
        {
            [FieldOffset(4)]
            public sbyte* m_buffer_start;

            [FieldOffset(8)]
            public sbyte* m_buffer_end;

            [FieldOffset(12)]
            public sbyte* m_buffer_pos;

            [FieldOffset(16)]
            public global::System.IntPtr m_stream;

            [FieldOffset(20)]
            public wxStreamBuffer.BufMode m_mode;

            [FieldOffset(24)]
            public byte m_destroybuf;

            [FieldOffset(25)]
            public byte m_fixed;

            [FieldOffset(26)]
            public byte m_flushable;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBufferC2ER12wxStreamBaseNS_7BufModeE")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr stream, wxStreamBuffer.BufMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBufferC2EmR13wxInputStream")]
            internal static extern void ctor_1(global::System.IntPtr instance, uint bufsize, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBufferC2EmR14wxOutputStream")]
            internal static extern void ctor_2(global::System.IntPtr instance, uint bufsize, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBufferC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBufferC2ENS_7BufModeE")]
            internal static extern void ctor_4(global::System.IntPtr instance, wxStreamBuffer.BufMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer4ReadEPS_")]
            internal static extern uint Read_1(global::System.IntPtr instance, global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer5WriteEPS_")]
            internal static extern uint Write_1(global::System.IntPtr instance, global::System.IntPtr buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer11ResetBufferEv")]
            internal static extern void ResetBuffer_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer8TruncateEv")]
            internal static extern void Truncate_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer11SetBufferIOEPvS0_b")]
            internal static extern void SetBufferIO_0(global::System.IntPtr instance, global::System.IntPtr start, global::System.IntPtr end, bool takeOwnership);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer11SetBufferIOEPvmb")]
            internal static extern void SetBufferIO_1(global::System.IntPtr instance, global::System.IntPtr start, uint len, bool takeOwnership);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer11SetBufferIOEm")]
            internal static extern void SetBufferIO_2(global::System.IntPtr instance, uint bufsize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer14GetBufferStartEv")]
            internal static extern global::System.IntPtr GetBufferStart_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer12GetBufferEndEv")]
            internal static extern global::System.IntPtr GetBufferEnd_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer12GetBufferPosEv")]
            internal static extern global::System.IntPtr GetBufferPos_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer13GetBufferSizeEv")]
            internal static extern uint GetBufferSize_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer14GetIntPositionEv")]
            internal static extern uint GetIntPosition_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer14SetIntPositionEm")]
            internal static extern void SetIntPosition_0(global::System.IntPtr instance, uint pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer13GetLastAccessEv")]
            internal static extern uint GetLastAccess_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer12GetBytesLeftEv")]
            internal static extern uint GetBytesLeft_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer5FixedEb")]
            internal static extern void Fixed_0(global::System.IntPtr instance, bool @fixed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer9FlushableEb")]
            internal static extern void Flushable_0(global::System.IntPtr instance, bool f);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer11FlushBufferEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool FlushBuffer_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer10FillBufferEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool FillBuffer_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer11GetDataLeftEv")]
            internal static extern uint GetDataLeft_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer9GetStreamEv")]
            internal static extern global::System.IntPtr GetStream_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer9HasBufferEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool HasBuffer_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer7IsFixedEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsFixed_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer11IsFlushableEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsFlushable_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer14GetInputStreamEv")]
            internal static extern global::System.IntPtr GetInputStream_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxStreamBuffer15GetOutputStreamEv")]
            internal static extern global::System.IntPtr GetOutputStream_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer13GetFromBufferEPvm")]
            internal static extern void GetFromBuffer_0(global::System.IntPtr instance, global::System.IntPtr buffer, uint size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer11PutToBufferEPKvm")]
            internal static extern void PutToBuffer_0(global::System.IntPtr instance, global::System.IntPtr buffer, uint size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer8SetErrorE13wxStreamError")]
            internal static extern void SetError_0(global::System.IntPtr instance, wxStreamError err);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer4InitEv")]
            internal static extern void Init_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer14InitWithStreamER12wxStreamBaseNS_7BufModeE")]
            internal static extern void InitWithStream_0(global::System.IntPtr instance, global::System.IntPtr stream, wxStreamBuffer.BufMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer10InitBufferEv")]
            internal static extern void InitBuffer_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxStreamBuffer10FreeBufferEv")]
            internal static extern void FreeBuffer_0(global::System.IntPtr instance);
        }

        public enum BufMode : uint
        {
            read = 0,
            write = 1,
            read_write = 2
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStreamBuffer> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStreamBuffer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStreamBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStreamBuffer(native.ToPointer(), skipVTables);
        }

        public static wxStreamBuffer __CreateInstance(wxStreamBuffer.Internal native, bool skipVTables = false)
        {
            return new wxStreamBuffer(native, skipVTables);
        }

        private static void* __CopyValue(wxStreamBuffer.Internal native)
        {
            var ret = Marshal.AllocHGlobal(28);
            wxStreamBuffer.Internal.cctor_3(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxStreamBuffer(wxStreamBuffer.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStreamBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxStreamBuffer(wxStreamBase stream, wxStreamBuffer.BufMode mode)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var arg1 = mode;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxStreamBuffer");
        }

        public wxStreamBuffer(uint bufsize, wxInputStream stream)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg1 = stream.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), bufsize, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxStreamBuffer");
        }

        public wxStreamBuffer(uint bufsize, wxOutputStream stream)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg1 = stream.__Instance;
            Internal.ctor_2((__Instance + __PointerAdjustment), bufsize, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxStreamBuffer");
        }

        public wxStreamBuffer(wxStreamBuffer buf)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(buf, null))
                throw new global::System.ArgumentNullException("buf", "Cannot be null because it is a C++ reference (&).");
            var arg0 = buf.__Instance;
            Internal.cctor_3((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxStreamBuffer");
        }

        public wxStreamBuffer(wxStreamBuffer.BufMode mode)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = mode;
            Internal.ctor_4((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxStreamBuffer");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStreamBuffer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___dtor_0Delegate((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public virtual uint Read(global::System.IntPtr buffer, uint size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___Read_0Delegate = (Delegates.Func_uint_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_IntPtr_uint));
            var arg0 = buffer;
            var __ret = ___Read_0Delegate((__Instance + __PointerAdjustment), arg0, size);
            return __ret;
        }

        public uint Read(wxStreamBuffer buf)
        {
            var arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = Internal.Read_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public virtual uint Write(global::System.IntPtr buffer, uint size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___Write_0Delegate = (Delegates.Func_uint_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_IntPtr_uint));
            var arg0 = buffer;
            var __ret = ___Write_0Delegate((__Instance + __PointerAdjustment), arg0, size);
            return __ret;
        }

        public uint Write(wxStreamBuffer buf)
        {
            var arg0 = ReferenceEquals(buf, null) ? global::System.IntPtr.Zero : buf.__Instance;
            var __ret = Internal.Write_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public virtual sbyte Peek()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 4 * 4);
            var ___Peek_0Delegate = (Delegates.Func_sbyte_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_sbyte_IntPtr));
            var __ret = ___Peek_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual sbyte GetChar()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___GetChar_0Delegate = (Delegates.Func_sbyte_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_sbyte_IntPtr));
            var __ret = ___GetChar_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual void PutChar(sbyte c)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___PutChar_0Delegate = (Delegates.Action_IntPtr_sbyte) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_sbyte));
            var arg0 = c;
            ___PutChar_0Delegate((__Instance + __PointerAdjustment), arg0);
        }

        public virtual long Tell()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___Tell_0Delegate = (Delegates.Func_long_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_long_IntPtr));
            var __ret = ___Tell_0Delegate((__Instance + __PointerAdjustment));
            return __ret;
        }

        public virtual long Seek(long pos, wxSeekMode mode)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___Seek_0Delegate = (Delegates.Func_long_IntPtr_long_wxSeekMode) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_long_IntPtr_long_wxSeekMode));
            var arg1 = mode;
            var __ret = ___Seek_0Delegate((__Instance + __PointerAdjustment), pos, arg1);
            return __ret;
        }

        public void ResetBuffer()
        {
            Internal.ResetBuffer_0((__Instance + __PointerAdjustment));
        }

        public void Truncate()
        {
            Internal.Truncate_0((__Instance + __PointerAdjustment));
        }

        public void SetBufferIO(global::System.IntPtr start, global::System.IntPtr end, bool takeOwnership)
        {
            var arg0 = start;
            var arg1 = end;
            Internal.SetBufferIO_0((__Instance + __PointerAdjustment), arg0, arg1, takeOwnership);
        }

        public void SetBufferIO(global::System.IntPtr start, uint len, bool takeOwnership)
        {
            var arg0 = start;
            Internal.SetBufferIO_1((__Instance + __PointerAdjustment), arg0, len, takeOwnership);
        }

        public void SetBufferIO(uint bufsize)
        {
            Internal.SetBufferIO_2((__Instance + __PointerAdjustment), bufsize);
        }

        public global::System.IntPtr GetBufferStart()
        {
            var __ret = Internal.GetBufferStart_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public global::System.IntPtr GetBufferEnd()
        {
            var __ret = Internal.GetBufferEnd_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public global::System.IntPtr GetBufferPos()
        {
            var __ret = Internal.GetBufferPos_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetBufferSize()
        {
            var __ret = Internal.GetBufferSize_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetIntPosition()
        {
            var __ret = Internal.GetIntPosition_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void SetIntPosition(uint pos)
        {
            Internal.SetIntPosition_0((__Instance + __PointerAdjustment), pos);
        }

        public uint GetLastAccess()
        {
            var __ret = Internal.GetLastAccess_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetBytesLeft()
        {
            var __ret = Internal.GetBytesLeft_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void Fixed(bool @fixed)
        {
            Internal.Fixed_0((__Instance + __PointerAdjustment), @fixed);
        }

        public void Flushable(bool f)
        {
            Internal.Flushable_0((__Instance + __PointerAdjustment), f);
        }

        public bool FlushBuffer()
        {
            var __ret = Internal.FlushBuffer_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool FillBuffer()
        {
            var __ret = Internal.FillBuffer_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint GetDataLeft()
        {
            var __ret = Internal.GetDataLeft_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxStreamBase GetStream()
        {
            var __ret = Internal.GetStream_0((__Instance + __PointerAdjustment));
            wxStreamBase __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStreamBase.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStreamBase) wxStreamBase.NativeToManagedMap[__ret];
            else wxStreamBase.NativeToManagedMap[__ret] = __result0 = (wxStreamBase) wxStreamBase.__CreateInstance(__ret);
            return __result0;
        }

        public bool HasBuffer()
        {
            var __ret = Internal.HasBuffer_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsFixed()
        {
            var __ret = Internal.IsFixed_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsFlushable()
        {
            var __ret = Internal.IsFlushable_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxInputStream GetInputStream()
        {
            var __ret = Internal.GetInputStream_0((__Instance + __PointerAdjustment));
            wxInputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxInputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxInputStream) wxInputStream.NativeToManagedMap[__ret];
            else wxInputStream.NativeToManagedMap[__ret] = __result0 = (wxInputStream) wxInputStream.__CreateInstance(__ret);
            return __result0;
        }

        public wxOutputStream GetOutputStream()
        {
            var __ret = Internal.GetOutputStream_0((__Instance + __PointerAdjustment));
            wxOutputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[__ret];
            else wxOutputStream.NativeToManagedMap[__ret] = __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(__ret);
            return __result0;
        }

        protected void GetFromBuffer(global::System.IntPtr buffer, uint size)
        {
            var arg0 = buffer;
            Internal.GetFromBuffer_0((__Instance + __PointerAdjustment), arg0, size);
        }

        protected void PutToBuffer(global::System.IntPtr buffer, uint size)
        {
            var arg0 = buffer;
            Internal.PutToBuffer_0((__Instance + __PointerAdjustment), arg0, size);
        }

        protected void SetError(wxStreamError err)
        {
            var arg0 = err;
            Internal.SetError_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void Init()
        {
            Internal.Init_0((__Instance + __PointerAdjustment));
        }

        protected void InitWithStream(wxStreamBase stream, wxStreamBuffer.BufMode mode)
        {
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var arg1 = mode;
            Internal.InitWithStream_0((__Instance + __PointerAdjustment), arg0, arg1);
        }

        protected void InitBuffer()
        {
            Internal.InitBuffer_0((__Instance + __PointerAdjustment));
        }

        protected void FreeBuffer()
        {
            Internal.FreeBuffer_0((__Instance + __PointerAdjustment));
        }

        protected sbyte* m_buffer_start
        {
            get
            {
                return ((Internal*) __Instance)->m_buffer_start;
            }

            set
            {
                ((Internal*) __Instance)->m_buffer_start = value;
            }
        }

        protected sbyte* m_buffer_end
        {
            get
            {
                return ((Internal*) __Instance)->m_buffer_end;
            }

            set
            {
                ((Internal*) __Instance)->m_buffer_end = value;
            }
        }

        protected sbyte* m_buffer_pos
        {
            get
            {
                return ((Internal*) __Instance)->m_buffer_pos;
            }

            set
            {
                ((Internal*) __Instance)->m_buffer_pos = value;
            }
        }

        protected wxStreamBase m_stream
        {
            get
            {
                wxStreamBase __result0;
                if (((Internal*) __Instance)->m_stream == IntPtr.Zero) __result0 = null;
                else if (wxStreamBase.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_stream))
                    __result0 = (wxStreamBase) wxStreamBase.NativeToManagedMap[((Internal*) __Instance)->m_stream];
                else wxStreamBase.NativeToManagedMap[((Internal*) __Instance)->m_stream] = __result0 = (wxStreamBase) wxStreamBase.__CreateInstance(((Internal*) __Instance)->m_stream);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_stream = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        protected wxStreamBuffer.BufMode m_mode
        {
            get
            {
                return ((Internal*) __Instance)->m_mode;
            }

            set
            {
                ((Internal*) __Instance)->m_mode = value;
            }
        }

        protected bool m_destroybuf
        {
            get
            {
                return ((Internal*) __Instance)->m_destroybuf != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_destroybuf = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_fixed
        {
            get
            {
                return ((Internal*) __Instance)->m_fixed != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_fixed = (byte) (value ? 1 : 0);
            }
        }

        protected bool m_flushable
        {
            get
            {
                return ((Internal*) __Instance)->m_flushable != 0;
            }

            set
            {
                ((Internal*) __Instance)->m_flushable = (byte) (value ? 1 : 0);
            }
        }

        #region Virtual table interop

        // virtual ~wxStreamBuffer()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBuffer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // size_t Read(void *buffer, size_t size)
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _Read_0DelegateInstance;

        private static uint _Read_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBuffer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Read(buffer, size);
            return __ret;
        }

        // size_t Write(const void *buffer, size_t size)
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _Write_0DelegateInstance;

        private static uint _Write_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBuffer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Write(buffer, size);
            return __ret;
        }

        // char Peek()
        private static Delegates.Func_sbyte_IntPtr _Peek_0DelegateInstance;

        private static sbyte _Peek_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBuffer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Peek();
            return __ret;
        }

        // char GetChar()
        private static Delegates.Func_sbyte_IntPtr _GetChar_0DelegateInstance;

        private static sbyte _GetChar_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBuffer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetChar();
            return __ret;
        }

        // void PutChar(char c)
        private static Delegates.Action_IntPtr_sbyte _PutChar_0DelegateInstance;

        private static void _PutChar_0DelegateHook(global::System.IntPtr instance, sbyte c)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBuffer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.PutChar(c);
        }

        // wxFileOffset Tell() const
        private static Delegates.Func_long_IntPtr _Tell_0DelegateInstance;

        private static long _Tell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBuffer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Tell();
            return __ret;
        }

        // wxFileOffset Seek(wxFileOffset pos, wxSeekMode mode)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _Seek_0DelegateInstance;

        private static long _Seek_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxStreamBuffer) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Seek(pos, mode);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[8];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _Read_0DelegateInstance += _Read_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_Read_0DelegateInstance).ToPointer();
                _Write_0DelegateInstance += _Write_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_Write_0DelegateInstance).ToPointer();
                _Peek_0DelegateInstance += _Peek_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_Peek_0DelegateInstance).ToPointer();
                _GetChar_0DelegateInstance += _GetChar_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_GetChar_0DelegateInstance).ToPointer();
                _PutChar_0DelegateInstance += _PutChar_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_PutChar_0DelegateInstance).ToPointer();
                _Tell_0DelegateInstance += _Tell_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_Tell_0DelegateInstance).ToPointer();
                _Seek_0DelegateInstance += _Seek_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_Seek_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(11 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(11 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxBufferedInputStream : wxFilterInputStream, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public uint m_lastcount;

            [FieldOffset(12)]
            public wxStreamError m_lasterror;

            [FieldOffset(16)]
            public sbyte* m_wback;

            [FieldOffset(20)]
            public uint m_wbacksize;

            [FieldOffset(24)]
            public uint m_wbackcur;

            [FieldOffset(28)]
            public global::System.IntPtr m_parent_i_stream;

            [FieldOffset(32)]
            public byte m_owns;

            [FieldOffset(36)]
            public global::System.IntPtr m_i_streambuf;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxBufferedInputStreamC2ER13wxInputStreamP14wxStreamBuffer")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr stream, global::System.IntPtr buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxBufferedInputStreamC2ER13wxInputStreamm")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr stream, uint bufsize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN21wxBufferedInputStream20SetInputStreamBufferEP14wxStreamBuffer")]
            internal static extern void SetInputStreamBuffer_0(global::System.IntPtr instance, global::System.IntPtr buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK21wxBufferedInputStream20GetInputStreamBufferEv")]
            internal static extern global::System.IntPtr GetInputStreamBuffer_0(global::System.IntPtr instance);
        }

        public static new wxBufferedInputStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBufferedInputStream(native.ToPointer(), skipVTables);
        }

        public static wxBufferedInputStream __CreateInstance(wxBufferedInputStream.Internal native, bool skipVTables = false)
        {
            return new wxBufferedInputStream(native, skipVTables);
        }

        private static void* __CopyValue(wxBufferedInputStream.Internal native)
        {
            var ret = Marshal.AllocHGlobal(40);
            *(wxBufferedInputStream.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxBufferedInputStream(wxBufferedInputStream.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBufferedInputStream(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxBufferedInputStream(wxInputStream stream, wxStreamBuffer buffer)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(40);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var arg1 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxBufferedInputStream");
        }

        public wxBufferedInputStream(wxInputStream stream, uint bufsize)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(40);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0, bufsize);
            SetupVTables(GetType().FullName == "wxSharp.wxBufferedInputStream");
        }

        public override sbyte Peek()
        {
            return base.Peek();
        }

        public override wxInputStream Read(global::System.IntPtr buffer, uint size)
        {
            return base.Read(buffer, size);
        }

        public override long SeekI(long pos, wxSeekMode mode)
        {
            return base.SeekI(pos, mode);
        }

        public override long TellI()
        {
            return base.TellI();
        }

        public override bool IsSeekable()
        {
            return base.IsSeekable();
        }

        public void SetInputStreamBuffer(wxStreamBuffer buffer)
        {
            var arg0 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
            Internal.SetInputStreamBuffer_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxStreamBuffer GetInputStreamBuffer()
        {
            var __ret = Internal.GetInputStreamBuffer_0((__Instance + __PointerAdjustment));
            wxStreamBuffer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStreamBuffer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStreamBuffer) wxStreamBuffer.NativeToManagedMap[__ret];
            else wxStreamBuffer.NativeToManagedMap[__ret] = __result0 = (wxStreamBuffer) wxStreamBuffer.__CreateInstance(__ret);
            return __result0;
        }

        protected override uint OnSysRead(global::System.IntPtr buffer, uint bufsize)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___OnSysRead_0Delegate = (Delegates.Func_uint_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_IntPtr_uint));
            var arg0 = buffer;
            var __ret = ___OnSysRead_0Delegate((__Instance + __PointerAdjustment), arg0, bufsize);
            return __ret;
        }

        protected override long OnSysSeek(long seek, wxSeekMode mode)
        {
            return base.OnSysSeek(seek, mode);
        }

        protected override long OnSysTell()
        {
            return base.OnSysTell();
        }

        protected wxStreamBuffer m_i_streambuf
        {
            get
            {
                wxStreamBuffer __result0;
                if (((Internal*) __Instance)->m_i_streambuf == IntPtr.Zero) __result0 = null;
                else if (wxStreamBuffer.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_i_streambuf))
                    __result0 = (wxStreamBuffer) wxStreamBuffer.NativeToManagedMap[((Internal*) __Instance)->m_i_streambuf];
                else wxStreamBuffer.NativeToManagedMap[((Internal*) __Instance)->m_i_streambuf] = __result0 = (wxStreamBuffer) wxStreamBuffer.__CreateInstance(((Internal*) __Instance)->m_i_streambuf);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_i_streambuf = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxBufferedInputStream()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // size_t GetSize() const
        private static Delegates.Func_uint_IntPtr _GetSize_0DelegateInstance;

        private static uint _GetSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            return __ret;
        }

        // wxFileOffset GetLength() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _GetLength_0DelegateInstance;

        private static long _GetLength_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLength();
            return __ret;
        }

        // bool IsSeekable() const wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _IsSeekable_0DelegateInstance;

        private static bool _IsSeekable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsSeekable();
            return __ret;
        }

        // wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode) wxOVERRIDE
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _OnSysSeek_0DelegateInstance;

        private static long _OnSysSeek_0DelegateHook(global::System.IntPtr instance, long seek, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysSeek(seek, mode);
            return __ret;
        }

        // wxFileOffset OnSysTell() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _OnSysTell_0DelegateInstance;

        private static long _OnSysTell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysTell();
            return __ret;
        }

        // char Peek() wxOVERRIDE
        private static Delegates.Func_sbyte_IntPtr _Peek_0DelegateInstance;

        private static sbyte _Peek_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Peek();
            return __ret;
        }

        // wxInputStream& Read(void *buffer, size_t size) wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_uint _Read_0DelegateInstance;

        private static global::System.IntPtr _Read_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Read(buffer, size);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // size_t LastRead() const
        private static Delegates.Func_uint_IntPtr _LastRead_0DelegateInstance;

        private static uint _LastRead_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.LastRead();
            return __ret;
        }

        // bool CanRead() const
        private static Delegates.Func_bool_IntPtr _CanRead_0DelegateInstance;

        private static bool _CanRead_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CanRead();
            return __ret;
        }

        // bool Eof() const
        private static Delegates.Func_bool_IntPtr _Eof_0DelegateInstance;

        private static bool _Eof_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Eof();
            return __ret;
        }

        // wxFileOffset SeekI(wxFileOffset pos, wxSeekMode mode = wxFromStart) wxOVERRIDE
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _SeekI_0DelegateInstance;

        private static long _SeekI_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SeekI(pos, mode);
            return __ret;
        }

        // wxFileOffset TellI() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _TellI_0DelegateInstance;

        private static long _TellI_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TellI();
            return __ret;
        }

        // size_t OnSysRead(void *buffer, size_t bufsize) wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _OnSysRead_0DelegateInstance;

        private static uint _OnSysRead_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint bufsize)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysRead(buffer, bufsize);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[18];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _GetSize_0DelegateInstance += _GetSize_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSize_0DelegateInstance).ToPointer();
                _GetLength_0DelegateInstance += _GetLength_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetLength_0DelegateInstance).ToPointer();
                _IsSeekable_0DelegateInstance += _IsSeekable_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_IsSeekable_0DelegateInstance).ToPointer();
                _OnSysSeek_0DelegateInstance += _OnSysSeek_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnSysSeek_0DelegateInstance).ToPointer();
                _OnSysTell_0DelegateInstance += _OnSysTell_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnSysTell_0DelegateInstance).ToPointer();
                _Peek_0DelegateInstance += _Peek_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_Peek_0DelegateInstance).ToPointer();
                _Read_0DelegateInstance += _Read_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Read_0DelegateInstance).ToPointer();
                _LastRead_0DelegateInstance += _LastRead_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_LastRead_0DelegateInstance).ToPointer();
                _CanRead_0DelegateInstance += _CanRead_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_CanRead_0DelegateInstance).ToPointer();
                _Eof_0DelegateInstance += _Eof_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_Eof_0DelegateInstance).ToPointer();
                _SeekI_0DelegateInstance += _SeekI_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_SeekI_0DelegateInstance).ToPointer();
                _TellI_0DelegateInstance += _TellI_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_TellI_0DelegateInstance).ToPointer();
                _OnSysRead_0DelegateInstance += _OnSysRead_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_OnSysRead_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(21 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                    *(void**)(vfptr0 + 72) = *(void**)(native->vfptr0 + 72);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(21 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                    *(void**)(vfptr0 + 72) = _Thunks[17];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxBufferedOutputStream : wxFilterOutputStream, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 28)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public uint m_lastcount;

            [FieldOffset(12)]
            public wxStreamError m_lasterror;

            [FieldOffset(16)]
            public global::System.IntPtr m_parent_o_stream;

            [FieldOffset(20)]
            public byte m_owns;

            [FieldOffset(24)]
            public global::System.IntPtr m_o_streambuf;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxBufferedOutputStreamC2ER14wxOutputStreamP14wxStreamBuffer")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr stream, global::System.IntPtr buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxBufferedOutputStreamC2ER14wxOutputStreamm")]
            internal static extern void ctor_1(global::System.IntPtr instance, global::System.IntPtr stream, uint bufsize);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxBufferedOutputStream21SetOutputStreamBufferEP14wxStreamBuffer")]
            internal static extern void SetOutputStreamBuffer_0(global::System.IntPtr instance, global::System.IntPtr buffer);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK22wxBufferedOutputStream21GetOutputStreamBufferEv")]
            internal static extern global::System.IntPtr GetOutputStreamBuffer_0(global::System.IntPtr instance);
        }

        public static new wxBufferedOutputStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxBufferedOutputStream(native.ToPointer(), skipVTables);
        }

        public static wxBufferedOutputStream __CreateInstance(wxBufferedOutputStream.Internal native, bool skipVTables = false)
        {
            return new wxBufferedOutputStream(native, skipVTables);
        }

        private static void* __CopyValue(wxBufferedOutputStream.Internal native)
        {
            var ret = Marshal.AllocHGlobal(28);
            *(wxBufferedOutputStream.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxBufferedOutputStream(wxBufferedOutputStream.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxBufferedOutputStream(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxBufferedOutputStream(wxOutputStream stream, wxStreamBuffer buffer)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var arg1 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, arg1);
            SetupVTables(GetType().FullName == "wxSharp.wxBufferedOutputStream");
        }

        public wxBufferedOutputStream(wxOutputStream stream, uint bufsize)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(28);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0, bufsize);
            SetupVTables(GetType().FullName == "wxSharp.wxBufferedOutputStream");
        }

        public override wxOutputStream Write(global::System.IntPtr buffer, uint size)
        {
            return base.Write(buffer, size);
        }

        public override long SeekO(long pos, wxSeekMode mode)
        {
            return base.SeekO(pos, mode);
        }

        public override long TellO()
        {
            return base.TellO();
        }

        public override bool IsSeekable()
        {
            return base.IsSeekable();
        }

        public override void Sync()
        {
            base.Sync();
        }

        public override bool Close()
        {
            return base.Close();
        }

        public override long GetLength()
        {
            return base.GetLength();
        }

        public void SetOutputStreamBuffer(wxStreamBuffer buffer)
        {
            var arg0 = ReferenceEquals(buffer, null) ? global::System.IntPtr.Zero : buffer.__Instance;
            Internal.SetOutputStreamBuffer_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxStreamBuffer GetOutputStreamBuffer()
        {
            var __ret = Internal.GetOutputStreamBuffer_0((__Instance + __PointerAdjustment));
            wxStreamBuffer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxStreamBuffer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxStreamBuffer) wxStreamBuffer.NativeToManagedMap[__ret];
            else wxStreamBuffer.NativeToManagedMap[__ret] = __result0 = (wxStreamBuffer) wxStreamBuffer.__CreateInstance(__ret);
            return __result0;
        }

        protected override uint OnSysWrite(global::System.IntPtr buffer, uint bufsize)
        {
            return base.OnSysWrite(buffer, bufsize);
        }

        protected override long OnSysSeek(long seek, wxSeekMode mode)
        {
            return base.OnSysSeek(seek, mode);
        }

        protected override long OnSysTell()
        {
            return base.OnSysTell();
        }

        protected wxStreamBuffer m_o_streambuf
        {
            get
            {
                wxStreamBuffer __result0;
                if (((Internal*) __Instance)->m_o_streambuf == IntPtr.Zero) __result0 = null;
                else if (wxStreamBuffer.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_o_streambuf))
                    __result0 = (wxStreamBuffer) wxStreamBuffer.NativeToManagedMap[((Internal*) __Instance)->m_o_streambuf];
                else wxStreamBuffer.NativeToManagedMap[((Internal*) __Instance)->m_o_streambuf] = __result0 = (wxStreamBuffer) wxStreamBuffer.__CreateInstance(((Internal*) __Instance)->m_o_streambuf);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_o_streambuf = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // virtual ~wxBufferedOutputStream()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // size_t GetSize() const
        private static Delegates.Func_uint_IntPtr _GetSize_0DelegateInstance;

        private static uint _GetSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            return __ret;
        }

        // wxFileOffset GetLength() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _GetLength_0DelegateInstance;

        private static long _GetLength_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLength();
            return __ret;
        }

        // bool IsSeekable() const wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _IsSeekable_0DelegateInstance;

        private static bool _IsSeekable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsSeekable();
            return __ret;
        }

        // wxFileOffset OnSysSeek(wxFileOffset seek, wxSeekMode mode) wxOVERRIDE
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _OnSysSeek_0DelegateInstance;

        private static long _OnSysSeek_0DelegateHook(global::System.IntPtr instance, long seek, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysSeek(seek, mode);
            return __ret;
        }

        // wxFileOffset OnSysTell() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _OnSysTell_0DelegateInstance;

        private static long _OnSysTell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysTell();
            return __ret;
        }

        // wxOutputStream& Write(const void *buffer, size_t size) wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_uint _Write_0DelegateInstance;

        private static global::System.IntPtr _Write_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Write(buffer, size);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // wxFileOffset SeekO(wxFileOffset pos, wxSeekMode mode = wxFromStart) wxOVERRIDE
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _SeekO_0DelegateInstance;

        private static long _SeekO_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SeekO(pos, mode);
            return __ret;
        }

        // wxFileOffset TellO() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _TellO_0DelegateInstance;

        private static long _TellO_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TellO();
            return __ret;
        }

        // size_t LastWrite() const
        private static Delegates.Func_uint_IntPtr _LastWrite_0DelegateInstance;

        private static uint _LastWrite_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.LastWrite();
            return __ret;
        }

        // void Sync() wxOVERRIDE
        private static Delegates.Action_IntPtr _Sync_0DelegateInstance;

        private static void _Sync_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Sync();
        }

        // bool Close() wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _Close_0DelegateInstance;

        private static bool _Close_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Close();
            return __ret;
        }

        // size_t OnSysWrite(const void *buffer, size_t bufsize) wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _OnSysWrite_0DelegateInstance;

        private static uint _OnSysWrite_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint bufsize)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxBufferedOutputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysWrite(buffer, bufsize);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[17];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _GetSize_0DelegateInstance += _GetSize_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSize_0DelegateInstance).ToPointer();
                _GetLength_0DelegateInstance += _GetLength_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetLength_0DelegateInstance).ToPointer();
                _IsSeekable_0DelegateInstance += _IsSeekable_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_IsSeekable_0DelegateInstance).ToPointer();
                _OnSysSeek_0DelegateInstance += _OnSysSeek_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnSysSeek_0DelegateInstance).ToPointer();
                _OnSysTell_0DelegateInstance += _OnSysTell_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnSysTell_0DelegateInstance).ToPointer();
                _Write_0DelegateInstance += _Write_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_Write_0DelegateInstance).ToPointer();
                _SeekO_0DelegateInstance += _SeekO_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_SeekO_0DelegateInstance).ToPointer();
                _TellO_0DelegateInstance += _TellO_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_TellO_0DelegateInstance).ToPointer();
                _LastWrite_0DelegateInstance += _LastWrite_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_LastWrite_0DelegateInstance).ToPointer();
                _Sync_0DelegateInstance += _Sync_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_Sync_0DelegateInstance).ToPointer();
                _Close_0DelegateInstance += _Close_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_Close_0DelegateInstance).ToPointer();
                _OnSysWrite_0DelegateInstance += _OnSysWrite_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_OnSysWrite_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(20 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(20 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxWrapperInputStream : wxFilterInputStream, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 36)]
        public new partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_refData;

            [FieldOffset(8)]
            public uint m_lastcount;

            [FieldOffset(12)]
            public wxStreamError m_lasterror;

            [FieldOffset(16)]
            public sbyte* m_wback;

            [FieldOffset(20)]
            public uint m_wbacksize;

            [FieldOffset(24)]
            public uint m_wbackcur;

            [FieldOffset(28)]
            public global::System.IntPtr m_parent_i_stream;

            [FieldOffset(32)]
            public byte m_owns;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxWrapperInputStreamC2ER13wxInputStream")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxWrapperInputStreamC2Ev")]
            internal static extern void ctor_2(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK20wxWrapperInputStream20SynchronizeLastErrorEv")]
            internal static extern void SynchronizeLastError_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxWrapperInputStream16InitParentStreamER13wxInputStream")]
            internal static extern void InitParentStream_0(global::System.IntPtr instance, global::System.IntPtr stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxWrapperInputStream16InitParentStreamEP13wxInputStream")]
            internal static extern void InitParentStream1_0(global::System.IntPtr instance, global::System.IntPtr stream);
        }

        public static new wxWrapperInputStream __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxWrapperInputStream(native.ToPointer(), skipVTables);
        }

        public static wxWrapperInputStream __CreateInstance(wxWrapperInputStream.Internal native, bool skipVTables = false)
        {
            return new wxWrapperInputStream(native, skipVTables);
        }

        private static void* __CopyValue(wxWrapperInputStream.Internal native)
        {
            var ret = Marshal.AllocHGlobal(36);
            *(wxWrapperInputStream.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxWrapperInputStream(wxWrapperInputStream.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxWrapperInputStream(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxWrapperInputStream(wxInputStream stream)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(36);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxWrapperInputStream");
        }

        protected wxWrapperInputStream()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(36);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_2((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxWrapperInputStream");
        }

        public override long GetLength()
        {
            return base.GetLength();
        }

        public override bool IsSeekable()
        {
            return base.IsSeekable();
        }

        protected override uint OnSysRead(global::System.IntPtr buffer, uint size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___OnSysRead_0Delegate = (Delegates.Func_uint_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_IntPtr_uint));
            var arg0 = buffer;
            var __ret = ___OnSysRead_0Delegate((__Instance + __PointerAdjustment), arg0, size);
            return __ret;
        }

        protected override long OnSysSeek(long pos, wxSeekMode mode)
        {
            return base.OnSysSeek(pos, mode);
        }

        protected override long OnSysTell()
        {
            return base.OnSysTell();
        }

        protected void SynchronizeLastError()
        {
            Internal.SynchronizeLastError_0((__Instance + __PointerAdjustment));
        }

        protected void InitParentStream(wxInputStream stream)
        {
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            Internal.InitParentStream_0((__Instance + __PointerAdjustment), arg0);
        }

        protected void InitParentStream1(wxInputStream stream)
        {
            var arg0 = ReferenceEquals(stream, null) ? global::System.IntPtr.Zero : stream.__Instance;
            Internal.InitParentStream1_0((__Instance + __PointerAdjustment), arg0);
        }

        #region Virtual table interop

        // 
        private static Delegates.Func_IntPtr_IntPtr _GetClassInfo_0DelegateInstance;

        private static global::System.IntPtr _GetClassInfo_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetClassInfo();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxWrapperInputStream
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxObjectRefData *CreateRefData() const
        private static Delegates.Func_IntPtr_IntPtr _CreateRefData_0DelegateInstance;

        private static global::System.IntPtr _CreateRefData_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CreateRefData();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxObjectRefData *CloneRefData(const wxObjectRefData *data) const
        private static Delegates.Func_IntPtr_IntPtr_IntPtr _CloneRefData_0DelegateInstance;

        private static global::System.IntPtr _CloneRefData_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr data)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxRefCounter __result0;
            if (data == IntPtr.Zero) __result0 = null;
            else if (wxRefCounter.NativeToManagedMap.ContainsKey(data))
                __result0 = (wxRefCounter) wxRefCounter.NativeToManagedMap[data];
            else __result0 = (wxRefCounter) wxRefCounter.__CreateInstance(data, skipVTables: true);
            var __ret = __target.CloneRefData(__result0);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // bool IsOk() const
        private static Delegates.Func_bool_IntPtr _IsOk_0DelegateInstance;

        private static bool _IsOk_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsOk();
            return __ret;
        }

        // size_t GetSize() const
        private static Delegates.Func_uint_IntPtr _GetSize_0DelegateInstance;

        private static uint _GetSize_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetSize();
            return __ret;
        }

        // wxFileOffset GetLength() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _GetLength_0DelegateInstance;

        private static long _GetLength_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.GetLength();
            return __ret;
        }

        // bool IsSeekable() const wxOVERRIDE
        private static Delegates.Func_bool_IntPtr _IsSeekable_0DelegateInstance;

        private static bool _IsSeekable_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.IsSeekable();
            return __ret;
        }

        // wxFileOffset OnSysSeek(wxFileOffset pos, wxSeekMode mode) wxOVERRIDE
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _OnSysSeek_0DelegateInstance;

        private static long _OnSysSeek_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysSeek(pos, mode);
            return __ret;
        }

        // wxFileOffset OnSysTell() const wxOVERRIDE
        private static Delegates.Func_long_IntPtr _OnSysTell_0DelegateInstance;

        private static long _OnSysTell_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysTell();
            return __ret;
        }

        // char Peek() wxOVERRIDE
        private static Delegates.Func_sbyte_IntPtr _Peek_0DelegateInstance;

        private static sbyte _Peek_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Peek();
            return __ret;
        }

        // wxInputStream& Read(void *buffer, size_t size)
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_uint _Read_0DelegateInstance;

        private static global::System.IntPtr _Read_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Read(buffer, size);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // size_t LastRead() const
        private static Delegates.Func_uint_IntPtr _LastRead_0DelegateInstance;

        private static uint _LastRead_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.LastRead();
            return __ret;
        }

        // bool CanRead() const
        private static Delegates.Func_bool_IntPtr _CanRead_0DelegateInstance;

        private static bool _CanRead_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.CanRead();
            return __ret;
        }

        // bool Eof() const
        private static Delegates.Func_bool_IntPtr _Eof_0DelegateInstance;

        private static bool _Eof_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.Eof();
            return __ret;
        }

        // wxFileOffset SeekI(wxFileOffset pos, wxSeekMode mode = wxFromStart)
        private static Delegates.Func_long_IntPtr_long_wxSeekMode _SeekI_0DelegateInstance;

        private static long _SeekI_0DelegateHook(global::System.IntPtr instance, long pos, wxSeekMode mode)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.SeekI(pos, mode);
            return __ret;
        }

        // wxFileOffset TellI() const
        private static Delegates.Func_long_IntPtr _TellI_0DelegateInstance;

        private static long _TellI_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.TellI();
            return __ret;
        }

        // size_t OnSysRead(void *buffer, size_t size) wxOVERRIDE
        private static Delegates.Func_uint_IntPtr_IntPtr_uint _OnSysRead_0DelegateInstance;

        private static uint _OnSysRead_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr buffer, uint size)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxWrapperInputStream) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.OnSysRead(buffer, size);
            return __ret;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[18];
                _GetClassInfo_0DelegateInstance += _GetClassInfo_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_GetClassInfo_0DelegateInstance).ToPointer();
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _CreateRefData_0DelegateInstance += _CreateRefData_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_CreateRefData_0DelegateInstance).ToPointer();
                _CloneRefData_0DelegateInstance += _CloneRefData_0DelegateHook;
                _Thunks[3] = Marshal.GetFunctionPointerForDelegate(_CloneRefData_0DelegateInstance).ToPointer();
                _IsOk_0DelegateInstance += _IsOk_0DelegateHook;
                _Thunks[4] = Marshal.GetFunctionPointerForDelegate(_IsOk_0DelegateInstance).ToPointer();
                _GetSize_0DelegateInstance += _GetSize_0DelegateHook;
                _Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetSize_0DelegateInstance).ToPointer();
                _GetLength_0DelegateInstance += _GetLength_0DelegateHook;
                _Thunks[6] = Marshal.GetFunctionPointerForDelegate(_GetLength_0DelegateInstance).ToPointer();
                _IsSeekable_0DelegateInstance += _IsSeekable_0DelegateHook;
                _Thunks[7] = Marshal.GetFunctionPointerForDelegate(_IsSeekable_0DelegateInstance).ToPointer();
                _OnSysSeek_0DelegateInstance += _OnSysSeek_0DelegateHook;
                _Thunks[8] = Marshal.GetFunctionPointerForDelegate(_OnSysSeek_0DelegateInstance).ToPointer();
                _OnSysTell_0DelegateInstance += _OnSysTell_0DelegateHook;
                _Thunks[9] = Marshal.GetFunctionPointerForDelegate(_OnSysTell_0DelegateInstance).ToPointer();
                _Peek_0DelegateInstance += _Peek_0DelegateHook;
                _Thunks[10] = Marshal.GetFunctionPointerForDelegate(_Peek_0DelegateInstance).ToPointer();
                _Read_0DelegateInstance += _Read_0DelegateHook;
                _Thunks[11] = Marshal.GetFunctionPointerForDelegate(_Read_0DelegateInstance).ToPointer();
                _LastRead_0DelegateInstance += _LastRead_0DelegateHook;
                _Thunks[12] = Marshal.GetFunctionPointerForDelegate(_LastRead_0DelegateInstance).ToPointer();
                _CanRead_0DelegateInstance += _CanRead_0DelegateHook;
                _Thunks[13] = Marshal.GetFunctionPointerForDelegate(_CanRead_0DelegateInstance).ToPointer();
                _Eof_0DelegateInstance += _Eof_0DelegateHook;
                _Thunks[14] = Marshal.GetFunctionPointerForDelegate(_Eof_0DelegateInstance).ToPointer();
                _SeekI_0DelegateInstance += _SeekI_0DelegateHook;
                _Thunks[15] = Marshal.GetFunctionPointerForDelegate(_SeekI_0DelegateInstance).ToPointer();
                _TellI_0DelegateInstance += _TellI_0DelegateHook;
                _Thunks[16] = Marshal.GetFunctionPointerForDelegate(_TellI_0DelegateInstance).ToPointer();
                _OnSysRead_0DelegateInstance += _OnSysRead_0DelegateHook;
                _Thunks[17] = Marshal.GetFunctionPointerForDelegate(_OnSysRead_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(21 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                    *(void**)(vfptr0 + 16) = *(void**)(native->vfptr0 + 16);
                    *(void**)(vfptr0 + 20) = *(void**)(native->vfptr0 + 20);
                    *(void**)(vfptr0 + 24) = *(void**)(native->vfptr0 + 24);
                    *(void**)(vfptr0 + 28) = *(void**)(native->vfptr0 + 28);
                    *(void**)(vfptr0 + 32) = *(void**)(native->vfptr0 + 32);
                    *(void**)(vfptr0 + 36) = *(void**)(native->vfptr0 + 36);
                    *(void**)(vfptr0 + 40) = *(void**)(native->vfptr0 + 40);
                    *(void**)(vfptr0 + 44) = *(void**)(native->vfptr0 + 44);
                    *(void**)(vfptr0 + 48) = *(void**)(native->vfptr0 + 48);
                    *(void**)(vfptr0 + 52) = *(void**)(native->vfptr0 + 52);
                    *(void**)(vfptr0 + 56) = *(void**)(native->vfptr0 + 56);
                    *(void**)(vfptr0 + 60) = *(void**)(native->vfptr0 + 60);
                    *(void**)(vfptr0 + 64) = *(void**)(native->vfptr0 + 64);
                    *(void**)(vfptr0 + 68) = *(void**)(native->vfptr0 + 68);
                    *(void**)(vfptr0 + 72) = *(void**)(native->vfptr0 + 72);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(21 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = _Thunks[0];
                    *(void**)(vfptr0 + 4) = *(void**)(native->vfptr0 + 4);
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                    *(void**)(vfptr0 + 16) = _Thunks[3];
                    *(void**)(vfptr0 + 20) = _Thunks[4];
                    *(void**)(vfptr0 + 24) = _Thunks[5];
                    *(void**)(vfptr0 + 28) = _Thunks[6];
                    *(void**)(vfptr0 + 32) = _Thunks[7];
                    *(void**)(vfptr0 + 36) = _Thunks[8];
                    *(void**)(vfptr0 + 40) = _Thunks[9];
                    *(void**)(vfptr0 + 44) = _Thunks[10];
                    *(void**)(vfptr0 + 48) = _Thunks[11];
                    *(void**)(vfptr0 + 52) = _Thunks[12];
                    *(void**)(vfptr0 + 56) = _Thunks[13];
                    *(void**)(vfptr0 + 60) = _Thunks[14];
                    *(void**)(vfptr0 + 64) = _Thunks[15];
                    *(void**)(vfptr0 + 68) = _Thunks[16];
                    *(void**)(vfptr0 + 72) = _Thunks[17];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    internal unsafe partial class wxInputStreamInternal : wxInputStream, IDisposable
    {
        private static void* __CopyValue(wxInputStream.Internal native)
        {
            var ret = Marshal.AllocHGlobal(28);
            *(wxInputStream.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxInputStreamInternal(wxInputStream.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxInputStreamInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        protected override uint OnSysRead(global::System.IntPtr buffer, uint size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___OnSysRead_0Delegate = (Delegates.Func_uint_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_IntPtr_uint));
            var arg0 = buffer;
            var __ret = ___OnSysRead_0Delegate((__Instance + __PointerAdjustment), arg0, size);
            return __ret;
        }
    }

    internal unsafe partial class wxFilterInputStreamInternal : wxFilterInputStream, IDisposable
    {
        private static void* __CopyValue(wxFilterInputStream.Internal native)
        {
            var ret = Marshal.AllocHGlobal(36);
            *(wxFilterInputStream.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxFilterInputStreamInternal(wxFilterInputStream.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxFilterInputStreamInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        protected override uint OnSysRead(global::System.IntPtr buffer, uint size)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 18 * 4);
            var ___OnSysRead_0Delegate = (Delegates.Func_uint_IntPtr_IntPtr_uint) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_uint_IntPtr_IntPtr_uint));
            var arg0 = buffer;
            var __ret = ___OnSysRead_0Delegate((__Instance), arg0, size);
            return __ret;
        }
    }

    internal unsafe partial class wxFilterClassFactoryBaseInternal : wxFilterClassFactoryBase, IDisposable
    {
        private static void* __CopyValue(wxFilterClassFactoryBase.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxFilterClassFactoryBase.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxFilterClassFactoryBaseInternal(wxFilterClassFactoryBase.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxFilterClassFactoryBaseInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override char** GetProtocols(wxStreamProtocolType type)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___GetProtocols_0Delegate = (Delegates.Func_charPtrPtr_IntPtr_wxStreamProtocolType) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_charPtrPtr_IntPtr_wxStreamProtocolType));
            var arg0 = type;
            var __ret = ___GetProtocols_0Delegate((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }
    }

    internal unsafe partial class wxFilterClassFactoryInternal : wxFilterClassFactory, IDisposable
    {
        private static void* __CopyValue(wxFilterClassFactory.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            *(wxFilterClassFactory.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxFilterClassFactoryInternal(wxFilterClassFactory.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxFilterClassFactoryInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override wxFilterInputStream NewStream(wxInputStream stream)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 6 * 4);
            var ___NewStream_0Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var __ret = ___NewStream_0Delegate((__Instance + __PointerAdjustment), arg0);
            wxFilterInputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxFilterInputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxFilterInputStream) wxFilterInputStream.NativeToManagedMap[__ret];
            else wxFilterInputStream.NativeToManagedMap[__ret] = __result0 = (wxFilterInputStream) wxFilterInputStream.__CreateInstance(__ret);
            return __result0;
        }

        public override wxFilterOutputStream NewStream(wxOutputStream stream)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 7 * 4);
            var ___NewStream_1Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(stream, null))
                throw new global::System.ArgumentNullException("stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stream.__Instance;
            var __ret = ___NewStream_1Delegate((__Instance + __PointerAdjustment), arg0);
            wxFilterOutputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxFilterOutputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxFilterOutputStream) wxFilterOutputStream.NativeToManagedMap[__ret];
            else wxFilterOutputStream.NativeToManagedMap[__ret] = __result0 = (wxFilterOutputStream) wxFilterOutputStream.__CreateInstance(__ret);
            return __result0;
        }

        public override wxFilterInputStream NewStream1(wxInputStream stream)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 8 * 4);
            var ___NewStream1_0Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(stream, null) ? global::System.IntPtr.Zero : stream.__Instance;
            var __ret = ___NewStream1_0Delegate((__Instance + __PointerAdjustment), arg0);
            wxFilterInputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxFilterInputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxFilterInputStream) wxFilterInputStream.NativeToManagedMap[__ret];
            else wxFilterInputStream.NativeToManagedMap[__ret] = __result0 = (wxFilterInputStream) wxFilterInputStream.__CreateInstance(__ret);
            return __result0;
        }

        public override wxFilterOutputStream NewStream1(wxOutputStream stream)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 9 * 4);
            var ___NewStream1_1Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr));
            var arg0 = ReferenceEquals(stream, null) ? global::System.IntPtr.Zero : stream.__Instance;
            var __ret = ___NewStream1_1Delegate((__Instance + __PointerAdjustment), arg0);
            wxFilterOutputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxFilterOutputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxFilterOutputStream) wxFilterOutputStream.NativeToManagedMap[__ret];
            else wxFilterOutputStream.NativeToManagedMap[__ret] = __result0 = (wxFilterOutputStream) wxFilterOutputStream.__CreateInstance(__ret);
            return __result0;
        }

        public override char** GetProtocols(wxStreamProtocolType type)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 5 * 4);
            var ___GetProtocols_0Delegate = (Delegates.Func_charPtrPtr_IntPtr_wxStreamProtocolType) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_charPtrPtr_IntPtr_wxStreamProtocolType));
            var arg0 = type;
            var __ret = ___GetProtocols_0Delegate((__Instance), arg0);
            return __ret;
        }
    }

    public unsafe partial class stream
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z6wxEndLR14wxOutputStream")]
            internal static extern global::System.IntPtr wxEndL_0(global::System.IntPtr o_stream);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z18wxUseFilterClassesv")]
            internal static extern void wxUseFilterClasses_0();
        }

        public static wxOutputStream wxEndL(wxOutputStream o_stream)
        {
            if (ReferenceEquals(o_stream, null))
                throw new global::System.ArgumentNullException("o_stream", "Cannot be null because it is a C++ reference (&).");
            var arg0 = o_stream.__Instance;
            var __ret = Internal.wxEndL_0(arg0);
            wxOutputStream __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxOutputStream.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxOutputStream) wxOutputStream.NativeToManagedMap[__ret];
            else wxOutputStream.NativeToManagedMap[__ret] = __result0 = (wxOutputStream) wxOutputStream.__CreateInstance(__ret);
            return __result0;
        }

        public static void wxUseFilterClasses()
        {
            Internal.wxUseFilterClasses_0();
        }
    }
}
