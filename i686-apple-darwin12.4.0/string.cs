//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxStringTypeBufferBase
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_str;
        }
    }

    public unsafe partial class wxStringTypeBufferLengthBase
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [FieldOffset(99511757)]
            public uint m_len;

            [FieldOffset(208522533)]
            public byte m_lenSet;
        }
    }

    public unsafe partial class wxStringTypeBuffer
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
        }
    }

    public unsafe partial class wxStringTypeBufferLength
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
        }
    }

    public unsafe partial class wxCStrData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 12)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_str;

            [FieldOffset(4)]
            public uint m_offset;

            [FieldOffset(8)]
            public byte m_owned;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxCStrDataC2EPc")]
            internal static extern void ctor_1(global::System.IntPtr instance, sbyte* buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxCStrDataC2EPw")]
            internal static extern void ctor_2(global::System.IntPtr instance, char* buf);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxCStrDataC2ERKS_")]
            internal static extern void cctor_3(global::System.IntPtr instance, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN10wxCStrDataD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrData7AsWCharEv")]
            internal static extern global::System.IntPtr AsWChar_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDatacvPKwEv")]
            internal static extern global::System.IntPtr OperatorConversion_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrData6AsCharEv")]
            internal static extern global::System.IntPtr AsChar_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrData14AsUnsignedCharEv")]
            internal static extern byte* AsUnsignedChar_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDatacvPKcEv")]
            internal static extern global::System.IntPtr OperatorConversion_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDatacvPKhEv")]
            internal static extern byte* OperatorConversion_2(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDatacvPKvEv")]
            internal static extern global::System.IntPtr OperatorConversion_3(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrData8AsStringEv")]
            internal static extern void AsString_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrData10AsInternalEv")]
            internal static extern global::System.IntPtr AsInternal_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDataplEi")]
            internal static extern void OperatorPlus_0(global::System.IntPtr @return, global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDataplEm")]
            internal static extern void OperatorPlus_2(global::System.IntPtr @return, global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDatamiEi")]
            internal static extern void OperatorMinus_0(global::System.IntPtr @return, global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK10wxCStrDataRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK10wxCStrDataRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqPKwRK10wxCStrData")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_1(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZnePKwRK10wxCStrData")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_1(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgePKwRK10wxCStrData")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZlePKwRK10wxCStrData")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgtPKwRK10wxCStrData")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZltPKwRK10wxCStrData")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK10wxCStrDataPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_2(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK10wxCStrDataPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_2(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgeRK10wxCStrDataPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZleRK10wxCStrDataPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgtRK10wxCStrDataPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZltRK10wxCStrDataPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZmiPKcRK10wxCStrData")]
            internal static extern uint OperatorMinus_1(global::System.IntPtr p, global::System.IntPtr cs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDataixEm")]
            internal static extern wxUniChar.Internal OperatorSubscript_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDataixEi")]
            internal static extern wxUniChar.Internal OperatorSubscript_1(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDataixEl")]
            internal static extern wxUniChar.Internal OperatorSubscript_2(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK10wxCStrDataixEj")]
            internal static extern wxUniChar.Internal OperatorSubscript_3(global::System.IntPtr instance, uint n);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxCStrData> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxCStrData>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxCStrData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxCStrData(native.ToPointer(), skipVTables);
        }

        public static wxCStrData __CreateInstance(wxCStrData.Internal native, bool skipVTables = false)
        {
            return new wxCStrData(native, skipVTables);
        }

        private static void* __CopyValue(wxCStrData.Internal native)
        {
            var ret = Marshal.AllocHGlobal(12);
            wxCStrData.Internal.cctor_3(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxCStrData(wxCStrData.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxCStrData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxCStrData(sbyte* buf)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = buf;
            Internal.ctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public wxCStrData(char* buf)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = buf;
            Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public wxCStrData(wxCStrData data)
        {
            __Instance = Marshal.AllocHGlobal(12);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(data, null))
                throw new global::System.ArgumentNullException("data", "Cannot be null because it is a C++ reference (&).");
            var arg0 = data.__Instance;
            Internal.cctor_3((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxCStrData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public string AsWChar()
        {
            var __ret = Internal.AsWChar_0((__Instance + __PointerAdjustment));
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public static implicit operator string(wxCStrData __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_0(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public string AsChar()
        {
            var __ret = Internal.AsChar_0((__Instance + __PointerAdjustment));
            return Marshal.PtrToStringAnsi(__ret);
        }

        public byte* AsUnsignedChar()
        {
            var __ret = Internal.AsUnsignedChar_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static implicit operator string(wxCStrData __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_1(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static implicit operator byte*(wxCStrData __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_2(arg0);
            return __ret;
        }

        public static implicit operator global::System.IntPtr(wxCStrData __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_3(arg0);
            return __ret;
        }

        public wxString AsString()
        {
            var __ret = new wxString.Internal();
            Internal.AsString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public string AsInternal()
        {
            var __ret = Internal.AsInternal_0((__Instance + __PointerAdjustment));
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public static wxCStrData operator +(wxCStrData __op, int n)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = new wxCStrData.Internal();
            Internal.OperatorPlus_0(new IntPtr(&__ret), arg0, n);
            return wxCStrData.__CreateInstance(__ret);
        }

        public static wxCStrData operator +(wxCStrData __op, uint n)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = new wxCStrData.Internal();
            Internal.OperatorPlus_2(new IntPtr(&__ret), arg0, n);
            return wxCStrData.__CreateInstance(__ret);
        }

        public static wxCStrData operator -(wxCStrData __op, int n)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = new wxCStrData.Internal();
            Internal.OperatorMinus_0(new IntPtr(&__ret), arg0, n);
            return wxCStrData.__CreateInstance(__ret);
        }

        public static bool operator ==(wxCStrData s1, wxString s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return s1Null && s2Null;
            var arg0 = s1.__Instance;
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxCStrData s1, wxString s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return !(s1Null && s2Null);
            var arg0 = s1.__Instance;
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(string x, wxCStrData y)
        {
            bool xNull = ReferenceEquals(x, null);
            bool yNull = ReferenceEquals(y, null);
            if (xNull || yNull)
                return xNull && yNull;
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorEqualEqual_1(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator !=(string x, wxCStrData y)
        {
            bool xNull = ReferenceEquals(x, null);
            bool yNull = ReferenceEquals(y, null);
            if (xNull || yNull)
                return !(xNull && yNull);
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorExclaimEqual_1(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator >=(string x, wxCStrData y)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator <=(string x, wxCStrData y)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator >(string x, wxCStrData y)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorGreater_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator <(string x, wxCStrData y)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorLess_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator ==(wxCStrData y, string x)
        {
            bool yNull = ReferenceEquals(y, null);
            bool xNull = ReferenceEquals(x, null);
            if (yNull || xNull)
                return yNull && xNull;
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorEqualEqual_2(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator !=(wxCStrData y, string x)
        {
            bool yNull = ReferenceEquals(y, null);
            bool xNull = ReferenceEquals(x, null);
            if (yNull || xNull)
                return !(yNull && xNull);
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorExclaimEqual_2(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator >=(wxCStrData y, string x)
        {
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorGreaterEqual_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator <=(wxCStrData y, string x)
        {
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorLessEqual_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator >(wxCStrData y, string x)
        {
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorGreater_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator <(wxCStrData y, string x)
        {
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorLess_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static uint operator -(string p, wxCStrData cs)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(p);
            if (ReferenceEquals(cs, null))
                throw new global::System.ArgumentNullException("cs", "Cannot be null because it is a C++ reference (&).");
            var arg1 = cs.__Instance;
            var __ret = Internal.OperatorMinus_1(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public wxUniChar this[uint n]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), n);
                return wxUniChar.__CreateInstance(__ret);
            }
        }

        public wxUniChar this[int n]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_1((__Instance + __PointerAdjustment), n);
                return wxUniChar.__CreateInstance(__ret);
            }
        }

        public wxUniChar this[int n]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_2((__Instance + __PointerAdjustment), n);
                return wxUniChar.__CreateInstance(__ret);
            }
        }

        public wxUniChar this[uint n]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_3((__Instance + __PointerAdjustment), n);
                return wxUniChar.__CreateInstance(__ret);
            }
        }
    }

    public unsafe partial class wxString : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 20)]
        public partial struct Internal
        {
            [FieldOffset(12)]
            internal wxString.ConvertedBuffer.Internal m_convertedToChar;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr stringSrc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2E9wxUniCharm")]
            internal static extern void ctor_3(global::System.IntPtr instance, wxUniChar.Internal ch, uint nRepeat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2Em9wxUniChar")]
            internal static extern void ctor_4(global::System.IntPtr instance, uint nRepeat, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2E12wxUniCharRefm")]
            internal static extern void ctor_5(global::System.IntPtr instance, wxUniCharRef.Internal ch, uint nRepeat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2Em12wxUniCharRef")]
            internal static extern void ctor_6(global::System.IntPtr instance, uint nRepeat, wxUniCharRef.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2Ecm")]
            internal static extern void ctor_7(global::System.IntPtr instance, sbyte ch, uint nRepeat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2Emc")]
            internal static extern void ctor_8(global::System.IntPtr instance, uint nRepeat, sbyte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2Ewm")]
            internal static extern void ctor_9(global::System.IntPtr instance, char ch, uint nRepeat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2Emw")]
            internal static extern void ctor_10(global::System.IntPtr instance, uint nRepeat, char ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2EPKc")]
            internal static extern void ctor_11(global::System.IntPtr instance, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2EPKcRK8wxMBConv")]
            internal static extern void ctor_12(global::System.IntPtr instance, global::System.IntPtr psz, global::System.IntPtr conv);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2EPKcm")]
            internal static extern void ctor_13(global::System.IntPtr instance, global::System.IntPtr psz, uint nLength);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2EPKcRK8wxMBConvm")]
            internal static extern void ctor_14(global::System.IntPtr instance, global::System.IntPtr psz, global::System.IntPtr conv, uint nLength);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2EPKh")]
            internal static extern void ctor_15(global::System.IntPtr instance, byte* psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2EPKhRK8wxMBConv")]
            internal static extern void ctor_16(global::System.IntPtr instance, byte* psz, global::System.IntPtr conv);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2EPKhm")]
            internal static extern void ctor_17(global::System.IntPtr instance, byte* psz, uint nLength);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2EPKhRK8wxMBConvm")]
            internal static extern void ctor_18(global::System.IntPtr instance, byte* psz, global::System.IntPtr conv, uint nLength);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2ERK10wxCStrData")]
            internal static extern void ctor_25(global::System.IntPtr instance, global::System.IntPtr cstr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2ERK10wxCStrDatam")]
            internal static extern void ctor_26(global::System.IntPtr instance, global::System.IntPtr cstr, uint nLength);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2ERKS_m")]
            internal static extern void ctor_27(global::System.IntPtr instance, global::System.IntPtr str, uint nLength);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2ERKS_mm")]
            internal static extern void ctor_30(global::System.IntPtr instance, global::System.IntPtr str, uint nPos, uint nLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2ENS_14const_iteratorES0_")]
            internal static extern void ctor_31(global::System.IntPtr instance, wxString.const_iterator.Internal first, wxString.const_iterator.Internal last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2EPKcS1_")]
            internal static extern void ctor_32(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringC2ERK10wxCStrDataS2_")]
            internal static extern void ctor_34(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString17GetIterForNthCharEm")]
            internal static extern void GetIterForNthChar_0(global::System.IntPtr @return, global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17IterOffsetInMBStrERKNS_14const_iteratorE")]
            internal static extern int IterOffsetInMBStr_0(global::System.IntPtr instance, global::System.IntPtr i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12ToStdWstringEv")]
            internal static extern global::System.IntPtr ToStdWstring_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5CloneEv")]
            internal static extern void Clone_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString5beginEv")]
            internal static extern void begin_1(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString3endEv")]
            internal static extern void end_1(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6lengthEv")]
            internal static extern uint length_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4sizeEv")]
            internal static extern uint size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8max_sizeEv")]
            internal static extern uint max_size_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5emptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8capacityEv")]
            internal static extern uint capacity_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7reserveEm")]
            internal static extern void reserve_0(global::System.IntPtr instance, uint sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6resizeEm9wxUniChar")]
            internal static extern void resize_0(global::System.IntPtr instance, uint nSize, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6substrEmm")]
            internal static extern void substr_0(global::System.IntPtr @return, global::System.IntPtr instance, uint nStart, uint nLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString3LenEv")]
            internal static extern uint Len_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7IsEmptyEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsEmpty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxStringntEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaim_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString8TruncateEm")]
            internal static extern global::System.IntPtr Truncate_0(global::System.IntPtr instance, uint uiLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString5EmptyEv")]
            internal static extern void Empty_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString5ClearEv")]
            internal static extern void Clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7IsAsciiEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsAscii_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsNumberEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsNumber_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6IsWordEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsWord_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7GetCharEm")]
            internal static extern wxUniChar.Internal GetChar_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString2atEm")]
            internal static extern wxUniCharRef.Internal at_1(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString15GetWritableCharEm")]
            internal static extern wxUniCharRef.Internal GetWritableChar_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7SetCharEm9wxUniChar")]
            internal static extern void SetChar_0(global::System.IntPtr instance, uint n, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString4LastEv")]
            internal static extern wxUniCharRef.Internal Last_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5c_strEv")]
            internal static extern void c_str_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4dataEv")]
            internal static extern void data_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxStringcv10wxCStrDataEv")]
            internal static extern void OperatorConversion_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxStringcvPKcEv")]
            internal static extern global::System.IntPtr OperatorConversion_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxStringcvPKwEv")]
            internal static extern global::System.IntPtr OperatorConversion_2(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxStringcvPKvEv")]
            internal static extern global::System.IntPtr OperatorConversion_3(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7GetDataEv")]
            internal static extern void GetData_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6wx_strEv")]
            internal static extern global::System.IntPtr wx_str_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString9FromAsciiEPKcm")]
            internal static extern void FromAscii_0(global::System.IntPtr @return, global::System.IntPtr ascii, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString9FromAsciiEPKc")]
            internal static extern void FromAscii_1(global::System.IntPtr @return, global::System.IntPtr ascii);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString9FromAsciiEc")]
            internal static extern void FromAscii_2(global::System.IntPtr @return, sbyte ascii);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString9FromAsciiEPKh")]
            internal static extern void FromAscii_3(global::System.IntPtr @return, byte* ascii);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString9FromAsciiEPKhm")]
            internal static extern void FromAscii_4(global::System.IntPtr @return, byte* ascii, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString8FromUTF8EPKcm")]
            internal static extern void FromUTF8_0(global::System.IntPtr @return, global::System.IntPtr utf8, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString17FromUTF8UncheckedEPKcm")]
            internal static extern void FromUTF8Unchecked_0(global::System.IntPtr @return, global::System.IntPtr utf8, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString12From8BitDataEPKcm")]
            internal static extern void From8BitData_0(global::System.IntPtr @return, global::System.IntPtr data, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString12From8BitDataEPKc")]
            internal static extern void From8BitData_1(global::System.IntPtr @return, global::System.IntPtr data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7mbc_strEv")]
            internal static extern void mbc_str_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6wc_strEv")]
            internal static extern global::System.IntPtr wc_str_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6wc_strERK8wxMBConv")]
            internal static extern global::System.IntPtr wc_str_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5t_strEv")]
            internal static extern global::System.IntPtr t_str_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendERKS_")]
            internal static extern global::System.IntPtr Append_0(global::System.IntPtr instance, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendEPKc")]
            internal static extern global::System.IntPtr Append_1(global::System.IntPtr instance, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendEPKw")]
            internal static extern global::System.IntPtr Append1_0(global::System.IntPtr instance, global::System.IntPtr pwz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendERK10wxCStrData")]
            internal static extern global::System.IntPtr Append_2(global::System.IntPtr instance, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendEPKcm")]
            internal static extern global::System.IntPtr Append_5(global::System.IntPtr instance, global::System.IntPtr psz, uint nLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendEPKwm")]
            internal static extern global::System.IntPtr Append1_1(global::System.IntPtr instance, global::System.IntPtr pwz, uint nLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendERK10wxCStrDatam")]
            internal static extern global::System.IntPtr Append_6(global::System.IntPtr instance, global::System.IntPtr psz, uint nLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendE9wxUniCharm")]
            internal static extern global::System.IntPtr Append_9(global::System.IntPtr instance, wxUniChar.Internal ch, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendE12wxUniCharRefm")]
            internal static extern global::System.IntPtr Append_10(global::System.IntPtr instance, wxUniCharRef.Internal ch, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendEcm")]
            internal static extern global::System.IntPtr Append_11(global::System.IntPtr instance, sbyte ch, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendEhm")]
            internal static extern global::System.IntPtr Append_12(global::System.IntPtr instance, byte ch, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6AppendEwm")]
            internal static extern global::System.IntPtr Append_13(global::System.IntPtr instance, char ch, uint count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7PrependERKS_")]
            internal static extern global::System.IntPtr Prepend_0(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringlsEi")]
            internal static extern global::System.IntPtr OperatorLessLess_11(global::System.IntPtr instance, int i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString3CmpEPKc")]
            internal static extern int Cmp_0(global::System.IntPtr instance, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString3CmpEPKw")]
            internal static extern int Cmp1_0(global::System.IntPtr instance, global::System.IntPtr pwz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString3CmpERKS_")]
            internal static extern int Cmp_1(global::System.IntPtr instance, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString3CmpERK10wxCStrData")]
            internal static extern int Cmp_2(global::System.IntPtr instance, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString9CmpNoCaseERKS_")]
            internal static extern int CmpNoCase_0(global::System.IntPtr instance, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsERKS_b")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs_0(global::System.IntPtr instance, global::System.IntPtr str, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsEPKcb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs_1(global::System.IntPtr instance, global::System.IntPtr str, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsEPKwb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs1_0(global::System.IntPtr instance, global::System.IntPtr str, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsERK10wxCStrDatab")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs_2(global::System.IntPtr instance, global::System.IntPtr str, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsE9wxUniCharb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs_5(global::System.IntPtr instance, wxUniChar.Internal c, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsE12wxUniCharRefb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs_6(global::System.IntPtr instance, wxUniCharRef.Internal c, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsEcb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs_7(global::System.IntPtr instance, sbyte c, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsEhb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs_8(global::System.IntPtr instance, byte c, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsEwb")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs_9(global::System.IntPtr instance, char c, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8IsSameAsEib")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsSameAs_10(global::System.IntPtr instance, int c, bool compareWithCase);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString3MidEmm")]
            internal static extern void Mid_0(global::System.IntPtr @return, global::System.IntPtr instance, uint nFirst, uint nCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString10StartsWithERKS_PS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool StartsWith_0(global::System.IntPtr instance, global::System.IntPtr prefix, global::System.IntPtr rest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8EndsWithERKS_PS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool EndsWith_0(global::System.IntPtr instance, global::System.IntPtr suffix, global::System.IntPtr rest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4LeftEm")]
            internal static extern void Left_0(global::System.IntPtr @return, global::System.IntPtr instance, uint nCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5RightEm")]
            internal static extern void Right_0(global::System.IntPtr @return, global::System.IntPtr instance, uint nCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString11BeforeFirstE9wxUniCharPS_")]
            internal static extern void BeforeFirst_0(global::System.IntPtr @return, global::System.IntPtr instance, wxUniChar.Internal ch, global::System.IntPtr rest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString10BeforeLastE9wxUniCharPS_")]
            internal static extern void BeforeLast_0(global::System.IntPtr @return, global::System.IntPtr instance, wxUniChar.Internal ch, global::System.IntPtr rest);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString10AfterFirstE9wxUniChar")]
            internal static extern void AfterFirst_0(global::System.IntPtr @return, global::System.IntPtr instance, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString9AfterLastE9wxUniChar")]
            internal static extern void AfterLast_0(global::System.IntPtr @return, global::System.IntPtr instance, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6BeforeE9wxUniChar")]
            internal static extern void Before_0(global::System.IntPtr @return, global::System.IntPtr instance, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5AfterE9wxUniChar")]
            internal static extern void After_0(global::System.IntPtr @return, global::System.IntPtr instance, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString9MakeUpperEv")]
            internal static extern global::System.IntPtr MakeUpper_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5UpperEv")]
            internal static extern void Upper_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString9MakeLowerEv")]
            internal static extern global::System.IntPtr MakeLower_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5LowerEv")]
            internal static extern void Lower_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString15MakeCapitalizedEv")]
            internal static extern global::System.IntPtr MakeCapitalized_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString10CapitalizeEv")]
            internal static extern void Capitalize_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString4TrimEb")]
            internal static extern global::System.IntPtr Trim_0(global::System.IntPtr instance, bool bFromRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString3PadEm9wxUniCharb")]
            internal static extern global::System.IntPtr Pad_0(global::System.IntPtr instance, uint nCount, wxUniChar.Internal chPad, bool bFromRight);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FindE9wxUniCharb")]
            internal static extern int Find_0(global::System.IntPtr instance, wxUniChar.Internal ch, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FindE12wxUniCharRefb")]
            internal static extern int Find_1(global::System.IntPtr instance, wxUniCharRef.Internal ch, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FindEcb")]
            internal static extern int Find_2(global::System.IntPtr instance, sbyte ch, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FindEhb")]
            internal static extern int Find_3(global::System.IntPtr instance, byte ch, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FindEwb")]
            internal static extern int Find_4(global::System.IntPtr instance, char ch, bool bFromEnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FindERKS_")]
            internal static extern int Find_5(global::System.IntPtr instance, global::System.IntPtr sub);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FindEPKc")]
            internal static extern int Find_6(global::System.IntPtr instance, global::System.IntPtr sub);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FindEPKw")]
            internal static extern int Find1_0(global::System.IntPtr instance, global::System.IntPtr sub);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FindERK10wxCStrData")]
            internal static extern int Find_7(global::System.IntPtr instance, global::System.IntPtr sub);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7ReplaceERKS_S1_b")]
            internal static extern uint Replace_0(global::System.IntPtr instance, global::System.IntPtr strOld, global::System.IntPtr strNew, bool bReplaceAll);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7MatchesERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Matches_0(global::System.IntPtr instance, global::System.IntPtr mask);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6ToLongEPli")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ToLong_0(global::System.IntPtr instance, int* val, int @base);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7ToULongEPmi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ToULong_0(global::System.IntPtr instance, uint* val, int @base);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString10ToLongLongEPxi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ToLongLong_0(global::System.IntPtr instance, long* val, int @base);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString11ToULongLongEPyi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ToULongLong_0(global::System.IntPtr instance, ulong* val, int @base);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8ToDoubleEPd")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ToDouble_0(global::System.IntPtr instance, double* val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7ToCLongEPli")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ToCLong_0(global::System.IntPtr instance, int* val, int @base);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8ToCULongEPmi")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ToCULong_0(global::System.IntPtr instance, uint* val, int @base);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString9ToCDoubleEPd")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool ToCDouble_0(global::System.IntPtr instance, double* val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString10FromDoubleEdi")]
            internal static extern void FromDouble_0(global::System.IntPtr @return, double val, int precision);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString11FromCDoubleEdi")]
            internal static extern void FromCDouble_0(global::System.IntPtr @return, double val, int precision);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6PrintfERK14wxFormatString")]
            internal static extern int Printf_0(global::System.IntPtr instance, global::System.IntPtr f1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6FormatERK14wxFormatString")]
            internal static extern void Format_0(global::System.IntPtr @return, global::System.IntPtr f1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString5AllocEm")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Alloc_0(global::System.IntPtr instance, uint nLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6ShrinkEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Shrink_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString9SubStringEmm")]
            internal static extern void SubString_0(global::System.IntPtr @return, global::System.IntPtr instance, uint from, uint to);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7sprintfERK14wxFormatString")]
            internal static extern int sprintf_0(global::System.IntPtr instance, global::System.IntPtr f1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString9CompareToEPKwNS_11caseCompareE")]
            internal static extern int CompareTo_0(global::System.IntPtr instance, global::System.IntPtr psz, wxString.caseCompare cmp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6LengthEv")]
            internal static extern uint Length_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4FreqE9wxUniChar")]
            internal static extern int Freq_0(global::System.IntPtr instance, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString9LowerCaseEv")]
            internal static extern void LowerCase_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString9UpperCaseEv")]
            internal static extern void UpperCase_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5StripENS_9stripTypeE")]
            internal static extern void Strip_0(global::System.IntPtr @return, global::System.IntPtr instance, wxString.stripType w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5IndexEPKw")]
            internal static extern uint Index_0(global::System.IntPtr instance, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5IndexE9wxUniChar")]
            internal static extern uint Index_1(global::System.IntPtr instance, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6RemoveEm")]
            internal static extern global::System.IntPtr Remove_0(global::System.IntPtr instance, uint pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString10RemoveLastEm")]
            internal static extern global::System.IntPtr RemoveLast_0(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6RemoveEmm")]
            internal static extern global::System.IntPtr Remove_1(global::System.IntPtr instance, uint nStart, uint nLen);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5FirstE9wxUniChar")]
            internal static extern int First_0(global::System.IntPtr instance, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5FirstE12wxUniCharRef")]
            internal static extern int First_1(global::System.IntPtr instance, wxUniCharRef.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5FirstEc")]
            internal static extern int First_2(global::System.IntPtr instance, sbyte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5FirstEh")]
            internal static extern int First_3(global::System.IntPtr instance, byte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5FirstEw")]
            internal static extern int First_4(global::System.IntPtr instance, char ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5FirstERKS_")]
            internal static extern int First_5(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4LastE9wxUniChar")]
            internal static extern int Last_2(global::System.IntPtr instance, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString8ContainsERKS_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool Contains_0(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString6IsNullEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsNull_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendERKS_mm")]
            internal static extern global::System.IntPtr append_0(global::System.IntPtr instance, global::System.IntPtr str, uint pos, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendERKS_")]
            internal static extern global::System.IntPtr append_1(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEPKc")]
            internal static extern global::System.IntPtr append_2(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEPKw")]
            internal static extern global::System.IntPtr append1_0(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEPKcm")]
            internal static extern global::System.IntPtr append_3(global::System.IntPtr instance, global::System.IntPtr sz, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEPKwm")]
            internal static extern global::System.IntPtr append1_1(global::System.IntPtr instance, global::System.IntPtr sz, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendERK10wxCStrData")]
            internal static extern global::System.IntPtr append_4(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendERK10wxCStrDatam")]
            internal static extern global::System.IntPtr append_7(global::System.IntPtr instance, global::System.IntPtr str, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEm9wxUniChar")]
            internal static extern global::System.IntPtr append_10(global::System.IntPtr instance, uint n, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEm12wxUniCharRef")]
            internal static extern global::System.IntPtr append_11(global::System.IntPtr instance, uint n, wxUniCharRef.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEmc")]
            internal static extern global::System.IntPtr append_12(global::System.IntPtr instance, uint n, sbyte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEmh")]
            internal static extern global::System.IntPtr append_13(global::System.IntPtr instance, uint n, byte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEmw")]
            internal static extern global::System.IntPtr append_14(global::System.IntPtr instance, uint n, char ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendENS_14const_iteratorES0_")]
            internal static extern global::System.IntPtr append_15(global::System.IntPtr instance, wxString.const_iterator.Internal first, wxString.const_iterator.Internal last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEPKcS1_")]
            internal static extern global::System.IntPtr append_16(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendEPKwS1_")]
            internal static extern global::System.IntPtr append1_2(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6appendERK10wxCStrDataS2_")]
            internal static extern global::System.IntPtr append_17(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignERKS_")]
            internal static extern global::System.IntPtr assign_0(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignERKS_m")]
            internal static extern global::System.IntPtr assign_1(global::System.IntPtr instance, global::System.IntPtr str, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignERKS_mm")]
            internal static extern global::System.IntPtr assign_2(global::System.IntPtr instance, global::System.IntPtr str, uint pos, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEPKc")]
            internal static extern global::System.IntPtr assign_3(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEPKw")]
            internal static extern global::System.IntPtr assign1_0(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEPKcm")]
            internal static extern global::System.IntPtr assign_4(global::System.IntPtr instance, global::System.IntPtr sz, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEPKwm")]
            internal static extern global::System.IntPtr assign1_1(global::System.IntPtr instance, global::System.IntPtr sz, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignERK10wxCStrData")]
            internal static extern global::System.IntPtr assign_5(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignERK10wxCStrDatam")]
            internal static extern global::System.IntPtr assign_8(global::System.IntPtr instance, global::System.IntPtr str, uint len);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEm9wxUniChar")]
            internal static extern global::System.IntPtr assign_11(global::System.IntPtr instance, uint n, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEm12wxUniCharRef")]
            internal static extern global::System.IntPtr assign_12(global::System.IntPtr instance, uint n, wxUniCharRef.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEmc")]
            internal static extern global::System.IntPtr assign_13(global::System.IntPtr instance, uint n, sbyte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEmh")]
            internal static extern global::System.IntPtr assign_14(global::System.IntPtr instance, uint n, byte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEmw")]
            internal static extern global::System.IntPtr assign_15(global::System.IntPtr instance, uint n, char ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignENS_14const_iteratorES0_")]
            internal static extern global::System.IntPtr assign_16(global::System.IntPtr instance, wxString.const_iterator.Internal first, wxString.const_iterator.Internal last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEPKcS1_")]
            internal static extern global::System.IntPtr assign_17(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignEPKwS1_")]
            internal static extern global::System.IntPtr assign1_2(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6assignERK10wxCStrDataS2_")]
            internal static extern global::System.IntPtr assign_18(global::System.IntPtr instance, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7compareERKS_")]
            internal static extern int compare_0(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7compareEPKc")]
            internal static extern int compare_1(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7compareEPKw")]
            internal static extern int compare1_0(global::System.IntPtr instance, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7compareERK10wxCStrData")]
            internal static extern int compare_2(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7compareEmmRKS_")]
            internal static extern int compare_5(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7compareEmmRKS_mm")]
            internal static extern int compare_6(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr str, uint nStart2, uint nLen2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7compareEmmPKcm")]
            internal static extern int compare_7(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr sz, uint nCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString7compareEmmPKwm")]
            internal static extern int compare1_1(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr sz, uint nCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertEmRKS_")]
            internal static extern global::System.IntPtr insert_0(global::System.IntPtr instance, uint nPos, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertEmRKS_mm")]
            internal static extern global::System.IntPtr insert_1(global::System.IntPtr instance, uint nPos, global::System.IntPtr str, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertEmPKc")]
            internal static extern global::System.IntPtr insert_2(global::System.IntPtr instance, uint nPos, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertEmPKw")]
            internal static extern global::System.IntPtr insert1_0(global::System.IntPtr instance, uint nPos, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertEmPKcm")]
            internal static extern global::System.IntPtr insert_3(global::System.IntPtr instance, uint nPos, global::System.IntPtr sz, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertEmPKwm")]
            internal static extern global::System.IntPtr insert1_1(global::System.IntPtr instance, uint nPos, global::System.IntPtr sz, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertEmm9wxUniChar")]
            internal static extern global::System.IntPtr insert_4(global::System.IntPtr instance, uint nPos, uint n, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertENS_8iteratorE9wxUniChar")]
            internal static extern void insert_5(global::System.IntPtr @return, global::System.IntPtr instance, wxString.iterator.Internal it, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertENS_8iteratorENS_14const_iteratorES1_")]
            internal static extern void insert_6(global::System.IntPtr instance, wxString.iterator.Internal it, wxString.const_iterator.Internal first, wxString.const_iterator.Internal last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertENS_8iteratorEPKcS2_")]
            internal static extern void insert_7(global::System.IntPtr instance, wxString.iterator.Internal it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertENS_8iteratorEPKwS2_")]
            internal static extern void insert1_2(global::System.IntPtr instance, wxString.iterator.Internal it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertENS_8iteratorERK10wxCStrDataS3_")]
            internal static extern void insert_8(global::System.IntPtr instance, wxString.iterator.Internal it, global::System.IntPtr first, global::System.IntPtr last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString6insertENS_8iteratorEm9wxUniChar")]
            internal static extern void insert_9(global::System.IntPtr instance, wxString.iterator.Internal it, uint n, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString5eraseEmm")]
            internal static extern global::System.IntPtr erase_0(global::System.IntPtr instance, uint pos, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString5eraseENS_8iteratorES0_")]
            internal static extern void erase_1(global::System.IntPtr @return, global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString5eraseENS_8iteratorE")]
            internal static extern void erase_2(global::System.IntPtr @return, global::System.IntPtr instance, wxString.iterator.Internal first);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString5clearEv")]
            internal static extern void clear_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceEmmPKc")]
            internal static extern global::System.IntPtr replace_0(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceEmmPKw")]
            internal static extern global::System.IntPtr replace1_0(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceEmmRKS_")]
            internal static extern global::System.IntPtr replace_1(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceEmmm9wxUniChar")]
            internal static extern global::System.IntPtr replace_2(global::System.IntPtr instance, uint nStart, uint nLen, uint nCount, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceEmmRKS_mm")]
            internal static extern global::System.IntPtr replace_3(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr str, uint nStart2, uint nLen2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceEmmPKcm")]
            internal static extern global::System.IntPtr replace_4(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr sz, uint nCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceEmmPKwm")]
            internal static extern global::System.IntPtr replace1_1(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr sz, uint nCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceEmmRKS_m")]
            internal static extern global::System.IntPtr replace_5(global::System.IntPtr instance, uint nStart, uint nLen, global::System.IntPtr s, uint nCount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceENS_8iteratorES0_PKc")]
            internal static extern global::System.IntPtr replace_6(global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceENS_8iteratorES0_PKw")]
            internal static extern global::System.IntPtr replace1_2(global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceENS_8iteratorES0_PKcm")]
            internal static extern global::System.IntPtr replace_7(global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last, global::System.IntPtr s, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceENS_8iteratorES0_PKwm")]
            internal static extern global::System.IntPtr replace1_3(global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last, global::System.IntPtr s, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceENS_8iteratorES0_RKS_")]
            internal static extern global::System.IntPtr replace_8(global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceENS_8iteratorES0_m9wxUniChar")]
            internal static extern global::System.IntPtr replace_9(global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last, uint n, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceENS_8iteratorES0_NS_14const_iteratorES1_")]
            internal static extern global::System.IntPtr replace_10(global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last, wxString.const_iterator.Internal first1, wxString.const_iterator.Internal last1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceENS_8iteratorES0_PKcS2_")]
            internal static extern global::System.IntPtr replace_11(global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last, global::System.IntPtr first1, global::System.IntPtr last1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString7replaceENS_8iteratorES0_PKwS2_")]
            internal static extern global::System.IntPtr replace1_4(global::System.IntPtr instance, wxString.iterator.Internal first, wxString.iterator.Internal last, global::System.IntPtr first1, global::System.IntPtr last1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxString4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4findERKS_m")]
            internal static extern uint find_0(global::System.IntPtr instance, global::System.IntPtr str, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4findEPKcmm")]
            internal static extern uint find_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4findEPKwmm")]
            internal static extern uint find1_0(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4findERK10wxCStrDatamm")]
            internal static extern uint find_4(global::System.IntPtr instance, global::System.IntPtr s, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4findE9wxUniCharm")]
            internal static extern uint find_5(global::System.IntPtr instance, wxUniChar.Internal ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4findE12wxUniCharRefm")]
            internal static extern uint find_6(global::System.IntPtr instance, wxUniCharRef.Internal ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4findEcm")]
            internal static extern uint find_7(global::System.IntPtr instance, sbyte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4findEhm")]
            internal static extern uint find_8(global::System.IntPtr instance, byte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString4findEwm")]
            internal static extern uint find_9(global::System.IntPtr instance, char ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5rfindERKS_m")]
            internal static extern uint rfind_0(global::System.IntPtr instance, global::System.IntPtr str, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5rfindEPKcmm")]
            internal static extern uint rfind_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5rfindEPKwmm")]
            internal static extern uint rfind1_0(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5rfindERK10wxCStrDatamm")]
            internal static extern uint rfind_4(global::System.IntPtr instance, global::System.IntPtr s, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5rfindE9wxUniCharm")]
            internal static extern uint rfind_5(global::System.IntPtr instance, wxUniChar.Internal ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5rfindE12wxUniCharRefm")]
            internal static extern uint rfind_6(global::System.IntPtr instance, wxUniCharRef.Internal ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5rfindEcm")]
            internal static extern uint rfind_7(global::System.IntPtr instance, sbyte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5rfindEhm")]
            internal static extern uint rfind_8(global::System.IntPtr instance, byte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString5rfindEwm")]
            internal static extern uint rfind_9(global::System.IntPtr instance, char ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofERKS_m")]
            internal static extern uint find_first_of_0(global::System.IntPtr instance, global::System.IntPtr str, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofEPKcm")]
            internal static extern uint find_first_of_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofEPKwm")]
            internal static extern uint find_first_of1_0(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofEPKcmm")]
            internal static extern uint find_first_of_2(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofEPKwmm")]
            internal static extern uint find_first_of1_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofE9wxUniCharm")]
            internal static extern uint find_first_of_3(global::System.IntPtr instance, wxUniChar.Internal c, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofERKS_m")]
            internal static extern uint find_last_of_0(global::System.IntPtr instance, global::System.IntPtr str, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofEPKcm")]
            internal static extern uint find_last_of_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofEPKwm")]
            internal static extern uint find_last_of1_0(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofEPKcmm")]
            internal static extern uint find_last_of_2(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofEPKwmm")]
            internal static extern uint find_last_of1_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofE9wxUniCharm")]
            internal static extern uint find_last_of_3(global::System.IntPtr instance, wxUniChar.Internal c, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofERKS_m")]
            internal static extern uint find_first_not_of_0(global::System.IntPtr instance, global::System.IntPtr str, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofEPKcm")]
            internal static extern uint find_first_not_of_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofEPKwm")]
            internal static extern uint find_first_not_of1_0(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofEPKcmm")]
            internal static extern uint find_first_not_of_2(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofEPKwmm")]
            internal static extern uint find_first_not_of1_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofE9wxUniCharm")]
            internal static extern uint find_first_not_of_3(global::System.IntPtr instance, wxUniChar.Internal c, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofERKS_m")]
            internal static extern uint find_last_not_of_0(global::System.IntPtr instance, global::System.IntPtr str, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofEPKcm")]
            internal static extern uint find_last_not_of_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofEPKwm")]
            internal static extern uint find_last_not_of1_0(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofEPKcmm")]
            internal static extern uint find_last_not_of_2(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofEPKwmm")]
            internal static extern uint find_last_not_of1_1(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofE9wxUniCharm")]
            internal static extern uint find_last_not_of_3(global::System.IntPtr instance, wxUniChar.Internal c, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofE12wxUniCharRefm")]
            internal static extern uint find_first_of_4(global::System.IntPtr instance, wxUniCharRef.Internal ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofEcm")]
            internal static extern uint find_first_of_5(global::System.IntPtr instance, sbyte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofEhm")]
            internal static extern uint find_first_of_6(global::System.IntPtr instance, byte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofEwm")]
            internal static extern uint find_first_of_7(global::System.IntPtr instance, char ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofE12wxUniCharRefm")]
            internal static extern uint find_last_of_4(global::System.IntPtr instance, wxUniCharRef.Internal ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofEcm")]
            internal static extern uint find_last_of_5(global::System.IntPtr instance, sbyte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofEhm")]
            internal static extern uint find_last_of_6(global::System.IntPtr instance, byte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofEwm")]
            internal static extern uint find_last_of_7(global::System.IntPtr instance, char ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofE12wxUniCharRefm")]
            internal static extern uint find_first_not_of_4(global::System.IntPtr instance, wxUniCharRef.Internal ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofEcm")]
            internal static extern uint find_first_not_of_5(global::System.IntPtr instance, sbyte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofEhm")]
            internal static extern uint find_first_not_of_6(global::System.IntPtr instance, byte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofEwm")]
            internal static extern uint find_first_not_of_7(global::System.IntPtr instance, char ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofE12wxUniCharRefm")]
            internal static extern uint find_last_not_of_4(global::System.IntPtr instance, wxUniCharRef.Internal ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofEcm")]
            internal static extern uint find_last_not_of_5(global::System.IntPtr instance, sbyte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofEhm")]
            internal static extern uint find_last_not_of_6(global::System.IntPtr instance, byte ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofEwm")]
            internal static extern uint find_last_not_of_7(global::System.IntPtr instance, char ch, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofERK10wxCStrDatam")]
            internal static extern uint find_first_of_8(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString13find_first_ofERK10wxCStrDatamm")]
            internal static extern uint find_first_of_11(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofERK10wxCStrDatam")]
            internal static extern uint find_last_of_8(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString12find_last_ofERK10wxCStrDatamm")]
            internal static extern uint find_last_of_11(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofERK10wxCStrDatam")]
            internal static extern uint find_first_not_of_8(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString17find_first_not_ofERK10wxCStrDatamm")]
            internal static extern uint find_first_not_of_11(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofERK10wxCStrDatam")]
            internal static extern uint find_last_not_of_8(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK8wxString16find_last_not_ofERK10wxCStrDatamm")]
            internal static extern uint find_last_not_of_11(global::System.IntPtr instance, global::System.IntPtr sz, uint nStart, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK8wxStringS1_")]
            internal static extern void OperatorPlus_0(global::System.IntPtr @return, global::System.IntPtr string1, global::System.IntPtr string2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK8wxString9wxUniChar")]
            internal static extern void OperatorPlus_1(global::System.IntPtr @return, global::System.IntPtr @string, wxUniChar.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK8wxStringPKc")]
            internal static extern void OperatorPlus_2(global::System.IntPtr @return, global::System.IntPtr @string, global::System.IntPtr psz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplPKcRK8wxString")]
            internal static extern void OperatorPlus_4(global::System.IntPtr @return, global::System.IntPtr psz, global::System.IntPtr @string);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK8wxString12wxUniCharRef")]
            internal static extern void OperatorPlus_6(global::System.IntPtr @return, global::System.IntPtr @string, wxUniCharRef.Internal ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK8wxStringc")]
            internal static extern void OperatorPlus_7(global::System.IntPtr @return, global::System.IntPtr @string, sbyte ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplRK8wxStringw")]
            internal static extern void OperatorPlus_8(global::System.IntPtr @return, global::System.IntPtr @string, char ch);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplcRK8wxString")]
            internal static extern void OperatorPlus_9(global::System.IntPtr @return, sbyte ch, global::System.IntPtr @string);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZplwRK8wxString")]
            internal static extern void OperatorPlus_10(global::System.IntPtr @return, char ch, global::System.IntPtr @string);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqPKwRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZnePKwRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgePKwRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZlePKwRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgtPKwRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZltPKwRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_0(global::System.IntPtr x, global::System.IntPtr y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK8wxStringPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK8wxStringPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgeRK8wxStringPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZleRK8wxStringPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgtRK8wxStringPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZltRK8wxStringPKw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_1(global::System.IntPtr y, global::System.IntPtr x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK8wxStringS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_2(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK8wxStringS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_2(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZltRK8wxStringS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLess_2(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgtRK8wxStringS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreater_2(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZleRK8wxStringS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorLessEqual_2(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZgeRK8wxStringS1_")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorGreaterEqual_2(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK8wxStringRK10wxCStrData")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_3(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK8wxStringRK10wxCStrData")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_3(global::System.IntPtr s1, global::System.IntPtr s2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqcRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_4(sbyte c, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqwRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_5(char c, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqiRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_6(int c, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK8wxStringRK9wxUniChar")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_7(global::System.IntPtr s, global::System.IntPtr c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK8wxStringRK12wxUniCharRef")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_8(global::System.IntPtr s, global::System.IntPtr c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK8wxStringc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_9(global::System.IntPtr s, sbyte c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZeqRK8wxStringw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorEqualEqual_10(global::System.IntPtr s, char c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZnecRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_4(sbyte c, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZnewRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_5(char c, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneiRK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_6(int c, global::System.IntPtr s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK8wxStringRK9wxUniChar")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_7(global::System.IntPtr s, global::System.IntPtr c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK8wxStringRK12wxUniCharRef")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_8(global::System.IntPtr s, global::System.IntPtr c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK8wxStringc")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_9(global::System.IntPtr s, sbyte c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZneRK8wxStringw")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool OperatorExclaimEqual_10(global::System.IntPtr s, char c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringixEi")]
            internal static extern wxUniCharRef.Internal OperatorSubscript_4(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringixEl")]
            internal static extern wxUniCharRef.Internal OperatorSubscript_5(global::System.IntPtr instance, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringixEm")]
            internal static extern wxUniCharRef.Internal OperatorSubscript_6(global::System.IntPtr instance, uint n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN8wxStringixEj")]
            internal static extern wxUniCharRef.Internal OperatorSubscript_7(global::System.IntPtr instance, uint n);
        }

        public enum caseCompare : uint
        {
            exact = 0,
            ignoreCase = 1
        }

        public enum stripType : uint
        {
            leading = 0x1,
            trailing = 0x2,
            both = 0x3
        }

        public unsafe partial class SubstrBufFromType
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public uint len;
            }
        }

        public unsafe partial class iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8wxString8iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8wxString8iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8wxString8iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8wxString8iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratormiERKS0_")]
                internal static extern int OperatorMinus_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorltERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLess_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorgtERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreater_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorleERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLessEqual_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorgeERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorplEi")]
                internal static extern void OperatorPlus_0(global::System.IntPtr @return, global::System.IntPtr instance, int n);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratormiEi")]
                internal static extern void OperatorMinus_1(global::System.IntPtr @return, global::System.IntPtr instance, int n);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratoreqERKNS_14const_iteratorE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_1(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorneERKNS_14const_iteratorE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_1(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorltERKNS_14const_iteratorE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLess_1(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorgtERKNS_14const_iteratorE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreater_1(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorleERKNS_14const_iteratorE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLessEqual_1(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorgeERKNS_14const_iteratorE")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreaterEqual_1(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZpliN8wxString8iteratorE")]
                internal static extern void OperatorPlus_1(global::System.IntPtr @return, int n, wxString.iterator.Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString8iteratorixEm")]
                internal static extern wxUniCharRef.Internal OperatorSubscript_0(global::System.IntPtr instance, uint n);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new iterator(native.ToPointer(), skipVTables);
            }

            public static iterator __CreateInstance(iterator.Internal native, bool skipVTables = false)
            {
                return new iterator(native, skipVTables);
            }

            private static void* __CopyValue(iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                wxString.iterator.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private iterator(iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public iterator(wxString.iterator i)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg0 = i.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxString.iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxString.iterator operator ++(wxString.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxString.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxString.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxString.iterator) wxString.iterator.NativeToManagedMap[__ret];
                else __result0 = wxString.iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxString.iterator operator --(wxString.iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxString.iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxString.iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxString.iterator) wxString.iterator.NativeToManagedMap[__ret];
                else __result0 = wxString.iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static int operator -(wxString.iterator __op, wxString.iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorMinus_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxString.iterator __op, wxString.iterator i)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool iNull = ReferenceEquals(i, null);
                if (__opNull || iNull)
                    return __opNull && iNull;
                var arg0 = __op.__Instance;
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(wxString.iterator __op, wxString.iterator i)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool iNull = ReferenceEquals(i, null);
                if (__opNull || iNull)
                    return !(__opNull && iNull);
                var arg0 = __op.__Instance;
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator <(wxString.iterator __op, wxString.iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorLess_0(arg0, arg1);
                return __ret;
            }

            public static bool operator >(wxString.iterator __op, wxString.iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorGreater_0(arg0, arg1);
                return __ret;
            }

            public static bool operator <=(wxString.iterator __op, wxString.iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator >=(wxString.iterator __op, wxString.iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
                return __ret;
            }

            public static wxString.iterator operator +(wxString.iterator __op, int n)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = new wxString.iterator.Internal();
                Internal.OperatorPlus_0(new IntPtr(&__ret), arg0, n);
                return wxString.iterator.__CreateInstance(__ret);
            }

            public static wxString.iterator operator -(wxString.iterator __op, int n)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = new wxString.iterator.Internal();
                Internal.OperatorMinus_1(new IntPtr(&__ret), arg0, n);
                return wxString.iterator.__CreateInstance(__ret);
            }

            public static bool operator ==(wxString.iterator __op, wxString.const_iterator i)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool iNull = ReferenceEquals(i, null);
                if (__opNull || iNull)
                    return __opNull && iNull;
                var arg0 = __op.__Instance;
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorEqualEqual_1(arg0, arg1);
                return __ret;
            }

            public static bool operator !=(wxString.iterator __op, wxString.const_iterator i)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool iNull = ReferenceEquals(i, null);
                if (__opNull || iNull)
                    return !(__opNull && iNull);
                var arg0 = __op.__Instance;
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorExclaimEqual_1(arg0, arg1);
                return __ret;
            }

            public static bool operator <(wxString.iterator __op, wxString.const_iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorLess_1(arg0, arg1);
                return __ret;
            }

            public static bool operator >(wxString.iterator __op, wxString.const_iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorGreater_1(arg0, arg1);
                return __ret;
            }

            public static bool operator <=(wxString.iterator __op, wxString.const_iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorLessEqual_1(arg0, arg1);
                return __ret;
            }

            public static bool operator >=(wxString.iterator __op, wxString.const_iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorGreaterEqual_1(arg0, arg1);
                return __ret;
            }

            public static wxString.iterator operator +(int n, wxString.iterator i)
            {
                var arg1 = ReferenceEquals(i, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (i.__Instance);
                var __ret = new wxString.iterator.Internal();
                Internal.OperatorPlus_1(new IntPtr(&__ret), n, arg1);
                return wxString.iterator.__CreateInstance(__ret);
            }

            public wxUniCharRef this[uint n]
            {
                get
                {
                    var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), n);
                    return wxUniCharRef.__CreateInstance(__ret);
                }
            }
        }

        public unsafe partial class const_iterator : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 4)]
            public partial struct Internal
            {
                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8wxString14const_iteratorC2Ev")]
                internal static extern void ctor_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8wxString14const_iteratorC2ERKS0_")]
                internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8wxString14const_iteratorC2ERKNS_8iteratorE")]
                internal static extern void ctor_2(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8wxString14const_iteratorppEv")]
                internal static extern global::System.IntPtr OperatorPlusPlus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZN8wxString14const_iteratormmEv")]
                internal static extern global::System.IntPtr OperatorMinusMinus_0(global::System.IntPtr instance);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratormiERKS0_")]
                internal static extern int OperatorMinus_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratoreqERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorEqualEqual_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratorneERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorExclaimEqual_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratorltERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLess_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratorgtERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreater_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratorleERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorLessEqual_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratorgeERKS0_")]
                [return: MarshalAsAttribute(UnmanagedType.I1)]
                internal static extern bool OperatorGreaterEqual_0(global::System.IntPtr instance, global::System.IntPtr i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratorplEi")]
                internal static extern void OperatorPlus_0(global::System.IntPtr @return, global::System.IntPtr instance, int n);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratormiEi")]
                internal static extern void OperatorMinus_1(global::System.IntPtr @return, global::System.IntPtr instance, int n);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZpliN8wxString14const_iteratorE")]
                internal static extern void OperatorPlus_1(global::System.IntPtr @return, int n, wxString.const_iterator.Internal i);

                [SuppressUnmanagedCodeSecurity]
                [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                    EntryPoint="_ZNK8wxString14const_iteratorixEm")]
                internal static extern wxUniChar.Internal OperatorSubscript_0(global::System.IntPtr instance, uint n);
            }

            public global::System.IntPtr __Instance { get; protected set; }

            protected int __PointerAdjustment;
            public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_iterator> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, const_iterator>();
            protected void*[] __OriginalVTables;

            protected bool __ownsNativeInstance;

            public static const_iterator __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
            {
                return new const_iterator(native.ToPointer(), skipVTables);
            }

            public static const_iterator __CreateInstance(const_iterator.Internal native, bool skipVTables = false)
            {
                return new const_iterator(native, skipVTables);
            }

            private static void* __CopyValue(const_iterator.Internal native)
            {
                var ret = Marshal.AllocHGlobal(4);
                wxString.const_iterator.Internal.cctor_1(ret, new global::System.IntPtr(&native));
                return ret.ToPointer();
            }

            private const_iterator(const_iterator.Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
            }

            protected const_iterator(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new global::System.IntPtr(native);
            }

            public const_iterator()
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                Internal.ctor_0((__Instance + __PointerAdjustment));
            }

            public const_iterator(wxString.const_iterator i)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg0 = i.__Instance;
                Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            }

            public const_iterator(wxString.iterator i)
            {
                __Instance = Marshal.AllocHGlobal(4);
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg0 = i.__Instance;
                Internal.ctor_2((__Instance + __PointerAdjustment), arg0);
            }

            public void Dispose()
            {
                Dispose(disposing: true);
            }

            protected virtual void Dispose(bool disposing)
            {
                wxString.const_iterator __dummy;
                NativeToManagedMap.TryRemove(__Instance, out __dummy);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
            }

            public static wxString.const_iterator operator ++(wxString.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorPlusPlus_0(arg0);
                wxString.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxString.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxString.const_iterator) wxString.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxString.const_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static wxString.const_iterator operator --(wxString.const_iterator __op)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = Internal.OperatorMinusMinus_0(arg0);
                wxString.const_iterator __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (wxString.const_iterator.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (wxString.const_iterator) wxString.const_iterator.NativeToManagedMap[__ret];
                else __result0 = wxString.const_iterator.__CreateInstance(__ret);
                return __result0;
            }

            public static int operator -(wxString.const_iterator __op, wxString.const_iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorMinus_0(arg0, arg1);
                return __ret;
            }

            public static bool operator ==(wxString.const_iterator __op, wxString.const_iterator i)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool iNull = ReferenceEquals(i, null);
                if (__opNull || iNull)
                    return __opNull && iNull;
                var arg0 = __op.__Instance;
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
                return __ret;
            }

            public override bool Equals(object obj)
            {
                return this == obj as const_iterator;
            }

            public override int GetHashCode()
            {
                if (__Instance == global::System.IntPtr.Zero)
                    return global::System.IntPtr.Zero.GetHashCode();
                return (*(Internal*) __Instance).GetHashCode();
            }

            public static bool operator !=(wxString.const_iterator __op, wxString.const_iterator i)
            {
                bool __opNull = ReferenceEquals(__op, null);
                bool iNull = ReferenceEquals(i, null);
                if (__opNull || iNull)
                    return !(__opNull && iNull);
                var arg0 = __op.__Instance;
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator <(wxString.const_iterator __op, wxString.const_iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorLess_0(arg0, arg1);
                return __ret;
            }

            public static bool operator >(wxString.const_iterator __op, wxString.const_iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorGreater_0(arg0, arg1);
                return __ret;
            }

            public static bool operator <=(wxString.const_iterator __op, wxString.const_iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
                return __ret;
            }

            public static bool operator >=(wxString.const_iterator __op, wxString.const_iterator i)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                if (ReferenceEquals(i, null))
                    throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
                var arg1 = i.__Instance;
                var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
                return __ret;
            }

            public static wxString.const_iterator operator +(wxString.const_iterator __op, int n)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = new wxString.const_iterator.Internal();
                Internal.OperatorPlus_0(new IntPtr(&__ret), arg0, n);
                return wxString.const_iterator.__CreateInstance(__ret);
            }

            public static wxString.const_iterator operator -(wxString.const_iterator __op, int n)
            {
                if (ReferenceEquals(__op, null))
                    throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
                var arg0 = __op.__Instance;
                var __ret = new wxString.const_iterator.Internal();
                Internal.OperatorMinus_1(new IntPtr(&__ret), arg0, n);
                return wxString.const_iterator.__CreateInstance(__ret);
            }

            public static wxString.const_iterator operator +(int n, wxString.const_iterator i)
            {
                var arg1 = ReferenceEquals(i, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (i.__Instance);
                var __ret = new wxString.const_iterator.Internal();
                Internal.OperatorPlus_1(new IntPtr(&__ret), n, arg1);
                return wxString.const_iterator.__CreateInstance(__ret);
            }

            public wxUniChar this[uint n]
            {
                get
                {
                    var __ret = Internal.OperatorSubscript_0((__Instance + __PointerAdjustment), n);
                    return wxUniChar.__CreateInstance(__ret);
                }
            }
        }

        public unsafe partial class reverse_iterator_impl
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }
        }

        public unsafe partial class ConvertedBuffer
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_str;

                [FieldOffset(0)]
                public uint m_len;
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxString> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxString>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxString __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxString(native.ToPointer(), skipVTables);
        }

        public static wxString __CreateInstance(wxString.Internal native, bool skipVTables = false)
        {
            return new wxString(native, skipVTables);
        }

        private static void* __CopyValue(wxString.Internal native)
        {
            var ret = Marshal.AllocHGlobal(20);
            wxString.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxString(wxString.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxString()
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
        }

        public wxString(wxString stringSrc)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(stringSrc, null))
                throw new global::System.ArgumentNullException("stringSrc", "Cannot be null because it is a C++ reference (&).");
            var arg0 = stringSrc.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public wxString(wxUniChar ch, uint nRepeat)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            Internal.ctor_3((__Instance + __PointerAdjustment), arg0, nRepeat);
        }

        public wxString(uint nRepeat, wxUniChar ch)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            Internal.ctor_4((__Instance + __PointerAdjustment), nRepeat, arg1);
        }

        public wxString(wxUniCharRef ch, uint nRepeat)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            Internal.ctor_5((__Instance + __PointerAdjustment), arg0, nRepeat);
        }

        public wxString(uint nRepeat, wxUniCharRef ch)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            Internal.ctor_6((__Instance + __PointerAdjustment), nRepeat, arg1);
        }

        public wxString(sbyte ch, uint nRepeat)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ch;
            Internal.ctor_7((__Instance + __PointerAdjustment), arg0, nRepeat);
        }

        public wxString(uint nRepeat, sbyte ch)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg1 = ch;
            Internal.ctor_8((__Instance + __PointerAdjustment), nRepeat, arg1);
        }

        public wxString(char ch, uint nRepeat)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_9((__Instance + __PointerAdjustment), ch, nRepeat);
        }

        public wxString(uint nRepeat, char ch)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_10((__Instance + __PointerAdjustment), nRepeat, ch);
        }

        public wxString(string psz)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            Internal.ctor_11((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
        }

        public wxString(string psz, wxMBConv conv)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            if (ReferenceEquals(conv, null))
                throw new global::System.ArgumentNullException("conv", "Cannot be null because it is a C++ reference (&).");
            var arg1 = conv.__Instance;
            Internal.ctor_12((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
        }

        public wxString(string psz, uint nLength)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            Internal.ctor_13((__Instance + __PointerAdjustment), arg0, nLength);
            Marshal.FreeHGlobal(arg0);
        }

        public wxString(string psz, wxMBConv conv, uint nLength)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            if (ReferenceEquals(conv, null))
                throw new global::System.ArgumentNullException("conv", "Cannot be null because it is a C++ reference (&).");
            var arg1 = conv.__Instance;
            Internal.ctor_14((__Instance + __PointerAdjustment), arg0, arg1, nLength);
            Marshal.FreeHGlobal(arg0);
        }

        public wxString(byte* psz)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = psz;
            Internal.ctor_15((__Instance + __PointerAdjustment), arg0);
        }

        public wxString(byte* psz, wxMBConv conv)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = psz;
            if (ReferenceEquals(conv, null))
                throw new global::System.ArgumentNullException("conv", "Cannot be null because it is a C++ reference (&).");
            var arg1 = conv.__Instance;
            Internal.ctor_16((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxString(byte* psz, uint nLength)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = psz;
            Internal.ctor_17((__Instance + __PointerAdjustment), arg0, nLength);
        }

        public wxString(byte* psz, wxMBConv conv, uint nLength)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = psz;
            if (ReferenceEquals(conv, null))
                throw new global::System.ArgumentNullException("conv", "Cannot be null because it is a C++ reference (&).");
            var arg1 = conv.__Instance;
            Internal.ctor_18((__Instance + __PointerAdjustment), arg0, arg1, nLength);
        }

        public wxString(wxCStrData cstr)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(cstr, null))
                throw new global::System.ArgumentNullException("cstr", "Cannot be null because it is a C++ reference (&).");
            var arg0 = cstr.__Instance;
            Internal.ctor_25((__Instance + __PointerAdjustment), arg0);
        }

        public wxString(wxCStrData cstr, uint nLength)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(cstr, null))
                throw new global::System.ArgumentNullException("cstr", "Cannot be null because it is a C++ reference (&).");
            var arg0 = cstr.__Instance;
            Internal.ctor_26((__Instance + __PointerAdjustment), arg0, nLength);
        }

        public wxString(wxString str, uint nLength)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            Internal.ctor_27((__Instance + __PointerAdjustment), arg0, nLength);
        }

        public wxString(wxString str, uint nPos, uint nLen)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            Internal.ctor_30((__Instance + __PointerAdjustment), arg0, nPos, nLen);
        }

        public wxString(wxString.const_iterator first, wxString.const_iterator last)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = ReferenceEquals(first, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (last.__Instance);
            Internal.ctor_31((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public wxString(string first, string last)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var arg0 = Marshal.StringToHGlobalAnsi(first);
            var arg1 = Marshal.StringToHGlobalAnsi(last);
            Internal.ctor_32((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
        }

        public wxString(wxCStrData first, wxCStrData last)
        {
            __Instance = Marshal.AllocHGlobal(20);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg1 = last.__Instance;
            Internal.ctor_34((__Instance + __PointerAdjustment), arg0, arg1);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString.iterator GetIterForNthChar(uint n)
        {
            var __ret = new wxString.iterator.Internal();
            Internal.GetIterForNthChar_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), n);
            return wxString.iterator.__CreateInstance(__ret);
        }

        public int IterOffsetInMBStr(wxString.const_iterator i)
        {
            if (ReferenceEquals(i, null))
                throw new global::System.ArgumentNullException("i", "Cannot be null because it is a C++ reference (&).");
            var arg0 = i.__Instance;
            var __ret = Internal.IterOffsetInMBStr_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public string ToStdWstring()
        {
            var __ret = Internal.ToStdWstring_0((__Instance + __PointerAdjustment));
            return ;
        }

        public wxString Clone()
        {
            var __ret = new wxString.Internal();
            Internal.Clone_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString.iterator begin()
        {
            var __ret = new wxString.iterator.Internal();
            Internal.begin_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.iterator.__CreateInstance(__ret);
        }

        public wxString.iterator end()
        {
            var __ret = new wxString.iterator.Internal();
            Internal.end_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.iterator.__CreateInstance(__ret);
        }

        public uint length()
        {
            var __ret = Internal.length_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint size()
        {
            var __ret = Internal.size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint max_size()
        {
            var __ret = Internal.max_size_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool empty()
        {
            var __ret = Internal.empty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public uint capacity()
        {
            var __ret = Internal.capacity_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public void reserve(uint sz)
        {
            Internal.reserve_0((__Instance + __PointerAdjustment), sz);
        }

        public void resize(uint nSize, wxUniChar ch)
        {
            var arg1 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            Internal.resize_0((__Instance + __PointerAdjustment), nSize, arg1);
        }

        public wxString substr(uint nStart, uint nLen)
        {
            var __ret = new wxString.Internal();
            Internal.substr_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), nStart, nLen);
            return wxString.__CreateInstance(__ret);
        }

        public uint Len()
        {
            var __ret = Internal.Len_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsEmpty()
        {
            var __ret = Internal.IsEmpty_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public static bool operator !(wxString __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorExclaim_0(arg0);
            return __ret;
        }

        public wxString Truncate(uint uiLen)
        {
            var __ret = Internal.Truncate_0((__Instance + __PointerAdjustment), uiLen);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public void Empty()
        {
            Internal.Empty_0((__Instance + __PointerAdjustment));
        }

        public void Clear()
        {
            Internal.Clear_0((__Instance + __PointerAdjustment));
        }

        public bool IsAscii()
        {
            var __ret = Internal.IsAscii_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsNumber()
        {
            var __ret = Internal.IsNumber_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool IsWord()
        {
            var __ret = Internal.IsWord_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxUniChar GetChar(uint n)
        {
            var __ret = Internal.GetChar_0((__Instance + __PointerAdjustment), n);
            return wxUniChar.__CreateInstance(__ret);
        }

        public wxUniCharRef at(uint n)
        {
            var __ret = Internal.at_1((__Instance + __PointerAdjustment), n);
            return wxUniCharRef.__CreateInstance(__ret);
        }

        public wxUniCharRef GetWritableChar(uint n)
        {
            var __ret = Internal.GetWritableChar_0((__Instance + __PointerAdjustment), n);
            return wxUniCharRef.__CreateInstance(__ret);
        }

        public void SetChar(uint n, wxUniChar ch)
        {
            var arg1 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            Internal.SetChar_0((__Instance + __PointerAdjustment), n, arg1);
        }

        public wxUniCharRef Last()
        {
            var __ret = Internal.Last_1((__Instance + __PointerAdjustment));
            return wxUniCharRef.__CreateInstance(__ret);
        }

        public wxCStrData c_str()
        {
            var __ret = new wxCStrData.Internal();
            Internal.c_str_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxCStrData.__CreateInstance(__ret);
        }

        public wxCStrData data()
        {
            var __ret = new wxCStrData.Internal();
            Internal.data_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxCStrData.__CreateInstance(__ret);
        }

        public static implicit operator wxCStrData(wxString __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = new wxCStrData.Internal();
            Internal.OperatorConversion_0(new IntPtr(&__ret), arg0);
            return wxCStrData.__CreateInstance(__ret);
        }

        public static implicit operator string(wxString __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_1(arg0);
            return Marshal.PtrToStringAnsi(__ret);
        }

        public static implicit operator string(wxString __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_2(arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public static implicit operator global::System.IntPtr(wxString __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorConversion_3(arg0);
            return __ret;
        }

        public wxCStrData GetData()
        {
            var __ret = new wxCStrData.Internal();
            Internal.GetData_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxCStrData.__CreateInstance(__ret);
        }

        public string wx_str()
        {
            var __ret = Internal.wx_str_0((__Instance + __PointerAdjustment));
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public wxCharBuffer mbc_str()
        {
            var __ret = new wxCharBuffer.Internal();
            Internal.mbc_str_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxCharBuffer.__CreateInstance(__ret);
        }

        public string wc_str()
        {
            var __ret = Internal.wc_str_0((__Instance + __PointerAdjustment));
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public string wc_str(wxMBConv _0)
        {
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            var __ret = Internal.wc_str_1((__Instance + __PointerAdjustment), arg0);
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public string t_str()
        {
            var __ret = Internal.t_str_0((__Instance + __PointerAdjustment));
            return CppSharp.Runtime.Helpers.MarshalEncodedString(__ret, System.Text.Encoding.UTF32);
        }

        public wxString Append(wxString s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.Append_0((__Instance + __PointerAdjustment), arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append(string psz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            var __ret = Internal.Append_1((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append1(string pwz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(pwz);
            var __ret = Internal.Append1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append(wxCStrData psz)
        {
            if (ReferenceEquals(psz, null))
                throw new global::System.ArgumentNullException("psz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = psz.__Instance;
            var __ret = Internal.Append_2((__Instance + __PointerAdjustment), arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append(string psz, uint nLen)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            var __ret = Internal.Append_5((__Instance + __PointerAdjustment), arg0, nLen);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append1(string pwz, uint nLen)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(pwz);
            var __ret = Internal.Append1_1((__Instance + __PointerAdjustment), arg0, nLen);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append(wxCStrData psz, uint nLen)
        {
            if (ReferenceEquals(psz, null))
                throw new global::System.ArgumentNullException("psz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = psz.__Instance;
            var __ret = Internal.Append_6((__Instance + __PointerAdjustment), arg0, nLen);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append(wxUniChar ch, uint count)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.Append_9((__Instance + __PointerAdjustment), arg0, count);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append(wxUniCharRef ch, uint count)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.Append_10((__Instance + __PointerAdjustment), arg0, count);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append(sbyte ch, uint count)
        {
            var arg0 = ch;
            var __ret = Internal.Append_11((__Instance + __PointerAdjustment), arg0, count);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append(byte ch, uint count)
        {
            var __ret = Internal.Append_12((__Instance + __PointerAdjustment), ch, count);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Append(char ch, uint count)
        {
            var __ret = Internal.Append_13((__Instance + __PointerAdjustment), ch, count);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Prepend(wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.Prepend_0((__Instance + __PointerAdjustment), arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public static wxString operator <<(wxString __op, int i)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var arg0 = __op.__Instance;
            var __ret = Internal.OperatorLessLess_11(arg0, i);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public int Cmp(string psz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            var __ret = Internal.Cmp_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public int Cmp1(string pwz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(pwz);
            var __ret = Internal.Cmp1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public int Cmp(wxString s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.Cmp_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int Cmp(wxCStrData s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.Cmp_2((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int CmpNoCase(wxString s)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.CmpNoCase_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsSameAs(wxString str, bool compareWithCase)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.IsSameAs_0((__Instance + __PointerAdjustment), arg0, compareWithCase);
            return __ret;
        }

        public bool IsSameAs(string str, bool compareWithCase)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(str);
            var __ret = Internal.IsSameAs_1((__Instance + __PointerAdjustment), arg0, compareWithCase);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public bool IsSameAs1(string str, bool compareWithCase)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(str);
            var __ret = Internal.IsSameAs1_0((__Instance + __PointerAdjustment), arg0, compareWithCase);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public bool IsSameAs(wxCStrData str, bool compareWithCase)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.IsSameAs_2((__Instance + __PointerAdjustment), arg0, compareWithCase);
            return __ret;
        }

        public bool IsSameAs(wxUniChar c, bool compareWithCase)
        {
            var arg0 = ReferenceEquals(c, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (c.__Instance);
            var __ret = Internal.IsSameAs_5((__Instance + __PointerAdjustment), arg0, compareWithCase);
            return __ret;
        }

        public bool IsSameAs(wxUniCharRef c, bool compareWithCase)
        {
            var arg0 = ReferenceEquals(c, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (c.__Instance);
            var __ret = Internal.IsSameAs_6((__Instance + __PointerAdjustment), arg0, compareWithCase);
            return __ret;
        }

        public bool IsSameAs(sbyte c, bool compareWithCase)
        {
            var arg0 = c;
            var __ret = Internal.IsSameAs_7((__Instance + __PointerAdjustment), arg0, compareWithCase);
            return __ret;
        }

        public bool IsSameAs(byte c, bool compareWithCase)
        {
            var __ret = Internal.IsSameAs_8((__Instance + __PointerAdjustment), c, compareWithCase);
            return __ret;
        }

        public bool IsSameAs(char c, bool compareWithCase)
        {
            var __ret = Internal.IsSameAs_9((__Instance + __PointerAdjustment), c, compareWithCase);
            return __ret;
        }

        public bool IsSameAs(int c, bool compareWithCase)
        {
            var __ret = Internal.IsSameAs_10((__Instance + __PointerAdjustment), c, compareWithCase);
            return __ret;
        }

        public wxString Mid(uint nFirst, uint nCount)
        {
            var __ret = new wxString.Internal();
            Internal.Mid_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), nFirst, nCount);
            return wxString.__CreateInstance(__ret);
        }

        public bool StartsWith(wxString prefix, wxString rest)
        {
            if (ReferenceEquals(prefix, null))
                throw new global::System.ArgumentNullException("prefix", "Cannot be null because it is a C++ reference (&).");
            var arg0 = prefix.__Instance;
            var arg1 = ReferenceEquals(rest, null) ? global::System.IntPtr.Zero : rest.__Instance;
            var __ret = Internal.StartsWith_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool EndsWith(wxString suffix, wxString rest)
        {
            if (ReferenceEquals(suffix, null))
                throw new global::System.ArgumentNullException("suffix", "Cannot be null because it is a C++ reference (&).");
            var arg0 = suffix.__Instance;
            var arg1 = ReferenceEquals(rest, null) ? global::System.IntPtr.Zero : rest.__Instance;
            var __ret = Internal.EndsWith_0((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public wxString Left(uint nCount)
        {
            var __ret = new wxString.Internal();
            Internal.Left_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), nCount);
            return wxString.__CreateInstance(__ret);
        }

        public wxString Right(uint nCount)
        {
            var __ret = new wxString.Internal();
            Internal.Right_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), nCount);
            return wxString.__CreateInstance(__ret);
        }

        public wxString BeforeFirst(wxUniChar ch, wxString rest)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var arg1 = ReferenceEquals(rest, null) ? global::System.IntPtr.Zero : rest.__Instance;
            var __ret = new wxString.Internal();
            Internal.BeforeFirst_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public wxString BeforeLast(wxUniChar ch, wxString rest)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var arg1 = ReferenceEquals(rest, null) ? global::System.IntPtr.Zero : rest.__Instance;
            var __ret = new wxString.Internal();
            Internal.BeforeLast_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public wxString AfterFirst(wxUniChar ch)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = new wxString.Internal();
            Internal.AfterFirst_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public wxString AfterLast(wxUniChar ch)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = new wxString.Internal();
            Internal.AfterLast_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public wxString Before(wxUniChar ch)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = new wxString.Internal();
            Internal.Before_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public wxString After(wxUniChar ch)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = new wxString.Internal();
            Internal.After_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public wxString MakeUpper()
        {
            var __ret = Internal.MakeUpper_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Upper()
        {
            var __ret = new wxString.Internal();
            Internal.Upper_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString MakeLower()
        {
            var __ret = Internal.MakeLower_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Lower()
        {
            var __ret = new wxString.Internal();
            Internal.Lower_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString MakeCapitalized()
        {
            var __ret = Internal.MakeCapitalized_0((__Instance + __PointerAdjustment));
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Capitalize()
        {
            var __ret = new wxString.Internal();
            Internal.Capitalize_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString Trim(bool bFromRight)
        {
            var __ret = Internal.Trim_0((__Instance + __PointerAdjustment), bFromRight);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Pad(uint nCount, wxUniChar chPad, bool bFromRight)
        {
            var arg1 = ReferenceEquals(chPad, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (chPad.__Instance);
            var __ret = Internal.Pad_0((__Instance + __PointerAdjustment), nCount, arg1, bFromRight);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public int Find(wxUniChar ch, bool bFromEnd)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.Find_0((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        public int Find(wxUniCharRef ch, bool bFromEnd)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.Find_1((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        public int Find(sbyte ch, bool bFromEnd)
        {
            var arg0 = ch;
            var __ret = Internal.Find_2((__Instance + __PointerAdjustment), arg0, bFromEnd);
            return __ret;
        }

        public int Find(byte ch, bool bFromEnd)
        {
            var __ret = Internal.Find_3((__Instance + __PointerAdjustment), ch, bFromEnd);
            return __ret;
        }

        public int Find(char ch, bool bFromEnd)
        {
            var __ret = Internal.Find_4((__Instance + __PointerAdjustment), ch, bFromEnd);
            return __ret;
        }

        public int Find(wxString sub)
        {
            if (ReferenceEquals(sub, null))
                throw new global::System.ArgumentNullException("sub", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sub.__Instance;
            var __ret = Internal.Find_5((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int Find(string sub)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sub);
            var __ret = Internal.Find_6((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public int Find1(string sub)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sub);
            var __ret = Internal.Find1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public int Find(wxCStrData sub)
        {
            if (ReferenceEquals(sub, null))
                throw new global::System.ArgumentNullException("sub", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sub.__Instance;
            var __ret = Internal.Find_7((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public uint Replace(wxString strOld, wxString strNew, bool bReplaceAll)
        {
            if (ReferenceEquals(strOld, null))
                throw new global::System.ArgumentNullException("strOld", "Cannot be null because it is a C++ reference (&).");
            var arg0 = strOld.__Instance;
            if (ReferenceEquals(strNew, null))
                throw new global::System.ArgumentNullException("strNew", "Cannot be null because it is a C++ reference (&).");
            var arg1 = strNew.__Instance;
            var __ret = Internal.Replace_0((__Instance + __PointerAdjustment), arg0, arg1, bReplaceAll);
            return __ret;
        }

        public bool Matches(wxString mask)
        {
            if (ReferenceEquals(mask, null))
                throw new global::System.ArgumentNullException("mask", "Cannot be null because it is a C++ reference (&).");
            var arg0 = mask.__Instance;
            var __ret = Internal.Matches_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool ToLong(ref int val, int @base)
        {
            fixed (int* __refParamPtr0 = &val)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.ToLong_0((__Instance + __PointerAdjustment), arg0, @base);
                return __ret;
            }
        }

        public bool ToULong(ref uint val, int @base)
        {
            fixed (uint* __refParamPtr0 = &val)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.ToULong_0((__Instance + __PointerAdjustment), arg0, @base);
                return __ret;
            }
        }

        public bool ToLongLong(ref long val, int @base)
        {
            fixed (long* __refParamPtr0 = &val)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.ToLongLong_0((__Instance + __PointerAdjustment), arg0, @base);
                return __ret;
            }
        }

        public bool ToULongLong(ref ulong val, int @base)
        {
            fixed (ulong* __refParamPtr0 = &val)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.ToULongLong_0((__Instance + __PointerAdjustment), arg0, @base);
                return __ret;
            }
        }

        public bool ToDouble(ref double val)
        {
            fixed (double* __refParamPtr0 = &val)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.ToDouble_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public bool ToCLong(ref int val, int @base)
        {
            fixed (int* __refParamPtr0 = &val)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.ToCLong_0((__Instance + __PointerAdjustment), arg0, @base);
                return __ret;
            }
        }

        public bool ToCULong(ref uint val, int @base)
        {
            fixed (uint* __refParamPtr0 = &val)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.ToCULong_0((__Instance + __PointerAdjustment), arg0, @base);
                return __ret;
            }
        }

        public bool ToCDouble(ref double val)
        {
            fixed (double* __refParamPtr0 = &val)
            {
                var arg0 = __refParamPtr0;
                var __ret = Internal.ToCDouble_0((__Instance + __PointerAdjustment), arg0);
                return __ret;
            }
        }

        public int Printf(wxFormatString f1)
        {
            if (ReferenceEquals(f1, null))
                throw new global::System.ArgumentNullException("f1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = f1.__Instance;
            var __ret = Internal.Printf_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Alloc(uint nLen)
        {
            var __ret = Internal.Alloc_0((__Instance + __PointerAdjustment), nLen);
            return __ret;
        }

        public bool Shrink()
        {
            var __ret = Internal.Shrink_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString SubString(uint from, uint to)
        {
            var __ret = new wxString.Internal();
            Internal.SubString_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), from, to);
            return wxString.__CreateInstance(__ret);
        }

        public int sprintf(wxFormatString f1)
        {
            if (ReferenceEquals(f1, null))
                throw new global::System.ArgumentNullException("f1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = f1.__Instance;
            var __ret = Internal.sprintf_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int CompareTo(string psz, wxString.caseCompare cmp)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            var arg1 = cmp;
            var __ret = Internal.CompareTo_0((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint Length()
        {
            var __ret = Internal.Length_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public int Freq(wxUniChar ch)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.Freq_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public void LowerCase()
        {
            Internal.LowerCase_0((__Instance + __PointerAdjustment));
        }

        public void UpperCase()
        {
            Internal.UpperCase_0((__Instance + __PointerAdjustment));
        }

        public wxString Strip(wxString.stripType w)
        {
            var arg0 = w;
            var __ret = new wxString.Internal();
            Internal.Strip_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public uint Index(string psz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            var __ret = Internal.Index_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint Index(wxUniChar ch)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.Index_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxString Remove(uint pos)
        {
            var __ret = Internal.Remove_0((__Instance + __PointerAdjustment), pos);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString RemoveLast(uint n)
        {
            var __ret = Internal.RemoveLast_0((__Instance + __PointerAdjustment), n);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString Remove(uint nStart, uint nLen)
        {
            var __ret = Internal.Remove_1((__Instance + __PointerAdjustment), nStart, nLen);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public int First(wxUniChar ch)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.First_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int First(wxUniCharRef ch)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.First_1((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int First(sbyte ch)
        {
            var arg0 = ch;
            var __ret = Internal.First_2((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int First(byte ch)
        {
            var __ret = Internal.First_3((__Instance + __PointerAdjustment), ch);
            return __ret;
        }

        public int First(char ch)
        {
            var __ret = Internal.First_4((__Instance + __PointerAdjustment), ch);
            return __ret;
        }

        public int First(wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.First_5((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int Last(wxUniChar ch)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.Last_2((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool Contains(wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.Contains_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool IsNull()
        {
            var __ret = Internal.IsNull_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public wxString append(wxString str, uint pos, uint n)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.append_0((__Instance + __PointerAdjustment), arg0, pos, n);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.append_1((__Instance + __PointerAdjustment), arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(string sz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.append_2((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append1(string sz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.append1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(string sz, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.append_3((__Instance + __PointerAdjustment), arg0, n);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append1(string sz, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.append1_1((__Instance + __PointerAdjustment), arg0, n);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(wxCStrData str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.append_4((__Instance + __PointerAdjustment), arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(wxCStrData str, uint n)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.append_7((__Instance + __PointerAdjustment), arg0, n);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(uint n, wxUniChar ch)
        {
            var arg1 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.append_10((__Instance + __PointerAdjustment), n, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(uint n, wxUniCharRef ch)
        {
            var arg1 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.append_11((__Instance + __PointerAdjustment), n, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(uint n, sbyte ch)
        {
            var arg1 = ch;
            var __ret = Internal.append_12((__Instance + __PointerAdjustment), n, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(uint n, byte ch)
        {
            var __ret = Internal.append_13((__Instance + __PointerAdjustment), n, ch);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(uint n, char ch)
        {
            var __ret = Internal.append_14((__Instance + __PointerAdjustment), n, ch);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(wxString.const_iterator first, wxString.const_iterator last)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (last.__Instance);
            var __ret = Internal.append_15((__Instance + __PointerAdjustment), arg0, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(string first, string last)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(first);
            var arg1 = Marshal.StringToHGlobalAnsi(last);
            var __ret = Internal.append_16((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append1(string first, string last)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(first);
            var arg1 = Marshal.StringToHGlobalAnsi(last);
            var __ret = Internal.append1_2((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString append(wxCStrData first, wxCStrData last)
        {
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg1 = last.__Instance;
            var __ret = Internal.append_17((__Instance + __PointerAdjustment), arg0, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.assign_0((__Instance + __PointerAdjustment), arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(wxString str, uint len)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.assign_1((__Instance + __PointerAdjustment), arg0, len);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(wxString str, uint pos, uint n)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.assign_2((__Instance + __PointerAdjustment), arg0, pos, n);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(string sz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.assign_3((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign1(string sz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.assign1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(string sz, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.assign_4((__Instance + __PointerAdjustment), arg0, n);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign1(string sz, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.assign1_1((__Instance + __PointerAdjustment), arg0, n);
            Marshal.FreeHGlobal(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(wxCStrData str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.assign_5((__Instance + __PointerAdjustment), arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(wxCStrData str, uint len)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.assign_8((__Instance + __PointerAdjustment), arg0, len);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(uint n, wxUniChar ch)
        {
            var arg1 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.assign_11((__Instance + __PointerAdjustment), n, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(uint n, wxUniCharRef ch)
        {
            var arg1 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.assign_12((__Instance + __PointerAdjustment), n, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(uint n, sbyte ch)
        {
            var arg1 = ch;
            var __ret = Internal.assign_13((__Instance + __PointerAdjustment), n, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(uint n, byte ch)
        {
            var __ret = Internal.assign_14((__Instance + __PointerAdjustment), n, ch);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(uint n, char ch)
        {
            var __ret = Internal.assign_15((__Instance + __PointerAdjustment), n, ch);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(wxString.const_iterator first, wxString.const_iterator last)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (last.__Instance);
            var __ret = Internal.assign_16((__Instance + __PointerAdjustment), arg0, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(string first, string last)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(first);
            var arg1 = Marshal.StringToHGlobalAnsi(last);
            var __ret = Internal.assign_17((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign1(string first, string last)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(first);
            var arg1 = Marshal.StringToHGlobalAnsi(last);
            var __ret = Internal.assign1_2((__Instance + __PointerAdjustment), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            Marshal.FreeHGlobal(arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString assign(wxCStrData first, wxCStrData last)
        {
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg0 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg1 = last.__Instance;
            var __ret = Internal.assign_18((__Instance + __PointerAdjustment), arg0, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public int compare(wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.compare_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int compare(string sz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.compare_1((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public int compare1(string sz)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.compare1_0((__Instance + __PointerAdjustment), arg0);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public int compare(wxCStrData str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.compare_2((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public int compare(uint nStart, uint nLen, wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg2 = str.__Instance;
            var __ret = Internal.compare_5((__Instance + __PointerAdjustment), nStart, nLen, arg2);
            return __ret;
        }

        public int compare(uint nStart, uint nLen, wxString str, uint nStart2, uint nLen2)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg2 = str.__Instance;
            var __ret = Internal.compare_6((__Instance + __PointerAdjustment), nStart, nLen, arg2, nStart2, nLen2);
            return __ret;
        }

        public int compare(uint nStart, uint nLen, string sz, uint nCount)
        {
            var arg2 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.compare_7((__Instance + __PointerAdjustment), nStart, nLen, arg2, nCount);
            Marshal.FreeHGlobal(arg2);
            return __ret;
        }

        public int compare1(uint nStart, uint nLen, string sz, uint nCount)
        {
            var arg2 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.compare1_1((__Instance + __PointerAdjustment), nStart, nLen, arg2, nCount);
            Marshal.FreeHGlobal(arg2);
            return __ret;
        }

        public wxString insert(uint nPos, wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg1 = str.__Instance;
            var __ret = Internal.insert_0((__Instance + __PointerAdjustment), nPos, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString insert(uint nPos, wxString str, uint nStart, uint n)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg1 = str.__Instance;
            var __ret = Internal.insert_1((__Instance + __PointerAdjustment), nPos, arg1, nStart, n);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString insert(uint nPos, string sz)
        {
            var arg1 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.insert_2((__Instance + __PointerAdjustment), nPos, arg1);
            Marshal.FreeHGlobal(arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString insert1(uint nPos, string sz)
        {
            var arg1 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.insert1_0((__Instance + __PointerAdjustment), nPos, arg1);
            Marshal.FreeHGlobal(arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString insert(uint nPos, string sz, uint n)
        {
            var arg1 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.insert_3((__Instance + __PointerAdjustment), nPos, arg1, n);
            Marshal.FreeHGlobal(arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString insert1(uint nPos, string sz, uint n)
        {
            var arg1 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.insert1_1((__Instance + __PointerAdjustment), nPos, arg1, n);
            Marshal.FreeHGlobal(arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString insert(uint nPos, uint n, wxUniChar ch)
        {
            var arg2 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.insert_4((__Instance + __PointerAdjustment), nPos, n, arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString.iterator insert(wxString.iterator it, wxUniChar ch)
        {
            var arg0 = ReferenceEquals(it, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (it.__Instance);
            var arg1 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = new wxString.iterator.Internal();
            Internal.insert_5(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            return wxString.iterator.__CreateInstance(__ret);
        }

        public void insert(wxString.iterator it, wxString.const_iterator first, wxString.const_iterator last)
        {
            var arg0 = ReferenceEquals(it, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (it.__Instance);
            var arg1 = ReferenceEquals(first, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (first.__Instance);
            var arg2 = ReferenceEquals(last, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (last.__Instance);
            Internal.insert_6((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public void insert(wxString.iterator it, string first, string last)
        {
            var arg0 = ReferenceEquals(it, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (it.__Instance);
            var arg1 = Marshal.StringToHGlobalAnsi(first);
            var arg2 = Marshal.StringToHGlobalAnsi(last);
            Internal.insert_7((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
        }

        public void insert1(wxString.iterator it, string first, string last)
        {
            var arg0 = ReferenceEquals(it, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (it.__Instance);
            var arg1 = Marshal.StringToHGlobalAnsi(first);
            var arg2 = Marshal.StringToHGlobalAnsi(last);
            Internal.insert1_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg1);
            Marshal.FreeHGlobal(arg2);
        }

        public void insert(wxString.iterator it, wxCStrData first, wxCStrData last)
        {
            var arg0 = ReferenceEquals(it, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (it.__Instance);
            if (ReferenceEquals(first, null))
                throw new global::System.ArgumentNullException("first", "Cannot be null because it is a C++ reference (&).");
            var arg1 = first.__Instance;
            if (ReferenceEquals(last, null))
                throw new global::System.ArgumentNullException("last", "Cannot be null because it is a C++ reference (&).");
            var arg2 = last.__Instance;
            Internal.insert_8((__Instance + __PointerAdjustment), arg0, arg1, arg2);
        }

        public void insert(wxString.iterator it, uint n, wxUniChar ch)
        {
            var arg0 = ReferenceEquals(it, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (it.__Instance);
            var arg2 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            Internal.insert_9((__Instance + __PointerAdjustment), arg0, n, arg2);
        }

        public wxString erase(uint pos, uint n)
        {
            var __ret = Internal.erase_0((__Instance + __PointerAdjustment), pos, n);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString.iterator erase(wxString.iterator first, wxString.iterator last)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            var __ret = new wxString.iterator.Internal();
            Internal.erase_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            return wxString.iterator.__CreateInstance(__ret);
        }

        public wxString.iterator erase(wxString.iterator first)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var __ret = new wxString.iterator.Internal();
            Internal.erase_2(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxString.iterator.__CreateInstance(__ret);
        }

        public void clear()
        {
            Internal.clear_0((__Instance + __PointerAdjustment));
        }

        public wxString replace(uint nStart, uint nLen, string sz)
        {
            var arg2 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.replace_0((__Instance + __PointerAdjustment), nStart, nLen, arg2);
            Marshal.FreeHGlobal(arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace1(uint nStart, uint nLen, string sz)
        {
            var arg2 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.replace1_0((__Instance + __PointerAdjustment), nStart, nLen, arg2);
            Marshal.FreeHGlobal(arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(uint nStart, uint nLen, wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg2 = str.__Instance;
            var __ret = Internal.replace_1((__Instance + __PointerAdjustment), nStart, nLen, arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(uint nStart, uint nLen, uint nCount, wxUniChar ch)
        {
            var arg3 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.replace_2((__Instance + __PointerAdjustment), nStart, nLen, nCount, arg3);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(uint nStart, uint nLen, wxString str, uint nStart2, uint nLen2)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg2 = str.__Instance;
            var __ret = Internal.replace_3((__Instance + __PointerAdjustment), nStart, nLen, arg2, nStart2, nLen2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(uint nStart, uint nLen, string sz, uint nCount)
        {
            var arg2 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.replace_4((__Instance + __PointerAdjustment), nStart, nLen, arg2, nCount);
            Marshal.FreeHGlobal(arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace1(uint nStart, uint nLen, string sz, uint nCount)
        {
            var arg2 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.replace1_1((__Instance + __PointerAdjustment), nStart, nLen, arg2, nCount);
            Marshal.FreeHGlobal(arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(uint nStart, uint nLen, wxString s, uint nCount)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg2 = s.__Instance;
            var __ret = Internal.replace_5((__Instance + __PointerAdjustment), nStart, nLen, arg2, nCount);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(wxString.iterator first, wxString.iterator last, string s)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            var arg2 = Marshal.StringToHGlobalAnsi(s);
            var __ret = Internal.replace_6((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace1(wxString.iterator first, wxString.iterator last, string s)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            var arg2 = Marshal.StringToHGlobalAnsi(s);
            var __ret = Internal.replace1_2((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            Marshal.FreeHGlobal(arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(wxString.iterator first, wxString.iterator last, string s, uint n)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            var arg2 = Marshal.StringToHGlobalAnsi(s);
            var __ret = Internal.replace_7((__Instance + __PointerAdjustment), arg0, arg1, arg2, n);
            Marshal.FreeHGlobal(arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace1(wxString.iterator first, wxString.iterator last, string s, uint n)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            var arg2 = Marshal.StringToHGlobalAnsi(s);
            var __ret = Internal.replace1_3((__Instance + __PointerAdjustment), arg0, arg1, arg2, n);
            Marshal.FreeHGlobal(arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(wxString.iterator first, wxString.iterator last, wxString s)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg2 = s.__Instance;
            var __ret = Internal.replace_8((__Instance + __PointerAdjustment), arg0, arg1, arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(wxString.iterator first, wxString.iterator last, uint n, wxUniChar ch)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            var arg3 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.replace_9((__Instance + __PointerAdjustment), arg0, arg1, n, arg3);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(wxString.iterator first, wxString.iterator last, wxString.const_iterator first1, wxString.const_iterator last1)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            var arg2 = ReferenceEquals(first1, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (first1.__Instance);
            var arg3 = ReferenceEquals(last1, null) ? new wxString.const_iterator.Internal() : *(wxString.const_iterator.Internal*) (last1.__Instance);
            var __ret = Internal.replace_10((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace(wxString.iterator first, wxString.iterator last, string first1, string last1)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            var arg2 = Marshal.StringToHGlobalAnsi(first1);
            var arg3 = Marshal.StringToHGlobalAnsi(last1);
            var __ret = Internal.replace_11((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString replace1(wxString.iterator first, wxString.iterator last, string first1, string last1)
        {
            var arg0 = ReferenceEquals(first, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (first.__Instance);
            var arg1 = ReferenceEquals(last, null) ? new wxString.iterator.Internal() : *(wxString.iterator.Internal*) (last.__Instance);
            var arg2 = Marshal.StringToHGlobalAnsi(first1);
            var arg3 = Marshal.StringToHGlobalAnsi(last1);
            var __ret = Internal.replace1_4((__Instance + __PointerAdjustment), arg0, arg1, arg2, arg3);
            Marshal.FreeHGlobal(arg2);
            Marshal.FreeHGlobal(arg3);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public void swap(wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }

        public uint find(wxString str, uint nStart)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.find_0((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_1((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find1(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find1_0((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find(wxCStrData s, uint nStart, uint n)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.find_4((__Instance + __PointerAdjustment), arg0, nStart, n);
            return __ret;
        }

        public uint find(wxUniChar ch, uint nStart)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.find_5((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find(wxUniCharRef ch, uint nStart)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.find_6((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find(sbyte ch, uint nStart)
        {
            var arg0 = ch;
            var __ret = Internal.find_7((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find(byte ch, uint nStart)
        {
            var __ret = Internal.find_8((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find(char ch, uint nStart)
        {
            var __ret = Internal.find_9((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint rfind(wxString str, uint nStart)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.rfind_0((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint rfind(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.rfind_1((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint rfind1(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.rfind1_0((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint rfind(wxCStrData s, uint nStart, uint n)
        {
            if (ReferenceEquals(s, null))
                throw new global::System.ArgumentNullException("s", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s.__Instance;
            var __ret = Internal.rfind_4((__Instance + __PointerAdjustment), arg0, nStart, n);
            return __ret;
        }

        public uint rfind(wxUniChar ch, uint nStart)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = Internal.rfind_5((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint rfind(wxUniCharRef ch, uint nStart)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.rfind_6((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint rfind(sbyte ch, uint nStart)
        {
            var arg0 = ch;
            var __ret = Internal.rfind_7((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint rfind(byte ch, uint nStart)
        {
            var __ret = Internal.rfind_8((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint rfind(char ch, uint nStart)
        {
            var __ret = Internal.rfind_9((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find_first_of(wxString str, uint nStart)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.find_first_of_0((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_of(string sz, uint nStart)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_first_of_1((__Instance + __PointerAdjustment), arg0, nStart);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_first_of1(string sz, uint nStart)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_first_of1_0((__Instance + __PointerAdjustment), arg0, nStart);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_first_of(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_first_of_2((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_first_of1(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_first_of1_1((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_first_of(wxUniChar c, uint nStart)
        {
            var arg0 = ReferenceEquals(c, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (c.__Instance);
            var __ret = Internal.find_first_of_3((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_of(wxString str, uint nStart)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.find_last_of_0((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_of(string sz, uint nStart)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_last_of_1((__Instance + __PointerAdjustment), arg0, nStart);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_last_of1(string sz, uint nStart)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_last_of1_0((__Instance + __PointerAdjustment), arg0, nStart);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_last_of(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_last_of_2((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_last_of1(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_last_of1_1((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_last_of(wxUniChar c, uint nStart)
        {
            var arg0 = ReferenceEquals(c, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (c.__Instance);
            var __ret = Internal.find_last_of_3((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_not_of(wxString str, uint nStart)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.find_first_not_of_0((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_not_of(string sz, uint nStart)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_first_not_of_1((__Instance + __PointerAdjustment), arg0, nStart);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_first_not_of1(string sz, uint nStart)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_first_not_of1_0((__Instance + __PointerAdjustment), arg0, nStart);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_first_not_of(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_first_not_of_2((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_first_not_of1(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_first_not_of1_1((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_first_not_of(wxUniChar c, uint nStart)
        {
            var arg0 = ReferenceEquals(c, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (c.__Instance);
            var __ret = Internal.find_first_not_of_3((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_not_of(wxString str, uint nStart)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.find_last_not_of_0((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_not_of(string sz, uint nStart)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_last_not_of_1((__Instance + __PointerAdjustment), arg0, nStart);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_last_not_of1(string sz, uint nStart)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_last_not_of1_0((__Instance + __PointerAdjustment), arg0, nStart);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_last_not_of(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_last_not_of_2((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_last_not_of1(string sz, uint nStart, uint n)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(sz);
            var __ret = Internal.find_last_not_of1_1((__Instance + __PointerAdjustment), arg0, nStart, n);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public uint find_last_not_of(wxUniChar c, uint nStart)
        {
            var arg0 = ReferenceEquals(c, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (c.__Instance);
            var __ret = Internal.find_last_not_of_3((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_of(wxUniCharRef ch, uint nStart)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.find_first_of_4((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_of(sbyte ch, uint nStart)
        {
            var arg0 = ch;
            var __ret = Internal.find_first_of_5((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_of(byte ch, uint nStart)
        {
            var __ret = Internal.find_first_of_6((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find_first_of(char ch, uint nStart)
        {
            var __ret = Internal.find_first_of_7((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find_last_of(wxUniCharRef ch, uint nStart)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.find_last_of_4((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_of(sbyte ch, uint nStart)
        {
            var arg0 = ch;
            var __ret = Internal.find_last_of_5((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_of(byte ch, uint nStart)
        {
            var __ret = Internal.find_last_of_6((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find_last_of(char ch, uint nStart)
        {
            var __ret = Internal.find_last_of_7((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find_first_not_of(wxUniCharRef ch, uint nStart)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.find_first_not_of_4((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_not_of(sbyte ch, uint nStart)
        {
            var arg0 = ch;
            var __ret = Internal.find_first_not_of_5((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_not_of(byte ch, uint nStart)
        {
            var __ret = Internal.find_first_not_of_6((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find_first_not_of(char ch, uint nStart)
        {
            var __ret = Internal.find_first_not_of_7((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find_last_not_of(wxUniCharRef ch, uint nStart)
        {
            var arg0 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = Internal.find_last_not_of_4((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_not_of(sbyte ch, uint nStart)
        {
            var arg0 = ch;
            var __ret = Internal.find_last_not_of_5((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_not_of(byte ch, uint nStart)
        {
            var __ret = Internal.find_last_not_of_6((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find_last_not_of(char ch, uint nStart)
        {
            var __ret = Internal.find_last_not_of_7((__Instance + __PointerAdjustment), ch, nStart);
            return __ret;
        }

        public uint find_first_of(wxCStrData sz, uint nStart)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.find_first_of_8((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_of(wxCStrData sz, uint nStart, uint n)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.find_first_of_11((__Instance + __PointerAdjustment), arg0, nStart, n);
            return __ret;
        }

        public uint find_last_of(wxCStrData sz, uint nStart)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.find_last_of_8((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_of(wxCStrData sz, uint nStart, uint n)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.find_last_of_11((__Instance + __PointerAdjustment), arg0, nStart, n);
            return __ret;
        }

        public uint find_first_not_of(wxCStrData sz, uint nStart)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.find_first_not_of_8((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_first_not_of(wxCStrData sz, uint nStart, uint n)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.find_first_not_of_11((__Instance + __PointerAdjustment), arg0, nStart, n);
            return __ret;
        }

        public uint find_last_not_of(wxCStrData sz, uint nStart)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.find_last_not_of_8((__Instance + __PointerAdjustment), arg0, nStart);
            return __ret;
        }

        public uint find_last_not_of(wxCStrData sz, uint nStart, uint n)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.find_last_not_of_11((__Instance + __PointerAdjustment), arg0, nStart, n);
            return __ret;
        }

        public static wxString FromAscii(string ascii, uint len)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(ascii);
            var __ret = new wxString.Internal();
            Internal.FromAscii_0(new IntPtr(&__ret), arg0, len);
            Marshal.FreeHGlobal(arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString FromAscii(string ascii)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(ascii);
            var __ret = new wxString.Internal();
            Internal.FromAscii_1(new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString FromAscii(sbyte ascii)
        {
            var arg0 = ascii;
            var __ret = new wxString.Internal();
            Internal.FromAscii_2(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString FromAscii(byte* ascii)
        {
            var arg0 = ascii;
            var __ret = new wxString.Internal();
            Internal.FromAscii_3(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString FromAscii(byte* ascii, uint len)
        {
            var arg0 = ascii;
            var __ret = new wxString.Internal();
            Internal.FromAscii_4(new IntPtr(&__ret), arg0, len);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString FromUTF8(string utf8, uint len)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(utf8);
            var __ret = new wxString.Internal();
            Internal.FromUTF8_0(new IntPtr(&__ret), arg0, len);
            Marshal.FreeHGlobal(arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString FromUTF8Unchecked(string utf8, uint len)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(utf8);
            var __ret = new wxString.Internal();
            Internal.FromUTF8Unchecked_0(new IntPtr(&__ret), arg0, len);
            Marshal.FreeHGlobal(arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString From8BitData(string data, uint len)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(data);
            var __ret = new wxString.Internal();
            Internal.From8BitData_0(new IntPtr(&__ret), arg0, len);
            Marshal.FreeHGlobal(arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString From8BitData(string data)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(data);
            var __ret = new wxString.Internal();
            Internal.From8BitData_1(new IntPtr(&__ret), arg0);
            Marshal.FreeHGlobal(arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString FromDouble(double val, int precision)
        {
            var __ret = new wxString.Internal();
            Internal.FromDouble_0(new IntPtr(&__ret), val, precision);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString FromCDouble(double val, int precision)
        {
            var __ret = new wxString.Internal();
            Internal.FromCDouble_0(new IntPtr(&__ret), val, precision);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString Format(wxFormatString f1)
        {
            if (ReferenceEquals(f1, null))
                throw new global::System.ArgumentNullException("f1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = f1.__Instance;
            var __ret = new wxString.Internal();
            Internal.Format_0(new IntPtr(&__ret), arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString operator +(wxString string1, wxString string2)
        {
            if (ReferenceEquals(string1, null))
                throw new global::System.ArgumentNullException("string1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = string1.__Instance;
            if (ReferenceEquals(string2, null))
                throw new global::System.ArgumentNullException("string2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = string2.__Instance;
            var __ret = new wxString.Internal();
            Internal.OperatorPlus_0(new IntPtr(&__ret), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString operator +(wxString @string, wxUniChar ch)
        {
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @string.__Instance;
            var arg1 = ReferenceEquals(ch, null) ? new wxUniChar.Internal() : *(wxUniChar.Internal*) (ch.__Instance);
            var __ret = new wxString.Internal();
            Internal.OperatorPlus_1(new IntPtr(&__ret), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString operator +(wxString @string, string psz)
        {
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @string.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(psz);
            var __ret = new wxString.Internal();
            Internal.OperatorPlus_2(new IntPtr(&__ret), arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString operator +(string psz, wxString @string)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(psz);
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var arg1 = @string.__Instance;
            var __ret = new wxString.Internal();
            Internal.OperatorPlus_4(new IntPtr(&__ret), arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString operator +(wxString @string, wxUniCharRef ch)
        {
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @string.__Instance;
            var arg1 = ReferenceEquals(ch, null) ? new wxUniCharRef.Internal() : *(wxUniCharRef.Internal*) (ch.__Instance);
            var __ret = new wxString.Internal();
            Internal.OperatorPlus_6(new IntPtr(&__ret), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString operator +(wxString @string, sbyte ch)
        {
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @string.__Instance;
            var arg1 = ch;
            var __ret = new wxString.Internal();
            Internal.OperatorPlus_7(new IntPtr(&__ret), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString operator +(wxString @string, char ch)
        {
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var arg0 = @string.__Instance;
            var __ret = new wxString.Internal();
            Internal.OperatorPlus_8(new IntPtr(&__ret), arg0, ch);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString operator +(sbyte ch, wxString @string)
        {
            var arg0 = ch;
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var arg1 = @string.__Instance;
            var __ret = new wxString.Internal();
            Internal.OperatorPlus_9(new IntPtr(&__ret), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxString operator +(char ch, wxString @string)
        {
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var arg1 = @string.__Instance;
            var __ret = new wxString.Internal();
            Internal.OperatorPlus_10(new IntPtr(&__ret), ch, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static bool operator ==(string x, wxString y)
        {
            bool xNull = ReferenceEquals(x, null);
            bool yNull = ReferenceEquals(y, null);
            if (xNull || yNull)
                return xNull && yNull;
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorEqualEqual_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator !=(string x, wxString y)
        {
            bool xNull = ReferenceEquals(x, null);
            bool yNull = ReferenceEquals(y, null);
            if (xNull || yNull)
                return !(xNull && yNull);
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorExclaimEqual_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator >=(string x, wxString y)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorGreaterEqual_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator <=(string x, wxString y)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorLessEqual_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator >(string x, wxString y)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorGreater_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator <(string x, wxString y)
        {
            var arg0 = Marshal.StringToHGlobalAnsi(x);
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg1 = y.__Instance;
            var __ret = Internal.OperatorLess_0(arg0, arg1);
            Marshal.FreeHGlobal(arg0);
            return __ret;
        }

        public static bool operator ==(wxString y, string x)
        {
            bool yNull = ReferenceEquals(y, null);
            bool xNull = ReferenceEquals(x, null);
            if (yNull || xNull)
                return yNull && xNull;
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorEqualEqual_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator !=(wxString y, string x)
        {
            bool yNull = ReferenceEquals(y, null);
            bool xNull = ReferenceEquals(x, null);
            if (yNull || xNull)
                return !(yNull && xNull);
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorExclaimEqual_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator >=(wxString y, string x)
        {
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorGreaterEqual_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator <=(wxString y, string x)
        {
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorLessEqual_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator >(wxString y, string x)
        {
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorGreater_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator <(wxString y, string x)
        {
            if (ReferenceEquals(y, null))
                throw new global::System.ArgumentNullException("y", "Cannot be null because it is a C++ reference (&).");
            var arg0 = y.__Instance;
            var arg1 = Marshal.StringToHGlobalAnsi(x);
            var __ret = Internal.OperatorLess_1(arg0, arg1);
            Marshal.FreeHGlobal(arg1);
            return __ret;
        }

        public static bool operator ==(wxString s1, wxString s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return s1Null && s2Null;
            var arg0 = s1.__Instance;
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorEqualEqual_2(arg0, arg1);
            return __ret;
        }

        public override bool Equals(object obj)
        {
            return this == obj as wxString;
        }

        public override int GetHashCode()
        {
            if (__Instance == global::System.IntPtr.Zero)
                return global::System.IntPtr.Zero.GetHashCode();
            return (*(Internal*) __Instance).GetHashCode();
        }

        public static bool operator !=(wxString s1, wxString s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return !(s1Null && s2Null);
            var arg0 = s1.__Instance;
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorExclaimEqual_2(arg0, arg1);
            return __ret;
        }

        public static bool operator <(wxString s1, wxString s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorLess_2(arg0, arg1);
            return __ret;
        }

        public static bool operator >(wxString s1, wxString s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorGreater_2(arg0, arg1);
            return __ret;
        }

        public static bool operator <=(wxString s1, wxString s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorLessEqual_2(arg0, arg1);
            return __ret;
        }

        public static bool operator >=(wxString s1, wxString s2)
        {
            if (ReferenceEquals(s1, null))
                throw new global::System.ArgumentNullException("s1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = s1.__Instance;
            if (ReferenceEquals(s2, null))
                throw new global::System.ArgumentNullException("s2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorGreaterEqual_2(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxString s1, wxCStrData s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return s1Null && s2Null;
            var arg0 = s1.__Instance;
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorEqualEqual_3(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxString s1, wxCStrData s2)
        {
            bool s1Null = ReferenceEquals(s1, null);
            bool s2Null = ReferenceEquals(s2, null);
            if (s1Null || s2Null)
                return !(s1Null && s2Null);
            var arg0 = s1.__Instance;
            var arg1 = s2.__Instance;
            var __ret = Internal.OperatorExclaimEqual_3(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(sbyte c, wxString s)
        {
            bool cNull = ReferenceEquals(c, null);
            bool sNull = ReferenceEquals(s, null);
            if (cNull || sNull)
                return cNull && sNull;
            var arg0 = c;
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorEqualEqual_4(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(char c, wxString s)
        {
            bool cNull = ReferenceEquals(c, null);
            bool sNull = ReferenceEquals(s, null);
            if (cNull || sNull)
                return cNull && sNull;
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorEqualEqual_5(c, arg1);
            return __ret;
        }

        public static bool operator ==(int c, wxString s)
        {
            bool cNull = ReferenceEquals(c, null);
            bool sNull = ReferenceEquals(s, null);
            if (cNull || sNull)
                return cNull && sNull;
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorEqualEqual_6(c, arg1);
            return __ret;
        }

        public static bool operator ==(wxString s, wxUniChar c)
        {
            bool sNull = ReferenceEquals(s, null);
            bool cNull = ReferenceEquals(c, null);
            if (sNull || cNull)
                return sNull && cNull;
            var arg0 = s.__Instance;
            var arg1 = c.__Instance;
            var __ret = Internal.OperatorEqualEqual_7(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxString s, wxUniCharRef c)
        {
            bool sNull = ReferenceEquals(s, null);
            bool cNull = ReferenceEquals(c, null);
            if (sNull || cNull)
                return sNull && cNull;
            var arg0 = s.__Instance;
            var arg1 = c.__Instance;
            var __ret = Internal.OperatorEqualEqual_8(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxString s, sbyte c)
        {
            bool sNull = ReferenceEquals(s, null);
            bool cNull = ReferenceEquals(c, null);
            if (sNull || cNull)
                return sNull && cNull;
            var arg0 = s.__Instance;
            var arg1 = c;
            var __ret = Internal.OperatorEqualEqual_9(arg0, arg1);
            return __ret;
        }

        public static bool operator ==(wxString s, char c)
        {
            bool sNull = ReferenceEquals(s, null);
            bool cNull = ReferenceEquals(c, null);
            if (sNull || cNull)
                return sNull && cNull;
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorEqualEqual_10(arg0, c);
            return __ret;
        }

        public static bool operator !=(sbyte c, wxString s)
        {
            bool cNull = ReferenceEquals(c, null);
            bool sNull = ReferenceEquals(s, null);
            if (cNull || sNull)
                return !(cNull && sNull);
            var arg0 = c;
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorExclaimEqual_4(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(char c, wxString s)
        {
            bool cNull = ReferenceEquals(c, null);
            bool sNull = ReferenceEquals(s, null);
            if (cNull || sNull)
                return !(cNull && sNull);
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorExclaimEqual_5(c, arg1);
            return __ret;
        }

        public static bool operator !=(int c, wxString s)
        {
            bool cNull = ReferenceEquals(c, null);
            bool sNull = ReferenceEquals(s, null);
            if (cNull || sNull)
                return !(cNull && sNull);
            var arg1 = s.__Instance;
            var __ret = Internal.OperatorExclaimEqual_6(c, arg1);
            return __ret;
        }

        public static bool operator !=(wxString s, wxUniChar c)
        {
            bool sNull = ReferenceEquals(s, null);
            bool cNull = ReferenceEquals(c, null);
            if (sNull || cNull)
                return !(sNull && cNull);
            var arg0 = s.__Instance;
            var arg1 = c.__Instance;
            var __ret = Internal.OperatorExclaimEqual_7(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxString s, wxUniCharRef c)
        {
            bool sNull = ReferenceEquals(s, null);
            bool cNull = ReferenceEquals(c, null);
            if (sNull || cNull)
                return !(sNull && cNull);
            var arg0 = s.__Instance;
            var arg1 = c.__Instance;
            var __ret = Internal.OperatorExclaimEqual_8(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxString s, sbyte c)
        {
            bool sNull = ReferenceEquals(s, null);
            bool cNull = ReferenceEquals(c, null);
            if (sNull || cNull)
                return !(sNull && cNull);
            var arg0 = s.__Instance;
            var arg1 = c;
            var __ret = Internal.OperatorExclaimEqual_9(arg0, arg1);
            return __ret;
        }

        public static bool operator !=(wxString s, char c)
        {
            bool sNull = ReferenceEquals(s, null);
            bool cNull = ReferenceEquals(c, null);
            if (sNull || cNull)
                return !(sNull && cNull);
            var arg0 = s.__Instance;
            var __ret = Internal.OperatorExclaimEqual_10(arg0, c);
            return __ret;
        }

        public static uint npos
        {
            get
            {
                var __ptr = (uint*)CppSharp.SymbolResolver.ResolveSymbol("wxSharp", "_ZN8wxString4nposE");
                return *__ptr;
            }
        }

        public wxUniCharRef this[int n]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_4((__Instance + __PointerAdjustment), n);
                return wxUniCharRef.__CreateInstance(__ret);
            }
        }

        public wxUniCharRef this[int n]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_5((__Instance + __PointerAdjustment), n);
                return wxUniCharRef.__CreateInstance(__ret);
            }
        }

        public wxUniCharRef this[uint n]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_6((__Instance + __PointerAdjustment), n);
                return wxUniCharRef.__CreateInstance(__ret);
            }
        }

        public wxUniCharRef this[uint n]
        {
            get
            {
                var __ret = Internal.OperatorSubscript_7((__Instance + __PointerAdjustment), n);
                return wxUniCharRef.__CreateInstance(__ret);
            }
        }
    }

    public unsafe partial class wxStringInternalBuffer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxStringInternalBufferC2ER8wxStringm")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr str, uint lenWanted);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN22wxStringInternalBufferD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringInternalBuffer> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringInternalBuffer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringInternalBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringInternalBuffer(native.ToPointer(), skipVTables);
        }

        public static wxStringInternalBuffer __CreateInstance(wxStringInternalBuffer.Internal native, bool skipVTables = false)
        {
            return new wxStringInternalBuffer(native, skipVTables);
        }

        private static void* __CopyValue(wxStringInternalBuffer.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxStringInternalBuffer.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStringInternalBuffer(wxStringInternalBuffer.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringInternalBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringInternalBuffer(wxString str, uint lenWanted)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, lenWanted);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringInternalBuffer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxStringInternalBufferLength : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN28wxStringInternalBufferLengthC2ER8wxStringm")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr str, uint lenWanted);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN28wxStringInternalBufferLengthD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringInternalBufferLength> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringInternalBufferLength>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringInternalBufferLength __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringInternalBufferLength(native.ToPointer(), skipVTables);
        }

        public static wxStringInternalBufferLength __CreateInstance(wxStringInternalBufferLength.Internal native, bool skipVTables = false)
        {
            return new wxStringInternalBufferLength(native, skipVTables);
        }

        private static void* __CopyValue(wxStringInternalBufferLength.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            *(wxStringInternalBufferLength.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStringInternalBufferLength(wxStringInternalBufferLength.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringInternalBufferLength(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringInternalBufferLength(wxString str, uint lenWanted)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, lenWanted);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringInternalBufferLength __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxUTF8StringBuffer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxUTF8StringBufferC2ER8wxStringm")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr str, uint lenWanted);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN18wxUTF8StringBufferD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxUTF8StringBuffer> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxUTF8StringBuffer>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxUTF8StringBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxUTF8StringBuffer(native.ToPointer(), skipVTables);
        }

        public static wxUTF8StringBuffer __CreateInstance(wxUTF8StringBuffer.Internal native, bool skipVTables = false)
        {
            return new wxUTF8StringBuffer(native, skipVTables);
        }

        private static void* __CopyValue(wxUTF8StringBuffer.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxUTF8StringBuffer.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxUTF8StringBuffer(wxUTF8StringBuffer.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxUTF8StringBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxUTF8StringBuffer(wxString str, uint lenWanted)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, lenWanted);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxUTF8StringBuffer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    public unsafe partial class wxUTF8StringBufferLength : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxUTF8StringBufferLengthC2ER8wxStringm")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr str, uint lenWanted);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxUTF8StringBufferLengthD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxUTF8StringBufferLength> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxUTF8StringBufferLength>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxUTF8StringBufferLength __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxUTF8StringBufferLength(native.ToPointer(), skipVTables);
        }

        public static wxUTF8StringBufferLength __CreateInstance(wxUTF8StringBufferLength.Internal native, bool skipVTables = false)
        {
            return new wxUTF8StringBufferLength(native, skipVTables);
        }

        private static void* __CopyValue(wxUTF8StringBufferLength.Internal native)
        {
            var ret = Marshal.AllocHGlobal(16);
            *(wxUTF8StringBufferLength.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxUTF8StringBufferLength(wxUTF8StringBufferLength.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxUTF8StringBufferLength(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxUTF8StringBufferLength(wxString str, uint lenWanted)
        {
            __Instance = Marshal.AllocHGlobal(16);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0, lenWanted);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxUTF8StringBufferLength __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }
    }

    namespace wxPrivate
    {
    }

    namespace std
    {
        namespace __1
        {
        }
    }
}
