//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxStringOperationsWchar : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 0)]
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringOperationsWcharC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN23wxStringOperationsWchar10EncodeCharERK9wxUniChar")]
            internal static extern char EncodeChar_0(global::System.IntPtr ch);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringOperationsWchar> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxStringOperationsWchar>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxStringOperationsWchar __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxStringOperationsWchar(native.ToPointer(), skipVTables);
        }

        public static wxStringOperationsWchar __CreateInstance(wxStringOperationsWchar.Internal native, bool skipVTables = false)
        {
            return new wxStringOperationsWchar(native, skipVTables);
        }

        private static void* __CopyValue(wxStringOperationsWchar.Internal native)
        {
            var ret = Marshal.AllocHGlobal(0);
            *(wxStringOperationsWchar.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxStringOperationsWchar(wxStringOperationsWchar.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxStringOperationsWchar(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxStringOperationsWchar()
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public wxStringOperationsWchar(wxStringOperationsWchar _0)
        {
            __Instance = Marshal.AllocHGlobal(0);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((wxStringOperationsWchar.Internal*) __Instance) = *((wxStringOperationsWchar.Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxStringOperationsWchar __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public static char EncodeChar(wxUniChar ch)
        {
            if (ReferenceEquals(ch, null))
                throw new global::System.ArgumentNullException("ch", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ch.__Instance;
            var __ret = Internal.EncodeChar_0(arg0);
            return __ret;
        }
    }
}
