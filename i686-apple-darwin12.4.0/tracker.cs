//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe abstract partial class wxTrackerNode : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct Internal
        {
            [FieldOffset(4)]
            public global::System.IntPtr m_nxt;

            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxTrackerNodeC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxTrackerNodeC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN13wxTrackerNodeD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTrackerNode> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTrackerNode>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxTrackerNode __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxTrackerNodeInternal(native.ToPointer(), skipVTables);
        }

        public static wxTrackerNode __CreateInstance(wxTrackerNode.Internal native, bool skipVTables = false)
        {
            return new wxTrackerNodeInternal(native, skipVTables);
        }

        protected wxTrackerNode(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxTrackerNode()
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxTrackerNode");
        }

        protected wxTrackerNode(wxTrackerNode _0)
        {
            __Instance = Marshal.AllocHGlobal(8);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxTrackerNode");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxTrackerNode __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract void OnObjectDestroy();

        public virtual wxEventConnectionRef ToEventConnection()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___ToEventConnection_0Delegate = (Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr));
            var __ret = ___ToEventConnection_0Delegate((__Instance + __PointerAdjustment));
            wxEventConnectionRef __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxEventConnectionRef.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxEventConnectionRef) wxEventConnectionRef.NativeToManagedMap[__ret];
            else wxEventConnectionRef.NativeToManagedMap[__ret] = __result0 = (wxEventConnectionRef) wxEventConnectionRef.__CreateInstance(__ret);
            return __result0;
        }

        #region Virtual table interop

        // virtual ~wxTrackerNode()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxTrackerNode) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // void OnObjectDestroy() = 0
        private static Delegates.Action_IntPtr _OnObjectDestroy_0DelegateInstance;

        private static void _OnObjectDestroy_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxTrackerNode) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.OnObjectDestroy();
        }

        // wxEventConnectionRef *ToEventConnection()
        private static Delegates.Func_IntPtr_IntPtr _ToEventConnection_0DelegateInstance;

        private static global::System.IntPtr _ToEventConnection_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxTrackerNode) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            var __ret = __target.ToEventConnection();
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _OnObjectDestroy_0DelegateInstance += _OnObjectDestroy_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_OnObjectDestroy_0DelegateInstance).ToPointer();
                _ToEventConnection_0DelegateInstance += _ToEventConnection_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ToEventConnection_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxTrackable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_first;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxTrackableC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxTrackableC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxTrackableD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxTrackable7AddNodeEP13wxTrackerNode")]
            internal static extern void AddNode_0(global::System.IntPtr instance, global::System.IntPtr prn);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN11wxTrackable10RemoveNodeEP13wxTrackerNode")]
            internal static extern void RemoveNode_0(global::System.IntPtr instance, global::System.IntPtr prn);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK11wxTrackable8GetFirstEv")]
            internal static extern global::System.IntPtr GetFirst_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTrackable> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTrackable>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxTrackable __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxTrackable(native.ToPointer(), skipVTables);
        }

        public static wxTrackable __CreateInstance(wxTrackable.Internal native, bool skipVTables = false)
        {
            return new wxTrackable(native, skipVTables);
        }

        private static void* __CopyValue(wxTrackable.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxTrackable.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxTrackable(wxTrackable.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxTrackable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        protected wxTrackable()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        protected wxTrackable(wxTrackable _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxTrackable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void AddNode(wxTrackerNode prn)
        {
            var arg0 = ReferenceEquals(prn, null) ? global::System.IntPtr.Zero : prn.__Instance;
            Internal.AddNode_0((__Instance + __PointerAdjustment), arg0);
        }

        public void RemoveNode(wxTrackerNode prn)
        {
            var arg0 = ReferenceEquals(prn, null) ? global::System.IntPtr.Zero : prn.__Instance;
            Internal.RemoveNode_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxTrackerNode GetFirst()
        {
            var __ret = Internal.GetFirst_0((__Instance + __PointerAdjustment));
            wxTrackerNode __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxTrackerNode.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxTrackerNode) wxTrackerNode.NativeToManagedMap[__ret];
            else wxTrackerNode.NativeToManagedMap[__ret] = __result0 = (wxTrackerNode) wxTrackerNode.__CreateInstance(__ret);
            return __result0;
        }

        protected wxTrackerNode m_first
        {
            get
            {
                wxTrackerNode __result0;
                if (((Internal*) __Instance)->m_first == IntPtr.Zero) __result0 = null;
                else if (wxTrackerNode.NativeToManagedMap.ContainsKey(((Internal*) __Instance)->m_first))
                    __result0 = (wxTrackerNode) wxTrackerNode.NativeToManagedMap[((Internal*) __Instance)->m_first];
                else wxTrackerNode.NativeToManagedMap[((Internal*) __Instance)->m_first] = __result0 = (wxTrackerNode) wxTrackerNode.__CreateInstance(((Internal*) __Instance)->m_first);
                return __result0;
            }

            set
            {
                ((Internal*) __Instance)->m_first = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    internal unsafe partial class wxTrackerNodeInternal : wxTrackerNode, IDisposable
    {
        private static void* __CopyValue(wxTrackerNode.Internal native)
        {
            var ret = Marshal.AllocHGlobal(8);
            *(wxTrackerNode.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxTrackerNodeInternal(wxTrackerNode.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxTrackerNodeInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override void OnObjectDestroy()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___OnObjectDestroy_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
            ___OnObjectDestroy_0Delegate((__Instance + __PointerAdjustment));
        }
    }
}
