//----------------------------------------------------------------------------
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
//----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace wxSharp
{
    public unsafe partial class wxPluralFormsCalculatorPtr : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_ptr;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxPluralFormsCalculatorPtrD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN26wxPluralFormsCalculatorPtr4swapERS_")]
            internal static extern void swap_0(global::System.IntPtr instance, global::System.IntPtr ot);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPluralFormsCalculatorPtr> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxPluralFormsCalculatorPtr>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxPluralFormsCalculatorPtr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxPluralFormsCalculatorPtr(native.ToPointer(), skipVTables);
        }

        public static wxPluralFormsCalculatorPtr __CreateInstance(wxPluralFormsCalculatorPtr.Internal native, bool skipVTables = false)
        {
            return new wxPluralFormsCalculatorPtr(native, skipVTables);
        }

        private static void* __CopyValue(wxPluralFormsCalculatorPtr.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxPluralFormsCalculatorPtr.Internal*) ret = native;
            return ret.ToPointer();
        }

        private wxPluralFormsCalculatorPtr(wxPluralFormsCalculatorPtr.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxPluralFormsCalculatorPtr(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxPluralFormsCalculatorPtr __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void swap(wxPluralFormsCalculatorPtr ot)
        {
            if (ReferenceEquals(ot, null))
                throw new global::System.ArgumentNullException("ot", "Cannot be null because it is a C++ reference (&).");
            var arg0 = ot.__Instance;
            Internal.swap_0((__Instance + __PointerAdjustment), arg0);
        }
    }

    public unsafe partial class wxMsgCatalog : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr m_pNext;

            [FieldOffset(4)]
            public wxStringToStringHashMap.Internal m_messages;

            [FieldOffset(20)]
            public wxString.Internal m_domain;

            [FieldOffset(40)]
            public wxPluralFormsCalculatorPtr.Internal m_pluralFormsCalculator;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMsgCatalogC2ERK8wxString")]
            internal static extern void ctor_0(global::System.IntPtr instance, global::System.IntPtr domain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMsgCatalogC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMsgCatalogD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN12wxMsgCatalog14CreateFromFileERK8wxStringS2_")]
            internal static extern global::System.IntPtr CreateFromFile_0(global::System.IntPtr filename, global::System.IntPtr domain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMsgCatalog9GetDomainEv")]
            internal static extern void GetDomain_0(global::System.IntPtr @return, global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK12wxMsgCatalog9GetStringERK8wxStringj")]
            internal static extern global::System.IntPtr GetString_0(global::System.IntPtr instance, global::System.IntPtr sz, uint n);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxMsgCatalog> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxMsgCatalog>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxMsgCatalog __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxMsgCatalog(native.ToPointer(), skipVTables);
        }

        public static wxMsgCatalog __CreateInstance(wxMsgCatalog.Internal native, bool skipVTables = false)
        {
            return new wxMsgCatalog(native, skipVTables);
        }

        private static void* __CopyValue(wxMsgCatalog.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            wxMsgCatalog.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxMsgCatalog(wxMsgCatalog.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxMsgCatalog(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        protected wxMsgCatalog(wxString domain)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            Internal.ctor_0((__Instance + __PointerAdjustment), arg0);
        }

        public wxMsgCatalog(wxMsgCatalog _0)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxMsgCatalog __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public wxString GetDomain()
        {
            var __ret = new wxString.Internal();
            Internal.GetDomain_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment));
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetString(wxString sz, uint n)
        {
            if (ReferenceEquals(sz, null))
                throw new global::System.ArgumentNullException("sz", "Cannot be null because it is a C++ reference (&).");
            var arg0 = sz.__Instance;
            var __ret = Internal.GetString_0((__Instance + __PointerAdjustment), arg0, n);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public static wxMsgCatalog CreateFromFile(wxString filename, wxString domain)
        {
            if (ReferenceEquals(filename, null))
                throw new global::System.ArgumentNullException("filename", "Cannot be null because it is a C++ reference (&).");
            var arg0 = filename.__Instance;
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg1 = domain.__Instance;
            var __ret = Internal.CreateFromFile_0(arg0, arg1);
            wxMsgCatalog __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMsgCatalog.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMsgCatalog) wxMsgCatalog.NativeToManagedMap[__ret];
            else __result0 = wxMsgCatalog.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe partial class wxTranslations : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 44)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public wxString.Internal m_lang;

            [FieldOffset(20)]
            public global::System.IntPtr m_loader;

            [FieldOffset(24)]
            public global::System.IntPtr m_pMsgCat;

            [FieldOffset(28)]
            internal wxTranslations.wxMsgCatalogMap.Internal m_catalogMap;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslationsC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslationsC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslationsD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations3GetEv")]
            internal static extern global::System.IntPtr Get_0();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations3SetEPS_")]
            internal static extern void Set_0(global::System.IntPtr t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations9SetLoaderEP20wxTranslationsLoader")]
            internal static extern void SetLoader_0(global::System.IntPtr instance, global::System.IntPtr loader);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations11SetLanguageE10wxLanguage")]
            internal static extern void SetLanguage_0(global::System.IntPtr instance, wxLanguage lang);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations11SetLanguageERK8wxString")]
            internal static extern void SetLanguage_1(global::System.IntPtr instance, global::System.IntPtr lang);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxTranslations24GetAvailableTranslationsERK8wxString")]
            internal static extern void GetAvailableTranslations_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr domain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations18GetBestTranslationERK8wxString10wxLanguage")]
            internal static extern void GetBestTranslation_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr domain, wxLanguage msgIdLanguage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations18GetBestTranslationERK8wxStringS2_")]
            internal static extern void GetBestTranslation_1(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr domain, global::System.IntPtr msgIdLanguage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations13AddStdCatalogEv")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool AddStdCatalog_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations10AddCatalogERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool AddCatalog_0(global::System.IntPtr instance, global::System.IntPtr domain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations10AddCatalogERK8wxString10wxLanguage")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool AddCatalog_1(global::System.IntPtr instance, global::System.IntPtr domain, wxLanguage msgIdLanguage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxTranslations8IsLoadedERK8wxString")]
            [return: MarshalAsAttribute(UnmanagedType.I1)]
            internal static extern bool IsLoaded_0(global::System.IntPtr instance, global::System.IntPtr domain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxTranslations19GetTranslatedStringERK8wxStringS2_")]
            internal static extern global::System.IntPtr GetTranslatedString_0(global::System.IntPtr instance, global::System.IntPtr origString, global::System.IntPtr domain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxTranslations19GetTranslatedStringERK8wxStringjS2_")]
            internal static extern global::System.IntPtr GetTranslatedString_1(global::System.IntPtr instance, global::System.IntPtr origString, uint n, global::System.IntPtr domain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZNK14wxTranslations14GetHeaderValueERK8wxStringS2_")]
            internal static extern void GetHeaderValue_0(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr header, global::System.IntPtr domain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN14wxTranslations21GetUntranslatedStringERK8wxString")]
            internal static extern global::System.IntPtr GetUntranslatedString_0(global::System.IntPtr str);
        }

        internal unsafe partial class wxMsgCatalogMap_wxImplementation_Pair
        {
            [StructLayout(LayoutKind.Explicit, Size = 24)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public wxString.Internal first;

                [FieldOffset(20)]
                public global::System.IntPtr second;
            }
        }

        internal unsafe partial class wxMsgCatalogMap_wxImplementation_KeyEx
        {
            [StructLayout(LayoutKind.Explicit, Size = 0)]
            public partial struct Internal
            {
            }
        }

        internal unsafe partial class wxMsgCatalogMap_wxImplementation_HashTable
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct Internal
            {
                [FieldOffset(0)]
                public global::System.IntPtr m_table;

                [FieldOffset(4)]
                public uint m_tableBuckets;

                [FieldOffset(8)]
                public uint m_items;

                [FieldOffset(12)]
                public wxStringHash.Internal m_hasher;

                [FieldOffset(13)]
                public wxStringEqual.Internal m_equals;

                [FieldOffset(14)]
                internal wxTranslations.wxMsgCatalogMap_wxImplementation_KeyEx.Internal m_getKey;
            }

            public unsafe partial class Node
            {
                [StructLayout(LayoutKind.Explicit, Size = 28)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr m_next;

                    [FieldOffset(4)]
                    internal wxTranslations.wxMsgCatalogMap_wxImplementation_Pair.Internal m_value;
                }
            }

            public unsafe partial class Iterator
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    public global::System.IntPtr m_node;

                    [FieldOffset(4)]
                    public global::System.IntPtr m_ht;
                }
            }

            public unsafe partial class iterator
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct Internal
                {
                }
            }

            public unsafe partial class const_iterator
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct Internal
                {
                }
            }
        }

        internal unsafe partial class wxMsgCatalogMap
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct Internal
            {
            }

            public unsafe partial class Insert_Result
            {
                [StructLayout(LayoutKind.Explicit, Size = 12)]
                public partial struct Internal
                {
                    [FieldOffset(0)]
                    internal wxTranslations.wxMsgCatalogMap_wxImplementation_HashTable.iterator.Internal first;

                    [FieldOffset(8)]
                    public byte second;
                }
            }
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTranslations> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTranslations>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxTranslations __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxTranslations(native.ToPointer(), skipVTables);
        }

        public static wxTranslations __CreateInstance(wxTranslations.Internal native, bool skipVTables = false)
        {
            return new wxTranslations(native, skipVTables);
        }

        private static void* __CopyValue(wxTranslations.Internal native)
        {
            var ret = Marshal.AllocHGlobal(44);
            wxTranslations.Internal.cctor_1(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxTranslations(wxTranslations.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxTranslations(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public wxTranslations()
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
        }

        public wxTranslations(wxTranslations _0)
        {
            __Instance = Marshal.AllocHGlobal(44);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxTranslations __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public void SetLoader(wxTranslationsLoader loader)
        {
            var arg0 = ReferenceEquals(loader, null) ? global::System.IntPtr.Zero : loader.__Instance;
            Internal.SetLoader_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetLanguage(wxLanguage lang)
        {
            var arg0 = lang;
            Internal.SetLanguage_0((__Instance + __PointerAdjustment), arg0);
        }

        public void SetLanguage(wxString lang)
        {
            if (ReferenceEquals(lang, null))
                throw new global::System.ArgumentNullException("lang", "Cannot be null because it is a C++ reference (&).");
            var arg0 = lang.__Instance;
            Internal.SetLanguage_1((__Instance + __PointerAdjustment), arg0);
        }

        public wxArrayString GetAvailableTranslations(wxString domain)
        {
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            var __ret = new wxArrayString.Internal();
            Internal.GetAvailableTranslations_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxArrayString.__CreateInstance(__ret);
        }

        public wxString GetBestTranslation(wxString domain, wxLanguage msgIdLanguage)
        {
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            var arg1 = msgIdLanguage;
            var __ret = new wxString.Internal();
            Internal.GetBestTranslation_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public wxString GetBestTranslation(wxString domain, wxString msgIdLanguage)
        {
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            if (ReferenceEquals(msgIdLanguage, null))
                throw new global::System.ArgumentNullException("msgIdLanguage", "Cannot be null because it is a C++ reference (&).");
            var arg1 = msgIdLanguage.__Instance;
            var __ret = new wxString.Internal();
            Internal.GetBestTranslation_1(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public bool AddStdCatalog()
        {
            var __ret = Internal.AddStdCatalog_0((__Instance + __PointerAdjustment));
            return __ret;
        }

        public bool AddCatalog(wxString domain)
        {
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            var __ret = Internal.AddCatalog_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public bool AddCatalog(wxString domain, wxLanguage msgIdLanguage)
        {
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            var arg1 = msgIdLanguage;
            var __ret = Internal.AddCatalog_1((__Instance + __PointerAdjustment), arg0, arg1);
            return __ret;
        }

        public bool IsLoaded(wxString domain)
        {
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            var __ret = Internal.IsLoaded_0((__Instance + __PointerAdjustment), arg0);
            return __ret;
        }

        public wxString GetTranslatedString(wxString origString, wxString domain)
        {
            if (ReferenceEquals(origString, null))
                throw new global::System.ArgumentNullException("origString", "Cannot be null because it is a C++ reference (&).");
            var arg0 = origString.__Instance;
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg1 = domain.__Instance;
            var __ret = Internal.GetTranslatedString_0((__Instance + __PointerAdjustment), arg0, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString GetTranslatedString(wxString origString, uint n, wxString domain)
        {
            if (ReferenceEquals(origString, null))
                throw new global::System.ArgumentNullException("origString", "Cannot be null because it is a C++ reference (&).");
            var arg0 = origString.__Instance;
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg2 = domain.__Instance;
            var __ret = Internal.GetTranslatedString_1((__Instance + __PointerAdjustment), arg0, n, arg2);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public wxString GetHeaderValue(wxString header, wxString domain)
        {
            if (ReferenceEquals(header, null))
                throw new global::System.ArgumentNullException("header", "Cannot be null because it is a C++ reference (&).");
            var arg0 = header.__Instance;
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg1 = domain.__Instance;
            var __ret = new wxString.Internal();
            Internal.GetHeaderValue_0(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0, arg1);
            return wxString.__CreateInstance(__ret);
        }

        public static wxTranslations Get()
        {
            var __ret = Internal.Get_0();
            wxTranslations __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxTranslations.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxTranslations) wxTranslations.NativeToManagedMap[__ret];
            else __result0 = wxTranslations.__CreateInstance(__ret);
            return __result0;
        }

        public static void Set(wxTranslations t)
        {
            var arg0 = ReferenceEquals(t, null) ? global::System.IntPtr.Zero : t.__Instance;
            Internal.Set_0(arg0);
        }

        public static wxString GetUntranslatedString(wxString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            var __ret = Internal.GetUntranslatedString_0(arg0);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }
    }

    public unsafe abstract partial class wxTranslationsLoader : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxTranslationsLoaderC2Ev")]
            internal static extern void ctor_0(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxTranslationsLoaderC2ERKS_")]
            internal static extern void cctor_1(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN20wxTranslationsLoaderD2Ev")]
            internal static extern void dtor_0(global::System.IntPtr instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        public static readonly System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTranslationsLoader> NativeToManagedMap = new System.Collections.Concurrent.ConcurrentDictionary<IntPtr, wxTranslationsLoader>();
        protected void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        public static wxTranslationsLoader __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxTranslationsLoaderInternal(native.ToPointer(), skipVTables);
        }

        public static wxTranslationsLoader __CreateInstance(wxTranslationsLoader.Internal native, bool skipVTables = false)
        {
            return new wxTranslationsLoaderInternal(native, skipVTables);
        }

        protected wxTranslationsLoader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        protected wxTranslationsLoader()
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_0((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxTranslationsLoader");
        }

        protected wxTranslationsLoader(wxTranslationsLoader _0)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_1((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxTranslationsLoader");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        protected virtual void Dispose(bool disposing)
        {
            wxTranslationsLoader __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((Internal*) __Instance)->vfptr0 = new global::System.IntPtr(__OriginalVTables[0]);
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 0 * 4);
            if (__slot != null)
            {
                var ___dtor_0Delegate = (Delegates.Action_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr));
                ___dtor_0Delegate((__Instance + __PointerAdjustment));
            }
            else
                Internal.dtor_0((__Instance + __PointerAdjustment));
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
        }

        public abstract wxMsgCatalog LoadCatalog(wxString domain, wxString lang);

        public abstract wxArrayString GetAvailableTranslations(wxString domain);

        #region Virtual table interop

        // virtual ~wxTranslationsLoader()
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxTranslationsLoader) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxMsgCatalog *LoadCatalog(const wxString& domain, const wxString& lang) = 0
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr _LoadCatalog_0DelegateInstance;

        private static global::System.IntPtr _LoadCatalog_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr domain, global::System.IntPtr lang)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxTranslationsLoader) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (domain == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(domain))
                __result0 = (wxString) wxString.NativeToManagedMap[domain];
            else __result0 = wxString.__CreateInstance(domain);
            wxString __result1;
            if (lang == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(lang))
                __result1 = (wxString) wxString.NativeToManagedMap[lang];
            else __result1 = wxString.__CreateInstance(lang);
            var __ret = __target.LoadCatalog(__result0, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxArrayString GetAvailableTranslations(const wxString& domain) const = 0
        private static Delegates.Action_IntPtr_IntPtr_IntPtr _GetAvailableTranslations_0DelegateInstance;

        private static void _GetAvailableTranslations_0DelegateHook(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr domain)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxTranslationsLoader) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result1;
            if (domain == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(domain))
                __result1 = (wxString) wxString.NativeToManagedMap[domain];
            else __result1 = wxString.__CreateInstance(domain);
            var __ret = __target.GetAvailableTranslations(__result1);
            *(wxArrayString.Internal*) @return = ReferenceEquals(__ret, null) ? new wxArrayString.Internal() : *(wxArrayString.Internal*) (__ret.__Instance);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _LoadCatalog_0DelegateInstance += _LoadCatalog_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_LoadCatalog_0DelegateInstance).ToPointer();
                _GetAvailableTranslations_0DelegateInstance += _GetAvailableTranslations_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetAvailableTranslations_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    public unsafe partial class wxFileTranslationsLoader : wxTranslationsLoader, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 4)]
        public new partial struct Internal
        {
            [FieldOffset(0)]
            public global::System.IntPtr vfptr0;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxFileTranslationsLoaderC2Ev")]
            internal static extern void ctor_1(global::System.IntPtr instance);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxFileTranslationsLoaderC2ERKS_")]
            internal static extern void cctor_2(global::System.IntPtr instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_ZN24wxFileTranslationsLoader26AddCatalogLookupPathPrefixERK8wxString")]
            internal static extern void AddCatalogLookupPathPrefix_0(global::System.IntPtr prefix);
        }

        public static new wxFileTranslationsLoader __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new wxFileTranslationsLoader(native.ToPointer(), skipVTables);
        }

        public static wxFileTranslationsLoader __CreateInstance(wxFileTranslationsLoader.Internal native, bool skipVTables = false)
        {
            return new wxFileTranslationsLoader(native, skipVTables);
        }

        private static void* __CopyValue(wxFileTranslationsLoader.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            wxFileTranslationsLoader.Internal.cctor_2(ret, new global::System.IntPtr(&native));
            return ret.ToPointer();
        }

        private wxFileTranslationsLoader(wxFileTranslationsLoader.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected wxFileTranslationsLoader(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
            if (skipVTables)
                __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
            else
                SetupVTables(true);
        }

        public wxFileTranslationsLoader()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            Internal.ctor_1((__Instance + __PointerAdjustment));
            SetupVTables(GetType().FullName == "wxSharp.wxFileTranslationsLoader");
        }

        public wxFileTranslationsLoader(wxFileTranslationsLoader _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(4);
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var arg0 = _0.__Instance;
            Internal.cctor_2((__Instance + __PointerAdjustment), arg0);
            SetupVTables(GetType().FullName == "wxSharp.wxFileTranslationsLoader");
        }

        public override wxMsgCatalog LoadCatalog(wxString domain, wxString lang)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___LoadCatalog_0Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            if (ReferenceEquals(lang, null))
                throw new global::System.ArgumentNullException("lang", "Cannot be null because it is a C++ reference (&).");
            var arg1 = lang.__Instance;
            var __ret = ___LoadCatalog_0Delegate((__Instance + __PointerAdjustment), arg0, arg1);
            wxMsgCatalog __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMsgCatalog.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMsgCatalog) wxMsgCatalog.NativeToManagedMap[__ret];
            else __result0 = wxMsgCatalog.__CreateInstance(__ret);
            return __result0;
        }

        public override wxArrayString GetAvailableTranslations(wxString domain)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___GetAvailableTranslations_0Delegate = (Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            var __ret = new wxArrayString.Internal();
            ___GetAvailableTranslations_0Delegate(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxArrayString.__CreateInstance(__ret);
        }

        public static void AddCatalogLookupPathPrefix(wxString prefix)
        {
            if (ReferenceEquals(prefix, null))
                throw new global::System.ArgumentNullException("prefix", "Cannot be null because it is a C++ reference (&).");
            var arg0 = prefix.__Instance;
            Internal.AddCatalogLookupPathPrefix_0(arg0);
        }

        #region Virtual table interop

        // wxFileTranslationsLoader
        private static Delegates.Action_IntPtr _dtor_0DelegateInstance;

        private static void _dtor_0DelegateHook(global::System.IntPtr instance)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFileTranslationsLoader) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            __target.Dispose(false);
        }

        // wxMsgCatalog *LoadCatalog(const wxString& domain, const wxString& lang) wxOVERRIDE
        private static Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr _LoadCatalog_0DelegateInstance;

        private static global::System.IntPtr _LoadCatalog_0DelegateHook(global::System.IntPtr instance, global::System.IntPtr domain, global::System.IntPtr lang)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFileTranslationsLoader) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result0;
            if (domain == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(domain))
                __result0 = (wxString) wxString.NativeToManagedMap[domain];
            else __result0 = wxString.__CreateInstance(domain);
            wxString __result1;
            if (lang == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(lang))
                __result1 = (wxString) wxString.NativeToManagedMap[lang];
            else __result1 = wxString.__CreateInstance(lang);
            var __ret = __target.LoadCatalog(__result0, __result1);
            return ReferenceEquals(__ret, null) ? global::System.IntPtr.Zero : __ret.__Instance;
        }

        // wxArrayString GetAvailableTranslations(const wxString& domain) const wxOVERRIDE
        private static Delegates.Action_IntPtr_IntPtr_IntPtr _GetAvailableTranslations_0DelegateInstance;

        private static void _GetAvailableTranslations_0DelegateHook(global::System.IntPtr @return, global::System.IntPtr instance, global::System.IntPtr domain)
        {
            if (!NativeToManagedMap.ContainsKey(instance))
                throw new global::System.Exception("No managed instance was found");

            var __target = (wxFileTranslationsLoader) NativeToManagedMap[instance];
            if (__target.__ownsNativeInstance)
                __target.SetupVTables();
            wxString __result1;
            if (domain == IntPtr.Zero) __result1 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(domain))
                __result1 = (wxString) wxString.NativeToManagedMap[domain];
            else __result1 = wxString.__CreateInstance(domain);
            var __ret = __target.GetAvailableTranslations(__result1);
            *(wxArrayString.Internal*) @return = ReferenceEquals(__ret, null) ? new wxArrayString.Internal() : *(wxArrayString.Internal*) (__ret.__Instance);
        }

        private static void*[] __ManagedVTables;
        private static void*[] __ManagedVTablesDtorOnly;
        private static void*[] _Thunks;

        private void SetupVTables(bool destructorOnly = false)
        {
            if (__OriginalVTables != null)
                return;
            var native = (Internal*) __Instance.ToPointer();

            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };

            if (_Thunks == null)
            {
                _Thunks = new void*[3];
                _dtor_0DelegateInstance += _dtor_0DelegateHook;
                _Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtor_0DelegateInstance).ToPointer();
                _LoadCatalog_0DelegateInstance += _LoadCatalog_0DelegateHook;
                _Thunks[1] = Marshal.GetFunctionPointerForDelegate(_LoadCatalog_0DelegateInstance).ToPointer();
                _GetAvailableTranslations_0DelegateInstance += _GetAvailableTranslations_0DelegateHook;
                _Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetAvailableTranslations_0DelegateInstance).ToPointer();
            }

            if (destructorOnly)
            {
                if (__ManagedVTablesDtorOnly == null)
                {
                    __ManagedVTablesDtorOnly = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTablesDtorOnly[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = *(void**)(native->vfptr0 + 8);
                    *(void**)(vfptr0 + 12) = *(void**)(native->vfptr0 + 12);
                }

                native->vfptr0 = new IntPtr(__ManagedVTablesDtorOnly[0]);
            }
            else
            {
                if (__ManagedVTables == null)
                {
                    __ManagedVTables = new void*[1];
                    var vtptr = Marshal.AllocHGlobal(6 * 4);
                    var vfptr0 = vtptr + 2 * 4;
                    __ManagedVTables[0] = vfptr0.ToPointer();
                    *(void**)(vfptr0 + -8) = *(void**)(native->vfptr0 + -8);
                    *(void**)(vfptr0 + -4) = *(void**)(native->vfptr0 + -4);
                    *(void**)(vfptr0 + 0) = *(void**)(native->vfptr0 + 0);
                    *(void**)(vfptr0 + 4) = _Thunks[0];
                    *(void**)(vfptr0 + 8) = _Thunks[1];
                    *(void**)(vfptr0 + 12) = _Thunks[2];
                }

                native->vfptr0 = new IntPtr(__ManagedVTables[0]);
            }
        }

        #endregion
    }

    internal unsafe partial class wxTranslationsLoaderInternal : wxTranslationsLoader, IDisposable
    {
        private static void* __CopyValue(wxTranslationsLoader.Internal native)
        {
            var ret = Marshal.AllocHGlobal(4);
            *(wxTranslationsLoader.Internal*) ret = native;
            return ret.ToPointer();
        }

        internal wxTranslationsLoaderInternal(wxTranslationsLoader.Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        internal wxTranslationsLoaderInternal(void* native, bool skipVTables = false)
            : base((void*) null)
        {
            __PointerAdjustment = 0;
            __Instance = new global::System.IntPtr(native);
            __OriginalVTables = new void*[] { ((Internal*) native)->vfptr0.ToPointer() };
        }

        public override wxMsgCatalog LoadCatalog(wxString domain, wxString lang)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 2 * 4);
            var ___LoadCatalog_0Delegate = (Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Func_IntPtr_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            if (ReferenceEquals(lang, null))
                throw new global::System.ArgumentNullException("lang", "Cannot be null because it is a C++ reference (&).");
            var arg1 = lang.__Instance;
            var __ret = ___LoadCatalog_0Delegate((__Instance + __PointerAdjustment), arg0, arg1);
            wxMsgCatalog __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxMsgCatalog.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxMsgCatalog) wxMsgCatalog.NativeToManagedMap[__ret];
            else __result0 = wxMsgCatalog.__CreateInstance(__ret);
            return __result0;
        }

        public override wxArrayString GetAvailableTranslations(wxString domain)
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 3 * 4);
            var ___GetAvailableTranslations_0Delegate = (Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(Delegates.Action_IntPtr_IntPtr_IntPtr));
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg0 = domain.__Instance;
            var __ret = new wxArrayString.Internal();
            ___GetAvailableTranslations_0Delegate(new IntPtr(&__ret), (__Instance + __PointerAdjustment), arg0);
            return wxArrayString.__CreateInstance(__ret);
        }
    }

    public unsafe partial class translation
    {
        public partial struct Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxGetTranslationRK8wxStringS1_")]
            internal static extern global::System.IntPtr wxGetTranslation_0(global::System.IntPtr str, global::System.IntPtr domain);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("wxSharp", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="_Z16wxGetTranslationRK8wxStringS1_jS1_")]
            internal static extern global::System.IntPtr wxGetTranslation_1(global::System.IntPtr str1, global::System.IntPtr str2, uint n, global::System.IntPtr domain);
        }

        public static wxString wxGetTranslation(wxString str, wxString domain)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str.__Instance;
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg1 = domain.__Instance;
            var __ret = Internal.wxGetTranslation_0(arg0, arg1);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }

        public static wxString wxGetTranslation(wxString str1, wxString str2, uint n, wxString domain)
        {
            if (ReferenceEquals(str1, null))
                throw new global::System.ArgumentNullException("str1", "Cannot be null because it is a C++ reference (&).");
            var arg0 = str1.__Instance;
            if (ReferenceEquals(str2, null))
                throw new global::System.ArgumentNullException("str2", "Cannot be null because it is a C++ reference (&).");
            var arg1 = str2.__Instance;
            if (ReferenceEquals(domain, null))
                throw new global::System.ArgumentNullException("domain", "Cannot be null because it is a C++ reference (&).");
            var arg3 = domain.__Instance;
            var __ret = Internal.wxGetTranslation_1(arg0, arg1, n, arg3);
            wxString __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (wxString.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (wxString) wxString.NativeToManagedMap[__ret];
            else __result0 = wxString.__CreateInstance(__ret);
            return __result0;
        }
    }
}
